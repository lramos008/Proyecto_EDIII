
EDIII_Control_Acceso.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000145a0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000180c8  08014740  08014740  00015740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802c808  0802c808  0002e090  2**0
                  CONTENTS
  4 .ARM          00000008  0802c808  0802c808  0002d808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802c810  0802c810  0002e090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802c810  0802c810  0002d810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802c814  0802c814  0002d814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  0802c818  0002e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016424  20000090  0802c8a8  0002e090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200164b4  0802c8a8  0002e4b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002e090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002945f  00000000  00000000  0002e0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ebf  00000000  00000000  0005751f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002510  00000000  00000000  0005e3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b0d  00000000  00000000  000608f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a4f  00000000  00000000  000623fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036d35  00000000  00000000  00083e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2f14  00000000  00000000  000bab81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  0016da95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a178  00000000  00000000  0016db48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00177cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000504b  00000000  00000000  00177d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000001d0  00000000  00000000  0017cd6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014728 	.word	0x08014728

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08014728 	.word	0x08014728

080001e0 <arm_bitreversal_32>:
 80001e0:	1c4b      	adds	r3, r1, #1
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf98      	it	ls
 80001e6:	4770      	bxls	lr
 80001e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ec:	1c91      	adds	r1, r2, #2
 80001ee:	089b      	lsrs	r3, r3, #2

080001f0 <arm_bitreversal_32_0>:
 80001f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f8:	880a      	ldrh	r2, [r1, #0]
 80001fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001fe:	4480      	add	r8, r0
 8000200:	4481      	add	r9, r0
 8000202:	4402      	add	r2, r0
 8000204:	4484      	add	ip, r0
 8000206:	f8d9 7000 	ldr.w	r7, [r9]
 800020a:	f8d8 6000 	ldr.w	r6, [r8]
 800020e:	6815      	ldr	r5, [r2, #0]
 8000210:	f8dc 4000 	ldr.w	r4, [ip]
 8000214:	f8c9 6000 	str.w	r6, [r9]
 8000218:	f8c8 7000 	str.w	r7, [r8]
 800021c:	f8cc 5000 	str.w	r5, [ip]
 8000220:	6014      	str	r4, [r2, #0]
 8000222:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000226:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800022a:	6855      	ldr	r5, [r2, #4]
 800022c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000230:	f8c9 6004 	str.w	r6, [r9, #4]
 8000234:	f8c8 7004 	str.w	r7, [r8, #4]
 8000238:	f8cc 5004 	str.w	r5, [ip, #4]
 800023c:	6054      	str	r4, [r2, #4]
 800023e:	3108      	adds	r1, #8
 8000240:	3b01      	subs	r3, #1
 8000242:	d1d5      	bne.n	80001f0 <arm_bitreversal_32_0>
 8000244:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	4770      	bx	lr

0800024a <arm_bitreversal_16>:
 800024a:	1c4b      	adds	r3, r1, #1
 800024c:	2b01      	cmp	r3, #1
 800024e:	bf98      	it	ls
 8000250:	4770      	bxls	lr
 8000252:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000256:	1c91      	adds	r1, r2, #2
 8000258:	089b      	lsrs	r3, r3, #2

0800025a <arm_bitreversal_16_0>:
 800025a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800025e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000262:	880a      	ldrh	r2, [r1, #0]
 8000264:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000268:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800026c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000270:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000274:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000278:	f8d9 7000 	ldr.w	r7, [r9]
 800027c:	f8d8 6000 	ldr.w	r6, [r8]
 8000280:	6815      	ldr	r5, [r2, #0]
 8000282:	f8dc 4000 	ldr.w	r4, [ip]
 8000286:	f8c9 6000 	str.w	r6, [r9]
 800028a:	f8c8 7000 	str.w	r7, [r8]
 800028e:	f8cc 5000 	str.w	r5, [ip]
 8000292:	6014      	str	r4, [r2, #0]
 8000294:	3108      	adds	r1, #8
 8000296:	3b01      	subs	r3, #1
 8000298:	d1df      	bne.n	800025a <arm_bitreversal_16_0>
 800029a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	4770      	bx	lr

080002a0 <strcmp>:
 80002a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002a8:	2a01      	cmp	r2, #1
 80002aa:	bf28      	it	cs
 80002ac:	429a      	cmpcs	r2, r3
 80002ae:	d0f7      	beq.n	80002a0 <strcmp>
 80002b0:	1ad0      	subs	r0, r2, r3
 80002b2:	4770      	bx	lr

080002b4 <strlen>:
 80002b4:	4603      	mov	r3, r0
 80002b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002ba:	2a00      	cmp	r2, #0
 80002bc:	d1fb      	bne.n	80002b6 <strlen+0x2>
 80002be:	1a18      	subs	r0, r3, r0
 80002c0:	3801      	subs	r0, #1
 80002c2:	4770      	bx	lr
	...

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	@ 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	3c01      	subs	r4, #1
 80004ac:	bf28      	it	cs
 80004ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004b2:	d2e9      	bcs.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b96a 	b.w	8000e98 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	460c      	mov	r4, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14e      	bne.n	8000c86 <__udivmoddi4+0xaa>
 8000be8:	4694      	mov	ip, r2
 8000bea:	458c      	cmp	ip, r1
 8000bec:	4686      	mov	lr, r0
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	d962      	bls.n	8000cba <__udivmoddi4+0xde>
 8000bf4:	b14a      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf6:	f1c2 0320 	rsb	r3, r2, #32
 8000bfa:	4091      	lsls	r1, r2
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	4319      	orrs	r1, r3
 8000c06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0e:	fa1f f68c 	uxth.w	r6, ip
 8000c12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c22:	fb04 f106 	mul.w	r1, r4, r6
 8000c26:	4299      	cmp	r1, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x64>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c32:	f080 8112 	bcs.w	8000e5a <__udivmoddi4+0x27e>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 810f 	bls.w	8000e5a <__udivmoddi4+0x27e>
 8000c3c:	3c02      	subs	r4, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a59      	subs	r1, r3, r1
 8000c42:	fa1f f38e 	uxth.w	r3, lr
 8000c46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c52:	fb00 f606 	mul.w	r6, r0, r6
 8000c56:	429e      	cmp	r6, r3
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x94>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c62:	f080 80fc 	bcs.w	8000e5e <__udivmoddi4+0x282>
 8000c66:	429e      	cmp	r6, r3
 8000c68:	f240 80f9 	bls.w	8000e5e <__udivmoddi4+0x282>
 8000c6c:	4463      	add	r3, ip
 8000c6e:	3802      	subs	r0, #2
 8000c70:	1b9b      	subs	r3, r3, r6
 8000c72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c76:	2100      	movs	r1, #0
 8000c78:	b11d      	cbz	r5, 8000c82 <__udivmoddi4+0xa6>
 8000c7a:	40d3      	lsrs	r3, r2
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d905      	bls.n	8000c96 <__udivmoddi4+0xba>
 8000c8a:	b10d      	cbz	r5, 8000c90 <__udivmoddi4+0xb4>
 8000c8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c90:	2100      	movs	r1, #0
 8000c92:	4608      	mov	r0, r1
 8000c94:	e7f5      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000c96:	fab3 f183 	clz	r1, r3
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	d146      	bne.n	8000d2c <__udivmoddi4+0x150>
 8000c9e:	42a3      	cmp	r3, r4
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xcc>
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	f0c0 80f0 	bcc.w	8000e88 <__udivmoddi4+0x2ac>
 8000ca8:	1a86      	subs	r6, r0, r2
 8000caa:	eb64 0303 	sbc.w	r3, r4, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	2d00      	cmp	r5, #0
 8000cb2:	d0e6      	beq.n	8000c82 <__udivmoddi4+0xa6>
 8000cb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb8:	e7e3      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000cba:	2a00      	cmp	r2, #0
 8000cbc:	f040 8090 	bne.w	8000de0 <__udivmoddi4+0x204>
 8000cc0:	eba1 040c 	sub.w	r4, r1, ip
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	fa1f f78c 	uxth.w	r7, ip
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cde:	fb07 f006 	mul.w	r0, r7, r6
 8000ce2:	4298      	cmp	r0, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x11c>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x11a>
 8000cf0:	4298      	cmp	r0, r3
 8000cf2:	f200 80cd 	bhi.w	8000e90 <__udivmoddi4+0x2b4>
 8000cf6:	4626      	mov	r6, r4
 8000cf8:	1a1c      	subs	r4, r3, r0
 8000cfa:	fa1f f38e 	uxth.w	r3, lr
 8000cfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d02:	fb08 4410 	mls	r4, r8, r0, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb00 f707 	mul.w	r7, r0, r7
 8000d0e:	429f      	cmp	r7, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x148>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x146>
 8000d1c:	429f      	cmp	r7, r3
 8000d1e:	f200 80b0 	bhi.w	8000e82 <__udivmoddi4+0x2a6>
 8000d22:	4620      	mov	r0, r4
 8000d24:	1bdb      	subs	r3, r3, r7
 8000d26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0x9c>
 8000d2c:	f1c1 0620 	rsb	r6, r1, #32
 8000d30:	408b      	lsls	r3, r1
 8000d32:	fa22 f706 	lsr.w	r7, r2, r6
 8000d36:	431f      	orrs	r7, r3
 8000d38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d40:	ea43 030c 	orr.w	r3, r3, ip
 8000d44:	40f4      	lsrs	r4, r6
 8000d46:	fa00 f801 	lsl.w	r8, r0, r1
 8000d4a:	0c38      	lsrs	r0, r7, #16
 8000d4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d50:	fbb4 fef0 	udiv	lr, r4, r0
 8000d54:	fa1f fc87 	uxth.w	ip, r7
 8000d58:	fb00 441e 	mls	r4, r0, lr, r4
 8000d5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d60:	fb0e f90c 	mul.w	r9, lr, ip
 8000d64:	45a1      	cmp	r9, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	d90a      	bls.n	8000d82 <__udivmoddi4+0x1a6>
 8000d6c:	193c      	adds	r4, r7, r4
 8000d6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d72:	f080 8084 	bcs.w	8000e7e <__udivmoddi4+0x2a2>
 8000d76:	45a1      	cmp	r9, r4
 8000d78:	f240 8081 	bls.w	8000e7e <__udivmoddi4+0x2a2>
 8000d7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d80:	443c      	add	r4, r7
 8000d82:	eba4 0409 	sub.w	r4, r4, r9
 8000d86:	fa1f f983 	uxth.w	r9, r3
 8000d8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x1d2>
 8000d9e:	193c      	adds	r4, r7, r4
 8000da0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da4:	d267      	bcs.n	8000e76 <__udivmoddi4+0x29a>
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d965      	bls.n	8000e76 <__udivmoddi4+0x29a>
 8000daa:	3b02      	subs	r3, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000db2:	fba0 9302 	umull	r9, r3, r0, r2
 8000db6:	eba4 040c 	sub.w	r4, r4, ip
 8000dba:	429c      	cmp	r4, r3
 8000dbc:	46ce      	mov	lr, r9
 8000dbe:	469c      	mov	ip, r3
 8000dc0:	d351      	bcc.n	8000e66 <__udivmoddi4+0x28a>
 8000dc2:	d04e      	beq.n	8000e62 <__udivmoddi4+0x286>
 8000dc4:	b155      	cbz	r5, 8000ddc <__udivmoddi4+0x200>
 8000dc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dca:	eb64 040c 	sbc.w	r4, r4, ip
 8000dce:	fa04 f606 	lsl.w	r6, r4, r6
 8000dd2:	40cb      	lsrs	r3, r1
 8000dd4:	431e      	orrs	r6, r3
 8000dd6:	40cc      	lsrs	r4, r1
 8000dd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	e750      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f103 	lsr.w	r1, r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	fa24 f303 	lsr.w	r3, r4, r3
 8000df0:	4094      	lsls	r4, r2
 8000df2:	430c      	orrs	r4, r1
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dfc:	fa1f f78c 	uxth.w	r7, ip
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3110 	mls	r1, r8, r0, r3
 8000e08:	0c23      	lsrs	r3, r4, #16
 8000e0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0e:	fb00 f107 	mul.w	r1, r0, r7
 8000e12:	4299      	cmp	r1, r3
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x24c>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1e:	d22c      	bcs.n	8000e7a <__udivmoddi4+0x29e>
 8000e20:	4299      	cmp	r1, r3
 8000e22:	d92a      	bls.n	8000e7a <__udivmoddi4+0x29e>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e30:	fb08 3311 	mls	r3, r8, r1, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb01 f307 	mul.w	r3, r1, r7
 8000e3c:	42a3      	cmp	r3, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x276>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e48:	d213      	bcs.n	8000e72 <__udivmoddi4+0x296>
 8000e4a:	42a3      	cmp	r3, r4
 8000e4c:	d911      	bls.n	8000e72 <__udivmoddi4+0x296>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	1ae4      	subs	r4, r4, r3
 8000e54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e58:	e739      	b.n	8000cce <__udivmoddi4+0xf2>
 8000e5a:	4604      	mov	r4, r0
 8000e5c:	e6f0      	b.n	8000c40 <__udivmoddi4+0x64>
 8000e5e:	4608      	mov	r0, r1
 8000e60:	e706      	b.n	8000c70 <__udivmoddi4+0x94>
 8000e62:	45c8      	cmp	r8, r9
 8000e64:	d2ae      	bcs.n	8000dc4 <__udivmoddi4+0x1e8>
 8000e66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6e:	3801      	subs	r0, #1
 8000e70:	e7a8      	b.n	8000dc4 <__udivmoddi4+0x1e8>
 8000e72:	4631      	mov	r1, r6
 8000e74:	e7ed      	b.n	8000e52 <__udivmoddi4+0x276>
 8000e76:	4603      	mov	r3, r0
 8000e78:	e799      	b.n	8000dae <__udivmoddi4+0x1d2>
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	e7d4      	b.n	8000e28 <__udivmoddi4+0x24c>
 8000e7e:	46d6      	mov	lr, sl
 8000e80:	e77f      	b.n	8000d82 <__udivmoddi4+0x1a6>
 8000e82:	4463      	add	r3, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	e74d      	b.n	8000d24 <__udivmoddi4+0x148>
 8000e88:	4606      	mov	r6, r0
 8000e8a:	4623      	mov	r3, r4
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	e70f      	b.n	8000cb0 <__udivmoddi4+0xd4>
 8000e90:	3e02      	subs	r6, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	e730      	b.n	8000cf8 <__udivmoddi4+0x11c>
 8000e96:	bf00      	nop

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ea6:	4802      	ldr	r0, [pc, #8]	@ (8000eb0 <SELECT+0x14>)
 8000ea8:	f005 f89a 	bl	8005fe0 <HAL_GPIO_WritePin>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40020000 	.word	0x40020000

08000eb4 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ebe:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <DESELECT+0x14>)
 8000ec0:	f005 f88e 	bl	8005fe0 <HAL_GPIO_WritePin>
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40020000 	.word	0x40020000

08000ecc <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 8000ed6:	bf00      	nop
 8000ed8:	4808      	ldr	r0, [pc, #32]	@ (8000efc <SPI_TxByte+0x30>)
 8000eda:	f007 f983 	bl	80081e4 <HAL_SPI_GetState>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d1f9      	bne.n	8000ed8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi3, &data, 1, SPI_TIMEOUT);
 8000ee4:	1df9      	adds	r1, r7, #7
 8000ee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eea:	2201      	movs	r2, #1
 8000eec:	4803      	ldr	r0, [pc, #12]	@ (8000efc <SPI_TxByte+0x30>)
 8000eee:	f006 fe8c 	bl	8007c0a <HAL_SPI_Transmit>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200001cc 	.word	0x200001cc

08000f00 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000f06:	23ff      	movs	r3, #255	@ 0xff
 8000f08:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY));
 8000f0e:	bf00      	nop
 8000f10:	4809      	ldr	r0, [pc, #36]	@ (8000f38 <SPI_RxByte+0x38>)
 8000f12:	f007 f967 	bl	80081e4 <HAL_SPI_GetState>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d1f9      	bne.n	8000f10 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi3, &dummy, &data, 1, SPI_TIMEOUT);
 8000f1c:	1dba      	adds	r2, r7, #6
 8000f1e:	1df9      	adds	r1, r7, #7
 8000f20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2301      	movs	r3, #1
 8000f28:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <SPI_RxByte+0x38>)
 8000f2a:	f006 ffb2 	bl	8007e92 <HAL_SPI_TransmitReceive>
  
  return data;
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200001cc 	.word	0x200001cc

08000f3c <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000f44:	f7ff ffdc 	bl	8000f00 <SPI_RxByte>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	701a      	strb	r2, [r3, #0]
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <SD_ReadyWait+0x34>)
 8000f60:	2232      	movs	r2, #50	@ 0x32
 8000f62:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8000f64:	f7ff ffcc 	bl	8000f00 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8000f68:	f7ff ffca 	bl	8000f00 <SPI_RxByte>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2bff      	cmp	r3, #255	@ 0xff
 8000f74:	d004      	beq.n	8000f80 <SD_ReadyWait+0x28>
 8000f76:	4b05      	ldr	r3, [pc, #20]	@ (8000f8c <SD_ReadyWait+0x34>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1f3      	bne.n	8000f68 <SD_ReadyWait+0x10>
  
  return res;
 8000f80:	79fb      	ldrb	r3, [r7, #7]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000312 	.word	0x20000312

08000f90 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000f96:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000f9a:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8000f9c:	f7ff ff8a 	bl	8000eb4 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	e005      	b.n	8000fb2 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000fa6:	20ff      	movs	r0, #255	@ 0xff
 8000fa8:	f7ff ff90 	bl	8000ecc <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	2b09      	cmp	r3, #9
 8000fb6:	ddf6      	ble.n	8000fa6 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000fb8:	f7ff ff70 	bl	8000e9c <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8000fbc:	2340      	movs	r3, #64	@ 0x40
 8000fbe:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000fd0:	2395      	movs	r3, #149	@ 0x95
 8000fd2:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	e009      	b.n	8000fee <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000fda:	1d3a      	adds	r2, r7, #4
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4413      	add	r3, r2
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff72 	bl	8000ecc <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3301      	adds	r3, #1
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b05      	cmp	r3, #5
 8000ff2:	ddf2      	ble.n	8000fda <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8000ff4:	e002      	b.n	8000ffc <SD_PowerOn+0x6c>
  {
    Count--;
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000ffc:	f7ff ff80 	bl	8000f00 <SPI_RxByte>
 8001000:	4603      	mov	r3, r0
 8001002:	2b01      	cmp	r3, #1
 8001004:	d002      	beq.n	800100c <SD_PowerOn+0x7c>
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1f4      	bne.n	8000ff6 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 800100c:	f7ff ff52 	bl	8000eb4 <DESELECT>
  SPI_TxByte(0XFF);
 8001010:	20ff      	movs	r0, #255	@ 0xff
 8001012:	f7ff ff5b 	bl	8000ecc <SPI_TxByte>
  
  PowerFlag = 1;
 8001016:	4b03      	ldr	r3, [pc, #12]	@ (8001024 <SD_PowerOn+0x94>)
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
}
 800101c:	bf00      	nop
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200000ad 	.word	0x200000ad

08001028 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800102c:	4b03      	ldr	r3, [pc, #12]	@ (800103c <SD_PowerOff+0x14>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	200000ad 	.word	0x200000ad

08001040 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001044:	4b03      	ldr	r3, [pc, #12]	@ (8001054 <SD_CheckPower+0x14>)
 8001046:	781b      	ldrb	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	200000ad 	.word	0x200000ad

08001058 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8001062:	4b17      	ldr	r3, [pc, #92]	@ (80010c0 <SD_RxDataBlock+0x68>)
 8001064:	220a      	movs	r2, #10
 8001066:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8001068:	f7ff ff4a 	bl	8000f00 <SPI_RxByte>
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	2bff      	cmp	r3, #255	@ 0xff
 8001074:	d104      	bne.n	8001080 <SD_RxDataBlock+0x28>
 8001076:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <SD_RxDataBlock+0x68>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1f3      	bne.n	8001068 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	2bfe      	cmp	r3, #254	@ 0xfe
 8001084:	d001      	beq.n	800108a <SD_RxDataBlock+0x32>
    return FALSE;
 8001086:	2300      	movs	r3, #0
 8001088:	e016      	b.n	80010b8 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	1c5a      	adds	r2, r3, #1
 800108e:	607a      	str	r2, [r7, #4]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff53 	bl	8000f3c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff4d 	bl	8000f3c <SPI_RxBytePtr>
  } while(btr -= 2);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	3b02      	subs	r3, #2
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1ed      	bne.n	800108a <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 80010ae:	f7ff ff27 	bl	8000f00 <SPI_RxByte>
  SPI_RxByte();
 80010b2:	f7ff ff25 	bl	8000f00 <SPI_RxByte>
  
  return TRUE;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000311 	.word	0x20000311

080010c4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80010d4:	f7ff ff40 	bl	8000f58 <SD_ReadyWait>
 80010d8:	4603      	mov	r3, r0
 80010da:	2bff      	cmp	r3, #255	@ 0xff
 80010dc:	d001      	beq.n	80010e2 <SD_TxDataBlock+0x1e>
    return FALSE;
 80010de:	2300      	movs	r3, #0
 80010e0:	e040      	b.n	8001164 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fef1 	bl	8000ecc <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80010ea:	78fb      	ldrb	r3, [r7, #3]
 80010ec:	2bfd      	cmp	r3, #253	@ 0xfd
 80010ee:	d031      	beq.n	8001154 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fee5 	bl	8000ecc <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	1c5a      	adds	r2, r3, #1
 8001106:	607a      	str	r2, [r7, #4]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fede 	bl	8000ecc <SPI_TxByte>
    } while (--wc);
 8001110:	7bbb      	ldrb	r3, [r7, #14]
 8001112:	3b01      	subs	r3, #1
 8001114:	73bb      	strb	r3, [r7, #14]
 8001116:	7bbb      	ldrb	r3, [r7, #14]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1eb      	bne.n	80010f4 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 800111c:	f7ff fef0 	bl	8000f00 <SPI_RxByte>
    SPI_RxByte();
 8001120:	f7ff feee 	bl	8000f00 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001124:	e00b      	b.n	800113e <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8001126:	f7ff feeb 	bl	8000f00 <SPI_RxByte>
 800112a:	4603      	mov	r3, r0
 800112c:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	f003 031f 	and.w	r3, r3, #31
 8001134:	2b05      	cmp	r3, #5
 8001136:	d006      	beq.n	8001146 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8001138:	7b7b      	ldrb	r3, [r7, #13]
 800113a:	3301      	adds	r3, #1
 800113c:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 800113e:	7b7b      	ldrb	r3, [r7, #13]
 8001140:	2b40      	cmp	r3, #64	@ 0x40
 8001142:	d9f0      	bls.n	8001126 <SD_TxDataBlock+0x62>
 8001144:	e000      	b.n	8001148 <SD_TxDataBlock+0x84>
        break;
 8001146:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001148:	bf00      	nop
 800114a:	f7ff fed9 	bl	8000f00 <SPI_RxByte>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0fa      	beq.n	800114a <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	f003 031f 	and.w	r3, r3, #31
 800115a:	2b05      	cmp	r3, #5
 800115c:	d101      	bne.n	8001162 <SD_TxDataBlock+0x9e>
    return TRUE;
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001178:	f7ff feee 	bl	8000f58 <SD_ReadyWait>
 800117c:	4603      	mov	r3, r0
 800117e:	2bff      	cmp	r3, #255	@ 0xff
 8001180:	d001      	beq.n	8001186 <SD_SendCmd+0x1a>
    return 0xFF;
 8001182:	23ff      	movs	r3, #255	@ 0xff
 8001184:	e040      	b.n	8001208 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fe9f 	bl	8000ecc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	0e1b      	lsrs	r3, r3, #24
 8001192:	b2db      	uxtb	r3, r3
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fe99 	bl	8000ecc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	0c1b      	lsrs	r3, r3, #16
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fe93 	bl	8000ecc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fe8d 	bl	8000ecc <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fe88 	bl	8000ecc <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 80011bc:	2300      	movs	r3, #0
 80011be:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	2b40      	cmp	r3, #64	@ 0x40
 80011c4:	d101      	bne.n	80011ca <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80011c6:	2395      	movs	r3, #149	@ 0x95
 80011c8:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b48      	cmp	r3, #72	@ 0x48
 80011ce:	d101      	bne.n	80011d4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80011d0:	2387      	movs	r3, #135	@ 0x87
 80011d2:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fe78 	bl	8000ecc <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	2b4c      	cmp	r3, #76	@ 0x4c
 80011e0:	d101      	bne.n	80011e6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80011e2:	f7ff fe8d 	bl	8000f00 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80011e6:	230a      	movs	r3, #10
 80011e8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80011ea:	f7ff fe89 	bl	8000f00 <SPI_RxByte>
 80011ee:	4603      	mov	r3, r0
 80011f0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80011f2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	da05      	bge.n	8001206 <SD_SendCmd+0x9a>
 80011fa:	7bbb      	ldrb	r3, [r7, #14]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	73bb      	strb	r3, [r7, #14]
 8001200:	7bbb      	ldrb	r3, [r7, #14]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f1      	bne.n	80011ea <SD_SendCmd+0x7e>
  
  return res;
 8001206:	7b7b      	ldrb	r3, [r7, #13]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001220:	2301      	movs	r3, #1
 8001222:	e0d5      	b.n	80013d0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001224:	4b6c      	ldr	r3, [pc, #432]	@ (80013d8 <SD_disk_initialize+0x1c8>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <SD_disk_initialize+0x2a>
    return Stat;        
 8001232:	4b69      	ldr	r3, [pc, #420]	@ (80013d8 <SD_disk_initialize+0x1c8>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	e0ca      	b.n	80013d0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800123a:	f7ff fea9 	bl	8000f90 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 800123e:	f7ff fe2d 	bl	8000e9c <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001246:	2100      	movs	r1, #0
 8001248:	2040      	movs	r0, #64	@ 0x40
 800124a:	f7ff ff8f 	bl	800116c <SD_SendCmd>
 800124e:	4603      	mov	r3, r0
 8001250:	2b01      	cmp	r3, #1
 8001252:	f040 80a5 	bne.w	80013a0 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001256:	4b61      	ldr	r3, [pc, #388]	@ (80013dc <SD_disk_initialize+0x1cc>)
 8001258:	2264      	movs	r2, #100	@ 0x64
 800125a:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 800125c:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001260:	2048      	movs	r0, #72	@ 0x48
 8001262:	f7ff ff83 	bl	800116c <SD_SendCmd>
 8001266:	4603      	mov	r3, r0
 8001268:	2b01      	cmp	r3, #1
 800126a:	d158      	bne.n	800131e <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800126c:	2300      	movs	r3, #0
 800126e:	73fb      	strb	r3, [r7, #15]
 8001270:	e00c      	b.n	800128c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001272:	7bfc      	ldrb	r4, [r7, #15]
 8001274:	f7ff fe44 	bl	8000f00 <SPI_RxByte>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	f104 0310 	add.w	r3, r4, #16
 8001280:	443b      	add	r3, r7
 8001282:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	3301      	adds	r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	2b03      	cmp	r3, #3
 8001290:	d9ef      	bls.n	8001272 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001292:	7abb      	ldrb	r3, [r7, #10]
 8001294:	2b01      	cmp	r3, #1
 8001296:	f040 8083 	bne.w	80013a0 <SD_disk_initialize+0x190>
 800129a:	7afb      	ldrb	r3, [r7, #11]
 800129c:	2baa      	cmp	r3, #170	@ 0xaa
 800129e:	d17f      	bne.n	80013a0 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80012a0:	2100      	movs	r1, #0
 80012a2:	2077      	movs	r0, #119	@ 0x77
 80012a4:	f7ff ff62 	bl	800116c <SD_SendCmd>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d807      	bhi.n	80012be <SD_disk_initialize+0xae>
 80012ae:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80012b2:	2069      	movs	r0, #105	@ 0x69
 80012b4:	f7ff ff5a 	bl	800116c <SD_SendCmd>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d005      	beq.n	80012ca <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80012be:	4b47      	ldr	r3, [pc, #284]	@ (80013dc <SD_disk_initialize+0x1cc>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1eb      	bne.n	80012a0 <SD_disk_initialize+0x90>
 80012c8:	e000      	b.n	80012cc <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80012ca:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80012cc:	4b43      	ldr	r3, [pc, #268]	@ (80013dc <SD_disk_initialize+0x1cc>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d064      	beq.n	80013a0 <SD_disk_initialize+0x190>
 80012d6:	2100      	movs	r1, #0
 80012d8:	207a      	movs	r0, #122	@ 0x7a
 80012da:	f7ff ff47 	bl	800116c <SD_SendCmd>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d15d      	bne.n	80013a0 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	e00c      	b.n	8001304 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80012ea:	7bfc      	ldrb	r4, [r7, #15]
 80012ec:	f7ff fe08 	bl	8000f00 <SPI_RxByte>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	f104 0310 	add.w	r3, r4, #16
 80012f8:	443b      	add	r3, r7
 80012fa:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	3301      	adds	r3, #1
 8001302:	73fb      	strb	r3, [r7, #15]
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	2b03      	cmp	r3, #3
 8001308:	d9ef      	bls.n	80012ea <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 800130a:	7a3b      	ldrb	r3, [r7, #8]
 800130c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SD_disk_initialize+0x108>
 8001314:	2306      	movs	r3, #6
 8001316:	e000      	b.n	800131a <SD_disk_initialize+0x10a>
 8001318:	2302      	movs	r3, #2
 800131a:	73bb      	strb	r3, [r7, #14]
 800131c:	e040      	b.n	80013a0 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800131e:	2100      	movs	r1, #0
 8001320:	2077      	movs	r0, #119	@ 0x77
 8001322:	f7ff ff23 	bl	800116c <SD_SendCmd>
 8001326:	4603      	mov	r3, r0
 8001328:	2b01      	cmp	r3, #1
 800132a:	d808      	bhi.n	800133e <SD_disk_initialize+0x12e>
 800132c:	2100      	movs	r1, #0
 800132e:	2069      	movs	r0, #105	@ 0x69
 8001330:	f7ff ff1c 	bl	800116c <SD_SendCmd>
 8001334:	4603      	mov	r3, r0
 8001336:	2b01      	cmp	r3, #1
 8001338:	d801      	bhi.n	800133e <SD_disk_initialize+0x12e>
 800133a:	2302      	movs	r3, #2
 800133c:	e000      	b.n	8001340 <SD_disk_initialize+0x130>
 800133e:	2301      	movs	r3, #1
 8001340:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001342:	7bbb      	ldrb	r3, [r7, #14]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d10e      	bne.n	8001366 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001348:	2100      	movs	r1, #0
 800134a:	2077      	movs	r0, #119	@ 0x77
 800134c:	f7ff ff0e 	bl	800116c <SD_SendCmd>
 8001350:	4603      	mov	r3, r0
 8001352:	2b01      	cmp	r3, #1
 8001354:	d80e      	bhi.n	8001374 <SD_disk_initialize+0x164>
 8001356:	2100      	movs	r1, #0
 8001358:	2069      	movs	r0, #105	@ 0x69
 800135a:	f7ff ff07 	bl	800116c <SD_SendCmd>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d107      	bne.n	8001374 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001364:	e00d      	b.n	8001382 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001366:	2100      	movs	r1, #0
 8001368:	2041      	movs	r0, #65	@ 0x41
 800136a:	f7ff feff 	bl	800116c <SD_SendCmd>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d005      	beq.n	8001380 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001374:	4b19      	ldr	r3, [pc, #100]	@ (80013dc <SD_disk_initialize+0x1cc>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1e1      	bne.n	8001342 <SD_disk_initialize+0x132>
 800137e:	e000      	b.n	8001382 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001380:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001382:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <SD_disk_initialize+0x1cc>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d007      	beq.n	800139c <SD_disk_initialize+0x18c>
 800138c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001390:	2050      	movs	r0, #80	@ 0x50
 8001392:	f7ff feeb 	bl	800116c <SD_SendCmd>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80013a0:	4a0f      	ldr	r2, [pc, #60]	@ (80013e0 <SD_disk_initialize+0x1d0>)
 80013a2:	7bbb      	ldrb	r3, [r7, #14]
 80013a4:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80013a6:	f7ff fd85 	bl	8000eb4 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80013aa:	f7ff fda9 	bl	8000f00 <SPI_RxByte>
  
  if (type) 
 80013ae:	7bbb      	ldrb	r3, [r7, #14]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d008      	beq.n	80013c6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80013b4:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <SD_disk_initialize+0x1c8>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	f023 0301 	bic.w	r3, r3, #1
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <SD_disk_initialize+0x1c8>)
 80013c2:	701a      	strb	r2, [r3, #0]
 80013c4:	e001      	b.n	80013ca <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80013c6:	f7ff fe2f 	bl	8001028 <SD_PowerOff>
  }
  
  return Stat;
 80013ca:	4b03      	ldr	r3, [pc, #12]	@ (80013d8 <SD_disk_initialize+0x1c8>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	b2db      	uxtb	r3, r3
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd90      	pop	{r4, r7, pc}
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000311 	.word	0x20000311
 80013e0:	200000ac 	.word	0x200000ac

080013e4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <SD_disk_status+0x14>
    return STA_NOINIT; 
 80013f4:	2301      	movs	r3, #1
 80013f6:	e002      	b.n	80013fe <SD_disk_status+0x1a>
  
  return Stat;
 80013f8:	4b04      	ldr	r3, [pc, #16]	@ (800140c <SD_disk_status+0x28>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b2db      	uxtb	r3, r3
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000000 	.word	0x20000000

08001410 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	4603      	mov	r3, r0
 800141e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d102      	bne.n	800142c <SD_disk_read+0x1c>
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <SD_disk_read+0x20>
    return RES_PARERR;
 800142c:	2304      	movs	r3, #4
 800142e:	e051      	b.n	80014d4 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001430:	4b2a      	ldr	r3, [pc, #168]	@ (80014dc <SD_disk_read+0xcc>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800143e:	2303      	movs	r3, #3
 8001440:	e048      	b.n	80014d4 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001442:	4b27      	ldr	r3, [pc, #156]	@ (80014e0 <SD_disk_read+0xd0>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	2b00      	cmp	r3, #0
 800144c:	d102      	bne.n	8001454 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	025b      	lsls	r3, r3, #9
 8001452:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001454:	f7ff fd22 	bl	8000e9c <SELECT>
  
  if (count == 1) 
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d111      	bne.n	8001482 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	2051      	movs	r0, #81	@ 0x51
 8001462:	f7ff fe83 	bl	800116c <SD_SendCmd>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d129      	bne.n	80014c0 <SD_disk_read+0xb0>
 800146c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001470:	68b8      	ldr	r0, [r7, #8]
 8001472:	f7ff fdf1 	bl	8001058 <SD_RxDataBlock>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d021      	beq.n	80014c0 <SD_disk_read+0xb0>
      count = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	e01e      	b.n	80014c0 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	2052      	movs	r0, #82	@ 0x52
 8001486:	f7ff fe71 	bl	800116c <SD_SendCmd>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d117      	bne.n	80014c0 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001490:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001494:	68b8      	ldr	r0, [r7, #8]
 8001496:	f7ff fddf 	bl	8001058 <SD_RxDataBlock>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00a      	beq.n	80014b6 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80014a6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1ed      	bne.n	8001490 <SD_disk_read+0x80>
 80014b4:	e000      	b.n	80014b8 <SD_disk_read+0xa8>
          break;
 80014b6:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 80014b8:	2100      	movs	r1, #0
 80014ba:	204c      	movs	r0, #76	@ 0x4c
 80014bc:	f7ff fe56 	bl	800116c <SD_SendCmd>
    }
  }
  
  DESELECT();
 80014c0:	f7ff fcf8 	bl	8000eb4 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80014c4:	f7ff fd1c 	bl	8000f00 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	bf14      	ite	ne
 80014ce:	2301      	movne	r3, #1
 80014d0:	2300      	moveq	r3, #0
 80014d2:	b2db      	uxtb	r3, r3
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000000 	.word	0x20000000
 80014e0:	200000ac 	.word	0x200000ac

080014e4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	4603      	mov	r3, r0
 80014f2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d102      	bne.n	8001500 <SD_disk_write+0x1c>
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <SD_disk_write+0x20>
    return RES_PARERR;
 8001500:	2304      	movs	r3, #4
 8001502:	e06b      	b.n	80015dc <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001504:	4b37      	ldr	r3, [pc, #220]	@ (80015e4 <SD_disk_write+0x100>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001512:	2303      	movs	r3, #3
 8001514:	e062      	b.n	80015dc <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001516:	4b33      	ldr	r3, [pc, #204]	@ (80015e4 <SD_disk_write+0x100>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001524:	2302      	movs	r3, #2
 8001526:	e059      	b.n	80015dc <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001528:	4b2f      	ldr	r3, [pc, #188]	@ (80015e8 <SD_disk_write+0x104>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	025b      	lsls	r3, r3, #9
 8001538:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800153a:	f7ff fcaf 	bl	8000e9c <SELECT>
  
  if (count == 1) 
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d110      	bne.n	8001566 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	2058      	movs	r0, #88	@ 0x58
 8001548:	f7ff fe10 	bl	800116c <SD_SendCmd>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d13a      	bne.n	80015c8 <SD_disk_write+0xe4>
 8001552:	21fe      	movs	r1, #254	@ 0xfe
 8001554:	68b8      	ldr	r0, [r7, #8]
 8001556:	f7ff fdb5 	bl	80010c4 <SD_TxDataBlock>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d033      	beq.n	80015c8 <SD_disk_write+0xe4>
      count = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	e030      	b.n	80015c8 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001566:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <SD_disk_write+0x104>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d007      	beq.n	8001582 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001572:	2100      	movs	r1, #0
 8001574:	2077      	movs	r0, #119	@ 0x77
 8001576:	f7ff fdf9 	bl	800116c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800157a:	6839      	ldr	r1, [r7, #0]
 800157c:	2057      	movs	r0, #87	@ 0x57
 800157e:	f7ff fdf5 	bl	800116c <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	2059      	movs	r0, #89	@ 0x59
 8001586:	f7ff fdf1 	bl	800116c <SD_SendCmd>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d11b      	bne.n	80015c8 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001590:	21fc      	movs	r1, #252	@ 0xfc
 8001592:	68b8      	ldr	r0, [r7, #8]
 8001594:	f7ff fd96 	bl	80010c4 <SD_TxDataBlock>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00a      	beq.n	80015b4 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80015a4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1ee      	bne.n	8001590 <SD_disk_write+0xac>
 80015b2:	e000      	b.n	80015b6 <SD_disk_write+0xd2>
          break;
 80015b4:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 80015b6:	21fd      	movs	r1, #253	@ 0xfd
 80015b8:	2000      	movs	r0, #0
 80015ba:	f7ff fd83 	bl	80010c4 <SD_TxDataBlock>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <SD_disk_write+0xe4>
      {        
        count = 1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 80015c8:	f7ff fc74 	bl	8000eb4 <DESELECT>
  SPI_RxByte();
 80015cc:	f7ff fc98 	bl	8000f00 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	bf14      	ite	ne
 80015d6:	2301      	movne	r3, #1
 80015d8:	2300      	moveq	r3, #0
 80015da:	b2db      	uxtb	r3, r3
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000000 	.word	0x20000000
 80015e8:	200000ac 	.word	0x200000ac

080015ec <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b08b      	sub	sp, #44	@ 0x2c
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	603a      	str	r2, [r7, #0]
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	460b      	mov	r3, r1
 80015fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001606:	2304      	movs	r3, #4
 8001608:	e119      	b.n	800183e <SD_disk_ioctl+0x252>
  
  res = RES_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  if (ctrl == CTRL_POWER) 
 8001610:	79bb      	ldrb	r3, [r7, #6]
 8001612:	2b05      	cmp	r3, #5
 8001614:	d129      	bne.n	800166a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d017      	beq.n	800164e <SD_disk_ioctl+0x62>
 800161e:	2b02      	cmp	r3, #2
 8001620:	dc1f      	bgt.n	8001662 <SD_disk_ioctl+0x76>
 8001622:	2b00      	cmp	r3, #0
 8001624:	d002      	beq.n	800162c <SD_disk_ioctl+0x40>
 8001626:	2b01      	cmp	r3, #1
 8001628:	d00b      	beq.n	8001642 <SD_disk_ioctl+0x56>
 800162a:	e01a      	b.n	8001662 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800162c:	f7ff fd08 	bl	8001040 <SD_CheckPower>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001636:	f7ff fcf7 	bl	8001028 <SD_PowerOff>
      res = RES_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001640:	e0fb      	b.n	800183a <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8001642:	f7ff fca5 	bl	8000f90 <SD_PowerOn>
      res = RES_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800164c:	e0f5      	b.n	800183a <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	1c5c      	adds	r4, r3, #1
 8001652:	f7ff fcf5 	bl	8001040 <SD_CheckPower>
 8001656:	4603      	mov	r3, r0
 8001658:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800165a:	2300      	movs	r3, #0
 800165c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001660:	e0eb      	b.n	800183a <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8001662:	2304      	movs	r3, #4
 8001664:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001668:	e0e7      	b.n	800183a <SD_disk_ioctl+0x24e>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 800166a:	4b77      	ldr	r3, [pc, #476]	@ (8001848 <SD_disk_ioctl+0x25c>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001678:	2303      	movs	r3, #3
 800167a:	e0e0      	b.n	800183e <SD_disk_ioctl+0x252>
    
    SELECT();
 800167c:	f7ff fc0e 	bl	8000e9c <SELECT>
    
    switch (ctrl) 
 8001680:	79bb      	ldrb	r3, [r7, #6]
 8001682:	2b0d      	cmp	r3, #13
 8001684:	f200 80ca 	bhi.w	800181c <SD_disk_ioctl+0x230>
 8001688:	a201      	add	r2, pc, #4	@ (adr r2, 8001690 <SD_disk_ioctl+0xa4>)
 800168a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168e:	bf00      	nop
 8001690:	08001787 	.word	0x08001787
 8001694:	080016c9 	.word	0x080016c9
 8001698:	08001777 	.word	0x08001777
 800169c:	0800181d 	.word	0x0800181d
 80016a0:	0800181d 	.word	0x0800181d
 80016a4:	0800181d 	.word	0x0800181d
 80016a8:	0800181d 	.word	0x0800181d
 80016ac:	0800181d 	.word	0x0800181d
 80016b0:	0800181d 	.word	0x0800181d
 80016b4:	0800181d 	.word	0x0800181d
 80016b8:	0800181d 	.word	0x0800181d
 80016bc:	08001799 	.word	0x08001799
 80016c0:	080017bd 	.word	0x080017bd
 80016c4:	080017e1 	.word	0x080017e1
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80016c8:	2100      	movs	r1, #0
 80016ca:	2049      	movs	r0, #73	@ 0x49
 80016cc:	f7ff fd4e 	bl	800116c <SD_SendCmd>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 80a6 	bne.w	8001824 <SD_disk_ioctl+0x238>
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	2110      	movs	r1, #16
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fcba 	bl	8001058 <SD_RxDataBlock>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 809c 	beq.w	8001824 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1) 
 80016ec:	7b3b      	ldrb	r3, [r7, #12]
 80016ee:	099b      	lsrs	r3, r3, #6
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d10d      	bne.n	8001712 <SD_disk_ioctl+0x126>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80016f6:	7d7b      	ldrb	r3, [r7, #21]
 80016f8:	461a      	mov	r2, r3
 80016fa:	7d3b      	ldrb	r3, [r7, #20]
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	b29b      	uxth	r3, r3
 8001700:	4413      	add	r3, r2
 8001702:	b29b      	uxth	r3, r3
 8001704:	3301      	adds	r3, #1
 8001706:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001708:	8bfb      	ldrh	r3, [r7, #30]
 800170a:	029a      	lsls	r2, r3, #10
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e02d      	b.n	800176e <SD_disk_ioctl+0x182>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001712:	7c7b      	ldrb	r3, [r7, #17]
 8001714:	f003 030f 	and.w	r3, r3, #15
 8001718:	b2da      	uxtb	r2, r3
 800171a:	7dbb      	ldrb	r3, [r7, #22]
 800171c:	09db      	lsrs	r3, r3, #7
 800171e:	b2db      	uxtb	r3, r3
 8001720:	4413      	add	r3, r2
 8001722:	b2da      	uxtb	r2, r3
 8001724:	7d7b      	ldrb	r3, [r7, #21]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f003 0306 	and.w	r3, r3, #6
 800172e:	b2db      	uxtb	r3, r3
 8001730:	4413      	add	r3, r2
 8001732:	b2db      	uxtb	r3, r3
 8001734:	3302      	adds	r3, #2
 8001736:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800173a:	7d3b      	ldrb	r3, [r7, #20]
 800173c:	099b      	lsrs	r3, r3, #6
 800173e:	b2db      	uxtb	r3, r3
 8001740:	461a      	mov	r2, r3
 8001742:	7cfb      	ldrb	r3, [r7, #19]
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	b29b      	uxth	r3, r3
 8001748:	4413      	add	r3, r2
 800174a:	b29a      	uxth	r2, r3
 800174c:	7cbb      	ldrb	r3, [r7, #18]
 800174e:	029b      	lsls	r3, r3, #10
 8001750:	b29b      	uxth	r3, r3
 8001752:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001756:	b29b      	uxth	r3, r3
 8001758:	4413      	add	r3, r2
 800175a:	b29b      	uxth	r3, r3
 800175c:	3301      	adds	r3, #1
 800175e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001760:	8bfa      	ldrh	r2, [r7, #30]
 8001762:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001766:	3b09      	subs	r3, #9
 8001768:	409a      	lsls	r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8001774:	e056      	b.n	8001824 <SD_disk_ioctl+0x238>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800177c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001784:	e055      	b.n	8001832 <SD_disk_ioctl+0x246>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001786:	f7ff fbe7 	bl	8000f58 <SD_ReadyWait>
 800178a:	4603      	mov	r3, r0
 800178c:	2bff      	cmp	r3, #255	@ 0xff
 800178e:	d14b      	bne.n	8001828 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001796:	e047      	b.n	8001828 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001798:	2100      	movs	r1, #0
 800179a:	2049      	movs	r0, #73	@ 0x49
 800179c:	f7ff fce6 	bl	800116c <SD_SendCmd>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d142      	bne.n	800182c <SD_disk_ioctl+0x240>
 80017a6:	2110      	movs	r1, #16
 80017a8:	6a38      	ldr	r0, [r7, #32]
 80017aa:	f7ff fc55 	bl	8001058 <SD_RxDataBlock>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d03b      	beq.n	800182c <SD_disk_ioctl+0x240>
        res = RES_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80017ba:	e037      	b.n	800182c <SD_disk_ioctl+0x240>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80017bc:	2100      	movs	r1, #0
 80017be:	204a      	movs	r0, #74	@ 0x4a
 80017c0:	f7ff fcd4 	bl	800116c <SD_SendCmd>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d132      	bne.n	8001830 <SD_disk_ioctl+0x244>
 80017ca:	2110      	movs	r1, #16
 80017cc:	6a38      	ldr	r0, [r7, #32]
 80017ce:	f7ff fc43 	bl	8001058 <SD_RxDataBlock>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d02b      	beq.n	8001830 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80017de:	e027      	b.n	8001830 <SD_disk_ioctl+0x244>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 80017e0:	2100      	movs	r1, #0
 80017e2:	207a      	movs	r0, #122	@ 0x7a
 80017e4:	f7ff fcc2 	bl	800116c <SD_SendCmd>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d116      	bne.n	800181c <SD_disk_ioctl+0x230>
      {         
        for (n = 0; n < 4; n++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80017f4:	e00b      	b.n	800180e <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 80017f6:	6a3c      	ldr	r4, [r7, #32]
 80017f8:	1c63      	adds	r3, r4, #1
 80017fa:	623b      	str	r3, [r7, #32]
 80017fc:	f7ff fb80 	bl	8000f00 <SPI_RxByte>
 8001800:	4603      	mov	r3, r0
 8001802:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001804:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001808:	3301      	adds	r3, #1
 800180a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800180e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001812:	2b03      	cmp	r3, #3
 8001814:	d9ef      	bls.n	80017f6 <SD_disk_ioctl+0x20a>
        }
        
        res = RES_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }     
      
    default:
      res = RES_PARERR;
 800181c:	2304      	movs	r3, #4
 800181e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001822:	e006      	b.n	8001832 <SD_disk_ioctl+0x246>
      break;
 8001824:	bf00      	nop
 8001826:	e004      	b.n	8001832 <SD_disk_ioctl+0x246>
      break;
 8001828:	bf00      	nop
 800182a:	e002      	b.n	8001832 <SD_disk_ioctl+0x246>
      break;
 800182c:	bf00      	nop
 800182e:	e000      	b.n	8001832 <SD_disk_ioctl+0x246>
      break;
 8001830:	bf00      	nop
    }
    
    DESELECT();
 8001832:	f7ff fb3f 	bl	8000eb4 <DESELECT>
    SPI_RxByte();
 8001836:	f7ff fb63 	bl	8000f00 <SPI_RxByte>
  }
  
  return res;
 800183a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800183e:	4618      	mov	r0, r3
 8001840:	372c      	adds	r7, #44	@ 0x2c
 8001842:	46bd      	mov	sp, r7
 8001844:	bd90      	pop	{r4, r7, pc}
 8001846:	bf00      	nop
 8001848:	20000000 	.word	0x20000000

0800184c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001852:	f002 ffbf 	bl	80047d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001856:	f000 f877 	bl	8001948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800185a:	f000 fa89 	bl	8001d70 <MX_GPIO_Init>
  MX_DMA_Init();
 800185e:	f000 fa67 	bl	8001d30 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001862:	f000 fa3b 	bl	8001cdc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001866:	f000 f92d 	bl	8001ac4 <MX_I2C1_Init>
  MX_SPI3_Init();
 800186a:	f000 f9b3 	bl	8001bd4 <MX_SPI3_Init>
  MX_RTC_Init();
 800186e:	f000 f957 	bl	8001b20 <MX_RTC_Init>
  MX_ADC1_Init();
 8001872:	f000 f8d5 	bl	8001a20 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001876:	f000 f9e3 	bl	8001c40 <MX_TIM3_Init>
  MX_FATFS_Init();
 800187a:	f007 fe11 	bl	80094a0 <MX_FATFS_Init>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  keypad_sd_sync = xSemaphoreCreateBinary();
 800187e:	2203      	movs	r2, #3
 8001880:	2100      	movs	r1, #0
 8001882:	2001      	movs	r0, #1
 8001884:	f00d fe42 	bl	800f50c <xQueueGenericCreate>
 8001888:	4603      	mov	r3, r0
 800188a:	4a23      	ldr	r2, [pc, #140]	@ (8001918 <main+0xcc>)
 800188c:	6013      	str	r3, [r2, #0]
  sd_display_sync = xSemaphoreCreateBinary();
 800188e:	2203      	movs	r2, #3
 8001890:	2100      	movs	r1, #0
 8001892:	2001      	movs	r0, #1
 8001894:	f00d fe3a 	bl	800f50c <xQueueGenericCreate>
 8001898:	4603      	mov	r3, r0
 800189a:	4a20      	ldr	r2, [pc, #128]	@ (800191c <main+0xd0>)
 800189c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  display_queue = xQueueCreate(1, sizeof(display_message_t));
 800189e:	2200      	movs	r2, #0
 80018a0:	2101      	movs	r1, #1
 80018a2:	2001      	movs	r0, #1
 80018a4:	f00d fe32 	bl	800f50c <xQueueGenericCreate>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001920 <main+0xd4>)
 80018ac:	6013      	str	r3, [r2, #0]
  sequence_queue = xQueueCreate(1, sizeof(char));
 80018ae:	2200      	movs	r2, #0
 80018b0:	2101      	movs	r1, #1
 80018b2:	2001      	movs	r0, #1
 80018b4:	f00d fe2a 	bl	800f50c <xQueueGenericCreate>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001924 <main+0xd8>)
 80018bc:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(display_task, "Tarea display", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 4, NULL);
 80018be:	2300      	movs	r3, #0
 80018c0:	9301      	str	r3, [sp, #4]
 80018c2:	2304      	movs	r3, #4
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	2300      	movs	r3, #0
 80018c8:	2280      	movs	r2, #128	@ 0x80
 80018ca:	4917      	ldr	r1, [pc, #92]	@ (8001928 <main+0xdc>)
 80018cc:	4817      	ldr	r0, [pc, #92]	@ (800192c <main+0xe0>)
 80018ce:	f00e fbeb 	bl	80100a8 <xTaskCreate>
  //xTaskCreate(LockControl, "Tarea 04", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL);
  //xTaskCreate(VoiceProcessing, "Tarea 03", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
  xTaskCreate(sd_task, "Tarea SD", 12 * configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
 80018d2:	2300      	movs	r3, #0
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	2302      	movs	r3, #2
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2300      	movs	r3, #0
 80018dc:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80018e0:	4913      	ldr	r1, [pc, #76]	@ (8001930 <main+0xe4>)
 80018e2:	4814      	ldr	r0, [pc, #80]	@ (8001934 <main+0xe8>)
 80018e4:	f00e fbe0 	bl	80100a8 <xTaskCreate>
  xTaskCreate(keypad_task, "Tarea keypad", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 80018e8:	2300      	movs	r3, #0
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	2301      	movs	r3, #1
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	2300      	movs	r3, #0
 80018f2:	2280      	movs	r2, #128	@ 0x80
 80018f4:	4910      	ldr	r1, [pc, #64]	@ (8001938 <main+0xec>)
 80018f6:	4811      	ldr	r0, [pc, #68]	@ (800193c <main+0xf0>)
 80018f8:	f00e fbd6 	bl	80100a8 <xTaskCreate>
  xTaskCreate(idle_task, "Tarea Idle", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 80018fc:	2300      	movs	r3, #0
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	2300      	movs	r3, #0
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	2300      	movs	r3, #0
 8001906:	2280      	movs	r2, #128	@ 0x80
 8001908:	490d      	ldr	r1, [pc, #52]	@ (8001940 <main+0xf4>)
 800190a:	480e      	ldr	r0, [pc, #56]	@ (8001944 <main+0xf8>)
 800190c:	f00e fbcc 	bl	80100a8 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 8001910:	f00e fd34 	bl	801037c <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <main+0xc8>
 8001918:	200002bc 	.word	0x200002bc
 800191c:	200002c0 	.word	0x200002c0
 8001920:	200002b8 	.word	0x200002b8
 8001924:	200002b4 	.word	0x200002b4
 8001928:	08014740 	.word	0x08014740
 800192c:	080042bd 	.word	0x080042bd
 8001930:	08014750 	.word	0x08014750
 8001934:	08004511 	.word	0x08004511
 8001938:	0801475c 	.word	0x0801475c
 800193c:	08004471 	.word	0x08004471
 8001940:	0801476c 	.word	0x0801476c
 8001944:	08001ebd 	.word	0x08001ebd

08001948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b094      	sub	sp, #80	@ 0x50
 800194c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800194e:	f107 0320 	add.w	r3, r7, #32
 8001952:	2230      	movs	r2, #48	@ 0x30
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f011 fe0f 	bl	801357a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800196c:	2300      	movs	r3, #0
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	4b29      	ldr	r3, [pc, #164]	@ (8001a18 <SystemClock_Config+0xd0>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001974:	4a28      	ldr	r2, [pc, #160]	@ (8001a18 <SystemClock_Config+0xd0>)
 8001976:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800197a:	6413      	str	r3, [r2, #64]	@ 0x40
 800197c:	4b26      	ldr	r3, [pc, #152]	@ (8001a18 <SystemClock_Config+0xd0>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001988:	2300      	movs	r3, #0
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	4b23      	ldr	r3, [pc, #140]	@ (8001a1c <SystemClock_Config+0xd4>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001994:	4a21      	ldr	r2, [pc, #132]	@ (8001a1c <SystemClock_Config+0xd4>)
 8001996:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a1c <SystemClock_Config+0xd4>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019a8:	2309      	movs	r3, #9
 80019aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019ac:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019b2:	2301      	movs	r3, #1
 80019b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019b6:	2302      	movs	r3, #2
 80019b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019c0:	2304      	movs	r3, #4
 80019c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80019c4:	2340      	movs	r3, #64	@ 0x40
 80019c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019c8:	2302      	movs	r3, #2
 80019ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80019cc:	2307      	movs	r3, #7
 80019ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d0:	f107 0320 	add.w	r3, r7, #32
 80019d4:	4618      	mov	r0, r3
 80019d6:	f004 ffcb 	bl	8006970 <HAL_RCC_OscConfig>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80019e0:	f000 fa99 	bl	8001f16 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019e4:	230f      	movs	r3, #15
 80019e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019e8:	2302      	movs	r3, #2
 80019ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019fa:	f107 030c 	add.w	r3, r7, #12
 80019fe:	2102      	movs	r1, #2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f005 fa2d 	bl	8006e60 <HAL_RCC_ClockConfig>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001a0c:	f000 fa83 	bl	8001f16 <Error_Handler>
  }
}
 8001a10:	bf00      	nop
 8001a12:	3750      	adds	r7, #80	@ 0x50
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40007000 	.word	0x40007000

08001a20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a26:	463b      	mov	r3, r7
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a32:	4b22      	ldr	r3, [pc, #136]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a34:	4a22      	ldr	r2, [pc, #136]	@ (8001ac0 <MX_ADC1_Init+0xa0>)
 8001a36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a38:	4b20      	ldr	r3, [pc, #128]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a44:	4b1d      	ldr	r3, [pc, #116]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a50:	4b1a      	ldr	r3, [pc, #104]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001a58:	4b18      	ldr	r3, [pc, #96]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001a60:	4b16      	ldr	r3, [pc, #88]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a62:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a66:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a68:	4b14      	ldr	r3, [pc, #80]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a6e:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a74:	4b11      	ldr	r3, [pc, #68]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a82:	480e      	ldr	r0, [pc, #56]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a84:	f002 fee8 	bl	8004858 <HAL_ADC_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001a8e:	f000 fa42 	bl	8001f16 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a96:	2301      	movs	r3, #1
 8001a98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4806      	ldr	r0, [pc, #24]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001aa4:	f003 f994 	bl	8004dd0 <HAL_ADC_ConfigChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001aae:	f000 fa32 	bl	8001f16 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200000b0 	.word	0x200000b0
 8001ac0:	40012000 	.word	0x40012000

08001ac4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ac8:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001aca:	4a13      	ldr	r2, [pc, #76]	@ (8001b18 <MX_I2C1_Init+0x54>)
 8001acc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001ace:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001ad0:	4a12      	ldr	r2, [pc, #72]	@ (8001b1c <MX_I2C1_Init+0x58>)
 8001ad2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ada:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001ae2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ae6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001aee:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001af4:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001afa:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b00:	4804      	ldr	r0, [pc, #16]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001b02:	f004 fa87 	bl	8006014 <HAL_I2C_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b0c:	f000 fa03 	bl	8001f16 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000158 	.word	0x20000158
 8001b18:	40005400 	.word	0x40005400
 8001b1c:	00061a80 	.word	0x00061a80

08001b20 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001b34:	2300      	movs	r3, #0
 8001b36:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b38:	4b24      	ldr	r3, [pc, #144]	@ (8001bcc <MX_RTC_Init+0xac>)
 8001b3a:	4a25      	ldr	r2, [pc, #148]	@ (8001bd0 <MX_RTC_Init+0xb0>)
 8001b3c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b3e:	4b23      	ldr	r3, [pc, #140]	@ (8001bcc <MX_RTC_Init+0xac>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b44:	4b21      	ldr	r3, [pc, #132]	@ (8001bcc <MX_RTC_Init+0xac>)
 8001b46:	227f      	movs	r2, #127	@ 0x7f
 8001b48:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b4a:	4b20      	ldr	r3, [pc, #128]	@ (8001bcc <MX_RTC_Init+0xac>)
 8001b4c:	22ff      	movs	r2, #255	@ 0xff
 8001b4e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b50:	4b1e      	ldr	r3, [pc, #120]	@ (8001bcc <MX_RTC_Init+0xac>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b56:	4b1d      	ldr	r3, [pc, #116]	@ (8001bcc <MX_RTC_Init+0xac>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bcc <MX_RTC_Init+0xac>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b62:	481a      	ldr	r0, [pc, #104]	@ (8001bcc <MX_RTC_Init+0xac>)
 8001b64:	f005 fcbc 	bl	80074e0 <HAL_RTC_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001b6e:	f000 f9d2 	bl	8001f16 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 15;
 8001b72:	230f      	movs	r3, #15
 8001b74:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	2200      	movs	r2, #0
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	480f      	ldr	r0, [pc, #60]	@ (8001bcc <MX_RTC_Init+0xac>)
 8001b8e:	f005 fd2a 	bl	80075e6 <HAL_RTC_SetTime>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001b98:	f000 f9bd 	bl	8001f16 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8001b9c:	2306      	movs	r3, #6
 8001b9e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8001ba0:	2307      	movs	r3, #7
 8001ba2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 6;
 8001ba4:	2306      	movs	r3, #6
 8001ba6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 8001ba8:	2318      	movs	r3, #24
 8001baa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001bac:	463b      	mov	r3, r7
 8001bae:	2200      	movs	r2, #0
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4806      	ldr	r0, [pc, #24]	@ (8001bcc <MX_RTC_Init+0xac>)
 8001bb4:	f005 fe0f 	bl	80077d6 <HAL_RTC_SetDate>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001bbe:	f000 f9aa 	bl	8001f16 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200001ac 	.word	0x200001ac
 8001bd0:	40002800 	.word	0x40002800

08001bd4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001bd8:	4b17      	ldr	r3, [pc, #92]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001bda:	4a18      	ldr	r2, [pc, #96]	@ (8001c3c <MX_SPI3_Init+0x68>)
 8001bdc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001bde:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001be0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001be4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001be6:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bec:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bf2:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001c00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c04:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c06:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001c08:	2210      	movs	r2, #16
 8001c0a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c12:	4b09      	ldr	r3, [pc, #36]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c18:	4b07      	ldr	r3, [pc, #28]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001c1e:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001c20:	220a      	movs	r2, #10
 8001c22:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001c24:	4804      	ldr	r0, [pc, #16]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001c26:	f005 ff67 	bl	8007af8 <HAL_SPI_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001c30:	f000 f971 	bl	8001f16 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	200001cc 	.word	0x200001cc
 8001c3c:	40003c00 	.word	0x40003c00

08001c40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c46:	f107 0308 	add.w	r3, r7, #8
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c54:	463b      	mov	r3, r7
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd4 <MX_TIM3_Init+0x94>)
 8001c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001cd8 <MX_TIM3_Init+0x98>)
 8001c60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c62:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd4 <MX_TIM3_Init+0x94>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c68:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd4 <MX_TIM3_Init+0x94>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5334 - 1;
 8001c6e:	4b19      	ldr	r3, [pc, #100]	@ (8001cd4 <MX_TIM3_Init+0x94>)
 8001c70:	f241 42d5 	movw	r2, #5333	@ 0x14d5
 8001c74:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c76:	4b17      	ldr	r3, [pc, #92]	@ (8001cd4 <MX_TIM3_Init+0x94>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7c:	4b15      	ldr	r3, [pc, #84]	@ (8001cd4 <MX_TIM3_Init+0x94>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c82:	4814      	ldr	r0, [pc, #80]	@ (8001cd4 <MX_TIM3_Init+0x94>)
 8001c84:	f006 fb98 	bl	80083b8 <HAL_TIM_Base_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001c8e:	f000 f942 	bl	8001f16 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c98:	f107 0308 	add.w	r3, r7, #8
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	480d      	ldr	r0, [pc, #52]	@ (8001cd4 <MX_TIM3_Init+0x94>)
 8001ca0:	f006 fd5b 	bl	800875a <HAL_TIM_ConfigClockSource>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001caa:	f000 f934 	bl	8001f16 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001cae:	2320      	movs	r3, #32
 8001cb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cb6:	463b      	mov	r3, r7
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4806      	ldr	r0, [pc, #24]	@ (8001cd4 <MX_TIM3_Init+0x94>)
 8001cbc:	f006 ff62 	bl	8008b84 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001cc6:	f000 f926 	bl	8001f16 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cca:	bf00      	nop
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000224 	.word	0x20000224
 8001cd8:	40000400 	.word	0x40000400

08001cdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	@ (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001ce2:	4a12      	ldr	r2, [pc, #72]	@ (8001d2c <MX_USART2_UART_Init+0x50>)
 8001ce4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ce6:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001ce8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d00:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001d02:	220c      	movs	r2, #12
 8001d04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d06:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d12:	4805      	ldr	r0, [pc, #20]	@ (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001d14:	f006 ffb8 	bl	8008c88 <HAL_UART_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d1e:	f000 f8fa 	bl	8001f16 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	2000026c 	.word	0x2000026c
 8001d2c:	40004400 	.word	0x40004400

08001d30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <MX_DMA_Init+0x3c>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	4a0b      	ldr	r2, [pc, #44]	@ (8001d6c <MX_DMA_Init+0x3c>)
 8001d40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d46:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <MX_DMA_Init+0x3c>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2105      	movs	r1, #5
 8001d56:	2038      	movs	r0, #56	@ 0x38
 8001d58:	f003 fb9c 	bl	8005494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d5c:	2038      	movs	r0, #56	@ 0x38
 8001d5e:	f003 fbb5 	bl	80054cc <HAL_NVIC_EnableIRQ>

}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800

08001d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08a      	sub	sp, #40	@ 0x28
 8001d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d76:	f107 0314 	add.w	r3, r7, #20
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	609a      	str	r2, [r3, #8]
 8001d82:	60da      	str	r2, [r3, #12]
 8001d84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	4b48      	ldr	r3, [pc, #288]	@ (8001eac <MX_GPIO_Init+0x13c>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	4a47      	ldr	r2, [pc, #284]	@ (8001eac <MX_GPIO_Init+0x13c>)
 8001d90:	f043 0304 	orr.w	r3, r3, #4
 8001d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d96:	4b45      	ldr	r3, [pc, #276]	@ (8001eac <MX_GPIO_Init+0x13c>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b41      	ldr	r3, [pc, #260]	@ (8001eac <MX_GPIO_Init+0x13c>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	4a40      	ldr	r2, [pc, #256]	@ (8001eac <MX_GPIO_Init+0x13c>)
 8001dac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db2:	4b3e      	ldr	r3, [pc, #248]	@ (8001eac <MX_GPIO_Init+0x13c>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	4b3a      	ldr	r3, [pc, #232]	@ (8001eac <MX_GPIO_Init+0x13c>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	4a39      	ldr	r2, [pc, #228]	@ (8001eac <MX_GPIO_Init+0x13c>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dce:	4b37      	ldr	r3, [pc, #220]	@ (8001eac <MX_GPIO_Init+0x13c>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	4b33      	ldr	r3, [pc, #204]	@ (8001eac <MX_GPIO_Init+0x13c>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	4a32      	ldr	r2, [pc, #200]	@ (8001eac <MX_GPIO_Init+0x13c>)
 8001de4:	f043 0302 	orr.w	r3, r3, #2
 8001de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dea:	4b30      	ldr	r3, [pc, #192]	@ (8001eac <MX_GPIO_Init+0x13c>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|CS_SD_Pin, GPIO_PIN_RESET);
 8001df6:	2200      	movs	r2, #0
 8001df8:	f248 0120 	movw	r1, #32800	@ 0x8020
 8001dfc:	482c      	ldr	r0, [pc, #176]	@ (8001eb0 <MX_GPIO_Init+0x140>)
 8001dfe:	f004 f8ef 	bl	8005fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001e02:	2200      	movs	r2, #0
 8001e04:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 8001e08:	482a      	ldr	r0, [pc, #168]	@ (8001eb4 <MX_GPIO_Init+0x144>)
 8001e0a:	f004 f8e9 	bl	8005fe0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SDB4_GPIO_Port, CS_SDB4_Pin, GPIO_PIN_RESET);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2110      	movs	r1, #16
 8001e12:	4829      	ldr	r0, [pc, #164]	@ (8001eb8 <MX_GPIO_Init+0x148>)
 8001e14:	f004 f8e4 	bl	8005fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e1e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4821      	ldr	r0, [pc, #132]	@ (8001eb4 <MX_GPIO_Init+0x144>)
 8001e30:	f003 ff3a 	bl	8005ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001e34:	230f      	movs	r3, #15
 8001e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	4619      	mov	r1, r3
 8001e46:	481b      	ldr	r0, [pc, #108]	@ (8001eb4 <MX_GPIO_Init+0x144>)
 8001e48:	f003 ff2e 	bl	8005ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin CS_SD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|CS_SD_Pin;
 8001e4c:	f248 0320 	movw	r3, #32800	@ 0x8020
 8001e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e52:	2301      	movs	r3, #1
 8001e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5e:	f107 0314 	add.w	r3, r7, #20
 8001e62:	4619      	mov	r1, r3
 8001e64:	4812      	ldr	r0, [pc, #72]	@ (8001eb0 <MX_GPIO_Init+0x140>)
 8001e66:	f003 ff1f 	bl	8005ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Lock_Pin PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001e6a:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8001e6e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e70:	2301      	movs	r3, #1
 8001e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	4619      	mov	r1, r3
 8001e82:	480c      	ldr	r0, [pc, #48]	@ (8001eb4 <MX_GPIO_Init+0x144>)
 8001e84:	f003 ff10 	bl	8005ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SDB4_Pin */
  GPIO_InitStruct.Pin = CS_SDB4_Pin;
 8001e88:	2310      	movs	r3, #16
 8001e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2300      	movs	r3, #0
 8001e96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_SDB4_GPIO_Port, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4806      	ldr	r0, [pc, #24]	@ (8001eb8 <MX_GPIO_Init+0x148>)
 8001ea0:	f003 ff02 	bl	8005ca8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ea4:	bf00      	nop
 8001ea6:	3728      	adds	r7, #40	@ 0x28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40020000 	.word	0x40020000
 8001eb4:	40020800 	.word	0x40020800
 8001eb8:	40020400 	.word	0x40020400

08001ebc <idle_task>:

/* USER CODE BEGIN 4 */
void idle_task(void *pvParameters){
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	while(1);
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <idle_task+0x8>

08001ec8 <HAL_ADC_ConvCpltCallback>:
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim3);
 8001ed0:	4806      	ldr	r0, [pc, #24]	@ (8001eec <HAL_ADC_ConvCpltCallback+0x24>)
 8001ed2:	f006 fb23 	bl	800851c <HAL_TIM_Base_Stop_IT>
	HAL_ADC_Stop_DMA(&hadc1);
 8001ed6:	4806      	ldr	r0, [pc, #24]	@ (8001ef0 <HAL_ADC_ConvCpltCallback+0x28>)
 8001ed8:	f002 ff02 	bl	8004ce0 <HAL_ADC_Stop_DMA>
	conv_cplt_flag = true;
 8001edc:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000224 	.word	0x20000224
 8001ef0:	200000b0 	.word	0x200000b0
 8001ef4:	200002c4 	.word	0x200002c4

08001ef8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f08:	d101      	bne.n	8001f0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f0a:	f002 fc85 	bl	8004818 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f1a:	b672      	cpsid	i
}
 8001f1c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f1e:	bf00      	nop
 8001f20:	e7fd      	b.n	8001f1e <Error_Handler+0x8>
	...

08001f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <HAL_MspInit+0x54>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f32:	4a11      	ldr	r2, [pc, #68]	@ (8001f78 <HAL_MspInit+0x54>)
 8001f34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f78 <HAL_MspInit+0x54>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <HAL_MspInit+0x54>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f78 <HAL_MspInit+0x54>)
 8001f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f56:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <HAL_MspInit+0x54>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f62:	2200      	movs	r2, #0
 8001f64:	210f      	movs	r1, #15
 8001f66:	f06f 0001 	mvn.w	r0, #1
 8001f6a:	f003 fa93 	bl	8005494 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800

08001f7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	@ 0x28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a32      	ldr	r2, [pc, #200]	@ (8002064 <HAL_ADC_MspInit+0xe8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d15e      	bne.n	800205c <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	4b31      	ldr	r3, [pc, #196]	@ (8002068 <HAL_ADC_MspInit+0xec>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa6:	4a30      	ldr	r2, [pc, #192]	@ (8002068 <HAL_ADC_MspInit+0xec>)
 8001fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fae:	4b2e      	ldr	r3, [pc, #184]	@ (8002068 <HAL_ADC_MspInit+0xec>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	4b2a      	ldr	r3, [pc, #168]	@ (8002068 <HAL_ADC_MspInit+0xec>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	4a29      	ldr	r2, [pc, #164]	@ (8002068 <HAL_ADC_MspInit+0xec>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fca:	4b27      	ldr	r3, [pc, #156]	@ (8002068 <HAL_ADC_MspInit+0xec>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe2:	f107 0314 	add.w	r3, r7, #20
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4820      	ldr	r0, [pc, #128]	@ (800206c <HAL_ADC_MspInit+0xf0>)
 8001fea:	f003 fe5d 	bl	8005ca8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001fee:	4b20      	ldr	r3, [pc, #128]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 8001ff0:	4a20      	ldr	r2, [pc, #128]	@ (8002074 <HAL_ADC_MspInit+0xf8>)
 8001ff2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002000:	4b1b      	ldr	r3, [pc, #108]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 8002002:	2200      	movs	r2, #0
 8002004:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002006:	4b1a      	ldr	r3, [pc, #104]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 8002008:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800200c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800200e:	4b18      	ldr	r3, [pc, #96]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 8002010:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002014:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002016:	4b16      	ldr	r3, [pc, #88]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 8002018:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800201c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800201e:	4b14      	ldr	r3, [pc, #80]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 8002020:	2200      	movs	r2, #0
 8002022:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002024:	4b12      	ldr	r3, [pc, #72]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 8002026:	2200      	movs	r2, #0
 8002028:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800202a:	4b11      	ldr	r3, [pc, #68]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 800202c:	2200      	movs	r2, #0
 800202e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002030:	480f      	ldr	r0, [pc, #60]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 8002032:	f003 fa59 	bl	80054e8 <HAL_DMA_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800203c:	f7ff ff6b 	bl	8001f16 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a0b      	ldr	r2, [pc, #44]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 8002044:	639a      	str	r2, [r3, #56]	@ 0x38
 8002046:	4a0a      	ldr	r2, [pc, #40]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800204c:	2200      	movs	r2, #0
 800204e:	2105      	movs	r1, #5
 8002050:	2012      	movs	r0, #18
 8002052:	f003 fa1f 	bl	8005494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002056:	2012      	movs	r0, #18
 8002058:	f003 fa38 	bl	80054cc <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800205c:	bf00      	nop
 800205e:	3728      	adds	r7, #40	@ 0x28
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40012000 	.word	0x40012000
 8002068:	40023800 	.word	0x40023800
 800206c:	40020000 	.word	0x40020000
 8002070:	200000f8 	.word	0x200000f8
 8002074:	40026410 	.word	0x40026410

08002078 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	@ 0x28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a19      	ldr	r2, [pc, #100]	@ (80020fc <HAL_I2C_MspInit+0x84>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d12b      	bne.n	80020f2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	4b18      	ldr	r3, [pc, #96]	@ (8002100 <HAL_I2C_MspInit+0x88>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	4a17      	ldr	r2, [pc, #92]	@ (8002100 <HAL_I2C_MspInit+0x88>)
 80020a4:	f043 0302 	orr.w	r3, r3, #2
 80020a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020aa:	4b15      	ldr	r3, [pc, #84]	@ (8002100 <HAL_I2C_MspInit+0x88>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020b6:	23c0      	movs	r3, #192	@ 0xc0
 80020b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ba:	2312      	movs	r3, #18
 80020bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c2:	2303      	movs	r3, #3
 80020c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020c6:	2304      	movs	r3, #4
 80020c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	4619      	mov	r1, r3
 80020d0:	480c      	ldr	r0, [pc, #48]	@ (8002104 <HAL_I2C_MspInit+0x8c>)
 80020d2:	f003 fde9 	bl	8005ca8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <HAL_I2C_MspInit+0x88>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	4a08      	ldr	r2, [pc, #32]	@ (8002100 <HAL_I2C_MspInit+0x88>)
 80020e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020e6:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <HAL_I2C_MspInit+0x88>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80020f2:	bf00      	nop
 80020f4:	3728      	adds	r7, #40	@ 0x28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40005400 	.word	0x40005400
 8002100:	40023800 	.word	0x40023800
 8002104:	40020400 	.word	0x40020400

08002108 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002110:	f107 030c 	add.w	r3, r7, #12
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0c      	ldr	r2, [pc, #48]	@ (8002158 <HAL_RTC_MspInit+0x50>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d111      	bne.n	800214e <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800212a:	2302      	movs	r3, #2
 800212c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800212e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002132:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002134:	f107 030c 	add.w	r3, r7, #12
 8002138:	4618      	mov	r0, r3
 800213a:	f005 f8e3 	bl	8007304 <HAL_RCCEx_PeriphCLKConfig>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002144:	f7ff fee7 	bl	8001f16 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002148:	4b04      	ldr	r3, [pc, #16]	@ (800215c <HAL_RTC_MspInit+0x54>)
 800214a:	2201      	movs	r2, #1
 800214c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800214e:	bf00      	nop
 8002150:	3720      	adds	r7, #32
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40002800 	.word	0x40002800
 800215c:	42470e3c 	.word	0x42470e3c

08002160 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	@ 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a22      	ldr	r2, [pc, #136]	@ (8002208 <HAL_SPI_MspInit+0xa8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d13d      	bne.n	80021fe <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	4b21      	ldr	r3, [pc, #132]	@ (800220c <HAL_SPI_MspInit+0xac>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	4a20      	ldr	r2, [pc, #128]	@ (800220c <HAL_SPI_MspInit+0xac>)
 800218c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002190:	6413      	str	r3, [r2, #64]	@ 0x40
 8002192:	4b1e      	ldr	r3, [pc, #120]	@ (800220c <HAL_SPI_MspInit+0xac>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	4b1a      	ldr	r3, [pc, #104]	@ (800220c <HAL_SPI_MspInit+0xac>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	4a19      	ldr	r2, [pc, #100]	@ (800220c <HAL_SPI_MspInit+0xac>)
 80021a8:	f043 0304 	orr.w	r3, r3, #4
 80021ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ae:	4b17      	ldr	r3, [pc, #92]	@ (800220c <HAL_SPI_MspInit+0xac>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c8:	2303      	movs	r3, #3
 80021ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021cc:	2306      	movs	r3, #6
 80021ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	4619      	mov	r1, r3
 80021d6:	480e      	ldr	r0, [pc, #56]	@ (8002210 <HAL_SPI_MspInit+0xb0>)
 80021d8:	f003 fd66 	bl	8005ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80021dc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80021e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e2:	2302      	movs	r3, #2
 80021e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021e6:	2301      	movs	r3, #1
 80021e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ea:	2303      	movs	r3, #3
 80021ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021ee:	2306      	movs	r3, #6
 80021f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f2:	f107 0314 	add.w	r3, r7, #20
 80021f6:	4619      	mov	r1, r3
 80021f8:	4805      	ldr	r0, [pc, #20]	@ (8002210 <HAL_SPI_MspInit+0xb0>)
 80021fa:	f003 fd55 	bl	8005ca8 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80021fe:	bf00      	nop
 8002200:	3728      	adds	r7, #40	@ 0x28
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40003c00 	.word	0x40003c00
 800220c:	40023800 	.word	0x40023800
 8002210:	40020800 	.word	0x40020800

08002214 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0e      	ldr	r2, [pc, #56]	@ (800225c <HAL_TIM_Base_MspInit+0x48>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d115      	bne.n	8002252 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	4b0d      	ldr	r3, [pc, #52]	@ (8002260 <HAL_TIM_Base_MspInit+0x4c>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	4a0c      	ldr	r2, [pc, #48]	@ (8002260 <HAL_TIM_Base_MspInit+0x4c>)
 8002230:	f043 0302 	orr.w	r3, r3, #2
 8002234:	6413      	str	r3, [r2, #64]	@ 0x40
 8002236:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <HAL_TIM_Base_MspInit+0x4c>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2105      	movs	r1, #5
 8002246:	201d      	movs	r0, #29
 8002248:	f003 f924 	bl	8005494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800224c:	201d      	movs	r0, #29
 800224e:	f003 f93d 	bl	80054cc <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40000400 	.word	0x40000400
 8002260:	40023800 	.word	0x40023800

08002264 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	@ 0x28
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a19      	ldr	r2, [pc, #100]	@ (80022e8 <HAL_UART_MspInit+0x84>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d12b      	bne.n	80022de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	4b18      	ldr	r3, [pc, #96]	@ (80022ec <HAL_UART_MspInit+0x88>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	4a17      	ldr	r2, [pc, #92]	@ (80022ec <HAL_UART_MspInit+0x88>)
 8002290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002294:	6413      	str	r3, [r2, #64]	@ 0x40
 8002296:	4b15      	ldr	r3, [pc, #84]	@ (80022ec <HAL_UART_MspInit+0x88>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	4b11      	ldr	r3, [pc, #68]	@ (80022ec <HAL_UART_MspInit+0x88>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	4a10      	ldr	r2, [pc, #64]	@ (80022ec <HAL_UART_MspInit+0x88>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b2:	4b0e      	ldr	r3, [pc, #56]	@ (80022ec <HAL_UART_MspInit+0x88>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022be:	230c      	movs	r3, #12
 80022c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ca:	2300      	movs	r3, #0
 80022cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022ce:	2307      	movs	r3, #7
 80022d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d2:	f107 0314 	add.w	r3, r7, #20
 80022d6:	4619      	mov	r1, r3
 80022d8:	4805      	ldr	r0, [pc, #20]	@ (80022f0 <HAL_UART_MspInit+0x8c>)
 80022da:	f003 fce5 	bl	8005ca8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80022de:	bf00      	nop
 80022e0:	3728      	adds	r7, #40	@ 0x28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40004400 	.word	0x40004400
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40020000 	.word	0x40020000

080022f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08e      	sub	sp, #56	@ 0x38
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	4b34      	ldr	r3, [pc, #208]	@ (80023dc <HAL_InitTick+0xe8>)
 800230a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230c:	4a33      	ldr	r2, [pc, #204]	@ (80023dc <HAL_InitTick+0xe8>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6413      	str	r3, [r2, #64]	@ 0x40
 8002314:	4b31      	ldr	r3, [pc, #196]	@ (80023dc <HAL_InitTick+0xe8>)
 8002316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002320:	f107 0210 	add.w	r2, r7, #16
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	4611      	mov	r1, r2
 800232a:	4618      	mov	r0, r3
 800232c:	f004 ffb8 	bl	80072a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002336:	2b00      	cmp	r3, #0
 8002338:	d103      	bne.n	8002342 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800233a:	f004 ff89 	bl	8007250 <HAL_RCC_GetPCLK1Freq>
 800233e:	6378      	str	r0, [r7, #52]	@ 0x34
 8002340:	e004      	b.n	800234c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002342:	f004 ff85 	bl	8007250 <HAL_RCC_GetPCLK1Freq>
 8002346:	4603      	mov	r3, r0
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800234c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800234e:	4a24      	ldr	r2, [pc, #144]	@ (80023e0 <HAL_InitTick+0xec>)
 8002350:	fba2 2303 	umull	r2, r3, r2, r3
 8002354:	0c9b      	lsrs	r3, r3, #18
 8002356:	3b01      	subs	r3, #1
 8002358:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800235a:	4b22      	ldr	r3, [pc, #136]	@ (80023e4 <HAL_InitTick+0xf0>)
 800235c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002360:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002362:	4b20      	ldr	r3, [pc, #128]	@ (80023e4 <HAL_InitTick+0xf0>)
 8002364:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002368:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800236a:	4a1e      	ldr	r2, [pc, #120]	@ (80023e4 <HAL_InitTick+0xf0>)
 800236c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800236e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002370:	4b1c      	ldr	r3, [pc, #112]	@ (80023e4 <HAL_InitTick+0xf0>)
 8002372:	2200      	movs	r2, #0
 8002374:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002376:	4b1b      	ldr	r3, [pc, #108]	@ (80023e4 <HAL_InitTick+0xf0>)
 8002378:	2200      	movs	r2, #0
 800237a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800237c:	4b19      	ldr	r3, [pc, #100]	@ (80023e4 <HAL_InitTick+0xf0>)
 800237e:	2200      	movs	r2, #0
 8002380:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8002382:	4818      	ldr	r0, [pc, #96]	@ (80023e4 <HAL_InitTick+0xf0>)
 8002384:	f006 f818 	bl	80083b8 <HAL_TIM_Base_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800238e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002392:	2b00      	cmp	r3, #0
 8002394:	d11b      	bne.n	80023ce <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002396:	4813      	ldr	r0, [pc, #76]	@ (80023e4 <HAL_InitTick+0xf0>)
 8002398:	f006 f85e 	bl	8008458 <HAL_TIM_Base_Start_IT>
 800239c:	4603      	mov	r3, r0
 800239e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80023a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d111      	bne.n	80023ce <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023aa:	201c      	movs	r0, #28
 80023ac:	f003 f88e 	bl	80054cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b0f      	cmp	r3, #15
 80023b4:	d808      	bhi.n	80023c8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80023b6:	2200      	movs	r2, #0
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	201c      	movs	r0, #28
 80023bc:	f003 f86a 	bl	8005494 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023c0:	4a09      	ldr	r2, [pc, #36]	@ (80023e8 <HAL_InitTick+0xf4>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	e002      	b.n	80023ce <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80023ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3738      	adds	r7, #56	@ 0x38
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40023800 	.word	0x40023800
 80023e0:	431bde83 	.word	0x431bde83
 80023e4:	200002c8 	.word	0x200002c8
 80023e8:	20000014 	.word	0x20000014

080023ec <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80023f0:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <SDTimer_Handler+0x40>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d006      	beq.n	8002408 <SDTimer_Handler+0x1c>
    Timer1--;
 80023fa:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <SDTimer_Handler+0x40>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	3b01      	subs	r3, #1
 8002402:	b2da      	uxtb	r2, r3
 8002404:	4b09      	ldr	r3, [pc, #36]	@ (800242c <SDTimer_Handler+0x40>)
 8002406:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002408:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <SDTimer_Handler+0x44>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d006      	beq.n	8002420 <SDTimer_Handler+0x34>
    Timer2--;
 8002412:	4b07      	ldr	r3, [pc, #28]	@ (8002430 <SDTimer_Handler+0x44>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	3b01      	subs	r3, #1
 800241a:	b2da      	uxtb	r2, r3
 800241c:	4b04      	ldr	r3, [pc, #16]	@ (8002430 <SDTimer_Handler+0x44>)
 800241e:	701a      	strb	r2, [r3, #0]
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20000311 	.word	0x20000311
 8002430:	20000312 	.word	0x20000312

08002434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <NMI_Handler+0x4>

0800243c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002440:	bf00      	nop
 8002442:	e7fd      	b.n	8002440 <HardFault_Handler+0x4>

08002444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002448:	bf00      	nop
 800244a:	e7fd      	b.n	8002448 <MemManage_Handler+0x4>

0800244c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002450:	bf00      	nop
 8002452:	e7fd      	b.n	8002450 <BusFault_Handler+0x4>

08002454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <UsageFault_Handler+0x4>

0800245c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002470:	4802      	ldr	r0, [pc, #8]	@ (800247c <ADC_IRQHandler+0x10>)
 8002472:	f002 fa34 	bl	80048de <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	200000b0 	.word	0x200000b0

08002480 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  FatFsCnt++;
 8002484:	4b0a      	ldr	r3, [pc, #40]	@ (80024b0 <TIM2_IRQHandler+0x30>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	3301      	adds	r3, #1
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4b08      	ldr	r3, [pc, #32]	@ (80024b0 <TIM2_IRQHandler+0x30>)
 8002490:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10){
 8002492:	4b07      	ldr	r3, [pc, #28]	@ (80024b0 <TIM2_IRQHandler+0x30>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b09      	cmp	r3, #9
 800249a:	d904      	bls.n	80024a6 <TIM2_IRQHandler+0x26>
	  FatFsCnt = 0;
 800249c:	4b04      	ldr	r3, [pc, #16]	@ (80024b0 <TIM2_IRQHandler+0x30>)
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 80024a2:	f7ff ffa3 	bl	80023ec <SDTimer_Handler>
  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024a6:	4803      	ldr	r0, [pc, #12]	@ (80024b4 <TIM2_IRQHandler+0x34>)
 80024a8:	f006 f867 	bl	800857a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000310 	.word	0x20000310
 80024b4:	200002c8 	.word	0x200002c8

080024b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024bc:	4802      	ldr	r0, [pc, #8]	@ (80024c8 <TIM3_IRQHandler+0x10>)
 80024be:	f006 f85c 	bl	800857a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000224 	.word	0x20000224

080024cc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024d0:	4802      	ldr	r0, [pc, #8]	@ (80024dc <DMA2_Stream0_IRQHandler+0x10>)
 80024d2:	f003 f97f 	bl	80057d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	200000f8 	.word	0x200000f8

080024e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return 1;
 80024e4:	2301      	movs	r3, #1
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <_kill>:

int _kill(int pid, int sig)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024fa:	f011 f90b 	bl	8013714 <__errno>
 80024fe:	4603      	mov	r3, r0
 8002500:	2216      	movs	r2, #22
 8002502:	601a      	str	r2, [r3, #0]
  return -1;
 8002504:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <_exit>:

void _exit (int status)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002518:	f04f 31ff 	mov.w	r1, #4294967295
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ffe7 	bl	80024f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002522:	bf00      	nop
 8002524:	e7fd      	b.n	8002522 <_exit+0x12>

08002526 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b086      	sub	sp, #24
 800252a:	af00      	add	r7, sp, #0
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	e00a      	b.n	800254e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002538:	f3af 8000 	nop.w
 800253c:	4601      	mov	r1, r0
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	60ba      	str	r2, [r7, #8]
 8002544:	b2ca      	uxtb	r2, r1
 8002546:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	3301      	adds	r3, #1
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	429a      	cmp	r2, r3
 8002554:	dbf0      	blt.n	8002538 <_read+0x12>
  }

  return len;
 8002556:	687b      	ldr	r3, [r7, #4]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	e009      	b.n	8002586 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	60ba      	str	r2, [r7, #8]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	3301      	adds	r3, #1
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	429a      	cmp	r2, r3
 800258c:	dbf1      	blt.n	8002572 <_write+0x12>
  }
  return len;
 800258e:	687b      	ldr	r3, [r7, #4]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <_close>:

int _close(int file)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025c0:	605a      	str	r2, [r3, #4]
  return 0;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <_isatty>:

int _isatty(int file)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025d8:	2301      	movs	r3, #1
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b085      	sub	sp, #20
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002608:	4a14      	ldr	r2, [pc, #80]	@ (800265c <_sbrk+0x5c>)
 800260a:	4b15      	ldr	r3, [pc, #84]	@ (8002660 <_sbrk+0x60>)
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002614:	4b13      	ldr	r3, [pc, #76]	@ (8002664 <_sbrk+0x64>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d102      	bne.n	8002622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800261c:	4b11      	ldr	r3, [pc, #68]	@ (8002664 <_sbrk+0x64>)
 800261e:	4a12      	ldr	r2, [pc, #72]	@ (8002668 <_sbrk+0x68>)
 8002620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002622:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <_sbrk+0x64>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	429a      	cmp	r2, r3
 800262e:	d207      	bcs.n	8002640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002630:	f011 f870 	bl	8013714 <__errno>
 8002634:	4603      	mov	r3, r0
 8002636:	220c      	movs	r2, #12
 8002638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
 800263e:	e009      	b.n	8002654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002640:	4b08      	ldr	r3, [pc, #32]	@ (8002664 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002646:	4b07      	ldr	r3, [pc, #28]	@ (8002664 <_sbrk+0x64>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	4a05      	ldr	r2, [pc, #20]	@ (8002664 <_sbrk+0x64>)
 8002650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002652:	68fb      	ldr	r3, [r7, #12]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20018000 	.word	0x20018000
 8002660:	00000400 	.word	0x00000400
 8002664:	20000314 	.word	0x20000314
 8002668:	200164b8 	.word	0x200164b8

0800266c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002670:	4b06      	ldr	r3, [pc, #24]	@ (800268c <SystemInit+0x20>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002676:	4a05      	ldr	r2, [pc, #20]	@ (800268c <SystemInit+0x20>)
 8002678:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800267c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <Reset_Handler>:
 8002690:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026c8 <LoopFillZerobss+0xe>
 8002694:	f7ff ffea 	bl	800266c <SystemInit>
 8002698:	480c      	ldr	r0, [pc, #48]	@ (80026cc <LoopFillZerobss+0x12>)
 800269a:	490d      	ldr	r1, [pc, #52]	@ (80026d0 <LoopFillZerobss+0x16>)
 800269c:	4a0d      	ldr	r2, [pc, #52]	@ (80026d4 <LoopFillZerobss+0x1a>)
 800269e:	2300      	movs	r3, #0
 80026a0:	e002      	b.n	80026a8 <LoopCopyDataInit>

080026a2 <CopyDataInit>:
 80026a2:	58d4      	ldr	r4, [r2, r3]
 80026a4:	50c4      	str	r4, [r0, r3]
 80026a6:	3304      	adds	r3, #4

080026a8 <LoopCopyDataInit>:
 80026a8:	18c4      	adds	r4, r0, r3
 80026aa:	428c      	cmp	r4, r1
 80026ac:	d3f9      	bcc.n	80026a2 <CopyDataInit>
 80026ae:	4a0a      	ldr	r2, [pc, #40]	@ (80026d8 <LoopFillZerobss+0x1e>)
 80026b0:	4c0a      	ldr	r4, [pc, #40]	@ (80026dc <LoopFillZerobss+0x22>)
 80026b2:	2300      	movs	r3, #0
 80026b4:	e001      	b.n	80026ba <LoopFillZerobss>

080026b6 <FillZerobss>:
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	3204      	adds	r2, #4

080026ba <LoopFillZerobss>:
 80026ba:	42a2      	cmp	r2, r4
 80026bc:	d3fb      	bcc.n	80026b6 <FillZerobss>
 80026be:	f011 f82f 	bl	8013720 <__libc_init_array>
 80026c2:	f7ff f8c3 	bl	800184c <main>
 80026c6:	4770      	bx	lr
 80026c8:	20018000 	.word	0x20018000
 80026cc:	20000000 	.word	0x20000000
 80026d0:	20000090 	.word	0x20000090
 80026d4:	0802c818 	.word	0x0802c818
 80026d8:	20000090 	.word	0x20000090
 80026dc:	200164b4 	.word	0x200164b4

080026e0 <DMA1_Stream0_IRQHandler>:
 80026e0:	e7fe      	b.n	80026e0 <DMA1_Stream0_IRQHandler>

080026e2 <display_init>:

#define LINE_HEIGHT 18  // Altura de la fuente (ajustar según la fuente usada)
#define DISPLAY_WIDTH 128
#define DISPLAY_HEIGHT 64
/*================[Public functions]=====================*/
void display_init(void){
 80026e2:	b580      	push	{r7, lr}
 80026e4:	af00      	add	r7, sp, #0
	/*Wrapper de la función que inicializa el display*/
	ssd1306_Init();
 80026e6:	f000 fa21 	bl	8002b2c <ssd1306_Init>
	return;
 80026ea:	bf00      	nop
}
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <display_text>:

void display_text(const char *text,  uint8_t font_size) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	70fb      	strb	r3, [r7, #3]
    uint8_t x = 0;  			// Posición inicial en X
 80026fc:	2300      	movs	r3, #0
 80026fe:	73fb      	strb	r3, [r7, #15]
    uint8_t y = 0;  			// Posición inicial en Y
 8002700:	2300      	movs	r3, #0
 8002702:	73bb      	strb	r3, [r7, #14]
    uint8_t char_width = 0;   	// Ancho del carácter actual
 8002704:	2300      	movs	r3, #0
 8002706:	737b      	strb	r3, [r7, #13]
    uint8_t line_height = 0;  	// Altura de la línea actual
 8002708:	2300      	movs	r3, #0
 800270a:	733b      	strb	r3, [r7, #12]
    // Configurar la fuente según el tamaño
    switch (font_size) {
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	2b03      	cmp	r3, #3
 8002710:	d010      	beq.n	8002734 <display_text+0x44>
 8002712:	2b03      	cmp	r3, #3
 8002714:	dc13      	bgt.n	800273e <display_text+0x4e>
 8002716:	2b01      	cmp	r3, #1
 8002718:	d002      	beq.n	8002720 <display_text+0x30>
 800271a:	2b02      	cmp	r3, #2
 800271c:	d005      	beq.n	800272a <display_text+0x3a>
 800271e:	e00e      	b.n	800273e <display_text+0x4e>
        case 1: 									// Tamaño pequeño
            char_width = 7;
 8002720:	2307      	movs	r3, #7
 8002722:	737b      	strb	r3, [r7, #13]
            line_height = 10;
 8002724:	230a      	movs	r3, #10
 8002726:	733b      	strb	r3, [r7, #12]
            break;
 8002728:	e00e      	b.n	8002748 <display_text+0x58>
        case 2: 									// Tamaño mediano
            char_width = 11;
 800272a:	230b      	movs	r3, #11
 800272c:	737b      	strb	r3, [r7, #13]
            line_height = 18;
 800272e:	2312      	movs	r3, #18
 8002730:	733b      	strb	r3, [r7, #12]
            break;
 8002732:	e009      	b.n	8002748 <display_text+0x58>
        case 3: 									// Tamaño grande
            char_width = 16;
 8002734:	2310      	movs	r3, #16
 8002736:	737b      	strb	r3, [r7, #13]
            line_height = 24;
 8002738:	2318      	movs	r3, #24
 800273a:	733b      	strb	r3, [r7, #12]
            break;
 800273c:	e004      	b.n	8002748 <display_text+0x58>
        default: 									// Tamaño por defecto
            char_width = 7;
 800273e:	2307      	movs	r3, #7
 8002740:	737b      	strb	r3, [r7, #13]
            line_height = 10;
 8002742:	230a      	movs	r3, #10
 8002744:	733b      	strb	r3, [r7, #12]
            break;
 8002746:	bf00      	nop
    }

    ssd1306_Fill(Black);  // Limpiar la pantalla
 8002748:	2000      	movs	r0, #0
 800274a:	f000 fa59 	bl	8002c00 <ssd1306_Fill>

    while (*text) {
 800274e:	e053      	b.n	80027f8 <display_text+0x108>
        // Verificar si es un salto de línea manual
        if (*text == '\n') {
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b0a      	cmp	r3, #10
 8002756:	d106      	bne.n	8002766 <display_text+0x76>
            y += line_height;  											// Avanzo a la siguiente linea
 8002758:	7bba      	ldrb	r2, [r7, #14]
 800275a:	7b3b      	ldrb	r3, [r7, #12]
 800275c:	4413      	add	r3, r2
 800275e:	73bb      	strb	r3, [r7, #14]
            x = 0;             											// Reinicio x
 8002760:	2300      	movs	r3, #0
 8002762:	73fb      	strb	r3, [r7, #15]
 8002764:	e040      	b.n	80027e8 <display_text+0xf8>
        } else {
            // Escribir el carácter actual
            ssd1306_SetCursor(x, y);
 8002766:	7bba      	ldrb	r2, [r7, #14]
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f000 fb91 	bl	8002e94 <ssd1306_SetCursor>
            if(font_size == 1){
 8002772:	78fb      	ldrb	r3, [r7, #3]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d108      	bne.n	800278a <display_text+0x9a>
            	ssd1306_WriteChar(*text, Font_7x10, White);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	7818      	ldrb	r0, [r3, #0]
 800277c:	4b24      	ldr	r3, [pc, #144]	@ (8002810 <display_text+0x120>)
 800277e:	2201      	movs	r2, #1
 8002780:	9200      	str	r2, [sp, #0]
 8002782:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002784:	f000 fad0 	bl	8002d28 <ssd1306_WriteChar>
 8002788:	e01f      	b.n	80027ca <display_text+0xda>
            }
            else if(font_size == 2){
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d108      	bne.n	80027a2 <display_text+0xb2>
            	ssd1306_WriteChar(*text, Font_11x18, White);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	7818      	ldrb	r0, [r3, #0]
 8002794:	4b1f      	ldr	r3, [pc, #124]	@ (8002814 <display_text+0x124>)
 8002796:	2201      	movs	r2, #1
 8002798:	9200      	str	r2, [sp, #0]
 800279a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800279c:	f000 fac4 	bl	8002d28 <ssd1306_WriteChar>
 80027a0:	e013      	b.n	80027ca <display_text+0xda>
            }
            else if(font_size == 3){
 80027a2:	78fb      	ldrb	r3, [r7, #3]
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d108      	bne.n	80027ba <display_text+0xca>
            	ssd1306_WriteChar(*text, Font_16x24, White);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	7818      	ldrb	r0, [r3, #0]
 80027ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002818 <display_text+0x128>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	9200      	str	r2, [sp, #0]
 80027b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027b4:	f000 fab8 	bl	8002d28 <ssd1306_WriteChar>
 80027b8:	e007      	b.n	80027ca <display_text+0xda>
            }
            else{
            	ssd1306_WriteChar(*text, Font_7x10, White);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	7818      	ldrb	r0, [r3, #0]
 80027be:	4b14      	ldr	r3, [pc, #80]	@ (8002810 <display_text+0x120>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	9200      	str	r2, [sp, #0]
 80027c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027c6:	f000 faaf 	bl	8002d28 <ssd1306_WriteChar>
            }

            // Avanzar la posición X
            x += char_width;  // Avanzar por el ancho de la fuente
 80027ca:	7bfa      	ldrb	r2, [r7, #15]
 80027cc:	7b7b      	ldrb	r3, [r7, #13]
 80027ce:	4413      	add	r3, r2
 80027d0:	73fb      	strb	r3, [r7, #15]
            if (x + char_width > DISPLAY_WIDTH) {  							// Si se pasa del ancho de pantalla
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	7b7b      	ldrb	r3, [r7, #13]
 80027d6:	4413      	add	r3, r2
 80027d8:	2b80      	cmp	r3, #128	@ 0x80
 80027da:	dd05      	ble.n	80027e8 <display_text+0xf8>
                x = 0;                      								// Reinicio x
 80027dc:	2300      	movs	r3, #0
 80027de:	73fb      	strb	r3, [r7, #15]
                y += line_height;           								// Avanzo a la siguiente linea
 80027e0:	7bba      	ldrb	r2, [r7, #14]
 80027e2:	7b3b      	ldrb	r3, [r7, #12]
 80027e4:	4413      	add	r3, r2
 80027e6:	73bb      	strb	r3, [r7, #14]
            }
        }

        // Avanzar al siguiente carácter
        text++;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3301      	adds	r3, #1
 80027ec:	607b      	str	r3, [r7, #4]

        // Verificar si alcanzamos el final de la pantalla
        if (y + line_height > DISPLAY_HEIGHT) {
 80027ee:	7bba      	ldrb	r2, [r7, #14]
 80027f0:	7b3b      	ldrb	r3, [r7, #12]
 80027f2:	4413      	add	r3, r2
 80027f4:	2b40      	cmp	r3, #64	@ 0x40
 80027f6:	dc04      	bgt.n	8002802 <display_text+0x112>
    while (*text) {
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1a7      	bne.n	8002750 <display_text+0x60>
 8002800:	e000      	b.n	8002804 <display_text+0x114>
            break;  // No hay más espacio para mostrar texto
 8002802:	bf00      	nop
        }
    }

    ssd1306_UpdateScreen();  // Actualizar pantalla
 8002804:	f000 fa14 	bl	8002c30 <ssd1306_UpdateScreen>
}
 8002808:	bf00      	nop
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	080184b4 	.word	0x080184b4
 8002814:	080184c0 	.word	0x080184c0
 8002818:	080184d8 	.word	0x080184d8

0800281c <display_start_msg>:

void display_start_msg(void){
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af02      	add	r7, sp, #8
	/*Muestra mensaje de insertar clave*/
	uint8_t x = 5;
 8002822:	2305      	movs	r3, #5
 8002824:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 800282a:	2000      	movs	r0, #0
 800282c:	f000 f9e8 	bl	8002c00 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8002830:	79ba      	ldrb	r2, [r7, #6]
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f000 fb2c 	bl	8002e94 <ssd1306_SetCursor>
	ssd1306_WriteString("Ingrese", Font_16x26, White);
 800283c:	4b0f      	ldr	r3, [pc, #60]	@ (800287c <display_start_msg+0x60>)
 800283e:	2201      	movs	r2, #1
 8002840:	9200      	str	r2, [sp, #0]
 8002842:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002844:	480e      	ldr	r0, [pc, #56]	@ (8002880 <display_start_msg+0x64>)
 8002846:	f000 faff 	bl	8002e48 <ssd1306_WriteString>
	x += 15;
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	330f      	adds	r3, #15
 800284e:	71fb      	strb	r3, [r7, #7]
	y += 28;
 8002850:	79bb      	ldrb	r3, [r7, #6]
 8002852:	331c      	adds	r3, #28
 8002854:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8002856:	79ba      	ldrb	r2, [r7, #6]
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f000 fb19 	bl	8002e94 <ssd1306_SetCursor>
	ssd1306_WriteString("clave", Font_16x26, White);
 8002862:	4b06      	ldr	r3, [pc, #24]	@ (800287c <display_start_msg+0x60>)
 8002864:	2201      	movs	r2, #1
 8002866:	9200      	str	r2, [sp, #0]
 8002868:	cb0e      	ldmia	r3, {r1, r2, r3}
 800286a:	4806      	ldr	r0, [pc, #24]	@ (8002884 <display_start_msg+0x68>)
 800286c:	f000 faec 	bl	8002e48 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002870:	f000 f9de 	bl	8002c30 <ssd1306_UpdateScreen>
	return;
 8002874:	bf00      	nop
}
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	080184cc 	.word	0x080184cc
 8002880:	08014778 	.word	0x08014778
 8002884:	08014780 	.word	0x08014780

08002888 <display_sequence_entry_msg>:

void display_sequence_entry_msg(uint8_t input_cont){
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af02      	add	r7, sp, #8
 800288e:	4603      	mov	r3, r0
 8002890:	71fb      	strb	r3, [r7, #7]
	/*Maneja el ingreso de digitos en el display*/
	char message[SEQUENCE_LENGTH + 1] = {0};
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	f107 0310 	add.w	r3, r7, #16
 800289a:	2100      	movs	r1, #0
 800289c:	460a      	mov	r2, r1
 800289e:	801a      	strh	r2, [r3, #0]
 80028a0:	460a      	mov	r2, r1
 80028a2:	709a      	strb	r2, [r3, #2]
	uint8_t x = 10;														//x e y definen coordenadas en pantalla
 80028a4:	230a      	movs	r3, #10
 80028a6:	75bb      	strb	r3, [r7, #22]
	uint8_t y = 26;
 80028a8:	231a      	movs	r3, #26
 80028aa:	757b      	strb	r3, [r7, #21]
	//Chequeo que counter no supere el numero maximo de digitos
	if(input_cont <= SEQUENCE_LENGTH){
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	2b06      	cmp	r3, #6
 80028b0:	d823      	bhi.n	80028fa <display_sequence_entry_msg+0x72>
		//Armo el string a mostrar en el display
		for(uint8_t i = 0; i < input_cont; i++){
 80028b2:	2300      	movs	r3, #0
 80028b4:	75fb      	strb	r3, [r7, #23]
 80028b6:	e008      	b.n	80028ca <display_sequence_entry_msg+0x42>
			message[i] = '*';
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	3318      	adds	r3, #24
 80028bc:	443b      	add	r3, r7
 80028be:	222a      	movs	r2, #42	@ 0x2a
 80028c0:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t i = 0; i < input_cont; i++){
 80028c4:	7dfb      	ldrb	r3, [r7, #23]
 80028c6:	3301      	adds	r3, #1
 80028c8:	75fb      	strb	r3, [r7, #23]
 80028ca:	7dfa      	ldrb	r2, [r7, #23]
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d3f2      	bcc.n	80028b8 <display_sequence_entry_msg+0x30>
		}
		//Muestro el string
		ssd1306_Fill(Black);
 80028d2:	2000      	movs	r0, #0
 80028d4:	f000 f994 	bl	8002c00 <ssd1306_Fill>
		ssd1306_SetCursor(x, y);
 80028d8:	7d7a      	ldrb	r2, [r7, #21]
 80028da:	7dbb      	ldrb	r3, [r7, #22]
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 fad8 	bl	8002e94 <ssd1306_SetCursor>
		ssd1306_WriteString(message, Font_16x26, White);
 80028e4:	4b07      	ldr	r3, [pc, #28]	@ (8002904 <display_sequence_entry_msg+0x7c>)
 80028e6:	f107 000c 	add.w	r0, r7, #12
 80028ea:	2201      	movs	r2, #1
 80028ec:	9200      	str	r2, [sp, #0]
 80028ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028f0:	f000 faaa 	bl	8002e48 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80028f4:	f000 f99c 	bl	8002c30 <ssd1306_UpdateScreen>
	}
	return;
 80028f8:	bf00      	nop
 80028fa:	bf00      	nop
}
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	080184cc 	.word	0x080184cc

08002908 <display_timeout_msg>:


void display_timeout_msg(void){
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
	display_text("\n Timeout!!!", 2);
 800290c:	2102      	movs	r1, #2
 800290e:	4802      	ldr	r0, [pc, #8]	@ (8002918 <display_timeout_msg+0x10>)
 8002910:	f7ff feee 	bl	80026f0 <display_text>
	return;
 8002914:	bf00      	nop
}
 8002916:	bd80      	pop	{r7, pc}
 8002918:	08014788 	.word	0x08014788

0800291c <display_incomplete_entry_msg>:

void display_incomplete_entry_msg(void){
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
	display_text("  Ingrese\n secuencia\n  valida", 2);
 8002920:	2102      	movs	r1, #2
 8002922:	4802      	ldr	r0, [pc, #8]	@ (800292c <display_incomplete_entry_msg+0x10>)
 8002924:	f7ff fee4 	bl	80026f0 <display_text>
	return;
 8002928:	bf00      	nop
}
 800292a:	bd80      	pop	{r7, pc}
 800292c:	08014798 	.word	0x08014798

08002930 <display_access_granted_msg>:

void display_access_granted_msg(void){
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
	display_text("  Acceso\n concedido", 2);
 8002934:	2102      	movs	r1, #2
 8002936:	4802      	ldr	r0, [pc, #8]	@ (8002940 <display_access_granted_msg+0x10>)
 8002938:	f7ff feda 	bl	80026f0 <display_text>
	return;
 800293c:	bf00      	nop
}
 800293e:	bd80      	pop	{r7, pc}
 8002940:	080147b8 	.word	0x080147b8

08002944 <display_user_found_msg>:

void display_user_found_msg(void){
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
	display_text("  Usuario\n  hallado", 2);
 8002948:	2102      	movs	r1, #2
 800294a:	4802      	ldr	r0, [pc, #8]	@ (8002954 <display_user_found_msg+0x10>)
 800294c:	f7ff fed0 	bl	80026f0 <display_text>
	return;
 8002950:	bf00      	nop
}
 8002952:	bd80      	pop	{r7, pc}
 8002954:	080147cc 	.word	0x080147cc

08002958 <display_user_not_found_msg>:

void display_user_not_found_msg(void){
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
	display_text("  Usuario\n    no\n  existe", 2);
 800295c:	2102      	movs	r1, #2
 800295e:	4802      	ldr	r0, [pc, #8]	@ (8002968 <display_user_not_found_msg+0x10>)
 8002960:	f7ff fec6 	bl	80026f0 <display_text>
	return;
 8002964:	bf00      	nop
}
 8002966:	bd80      	pop	{r7, pc}
 8002968:	080147e0 	.word	0x080147e0

0800296c <display_start_voice_recognition_msg>:

void display_start_voice_recognition_msg(void){
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
	display_text("  Comienza\n  captura\n  de voz", 2);
 8002970:	2102      	movs	r1, #2
 8002972:	4802      	ldr	r0, [pc, #8]	@ (800297c <display_start_voice_recognition_msg+0x10>)
 8002974:	f7ff febc 	bl	80026f0 <display_text>
	return;
 8002978:	bf00      	nop
}
 800297a:	bd80      	pop	{r7, pc}
 800297c:	080147fc 	.word	0x080147fc

08002980 <countdown_msg>:

void countdown_msg(void){
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af02      	add	r7, sp, #8
	/*Muestra mensaje de cuenta regresiva en pantalla*/
	uint8_t x = 50;
 8002986:	2332      	movs	r3, #50	@ 0x32
 8002988:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 26;
 800298a:	231a      	movs	r3, #26
 800298c:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 800298e:	2000      	movs	r0, #0
 8002990:	f000 f936 	bl	8002c00 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8002994:	79ba      	ldrb	r2, [r7, #6]
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	4611      	mov	r1, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fa7a 	bl	8002e94 <ssd1306_SetCursor>
	ssd1306_WriteString("3", Font_16x26, White);
 80029a0:	4b1e      	ldr	r3, [pc, #120]	@ (8002a1c <countdown_msg+0x9c>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	9200      	str	r2, [sp, #0]
 80029a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029a8:	481d      	ldr	r0, [pc, #116]	@ (8002a20 <countdown_msg+0xa0>)
 80029aa:	f000 fa4d 	bl	8002e48 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80029ae:	f000 f93f 	bl	8002c30 <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 80029b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029b6:	f00d fcab 	bl	8010310 <vTaskDelay>
	ssd1306_Fill(Black);
 80029ba:	2000      	movs	r0, #0
 80029bc:	f000 f920 	bl	8002c00 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80029c0:	79ba      	ldrb	r2, [r7, #6]
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	4611      	mov	r1, r2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fa64 	bl	8002e94 <ssd1306_SetCursor>
	ssd1306_WriteString("2", Font_16x26, White);
 80029cc:	4b13      	ldr	r3, [pc, #76]	@ (8002a1c <countdown_msg+0x9c>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	9200      	str	r2, [sp, #0]
 80029d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029d4:	4813      	ldr	r0, [pc, #76]	@ (8002a24 <countdown_msg+0xa4>)
 80029d6:	f000 fa37 	bl	8002e48 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80029da:	f000 f929 	bl	8002c30 <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 80029de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029e2:	f00d fc95 	bl	8010310 <vTaskDelay>
	ssd1306_Fill(Black);
 80029e6:	2000      	movs	r0, #0
 80029e8:	f000 f90a 	bl	8002c00 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80029ec:	79ba      	ldrb	r2, [r7, #6]
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	4611      	mov	r1, r2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 fa4e 	bl	8002e94 <ssd1306_SetCursor>
	ssd1306_WriteString("1", Font_16x26, White);
 80029f8:	4b08      	ldr	r3, [pc, #32]	@ (8002a1c <countdown_msg+0x9c>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	9200      	str	r2, [sp, #0]
 80029fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a00:	4809      	ldr	r0, [pc, #36]	@ (8002a28 <countdown_msg+0xa8>)
 8002a02:	f000 fa21 	bl	8002e48 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002a06:	f000 f913 	bl	8002c30 <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 8002a0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a0e:	f00d fc7f 	bl	8010310 <vTaskDelay>
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	080184cc 	.word	0x080184cc
 8002a20:	0801481c 	.word	0x0801481c
 8002a24:	08014820 	.word	0x08014820
 8002a28:	08014824 	.word	0x08014824

08002a2c <display_capturing_voice_msg>:

void display_capturing_voice_msg(void){
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
	display_text("  Captura\n    ...", 2);
 8002a30:	2102      	movs	r1, #2
 8002a32:	4802      	ldr	r0, [pc, #8]	@ (8002a3c <display_capturing_voice_msg+0x10>)
 8002a34:	f7ff fe5c 	bl	80026f0 <display_text>
	return;
 8002a38:	bf00      	nop
}
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	08014828 	.word	0x08014828

08002a40 <display_recognized_voice_msg>:

void display_recognized_voice_msg(void){
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
	display_text("    Voz\n reconocida", 2);
 8002a44:	2102      	movs	r1, #2
 8002a46:	4802      	ldr	r0, [pc, #8]	@ (8002a50 <display_recognized_voice_msg+0x10>)
 8002a48:	f7ff fe52 	bl	80026f0 <display_text>
	return;
 8002a4c:	bf00      	nop
}
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	0801483c 	.word	0x0801483c

08002a54 <display_not_recognized_voice_msg>:


void display_not_recognized_voice_msg(void){
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
	display_text("   Voz no\n reconocida", 2);
 8002a58:	2102      	movs	r1, #2
 8002a5a:	4802      	ldr	r0, [pc, #8]	@ (8002a64 <display_not_recognized_voice_msg+0x10>)
 8002a5c:	f7ff fe48 	bl	80026f0 <display_text>
	return;
 8002a60:	bf00      	nop
}
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	08014850 	.word	0x08014850

08002a68 <display_processing_data_msg>:

void display_processing_data_msg(void){
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
	display_text("  Aguarde\n    ...", 2);
 8002a6c:	2102      	movs	r1, #2
 8002a6e:	4802      	ldr	r0, [pc, #8]	@ (8002a78 <display_processing_data_msg+0x10>)
 8002a70:	f7ff fe3e 	bl	80026f0 <display_text>
	return;
 8002a74:	bf00      	nop
}
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	08014868 	.word	0x08014868

08002a7c <display_missing_database_msg>:

void display_missing_database_msg(void){
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
	display_text("  Database\n  faltante", 2);
 8002a80:	2102      	movs	r1, #2
 8002a82:	4802      	ldr	r0, [pc, #8]	@ (8002a8c <display_missing_database_msg+0x10>)
 8002a84:	f7ff fe34 	bl	80026f0 <display_text>
	return;
 8002a88:	bf00      	nop
}
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	0801487c 	.word	0x0801487c

08002a90 <display_missing_template_msg>:

void display_missing_template_msg(void){
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
	display_text("  Template\n  faltante", 2);
 8002a94:	2102      	movs	r1, #2
 8002a96:	4802      	ldr	r0, [pc, #8]	@ (8002aa0 <display_missing_template_msg+0x10>)
 8002a98:	f7ff fe2a 	bl	80026f0 <display_text>
	return;
 8002a9c:	bf00      	nop
}
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	08014894 	.word	0x08014894

08002aa4 <display_template_saved_msg>:

void display_template_saved_msg(void){
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
	display_text("  Template\n  guardado", 2);
 8002aa8:	2102      	movs	r1, #2
 8002aaa:	4802      	ldr	r0, [pc, #8]	@ (8002ab4 <display_template_saved_msg+0x10>)
 8002aac:	f7ff fe20 	bl	80026f0 <display_text>
	return;
 8002ab0:	bf00      	nop
}
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	080148ac 	.word	0x080148ac

08002ab8 <ssd1306_Reset>:
#include "main.h"
#include "cmsis_os.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
	...

08002ac8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af04      	add	r7, sp, #16
 8002ace:	4603      	mov	r3, r0
 8002ad0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad6:	9302      	str	r3, [sp, #8]
 8002ad8:	2301      	movs	r3, #1
 8002ada:	9301      	str	r3, [sp, #4]
 8002adc:	1dfb      	adds	r3, r7, #7
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2178      	movs	r1, #120	@ 0x78
 8002ae6:	4803      	ldr	r0, [pc, #12]	@ (8002af4 <ssd1306_WriteCommand+0x2c>)
 8002ae8:	f003 fbd8 	bl	800629c <HAL_I2C_Mem_Write>
}
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	20000158 	.word	0x20000158

08002af8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af04      	add	r7, sp, #16
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	f04f 32ff 	mov.w	r2, #4294967295
 8002b0a:	9202      	str	r2, [sp, #8]
 8002b0c:	9301      	str	r3, [sp, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	2301      	movs	r3, #1
 8002b14:	2240      	movs	r2, #64	@ 0x40
 8002b16:	2178      	movs	r1, #120	@ 0x78
 8002b18:	4803      	ldr	r0, [pc, #12]	@ (8002b28 <ssd1306_WriteData+0x30>)
 8002b1a:	f003 fbbf 	bl	800629c <HAL_I2C_Mem_Write>
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000158 	.word	0x20000158

08002b2c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002b30:	f7ff ffc2 	bl	8002ab8 <ssd1306_Reset>

    // Wait for the screen to boot
    vTaskDelay(100 / portTICK_RATE_MS);
 8002b34:	2064      	movs	r0, #100	@ 0x64
 8002b36:	f00d fbeb 	bl	8010310 <vTaskDelay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	f000 f9d6 	bl	8002eec <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002b40:	2020      	movs	r0, #32
 8002b42:	f7ff ffc1 	bl	8002ac8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002b46:	2000      	movs	r0, #0
 8002b48:	f7ff ffbe 	bl	8002ac8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002b4c:	20b0      	movs	r0, #176	@ 0xb0
 8002b4e:	f7ff ffbb 	bl	8002ac8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002b52:	20c8      	movs	r0, #200	@ 0xc8
 8002b54:	f7ff ffb8 	bl	8002ac8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002b58:	2000      	movs	r0, #0
 8002b5a:	f7ff ffb5 	bl	8002ac8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002b5e:	2010      	movs	r0, #16
 8002b60:	f7ff ffb2 	bl	8002ac8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002b64:	2040      	movs	r0, #64	@ 0x40
 8002b66:	f7ff ffaf 	bl	8002ac8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002b6a:	20ff      	movs	r0, #255	@ 0xff
 8002b6c:	f000 f9aa 	bl	8002ec4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002b70:	20a1      	movs	r0, #161	@ 0xa1
 8002b72:	f7ff ffa9 	bl	8002ac8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002b76:	20a6      	movs	r0, #166	@ 0xa6
 8002b78:	f7ff ffa6 	bl	8002ac8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002b7c:	20a8      	movs	r0, #168	@ 0xa8
 8002b7e:	f7ff ffa3 	bl	8002ac8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002b82:	203f      	movs	r0, #63	@ 0x3f
 8002b84:	f7ff ffa0 	bl	8002ac8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002b88:	20a4      	movs	r0, #164	@ 0xa4
 8002b8a:	f7ff ff9d 	bl	8002ac8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002b8e:	20d3      	movs	r0, #211	@ 0xd3
 8002b90:	f7ff ff9a 	bl	8002ac8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002b94:	2000      	movs	r0, #0
 8002b96:	f7ff ff97 	bl	8002ac8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002b9a:	20d5      	movs	r0, #213	@ 0xd5
 8002b9c:	f7ff ff94 	bl	8002ac8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002ba0:	20f0      	movs	r0, #240	@ 0xf0
 8002ba2:	f7ff ff91 	bl	8002ac8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002ba6:	20d9      	movs	r0, #217	@ 0xd9
 8002ba8:	f7ff ff8e 	bl	8002ac8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002bac:	2022      	movs	r0, #34	@ 0x22
 8002bae:	f7ff ff8b 	bl	8002ac8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002bb2:	20da      	movs	r0, #218	@ 0xda
 8002bb4:	f7ff ff88 	bl	8002ac8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002bb8:	2012      	movs	r0, #18
 8002bba:	f7ff ff85 	bl	8002ac8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002bbe:	20db      	movs	r0, #219	@ 0xdb
 8002bc0:	f7ff ff82 	bl	8002ac8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002bc4:	2020      	movs	r0, #32
 8002bc6:	f7ff ff7f 	bl	8002ac8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002bca:	208d      	movs	r0, #141	@ 0x8d
 8002bcc:	f7ff ff7c 	bl	8002ac8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002bd0:	2014      	movs	r0, #20
 8002bd2:	f7ff ff79 	bl	8002ac8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	f000 f988 	bl	8002eec <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002bdc:	2000      	movs	r0, #0
 8002bde:	f000 f80f 	bl	8002c00 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002be2:	f000 f825 	bl	8002c30 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002be6:	4b05      	ldr	r3, [pc, #20]	@ (8002bfc <ssd1306_Init+0xd0>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002bec:	4b03      	ldr	r3, [pc, #12]	@ (8002bfc <ssd1306_Init+0xd0>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002bf2:	4b02      	ldr	r3, [pc, #8]	@ (8002bfc <ssd1306_Init+0xd0>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	711a      	strb	r2, [r3, #4]
}
 8002bf8:	bf00      	nop
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000718 	.word	0x20000718

08002c00 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <ssd1306_Fill+0x14>
 8002c10:	2300      	movs	r3, #0
 8002c12:	e000      	b.n	8002c16 <ssd1306_Fill+0x16>
 8002c14:	23ff      	movs	r3, #255	@ 0xff
 8002c16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4803      	ldr	r0, [pc, #12]	@ (8002c2c <ssd1306_Fill+0x2c>)
 8002c1e:	f010 fcac 	bl	801357a <memset>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000318 	.word	0x20000318

08002c30 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002c36:	2300      	movs	r3, #0
 8002c38:	71fb      	strb	r3, [r7, #7]
 8002c3a:	e016      	b.n	8002c6a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	3b50      	subs	r3, #80	@ 0x50
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff ff40 	bl	8002ac8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f7ff ff3d 	bl	8002ac8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002c4e:	2010      	movs	r0, #16
 8002c50:	f7ff ff3a 	bl	8002ac8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	01db      	lsls	r3, r3, #7
 8002c58:	4a08      	ldr	r2, [pc, #32]	@ (8002c7c <ssd1306_UpdateScreen+0x4c>)
 8002c5a:	4413      	add	r3, r2
 8002c5c:	2180      	movs	r1, #128	@ 0x80
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff ff4a 	bl	8002af8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	3301      	adds	r3, #1
 8002c68:	71fb      	strb	r3, [r7, #7]
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	2b07      	cmp	r3, #7
 8002c6e:	d9e5      	bls.n	8002c3c <ssd1306_UpdateScreen+0xc>
    }
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000318 	.word	0x20000318

08002c80 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	71bb      	strb	r3, [r7, #6]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	db3d      	blt.n	8002d16 <ssd1306_DrawPixel+0x96>
 8002c9a:	79bb      	ldrb	r3, [r7, #6]
 8002c9c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c9e:	d83a      	bhi.n	8002d16 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002ca0:	797b      	ldrb	r3, [r7, #5]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d11a      	bne.n	8002cdc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002ca6:	79fa      	ldrb	r2, [r7, #7]
 8002ca8:	79bb      	ldrb	r3, [r7, #6]
 8002caa:	08db      	lsrs	r3, r3, #3
 8002cac:	b2d8      	uxtb	r0, r3
 8002cae:	4603      	mov	r3, r0
 8002cb0:	01db      	lsls	r3, r3, #7
 8002cb2:	4413      	add	r3, r2
 8002cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d24 <ssd1306_DrawPixel+0xa4>)
 8002cb6:	5cd3      	ldrb	r3, [r2, r3]
 8002cb8:	b25a      	sxtb	r2, r3
 8002cba:	79bb      	ldrb	r3, [r7, #6]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc6:	b25b      	sxtb	r3, r3
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	b259      	sxtb	r1, r3
 8002ccc:	79fa      	ldrb	r2, [r7, #7]
 8002cce:	4603      	mov	r3, r0
 8002cd0:	01db      	lsls	r3, r3, #7
 8002cd2:	4413      	add	r3, r2
 8002cd4:	b2c9      	uxtb	r1, r1
 8002cd6:	4a13      	ldr	r2, [pc, #76]	@ (8002d24 <ssd1306_DrawPixel+0xa4>)
 8002cd8:	54d1      	strb	r1, [r2, r3]
 8002cda:	e01d      	b.n	8002d18 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002cdc:	79fa      	ldrb	r2, [r7, #7]
 8002cde:	79bb      	ldrb	r3, [r7, #6]
 8002ce0:	08db      	lsrs	r3, r3, #3
 8002ce2:	b2d8      	uxtb	r0, r3
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	01db      	lsls	r3, r3, #7
 8002ce8:	4413      	add	r3, r2
 8002cea:	4a0e      	ldr	r2, [pc, #56]	@ (8002d24 <ssd1306_DrawPixel+0xa4>)
 8002cec:	5cd3      	ldrb	r3, [r2, r3]
 8002cee:	b25a      	sxtb	r2, r3
 8002cf0:	79bb      	ldrb	r3, [r7, #6]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfc:	b25b      	sxtb	r3, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	b25b      	sxtb	r3, r3
 8002d02:	4013      	ands	r3, r2
 8002d04:	b259      	sxtb	r1, r3
 8002d06:	79fa      	ldrb	r2, [r7, #7]
 8002d08:	4603      	mov	r3, r0
 8002d0a:	01db      	lsls	r3, r3, #7
 8002d0c:	4413      	add	r3, r2
 8002d0e:	b2c9      	uxtb	r1, r1
 8002d10:	4a04      	ldr	r2, [pc, #16]	@ (8002d24 <ssd1306_DrawPixel+0xa4>)
 8002d12:	54d1      	strb	r1, [r2, r3]
 8002d14:	e000      	b.n	8002d18 <ssd1306_DrawPixel+0x98>
        return;
 8002d16:	bf00      	nop
    }
}
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	20000318 	.word	0x20000318

08002d28 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002d28:	b590      	push	{r4, r7, lr}
 8002d2a:	b089      	sub	sp, #36	@ 0x24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4604      	mov	r4, r0
 8002d30:	4638      	mov	r0, r7
 8002d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002d36:	4623      	mov	r3, r4
 8002d38:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	2b1f      	cmp	r3, #31
 8002d3e:	d902      	bls.n	8002d46 <ssd1306_WriteChar+0x1e>
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	2b7e      	cmp	r3, #126	@ 0x7e
 8002d44:	d901      	bls.n	8002d4a <ssd1306_WriteChar+0x22>
        return 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	e077      	b.n	8002e3a <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e44 <ssd1306_WriteChar+0x11c>)
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	783b      	ldrb	r3, [r7, #0]
 8002d52:	4413      	add	r3, r2
 8002d54:	2b80      	cmp	r3, #128	@ 0x80
 8002d56:	dc06      	bgt.n	8002d66 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002d58:	4b3a      	ldr	r3, [pc, #232]	@ (8002e44 <ssd1306_WriteChar+0x11c>)
 8002d5a:	885b      	ldrh	r3, [r3, #2]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	787b      	ldrb	r3, [r7, #1]
 8002d60:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002d62:	2b40      	cmp	r3, #64	@ 0x40
 8002d64:	dd01      	ble.n	8002d6a <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	e067      	b.n	8002e3a <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
 8002d6e:	e04e      	b.n	8002e0e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	3b20      	subs	r3, #32
 8002d76:	7879      	ldrb	r1, [r7, #1]
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	440b      	add	r3, r1
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4413      	add	r3, r2
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61bb      	str	r3, [r7, #24]
 8002d8e:	e036      	b.n	8002dfe <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d013      	beq.n	8002dc8 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002da0:	4b28      	ldr	r3, [pc, #160]	@ (8002e44 <ssd1306_WriteChar+0x11c>)
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	b2d8      	uxtb	r0, r3
 8002dae:	4b25      	ldr	r3, [pc, #148]	@ (8002e44 <ssd1306_WriteChar+0x11c>)
 8002db0:	885b      	ldrh	r3, [r3, #2]
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f7ff ff5d 	bl	8002c80 <ssd1306_DrawPixel>
 8002dc6:	e017      	b.n	8002df8 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e44 <ssd1306_WriteChar+0x11c>)
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	b2d8      	uxtb	r0, r3
 8002dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e44 <ssd1306_WriteChar+0x11c>)
 8002dd8:	885b      	ldrh	r3, [r3, #2]
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	4413      	add	r3, r2
 8002de2:	b2d9      	uxtb	r1, r3
 8002de4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bf0c      	ite	eq
 8002dec:	2301      	moveq	r3, #1
 8002dee:	2300      	movne	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	f7ff ff44 	bl	8002c80 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	783b      	ldrb	r3, [r7, #0]
 8002e00:	461a      	mov	r2, r3
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d3c3      	bcc.n	8002d90 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	61fb      	str	r3, [r7, #28]
 8002e0e:	787b      	ldrb	r3, [r7, #1]
 8002e10:	461a      	mov	r2, r3
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d3ab      	bcc.n	8002d70 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8002e18:	4b0a      	ldr	r3, [pc, #40]	@ (8002e44 <ssd1306_WriteChar+0x11c>)
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	2a00      	cmp	r2, #0
 8002e20:	d005      	beq.n	8002e2e <ssd1306_WriteChar+0x106>
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	7bfa      	ldrb	r2, [r7, #15]
 8002e26:	3a20      	subs	r2, #32
 8002e28:	440a      	add	r2, r1
 8002e2a:	7812      	ldrb	r2, [r2, #0]
 8002e2c:	e000      	b.n	8002e30 <ssd1306_WriteChar+0x108>
 8002e2e:	783a      	ldrb	r2, [r7, #0]
 8002e30:	4413      	add	r3, r2
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	4b03      	ldr	r3, [pc, #12]	@ (8002e44 <ssd1306_WriteChar+0x11c>)
 8002e36:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3724      	adds	r7, #36	@ 0x24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd90      	pop	{r4, r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000718 	.word	0x20000718

08002e48 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	4638      	mov	r0, r7
 8002e52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002e56:	e013      	b.n	8002e80 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	7818      	ldrb	r0, [r3, #0]
 8002e5c:	7e3b      	ldrb	r3, [r7, #24]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	463b      	mov	r3, r7
 8002e62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e64:	f7ff ff60 	bl	8002d28 <ssd1306_WriteChar>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d002      	beq.n	8002e7a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	e008      	b.n	8002e8c <ssd1306_WriteString+0x44>
        }
        str++;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1e7      	bne.n	8002e58 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	781b      	ldrb	r3, [r3, #0]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	460a      	mov	r2, r1
 8002e9e:	71fb      	strb	r3, [r7, #7]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	4b05      	ldr	r3, [pc, #20]	@ (8002ec0 <ssd1306_SetCursor+0x2c>)
 8002eaa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002eac:	79bb      	ldrb	r3, [r7, #6]
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	4b03      	ldr	r3, [pc, #12]	@ (8002ec0 <ssd1306_SetCursor+0x2c>)
 8002eb2:	805a      	strh	r2, [r3, #2]
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	20000718 	.word	0x20000718

08002ec4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002ece:	2381      	movs	r3, #129	@ 0x81
 8002ed0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fdf7 	bl	8002ac8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff fdf3 	bl	8002ac8 <ssd1306_WriteCommand>
}
 8002ee2:	bf00      	nop
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d005      	beq.n	8002f08 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002efc:	23af      	movs	r3, #175	@ 0xaf
 8002efe:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002f00:	4b08      	ldr	r3, [pc, #32]	@ (8002f24 <ssd1306_SetDisplayOn+0x38>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	715a      	strb	r2, [r3, #5]
 8002f06:	e004      	b.n	8002f12 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002f08:	23ae      	movs	r3, #174	@ 0xae
 8002f0a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002f0c:	4b05      	ldr	r3, [pc, #20]	@ (8002f24 <ssd1306_SetDisplayOn+0x38>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fdd7 	bl	8002ac8 <ssd1306_WriteCommand>
}
 8002f1a:	bf00      	nop
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000718 	.word	0x20000718

08002f28 <handle_keypad_input>:
	uint8_t current_index;
	TickType_t start_time;
}keypad_context_t;

/*================[Public functions]=========================*/
display_message_t handle_keypad_input(char input, char *buffer, bool *send_flag){
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	73fb      	strb	r3, [r7, #15]
	static keypad_context_t context = { .current_state = WAITING_FOR_DIGIT_1,
										.current_index = 0,
										.start_time = 0,					};
	display_message_t current_message = DISPLAY_IDLE;
 8002f36:	2300      	movs	r3, #0
 8002f38:	75fb      	strb	r3, [r7, #23]
	switch(context.current_state){
 8002f3a:	4b62      	ldr	r3, [pc, #392]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b07      	cmp	r3, #7
 8002f40:	f000 80a1 	beq.w	8003086 <handle_keypad_input+0x15e>
 8002f44:	2b07      	cmp	r3, #7
 8002f46:	f300 80aa 	bgt.w	800309e <handle_keypad_input+0x176>
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d007      	beq.n	8002f5e <handle_keypad_input+0x36>
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f2c0 80a5 	blt.w	800309e <handle_keypad_input+0x176>
 8002f54:	3b01      	subs	r3, #1
 8002f56:	2b05      	cmp	r3, #5
 8002f58:	f200 80a1 	bhi.w	800309e <handle_keypad_input+0x176>
 8002f5c:	e01c      	b.n	8002f98 <handle_keypad_input+0x70>
	case WAITING_FOR_DIGIT_1:
		if(input != 0 && input != BORRAR_DIGITO && input != ENTER){
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d016      	beq.n	8002f92 <handle_keypad_input+0x6a>
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	2b23      	cmp	r3, #35	@ 0x23
 8002f68:	d013      	beq.n	8002f92 <handle_keypad_input+0x6a>
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f6e:	d010      	beq.n	8002f92 <handle_keypad_input+0x6a>
			buffer[0] = input;													//Guardo digito en el buffer
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	7bfa      	ldrb	r2, [r7, #15]
 8002f74:	701a      	strb	r2, [r3, #0]
			context.current_index = 1;
 8002f76:	4b53      	ldr	r3, [pc, #332]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	705a      	strb	r2, [r3, #1]
			context.start_time = xTaskGetTickCount();							//Reinicio el timeout
 8002f7c:	f00d faf2 	bl	8010564 <xTaskGetTickCount>
 8002f80:	4603      	mov	r3, r0
 8002f82:	4a50      	ldr	r2, [pc, #320]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002f84:	6053      	str	r3, [r2, #4]
			context.current_state = WAITING_FOR_DIGIT_2;						//Avanzo al siguiente estado
 8002f86:	4b4f      	ldr	r3, [pc, #316]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	701a      	strb	r2, [r3, #0]
			current_message = DISPLAY_ENTER_DIGIT;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	75fb      	strb	r3, [r7, #23]
		}
		else{
			current_message = DISPLAY_IDLE;
		}
		break;
 8002f90:	e093      	b.n	80030ba <handle_keypad_input+0x192>
			current_message = DISPLAY_IDLE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	75fb      	strb	r3, [r7, #23]
		break;
 8002f96:	e090      	b.n	80030ba <handle_keypad_input+0x192>
	case WAITING_FOR_DIGIT_3:
	case WAITING_FOR_DIGIT_4:
	case WAITING_FOR_DIGIT_5:
	case WAITING_FOR_DIGIT_6:
	case WAITING_FOR_CONFIRMATION:
		if((xTaskGetTickCount() - context.start_time) < pdMS_TO_TICKS(KEYPAD_TIMEOUT)){
 8002f98:	f00d fae4 	bl	8010564 <xTaskGetTickCount>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b49      	ldr	r3, [pc, #292]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d866      	bhi.n	800307a <handle_keypad_input+0x152>
			if(input != 0){
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d060      	beq.n	8003074 <handle_keypad_input+0x14c>
				if(input == BORRAR_DIGITO){
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	2b23      	cmp	r3, #35	@ 0x23
 8002fb6:	d124      	bne.n	8003002 <handle_keypad_input+0xda>
					if(context.current_index > 0){
 8002fb8:	4b42      	ldr	r3, [pc, #264]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002fba:	785b      	ldrb	r3, [r3, #1]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d07b      	beq.n	80030b8 <handle_keypad_input+0x190>
						context.current_index--;
 8002fc0:	4b40      	ldr	r3, [pc, #256]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002fc2:	785b      	ldrb	r3, [r3, #1]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	4b3e      	ldr	r3, [pc, #248]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002fca:	705a      	strb	r2, [r3, #1]
						buffer[context.current_index] = '\0';					//Borro el contenido previo
 8002fcc:	4b3d      	ldr	r3, [pc, #244]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002fce:	785b      	ldrb	r3, [r3, #1]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	701a      	strb	r2, [r3, #0]
						context.start_time = xTaskGetTickCount();				//Reinicio el timeout
 8002fda:	f00d fac3 	bl	8010564 <xTaskGetTickCount>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	4a38      	ldr	r2, [pc, #224]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002fe2:	6053      	str	r3, [r2, #4]
						current_message = DISPLAY_ERASE_DIGIT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	75fb      	strb	r3, [r7, #23]
						context.current_state = (context.current_state > WAITING_FOR_DIGIT_1) ? context.current_state - 1 : WAITING_FOR_DIGIT_1;
 8002fe8:	4b36      	ldr	r3, [pc, #216]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d004      	beq.n	8002ffa <handle_keypad_input+0xd2>
 8002ff0:	4b34      	ldr	r3, [pc, #208]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	e000      	b.n	8002ffc <handle_keypad_input+0xd4>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	4a31      	ldr	r2, [pc, #196]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002ffe:	7013      	strb	r3, [r2, #0]
		}
		else{
			context.current_state = TIMEOUT;
			current_message = DISPLAY_TIMEOUT_EVENT;
		}
		break;
 8003000:	e05a      	b.n	80030b8 <handle_keypad_input+0x190>
				else if(input == ENTER){
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	2b2a      	cmp	r3, #42	@ 0x2a
 8003006:	d10d      	bne.n	8003024 <handle_keypad_input+0xfc>
					if(context.current_state == WAITING_FOR_CONFIRMATION){
 8003008:	4b2e      	ldr	r3, [pc, #184]	@ (80030c4 <handle_keypad_input+0x19c>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b06      	cmp	r3, #6
 800300e:	d103      	bne.n	8003018 <handle_keypad_input+0xf0>
						context.current_state = SEND_SEQUENCE_TO_SD;
 8003010:	4b2c      	ldr	r3, [pc, #176]	@ (80030c4 <handle_keypad_input+0x19c>)
 8003012:	2207      	movs	r2, #7
 8003014:	701a      	strb	r2, [r3, #0]
		break;
 8003016:	e04f      	b.n	80030b8 <handle_keypad_input+0x190>
						context.current_state = INCOMPLETE_SEQUENCE;
 8003018:	4b2a      	ldr	r3, [pc, #168]	@ (80030c4 <handle_keypad_input+0x19c>)
 800301a:	2208      	movs	r2, #8
 800301c:	701a      	strb	r2, [r3, #0]
						current_message = DISPLAY_INCOMPLETE_SEQUENCE_EVENT;
 800301e:	230b      	movs	r3, #11
 8003020:	75fb      	strb	r3, [r7, #23]
		break;
 8003022:	e049      	b.n	80030b8 <handle_keypad_input+0x190>
					if(context.current_index < SEQUENCE_LENGTH){
 8003024:	4b27      	ldr	r3, [pc, #156]	@ (80030c4 <handle_keypad_input+0x19c>)
 8003026:	785b      	ldrb	r3, [r3, #1]
 8003028:	2b05      	cmp	r3, #5
 800302a:	d845      	bhi.n	80030b8 <handle_keypad_input+0x190>
						buffer[context.current_index++] = input;				//Agrego el digito al buffer
 800302c:	4b25      	ldr	r3, [pc, #148]	@ (80030c4 <handle_keypad_input+0x19c>)
 800302e:	785b      	ldrb	r3, [r3, #1]
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	b2d1      	uxtb	r1, r2
 8003034:	4a23      	ldr	r2, [pc, #140]	@ (80030c4 <handle_keypad_input+0x19c>)
 8003036:	7051      	strb	r1, [r2, #1]
 8003038:	461a      	mov	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	4413      	add	r3, r2
 800303e:	7bfa      	ldrb	r2, [r7, #15]
 8003040:	701a      	strb	r2, [r3, #0]
						buffer[context.current_index] = '\0';					//Aseguro que el buffer siempre termine en caracter nulo
 8003042:	4b20      	ldr	r3, [pc, #128]	@ (80030c4 <handle_keypad_input+0x19c>)
 8003044:	785b      	ldrb	r3, [r3, #1]
 8003046:	461a      	mov	r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	4413      	add	r3, r2
 800304c:	2200      	movs	r2, #0
 800304e:	701a      	strb	r2, [r3, #0]
						context.start_time = xTaskGetTickCount();				//Reinicio el timeout
 8003050:	f00d fa88 	bl	8010564 <xTaskGetTickCount>
 8003054:	4603      	mov	r3, r0
 8003056:	4a1b      	ldr	r2, [pc, #108]	@ (80030c4 <handle_keypad_input+0x19c>)
 8003058:	6053      	str	r3, [r2, #4]
						current_message = DISPLAY_ENTER_DIGIT;
 800305a:	2302      	movs	r3, #2
 800305c:	75fb      	strb	r3, [r7, #23]
						if(context.current_state != WAITING_FOR_CONFIRMATION){
 800305e:	4b19      	ldr	r3, [pc, #100]	@ (80030c4 <handle_keypad_input+0x19c>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b06      	cmp	r3, #6
 8003064:	d028      	beq.n	80030b8 <handle_keypad_input+0x190>
							context.current_state++;
 8003066:	4b17      	ldr	r3, [pc, #92]	@ (80030c4 <handle_keypad_input+0x19c>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	3301      	adds	r3, #1
 800306c:	b2da      	uxtb	r2, r3
 800306e:	4b15      	ldr	r3, [pc, #84]	@ (80030c4 <handle_keypad_input+0x19c>)
 8003070:	701a      	strb	r2, [r3, #0]
		break;
 8003072:	e021      	b.n	80030b8 <handle_keypad_input+0x190>
				current_message = DISPLAY_IDLE;
 8003074:	2300      	movs	r3, #0
 8003076:	75fb      	strb	r3, [r7, #23]
		break;
 8003078:	e01e      	b.n	80030b8 <handle_keypad_input+0x190>
			context.current_state = TIMEOUT;
 800307a:	4b12      	ldr	r3, [pc, #72]	@ (80030c4 <handle_keypad_input+0x19c>)
 800307c:	2209      	movs	r2, #9
 800307e:	701a      	strb	r2, [r3, #0]
			current_message = DISPLAY_TIMEOUT_EVENT;
 8003080:	230a      	movs	r3, #10
 8003082:	75fb      	strb	r3, [r7, #23]
		break;
 8003084:	e018      	b.n	80030b8 <handle_keypad_input+0x190>
	case SEND_SEQUENCE_TO_SD:
		*send_flag = 1;															//Habilito flag para enviar el string
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	701a      	strb	r2, [r3, #0]
		context.current_state = WAITING_FOR_DIGIT_1;
 800308c:	4b0d      	ldr	r3, [pc, #52]	@ (80030c4 <handle_keypad_input+0x19c>)
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]
		context.current_index = 0;
 8003092:	4b0c      	ldr	r3, [pc, #48]	@ (80030c4 <handle_keypad_input+0x19c>)
 8003094:	2200      	movs	r2, #0
 8003096:	705a      	strb	r2, [r3, #1]
		current_message = DISPLAY_SCREEN_WELCOME;								//Luego del procesamiento se vuelve al estado inicial
 8003098:	2301      	movs	r3, #1
 800309a:	75fb      	strb	r3, [r7, #23]
		break;
 800309c:	e00d      	b.n	80030ba <handle_keypad_input+0x192>
	case INCOMPLETE_SEQUENCE:
	case TIMEOUT:
	default:
		clear_buffer(buffer, SEQUENCE_LENGTH + 1);
 800309e:	2107      	movs	r1, #7
 80030a0:	68b8      	ldr	r0, [r7, #8]
 80030a2:	f001 fb59 	bl	8004758 <clear_buffer>
		context.current_state = WAITING_FOR_DIGIT_1;							//Vuelvo al estado inicial
 80030a6:	4b07      	ldr	r3, [pc, #28]	@ (80030c4 <handle_keypad_input+0x19c>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	701a      	strb	r2, [r3, #0]
		context.current_index = 0;
 80030ac:	4b05      	ldr	r3, [pc, #20]	@ (80030c4 <handle_keypad_input+0x19c>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	705a      	strb	r2, [r3, #1]
		current_message = DISPLAY_SCREEN_WELCOME;
 80030b2:	2301      	movs	r3, #1
 80030b4:	75fb      	strb	r3, [r7, #23]
		break;
 80030b6:	e000      	b.n	80030ba <handle_keypad_input+0x192>
		break;
 80030b8:	bf00      	nop
	}
	return current_message;
 80030ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20000720 	.word	0x20000720

080030c8 <set_row>:
	      	  	  	  	  		  	  	  	  	  {'4', '5', '6', 'B'},
												  {'7', '8', '9', 'C'},
												  {'*', '0', '#', 'D'} };

/*================[Private functions]====================*/
static void set_row(row_t row){
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIO_ROW, row, GPIO_PIN_SET);
 80030d2:	88fb      	ldrh	r3, [r7, #6]
 80030d4:	2201      	movs	r2, #1
 80030d6:	4619      	mov	r1, r3
 80030d8:	4803      	ldr	r0, [pc, #12]	@ (80030e8 <set_row+0x20>)
 80030da:	f002 ff81 	bl	8005fe0 <HAL_GPIO_WritePin>
	return;
 80030de:	bf00      	nop
}
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40020800 	.word	0x40020800

080030ec <reset_row>:

static void reset_row(row_t row){
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIO_ROW, row, GPIO_PIN_RESET);
 80030f6:	88fb      	ldrh	r3, [r7, #6]
 80030f8:	2200      	movs	r2, #0
 80030fa:	4619      	mov	r1, r3
 80030fc:	4803      	ldr	r0, [pc, #12]	@ (800310c <reset_row+0x20>)
 80030fe:	f002 ff6f 	bl	8005fe0 <HAL_GPIO_WritePin>
	return;
 8003102:	bf00      	nop
}
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40020800 	.word	0x40020800

08003110 <read_col>:

static GPIO_PinState read_col(col_t col){
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	71fb      	strb	r3, [r7, #7]
	return HAL_GPIO_ReadPin(GPIO_COL, col);
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	b29b      	uxth	r3, r3
 800311e:	4619      	mov	r1, r3
 8003120:	4803      	ldr	r0, [pc, #12]	@ (8003130 <read_col+0x20>)
 8003122:	f002 ff45 	bl	8005fb0 <HAL_GPIO_ReadPin>
 8003126:	4603      	mov	r3, r0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40020800 	.word	0x40020800

08003134 <read_keypad>:

/*================[Public functions]=====================*/
char read_keypad(void){
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
	/* La funcion barre las filas del keypad, activando una por una individualmente y leyendo la columna asociada,
	 * para así poder triangular la tecla presionada. Se realiza doble confirmacion de tecla presionada.
	 */
	char key_pressed;
	for(uint8_t i = 0; i < ROW_LENGTH; i++){
 800313a:	2300      	movs	r3, #0
 800313c:	71fb      	strb	r3, [r7, #7]
 800313e:	e04c      	b.n	80031da <read_keypad+0xa6>
		set_row(keypad_rows[i]);
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	4a2a      	ldr	r2, [pc, #168]	@ (80031ec <read_keypad+0xb8>)
 8003144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff ffbd 	bl	80030c8 <set_row>
		for(uint8_t j = 0; j < COL_LENGTH; j++){
 800314e:	2300      	movs	r3, #0
 8003150:	71bb      	strb	r3, [r7, #6]
 8003152:	e035      	b.n	80031c0 <read_keypad+0x8c>
			if(read_col(keypad_cols[j]) == GPIO_PIN_SET){					//Verifico si alguna columna esta en alto (tecla presionada)
 8003154:	79bb      	ldrb	r3, [r7, #6]
 8003156:	4a26      	ldr	r2, [pc, #152]	@ (80031f0 <read_keypad+0xbc>)
 8003158:	5cd3      	ldrb	r3, [r2, r3]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff ffd8 	bl	8003110 <read_col>
 8003160:	4603      	mov	r3, r0
 8003162:	2b01      	cmp	r3, #1
 8003164:	d129      	bne.n	80031ba <read_keypad+0x86>
				vTaskDelay(20 / portTICK_RATE_MS);							//Si una de las columnas dio alto, espero 20ms y verifico que siga en alto para confirmar
 8003166:	2014      	movs	r0, #20
 8003168:	f00d f8d2 	bl	8010310 <vTaskDelay>
				if(read_col(keypad_cols[j]) == GPIO_PIN_SET){
 800316c:	79bb      	ldrb	r3, [r7, #6]
 800316e:	4a20      	ldr	r2, [pc, #128]	@ (80031f0 <read_keypad+0xbc>)
 8003170:	5cd3      	ldrb	r3, [r2, r3]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff ffcc 	bl	8003110 <read_col>
 8003178:	4603      	mov	r3, r0
 800317a:	2b01      	cmp	r3, #1
 800317c:	d11d      	bne.n	80031ba <read_keypad+0x86>
					key_pressed = keypad_chars[i][j];						//Guardo la tecla presionada
 800317e:	79fa      	ldrb	r2, [r7, #7]
 8003180:	79bb      	ldrb	r3, [r7, #6]
 8003182:	491c      	ldr	r1, [pc, #112]	@ (80031f4 <read_keypad+0xc0>)
 8003184:	0092      	lsls	r2, r2, #2
 8003186:	440a      	add	r2, r1
 8003188:	4413      	add	r3, r2
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	717b      	strb	r3, [r7, #5]
					while(read_col(keypad_cols[j]) == GPIO_PIN_SET);		//Espero a que se deje de apretar la tecla
 800318e:	bf00      	nop
 8003190:	79bb      	ldrb	r3, [r7, #6]
 8003192:	4a17      	ldr	r2, [pc, #92]	@ (80031f0 <read_keypad+0xbc>)
 8003194:	5cd3      	ldrb	r3, [r2, r3]
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff ffba 	bl	8003110 <read_col>
 800319c:	4603      	mov	r3, r0
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d0f6      	beq.n	8003190 <read_keypad+0x5c>
					reset_row(keypad_rows[i]);								//Reseteo la fila en alto antes de salir de la funcion
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	4a11      	ldr	r2, [pc, #68]	@ (80031ec <read_keypad+0xb8>)
 80031a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff ff9e 	bl	80030ec <reset_row>
					vTaskDelay(10/portTICK_RATE_MS);						//Pequeño delay para asegurar que el boton fue liberado completamente
 80031b0:	200a      	movs	r0, #10
 80031b2:	f00d f8ad 	bl	8010310 <vTaskDelay>
					return key_pressed;
 80031b6:	797b      	ldrb	r3, [r7, #5]
 80031b8:	e013      	b.n	80031e2 <read_keypad+0xae>
		for(uint8_t j = 0; j < COL_LENGTH; j++){
 80031ba:	79bb      	ldrb	r3, [r7, #6]
 80031bc:	3301      	adds	r3, #1
 80031be:	71bb      	strb	r3, [r7, #6]
 80031c0:	79bb      	ldrb	r3, [r7, #6]
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d9c6      	bls.n	8003154 <read_keypad+0x20>
				}
			}
		}
		reset_row(keypad_rows[i]);
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	4a08      	ldr	r2, [pc, #32]	@ (80031ec <read_keypad+0xb8>)
 80031ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff ff8c 	bl	80030ec <reset_row>
	for(uint8_t i = 0; i < ROW_LENGTH; i++){
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	3301      	adds	r3, #1
 80031d8:	71fb      	strb	r3, [r7, #7]
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d9af      	bls.n	8003140 <read_keypad+0xc>
	}
	return 0;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000008 	.word	0x20000008
 80031f0:	20000010 	.word	0x20000010
 80031f4:	080184e4 	.word	0x080184e4

080031f8 <capture_voice>:
extern ADC_HandleTypeDef hadc1;
extern TIM_HandleTypeDef htim3;
extern volatile bool conv_cplt_flag;

/*================[Public functions]=====================*/
void capture_voice(uint16_t *buffer, uint32_t size){
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Start_IT(&htim3);
 8003202:	480c      	ldr	r0, [pc, #48]	@ (8003234 <capture_voice+0x3c>)
 8003204:	f005 f928 	bl	8008458 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, size);					//Inicio captura de datos con ADC
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	480a      	ldr	r0, [pc, #40]	@ (8003238 <capture_voice+0x40>)
 800320e:	f001 fc77 	bl	8004b00 <HAL_ADC_Start_DMA>
	while(!conv_cplt_flag);												//Espero a que termine la captura
 8003212:	bf00      	nop
 8003214:	4b09      	ldr	r3, [pc, #36]	@ (800323c <capture_voice+0x44>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	f083 0301 	eor.w	r3, r3, #1
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1f7      	bne.n	8003214 <capture_voice+0x1c>
	conv_cplt_flag = false;
 8003224:	4b05      	ldr	r3, [pc, #20]	@ (800323c <capture_voice+0x44>)
 8003226:	2200      	movs	r2, #0
 8003228:	701a      	strb	r2, [r3, #0]
	return;
 800322a:	bf00      	nop
}
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20000224 	.word	0x20000224
 8003238:	200000b0 	.word	0x200000b0
 800323c:	200002c4 	.word	0x200002c4

08003240 <get_voltage>:

void get_voltage(uint16_t *in_buffer, float *out_buffer, uint32_t size){
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b087      	sub	sp, #28
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
	for(uint32_t i = 0; i < size; i++){
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	e029      	b.n	80032a6 <get_voltage+0x66>
		out_buffer[i] = VOLTAGE_REFERENCE * ((float)in_buffer[i]) / ADC_RESOLUTION;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4413      	add	r3, r2
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	ee07 3a90 	vmov	s15, r3
 8003260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003264:	ee17 0a90 	vmov	r0, s15
 8003268:	f7fd f9e6 	bl	8000638 <__aeabi_f2d>
 800326c:	a313      	add	r3, pc, #76	@ (adr r3, 80032bc <get_voltage+0x7c>)
 800326e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003272:	f7fd fa39 	bl	80006e8 <__aeabi_dmul>
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	4610      	mov	r0, r2
 800327c:	4619      	mov	r1, r3
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	4b0d      	ldr	r3, [pc, #52]	@ (80032b8 <get_voltage+0x78>)
 8003284:	f7fd fb5a 	bl	800093c <__aeabi_ddiv>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4610      	mov	r0, r2
 800328e:	4619      	mov	r1, r3
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	18d4      	adds	r4, r2, r3
 8003298:	f7fd fc38 	bl	8000b0c <__aeabi_d2f>
 800329c:	4603      	mov	r3, r0
 800329e:	6023      	str	r3, [r4, #0]
	for(uint32_t i = 0; i < size; i++){
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	3301      	adds	r3, #1
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d3d1      	bcc.n	8003252 <get_voltage+0x12>
	}
}
 80032ae:	bf00      	nop
 80032b0:	bf00      	nop
 80032b2:	371c      	adds	r7, #28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd90      	pop	{r4, r7, pc}
 80032b8:	40b00000 	.word	0x40b00000
 80032bc:	66666666 	.word	0x66666666
 80032c0:	400a6666 	.word	0x400a6666

080032c4 <store_voice>:

void store_voice(uint16_t *voice_buffer, uint32_t buf_size, uint32_t frame_size, char *filename){
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
	display_message_t message;
	float *current_frame;
	//Verifico que size sea multiplo de frame_size
	if((buf_size % frame_size) != 0){
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	fb01 f202 	mul.w	r2, r1, r2
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d139      	bne.n	800335a <store_voice+0x96>
		//Manejar error
		return;
	}

	//Reservo memoria para el bloque de procesamiento
	uint32_t num_of_frames = buf_size / frame_size;
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ee:	61bb      	str	r3, [r7, #24]
	current_frame = pvPortMalloc(FLOAT_SIZE_BYTES(frame_size));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f00e f899 	bl	801142c <pvPortMalloc>
 80032fa:	6178      	str	r0, [r7, #20]
	if(current_frame == NULL){
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10c      	bne.n	800331c <store_voice+0x58>
		//Manejar este caso, enviar un print
		message = DISPLAY_ERROR_MEMORY;
 8003302:	2312      	movs	r3, #18
 8003304:	74fb      	strb	r3, [r7, #19]
		xQueueSend(display_queue, &message, portMAX_DELAY);
 8003306:	4b17      	ldr	r3, [pc, #92]	@ (8003364 <store_voice+0xa0>)
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	f107 0113 	add.w	r1, r7, #19
 800330e:	2300      	movs	r3, #0
 8003310:	f04f 32ff 	mov.w	r2, #4294967295
 8003314:	f00c f950 	bl	800f5b8 <xQueueGenericSend>
		while(1);
 8003318:	bf00      	nop
 800331a:	e7fd      	b.n	8003318 <store_voice+0x54>
	}

	for(uint8_t i = 0; i < num_of_frames; i++){
 800331c:	2300      	movs	r3, #0
 800331e:	77fb      	strb	r3, [r7, #31]
 8003320:	e013      	b.n	800334a <store_voice+0x86>
		//Convierto los valores obtenidos a tension
		get_voltage(&voice_buffer[i * frame_size], current_frame, frame_size);
 8003322:	7ffb      	ldrb	r3, [r7, #31]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	fb02 f303 	mul.w	r3, r2, r3
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4413      	add	r3, r2
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6979      	ldr	r1, [r7, #20]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff ff83 	bl	8003240 <get_voltage>

		//Guardo en la SD
		save_buffer_on_sd(filename, current_frame, frame_size);
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6979      	ldr	r1, [r7, #20]
 800333e:	6838      	ldr	r0, [r7, #0]
 8003340:	f000 fb9c 	bl	8003a7c <save_buffer_on_sd>
	for(uint8_t i = 0; i < num_of_frames; i++){
 8003344:	7ffb      	ldrb	r3, [r7, #31]
 8003346:	3301      	adds	r3, #1
 8003348:	77fb      	strb	r3, [r7, #31]
 800334a:	7ffb      	ldrb	r3, [r7, #31]
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	429a      	cmp	r2, r3
 8003350:	d8e7      	bhi.n	8003322 <store_voice+0x5e>
	}

	//Libero memoria utilizada
	vPortFree(current_frame);
 8003352:	6978      	ldr	r0, [r7, #20]
 8003354:	f00e f938 	bl	80115c8 <vPortFree>
	return;
 8003358:	e000      	b.n	800335c <store_voice+0x98>
		return;
 800335a:	bf00      	nop
}
 800335c:	3720      	adds	r7, #32
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	200002b8 	.word	0x200002b8

08003368 <extract_and_save_features>:

void extract_and_save_features(char *voice_name, char *feature_name){
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
	display_message_t message;
	float *current_frame = pvPortMalloc(FLOAT_SIZE_BYTES(FRAME_SIZE));
 8003372:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003376:	f00e f859 	bl	801142c <pvPortMalloc>
 800337a:	6138      	str	r0, [r7, #16]
	float *feature_frame = pvPortMalloc(FLOAT_SIZE_BYTES(FEATURE_SIZE));
 800337c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003380:	f00e f854 	bl	801142c <pvPortMalloc>
 8003384:	60f8      	str	r0, [r7, #12]
	if(current_frame == NULL || feature_frame == NULL){
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <extract_and_save_features+0x2a>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10c      	bne.n	80033ac <extract_and_save_features+0x44>
		message = DISPLAY_ERROR_MEMORY;
 8003392:	2312      	movs	r3, #18
 8003394:	72fb      	strb	r3, [r7, #11]
		xQueueSend(display_queue, &message, portMAX_DELAY);
 8003396:	4b1a      	ldr	r3, [pc, #104]	@ (8003400 <extract_and_save_features+0x98>)
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	f107 010b 	add.w	r1, r7, #11
 800339e:	2300      	movs	r3, #0
 80033a0:	f04f 32ff 	mov.w	r2, #4294967295
 80033a4:	f00c f908 	bl	800f5b8 <xQueueGenericSend>
		while(1);
 80033a8:	bf00      	nop
 80033aa:	e7fd      	b.n	80033a8 <extract_and_save_features+0x40>
	}
	for(uint8_t i = 0; i < NUM_OF_FRAMES; i++){
 80033ac:	2300      	movs	r3, #0
 80033ae:	75fb      	strb	r3, [r7, #23]
 80033b0:	e016      	b.n	80033e0 <extract_and_save_features+0x78>
		read_buffer_from_sd(voice_name, current_frame, FRAME_SIZE, i * FRAME_SIZE);
 80033b2:	7dfb      	ldrb	r3, [r7, #23]
 80033b4:	02db      	lsls	r3, r3, #11
 80033b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033ba:	6939      	ldr	r1, [r7, #16]
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fbcb 	bl	8003b58 <read_buffer_from_sd>
		process_frame(current_frame, feature_frame, FRAME_SIZE);
 80033c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033c6:	68f9      	ldr	r1, [r7, #12]
 80033c8:	6938      	ldr	r0, [r7, #16]
 80033ca:	f000 f977 	bl	80036bc <process_frame>
		save_buffer_on_sd(feature_name, feature_frame, FEATURE_SIZE);
 80033ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033d2:	68f9      	ldr	r1, [r7, #12]
 80033d4:	6838      	ldr	r0, [r7, #0]
 80033d6:	f000 fb51 	bl	8003a7c <save_buffer_on_sd>
	for(uint8_t i = 0; i < NUM_OF_FRAMES; i++){
 80033da:	7dfb      	ldrb	r3, [r7, #23]
 80033dc:	3301      	adds	r3, #1
 80033de:	75fb      	strb	r3, [r7, #23]
 80033e0:	7dfb      	ldrb	r3, [r7, #23]
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d9e5      	bls.n	80033b2 <extract_and_save_features+0x4a>
	}

	//Elimino el archivo de voz para quedarme solo con los features
	f_unlink(voice_name);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f00b fbdf 	bl	800ebaa <f_unlink>

	//Libero memoria utilizada
	vPortFree(current_frame);
 80033ec:	6938      	ldr	r0, [r7, #16]
 80033ee:	f00e f8eb 	bl	80115c8 <vPortFree>
	vPortFree(feature_frame);
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f00e f8e8 	bl	80115c8 <vPortFree>
	return;
 80033f8:	bf00      	nop
}
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	200002b8 	.word	0x200002b8

08003404 <check_voice>:

bool check_voice(char *template_path, char *feature_path){
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
	display_message_t message;
	float32_t *template = pvPortMalloc(FLOAT_SIZE_BYTES(FEATURE_SIZE));
 800340e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003412:	f00e f80b 	bl	801142c <pvPortMalloc>
 8003416:	6138      	str	r0, [r7, #16]
	float32_t *extracted_feature = pvPortMalloc(FLOAT_SIZE_BYTES(FEATURE_SIZE));
 8003418:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800341c:	f00e f806 	bl	801142c <pvPortMalloc>
 8003420:	60f8      	str	r0, [r7, #12]
	if(template == NULL || extracted_feature == NULL){
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <check_voice+0x2a>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10c      	bne.n	8003448 <check_voice+0x44>
		message = DISPLAY_ERROR_MEMORY;
 800342e:	2312      	movs	r3, #18
 8003430:	727b      	strb	r3, [r7, #9]
		xQueueSend(display_queue, &message, portMAX_DELAY);
 8003432:	4b27      	ldr	r3, [pc, #156]	@ (80034d0 <check_voice+0xcc>)
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	f107 0109 	add.w	r1, r7, #9
 800343a:	2300      	movs	r3, #0
 800343c:	f04f 32ff 	mov.w	r2, #4294967295
 8003440:	f00c f8ba 	bl	800f5b8 <xQueueGenericSend>
		while(1);
 8003444:	bf00      	nop
 8003446:	e7fd      	b.n	8003444 <check_voice+0x40>
	}
	bool compare_res = false;
 8003448:	2300      	movs	r3, #0
 800344a:	72fb      	strb	r3, [r7, #11]
	bool is_recognized = false;
 800344c:	2300      	movs	r3, #0
 800344e:	72bb      	strb	r3, [r7, #10]
	uint8_t frame_counter = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i = 0; i < NUM_OF_FRAMES; i++){
 8003454:	2300      	movs	r3, #0
 8003456:	75bb      	strb	r3, [r7, #22]
 8003458:	e023      	b.n	80034a2 <check_voice+0x9e>
		//Leo cada bloque del archivo, y comparo bin a bin
		read_buffer_from_sd(template_path, template, FEATURE_SIZE, i * FEATURE_SIZE);
 800345a:	7dbb      	ldrb	r3, [r7, #22]
 800345c:	029b      	lsls	r3, r3, #10
 800345e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003462:	6939      	ldr	r1, [r7, #16]
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fb77 	bl	8003b58 <read_buffer_from_sd>
		read_buffer_from_sd(feature_path, extracted_feature, FEATURE_SIZE, i * FEATURE_SIZE);
 800346a:	7dbb      	ldrb	r3, [r7, #22]
 800346c:	029b      	lsls	r3, r3, #10
 800346e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003472:	68f9      	ldr	r1, [r7, #12]
 8003474:	6838      	ldr	r0, [r7, #0]
 8003476:	f000 fb6f 	bl	8003b58 <read_buffer_from_sd>
		compare_res = compare_features(template, extracted_feature, FEATURE_SIZE);
 800347a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800347e:	68f9      	ldr	r1, [r7, #12]
 8003480:	6938      	ldr	r0, [r7, #16]
 8003482:	f000 f961 	bl	8003748 <compare_features>
 8003486:	4603      	mov	r3, r0
 8003488:	72fb      	strb	r3, [r7, #11]
		if(compare_res == false){
 800348a:	7afb      	ldrb	r3, [r7, #11]
 800348c:	f083 0301 	eor.w	r3, r3, #1
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d109      	bne.n	80034aa <check_voice+0xa6>
			break;
		}
		frame_counter++;																	//Aumento el conteo de bloques correctos
 8003496:	7dfb      	ldrb	r3, [r7, #23]
 8003498:	3301      	adds	r3, #1
 800349a:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i = 0; i < NUM_OF_FRAMES; i++){
 800349c:	7dbb      	ldrb	r3, [r7, #22]
 800349e:	3301      	adds	r3, #1
 80034a0:	75bb      	strb	r3, [r7, #22]
 80034a2:	7dbb      	ldrb	r3, [r7, #22]
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d9d8      	bls.n	800345a <check_voice+0x56>
 80034a8:	e000      	b.n	80034ac <check_voice+0xa8>
			break;
 80034aa:	bf00      	nop
	}

	//Libero memoria
	vPortFree(template);
 80034ac:	6938      	ldr	r0, [r7, #16]
 80034ae:	f00e f88b 	bl	80115c8 <vPortFree>
	vPortFree(extracted_feature);
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f00e f888 	bl	80115c8 <vPortFree>

	//Compruebo si hay NUM_OF_BLOCKS bloques correctos
	is_recognized = (frame_counter < NUM_OF_FRAMES) ? false : true;
 80034b8:	7dfb      	ldrb	r3, [r7, #23]
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	bf8c      	ite	hi
 80034be:	2301      	movhi	r3, #1
 80034c0:	2300      	movls	r3, #0
 80034c2:	72bb      	strb	r3, [r7, #10]
	return is_recognized;																	//Devuelvo estado del reconocimiento
 80034c4:	7abb      	ldrb	r3, [r7, #10]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	200002b8 	.word	0x200002b8

080034d4 <fir_filter>:
 *
 * @param psrc Puntero al vector float32_t de origen.
 * @param pdst Puntero al vector float32_t de destino.
 * @param size Tamaño de ambos vectores.
 */
static void fir_filter(float32_t *psrc, float32_t *pdst, uint32_t size){
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08a      	sub	sp, #40	@ 0x28
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
	display_message_t message;
	size_t free_heap = xPortGetFreeHeapSize();
 80034e0:	f00e f8d6 	bl	8011690 <xPortGetFreeHeapSize>
 80034e4:	61f8      	str	r0, [r7, #28]
	//Reservo memoria para el vector de estado que necesita la instancia del filtro FIR
	float32_t *fir_state = pvPortMalloc(FLOAT_SIZE_BYTES(STATE_SIZE));
 80034e6:	f242 108c 	movw	r0, #8588	@ 0x218c
 80034ea:	f00d ff9f 	bl	801142c <pvPortMalloc>
 80034ee:	61b8      	str	r0, [r7, #24]
	if(fir_state == NULL){
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10c      	bne.n	8003510 <fir_filter+0x3c>
		message = DISPLAY_ERROR_MEMORY;
 80034f6:	2312      	movs	r3, #18
 80034f8:	75fb      	strb	r3, [r7, #23]
		xQueueSend(display_queue, &message, portMAX_DELAY);
 80034fa:	4b11      	ldr	r3, [pc, #68]	@ (8003540 <fir_filter+0x6c>)
 80034fc:	6818      	ldr	r0, [r3, #0]
 80034fe:	f107 0117 	add.w	r1, r7, #23
 8003502:	2300      	movs	r3, #0
 8003504:	f04f 32ff 	mov.w	r2, #4294967295
 8003508:	f00c f856 	bl	800f5b8 <xQueueGenericSend>
		while(1);
 800350c:	bf00      	nop
 800350e:	e7fd      	b.n	800350c <fir_filter+0x38>
	}

	//Inicializo instancia de filtro fir predeterminada
	arm_fir_init_f32(&fir_instance, NUM_TAPS, (float32_t *)filter_taps, fir_state, size);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	4a0b      	ldr	r2, [pc, #44]	@ (8003544 <fir_filter+0x70>)
 8003518:	2164      	movs	r1, #100	@ 0x64
 800351a:	480b      	ldr	r0, [pc, #44]	@ (8003548 <fir_filter+0x74>)
 800351c:	f00e ff62 	bl	80123e4 <arm_fir_init_f32>

	//Filtro la señal
	arm_fir_f32(&fir_instance, psrc, pdst, size);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	68f9      	ldr	r1, [r7, #12]
 8003526:	4808      	ldr	r0, [pc, #32]	@ (8003548 <fir_filter+0x74>)
 8003528:	f00e ff6e 	bl	8012408 <arm_fir_f32>

	//Libero memoria utilizada
	vPortFree(fir_state);
 800352c:	69b8      	ldr	r0, [r7, #24]
 800352e:	f00e f84b 	bl	80115c8 <vPortFree>
	fir_state = NULL;
 8003532:	2300      	movs	r3, #0
 8003534:	61bb      	str	r3, [r7, #24]
	return;
 8003536:	bf00      	nop
}
 8003538:	3720      	adds	r7, #32
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	200002b8 	.word	0x200002b8
 8003544:	080184f4 	.word	0x080184f4
 8003548:	20000728 	.word	0x20000728

0800354c <hamming_window>:
 *
 * @param psrc Puntero al vector float32_t
 * @param size Tamaño del vector.
 */

static void hamming_window(float32_t *psrc, uint32_t size){
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]

	// Constantes para la ventana de hamming
	const float32_t alpha = 0.54f;
 8003556:	4b21      	ldr	r3, [pc, #132]	@ (80035dc <hamming_window+0x90>)
 8003558:	613b      	str	r3, [r7, #16]
	const float32_t beta = 0.46f;
 800355a:	4b21      	ldr	r3, [pc, #132]	@ (80035e0 <hamming_window+0x94>)
 800355c:	60fb      	str	r3, [r7, #12]
	float32_t hamming_coeff;

	for(uint32_t i = 0; i < size; i++){
 800355e:	2300      	movs	r3, #0
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	e033      	b.n	80035cc <hamming_window+0x80>
		// Calculo el coeficiente de hamming para la muestra actual
		hamming_coeff = alpha - beta * arm_cos_f32((2.0f * PI * i) / (size - 1));
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	ee07 3a90 	vmov	s15, r3
 800356a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800356e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80035e4 <hamming_window+0x98>
 8003572:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	3b01      	subs	r3, #1
 800357a:	ee07 3a90 	vmov	s15, r3
 800357e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003582:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003586:	eeb0 0a66 	vmov.f32	s0, s13
 800358a:	f00f fa89 	bl	8012aa0 <arm_cos_f32>
 800358e:	eeb0 7a40 	vmov.f32	s14, s0
 8003592:	edd7 7a03 	vldr	s15, [r7, #12]
 8003596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800359a:	ed97 7a04 	vldr	s14, [r7, #16]
 800359e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035a2:	edc7 7a02 	vstr	s15, [r7, #8]

		// Aplico coeficiente de hamming a la muestra de la señal
		psrc[i] *= hamming_coeff;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	4413      	add	r3, r2
 80035ae:	ed93 7a00 	vldr	s14, [r3]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80035be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c2:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t i = 0; i < size; i++){
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	3301      	adds	r3, #1
 80035ca:	617b      	str	r3, [r7, #20]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d3c7      	bcc.n	8003564 <hamming_window+0x18>
	}
	return;
 80035d4:	bf00      	nop
}
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	3f0a3d71 	.word	0x3f0a3d71
 80035e0:	3eeb851f 	.word	0x3eeb851f
 80035e4:	40c90fdb 	.word	0x40c90fdb

080035e8 <calculate_fft>:
 *
 * @param psrc Puntero al vector float32_t de origen.
 * @param pdst Puntero al vector float32_t de destino.
 * @param size Tamaño de ambos vectores.
 */
static void calculate_fft(float32_t *psrc, float32_t *pdst, uint32_t size){
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
	//Inicializo instancia de fft
	arm_rfft_fast_init_f32(&fft_instance, size);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	4619      	mov	r1, r3
 80035fa:	4806      	ldr	r0, [pc, #24]	@ (8003614 <calculate_fft+0x2c>)
 80035fc:	f00e fa00 	bl	8011a00 <arm_rfft_fast_init_f32>

	/*Calculo la fft*/
	arm_rfft_fast_f32(&fft_instance, psrc, pdst, 0);					//El cero indica que se hace transformada, no antitransformada
 8003600:	2300      	movs	r3, #0
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	68f9      	ldr	r1, [r7, #12]
 8003606:	4803      	ldr	r0, [pc, #12]	@ (8003614 <calculate_fft+0x2c>)
 8003608:	f00e fa7e 	bl	8011b08 <arm_rfft_fast_f32>
	return;
 800360c:	bf00      	nop
}
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20000734 	.word	0x20000734

08003618 <normalize_array>:
 *
 * @param psrc Puntero al vector float32_t.
 * @param size Tamaño del vector.
 */

static void normalize_array(float32_t *psrc, uint32_t size){
 8003618:	b580      	push	{r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
	float32_t min_val, max_val;
	uint32_t min_index, max_index;
	float32_t range;
	/*Encuentro el maximo y el minimo del array*/
	arm_min_f32(psrc, size, &min_val, &min_index);
 8003622:	f107 030c 	add.w	r3, r7, #12
 8003626:	f107 0214 	add.w	r2, r7, #20
 800362a:	6839      	ldr	r1, [r7, #0]
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f00e f917 	bl	8011860 <arm_min_f32>
	arm_max_f32(psrc, size, &max_val, &max_index);
 8003632:	f107 0308 	add.w	r3, r7, #8
 8003636:	f107 0210 	add.w	r2, r7, #16
 800363a:	6839      	ldr	r1, [r7, #0]
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f00e f977 	bl	8011930 <arm_max_f32>
	/*Calculo el rango*/
	range = max_val - min_val;
 8003642:	ed97 7a04 	vldr	s14, [r7, #16]
 8003646:	edd7 7a05 	vldr	s15, [r7, #20]
 800364a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800364e:	edc7 7a06 	vstr	s15, [r7, #24]
	/*Normalizo el array*/
	for(size_t i = 0; i < size; i++){
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
 8003656:	e016      	b.n	8003686 <normalize_array+0x6e>
		psrc[i] = (psrc[i] - min_val) / range;
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	4413      	add	r3, r2
 8003660:	ed93 7a00 	vldr	s14, [r3]
 8003664:	edd7 7a05 	vldr	s15, [r7, #20]
 8003668:	ee77 6a67 	vsub.f32	s13, s14, s15
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	4413      	add	r3, r2
 8003674:	ed97 7a06 	vldr	s14, [r7, #24]
 8003678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800367c:	edc3 7a00 	vstr	s15, [r3]
	for(size_t i = 0; i < size; i++){
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	3301      	adds	r3, #1
 8003684:	61fb      	str	r3, [r7, #28]
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d3e4      	bcc.n	8003658 <normalize_array+0x40>
	}
	return;
 800368e:	bf00      	nop
}
 8003690:	3720      	adds	r7, #32
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <get_fft_norm_mag>:
 *
 * @param psrc Puntero al vector float32_t de origen.
 * @param pdst Puntero al vector float32_t de destino.
 * @param size Tamaño del vector pdst.
 */
static void get_fft_norm_mag(float32_t *psrc, float32_t *pdst, uint32_t size){
 8003696:	b580      	push	{r7, lr}
 8003698:	b084      	sub	sp, #16
 800369a:	af00      	add	r7, sp, #0
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	607a      	str	r2, [r7, #4]
	/*Se tienen en cuenta la cantidad de numeros complejos, no de elementos en p_src*/
	/*Calculo la magnitud de la fft*/
	arm_cmplx_mag_f32(psrc, pdst, size);
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	68b9      	ldr	r1, [r7, #8]
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f00f f912 	bl	80128d0 <arm_cmplx_mag_f32>

	/*Normalizo*/
	normalize_array(pdst, size);
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	68b8      	ldr	r0, [r7, #8]
 80036b0:	f7ff ffb2 	bl	8003618 <normalize_array>
	return;
 80036b4:	bf00      	nop
}
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <process_frame>:
 *
 * @param psrc Puntero al vector float32_t de origen.
 * @param pdst Puntero al vector float32_t de destino.
 * @param size Tamaño del vector psrc.
 */
void process_frame(float32_t *psrc, float32_t *pdst, uint32_t size){
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
	display_message_t message;
	//Reservo memoria para salida filtrada
	float32_t *filtered = pvPortMalloc(FLOAT_SIZE_BYTES(size));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f00d fead 	bl	801142c <pvPortMalloc>
 80036d2:	61f8      	str	r0, [r7, #28]
	float32_t *fft_output = pvPortMalloc(FLOAT_SIZE_BYTES(size));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4618      	mov	r0, r3
 80036da:	f00d fea7 	bl	801142c <pvPortMalloc>
 80036de:	61b8      	str	r0, [r7, #24]
	if(filtered == NULL || fft_output == NULL){
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <process_frame+0x30>
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10c      	bne.n	8003706 <process_frame+0x4a>
		message = DISPLAY_ERROR_MEMORY;
 80036ec:	2312      	movs	r3, #18
 80036ee:	75fb      	strb	r3, [r7, #23]
		xQueueSend(display_queue, &message, portMAX_DELAY);
 80036f0:	4b14      	ldr	r3, [pc, #80]	@ (8003744 <process_frame+0x88>)
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	f107 0117 	add.w	r1, r7, #23
 80036f8:	2300      	movs	r3, #0
 80036fa:	f04f 32ff 	mov.w	r2, #4294967295
 80036fe:	f00b ff5b 	bl	800f5b8 <xQueueGenericSend>
		while(1);
 8003702:	bf00      	nop
 8003704:	e7fd      	b.n	8003702 <process_frame+0x46>
	}

	//Filtro la señal
	fir_filter(psrc, filtered, size);
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	69f9      	ldr	r1, [r7, #28]
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f7ff fee2 	bl	80034d4 <fir_filter>

	//Aplico ventana de hamming al vector
	hamming_window(filtered, size);
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	69f8      	ldr	r0, [r7, #28]
 8003714:	f7ff ff1a 	bl	800354c <hamming_window>

	//Calculo la fft
	calculate_fft(filtered, fft_output, size);
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	69b9      	ldr	r1, [r7, #24]
 800371c:	69f8      	ldr	r0, [r7, #28]
 800371e:	f7ff ff63 	bl	80035e8 <calculate_fft>

	/*Calculo la magnitud de la fft y libero la memoria ocupada por la fft.*/
	get_fft_norm_mag(fft_output, pdst, size / 2);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	085b      	lsrs	r3, r3, #1
 8003726:	461a      	mov	r2, r3
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	69b8      	ldr	r0, [r7, #24]
 800372c:	f7ff ffb3 	bl	8003696 <get_fft_norm_mag>
	vPortFree(filtered);
 8003730:	69f8      	ldr	r0, [r7, #28]
 8003732:	f00d ff49 	bl	80115c8 <vPortFree>
	vPortFree(fft_output);
 8003736:	69b8      	ldr	r0, [r7, #24]
 8003738:	f00d ff46 	bl	80115c8 <vPortFree>
	return;
 800373c:	bf00      	nop
}
 800373e:	3720      	adds	r7, #32
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	200002b8 	.word	0x200002b8

08003748 <compare_features>:
 * @param template Puntero al template con los features guardados de antemano.
 * @param target Puntero al vector con los features obtenidos de la voz actual.
 * @param size Tamaño de los vectores template y target.
 * @return comp_state Estado de la comparacion de features.
 */
bool compare_features(float32_t *template, float32_t *target, uint32_t size){
 8003748:	b580      	push	{r7, lr}
 800374a:	b08a      	sub	sp, #40	@ 0x28
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
	display_message_t message;
	uint32_t accepted_bins = 0;										//Bins dentro del threshold
 8003754:	2300      	movs	r3, #0
 8003756:	627b      	str	r3, [r7, #36]	@ 0x24
	float32_t accepted_bins_ratio;									//Proporcion de bins aceptados con respecto al total
	bool comp_state;												//Estado de comparacion de los features

	//Reservo memoria para los vectores de procesamiento
	float32_t *diff = pvPortMalloc(FLOAT_SIZE_BYTES(size));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4618      	mov	r0, r3
 800375e:	f00d fe65 	bl	801142c <pvPortMalloc>
 8003762:	61f8      	str	r0, [r7, #28]
	float32_t *abs_diff = pvPortMalloc(FLOAT_SIZE_BYTES(size));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4618      	mov	r0, r3
 800376a:	f00d fe5f 	bl	801142c <pvPortMalloc>
 800376e:	61b8      	str	r0, [r7, #24]
	if(diff == NULL || abs_diff == NULL){
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <compare_features+0x34>
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10c      	bne.n	8003796 <compare_features+0x4e>
		message = DISPLAY_ERROR_MEMORY;
 800377c:	2312      	movs	r3, #18
 800377e:	74bb      	strb	r3, [r7, #18]
		xQueueSend(display_queue, &message, portMAX_DELAY);
 8003780:	4b2a      	ldr	r3, [pc, #168]	@ (800382c <compare_features+0xe4>)
 8003782:	6818      	ldr	r0, [r3, #0]
 8003784:	f107 0112 	add.w	r1, r7, #18
 8003788:	2300      	movs	r3, #0
 800378a:	f04f 32ff 	mov.w	r2, #4294967295
 800378e:	f00b ff13 	bl	800f5b8 <xQueueGenericSend>
		while(1);
 8003792:	bf00      	nop
 8003794:	e7fd      	b.n	8003792 <compare_features+0x4a>
	}

	//Resto bin a bin los features y calculo el valor absoluto
	arm_sub_f32(template, target, diff, size);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69fa      	ldr	r2, [r7, #28]
 800379a:	68b9      	ldr	r1, [r7, #8]
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f00f f9bf 	bl	8012b20 <arm_sub_f32>
	arm_abs_f32(diff, abs_diff, size);
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	69b9      	ldr	r1, [r7, #24]
 80037a6:	69f8      	ldr	r0, [r7, #28]
 80037a8:	f00f fa7c 	bl	8012ca4 <arm_abs_f32>

	//Cuento cuantos bins estan por debajo del threshold
	for(uint32_t i = 0; i < size; i++){
 80037ac:	2300      	movs	r3, #0
 80037ae:	623b      	str	r3, [r7, #32]
 80037b0:	e012      	b.n	80037d8 <compare_features+0x90>
		if(abs_diff[i] < DIF_THRESHOLD){
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4413      	add	r3, r2
 80037ba:	edd3 7a00 	vldr	s15, [r3]
 80037be:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8003830 <compare_features+0xe8>
 80037c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ca:	d502      	bpl.n	80037d2 <compare_features+0x8a>
			accepted_bins++;
 80037cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ce:	3301      	adds	r3, #1
 80037d0:	627b      	str	r3, [r7, #36]	@ 0x24
	for(uint32_t i = 0; i < size; i++){
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	3301      	adds	r3, #1
 80037d6:	623b      	str	r3, [r7, #32]
 80037d8:	6a3a      	ldr	r2, [r7, #32]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d3e8      	bcc.n	80037b2 <compare_features+0x6a>
		}
	}

	/*Libero la memoria utilizada*/
	vPortFree(diff);
 80037e0:	69f8      	ldr	r0, [r7, #28]
 80037e2:	f00d fef1 	bl	80115c8 <vPortFree>
	vPortFree(abs_diff);
 80037e6:	69b8      	ldr	r0, [r7, #24]
 80037e8:	f00d feee 	bl	80115c8 <vPortFree>

	//Calculo el ratio de bins aceptados
	accepted_bins_ratio = ((float32_t) accepted_bins) / size;
 80037ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ee:	ee07 3a90 	vmov	s15, r3
 80037f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	ee07 3a90 	vmov	s15, r3
 80037fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003804:	edc7 7a05 	vstr	s15, [r7, #20]

	//Verifico si el ratio de bins aceptados es mayor al threshold BIN_RATIO_THRESHOLD
	comp_state = (accepted_bins_ratio >= BIN_RATIO_THRESHOLD) ? true : false;
 8003808:	edd7 7a05 	vldr	s15, [r7, #20]
 800380c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003834 <compare_features+0xec>
 8003810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003818:	bfac      	ite	ge
 800381a:	2301      	movge	r3, #1
 800381c:	2300      	movlt	r3, #0
 800381e:	74fb      	strb	r3, [r7, #19]
	return comp_state;
 8003820:	7cfb      	ldrb	r3, [r7, #19]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3728      	adds	r7, #40	@ 0x28
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	200002b8 	.word	0x200002b8
 8003830:	3e0f5c29 	.word	0x3e0f5c29
 8003834:	3f7851ec 	.word	0x3f7851ec

08003838 <send_uart>:

extern UART_HandleTypeDef huart2;
extern RTC_HandleTypeDef hrtc;			//Handler del RTC


void send_uart(char *string){
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7fc fd37 	bl	80002b4 <strlen>
 8003846:	4603      	mov	r3, r0
 8003848:	b29a      	uxth	r2, r3
 800384a:	f04f 33ff 	mov.w	r3, #4294967295
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	4803      	ldr	r0, [pc, #12]	@ (8003860 <send_uart+0x28>)
 8003852:	f005 fa69 	bl	8008d28 <HAL_UART_Transmit>
	return;
 8003856:	bf00      	nop
}
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	2000026c 	.word	0x2000026c

08003864 <mount_sd>:
		send_uart(str);
	}
	return;
}

FRESULT mount_sd(char* path){
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 800386c:	2201      	movs	r2, #1
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	480a      	ldr	r0, [pc, #40]	@ (800389c <mount_sd+0x38>)
 8003872:	f009 fc65 	bl	800d140 <f_mount>
 8003876:	4603      	mov	r3, r0
 8003878:	461a      	mov	r2, r3
 800387a:	4b09      	ldr	r3, [pc, #36]	@ (80038a0 <mount_sd+0x3c>)
 800387c:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 800387e:	4b08      	ldr	r3, [pc, #32]	@ (80038a0 <mount_sd+0x3c>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d004      	beq.n	8003890 <mount_sd+0x2c>
		send_uart("Error al montar la tarjeta SD!!!\n");
 8003886:	4807      	ldr	r0, [pc, #28]	@ (80038a4 <mount_sd+0x40>)
 8003888:	f7ff ffd6 	bl	8003838 <send_uart>
		while(1);
 800388c:	bf00      	nop
 800388e:	e7fd      	b.n	800388c <mount_sd+0x28>
	}
	return fresult;
 8003890:	4b03      	ldr	r3, [pc, #12]	@ (80038a0 <mount_sd+0x3c>)
 8003892:	781b      	ldrb	r3, [r3, #0]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	2000074c 	.word	0x2000074c
 80038a0:	20002908 	.word	0x20002908
 80038a4:	080148c8 	.word	0x080148c8

080038a8 <unmount_sd>:

FRESULT unmount_sd(char* path){
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 80038b0:	2201      	movs	r2, #1
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	2000      	movs	r0, #0
 80038b6:	f009 fc43 	bl	800d140 <f_mount>
 80038ba:	4603      	mov	r3, r0
 80038bc:	461a      	mov	r2, r3
 80038be:	4b08      	ldr	r3, [pc, #32]	@ (80038e0 <unmount_sd+0x38>)
 80038c0:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 80038c2:	4b07      	ldr	r3, [pc, #28]	@ (80038e0 <unmount_sd+0x38>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d004      	beq.n	80038d4 <unmount_sd+0x2c>
		send_uart("Error al desmontar la tarjeta SD!!!\n");
 80038ca:	4806      	ldr	r0, [pc, #24]	@ (80038e4 <unmount_sd+0x3c>)
 80038cc:	f7ff ffb4 	bl	8003838 <send_uart>
		while(1);
 80038d0:	bf00      	nop
 80038d2:	e7fd      	b.n	80038d0 <unmount_sd+0x28>
	}
	return fresult;
 80038d4:	4b02      	ldr	r3, [pc, #8]	@ (80038e0 <unmount_sd+0x38>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	20002908 	.word	0x20002908
 80038e4:	080148ec 	.word	0x080148ec

080038e8 <check_if_file_exists>:


FRESULT check_if_file_exists(char *filename){
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	fresult = f_stat(filename, &fno);
 80038f0:	4909      	ldr	r1, [pc, #36]	@ (8003918 <check_if_file_exists+0x30>)
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f00b f8ff 	bl	800eaf6 <f_stat>
 80038f8:	4603      	mov	r3, r0
 80038fa:	461a      	mov	r2, r3
 80038fc:	4b07      	ldr	r3, [pc, #28]	@ (800391c <check_if_file_exists+0x34>)
 80038fe:	701a      	strb	r2, [r3, #0]
	return (fresult != FR_OK) ? FR_NO_FILE : fresult;
 8003900:	4b06      	ldr	r3, [pc, #24]	@ (800391c <check_if_file_exists+0x34>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <check_if_file_exists+0x24>
 8003908:	2300      	movs	r3, #0
 800390a:	e000      	b.n	800390e <check_if_file_exists+0x26>
 800390c:	2304      	movs	r3, #4
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	200027e8 	.word	0x200027e8
 800391c:	20002908 	.word	0x20002908

08003920 <create_file>:


FRESULT create_file(char *filename, char *header){
 8003920:	b580      	push	{r7, lr}
 8003922:	f5ad 5d83 	sub.w	sp, sp, #4192	@ 0x1060
 8003926:	af00      	add	r7, sp, #0
 8003928:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800392c:	f843 0c5c 	str.w	r0, [r3, #-92]
 8003930:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003934:	f843 1c60 	str.w	r1, [r3, #-96]
	FIL fil;
	/*Creo el archivo*/
	fresult = f_open(&fil, filename, FA_CREATE_ALWAYS | FA_WRITE);
 8003938:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800393c:	4619      	mov	r1, r3
 800393e:	f107 0320 	add.w	r3, r7, #32
 8003942:	3b18      	subs	r3, #24
 8003944:	220a      	movs	r2, #10
 8003946:	f851 1c5c 	ldr.w	r1, [r1, #-92]
 800394a:	4618      	mov	r0, r3
 800394c:	f009 fc5c 	bl	800d208 <f_open>
 8003950:	4603      	mov	r3, r0
 8003952:	461a      	mov	r2, r3
 8003954:	4b26      	ldr	r3, [pc, #152]	@ (80039f0 <create_file+0xd0>)
 8003956:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003958:	4b25      	ldr	r3, [pc, #148]	@ (80039f0 <create_file+0xd0>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <create_file+0x46>
		return fresult;
 8003960:	4b23      	ldr	r3, [pc, #140]	@ (80039f0 <create_file+0xd0>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	e03f      	b.n	80039e6 <create_file+0xc6>
	}
	/*Escribo el header*/
	fresult = f_write(&fil, header, strlen(header), &bw);
 8003966:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800396a:	f853 0c60 	ldr.w	r0, [r3, #-96]
 800396e:	f7fc fca1 	bl	80002b4 <strlen>
 8003972:	4602      	mov	r2, r0
 8003974:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003978:	4619      	mov	r1, r3
 800397a:	f107 0020 	add.w	r0, r7, #32
 800397e:	3818      	subs	r0, #24
 8003980:	4b1c      	ldr	r3, [pc, #112]	@ (80039f4 <create_file+0xd4>)
 8003982:	f851 1c60 	ldr.w	r1, [r1, #-96]
 8003986:	f00a f8fb 	bl	800db80 <f_write>
 800398a:	4603      	mov	r3, r0
 800398c:	461a      	mov	r2, r3
 800398e:	4b18      	ldr	r3, [pc, #96]	@ (80039f0 <create_file+0xd0>)
 8003990:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK || bw < strlen(header)){
 8003992:	4b17      	ldr	r3, [pc, #92]	@ (80039f0 <create_file+0xd0>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10a      	bne.n	80039b0 <create_file+0x90>
 800399a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800399e:	f853 0c60 	ldr.w	r0, [r3, #-96]
 80039a2:	f7fc fc87 	bl	80002b4 <strlen>
 80039a6:	4602      	mov	r2, r0
 80039a8:	4b12      	ldr	r3, [pc, #72]	@ (80039f4 <create_file+0xd4>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d90e      	bls.n	80039ce <create_file+0xae>
		f_close(&fil);
 80039b0:	f107 0320 	add.w	r3, r7, #32
 80039b4:	3b18      	subs	r3, #24
 80039b6:	4618      	mov	r0, r3
 80039b8:	f00a fc2b 	bl	800e212 <f_close>
		return (fresult != FR_OK) ? fresult : FR_DISK_ERR;
 80039bc:	4b0c      	ldr	r3, [pc, #48]	@ (80039f0 <create_file+0xd0>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <create_file+0xaa>
 80039c4:	4b0a      	ldr	r3, [pc, #40]	@ (80039f0 <create_file+0xd0>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	e00d      	b.n	80039e6 <create_file+0xc6>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e00b      	b.n	80039e6 <create_file+0xc6>
	}
	/*Cierro el archivo*/
	fresult = f_close(&fil);
 80039ce:	f107 0320 	add.w	r3, r7, #32
 80039d2:	3b18      	subs	r3, #24
 80039d4:	4618      	mov	r0, r3
 80039d6:	f00a fc1c 	bl	800e212 <f_close>
 80039da:	4603      	mov	r3, r0
 80039dc:	461a      	mov	r2, r3
 80039de:	4b04      	ldr	r3, [pc, #16]	@ (80039f0 <create_file+0xd0>)
 80039e0:	701a      	strb	r2, [r3, #0]
	return fresult;
 80039e2:	4b03      	ldr	r3, [pc, #12]	@ (80039f0 <create_file+0xd0>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	f507 5783 	add.w	r7, r7, #4192	@ 0x1060
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20002908 	.word	0x20002908
 80039f4:	20002910 	.word	0x20002910

080039f8 <get_time_from_rtc>:

void get_time_from_rtc(char *rtc_lecture){
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08c      	sub	sp, #48	@ 0x30
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	6078      	str	r0, [r7, #4]
	/***Esta funcion devuelve en formato string la fecha y hora actual usando el RTC***/
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;
	char *time = pvPortMalloc(15 * sizeof(char));
 8003a00:	200f      	movs	r0, #15
 8003a02:	f00d fd13 	bl	801142c <pvPortMalloc>
 8003a06:	6278      	str	r0, [r7, #36]	@ 0x24
	/*Obtengo el tiempo actual*/
	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8003a08:	f107 0310 	add.w	r3, r7, #16
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4817      	ldr	r0, [pc, #92]	@ (8003a70 <get_time_from_rtc+0x78>)
 8003a12:	f003 fe82 	bl	800771a <HAL_RTC_GetTime>
	/*Obtengo la fecha actual*/
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8003a16:	f107 030c 	add.w	r3, r7, #12
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4814      	ldr	r0, [pc, #80]	@ (8003a70 <get_time_from_rtc+0x78>)
 8003a20:	f003 ff5d 	bl	80078de <HAL_RTC_GetDate>
	/*Guardo fecha y hora en los buffers correspondientes*/
	snprintf(time, 15, "%02d:%02d:%02d ", currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8003a24:	7c3b      	ldrb	r3, [r7, #16]
 8003a26:	4619      	mov	r1, r3
 8003a28:	7c7b      	ldrb	r3, [r7, #17]
 8003a2a:	7cba      	ldrb	r2, [r7, #18]
 8003a2c:	9201      	str	r2, [sp, #4]
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	460b      	mov	r3, r1
 8003a32:	4a10      	ldr	r2, [pc, #64]	@ (8003a74 <get_time_from_rtc+0x7c>)
 8003a34:	210f      	movs	r1, #15
 8003a36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003a38:	f00f fd0e 	bl	8013458 <sniprintf>
	snprintf(rtc_lecture, 15, "%02d-%02d-%2d ", currentDate.Date, currentDate.Month, 2000 + currentDate.Year);
 8003a3c:	7bbb      	ldrb	r3, [r7, #14]
 8003a3e:	4619      	mov	r1, r3
 8003a40:	7b7b      	ldrb	r3, [r7, #13]
 8003a42:	461a      	mov	r2, r3
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003a4a:	9301      	str	r3, [sp, #4]
 8003a4c:	9200      	str	r2, [sp, #0]
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4a09      	ldr	r2, [pc, #36]	@ (8003a78 <get_time_from_rtc+0x80>)
 8003a52:	210f      	movs	r1, #15
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f00f fcff 	bl	8013458 <sniprintf>
	strcat(rtc_lecture, time);
 8003a5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f00f fd94 	bl	801358a <strcat>
	vPortFree(time);
 8003a62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003a64:	f00d fdb0 	bl	80115c8 <vPortFree>
	return;
 8003a68:	bf00      	nop
}
 8003a6a:	3728      	adds	r7, #40	@ 0x28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	200001ac 	.word	0x200001ac
 8003a74:	08014914 	.word	0x08014914
 8003a78:	08014924 	.word	0x08014924

08003a7c <save_buffer_on_sd>:
	//Cierro el archivo
	fresult = f_close(&fil);
	return FR_OK;
}

FRESULT save_buffer_on_sd(char *filename, float *buffer, size_t size){
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	f5ad 5d83 	sub.w	sp, sp, #4192	@ 0x1060
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003a8a:	f843 0c5c 	str.w	r0, [r3, #-92]
 8003a8e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003a92:	f843 1c60 	str.w	r1, [r3, #-96]
 8003a96:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003a9a:	f843 2c64 	str.w	r2, [r3, #-100]
	 * Es importante que el archivo sea .bin, ya que es más conveniente guardar
	 * los datos en este formato (ocupa menos espacio y es más directa la escritura).
	 */
	//Abro el archivo
	FIL fil;
	fresult = f_open(&fil, filename, FA_OPEN_APPEND | FA_WRITE);						//Se abre con append por si es necesario seguir escribiendo desde el final
 8003a9e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003aa8:	3b18      	subs	r3, #24
 8003aaa:	2232      	movs	r2, #50	@ 0x32
 8003aac:	f851 1c5c 	ldr.w	r1, [r1, #-92]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f009 fba9 	bl	800d208 <f_open>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4b25      	ldr	r3, [pc, #148]	@ (8003b50 <save_buffer_on_sd+0xd4>)
 8003abc:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003abe:	4b24      	ldr	r3, [pc, #144]	@ (8003b50 <save_buffer_on_sd+0xd4>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <save_buffer_on_sd+0x50>
		return fresult;
 8003ac6:	4b22      	ldr	r3, [pc, #136]	@ (8003b50 <save_buffer_on_sd+0xd4>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	e03a      	b.n	8003b42 <save_buffer_on_sd+0xc6>
	}
	//Escribo los datos del buffer en el archivo
	fresult = f_write(&fil, buffer, FLOAT_SIZE_BYTES(size), &bw);
 8003acc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003ad0:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8003ad4:	009a      	lsls	r2, r3, #2
 8003ad6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003ada:	4619      	mov	r1, r3
 8003adc:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003ae0:	3818      	subs	r0, #24
 8003ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8003b54 <save_buffer_on_sd+0xd8>)
 8003ae4:	f851 1c60 	ldr.w	r1, [r1, #-96]
 8003ae8:	f00a f84a 	bl	800db80 <f_write>
 8003aec:	4603      	mov	r3, r0
 8003aee:	461a      	mov	r2, r3
 8003af0:	4b17      	ldr	r3, [pc, #92]	@ (8003b50 <save_buffer_on_sd+0xd4>)
 8003af2:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK || bw < FLOAT_SIZE_BYTES(size)){
 8003af4:	4b16      	ldr	r3, [pc, #88]	@ (8003b50 <save_buffer_on_sd+0xd4>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d108      	bne.n	8003b0e <save_buffer_on_sd+0x92>
 8003afc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003b00:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8003b04:	009a      	lsls	r2, r3, #2
 8003b06:	4b13      	ldr	r3, [pc, #76]	@ (8003b54 <save_buffer_on_sd+0xd8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d90e      	bls.n	8003b2c <save_buffer_on_sd+0xb0>
		f_close(&fil);																	//Frente a un error cierro el archivo y salgo de la funcion
 8003b0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b12:	3b18      	subs	r3, #24
 8003b14:	4618      	mov	r0, r3
 8003b16:	f00a fb7c 	bl	800e212 <f_close>
		return (fresult != FR_OK) ? fresult : FR_DISK_ERR;								//Si se escribieron bytes de menos, devuelve FR_DISK_ERR
 8003b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b50 <save_buffer_on_sd+0xd4>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <save_buffer_on_sd+0xac>
 8003b22:	4b0b      	ldr	r3, [pc, #44]	@ (8003b50 <save_buffer_on_sd+0xd4>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	e00c      	b.n	8003b42 <save_buffer_on_sd+0xc6>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e00a      	b.n	8003b42 <save_buffer_on_sd+0xc6>
	}

	//Cierro el archivo
	fresult = f_close(&fil);
 8003b2c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b30:	3b18      	subs	r3, #24
 8003b32:	4618      	mov	r0, r3
 8003b34:	f00a fb6d 	bl	800e212 <f_close>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4b04      	ldr	r3, [pc, #16]	@ (8003b50 <save_buffer_on_sd+0xd4>)
 8003b3e:	701a      	strb	r2, [r3, #0]
	return FR_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	f507 5783 	add.w	r7, r7, #4192	@ 0x1060
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20002908 	.word	0x20002908
 8003b54:	20002910 	.word	0x20002910

08003b58 <read_buffer_from_sd>:

FRESULT read_buffer_from_sd(char *filename, float *buffer, size_t size, uint32_t current_pos){
 8003b58:	b5b0      	push	{r4, r5, r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
	 * La funcion esta pensada para leer de a bloques iguales, no guarda la ultima
	 * posicion del puntero de lectura, se debe llevar cuenta externamente.
	 */

	//Abro el archivo
	fresult = f_open(&fil, filename, FA_READ);
 8003b66:	2201      	movs	r2, #1
 8003b68:	68f9      	ldr	r1, [r7, #12]
 8003b6a:	4823      	ldr	r0, [pc, #140]	@ (8003bf8 <read_buffer_from_sd+0xa0>)
 8003b6c:	f009 fb4c 	bl	800d208 <f_open>
 8003b70:	4603      	mov	r3, r0
 8003b72:	461a      	mov	r2, r3
 8003b74:	4b21      	ldr	r3, [pc, #132]	@ (8003bfc <read_buffer_from_sd+0xa4>)
 8003b76:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003b78:	4b20      	ldr	r3, [pc, #128]	@ (8003bfc <read_buffer_from_sd+0xa4>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <read_buffer_from_sd+0x2e>
		return fresult;
 8003b80:	4b1e      	ldr	r3, [pc, #120]	@ (8003bfc <read_buffer_from_sd+0xa4>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	e033      	b.n	8003bee <read_buffer_from_sd+0x96>
	}

	//Posiciono el puntero de lectura en el archivo
	fresult = f_lseek(&fil, current_pos);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	461c      	mov	r4, r3
 8003b8c:	4615      	mov	r5, r2
 8003b8e:	4622      	mov	r2, r4
 8003b90:	462b      	mov	r3, r5
 8003b92:	4819      	ldr	r0, [pc, #100]	@ (8003bf8 <read_buffer_from_sd+0xa0>)
 8003b94:	f00a fb6c 	bl	800e270 <f_lseek>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	4b17      	ldr	r3, [pc, #92]	@ (8003bfc <read_buffer_from_sd+0xa4>)
 8003b9e:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003ba0:	4b16      	ldr	r3, [pc, #88]	@ (8003bfc <read_buffer_from_sd+0xa4>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <read_buffer_from_sd+0x5c>
		f_close(&fil);
 8003ba8:	4813      	ldr	r0, [pc, #76]	@ (8003bf8 <read_buffer_from_sd+0xa0>)
 8003baa:	f00a fb32 	bl	800e212 <f_close>
		return fresult;
 8003bae:	4b13      	ldr	r3, [pc, #76]	@ (8003bfc <read_buffer_from_sd+0xa4>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	e01c      	b.n	8003bee <read_buffer_from_sd+0x96>
	}

	//Leo el bloque de tamaño size desde el archivo
	fresult = f_read(&fil, buffer, FLOAT_SIZE_BYTES(size), &br);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	009a      	lsls	r2, r3, #2
 8003bb8:	4b11      	ldr	r3, [pc, #68]	@ (8003c00 <read_buffer_from_sd+0xa8>)
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	480e      	ldr	r0, [pc, #56]	@ (8003bf8 <read_buffer_from_sd+0xa0>)
 8003bbe:	f009 fe18 	bl	800d7f2 <f_read>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003bfc <read_buffer_from_sd+0xa4>)
 8003bc8:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003bca:	4b0c      	ldr	r3, [pc, #48]	@ (8003bfc <read_buffer_from_sd+0xa4>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <read_buffer_from_sd+0x86>
		f_close(&fil);
 8003bd2:	4809      	ldr	r0, [pc, #36]	@ (8003bf8 <read_buffer_from_sd+0xa0>)
 8003bd4:	f00a fb1d 	bl	800e212 <f_close>
		return fresult;
 8003bd8:	4b08      	ldr	r3, [pc, #32]	@ (8003bfc <read_buffer_from_sd+0xa4>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	e007      	b.n	8003bee <read_buffer_from_sd+0x96>
	}

	//Cierro el archivo
	fresult = f_close(&fil);
 8003bde:	4806      	ldr	r0, [pc, #24]	@ (8003bf8 <read_buffer_from_sd+0xa0>)
 8003be0:	f00a fb17 	bl	800e212 <f_close>
 8003be4:	4603      	mov	r3, r0
 8003be6:	461a      	mov	r2, r3
 8003be8:	4b04      	ldr	r3, [pc, #16]	@ (8003bfc <read_buffer_from_sd+0xa4>)
 8003bea:	701a      	strb	r2, [r3, #0]
	return FR_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	20001790 	.word	0x20001790
 8003bfc:	20002908 	.word	0x20002908
 8003c00:	2000290c 	.word	0x2000290c

08003c04 <write_entry>:



FRESULT write_entry(char *filename, char *entry){
 8003c04:	b580      	push	{r7, lr}
 8003c06:	f5ad 5d83 	sub.w	sp, sp, #4192	@ 0x1060
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003c12:	f843 0c64 	str.w	r0, [r3, #-100]
 8003c16:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003c1a:	f843 1c68 	str.w	r1, [r3, #-104]
	FIL fil;
	/*Abro el archivo en modo append*/
	fresult = f_open(&fil, filename, FA_OPEN_APPEND | FA_WRITE);
 8003c1e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003c22:	4619      	mov	r1, r3
 8003c24:	f107 0308 	add.w	r3, r7, #8
 8003c28:	2232      	movs	r2, #50	@ 0x32
 8003c2a:	f851 1c64 	ldr.w	r1, [r1, #-100]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f009 faea 	bl	800d208 <f_open>
 8003c34:	4603      	mov	r3, r0
 8003c36:	461a      	mov	r2, r3
 8003c38:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf0 <write_entry+0xec>)
 8003c3a:	701a      	strb	r2, [r3, #0]
	if(fresult == FR_OK){
 8003c3c:	4b2c      	ldr	r3, [pc, #176]	@ (8003cf0 <write_entry+0xec>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d14c      	bne.n	8003cde <write_entry+0xda>
		char *buffer = pvPortMalloc(70 * sizeof(char));
 8003c44:	2046      	movs	r0, #70	@ 0x46
 8003c46:	f00d fbf1 	bl	801142c <pvPortMalloc>
 8003c4a:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8003c4e:	f103 0304 	add.w	r3, r3, #4
 8003c52:	6018      	str	r0, [r3, #0]
		snprintf(buffer, 70, "%s\n", entry);
 8003c54:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003c58:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8003c5c:	4a25      	ldr	r2, [pc, #148]	@ (8003cf4 <write_entry+0xf0>)
 8003c5e:	2146      	movs	r1, #70	@ 0x46
 8003c60:	f507 5083 	add.w	r0, r7, #4192	@ 0x1060
 8003c64:	f100 0004 	add.w	r0, r0, #4
 8003c68:	6800      	ldr	r0, [r0, #0]
 8003c6a:	f00f fbf5 	bl	8013458 <sniprintf>
		/*Escribo la entrada en el archivo*/
		fresult = f_write(&fil, buffer, strlen(buffer), &bw);
 8003c6e:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8003c72:	f103 0304 	add.w	r3, r3, #4
 8003c76:	6818      	ldr	r0, [r3, #0]
 8003c78:	f7fc fb1c 	bl	80002b4 <strlen>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	f107 0008 	add.w	r0, r7, #8
 8003c82:	4b1d      	ldr	r3, [pc, #116]	@ (8003cf8 <write_entry+0xf4>)
 8003c84:	f507 5183 	add.w	r1, r7, #4192	@ 0x1060
 8003c88:	f101 0104 	add.w	r1, r1, #4
 8003c8c:	6809      	ldr	r1, [r1, #0]
 8003c8e:	f009 ff77 	bl	800db80 <f_write>
 8003c92:	4603      	mov	r3, r0
 8003c94:	461a      	mov	r2, r3
 8003c96:	4b16      	ldr	r3, [pc, #88]	@ (8003cf0 <write_entry+0xec>)
 8003c98:	701a      	strb	r2, [r3, #0]
		if(fresult != FR_OK || bw < strlen(buffer)){
 8003c9a:	4b15      	ldr	r3, [pc, #84]	@ (8003cf0 <write_entry+0xec>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10b      	bne.n	8003cba <write_entry+0xb6>
 8003ca2:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8003ca6:	f103 0304 	add.w	r3, r3, #4
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	f7fc fb02 	bl	80002b4 <strlen>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	4b11      	ldr	r3, [pc, #68]	@ (8003cf8 <write_entry+0xf4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d901      	bls.n	8003cbe <write_entry+0xba>
			return FR_DISK_ERR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e011      	b.n	8003ce2 <write_entry+0xde>
		}
		vPortFree(buffer);
 8003cbe:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8003cc2:	f103 0304 	add.w	r3, r3, #4
 8003cc6:	6818      	ldr	r0, [r3, #0]
 8003cc8:	f00d fc7e 	bl	80115c8 <vPortFree>
		fresult = f_close(&fil);
 8003ccc:	f107 0308 	add.w	r3, r7, #8
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f00a fa9e 	bl	800e212 <f_close>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4b05      	ldr	r3, [pc, #20]	@ (8003cf0 <write_entry+0xec>)
 8003cdc:	701a      	strb	r2, [r3, #0]
	}
	return fresult;
 8003cde:	4b04      	ldr	r3, [pc, #16]	@ (8003cf0 <write_entry+0xec>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f507 5783 	add.w	r7, r7, #4192	@ 0x1060
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	20002908 	.word	0x20002908
 8003cf4:	08014934 	.word	0x08014934
 8003cf8:	20002910 	.word	0x20002910

08003cfc <search_user>:

FRESULT search_user(char *filename, char *user_key, char *user_name){
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b0a6      	sub	sp, #152	@ 0x98
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
	char line[LINE_BUFFER_SIZE];
	char *line_key;
	char *line_user;
	//Abro el archivo
	fresult = f_open(&fil, filename, FA_READ);
 8003d08:	2201      	movs	r2, #1
 8003d0a:	68f9      	ldr	r1, [r7, #12]
 8003d0c:	482f      	ldr	r0, [pc, #188]	@ (8003dcc <search_user+0xd0>)
 8003d0e:	f009 fa7b 	bl	800d208 <f_open>
 8003d12:	4603      	mov	r3, r0
 8003d14:	461a      	mov	r2, r3
 8003d16:	4b2e      	ldr	r3, [pc, #184]	@ (8003dd0 <search_user+0xd4>)
 8003d18:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8003dd0 <search_user+0xd4>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <search_user+0x2c>
		return fresult;
 8003d22:	4b2b      	ldr	r3, [pc, #172]	@ (8003dd0 <search_user+0xd4>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	e04c      	b.n	8003dc2 <search_user+0xc6>
	}

	//Descarto el header
	f_gets(line, LINE_BUFFER_SIZE, &fil);
 8003d28:	f107 0310 	add.w	r3, r7, #16
 8003d2c:	4a27      	ldr	r2, [pc, #156]	@ (8003dcc <search_user+0xd0>)
 8003d2e:	2180      	movs	r1, #128	@ 0x80
 8003d30:	4618      	mov	r0, r3
 8003d32:	f00b f842 	bl	800edba <f_gets>

	//Busco el usuario asociado linea por linea
	while(f_gets(line, LINE_BUFFER_SIZE, &fil) != NULL){
 8003d36:	e032      	b.n	8003d9e <search_user+0xa2>
		line_key = strtok(line, " ");								//Separo la clave
 8003d38:	f107 0310 	add.w	r3, r7, #16
 8003d3c:	4925      	ldr	r1, [pc, #148]	@ (8003dd4 <search_user+0xd8>)
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f00f fc46 	bl	80135d0 <strtok>
 8003d44:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
		line_user = strtok(NULL, "\n");								//Separo el usuario
 8003d48:	4923      	ldr	r1, [pc, #140]	@ (8003dd8 <search_user+0xdc>)
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	f00f fc40 	bl	80135d0 <strtok>
 8003d50:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

		//Comparo clave
		if(line_key && strcmp(line_key, user_key) == 0){
 8003d54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d01a      	beq.n	8003d92 <search_user+0x96>
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003d62:	f7fc fa9d 	bl	80002a0 <strcmp>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d112      	bne.n	8003d92 <search_user+0x96>
			if(line_user){
 8003d6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00e      	beq.n	8003d92 <search_user+0x96>
				strncpy(user_name, line_user, USER_STR_SIZE - 1);
 8003d74:	2231      	movs	r2, #49	@ 0x31
 8003d76:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f00f fc14 	bl	80135a8 <strncpy>
				user_name[USER_STR_SIZE - 1] = '\0';				//Me aseguro de que haya terminacion nula
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3331      	adds	r3, #49	@ 0x31
 8003d84:	2200      	movs	r2, #0
 8003d86:	701a      	strb	r2, [r3, #0]
				f_close(&fil);
 8003d88:	4810      	ldr	r0, [pc, #64]	@ (8003dcc <search_user+0xd0>)
 8003d8a:	f00a fa42 	bl	800e212 <f_close>
				return FR_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	e017      	b.n	8003dc2 <search_user+0xc6>
			}
		}

		//Limpio la linea para que no se acumulen caracteres de palabras largas
		clear_buffer(line, LINE_BUFFER_SIZE);
 8003d92:	f107 0310 	add.w	r3, r7, #16
 8003d96:	2180      	movs	r1, #128	@ 0x80
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fcdd 	bl	8004758 <clear_buffer>
	while(f_gets(line, LINE_BUFFER_SIZE, &fil) != NULL){
 8003d9e:	f107 0310 	add.w	r3, r7, #16
 8003da2:	4a0a      	ldr	r2, [pc, #40]	@ (8003dcc <search_user+0xd0>)
 8003da4:	2180      	movs	r1, #128	@ 0x80
 8003da6:	4618      	mov	r0, r3
 8003da8:	f00b f807 	bl	800edba <f_gets>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1c2      	bne.n	8003d38 <search_user+0x3c>
	}

	//Si se llego al final sin encontrar el usuario, devuelve mensaje de error
	fresult = f_close(&fil);
 8003db2:	4806      	ldr	r0, [pc, #24]	@ (8003dcc <search_user+0xd0>)
 8003db4:	f00a fa2d 	bl	800e212 <f_close>
 8003db8:	4603      	mov	r3, r0
 8003dba:	461a      	mov	r2, r3
 8003dbc:	4b04      	ldr	r3, [pc, #16]	@ (8003dd0 <search_user+0xd4>)
 8003dbe:	701a      	strb	r2, [r3, #0]
	return FR_NO_FILE;												//Devuelve FR_NO_FILE si no se encuentra el usuario
 8003dc0:	2304      	movs	r3, #4
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3798      	adds	r7, #152	@ 0x98
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20001790 	.word	0x20001790
 8003dd0:	20002908 	.word	0x20002908
 8003dd4:	08014938 	.word	0x08014938
 8003dd8:	0801493c 	.word	0x0801493c

08003ddc <initialize_files>:

/*Este archivo contiene las funciones principales de la tarea SD*/
#define NO_DATABASE FR_NO_FILE
#define NO_REGISTER FR_DISK_ERR

FRESULT initialize_files(void){
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
	FRESULT res;

	//Chequeo que exista el archivo con la database de usuarios
	res = check_if_file_exists("usuarios.txt");
 8003de2:	4811      	ldr	r0, [pc, #68]	@ (8003e28 <initialize_files+0x4c>)
 8003de4:	f7ff fd80 	bl	80038e8 <check_if_file_exists>
 8003de8:	4603      	mov	r3, r0
 8003dea:	71fb      	strb	r3, [r7, #7]
	if(res != FR_OK){
 8003dec:	79fb      	ldrb	r3, [r7, #7]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <initialize_files+0x1a>
		return NO_DATABASE;
 8003df2:	2304      	movs	r3, #4
 8003df4:	e013      	b.n	8003e1e <initialize_files+0x42>
	}

	//Chequeo si existe el archivo de registro de accesos. Si no existe, lo creo
	res = check_if_file_exists("registro.txt");
 8003df6:	480d      	ldr	r0, [pc, #52]	@ (8003e2c <initialize_files+0x50>)
 8003df8:	f7ff fd76 	bl	80038e8 <check_if_file_exists>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	71fb      	strb	r3, [r7, #7]
	if(res != FR_OK){
 8003e00:	79fb      	ldrb	r3, [r7, #7]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <initialize_files+0x40>
		res = create_file("registro.txt", "Fecha Usuario Estado\n");
 8003e06:	490a      	ldr	r1, [pc, #40]	@ (8003e30 <initialize_files+0x54>)
 8003e08:	4808      	ldr	r0, [pc, #32]	@ (8003e2c <initialize_files+0x50>)
 8003e0a:	f7ff fd89 	bl	8003920 <create_file>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	71fb      	strb	r3, [r7, #7]
		if(res != FR_OK){
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <initialize_files+0x40>
			return NO_REGISTER;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e000      	b.n	8003e1e <initialize_files+0x42>
		}
	}
	return FR_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	08014940 	.word	0x08014940
 8003e2c:	08014950 	.word	0x08014950
 8003e30:	08014960 	.word	0x08014960

08003e34 <initialize_sd_and_verify_files>:

bool initialize_sd_and_verify_files(display_message_t *error_message){
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
	FRESULT res;

	res = mount_sd("");
 8003e3c:	4817      	ldr	r0, [pc, #92]	@ (8003e9c <initialize_sd_and_verify_files+0x68>)
 8003e3e:	f7ff fd11 	bl	8003864 <mount_sd>
 8003e42:	4603      	mov	r3, r0
 8003e44:	73fb      	strb	r3, [r7, #15]
	if(res != FR_OK){
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d004      	beq.n	8003e56 <initialize_sd_and_verify_files+0x22>
		*error_message = DISPLAY_ERROR_SD;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2211      	movs	r2, #17
 8003e50:	701a      	strb	r2, [r3, #0]
		return false;
 8003e52:	2300      	movs	r3, #0
 8003e54:	e01d      	b.n	8003e92 <initialize_sd_and_verify_files+0x5e>
	}

	res = initialize_files();
 8003e56:	f7ff ffc1 	bl	8003ddc <initialize_files>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	73fb      	strb	r3, [r7, #15]
	if(res != FR_OK){
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d015      	beq.n	8003e90 <initialize_sd_and_verify_files+0x5c>
		switch(res){
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d005      	beq.n	8003e76 <initialize_sd_and_verify_files+0x42>
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d107      	bne.n	8003e7e <initialize_sd_and_verify_files+0x4a>
		case NO_DATABASE:
			*error_message = DISPLAY_DATABASE_NOT_FOUND;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	220f      	movs	r2, #15
 8003e72:	701a      	strb	r2, [r3, #0]
			break;
 8003e74:	e007      	b.n	8003e86 <initialize_sd_and_verify_files+0x52>
		case NO_REGISTER:
			*error_message = DISPLAY_REGISTER_NOT_CREATED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2210      	movs	r2, #16
 8003e7a:	701a      	strb	r2, [r3, #0]
			break;
 8003e7c:	e003      	b.n	8003e86 <initialize_sd_and_verify_files+0x52>
		default:
			*error_message = DISPLAY_ERROR_UNKNOWN;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2213      	movs	r2, #19
 8003e82:	701a      	strb	r2, [r3, #0]
			break;
 8003e84:	bf00      	nop
		}
		unmount_sd("");
 8003e86:	4805      	ldr	r0, [pc, #20]	@ (8003e9c <initialize_sd_and_verify_files+0x68>)
 8003e88:	f7ff fd0e 	bl	80038a8 <unmount_sd>
		return false;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	e000      	b.n	8003e92 <initialize_sd_and_verify_files+0x5e>
	}

	//No desmontar si se encontraron los archivos necesarios
	return true;
 8003e90:	2301      	movs	r3, #1
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	08014978 	.word	0x08014978

08003ea0 <process_user_key>:

bool process_user_key(char *user_key, char *user_name, display_message_t *error_message){
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
	FRESULT res = search_user("usuarios.txt", user_key, user_name);
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	68f9      	ldr	r1, [r7, #12]
 8003eb0:	480a      	ldr	r0, [pc, #40]	@ (8003edc <process_user_key+0x3c>)
 8003eb2:	f7ff ff23 	bl	8003cfc <search_user>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	75fb      	strb	r3, [r7, #23]
	if(res != FR_OK){
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d004      	beq.n	8003eca <process_user_key+0x2a>
		*error_message = DISPLAY_USER_NOT_FOUND;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2205      	movs	r2, #5
 8003ec4:	701a      	strb	r2, [r3, #0]
		return false;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	e004      	b.n	8003ed4 <process_user_key+0x34>
	}
	clear_char(user_name, '\r');										//Limpio '\r' agregado por windows
 8003eca:	210d      	movs	r1, #13
 8003ecc:	68b8      	ldr	r0, [r7, #8]
 8003ece:	f000 fc61 	bl	8004794 <clear_char>
	return true;
 8003ed2:	2301      	movs	r3, #1
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	08014940 	.word	0x08014940

08003ee0 <build_entry_message>:

void build_entry_message(char *entry, char *user_name, const char *status){
 8003ee0:	b590      	push	{r4, r7, lr}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
	get_time_from_rtc(entry);						//Obtengo fecha y hora
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f7ff fd83 	bl	80039f8 <get_time_from_rtc>
	if(user_name != NULL){
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d004      	beq.n	8003f02 <build_entry_message+0x22>
		strcat(entry, user_name);					//Concateno nombre de usuario
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f00f fb45 	bl	801358a <strcat>
 8003f00:	e00d      	b.n	8003f1e <build_entry_message+0x3e>
	}
	else{
		strcat(entry, "Desconocido");				//Si no existe, concateno desconocido
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f7fc f9d6 	bl	80002b4 <strlen>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4413      	add	r3, r2
 8003f10:	4a13      	ldr	r2, [pc, #76]	@ (8003f60 <build_entry_message+0x80>)
 8003f12:	461c      	mov	r4, r3
 8003f14:	4613      	mov	r3, r2
 8003f16:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003f18:	6020      	str	r0, [r4, #0]
 8003f1a:	6061      	str	r1, [r4, #4]
 8003f1c:	60a2      	str	r2, [r4, #8]
	}
	strcat(entry, " ");
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f7fc f9c8 	bl	80002b4 <strlen>
 8003f24:	4603      	mov	r3, r0
 8003f26:	461a      	mov	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	490d      	ldr	r1, [pc, #52]	@ (8003f64 <build_entry_message+0x84>)
 8003f2e:	461a      	mov	r2, r3
 8003f30:	460b      	mov	r3, r1
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	8013      	strh	r3, [r2, #0]
	strcat(entry, status);							//Concateno estado de acceso
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f00f fb26 	bl	801358a <strcat>
	strcat(entry, "\n");
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f7fc f9b8 	bl	80002b4 <strlen>
 8003f44:	4603      	mov	r3, r0
 8003f46:	461a      	mov	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	4906      	ldr	r1, [pc, #24]	@ (8003f68 <build_entry_message+0x88>)
 8003f4e:	461a      	mov	r2, r3
 8003f50:	460b      	mov	r3, r1
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	8013      	strh	r3, [r2, #0]
	return;
 8003f56:	bf00      	nop
}
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd90      	pop	{r4, r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	0801497c 	.word	0x0801497c
 8003f64:	08014988 	.word	0x08014988
 8003f68:	0801498c 	.word	0x0801498c

08003f6c <recognize_user_voice>:

bool recognize_user_voice(char *template_path, char *user_name, display_message_t *message){
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b088      	sub	sp, #32
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
	size_t free_heap = xPortGetFreeHeapSize();
 8003f78:	f00d fb8a 	bl	8011690 <xPortGetFreeHeapSize>
 8003f7c:	61f8      	str	r0, [r7, #28]
	uint16_t *voice_buf = pvPortMalloc(U16_SIZE_BYTES(AUDIO_BUFFER_SIZE));
 8003f7e:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 8003f82:	f00d fa53 	bl	801142c <pvPortMalloc>
 8003f86:	61b8      	str	r0, [r7, #24]
	display_message_t aux;
	char *entry;
	if(voice_buf == NULL){
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10b      	bne.n	8003fa6 <recognize_user_voice+0x3a>
		message = DISPLAY_ERROR_MEMORY;
 8003f8e:	2312      	movs	r3, #18
 8003f90:	607b      	str	r3, [r7, #4]
		xQueueSend(display_queue, &message, portMAX_DELAY);
 8003f92:	4b41      	ldr	r3, [pc, #260]	@ (8004098 <recognize_user_voice+0x12c>)
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	1d39      	adds	r1, r7, #4
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f9e:	f00b fb0b 	bl	800f5b8 <xQueueGenericSend>
		while(1);
 8003fa2:	bf00      	nop
 8003fa4:	e7fd      	b.n	8003fa2 <recognize_user_voice+0x36>
	}

	//Envio mensaje a display para indicar que comienza el reconocimiento de voz
	aux = DISPLAY_START_SPEECH_REC;
 8003fa6:	2306      	movs	r3, #6
 8003fa8:	74fb      	strb	r3, [r7, #19]
	xQueueSend(display_queue, &aux, portMAX_DELAY);									//Envio mensaje al display
 8003faa:	4b3b      	ldr	r3, [pc, #236]	@ (8004098 <recognize_user_voice+0x12c>)
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	f107 0113 	add.w	r1, r7, #19
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb8:	f00b fafe 	bl	800f5b8 <xQueueGenericSend>
	xSemaphoreTake(sd_display_sync, portMAX_DELAY);									//Bloqueo la tarea hasta que el display me devuelva el semaforo
 8003fbc:	4b37      	ldr	r3, [pc, #220]	@ (800409c <recognize_user_voice+0x130>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f00b fd6b 	bl	800faa0 <xQueueSemaphoreTake>


	capture_voice(voice_buf, AUDIO_BUFFER_SIZE);
 8003fca:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 8003fce:	69b8      	ldr	r0, [r7, #24]
 8003fd0:	f7ff f912 	bl	80031f8 <capture_voice>

	//Almaceno la voz en la SD
	aux = DISPLAY_PROCESSING_DATA;
 8003fd4:	230c      	movs	r3, #12
 8003fd6:	74fb      	strb	r3, [r7, #19]
	xQueueSend(display_queue, &aux, portMAX_DELAY);									//Envio mensaje indicando que se esta procesando la voz
 8003fd8:	4b2f      	ldr	r3, [pc, #188]	@ (8004098 <recognize_user_voice+0x12c>)
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	f107 0113 	add.w	r1, r7, #19
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe6:	f00b fae7 	bl	800f5b8 <xQueueGenericSend>
	store_voice(voice_buf, AUDIO_BUFFER_SIZE, FRAME_SIZE, "current_voice.bin");
 8003fea:	4b2d      	ldr	r3, [pc, #180]	@ (80040a0 <recognize_user_voice+0x134>)
 8003fec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ff0:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 8003ff4:	69b8      	ldr	r0, [r7, #24]
 8003ff6:	f7ff f965 	bl	80032c4 <store_voice>
	vPortFree(voice_buf);
 8003ffa:	69b8      	ldr	r0, [r7, #24]
 8003ffc:	f00d fae4 	bl	80115c8 <vPortFree>
	free_heap = xPortGetFreeHeapSize();
 8004000:	f00d fb46 	bl	8011690 <xPortGetFreeHeapSize>
 8004004:	61f8      	str	r0, [r7, #28]

	//Extraigo los features de la voz
	entry = pvPortMalloc(CHAR_SIZE_BYTES(ENTRY_STR_SIZE));
 8004006:	203c      	movs	r0, #60	@ 0x3c
 8004008:	f00d fa10 	bl	801142c <pvPortMalloc>
 800400c:	6178      	str	r0, [r7, #20]
	if(entry == NULL){
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10b      	bne.n	800402c <recognize_user_voice+0xc0>
		message = DISPLAY_ERROR_MEMORY;
 8004014:	2312      	movs	r3, #18
 8004016:	607b      	str	r3, [r7, #4]
		xQueueSend(display_queue, &message, portMAX_DELAY);
 8004018:	4b1f      	ldr	r3, [pc, #124]	@ (8004098 <recognize_user_voice+0x12c>)
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	1d39      	adds	r1, r7, #4
 800401e:	2300      	movs	r3, #0
 8004020:	f04f 32ff 	mov.w	r2, #4294967295
 8004024:	f00b fac8 	bl	800f5b8 <xQueueGenericSend>
		while(1);
 8004028:	bf00      	nop
 800402a:	e7fd      	b.n	8004028 <recognize_user_voice+0xbc>
	}
	extract_and_save_features("current_voice.bin", "current_feature.bin");
 800402c:	491d      	ldr	r1, [pc, #116]	@ (80040a4 <recognize_user_voice+0x138>)
 800402e:	481c      	ldr	r0, [pc, #112]	@ (80040a0 <recognize_user_voice+0x134>)
 8004030:	f7ff f99a 	bl	8003368 <extract_and_save_features>
	if(check_voice(template_path, "current_feature.bin")){
 8004034:	491b      	ldr	r1, [pc, #108]	@ (80040a4 <recognize_user_voice+0x138>)
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f7ff f9e4 	bl	8003404 <check_voice>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d013      	beq.n	800406a <recognize_user_voice+0xfe>
		build_entry_message(entry, user_name, "Concedido\n");
 8004042:	4a19      	ldr	r2, [pc, #100]	@ (80040a8 <recognize_user_voice+0x13c>)
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	6978      	ldr	r0, [r7, #20]
 8004048:	f7ff ff4a 	bl	8003ee0 <build_entry_message>
		write_entry("registro.txt", entry);
 800404c:	6979      	ldr	r1, [r7, #20]
 800404e:	4817      	ldr	r0, [pc, #92]	@ (80040ac <recognize_user_voice+0x140>)
 8004050:	f7ff fdd8 	bl	8003c04 <write_entry>
		*message = DISPLAY_VOICE_RECOGNIZED;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2207      	movs	r2, #7
 8004058:	701a      	strb	r2, [r3, #0]
		vPortFree(entry);
 800405a:	6978      	ldr	r0, [r7, #20]
 800405c:	f00d fab4 	bl	80115c8 <vPortFree>
		f_unlink("current_feature.bin");
 8004060:	4810      	ldr	r0, [pc, #64]	@ (80040a4 <recognize_user_voice+0x138>)
 8004062:	f00a fda2 	bl	800ebaa <f_unlink>
		return true;
 8004066:	2301      	movs	r3, #1
 8004068:	e012      	b.n	8004090 <recognize_user_voice+0x124>
	}
	else{
		build_entry_message(entry, user_name, "Denegado");
 800406a:	4a11      	ldr	r2, [pc, #68]	@ (80040b0 <recognize_user_voice+0x144>)
 800406c:	68b9      	ldr	r1, [r7, #8]
 800406e:	6978      	ldr	r0, [r7, #20]
 8004070:	f7ff ff36 	bl	8003ee0 <build_entry_message>
		write_entry("registro.txt", entry);
 8004074:	6979      	ldr	r1, [r7, #20]
 8004076:	480d      	ldr	r0, [pc, #52]	@ (80040ac <recognize_user_voice+0x140>)
 8004078:	f7ff fdc4 	bl	8003c04 <write_entry>
		*message = DISPLAY_VOICE_NOT_RECOGNIZED;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2208      	movs	r2, #8
 8004080:	701a      	strb	r2, [r3, #0]
		vPortFree(entry);
 8004082:	6978      	ldr	r0, [r7, #20]
 8004084:	f00d faa0 	bl	80115c8 <vPortFree>
		f_unlink("current_feature.bin");
 8004088:	4806      	ldr	r0, [pc, #24]	@ (80040a4 <recognize_user_voice+0x138>)
 800408a:	f00a fd8e 	bl	800ebaa <f_unlink>
		return false;
 800408e:	2300      	movs	r3, #0
	}
}
 8004090:	4618      	mov	r0, r3
 8004092:	3720      	adds	r7, #32
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	200002b8 	.word	0x200002b8
 800409c:	200002c0 	.word	0x200002c0
 80040a0:	08014990 	.word	0x08014990
 80040a4:	080149a4 	.word	0x080149a4
 80040a8:	080149b8 	.word	0x080149b8
 80040ac:	08014950 	.word	0x08014950
 80040b0:	080149c4 	.word	0x080149c4

080040b4 <generate_template>:

bool generate_template(void){
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b09e      	sub	sp, #120	@ 0x78
 80040b8:	af00      	add	r7, sp, #0
	display_message_t message;
	float *template, *my_feature;
	char filenames[NUM_OF_VOICES][20] = {"feature_1.bin", "feature_2.bin", "feature_3.bin", "feature_4.bin", "feature_5.bin"};
 80040ba:	4a79      	ldr	r2, [pc, #484]	@ (80042a0 <generate_template+0x1ec>)
 80040bc:	463b      	mov	r3, r7
 80040be:	4611      	mov	r1, r2
 80040c0:	2264      	movs	r2, #100	@ 0x64
 80040c2:	4618      	mov	r0, r3
 80040c4:	f00f fb53 	bl	801376e <memcpy>


	//Reservo memoria para el buffer que contiene la captura de voz
	uint16_t *voice_buf = pvPortMalloc(U16_SIZE_BYTES(AUDIO_BUFFER_SIZE));
 80040c8:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 80040cc:	f00d f9ae 	bl	801142c <pvPortMalloc>
 80040d0:	6738      	str	r0, [r7, #112]	@ 0x70
	if(voice_buf == NULL){
 80040d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10d      	bne.n	80040f4 <generate_template+0x40>
		//Manejar el error
		message = DISPLAY_ERROR_MEMORY;
 80040d8:	2312      	movs	r3, #18
 80040da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		xQueueSend(display_queue, &message, portMAX_DELAY);
 80040de:	4b71      	ldr	r3, [pc, #452]	@ (80042a4 <generate_template+0x1f0>)
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	f107 0167 	add.w	r1, r7, #103	@ 0x67
 80040e6:	2300      	movs	r3, #0
 80040e8:	f04f 32ff 	mov.w	r2, #4294967295
 80040ec:	f00b fa64 	bl	800f5b8 <xQueueGenericSend>
		while(1);
 80040f0:	bf00      	nop
 80040f2:	e7fd      	b.n	80040f0 <generate_template+0x3c>
	}
	//Capturo las voces y las guardo en la tarjeta SD
	for(uint8_t i = 0; i < NUM_OF_VOICES; i++){
 80040f4:	2300      	movs	r3, #0
 80040f6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80040fa:	e03c      	b.n	8004176 <generate_template+0xc2>
		//Envio mensaje de inicio de reconocimiento al display
		message = DISPLAY_START_SPEECH_REC;
 80040fc:	2306      	movs	r3, #6
 80040fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		xQueueSend(display_queue, &message, portMAX_DELAY);
 8004102:	4b68      	ldr	r3, [pc, #416]	@ (80042a4 <generate_template+0x1f0>)
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	f107 0167 	add.w	r1, r7, #103	@ 0x67
 800410a:	2300      	movs	r3, #0
 800410c:	f04f 32ff 	mov.w	r2, #4294967295
 8004110:	f00b fa52 	bl	800f5b8 <xQueueGenericSend>
		xSemaphoreTake(sd_display_sync, portMAX_DELAY);							//Bloqueo la tarea hasta que el display me devuelva el semaforo
 8004114:	4b64      	ldr	r3, [pc, #400]	@ (80042a8 <generate_template+0x1f4>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f04f 31ff 	mov.w	r1, #4294967295
 800411c:	4618      	mov	r0, r3
 800411e:	f00b fcbf 	bl	800faa0 <xQueueSemaphoreTake>

		//Capturo voces y las almaceno en la SD
		capture_voice(voice_buf, AUDIO_BUFFER_SIZE);
 8004122:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 8004126:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004128:	f7ff f866 	bl	80031f8 <capture_voice>
		message = DISPLAY_PROCESSING_DATA;
 800412c:	230c      	movs	r3, #12
 800412e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		xQueueSend(display_queue, &message, portMAX_DELAY);
 8004132:	4b5c      	ldr	r3, [pc, #368]	@ (80042a4 <generate_template+0x1f0>)
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	f107 0167 	add.w	r1, r7, #103	@ 0x67
 800413a:	2300      	movs	r3, #0
 800413c:	f04f 32ff 	mov.w	r2, #4294967295
 8004140:	f00b fa3a 	bl	800f5b8 <xQueueGenericSend>
		store_voice(voice_buf, AUDIO_BUFFER_SIZE, FRAME_SIZE, "current_voice.bin");
 8004144:	4b59      	ldr	r3, [pc, #356]	@ (80042ac <generate_template+0x1f8>)
 8004146:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800414a:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 800414e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004150:	f7ff f8b8 	bl	80032c4 <store_voice>
		extract_and_save_features("current_voice.bin", filenames[i]);											//Borro el archivo current_voice.bin
 8004154:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8004158:	4639      	mov	r1, r7
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	440b      	add	r3, r1
 8004164:	4619      	mov	r1, r3
 8004166:	4851      	ldr	r0, [pc, #324]	@ (80042ac <generate_template+0x1f8>)
 8004168:	f7ff f8fe 	bl	8003368 <extract_and_save_features>
	for(uint8_t i = 0; i < NUM_OF_VOICES; i++){
 800416c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8004170:	3301      	adds	r3, #1
 8004172:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004176:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800417a:	2b04      	cmp	r3, #4
 800417c:	d9be      	bls.n	80040fc <generate_template+0x48>
	}

	//Libero memoria utilizada para capturar voz
	vPortFree(voice_buf);
 800417e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004180:	f00d fa22 	bl	80115c8 <vPortFree>

	//Reservo memoria utilizada para crear el template
	template = pvPortMalloc(FLOAT_SIZE_BYTES(FEATURE_SIZE));
 8004184:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004188:	f00d f950 	bl	801142c <pvPortMalloc>
 800418c:	66f8      	str	r0, [r7, #108]	@ 0x6c
	my_feature = pvPortMalloc(FLOAT_SIZE_BYTES(FEATURE_SIZE));
 800418e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004192:	f00d f94b 	bl	801142c <pvPortMalloc>
 8004196:	66b8      	str	r0, [r7, #104]	@ 0x68
	if(template == NULL || my_feature == NULL){
 8004198:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <generate_template+0xf0>
 800419e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10d      	bne.n	80041c0 <generate_template+0x10c>
		//Manejar error
		message = DISPLAY_ERROR_MEMORY;
 80041a4:	2312      	movs	r3, #18
 80041a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		xQueueSend(display_queue, &message, portMAX_DELAY);
 80041aa:	4b3e      	ldr	r3, [pc, #248]	@ (80042a4 <generate_template+0x1f0>)
 80041ac:	6818      	ldr	r0, [r3, #0]
 80041ae:	f107 0167 	add.w	r1, r7, #103	@ 0x67
 80041b2:	2300      	movs	r3, #0
 80041b4:	f04f 32ff 	mov.w	r2, #4294967295
 80041b8:	f00b f9fe 	bl	800f5b8 <xQueueGenericSend>
		while(1);
 80041bc:	bf00      	nop
 80041be:	e7fd      	b.n	80041bc <generate_template+0x108>
	}

	arm_fill_f32(0.0f, template, FEATURE_SIZE);
 80041c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80041c4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80041c6:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 80042b0 <generate_template+0x1fc>
 80041ca:	f00d fb2b 	bl	8011824 <arm_fill_f32>

	for(uint8_t i = 0; i < NUM_OF_FRAMES; i++){
 80041ce:	2300      	movs	r3, #0
 80041d0:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80041d4:	e03d      	b.n	8004252 <generate_template+0x19e>
		//En cada iteracion se procesa el bloque i del feature_{j+1}.bin
		for(uint8_t j = 0; j < NUM_OF_VOICES; j++){
 80041d6:	2300      	movs	r3, #0
 80041d8:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 80041dc:	e01b      	b.n	8004216 <generate_template+0x162>
			read_buffer_from_sd(filenames[j], my_feature, FEATURE_SIZE, i * FEATURE_SIZE);
 80041de:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 80041e2:	4639      	mov	r1, r7
 80041e4:	4613      	mov	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	18c8      	adds	r0, r1, r3
 80041ee:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80041f2:	029b      	lsls	r3, r3, #10
 80041f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041f8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041fa:	f7ff fcad 	bl	8003b58 <read_buffer_from_sd>
			arm_add_f32(template, my_feature, template, FEATURE_SIZE);
 80041fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004202:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004204:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004206:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004208:	f00e fd06 	bl	8012c18 <arm_add_f32>
		for(uint8_t j = 0; j < NUM_OF_VOICES; j++){
 800420c:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8004210:	3301      	adds	r3, #1
 8004212:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8004216:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800421a:	2b04      	cmp	r3, #4
 800421c:	d9df      	bls.n	80041de <generate_template+0x12a>
		}

		//Escalo para obtener el promedio
		arm_scale_f32(template, 1.0f / NUM_OF_VOICES, template, FEATURE_SIZE);
 800421e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004222:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004224:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 80042b4 <generate_template+0x200>
 8004228:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800422a:	f00e fcbf 	bl	8012bac <arm_scale_f32>
		save_buffer_on_sd("current_template.bin", template, FEATURE_SIZE);
 800422e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004232:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004234:	4820      	ldr	r0, [pc, #128]	@ (80042b8 <generate_template+0x204>)
 8004236:	f7ff fc21 	bl	8003a7c <save_buffer_on_sd>
		arm_fill_f32(0.0f, template, FEATURE_SIZE);
 800423a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800423e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004240:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 80042b0 <generate_template+0x1fc>
 8004244:	f00d faee 	bl	8011824 <arm_fill_f32>
	for(uint8_t i = 0; i < NUM_OF_FRAMES; i++){
 8004248:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800424c:	3301      	adds	r3, #1
 800424e:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8004252:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8004256:	2b08      	cmp	r3, #8
 8004258:	d9bd      	bls.n	80041d6 <generate_template+0x122>
	}

	//Borro los archivos generados para crear el template
	for(uint8_t i = 0; i < NUM_OF_VOICES; i++){
 800425a:	2300      	movs	r3, #0
 800425c:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 8004260:	e00f      	b.n	8004282 <generate_template+0x1ce>
		f_unlink(filenames[i]);
 8004262:	f897 2074 	ldrb.w	r2, [r7, #116]	@ 0x74
 8004266:	4639      	mov	r1, r7
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	4618      	mov	r0, r3
 8004274:	f00a fc99 	bl	800ebaa <f_unlink>
	for(uint8_t i = 0; i < NUM_OF_VOICES; i++){
 8004278:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800427c:	3301      	adds	r3, #1
 800427e:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 8004282:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8004286:	2b04      	cmp	r3, #4
 8004288:	d9eb      	bls.n	8004262 <generate_template+0x1ae>
	}

	//Libero memoria de template y my_feature
	vPortFree(template);
 800428a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800428c:	f00d f99c 	bl	80115c8 <vPortFree>
	vPortFree(my_feature);
 8004290:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8004292:	f00d f999 	bl	80115c8 <vPortFree>
	return true;
 8004296:	2301      	movs	r3, #1
}
 8004298:	4618      	mov	r0, r3
 800429a:	3778      	adds	r7, #120	@ 0x78
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	080149e8 	.word	0x080149e8
 80042a4:	200002b8 	.word	0x200002b8
 80042a8:	200002c0 	.word	0x200002c0
 80042ac:	08014990 	.word	0x08014990
 80042b0:	00000000 	.word	0x00000000
 80042b4:	3e4ccccd 	.word	0x3e4ccccd
 80042b8:	080149d0 	.word	0x080149d0

080042bc <display_task>:
	}
}

#elif DISPLAY_FUNCTION == 1
//Version funcional que utiliza el control de acceso
void display_task(void *pvParameters){
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
	display_message_t message;
	uint8_t counter = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	73fb      	strb	r3, [r7, #15]
	display_init();						//Inicializo el display
 80042c8:	f7fe fa0b 	bl	80026e2 <display_init>
	display_start_msg();				//Muestro mensaje inicial
 80042cc:	f7fe faa6 	bl	800281c <display_start_msg>
	while(1){
		xQueueReceive(display_queue, &message, portMAX_DELAY);
 80042d0:	4b65      	ldr	r3, [pc, #404]	@ (8004468 <display_task+0x1ac>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f107 010e 	add.w	r1, r7, #14
 80042d8:	f04f 32ff 	mov.w	r2, #4294967295
 80042dc:	4618      	mov	r0, r3
 80042de:	f00b fafd 	bl	800f8dc <xQueueReceive>
		switch(message){
 80042e2:	7bbb      	ldrb	r3, [r7, #14]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	2b11      	cmp	r3, #17
 80042e8:	d8f2      	bhi.n	80042d0 <display_task+0x14>
 80042ea:	a201      	add	r2, pc, #4	@ (adr r2, 80042f0 <display_task+0x34>)
 80042ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f0:	08004339 	.word	0x08004339
 80042f4:	0800433f 	.word	0x0800433f
 80042f8:	08004357 	.word	0x08004357
 80042fc:	0800436f 	.word	0x0800436f
 8004300:	08004381 	.word	0x08004381
 8004304:	08004393 	.word	0x08004393
 8004308:	080043b7 	.word	0x080043b7
 800430c:	080043d3 	.word	0x080043d3
 8004310:	080043f5 	.word	0x080043f5
 8004314:	08004403 	.word	0x08004403
 8004318:	08004415 	.word	0x08004415
 800431c:	080043ef 	.word	0x080043ef
 8004320:	0800443b 	.word	0x0800443b
 8004324:	0800442d 	.word	0x0800442d
 8004328:	08004427 	.word	0x08004427
 800432c:	080042d1 	.word	0x080042d1
 8004330:	080042d1 	.word	0x080042d1
 8004334:	08004457 	.word	0x08004457
		case DISPLAY_SCREEN_WELCOME:
			display_start_msg();
 8004338:	f7fe fa70 	bl	800281c <display_start_msg>
			break;
 800433c:	e092      	b.n	8004464 <display_task+0x1a8>
		case DISPLAY_ENTER_DIGIT:
			if(counter < SEQUENCE_LENGTH){
 800433e:	7bfb      	ldrb	r3, [r7, #15]
 8004340:	2b05      	cmp	r3, #5
 8004342:	f200 808b 	bhi.w	800445c <display_task+0x1a0>
				counter++;
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	3301      	adds	r3, #1
 800434a:	73fb      	strb	r3, [r7, #15]
				display_sequence_entry_msg(counter);
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	4618      	mov	r0, r3
 8004350:	f7fe fa9a 	bl	8002888 <display_sequence_entry_msg>
			}
			break;
 8004354:	e082      	b.n	800445c <display_task+0x1a0>
		case DISPLAY_ERASE_DIGIT:
			if(counter > 0){
 8004356:	7bfb      	ldrb	r3, [r7, #15]
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 8081 	beq.w	8004460 <display_task+0x1a4>
				counter--;
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	3b01      	subs	r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]
				display_sequence_entry_msg(counter);
 8004364:	7bfb      	ldrb	r3, [r7, #15]
 8004366:	4618      	mov	r0, r3
 8004368:	f7fe fa8e 	bl	8002888 <display_sequence_entry_msg>
			}
			break;
 800436c:	e078      	b.n	8004460 <display_task+0x1a4>
		case DISPLAY_USER_FOUND:
			display_user_found_msg();
 800436e:	f7fe fae9 	bl	8002944 <display_user_found_msg>
			counter = 0;
 8004372:	2300      	movs	r3, #0
 8004374:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004376:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800437a:	f00b ffc9 	bl	8010310 <vTaskDelay>
			break;
 800437e:	e071      	b.n	8004464 <display_task+0x1a8>
		case DISPLAY_USER_NOT_FOUND:
			display_user_not_found_msg();
 8004380:	f7fe faea 	bl	8002958 <display_user_not_found_msg>
			counter = 0;							//Reinicio el contador
 8004384:	2300      	movs	r3, #0
 8004386:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004388:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800438c:	f00b ffc0 	bl	8010310 <vTaskDelay>
			break;
 8004390:	e068      	b.n	8004464 <display_task+0x1a8>
		case DISPLAY_START_SPEECH_REC:
			display_start_voice_recognition_msg();
 8004392:	f7fe faeb 	bl	800296c <display_start_voice_recognition_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004396:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800439a:	f00b ffb9 	bl	8010310 <vTaskDelay>
			countdown_msg();
 800439e:	f7fe faef 	bl	8002980 <countdown_msg>
			display_capturing_voice_msg();
 80043a2:	f7fe fb43 	bl	8002a2c <display_capturing_voice_msg>
			xSemaphoreGive(sd_display_sync);
 80043a6:	4b31      	ldr	r3, [pc, #196]	@ (800446c <display_task+0x1b0>)
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	2300      	movs	r3, #0
 80043ac:	2200      	movs	r2, #0
 80043ae:	2100      	movs	r1, #0
 80043b0:	f00b f902 	bl	800f5b8 <xQueueGenericSend>
			break;
 80043b4:	e056      	b.n	8004464 <display_task+0x1a8>
		case DISPLAY_VOICE_RECOGNIZED:
			display_recognized_voice_msg();
 80043b6:	f7fe fb43 	bl	8002a40 <display_recognized_voice_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 80043ba:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80043be:	f00b ffa7 	bl	8010310 <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 80043c2:	4b2a      	ldr	r3, [pc, #168]	@ (800446c <display_task+0x1b0>)
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	2300      	movs	r3, #0
 80043c8:	2200      	movs	r2, #0
 80043ca:	2100      	movs	r1, #0
 80043cc:	f00b f8f4 	bl	800f5b8 <xQueueGenericSend>
			break;
 80043d0:	e048      	b.n	8004464 <display_task+0x1a8>
		case DISPLAY_VOICE_NOT_RECOGNIZED:
			display_not_recognized_voice_msg();
 80043d2:	f7fe fb3f 	bl	8002a54 <display_not_recognized_voice_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 80043d6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80043da:	f00b ff99 	bl	8010310 <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 80043de:	4b23      	ldr	r3, [pc, #140]	@ (800446c <display_task+0x1b0>)
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	2300      	movs	r3, #0
 80043e4:	2200      	movs	r2, #0
 80043e6:	2100      	movs	r1, #0
 80043e8:	f00b f8e6 	bl	800f5b8 <xQueueGenericSend>
			break;
 80043ec:	e03a      	b.n	8004464 <display_task+0x1a8>
		case DISPLAY_PROCESSING_DATA:
			display_processing_data_msg();
 80043ee:	f7fe fb3b 	bl	8002a68 <display_processing_data_msg>
			//vTaskDelay(2000 / portTICK_RATE_MS);
			break;
 80043f2:	e037      	b.n	8004464 <display_task+0x1a8>
		case DISPLAY_ACCESS_GRANTED:
			display_access_granted_msg();
 80043f4:	f7fe fa9c 	bl	8002930 <display_access_granted_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 80043f8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80043fc:	f00b ff88 	bl	8010310 <vTaskDelay>
			break;
 8004400:	e030      	b.n	8004464 <display_task+0x1a8>
		case DISPLAY_TIMEOUT_EVENT:
			display_timeout_msg();
 8004402:	f7fe fa81 	bl	8002908 <display_timeout_msg>
			counter = 0;
 8004406:	2300      	movs	r3, #0
 8004408:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 800440a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800440e:	f00b ff7f 	bl	8010310 <vTaskDelay>
			break;
 8004412:	e027      	b.n	8004464 <display_task+0x1a8>
		case DISPLAY_INCOMPLETE_SEQUENCE_EVENT:
			display_incomplete_entry_msg();
 8004414:	f7fe fa82 	bl	800291c <display_incomplete_entry_msg>
			counter = 0;
 8004418:	2300      	movs	r3, #0
 800441a:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 800441c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004420:	f00b ff76 	bl	8010310 <vTaskDelay>
			break;
 8004424:	e01e      	b.n	8004464 <display_task+0x1a8>
		case DISPLAY_DATABASE_NOT_FOUND:
			display_missing_database_msg();
 8004426:	f7fe fb29 	bl	8002a7c <display_missing_database_msg>
			break;
 800442a:	e01b      	b.n	8004464 <display_task+0x1a8>
		case DISPLAY_TEMPLATE_NOT_FOUND:
			display_missing_template_msg();
 800442c:	f7fe fb30 	bl	8002a90 <display_missing_template_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004430:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004434:	f00b ff6c 	bl	8010310 <vTaskDelay>
			break;
 8004438:	e014      	b.n	8004464 <display_task+0x1a8>
		case DISPLAY_TEMPLATE_SAVED:
			display_template_saved_msg();
 800443a:	f7fe fb33 	bl	8002aa4 <display_template_saved_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 800443e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004442:	f00b ff65 	bl	8010310 <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 8004446:	4b09      	ldr	r3, [pc, #36]	@ (800446c <display_task+0x1b0>)
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	2300      	movs	r3, #0
 800444c:	2200      	movs	r2, #0
 800444e:	2100      	movs	r1, #0
 8004450:	f00b f8b2 	bl	800f5b8 <xQueueGenericSend>
			break;
 8004454:	e006      	b.n	8004464 <display_task+0x1a8>
		case DISPLAY_ERROR_MEMORY:
			display_missing_database_msg();
 8004456:	f7fe fb11 	bl	8002a7c <display_missing_database_msg>
 800445a:	e739      	b.n	80042d0 <display_task+0x14>
			break;
 800445c:	bf00      	nop
 800445e:	e737      	b.n	80042d0 <display_task+0x14>
			break;
 8004460:	bf00      	nop
 8004462:	e735      	b.n	80042d0 <display_task+0x14>
		xQueueReceive(display_queue, &message, portMAX_DELAY);
 8004464:	e734      	b.n	80042d0 <display_task+0x14>
 8004466:	bf00      	nop
 8004468:	200002b8 	.word	0x200002b8
 800446c:	200002c0 	.word	0x200002c0

08004470 <keypad_task>:
#include "digit_handle_logic.h"
#include "keypad_functions.h"
/*================[Public Task]=====================*/
void keypad_task(void *pvParameters){
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
	char input;
	char kp_buffer[SEQUENCE_LENGTH + 1] = {0};										//Son 7 elementos para incluir el caracter '\0'
 8004478:	2300      	movs	r3, #0
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	f107 0310 	add.w	r3, r7, #16
 8004480:	2100      	movs	r1, #0
 8004482:	460a      	mov	r2, r1
 8004484:	801a      	strh	r2, [r3, #0]
 8004486:	460a      	mov	r2, r1
 8004488:	709a      	strb	r2, [r3, #2]
	bool send_flag = false;
 800448a:	2300      	movs	r3, #0
 800448c:	72fb      	strb	r3, [r7, #11]
	display_message_t message;
	while(1){
		input = read_keypad();
 800448e:	f7fe fe51 	bl	8003134 <read_keypad>
 8004492:	4603      	mov	r3, r0
 8004494:	75bb      	strb	r3, [r7, #22]
		message = handle_keypad_input(input, kp_buffer, &send_flag);
 8004496:	f107 020b 	add.w	r2, r7, #11
 800449a:	f107 010c 	add.w	r1, r7, #12
 800449e:	7dbb      	ldrb	r3, [r7, #22]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fe fd41 	bl	8002f28 <handle_keypad_input>
 80044a6:	4603      	mov	r3, r0
 80044a8:	72bb      	strb	r3, [r7, #10]
		if(send_flag){
 80044aa:	7afb      	ldrb	r3, [r7, #11]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01c      	beq.n	80044ea <keypad_task+0x7a>
			//Envio uno por uno los digitos obtenidos con el keypad a la tarea SD
			for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 80044b0:	2300      	movs	r3, #0
 80044b2:	75fb      	strb	r3, [r7, #23]
 80044b4:	e00d      	b.n	80044d2 <keypad_task+0x62>
				xQueueSend(sequence_queue, &kp_buffer[i], portMAX_DELAY);
 80044b6:	4b13      	ldr	r3, [pc, #76]	@ (8004504 <keypad_task+0x94>)
 80044b8:	6818      	ldr	r0, [r3, #0]
 80044ba:	7dfb      	ldrb	r3, [r7, #23]
 80044bc:	f107 020c 	add.w	r2, r7, #12
 80044c0:	18d1      	adds	r1, r2, r3
 80044c2:	2300      	movs	r3, #0
 80044c4:	f04f 32ff 	mov.w	r2, #4294967295
 80044c8:	f00b f876 	bl	800f5b8 <xQueueGenericSend>
			for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 80044cc:	7dfb      	ldrb	r3, [r7, #23]
 80044ce:	3301      	adds	r3, #1
 80044d0:	75fb      	strb	r3, [r7, #23]
 80044d2:	7dfb      	ldrb	r3, [r7, #23]
 80044d4:	2b06      	cmp	r3, #6
 80044d6:	d9ee      	bls.n	80044b6 <keypad_task+0x46>
			}
			xSemaphoreTake(keypad_sd_sync, portMAX_DELAY);							//Espero que la tarea SD devuelva el semaforo
 80044d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004508 <keypad_task+0x98>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f04f 31ff 	mov.w	r1, #4294967295
 80044e0:	4618      	mov	r0, r3
 80044e2:	f00b fadd 	bl	800faa0 <xQueueSemaphoreTake>

			//Reinicio el flag de envio
			send_flag = false;
 80044e6:	2300      	movs	r3, #0
 80044e8:	72fb      	strb	r3, [r7, #11]
		}
		//Envio el mensaje a la tarea display si no hay pantalla idle
		if(message != DISPLAY_IDLE){
 80044ea:	7abb      	ldrb	r3, [r7, #10]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0ce      	beq.n	800448e <keypad_task+0x1e>
			xQueueSend(display_queue, &message, portMAX_DELAY);
 80044f0:	4b06      	ldr	r3, [pc, #24]	@ (800450c <keypad_task+0x9c>)
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	f107 010a 	add.w	r1, r7, #10
 80044f8:	2300      	movs	r3, #0
 80044fa:	f04f 32ff 	mov.w	r2, #4294967295
 80044fe:	f00b f85b 	bl	800f5b8 <xQueueGenericSend>
		input = read_keypad();
 8004502:	e7c4      	b.n	800448e <keypad_task+0x1e>
 8004504:	200002b4 	.word	0x200002b4
 8004508:	200002bc 	.word	0x200002bc
 800450c:	200002b8 	.word	0x200002b8

08004510 <sd_task>:
/*================[Private defines]========================*/
#define CODE_VERSION 1

/*================[Public task]==========================*/
#if CODE_VERSION == 1
void sd_task(void *pvParameters){
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
	char user_key_retrieved[SEQUENCE_LENGTH + 1];					//Para recibir los digitos desde el keypad
	char *template_path;											//Para guardar la direccion del template asociado al usuario
	char *user_name;												//Para guardar el nombre de usuario

	//Control inicial. Verifico existencia de archivos importantes
	if(!initialize_sd_and_verify_files(&message)){
 8004518:	f107 0313 	add.w	r3, r7, #19
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff fc89 	bl	8003e34 <initialize_sd_and_verify_files>
 8004522:	4603      	mov	r3, r0
 8004524:	f083 0301 	eor.w	r3, r3, #1
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <sd_task+0x34>
		//No se pudieron realizar las inicializaciones
		xQueueSend(display_queue, &message, portMAX_DELAY);			//Envio pantalla de error al display
 800452e:	4b84      	ldr	r3, [pc, #528]	@ (8004740 <sd_task+0x230>)
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	f107 0113 	add.w	r1, r7, #19
 8004536:	2300      	movs	r3, #0
 8004538:	f04f 32ff 	mov.w	r2, #4294967295
 800453c:	f00b f83c 	bl	800f5b8 <xQueueGenericSend>
		while(1);													//Loop permanente. Resetear y solucionar el problema.
 8004540:	bf00      	nop
 8004542:	e7fd      	b.n	8004540 <sd_task+0x30>
	}

	while(1){
		//Espero a que llegue la clave de usuario ingresada desde la tarea keypad
		for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 8004544:	2300      	movs	r3, #0
 8004546:	77fb      	strb	r3, [r7, #31]
 8004548:	e00d      	b.n	8004566 <sd_task+0x56>
			xQueueReceive(sequence_queue, &user_key_retrieved[i], portMAX_DELAY);
 800454a:	4b7e      	ldr	r3, [pc, #504]	@ (8004744 <sd_task+0x234>)
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	7ffb      	ldrb	r3, [r7, #31]
 8004550:	f107 020c 	add.w	r2, r7, #12
 8004554:	4413      	add	r3, r2
 8004556:	f04f 32ff 	mov.w	r2, #4294967295
 800455a:	4619      	mov	r1, r3
 800455c:	f00b f9be 	bl	800f8dc <xQueueReceive>
		for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 8004560:	7ffb      	ldrb	r3, [r7, #31]
 8004562:	3301      	adds	r3, #1
 8004564:	77fb      	strb	r3, [r7, #31]
 8004566:	7ffb      	ldrb	r3, [r7, #31]
 8004568:	2b06      	cmp	r3, #6
 800456a:	d9ee      	bls.n	800454a <sd_task+0x3a>
		}

		//Verifico si la clave es 000000. En cuyo caso se debe crear el template
		if(strcmp(user_key_retrieved, "000000") == 0){
 800456c:	f107 030c 	add.w	r3, r7, #12
 8004570:	4975      	ldr	r1, [pc, #468]	@ (8004748 <sd_task+0x238>)
 8004572:	4618      	mov	r0, r3
 8004574:	f7fb fe94 	bl	80002a0 <strcmp>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d138      	bne.n	80045f0 <sd_task+0xe0>
			if(generate_template()){
 800457e:	f7ff fd99 	bl	80040b4 <generate_template>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d019      	beq.n	80045bc <sd_task+0xac>
				//Muestro mensaje en display indicando que se creo el template
				message = DISPLAY_TEMPLATE_SAVED;
 8004588:	230d      	movs	r3, #13
 800458a:	74fb      	strb	r3, [r7, #19]
				xQueueSend(display_queue, &message, portMAX_DELAY);
 800458c:	4b6c      	ldr	r3, [pc, #432]	@ (8004740 <sd_task+0x230>)
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	f107 0113 	add.w	r1, r7, #19
 8004594:	2300      	movs	r3, #0
 8004596:	f04f 32ff 	mov.w	r2, #4294967295
 800459a:	f00b f80d 	bl	800f5b8 <xQueueGenericSend>
				xSemaphoreTake(sd_display_sync, portMAX_DELAY);
 800459e:	4b6b      	ldr	r3, [pc, #428]	@ (800474c <sd_task+0x23c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f04f 31ff 	mov.w	r1, #4294967295
 80045a6:	4618      	mov	r0, r3
 80045a8:	f00b fa7a 	bl	800faa0 <xQueueSemaphoreTake>
				xSemaphoreGive(keypad_sd_sync);
 80045ac:	4b68      	ldr	r3, [pc, #416]	@ (8004750 <sd_task+0x240>)
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	2300      	movs	r3, #0
 80045b2:	2200      	movs	r2, #0
 80045b4:	2100      	movs	r1, #0
 80045b6:	f00a ffff 	bl	800f5b8 <xQueueGenericSend>
				message = DISPLAY_TEMPLATE_NOT_FOUND;
				xQueueSend(display_queue, &message, portMAX_DELAY);
				xSemaphoreTake(sd_display_sync, portMAX_DELAY);
				xSemaphoreGive(keypad_sd_sync);
			}
			continue;
 80045ba:	e0bf      	b.n	800473c <sd_task+0x22c>
				message = DISPLAY_TEMPLATE_NOT_FOUND;
 80045bc:	230e      	movs	r3, #14
 80045be:	74fb      	strb	r3, [r7, #19]
				xQueueSend(display_queue, &message, portMAX_DELAY);
 80045c0:	4b5f      	ldr	r3, [pc, #380]	@ (8004740 <sd_task+0x230>)
 80045c2:	6818      	ldr	r0, [r3, #0]
 80045c4:	f107 0113 	add.w	r1, r7, #19
 80045c8:	2300      	movs	r3, #0
 80045ca:	f04f 32ff 	mov.w	r2, #4294967295
 80045ce:	f00a fff3 	bl	800f5b8 <xQueueGenericSend>
				xSemaphoreTake(sd_display_sync, portMAX_DELAY);
 80045d2:	4b5e      	ldr	r3, [pc, #376]	@ (800474c <sd_task+0x23c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f04f 31ff 	mov.w	r1, #4294967295
 80045da:	4618      	mov	r0, r3
 80045dc:	f00b fa60 	bl	800faa0 <xQueueSemaphoreTake>
				xSemaphoreGive(keypad_sd_sync);
 80045e0:	4b5b      	ldr	r3, [pc, #364]	@ (8004750 <sd_task+0x240>)
 80045e2:	6818      	ldr	r0, [r3, #0]
 80045e4:	2300      	movs	r3, #0
 80045e6:	2200      	movs	r2, #0
 80045e8:	2100      	movs	r1, #0
 80045ea:	f00a ffe5 	bl	800f5b8 <xQueueGenericSend>
			continue;
 80045ee:	e0a5      	b.n	800473c <sd_task+0x22c>
		}

		//Continuo con flujo normal de ejecucion

		//Reservo memoria para almacenar usuario
		user_name = pvPortMalloc(USER_STR_SIZE * sizeof(char));
 80045f0:	2032      	movs	r0, #50	@ 0x32
 80045f2:	f00c ff1b 	bl	801142c <pvPortMalloc>
 80045f6:	61b8      	str	r0, [r7, #24]
		if(user_name == NULL){
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10b      	bne.n	8004616 <sd_task+0x106>
			message = DISPLAY_ERROR_MEMORY;
 80045fe:	2312      	movs	r3, #18
 8004600:	74fb      	strb	r3, [r7, #19]
			xQueueSend(display_queue, &message, portMAX_DELAY);
 8004602:	4b4f      	ldr	r3, [pc, #316]	@ (8004740 <sd_task+0x230>)
 8004604:	6818      	ldr	r0, [r3, #0]
 8004606:	f107 0113 	add.w	r1, r7, #19
 800460a:	2300      	movs	r3, #0
 800460c:	f04f 32ff 	mov.w	r2, #4294967295
 8004610:	f00a ffd2 	bl	800f5b8 <xQueueGenericSend>
			continue;
 8004614:	e092      	b.n	800473c <sd_task+0x22c>
		}

		//Chequeo existencia de usuario
		if(!process_user_key(user_key_retrieved, user_name, &message)){
 8004616:	f107 0213 	add.w	r2, r7, #19
 800461a:	f107 030c 	add.w	r3, r7, #12
 800461e:	69b9      	ldr	r1, [r7, #24]
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff fc3d 	bl	8003ea0 <process_user_key>
 8004626:	4603      	mov	r3, r0
 8004628:	f083 0301 	eor.w	r3, r3, #1
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d013      	beq.n	800465a <sd_task+0x14a>
			//Usuario no existe. Enviar mensaje al display
			xQueueSend(display_queue, &message, portMAX_DELAY);
 8004632:	4b43      	ldr	r3, [pc, #268]	@ (8004740 <sd_task+0x230>)
 8004634:	6818      	ldr	r0, [r3, #0]
 8004636:	f107 0113 	add.w	r1, r7, #19
 800463a:	2300      	movs	r3, #0
 800463c:	f04f 32ff 	mov.w	r2, #4294967295
 8004640:	f00a ffba 	bl	800f5b8 <xQueueGenericSend>
			vPortFree(user_name);
 8004644:	69b8      	ldr	r0, [r7, #24]
 8004646:	f00c ffbf 	bl	80115c8 <vPortFree>
			xSemaphoreGive(keypad_sd_sync);
 800464a:	4b41      	ldr	r3, [pc, #260]	@ (8004750 <sd_task+0x240>)
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	2300      	movs	r3, #0
 8004650:	2200      	movs	r2, #0
 8004652:	2100      	movs	r1, #0
 8004654:	f00a ffb0 	bl	800f5b8 <xQueueGenericSend>
			continue;
 8004658:	e070      	b.n	800473c <sd_task+0x22c>
		}

		//Indico que se encontro el usuario
		message = DISPLAY_USER_FOUND;
 800465a:	2304      	movs	r3, #4
 800465c:	74fb      	strb	r3, [r7, #19]
		xQueueSend(display_queue, &message, portMAX_DELAY);
 800465e:	4b38      	ldr	r3, [pc, #224]	@ (8004740 <sd_task+0x230>)
 8004660:	6818      	ldr	r0, [r3, #0]
 8004662:	f107 0113 	add.w	r1, r7, #19
 8004666:	2300      	movs	r3, #0
 8004668:	f04f 32ff 	mov.w	r2, #4294967295
 800466c:	f00a ffa4 	bl	800f5b8 <xQueueGenericSend>

		//Reservo memoria para armar el template path
		template_path = pvPortMalloc(TEMPLATE_STR_SIZE * sizeof(char));
 8004670:	2032      	movs	r0, #50	@ 0x32
 8004672:	f00c fedb 	bl	801142c <pvPortMalloc>
 8004676:	6178      	str	r0, [r7, #20]
		if(template_path == NULL){
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d115      	bne.n	80046aa <sd_task+0x19a>
			message = DISPLAY_ERROR_MEMORY;
 800467e:	2312      	movs	r3, #18
 8004680:	74fb      	strb	r3, [r7, #19]
			xQueueSend(display_queue, &message, portMAX_DELAY);
 8004682:	4b2f      	ldr	r3, [pc, #188]	@ (8004740 <sd_task+0x230>)
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	f107 0113 	add.w	r1, r7, #19
 800468a:	2300      	movs	r3, #0
 800468c:	f04f 32ff 	mov.w	r2, #4294967295
 8004690:	f00a ff92 	bl	800f5b8 <xQueueGenericSend>
			vPortFree(user_name);
 8004694:	69b8      	ldr	r0, [r7, #24]
 8004696:	f00c ff97 	bl	80115c8 <vPortFree>
			xSemaphoreGive(keypad_sd_sync);
 800469a:	4b2d      	ldr	r3, [pc, #180]	@ (8004750 <sd_task+0x240>)
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	2300      	movs	r3, #0
 80046a0:	2200      	movs	r2, #0
 80046a2:	2100      	movs	r1, #0
 80046a4:	f00a ff88 	bl	800f5b8 <xQueueGenericSend>
			continue;
 80046a8:	e048      	b.n	800473c <sd_task+0x22c>
		}

		//Verifico la existencia del template
		snprintf(template_path, TEMPLATE_STR_SIZE, "%s.bin", user_name);
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	4a29      	ldr	r2, [pc, #164]	@ (8004754 <sd_task+0x244>)
 80046ae:	2132      	movs	r1, #50	@ 0x32
 80046b0:	6978      	ldr	r0, [r7, #20]
 80046b2:	f00e fed1 	bl	8013458 <sniprintf>
		if(check_if_file_exists(template_path) != FR_OK){
 80046b6:	6978      	ldr	r0, [r7, #20]
 80046b8:	f7ff f916 	bl	80038e8 <check_if_file_exists>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d018      	beq.n	80046f4 <sd_task+0x1e4>
			message = DISPLAY_TEMPLATE_NOT_FOUND;
 80046c2:	230e      	movs	r3, #14
 80046c4:	74fb      	strb	r3, [r7, #19]
			xQueueSend(display_queue, &message, portMAX_DELAY);
 80046c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004740 <sd_task+0x230>)
 80046c8:	6818      	ldr	r0, [r3, #0]
 80046ca:	f107 0113 	add.w	r1, r7, #19
 80046ce:	2300      	movs	r3, #0
 80046d0:	f04f 32ff 	mov.w	r2, #4294967295
 80046d4:	f00a ff70 	bl	800f5b8 <xQueueGenericSend>
			vPortFree(user_name);
 80046d8:	69b8      	ldr	r0, [r7, #24]
 80046da:	f00c ff75 	bl	80115c8 <vPortFree>
			vPortFree(template_path);
 80046de:	6978      	ldr	r0, [r7, #20]
 80046e0:	f00c ff72 	bl	80115c8 <vPortFree>
			xSemaphoreGive(keypad_sd_sync);
 80046e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004750 <sd_task+0x240>)
 80046e6:	6818      	ldr	r0, [r3, #0]
 80046e8:	2300      	movs	r3, #0
 80046ea:	2200      	movs	r2, #0
 80046ec:	2100      	movs	r1, #0
 80046ee:	f00a ff63 	bl	800f5b8 <xQueueGenericSend>
			continue;
 80046f2:	e023      	b.n	800473c <sd_task+0x22c>
		}

		//Realizo reconocimiento de voz
		if(recognize_user_voice(template_path, user_name, &message)){
 80046f4:	f107 0313 	add.w	r3, r7, #19
 80046f8:	461a      	mov	r2, r3
 80046fa:	69b9      	ldr	r1, [r7, #24]
 80046fc:	6978      	ldr	r0, [r7, #20]
 80046fe:	f7ff fc35 	bl	8003f6c <recognize_user_voice>
			//Activo cerradura

		}

		//Libero memoria y envio mensaje el mensaje que corresponda al display
		vPortFree(user_name);
 8004702:	69b8      	ldr	r0, [r7, #24]
 8004704:	f00c ff60 	bl	80115c8 <vPortFree>
		vPortFree(template_path);
 8004708:	6978      	ldr	r0, [r7, #20]
 800470a:	f00c ff5d 	bl	80115c8 <vPortFree>

		xQueueSend(display_queue, &message, portMAX_DELAY);
 800470e:	4b0c      	ldr	r3, [pc, #48]	@ (8004740 <sd_task+0x230>)
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	f107 0113 	add.w	r1, r7, #19
 8004716:	2300      	movs	r3, #0
 8004718:	f04f 32ff 	mov.w	r2, #4294967295
 800471c:	f00a ff4c 	bl	800f5b8 <xQueueGenericSend>
		xSemaphoreTake(sd_display_sync, portMAX_DELAY);												//Bloqueo la tarea hasta que termine de mostrarse el mensaje de reconocimiento
 8004720:	4b0a      	ldr	r3, [pc, #40]	@ (800474c <sd_task+0x23c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f04f 31ff 	mov.w	r1, #4294967295
 8004728:	4618      	mov	r0, r3
 800472a:	f00b f9b9 	bl	800faa0 <xQueueSemaphoreTake>
		xSemaphoreGive(keypad_sd_sync);																//Doy el semaforo para que la tarea keypad pueda ejecutarse
 800472e:	4b08      	ldr	r3, [pc, #32]	@ (8004750 <sd_task+0x240>)
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	2300      	movs	r3, #0
 8004734:	2200      	movs	r2, #0
 8004736:	2100      	movs	r1, #0
 8004738:	f00a ff3e 	bl	800f5b8 <xQueueGenericSend>
		for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 800473c:	e702      	b.n	8004544 <sd_task+0x34>
 800473e:	bf00      	nop
 8004740:	200002b8 	.word	0x200002b8
 8004744:	200002b4 	.word	0x200002b4
 8004748:	08014a4c 	.word	0x08014a4c
 800474c:	200002c0 	.word	0x200002c0
 8004750:	200002bc 	.word	0x200002bc
 8004754:	08014a54 	.word	0x08014a54

08004758 <clear_buffer>:
#include "common_utils.h"
//Funciones utiles
void clear_buffer(char *buffer, size_t length) {
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
    if (buffer == NULL) {
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00f      	beq.n	8004788 <clear_buffer+0x30>
        return; // Verifica que el puntero no sea nulo
    }
    for (size_t i = 0; i < length; i++) {
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	e007      	b.n	800477e <clear_buffer+0x26>
        buffer[i] = '\0'; // Llena el buffer con caracteres nulos
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4413      	add	r3, r2
 8004774:	2200      	movs	r2, #0
 8004776:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < length; i++) {
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	3301      	adds	r3, #1
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d3f3      	bcc.n	800476e <clear_buffer+0x16>
 8004786:	e000      	b.n	800478a <clear_buffer+0x32>
        return; // Verifica que el puntero no sea nulo
 8004788:	bf00      	nop
    }
}
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <clear_char>:

void clear_char(char *buffer, char character){
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	70fb      	strb	r3, [r7, #3]
	char *ptr = buffer;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	60fb      	str	r3, [r7, #12]
	while(*ptr != character){
 80047a4:	e006      	b.n	80047b4 <clear_char+0x20>
		if(*ptr == 0){
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d008      	beq.n	80047c0 <clear_char+0x2c>
			break;
		}
		ptr++;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	3301      	adds	r3, #1
 80047b2:	60fb      	str	r3, [r7, #12]
	while(*ptr != character){
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	78fa      	ldrb	r2, [r7, #3]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d1f3      	bne.n	80047a6 <clear_char+0x12>
 80047be:	e000      	b.n	80047c2 <clear_char+0x2e>
			break;
 80047c0:	bf00      	nop
	}
	*ptr = 0;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	701a      	strb	r2, [r3, #0]
	return;
 80047c8:	bf00      	nop
}
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80047d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004814 <HAL_Init+0x40>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004814 <HAL_Init+0x40>)
 80047de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80047e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004814 <HAL_Init+0x40>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a0a      	ldr	r2, [pc, #40]	@ (8004814 <HAL_Init+0x40>)
 80047ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047f0:	4b08      	ldr	r3, [pc, #32]	@ (8004814 <HAL_Init+0x40>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a07      	ldr	r2, [pc, #28]	@ (8004814 <HAL_Init+0x40>)
 80047f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047fc:	2003      	movs	r0, #3
 80047fe:	f000 fe3e 	bl	800547e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004802:	200f      	movs	r0, #15
 8004804:	f7fd fd76 	bl	80022f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004808:	f7fd fb8c 	bl	8001f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40023c00 	.word	0x40023c00

08004818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800481c:	4b06      	ldr	r3, [pc, #24]	@ (8004838 <HAL_IncTick+0x20>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	4b06      	ldr	r3, [pc, #24]	@ (800483c <HAL_IncTick+0x24>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4413      	add	r3, r2
 8004828:	4a04      	ldr	r2, [pc, #16]	@ (800483c <HAL_IncTick+0x24>)
 800482a:	6013      	str	r3, [r2, #0]
}
 800482c:	bf00      	nop
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	20000018 	.word	0x20000018
 800483c:	20002914 	.word	0x20002914

08004840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  return uwTick;
 8004844:	4b03      	ldr	r3, [pc, #12]	@ (8004854 <HAL_GetTick+0x14>)
 8004846:	681b      	ldr	r3, [r3, #0]
}
 8004848:	4618      	mov	r0, r3
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	20002914 	.word	0x20002914

08004858 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004860:	2300      	movs	r3, #0
 8004862:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e033      	b.n	80048d6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fd fb80 	bl	8001f7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488e:	f003 0310 	and.w	r3, r3, #16
 8004892:	2b00      	cmp	r3, #0
 8004894:	d118      	bne.n	80048c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800489e:	f023 0302 	bic.w	r3, r3, #2
 80048a2:	f043 0202 	orr.w	r2, r3, #2
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fbb2 	bl	8005014 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ba:	f023 0303 	bic.w	r3, r3, #3
 80048be:	f043 0201 	orr.w	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80048c6:	e001      	b.n	80048cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b086      	sub	sp, #24
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	617b      	str	r3, [r7, #20]
 80048ea:	2300      	movs	r3, #0
 80048ec:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d049      	beq.n	80049a8 <HAL_ADC_IRQHandler+0xca>
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d046      	beq.n	80049a8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491e:	f003 0310 	and.w	r3, r3, #16
 8004922:	2b00      	cmp	r3, #0
 8004924:	d105      	bne.n	8004932 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d12b      	bne.n	8004998 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004944:	2b00      	cmp	r3, #0
 8004946:	d127      	bne.n	8004998 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004952:	2b00      	cmp	r3, #0
 8004954:	d006      	beq.n	8004964 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004960:	2b00      	cmp	r3, #0
 8004962:	d119      	bne.n	8004998 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0220 	bic.w	r2, r2, #32
 8004972:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004978:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004984:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d105      	bne.n	8004998 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004990:	f043 0201 	orr.w	r2, r3, #1
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7fd fa95 	bl	8001ec8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f06f 0212 	mvn.w	r2, #18
 80049a6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049b6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d057      	beq.n	8004a6e <HAL_ADC_IRQHandler+0x190>
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d054      	beq.n	8004a6e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c8:	f003 0310 	and.w	r3, r3, #16
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d105      	bne.n	80049dc <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d139      	bne.n	8004a5e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d006      	beq.n	8004a06 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d12b      	bne.n	8004a5e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d124      	bne.n	8004a5e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d11d      	bne.n	8004a5e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d119      	bne.n	8004a5e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a38:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d105      	bne.n	8004a5e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a56:	f043 0201 	orr.w	r2, r3, #1
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fc56 	bl	8005310 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f06f 020c 	mvn.w	r2, #12
 8004a6c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a7c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d017      	beq.n	8004ab4 <HAL_ADC_IRQHandler+0x1d6>
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d014      	beq.n	8004ab4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d10d      	bne.n	8004ab4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f97f 	bl	8004da8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f06f 0201 	mvn.w	r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f003 0320 	and.w	r3, r3, #32
 8004aba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ac2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d015      	beq.n	8004af6 <HAL_ADC_IRQHandler+0x218>
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d012      	beq.n	8004af6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad4:	f043 0202 	orr.w	r2, r3, #2
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f06f 0220 	mvn.w	r2, #32
 8004ae4:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f968 	bl	8004dbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0220 	mvn.w	r2, #32
 8004af4:	601a      	str	r2, [r3, #0]
  }
}
 8004af6:	bf00      	nop
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_ADC_Start_DMA+0x1e>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e0ce      	b.n	8004cbc <HAL_ADC_Start_DMA+0x1bc>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d018      	beq.n	8004b66 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0201 	orr.w	r2, r2, #1
 8004b42:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004b44:	4b5f      	ldr	r3, [pc, #380]	@ (8004cc4 <HAL_ADC_Start_DMA+0x1c4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a5f      	ldr	r2, [pc, #380]	@ (8004cc8 <HAL_ADC_Start_DMA+0x1c8>)
 8004b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4e:	0c9a      	lsrs	r2, r3, #18
 8004b50:	4613      	mov	r3, r2
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	4413      	add	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004b58:	e002      	b.n	8004b60 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f9      	bne.n	8004b5a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b74:	d107      	bne.n	8004b86 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b84:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	f040 8086 	bne.w	8004ca2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004b9e:	f023 0301 	bic.w	r3, r3, #1
 8004ba2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d007      	beq.n	8004bc8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bbc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004bc0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bd4:	d106      	bne.n	8004be4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bda:	f023 0206 	bic.w	r2, r3, #6
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	645a      	str	r2, [r3, #68]	@ 0x44
 8004be2:	e002      	b.n	8004bea <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004bf2:	4b36      	ldr	r3, [pc, #216]	@ (8004ccc <HAL_ADC_Start_DMA+0x1cc>)
 8004bf4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bfa:	4a35      	ldr	r2, [pc, #212]	@ (8004cd0 <HAL_ADC_Start_DMA+0x1d0>)
 8004bfc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c02:	4a34      	ldr	r2, [pc, #208]	@ (8004cd4 <HAL_ADC_Start_DMA+0x1d4>)
 8004c04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c0a:	4a33      	ldr	r2, [pc, #204]	@ (8004cd8 <HAL_ADC_Start_DMA+0x1d8>)
 8004c0c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004c16:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004c26:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c36:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	334c      	adds	r3, #76	@ 0x4c
 8004c42:	4619      	mov	r1, r3
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f000 fcfc 	bl	8005644 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f003 031f 	and.w	r3, r3, #31
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10f      	bne.n	8004c78 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d129      	bne.n	8004cba <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004c74:	609a      	str	r2, [r3, #8]
 8004c76:	e020      	b.n	8004cba <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a17      	ldr	r2, [pc, #92]	@ (8004cdc <HAL_ADC_Start_DMA+0x1dc>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d11b      	bne.n	8004cba <HAL_ADC_Start_DMA+0x1ba>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d114      	bne.n	8004cba <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689a      	ldr	r2, [r3, #8]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004c9e:	609a      	str	r2, [r3, #8]
 8004ca0:	e00b      	b.n	8004cba <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca6:	f043 0210 	orr.w	r2, r3, #16
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb2:	f043 0201 	orr.w	r2, r3, #1
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	20000004 	.word	0x20000004
 8004cc8:	431bde83 	.word	0x431bde83
 8004ccc:	40012300 	.word	0x40012300
 8004cd0:	0800520d 	.word	0x0800520d
 8004cd4:	080052c7 	.word	0x080052c7
 8004cd8:	080052e3 	.word	0x080052e3
 8004cdc:	40012000 	.word	0x40012000

08004ce0 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d101      	bne.n	8004cfa <HAL_ADC_Stop_DMA+0x1a>
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	e048      	b.n	8004d8c <HAL_ADC_Stop_DMA+0xac>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0201 	bic.w	r2, r2, #1
 8004d10:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d130      	bne.n	8004d82 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d2e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d10f      	bne.n	8004d5e <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fcd6 	bl	80056f4 <HAL_DMA_Abort>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d005      	beq.n	8004d5e <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8004d6c:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d72:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004d76:	f023 0301 	bic.w	r3, r3, #1
 8004d7a:	f043 0201 	orr.w	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d101      	bne.n	8004dec <HAL_ADC_ConfigChannel+0x1c>
 8004de8:	2302      	movs	r3, #2
 8004dea:	e105      	b.n	8004ff8 <HAL_ADC_ConfigChannel+0x228>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b09      	cmp	r3, #9
 8004dfa:	d925      	bls.n	8004e48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68d9      	ldr	r1, [r3, #12]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	4413      	add	r3, r2
 8004e10:	3b1e      	subs	r3, #30
 8004e12:	2207      	movs	r2, #7
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	43da      	mvns	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	400a      	ands	r2, r1
 8004e20:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68d9      	ldr	r1, [r3, #12]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	4618      	mov	r0, r3
 8004e34:	4603      	mov	r3, r0
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	4403      	add	r3, r0
 8004e3a:	3b1e      	subs	r3, #30
 8004e3c:	409a      	lsls	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	60da      	str	r2, [r3, #12]
 8004e46:	e022      	b.n	8004e8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6919      	ldr	r1, [r3, #16]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	461a      	mov	r2, r3
 8004e56:	4613      	mov	r3, r2
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	4413      	add	r3, r2
 8004e5c:	2207      	movs	r2, #7
 8004e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e62:	43da      	mvns	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	400a      	ands	r2, r1
 8004e6a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6919      	ldr	r1, [r3, #16]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	4603      	mov	r3, r0
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	4403      	add	r3, r0
 8004e84:	409a      	lsls	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2b06      	cmp	r3, #6
 8004e94:	d824      	bhi.n	8004ee0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3b05      	subs	r3, #5
 8004ea8:	221f      	movs	r2, #31
 8004eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004eae:	43da      	mvns	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	400a      	ands	r2, r1
 8004eb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	3b05      	subs	r3, #5
 8004ed2:	fa00 f203 	lsl.w	r2, r0, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	635a      	str	r2, [r3, #52]	@ 0x34
 8004ede:	e04c      	b.n	8004f7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b0c      	cmp	r3, #12
 8004ee6:	d824      	bhi.n	8004f32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	3b23      	subs	r3, #35	@ 0x23
 8004efa:	221f      	movs	r2, #31
 8004efc:	fa02 f303 	lsl.w	r3, r2, r3
 8004f00:	43da      	mvns	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	400a      	ands	r2, r1
 8004f08:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	4618      	mov	r0, r3
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	3b23      	subs	r3, #35	@ 0x23
 8004f24:	fa00 f203 	lsl.w	r2, r0, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f30:	e023      	b.n	8004f7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	3b41      	subs	r3, #65	@ 0x41
 8004f44:	221f      	movs	r2, #31
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	43da      	mvns	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	400a      	ands	r2, r1
 8004f52:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	4618      	mov	r0, r3
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	4613      	mov	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	3b41      	subs	r3, #65	@ 0x41
 8004f6e:	fa00 f203 	lsl.w	r2, r0, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f7a:	4b22      	ldr	r3, [pc, #136]	@ (8005004 <HAL_ADC_ConfigChannel+0x234>)
 8004f7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a21      	ldr	r2, [pc, #132]	@ (8005008 <HAL_ADC_ConfigChannel+0x238>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d109      	bne.n	8004f9c <HAL_ADC_ConfigChannel+0x1cc>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b12      	cmp	r3, #18
 8004f8e:	d105      	bne.n	8004f9c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a19      	ldr	r2, [pc, #100]	@ (8005008 <HAL_ADC_ConfigChannel+0x238>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d123      	bne.n	8004fee <HAL_ADC_ConfigChannel+0x21e>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b10      	cmp	r3, #16
 8004fac:	d003      	beq.n	8004fb6 <HAL_ADC_ConfigChannel+0x1e6>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b11      	cmp	r3, #17
 8004fb4:	d11b      	bne.n	8004fee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b10      	cmp	r3, #16
 8004fc8:	d111      	bne.n	8004fee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004fca:	4b10      	ldr	r3, [pc, #64]	@ (800500c <HAL_ADC_ConfigChannel+0x23c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a10      	ldr	r2, [pc, #64]	@ (8005010 <HAL_ADC_ConfigChannel+0x240>)
 8004fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd4:	0c9a      	lsrs	r2, r3, #18
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004fe0:	e002      	b.n	8004fe8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1f9      	bne.n	8004fe2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	40012300 	.word	0x40012300
 8005008:	40012000 	.word	0x40012000
 800500c:	20000004 	.word	0x20000004
 8005010:	431bde83 	.word	0x431bde83

08005014 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800501c:	4b79      	ldr	r3, [pc, #484]	@ (8005204 <ADC_Init+0x1f0>)
 800501e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	431a      	orrs	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005048:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6859      	ldr	r1, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	021a      	lsls	r2, r3, #8
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800506c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6859      	ldr	r1, [r3, #4]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	430a      	orrs	r2, r1
 800507e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689a      	ldr	r2, [r3, #8]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800508e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6899      	ldr	r1, [r3, #8]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a6:	4a58      	ldr	r2, [pc, #352]	@ (8005208 <ADC_Init+0x1f4>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d022      	beq.n	80050f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80050ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6899      	ldr	r1, [r3, #8]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80050dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6899      	ldr	r1, [r3, #8]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	609a      	str	r2, [r3, #8]
 80050f0:	e00f      	b.n	8005112 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005100:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005110:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0202 	bic.w	r2, r2, #2
 8005120:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6899      	ldr	r1, [r3, #8]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	7e1b      	ldrb	r3, [r3, #24]
 800512c:	005a      	lsls	r2, r3, #1
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 3020 	ldrb.w	r3, [r3, #32]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01b      	beq.n	8005178 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800514e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800515e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6859      	ldr	r1, [r3, #4]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516a:	3b01      	subs	r3, #1
 800516c:	035a      	lsls	r2, r3, #13
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	605a      	str	r2, [r3, #4]
 8005176:	e007      	b.n	8005188 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005186:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005196:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	3b01      	subs	r3, #1
 80051a4:	051a      	lsls	r2, r3, #20
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80051bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6899      	ldr	r1, [r3, #8]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80051ca:	025a      	lsls	r2, r3, #9
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6899      	ldr	r1, [r3, #8]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	029a      	lsls	r2, r3, #10
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	609a      	str	r2, [r3, #8]
}
 80051f8:	bf00      	nop
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	40012300 	.word	0x40012300
 8005208:	0f000001 	.word	0x0f000001

0800520c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005218:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005222:	2b00      	cmp	r3, #0
 8005224:	d13c      	bne.n	80052a0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d12b      	bne.n	8005298 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005244:	2b00      	cmp	r3, #0
 8005246:	d127      	bne.n	8005298 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005252:	2b00      	cmp	r3, #0
 8005254:	d006      	beq.n	8005264 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005260:	2b00      	cmp	r3, #0
 8005262:	d119      	bne.n	8005298 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0220 	bic.w	r2, r2, #32
 8005272:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005278:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005284:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d105      	bne.n	8005298 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005290:	f043 0201 	orr.w	r2, r3, #1
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f7fc fe15 	bl	8001ec8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800529e:	e00e      	b.n	80052be <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a4:	f003 0310 	and.w	r3, r3, #16
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f7ff fd85 	bl	8004dbc <HAL_ADC_ErrorCallback>
}
 80052b2:	e004      	b.n	80052be <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	4798      	blx	r3
}
 80052be:	bf00      	nop
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f7ff fd5d 	bl	8004d94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80052da:	bf00      	nop
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b084      	sub	sp, #16
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ee:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2240      	movs	r2, #64	@ 0x40
 80052f4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052fa:	f043 0204 	orr.w	r2, r3, #4
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f7ff fd5a 	bl	8004dbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005308:	bf00      	nop
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f003 0307 	and.w	r3, r3, #7
 8005332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005334:	4b0c      	ldr	r3, [pc, #48]	@ (8005368 <__NVIC_SetPriorityGrouping+0x44>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005340:	4013      	ands	r3, r2
 8005342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800534c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005356:	4a04      	ldr	r2, [pc, #16]	@ (8005368 <__NVIC_SetPriorityGrouping+0x44>)
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	60d3      	str	r3, [r2, #12]
}
 800535c:	bf00      	nop
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	e000ed00 	.word	0xe000ed00

0800536c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005370:	4b04      	ldr	r3, [pc, #16]	@ (8005384 <__NVIC_GetPriorityGrouping+0x18>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	0a1b      	lsrs	r3, r3, #8
 8005376:	f003 0307 	and.w	r3, r3, #7
}
 800537a:	4618      	mov	r0, r3
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	e000ed00 	.word	0xe000ed00

08005388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	4603      	mov	r3, r0
 8005390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005396:	2b00      	cmp	r3, #0
 8005398:	db0b      	blt.n	80053b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800539a:	79fb      	ldrb	r3, [r7, #7]
 800539c:	f003 021f 	and.w	r2, r3, #31
 80053a0:	4907      	ldr	r1, [pc, #28]	@ (80053c0 <__NVIC_EnableIRQ+0x38>)
 80053a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053a6:	095b      	lsrs	r3, r3, #5
 80053a8:	2001      	movs	r0, #1
 80053aa:	fa00 f202 	lsl.w	r2, r0, r2
 80053ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	e000e100 	.word	0xe000e100

080053c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	4603      	mov	r3, r0
 80053cc:	6039      	str	r1, [r7, #0]
 80053ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	db0a      	blt.n	80053ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	490c      	ldr	r1, [pc, #48]	@ (8005410 <__NVIC_SetPriority+0x4c>)
 80053de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e2:	0112      	lsls	r2, r2, #4
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	440b      	add	r3, r1
 80053e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053ec:	e00a      	b.n	8005404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	4908      	ldr	r1, [pc, #32]	@ (8005414 <__NVIC_SetPriority+0x50>)
 80053f4:	79fb      	ldrb	r3, [r7, #7]
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	3b04      	subs	r3, #4
 80053fc:	0112      	lsls	r2, r2, #4
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	440b      	add	r3, r1
 8005402:	761a      	strb	r2, [r3, #24]
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	e000e100 	.word	0xe000e100
 8005414:	e000ed00 	.word	0xe000ed00

08005418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005418:	b480      	push	{r7}
 800541a:	b089      	sub	sp, #36	@ 0x24
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	f1c3 0307 	rsb	r3, r3, #7
 8005432:	2b04      	cmp	r3, #4
 8005434:	bf28      	it	cs
 8005436:	2304      	movcs	r3, #4
 8005438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	3304      	adds	r3, #4
 800543e:	2b06      	cmp	r3, #6
 8005440:	d902      	bls.n	8005448 <NVIC_EncodePriority+0x30>
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	3b03      	subs	r3, #3
 8005446:	e000      	b.n	800544a <NVIC_EncodePriority+0x32>
 8005448:	2300      	movs	r3, #0
 800544a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800544c:	f04f 32ff 	mov.w	r2, #4294967295
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	fa02 f303 	lsl.w	r3, r2, r3
 8005456:	43da      	mvns	r2, r3
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	401a      	ands	r2, r3
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005460:	f04f 31ff 	mov.w	r1, #4294967295
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	fa01 f303 	lsl.w	r3, r1, r3
 800546a:	43d9      	mvns	r1, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005470:	4313      	orrs	r3, r2
         );
}
 8005472:	4618      	mov	r0, r3
 8005474:	3724      	adds	r7, #36	@ 0x24
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b082      	sub	sp, #8
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7ff ff4c 	bl	8005324 <__NVIC_SetPriorityGrouping>
}
 800548c:	bf00      	nop
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	4603      	mov	r3, r0
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80054a6:	f7ff ff61 	bl	800536c <__NVIC_GetPriorityGrouping>
 80054aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	68b9      	ldr	r1, [r7, #8]
 80054b0:	6978      	ldr	r0, [r7, #20]
 80054b2:	f7ff ffb1 	bl	8005418 <NVIC_EncodePriority>
 80054b6:	4602      	mov	r2, r0
 80054b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054bc:	4611      	mov	r1, r2
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff ff80 	bl	80053c4 <__NVIC_SetPriority>
}
 80054c4:	bf00      	nop
 80054c6:	3718      	adds	r7, #24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	4603      	mov	r3, r0
 80054d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff ff54 	bl	8005388 <__NVIC_EnableIRQ>
}
 80054e0:	bf00      	nop
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80054f4:	f7ff f9a4 	bl	8004840 <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e099      	b.n	8005638 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0201 	bic.w	r2, r2, #1
 8005522:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005524:	e00f      	b.n	8005546 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005526:	f7ff f98b 	bl	8004840 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b05      	cmp	r3, #5
 8005532:	d908      	bls.n	8005546 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2220      	movs	r2, #32
 8005538:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2203      	movs	r2, #3
 800553e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e078      	b.n	8005638 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1e8      	bne.n	8005526 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	4b38      	ldr	r3, [pc, #224]	@ (8005640 <HAL_DMA_Init+0x158>)
 8005560:	4013      	ands	r3, r2
 8005562:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005572:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800557e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800558a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559c:	2b04      	cmp	r3, #4
 800559e:	d107      	bne.n	80055b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a8:	4313      	orrs	r3, r2
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f023 0307 	bic.w	r3, r3, #7
 80055c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d117      	bne.n	800560a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00e      	beq.n	800560a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 fadf 	bl	8005bb0 <DMA_CheckFifoParam>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d008      	beq.n	800560a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2240      	movs	r2, #64	@ 0x40
 80055fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005606:	2301      	movs	r3, #1
 8005608:	e016      	b.n	8005638 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fa96 	bl	8005b44 <DMA_CalcBaseAndBitshift>
 8005618:	4603      	mov	r3, r0
 800561a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005620:	223f      	movs	r2, #63	@ 0x3f
 8005622:	409a      	lsls	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	f010803f 	.word	0xf010803f

08005644 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800565a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005662:	2b01      	cmp	r3, #1
 8005664:	d101      	bne.n	800566a <HAL_DMA_Start_IT+0x26>
 8005666:	2302      	movs	r3, #2
 8005668:	e040      	b.n	80056ec <HAL_DMA_Start_IT+0xa8>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b01      	cmp	r3, #1
 800567c:	d12f      	bne.n	80056de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2202      	movs	r2, #2
 8005682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	68b9      	ldr	r1, [r7, #8]
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 fa28 	bl	8005ae8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800569c:	223f      	movs	r2, #63	@ 0x3f
 800569e:	409a      	lsls	r2, r3
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0216 	orr.w	r2, r2, #22
 80056b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d007      	beq.n	80056cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f042 0208 	orr.w	r2, r2, #8
 80056ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f042 0201 	orr.w	r2, r2, #1
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	e005      	b.n	80056ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80056e6:	2302      	movs	r3, #2
 80056e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80056ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005700:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005702:	f7ff f89d 	bl	8004840 <HAL_GetTick>
 8005706:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d008      	beq.n	8005726 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2280      	movs	r2, #128	@ 0x80
 8005718:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e052      	b.n	80057cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0216 	bic.w	r2, r2, #22
 8005734:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695a      	ldr	r2, [r3, #20]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005744:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574a:	2b00      	cmp	r3, #0
 800574c:	d103      	bne.n	8005756 <HAL_DMA_Abort+0x62>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005752:	2b00      	cmp	r3, #0
 8005754:	d007      	beq.n	8005766 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0208 	bic.w	r2, r2, #8
 8005764:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0201 	bic.w	r2, r2, #1
 8005774:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005776:	e013      	b.n	80057a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005778:	f7ff f862 	bl	8004840 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b05      	cmp	r3, #5
 8005784:	d90c      	bls.n	80057a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2220      	movs	r2, #32
 800578a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2203      	movs	r2, #3
 8005790:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e015      	b.n	80057cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1e4      	bne.n	8005778 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057b2:	223f      	movs	r2, #63	@ 0x3f
 80057b4:	409a      	lsls	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80057e0:	4b8e      	ldr	r3, [pc, #568]	@ (8005a1c <HAL_DMA_IRQHandler+0x248>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a8e      	ldr	r2, [pc, #568]	@ (8005a20 <HAL_DMA_IRQHandler+0x24c>)
 80057e6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ea:	0a9b      	lsrs	r3, r3, #10
 80057ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057fe:	2208      	movs	r2, #8
 8005800:	409a      	lsls	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4013      	ands	r3, r2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d01a      	beq.n	8005840 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b00      	cmp	r3, #0
 8005816:	d013      	beq.n	8005840 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0204 	bic.w	r2, r2, #4
 8005826:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800582c:	2208      	movs	r2, #8
 800582e:	409a      	lsls	r2, r3
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005838:	f043 0201 	orr.w	r2, r3, #1
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005844:	2201      	movs	r2, #1
 8005846:	409a      	lsls	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4013      	ands	r3, r2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d012      	beq.n	8005876 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00b      	beq.n	8005876 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005862:	2201      	movs	r2, #1
 8005864:	409a      	lsls	r2, r3
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800586e:	f043 0202 	orr.w	r2, r3, #2
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800587a:	2204      	movs	r2, #4
 800587c:	409a      	lsls	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4013      	ands	r3, r2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d012      	beq.n	80058ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00b      	beq.n	80058ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005898:	2204      	movs	r2, #4
 800589a:	409a      	lsls	r2, r3
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a4:	f043 0204 	orr.w	r2, r3, #4
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b0:	2210      	movs	r2, #16
 80058b2:	409a      	lsls	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4013      	ands	r3, r2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d043      	beq.n	8005944 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0308 	and.w	r3, r3, #8
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d03c      	beq.n	8005944 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ce:	2210      	movs	r2, #16
 80058d0:	409a      	lsls	r2, r3
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d018      	beq.n	8005916 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d108      	bne.n	8005904 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d024      	beq.n	8005944 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	4798      	blx	r3
 8005902:	e01f      	b.n	8005944 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005908:	2b00      	cmp	r3, #0
 800590a:	d01b      	beq.n	8005944 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	4798      	blx	r3
 8005914:	e016      	b.n	8005944 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005920:	2b00      	cmp	r3, #0
 8005922:	d107      	bne.n	8005934 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0208 	bic.w	r2, r2, #8
 8005932:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005948:	2220      	movs	r2, #32
 800594a:	409a      	lsls	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4013      	ands	r3, r2
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 808f 	beq.w	8005a74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0310 	and.w	r3, r3, #16
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 8087 	beq.w	8005a74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800596a:	2220      	movs	r2, #32
 800596c:	409a      	lsls	r2, r3
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b05      	cmp	r3, #5
 800597c:	d136      	bne.n	80059ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 0216 	bic.w	r2, r2, #22
 800598c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	695a      	ldr	r2, [r3, #20]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800599c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d103      	bne.n	80059ae <HAL_DMA_IRQHandler+0x1da>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d007      	beq.n	80059be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0208 	bic.w	r2, r2, #8
 80059bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059c2:	223f      	movs	r2, #63	@ 0x3f
 80059c4:	409a      	lsls	r2, r3
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d07e      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	4798      	blx	r3
        }
        return;
 80059ea:	e079      	b.n	8005ae0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d01d      	beq.n	8005a36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10d      	bne.n	8005a24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d031      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	4798      	blx	r3
 8005a18:	e02c      	b.n	8005a74 <HAL_DMA_IRQHandler+0x2a0>
 8005a1a:	bf00      	nop
 8005a1c:	20000004 	.word	0x20000004
 8005a20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d023      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	4798      	blx	r3
 8005a34:	e01e      	b.n	8005a74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10f      	bne.n	8005a64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 0210 	bic.w	r2, r2, #16
 8005a52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d032      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d022      	beq.n	8005ace <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2205      	movs	r2, #5
 8005a8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0201 	bic.w	r2, r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	60bb      	str	r3, [r7, #8]
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d307      	bcc.n	8005abc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1f2      	bne.n	8005aa0 <HAL_DMA_IRQHandler+0x2cc>
 8005aba:	e000      	b.n	8005abe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005abc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d005      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	4798      	blx	r3
 8005ade:	e000      	b.n	8005ae2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005ae0:	bf00      	nop
    }
  }
}
 8005ae2:	3718      	adds	r7, #24
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005b04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	2b40      	cmp	r3, #64	@ 0x40
 8005b14:	d108      	bne.n	8005b28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005b26:	e007      	b.n	8005b38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	60da      	str	r2, [r3, #12]
}
 8005b38:	bf00      	nop
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	3b10      	subs	r3, #16
 8005b54:	4a14      	ldr	r2, [pc, #80]	@ (8005ba8 <DMA_CalcBaseAndBitshift+0x64>)
 8005b56:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5a:	091b      	lsrs	r3, r3, #4
 8005b5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b5e:	4a13      	ldr	r2, [pc, #76]	@ (8005bac <DMA_CalcBaseAndBitshift+0x68>)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4413      	add	r3, r2
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b03      	cmp	r3, #3
 8005b70:	d909      	bls.n	8005b86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005b7a:	f023 0303 	bic.w	r3, r3, #3
 8005b7e:	1d1a      	adds	r2, r3, #4
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	659a      	str	r2, [r3, #88]	@ 0x58
 8005b84:	e007      	b.n	8005b96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005b8e:	f023 0303 	bic.w	r3, r3, #3
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	aaaaaaab 	.word	0xaaaaaaab
 8005bac:	08018684 	.word	0x08018684

08005bb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d11f      	bne.n	8005c0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	d856      	bhi.n	8005c7e <DMA_CheckFifoParam+0xce>
 8005bd0:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd8 <DMA_CheckFifoParam+0x28>)
 8005bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd6:	bf00      	nop
 8005bd8:	08005be9 	.word	0x08005be9
 8005bdc:	08005bfb 	.word	0x08005bfb
 8005be0:	08005be9 	.word	0x08005be9
 8005be4:	08005c7f 	.word	0x08005c7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d046      	beq.n	8005c82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bf8:	e043      	b.n	8005c82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005c02:	d140      	bne.n	8005c86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c08:	e03d      	b.n	8005c86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c12:	d121      	bne.n	8005c58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2b03      	cmp	r3, #3
 8005c18:	d837      	bhi.n	8005c8a <DMA_CheckFifoParam+0xda>
 8005c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c20 <DMA_CheckFifoParam+0x70>)
 8005c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c20:	08005c31 	.word	0x08005c31
 8005c24:	08005c37 	.word	0x08005c37
 8005c28:	08005c31 	.word	0x08005c31
 8005c2c:	08005c49 	.word	0x08005c49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	73fb      	strb	r3, [r7, #15]
      break;
 8005c34:	e030      	b.n	8005c98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d025      	beq.n	8005c8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c46:	e022      	b.n	8005c8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005c50:	d11f      	bne.n	8005c92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c56:	e01c      	b.n	8005c92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d903      	bls.n	8005c66 <DMA_CheckFifoParam+0xb6>
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d003      	beq.n	8005c6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005c64:	e018      	b.n	8005c98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	73fb      	strb	r3, [r7, #15]
      break;
 8005c6a:	e015      	b.n	8005c98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00e      	beq.n	8005c96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c7c:	e00b      	b.n	8005c96 <DMA_CheckFifoParam+0xe6>
      break;
 8005c7e:	bf00      	nop
 8005c80:	e00a      	b.n	8005c98 <DMA_CheckFifoParam+0xe8>
      break;
 8005c82:	bf00      	nop
 8005c84:	e008      	b.n	8005c98 <DMA_CheckFifoParam+0xe8>
      break;
 8005c86:	bf00      	nop
 8005c88:	e006      	b.n	8005c98 <DMA_CheckFifoParam+0xe8>
      break;
 8005c8a:	bf00      	nop
 8005c8c:	e004      	b.n	8005c98 <DMA_CheckFifoParam+0xe8>
      break;
 8005c8e:	bf00      	nop
 8005c90:	e002      	b.n	8005c98 <DMA_CheckFifoParam+0xe8>
      break;   
 8005c92:	bf00      	nop
 8005c94:	e000      	b.n	8005c98 <DMA_CheckFifoParam+0xe8>
      break;
 8005c96:	bf00      	nop
    }
  } 
  
  return status; 
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop

08005ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b089      	sub	sp, #36	@ 0x24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61fb      	str	r3, [r7, #28]
 8005cc2:	e159      	b.n	8005f78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ccc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	f040 8148 	bne.w	8005f72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f003 0303 	and.w	r3, r3, #3
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d005      	beq.n	8005cfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d130      	bne.n	8005d5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	2203      	movs	r2, #3
 8005d06:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0a:	43db      	mvns	r3, r3
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d30:	2201      	movs	r2, #1
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	fa02 f303 	lsl.w	r3, r2, r3
 8005d38:	43db      	mvns	r3, r3
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	091b      	lsrs	r3, r3, #4
 8005d46:	f003 0201 	and.w	r2, r3, #1
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f003 0303 	and.w	r3, r3, #3
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d017      	beq.n	8005d98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	2203      	movs	r2, #3
 8005d74:	fa02 f303 	lsl.w	r3, r2, r3
 8005d78:	43db      	mvns	r3, r3
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f003 0303 	and.w	r3, r3, #3
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d123      	bne.n	8005dec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	08da      	lsrs	r2, r3, #3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	3208      	adds	r2, #8
 8005dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	220f      	movs	r2, #15
 8005dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc0:	43db      	mvns	r3, r3
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	691a      	ldr	r2, [r3, #16]
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	f003 0307 	and.w	r3, r3, #7
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	08da      	lsrs	r2, r3, #3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	3208      	adds	r2, #8
 8005de6:	69b9      	ldr	r1, [r7, #24]
 8005de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	005b      	lsls	r3, r3, #1
 8005df6:	2203      	movs	r2, #3
 8005df8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfc:	43db      	mvns	r3, r3
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	4013      	ands	r3, r2
 8005e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f003 0203 	and.w	r2, r3, #3
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	fa02 f303 	lsl.w	r3, r2, r3
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 80a2 	beq.w	8005f72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	4b57      	ldr	r3, [pc, #348]	@ (8005f90 <HAL_GPIO_Init+0x2e8>)
 8005e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e36:	4a56      	ldr	r2, [pc, #344]	@ (8005f90 <HAL_GPIO_Init+0x2e8>)
 8005e38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005e3e:	4b54      	ldr	r3, [pc, #336]	@ (8005f90 <HAL_GPIO_Init+0x2e8>)
 8005e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e4a:	4a52      	ldr	r2, [pc, #328]	@ (8005f94 <HAL_GPIO_Init+0x2ec>)
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	089b      	lsrs	r3, r3, #2
 8005e50:	3302      	adds	r3, #2
 8005e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	f003 0303 	and.w	r3, r3, #3
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	220f      	movs	r2, #15
 8005e62:	fa02 f303 	lsl.w	r3, r2, r3
 8005e66:	43db      	mvns	r3, r3
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a49      	ldr	r2, [pc, #292]	@ (8005f98 <HAL_GPIO_Init+0x2f0>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d019      	beq.n	8005eaa <HAL_GPIO_Init+0x202>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a48      	ldr	r2, [pc, #288]	@ (8005f9c <HAL_GPIO_Init+0x2f4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d013      	beq.n	8005ea6 <HAL_GPIO_Init+0x1fe>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a47      	ldr	r2, [pc, #284]	@ (8005fa0 <HAL_GPIO_Init+0x2f8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d00d      	beq.n	8005ea2 <HAL_GPIO_Init+0x1fa>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a46      	ldr	r2, [pc, #280]	@ (8005fa4 <HAL_GPIO_Init+0x2fc>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d007      	beq.n	8005e9e <HAL_GPIO_Init+0x1f6>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a45      	ldr	r2, [pc, #276]	@ (8005fa8 <HAL_GPIO_Init+0x300>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d101      	bne.n	8005e9a <HAL_GPIO_Init+0x1f2>
 8005e96:	2304      	movs	r3, #4
 8005e98:	e008      	b.n	8005eac <HAL_GPIO_Init+0x204>
 8005e9a:	2307      	movs	r3, #7
 8005e9c:	e006      	b.n	8005eac <HAL_GPIO_Init+0x204>
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e004      	b.n	8005eac <HAL_GPIO_Init+0x204>
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	e002      	b.n	8005eac <HAL_GPIO_Init+0x204>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e000      	b.n	8005eac <HAL_GPIO_Init+0x204>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	69fa      	ldr	r2, [r7, #28]
 8005eae:	f002 0203 	and.w	r2, r2, #3
 8005eb2:	0092      	lsls	r2, r2, #2
 8005eb4:	4093      	lsls	r3, r2
 8005eb6:	69ba      	ldr	r2, [r7, #24]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ebc:	4935      	ldr	r1, [pc, #212]	@ (8005f94 <HAL_GPIO_Init+0x2ec>)
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	089b      	lsrs	r3, r3, #2
 8005ec2:	3302      	adds	r3, #2
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005eca:	4b38      	ldr	r3, [pc, #224]	@ (8005fac <HAL_GPIO_Init+0x304>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	43db      	mvns	r3, r3
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005eee:	4a2f      	ldr	r2, [pc, #188]	@ (8005fac <HAL_GPIO_Init+0x304>)
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ef4:	4b2d      	ldr	r3, [pc, #180]	@ (8005fac <HAL_GPIO_Init+0x304>)
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	43db      	mvns	r3, r3
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	4013      	ands	r3, r2
 8005f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f18:	4a24      	ldr	r2, [pc, #144]	@ (8005fac <HAL_GPIO_Init+0x304>)
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005f1e:	4b23      	ldr	r3, [pc, #140]	@ (8005fac <HAL_GPIO_Init+0x304>)
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	43db      	mvns	r3, r3
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005f3a:	69ba      	ldr	r2, [r7, #24]
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f42:	4a1a      	ldr	r2, [pc, #104]	@ (8005fac <HAL_GPIO_Init+0x304>)
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f48:	4b18      	ldr	r3, [pc, #96]	@ (8005fac <HAL_GPIO_Init+0x304>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	43db      	mvns	r3, r3
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	4013      	ands	r3, r2
 8005f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d003      	beq.n	8005f6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f6c:	4a0f      	ldr	r2, [pc, #60]	@ (8005fac <HAL_GPIO_Init+0x304>)
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	3301      	adds	r3, #1
 8005f76:	61fb      	str	r3, [r7, #28]
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	2b0f      	cmp	r3, #15
 8005f7c:	f67f aea2 	bls.w	8005cc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f80:	bf00      	nop
 8005f82:	bf00      	nop
 8005f84:	3724      	adds	r7, #36	@ 0x24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	40023800 	.word	0x40023800
 8005f94:	40013800 	.word	0x40013800
 8005f98:	40020000 	.word	0x40020000
 8005f9c:	40020400 	.word	0x40020400
 8005fa0:	40020800 	.word	0x40020800
 8005fa4:	40020c00 	.word	0x40020c00
 8005fa8:	40021000 	.word	0x40021000
 8005fac:	40013c00 	.word	0x40013c00

08005fb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	691a      	ldr	r2, [r3, #16]
 8005fc0:	887b      	ldrh	r3, [r7, #2]
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	73fb      	strb	r3, [r7, #15]
 8005fcc:	e001      	b.n	8005fd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	807b      	strh	r3, [r7, #2]
 8005fec:	4613      	mov	r3, r2
 8005fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ff0:	787b      	ldrb	r3, [r7, #1]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ff6:	887a      	ldrh	r2, [r7, #2]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ffc:	e003      	b.n	8006006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ffe:	887b      	ldrh	r3, [r7, #2]
 8006000:	041a      	lsls	r2, r3, #16
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	619a      	str	r2, [r3, #24]
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
	...

08006014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e12b      	b.n	800627e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d106      	bne.n	8006040 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7fc f81c 	bl	8002078 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2224      	movs	r2, #36	@ 0x24
 8006044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 0201 	bic.w	r2, r2, #1
 8006056:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006066:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006076:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006078:	f001 f8ea 	bl	8007250 <HAL_RCC_GetPCLK1Freq>
 800607c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	4a81      	ldr	r2, [pc, #516]	@ (8006288 <HAL_I2C_Init+0x274>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d807      	bhi.n	8006098 <HAL_I2C_Init+0x84>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4a80      	ldr	r2, [pc, #512]	@ (800628c <HAL_I2C_Init+0x278>)
 800608c:	4293      	cmp	r3, r2
 800608e:	bf94      	ite	ls
 8006090:	2301      	movls	r3, #1
 8006092:	2300      	movhi	r3, #0
 8006094:	b2db      	uxtb	r3, r3
 8006096:	e006      	b.n	80060a6 <HAL_I2C_Init+0x92>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4a7d      	ldr	r2, [pc, #500]	@ (8006290 <HAL_I2C_Init+0x27c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	bf94      	ite	ls
 80060a0:	2301      	movls	r3, #1
 80060a2:	2300      	movhi	r3, #0
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e0e7      	b.n	800627e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4a78      	ldr	r2, [pc, #480]	@ (8006294 <HAL_I2C_Init+0x280>)
 80060b2:	fba2 2303 	umull	r2, r3, r2, r3
 80060b6:	0c9b      	lsrs	r3, r3, #18
 80060b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	4a6a      	ldr	r2, [pc, #424]	@ (8006288 <HAL_I2C_Init+0x274>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d802      	bhi.n	80060e8 <HAL_I2C_Init+0xd4>
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	3301      	adds	r3, #1
 80060e6:	e009      	b.n	80060fc <HAL_I2C_Init+0xe8>
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80060ee:	fb02 f303 	mul.w	r3, r2, r3
 80060f2:	4a69      	ldr	r2, [pc, #420]	@ (8006298 <HAL_I2C_Init+0x284>)
 80060f4:	fba2 2303 	umull	r2, r3, r2, r3
 80060f8:	099b      	lsrs	r3, r3, #6
 80060fa:	3301      	adds	r3, #1
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	6812      	ldr	r2, [r2, #0]
 8006100:	430b      	orrs	r3, r1
 8006102:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800610e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	495c      	ldr	r1, [pc, #368]	@ (8006288 <HAL_I2C_Init+0x274>)
 8006118:	428b      	cmp	r3, r1
 800611a:	d819      	bhi.n	8006150 <HAL_I2C_Init+0x13c>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	1e59      	subs	r1, r3, #1
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	fbb1 f3f3 	udiv	r3, r1, r3
 800612a:	1c59      	adds	r1, r3, #1
 800612c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006130:	400b      	ands	r3, r1
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00a      	beq.n	800614c <HAL_I2C_Init+0x138>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	1e59      	subs	r1, r3, #1
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	fbb1 f3f3 	udiv	r3, r1, r3
 8006144:	3301      	adds	r3, #1
 8006146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800614a:	e051      	b.n	80061f0 <HAL_I2C_Init+0x1dc>
 800614c:	2304      	movs	r3, #4
 800614e:	e04f      	b.n	80061f0 <HAL_I2C_Init+0x1dc>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d111      	bne.n	800617c <HAL_I2C_Init+0x168>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	1e58      	subs	r0, r3, #1
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6859      	ldr	r1, [r3, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	440b      	add	r3, r1
 8006166:	fbb0 f3f3 	udiv	r3, r0, r3
 800616a:	3301      	adds	r3, #1
 800616c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006170:	2b00      	cmp	r3, #0
 8006172:	bf0c      	ite	eq
 8006174:	2301      	moveq	r3, #1
 8006176:	2300      	movne	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	e012      	b.n	80061a2 <HAL_I2C_Init+0x18e>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	1e58      	subs	r0, r3, #1
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6859      	ldr	r1, [r3, #4]
 8006184:	460b      	mov	r3, r1
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	440b      	add	r3, r1
 800618a:	0099      	lsls	r1, r3, #2
 800618c:	440b      	add	r3, r1
 800618e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006192:	3301      	adds	r3, #1
 8006194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006198:	2b00      	cmp	r3, #0
 800619a:	bf0c      	ite	eq
 800619c:	2301      	moveq	r3, #1
 800619e:	2300      	movne	r3, #0
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <HAL_I2C_Init+0x196>
 80061a6:	2301      	movs	r3, #1
 80061a8:	e022      	b.n	80061f0 <HAL_I2C_Init+0x1dc>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10e      	bne.n	80061d0 <HAL_I2C_Init+0x1bc>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	1e58      	subs	r0, r3, #1
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6859      	ldr	r1, [r3, #4]
 80061ba:	460b      	mov	r3, r1
 80061bc:	005b      	lsls	r3, r3, #1
 80061be:	440b      	add	r3, r1
 80061c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80061c4:	3301      	adds	r3, #1
 80061c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061ce:	e00f      	b.n	80061f0 <HAL_I2C_Init+0x1dc>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	1e58      	subs	r0, r3, #1
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6859      	ldr	r1, [r3, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	440b      	add	r3, r1
 80061de:	0099      	lsls	r1, r3, #2
 80061e0:	440b      	add	r3, r1
 80061e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80061e6:	3301      	adds	r3, #1
 80061e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061f0:	6879      	ldr	r1, [r7, #4]
 80061f2:	6809      	ldr	r1, [r1, #0]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	69da      	ldr	r2, [r3, #28]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	431a      	orrs	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800621e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	6911      	ldr	r1, [r2, #16]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	68d2      	ldr	r2, [r2, #12]
 800622a:	4311      	orrs	r1, r2
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6812      	ldr	r2, [r2, #0]
 8006230:	430b      	orrs	r3, r1
 8006232:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	695a      	ldr	r2, [r3, #20]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f042 0201 	orr.w	r2, r2, #1
 800625e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2220      	movs	r2, #32
 800626a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	000186a0 	.word	0x000186a0
 800628c:	001e847f 	.word	0x001e847f
 8006290:	003d08ff 	.word	0x003d08ff
 8006294:	431bde83 	.word	0x431bde83
 8006298:	10624dd3 	.word	0x10624dd3

0800629c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b088      	sub	sp, #32
 80062a0:	af02      	add	r7, sp, #8
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	4608      	mov	r0, r1
 80062a6:	4611      	mov	r1, r2
 80062a8:	461a      	mov	r2, r3
 80062aa:	4603      	mov	r3, r0
 80062ac:	817b      	strh	r3, [r7, #10]
 80062ae:	460b      	mov	r3, r1
 80062b0:	813b      	strh	r3, [r7, #8]
 80062b2:	4613      	mov	r3, r2
 80062b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80062b6:	f7fe fac3 	bl	8004840 <HAL_GetTick>
 80062ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b20      	cmp	r3, #32
 80062c6:	f040 80d9 	bne.w	800647c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	2319      	movs	r3, #25
 80062d0:	2201      	movs	r2, #1
 80062d2:	496d      	ldr	r1, [pc, #436]	@ (8006488 <HAL_I2C_Mem_Write+0x1ec>)
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 f971 	bl	80065bc <I2C_WaitOnFlagUntilTimeout>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80062e0:	2302      	movs	r3, #2
 80062e2:	e0cc      	b.n	800647e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d101      	bne.n	80062f2 <HAL_I2C_Mem_Write+0x56>
 80062ee:	2302      	movs	r3, #2
 80062f0:	e0c5      	b.n	800647e <HAL_I2C_Mem_Write+0x1e2>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b01      	cmp	r3, #1
 8006306:	d007      	beq.n	8006318 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0201 	orr.w	r2, r2, #1
 8006316:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006326:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2221      	movs	r2, #33	@ 0x21
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2240      	movs	r2, #64	@ 0x40
 8006334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6a3a      	ldr	r2, [r7, #32]
 8006342:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006348:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800634e:	b29a      	uxth	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	4a4d      	ldr	r2, [pc, #308]	@ (800648c <HAL_I2C_Mem_Write+0x1f0>)
 8006358:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800635a:	88f8      	ldrh	r0, [r7, #6]
 800635c:	893a      	ldrh	r2, [r7, #8]
 800635e:	8979      	ldrh	r1, [r7, #10]
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	9301      	str	r3, [sp, #4]
 8006364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	4603      	mov	r3, r0
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 f890 	bl	8006490 <I2C_RequestMemoryWrite>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d052      	beq.n	800641c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e081      	b.n	800647e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f000 fa36 	bl	80067f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00d      	beq.n	80063a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800638e:	2b04      	cmp	r3, #4
 8006390:	d107      	bne.n	80063a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e06b      	b.n	800647e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063aa:	781a      	ldrb	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063c0:	3b01      	subs	r3, #1
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	3b01      	subs	r3, #1
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	f003 0304 	and.w	r3, r3, #4
 80063e0:	2b04      	cmp	r3, #4
 80063e2:	d11b      	bne.n	800641c <HAL_I2C_Mem_Write+0x180>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d017      	beq.n	800641c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f0:	781a      	ldrb	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006406:	3b01      	subs	r3, #1
 8006408:	b29a      	uxth	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006412:	b29b      	uxth	r3, r3
 8006414:	3b01      	subs	r3, #1
 8006416:	b29a      	uxth	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1aa      	bne.n	800637a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 fa29 	bl	8006880 <I2C_WaitOnBTFFlagUntilTimeout>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00d      	beq.n	8006450 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006438:	2b04      	cmp	r3, #4
 800643a:	d107      	bne.n	800644c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800644a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e016      	b.n	800647e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800645e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2220      	movs	r2, #32
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	e000      	b.n	800647e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800647c:	2302      	movs	r3, #2
  }
}
 800647e:	4618      	mov	r0, r3
 8006480:	3718      	adds	r7, #24
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	00100002 	.word	0x00100002
 800648c:	ffff0000 	.word	0xffff0000

08006490 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b088      	sub	sp, #32
 8006494:	af02      	add	r7, sp, #8
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	4608      	mov	r0, r1
 800649a:	4611      	mov	r1, r2
 800649c:	461a      	mov	r2, r3
 800649e:	4603      	mov	r3, r0
 80064a0:	817b      	strh	r3, [r7, #10]
 80064a2:	460b      	mov	r3, r1
 80064a4:	813b      	strh	r3, [r7, #8]
 80064a6:	4613      	mov	r3, r2
 80064a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 f878 	bl	80065bc <I2C_WaitOnFlagUntilTimeout>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00d      	beq.n	80064ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064e0:	d103      	bne.n	80064ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e05f      	b.n	80065ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064ee:	897b      	ldrh	r3, [r7, #10]
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	461a      	mov	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80064fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006500:	6a3a      	ldr	r2, [r7, #32]
 8006502:	492d      	ldr	r1, [pc, #180]	@ (80065b8 <I2C_RequestMemoryWrite+0x128>)
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 f8d3 	bl	80066b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e04c      	b.n	80065ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006514:	2300      	movs	r3, #0
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	617b      	str	r3, [r7, #20]
 8006528:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800652a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800652c:	6a39      	ldr	r1, [r7, #32]
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f000 f95e 	bl	80067f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00d      	beq.n	8006556 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653e:	2b04      	cmp	r3, #4
 8006540:	d107      	bne.n	8006552 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006550:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e02b      	b.n	80065ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006556:	88fb      	ldrh	r3, [r7, #6]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d105      	bne.n	8006568 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800655c:	893b      	ldrh	r3, [r7, #8]
 800655e:	b2da      	uxtb	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	611a      	str	r2, [r3, #16]
 8006566:	e021      	b.n	80065ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006568:	893b      	ldrh	r3, [r7, #8]
 800656a:	0a1b      	lsrs	r3, r3, #8
 800656c:	b29b      	uxth	r3, r3
 800656e:	b2da      	uxtb	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006578:	6a39      	ldr	r1, [r7, #32]
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 f938 	bl	80067f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00d      	beq.n	80065a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658a:	2b04      	cmp	r3, #4
 800658c:	d107      	bne.n	800659e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800659c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e005      	b.n	80065ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065a2:	893b      	ldrh	r3, [r7, #8]
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	00010002 	.word	0x00010002

080065bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	603b      	str	r3, [r7, #0]
 80065c8:	4613      	mov	r3, r2
 80065ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065cc:	e048      	b.n	8006660 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d4:	d044      	beq.n	8006660 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065d6:	f7fe f933 	bl	8004840 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	683a      	ldr	r2, [r7, #0]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d302      	bcc.n	80065ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d139      	bne.n	8006660 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	0c1b      	lsrs	r3, r3, #16
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d10d      	bne.n	8006612 <I2C_WaitOnFlagUntilTimeout+0x56>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	43da      	mvns	r2, r3
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	4013      	ands	r3, r2
 8006602:	b29b      	uxth	r3, r3
 8006604:	2b00      	cmp	r3, #0
 8006606:	bf0c      	ite	eq
 8006608:	2301      	moveq	r3, #1
 800660a:	2300      	movne	r3, #0
 800660c:	b2db      	uxtb	r3, r3
 800660e:	461a      	mov	r2, r3
 8006610:	e00c      	b.n	800662c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	43da      	mvns	r2, r3
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	4013      	ands	r3, r2
 800661e:	b29b      	uxth	r3, r3
 8006620:	2b00      	cmp	r3, #0
 8006622:	bf0c      	ite	eq
 8006624:	2301      	moveq	r3, #1
 8006626:	2300      	movne	r3, #0
 8006628:	b2db      	uxtb	r3, r3
 800662a:	461a      	mov	r2, r3
 800662c:	79fb      	ldrb	r3, [r7, #7]
 800662e:	429a      	cmp	r2, r3
 8006630:	d116      	bne.n	8006660 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2220      	movs	r2, #32
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664c:	f043 0220 	orr.w	r2, r3, #32
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e023      	b.n	80066a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	0c1b      	lsrs	r3, r3, #16
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b01      	cmp	r3, #1
 8006668:	d10d      	bne.n	8006686 <I2C_WaitOnFlagUntilTimeout+0xca>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	43da      	mvns	r2, r3
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	4013      	ands	r3, r2
 8006676:	b29b      	uxth	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	bf0c      	ite	eq
 800667c:	2301      	moveq	r3, #1
 800667e:	2300      	movne	r3, #0
 8006680:	b2db      	uxtb	r3, r3
 8006682:	461a      	mov	r2, r3
 8006684:	e00c      	b.n	80066a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	43da      	mvns	r2, r3
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	4013      	ands	r3, r2
 8006692:	b29b      	uxth	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	bf0c      	ite	eq
 8006698:	2301      	moveq	r3, #1
 800669a:	2300      	movne	r3, #0
 800669c:	b2db      	uxtb	r3, r3
 800669e:	461a      	mov	r2, r3
 80066a0:	79fb      	ldrb	r3, [r7, #7]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d093      	beq.n	80065ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
 80066bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066be:	e071      	b.n	80067a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066ce:	d123      	bne.n	8006718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80066e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006704:	f043 0204 	orr.w	r2, r3, #4
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e067      	b.n	80067e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671e:	d041      	beq.n	80067a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006720:	f7fe f88e 	bl	8004840 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	429a      	cmp	r2, r3
 800672e:	d302      	bcc.n	8006736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d136      	bne.n	80067a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	0c1b      	lsrs	r3, r3, #16
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b01      	cmp	r3, #1
 800673e:	d10c      	bne.n	800675a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	43da      	mvns	r2, r3
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	4013      	ands	r3, r2
 800674c:	b29b      	uxth	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	bf14      	ite	ne
 8006752:	2301      	movne	r3, #1
 8006754:	2300      	moveq	r3, #0
 8006756:	b2db      	uxtb	r3, r3
 8006758:	e00b      	b.n	8006772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	43da      	mvns	r2, r3
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	4013      	ands	r3, r2
 8006766:	b29b      	uxth	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	bf14      	ite	ne
 800676c:	2301      	movne	r3, #1
 800676e:	2300      	moveq	r3, #0
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d016      	beq.n	80067a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2220      	movs	r2, #32
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006790:	f043 0220 	orr.w	r2, r3, #32
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e021      	b.n	80067e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	0c1b      	lsrs	r3, r3, #16
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d10c      	bne.n	80067c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	43da      	mvns	r2, r3
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	4013      	ands	r3, r2
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	bf14      	ite	ne
 80067c0:	2301      	movne	r3, #1
 80067c2:	2300      	moveq	r3, #0
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	e00b      	b.n	80067e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	43da      	mvns	r2, r3
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4013      	ands	r3, r2
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	bf14      	ite	ne
 80067da:	2301      	movne	r3, #1
 80067dc:	2300      	moveq	r3, #0
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f47f af6d 	bne.w	80066c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067fc:	e034      	b.n	8006868 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 f886 	bl	8006910 <I2C_IsAcknowledgeFailed>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e034      	b.n	8006878 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006814:	d028      	beq.n	8006868 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006816:	f7fe f813 	bl	8004840 <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	429a      	cmp	r2, r3
 8006824:	d302      	bcc.n	800682c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d11d      	bne.n	8006868 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006836:	2b80      	cmp	r3, #128	@ 0x80
 8006838:	d016      	beq.n	8006868 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2220      	movs	r2, #32
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006854:	f043 0220 	orr.w	r2, r3, #32
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e007      	b.n	8006878 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006872:	2b80      	cmp	r3, #128	@ 0x80
 8006874:	d1c3      	bne.n	80067fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800688c:	e034      	b.n	80068f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f000 f83e 	bl	8006910 <I2C_IsAcknowledgeFailed>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e034      	b.n	8006908 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a4:	d028      	beq.n	80068f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068a6:	f7fd ffcb 	bl	8004840 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d302      	bcc.n	80068bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d11d      	bne.n	80068f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	f003 0304 	and.w	r3, r3, #4
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d016      	beq.n	80068f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2220      	movs	r2, #32
 80068d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e4:	f043 0220 	orr.w	r2, r3, #32
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e007      	b.n	8006908 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	f003 0304 	and.w	r3, r3, #4
 8006902:	2b04      	cmp	r3, #4
 8006904:	d1c3      	bne.n	800688e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006926:	d11b      	bne.n	8006960 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006930:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2220      	movs	r2, #32
 800693c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800694c:	f043 0204 	orr.w	r2, r3, #4
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e000      	b.n	8006962 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
	...

08006970 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d101      	bne.n	8006982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e267      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d075      	beq.n	8006a7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800698e:	4b88      	ldr	r3, [pc, #544]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f003 030c 	and.w	r3, r3, #12
 8006996:	2b04      	cmp	r3, #4
 8006998:	d00c      	beq.n	80069b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800699a:	4b85      	ldr	r3, [pc, #532]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80069a2:	2b08      	cmp	r3, #8
 80069a4:	d112      	bne.n	80069cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069a6:	4b82      	ldr	r3, [pc, #520]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069b2:	d10b      	bne.n	80069cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069b4:	4b7e      	ldr	r3, [pc, #504]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d05b      	beq.n	8006a78 <HAL_RCC_OscConfig+0x108>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d157      	bne.n	8006a78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e242      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069d4:	d106      	bne.n	80069e4 <HAL_RCC_OscConfig+0x74>
 80069d6:	4b76      	ldr	r3, [pc, #472]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a75      	ldr	r2, [pc, #468]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 80069dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	e01d      	b.n	8006a20 <HAL_RCC_OscConfig+0xb0>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069ec:	d10c      	bne.n	8006a08 <HAL_RCC_OscConfig+0x98>
 80069ee:	4b70      	ldr	r3, [pc, #448]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a6f      	ldr	r2, [pc, #444]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 80069f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069f8:	6013      	str	r3, [r2, #0]
 80069fa:	4b6d      	ldr	r3, [pc, #436]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a6c      	ldr	r2, [pc, #432]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a04:	6013      	str	r3, [r2, #0]
 8006a06:	e00b      	b.n	8006a20 <HAL_RCC_OscConfig+0xb0>
 8006a08:	4b69      	ldr	r3, [pc, #420]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a68      	ldr	r2, [pc, #416]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006a0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a12:	6013      	str	r3, [r2, #0]
 8006a14:	4b66      	ldr	r3, [pc, #408]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a65      	ldr	r2, [pc, #404]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006a1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d013      	beq.n	8006a50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a28:	f7fd ff0a 	bl	8004840 <HAL_GetTick>
 8006a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a2e:	e008      	b.n	8006a42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a30:	f7fd ff06 	bl	8004840 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b64      	cmp	r3, #100	@ 0x64
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e207      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a42:	4b5b      	ldr	r3, [pc, #364]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d0f0      	beq.n	8006a30 <HAL_RCC_OscConfig+0xc0>
 8006a4e:	e014      	b.n	8006a7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a50:	f7fd fef6 	bl	8004840 <HAL_GetTick>
 8006a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a56:	e008      	b.n	8006a6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a58:	f7fd fef2 	bl	8004840 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b64      	cmp	r3, #100	@ 0x64
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e1f3      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a6a:	4b51      	ldr	r3, [pc, #324]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1f0      	bne.n	8006a58 <HAL_RCC_OscConfig+0xe8>
 8006a76:	e000      	b.n	8006a7a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d063      	beq.n	8006b4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006a86:	4b4a      	ldr	r3, [pc, #296]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f003 030c 	and.w	r3, r3, #12
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00b      	beq.n	8006aaa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a92:	4b47      	ldr	r3, [pc, #284]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006a9a:	2b08      	cmp	r3, #8
 8006a9c:	d11c      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a9e:	4b44      	ldr	r3, [pc, #272]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d116      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aaa:	4b41      	ldr	r3, [pc, #260]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d005      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x152>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d001      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e1c7      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ac2:	4b3b      	ldr	r3, [pc, #236]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	00db      	lsls	r3, r3, #3
 8006ad0:	4937      	ldr	r1, [pc, #220]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ad6:	e03a      	b.n	8006b4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d020      	beq.n	8006b22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ae0:	4b34      	ldr	r3, [pc, #208]	@ (8006bb4 <HAL_RCC_OscConfig+0x244>)
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae6:	f7fd feab 	bl	8004840 <HAL_GetTick>
 8006aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006aec:	e008      	b.n	8006b00 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006aee:	f7fd fea7 	bl	8004840 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d901      	bls.n	8006b00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e1a8      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b00:	4b2b      	ldr	r3, [pc, #172]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0302 	and.w	r3, r3, #2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d0f0      	beq.n	8006aee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b0c:	4b28      	ldr	r3, [pc, #160]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	00db      	lsls	r3, r3, #3
 8006b1a:	4925      	ldr	r1, [pc, #148]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	600b      	str	r3, [r1, #0]
 8006b20:	e015      	b.n	8006b4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b22:	4b24      	ldr	r3, [pc, #144]	@ (8006bb4 <HAL_RCC_OscConfig+0x244>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b28:	f7fd fe8a 	bl	8004840 <HAL_GetTick>
 8006b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b2e:	e008      	b.n	8006b42 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b30:	f7fd fe86 	bl	8004840 <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e187      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b42:	4b1b      	ldr	r3, [pc, #108]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1f0      	bne.n	8006b30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0308 	and.w	r3, r3, #8
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d036      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d016      	beq.n	8006b90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b62:	4b15      	ldr	r3, [pc, #84]	@ (8006bb8 <HAL_RCC_OscConfig+0x248>)
 8006b64:	2201      	movs	r2, #1
 8006b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b68:	f7fd fe6a 	bl	8004840 <HAL_GetTick>
 8006b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b6e:	e008      	b.n	8006b82 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b70:	f7fd fe66 	bl	8004840 <HAL_GetTick>
 8006b74:	4602      	mov	r2, r0
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d901      	bls.n	8006b82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e167      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b82:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006b84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d0f0      	beq.n	8006b70 <HAL_RCC_OscConfig+0x200>
 8006b8e:	e01b      	b.n	8006bc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b90:	4b09      	ldr	r3, [pc, #36]	@ (8006bb8 <HAL_RCC_OscConfig+0x248>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b96:	f7fd fe53 	bl	8004840 <HAL_GetTick>
 8006b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b9c:	e00e      	b.n	8006bbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b9e:	f7fd fe4f 	bl	8004840 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d907      	bls.n	8006bbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e150      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
 8006bb0:	40023800 	.word	0x40023800
 8006bb4:	42470000 	.word	0x42470000
 8006bb8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bbc:	4b88      	ldr	r3, [pc, #544]	@ (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006bbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bc0:	f003 0302 	and.w	r3, r3, #2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1ea      	bne.n	8006b9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0304 	and.w	r3, r3, #4
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 8097 	beq.w	8006d04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bda:	4b81      	ldr	r3, [pc, #516]	@ (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10f      	bne.n	8006c06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006be6:	2300      	movs	r3, #0
 8006be8:	60bb      	str	r3, [r7, #8]
 8006bea:	4b7d      	ldr	r3, [pc, #500]	@ (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bee:	4a7c      	ldr	r2, [pc, #496]	@ (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8006bf6:	4b7a      	ldr	r3, [pc, #488]	@ (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bfe:	60bb      	str	r3, [r7, #8]
 8006c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c02:	2301      	movs	r3, #1
 8006c04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c06:	4b77      	ldr	r3, [pc, #476]	@ (8006de4 <HAL_RCC_OscConfig+0x474>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d118      	bne.n	8006c44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c12:	4b74      	ldr	r3, [pc, #464]	@ (8006de4 <HAL_RCC_OscConfig+0x474>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a73      	ldr	r2, [pc, #460]	@ (8006de4 <HAL_RCC_OscConfig+0x474>)
 8006c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c1e:	f7fd fe0f 	bl	8004840 <HAL_GetTick>
 8006c22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c24:	e008      	b.n	8006c38 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c26:	f7fd fe0b 	bl	8004840 <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d901      	bls.n	8006c38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e10c      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c38:	4b6a      	ldr	r3, [pc, #424]	@ (8006de4 <HAL_RCC_OscConfig+0x474>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0f0      	beq.n	8006c26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d106      	bne.n	8006c5a <HAL_RCC_OscConfig+0x2ea>
 8006c4c:	4b64      	ldr	r3, [pc, #400]	@ (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c50:	4a63      	ldr	r2, [pc, #396]	@ (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006c52:	f043 0301 	orr.w	r3, r3, #1
 8006c56:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c58:	e01c      	b.n	8006c94 <HAL_RCC_OscConfig+0x324>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	2b05      	cmp	r3, #5
 8006c60:	d10c      	bne.n	8006c7c <HAL_RCC_OscConfig+0x30c>
 8006c62:	4b5f      	ldr	r3, [pc, #380]	@ (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c66:	4a5e      	ldr	r2, [pc, #376]	@ (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006c68:	f043 0304 	orr.w	r3, r3, #4
 8006c6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c6e:	4b5c      	ldr	r3, [pc, #368]	@ (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c72:	4a5b      	ldr	r2, [pc, #364]	@ (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006c74:	f043 0301 	orr.w	r3, r3, #1
 8006c78:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c7a:	e00b      	b.n	8006c94 <HAL_RCC_OscConfig+0x324>
 8006c7c:	4b58      	ldr	r3, [pc, #352]	@ (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c80:	4a57      	ldr	r2, [pc, #348]	@ (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006c82:	f023 0301 	bic.w	r3, r3, #1
 8006c86:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c88:	4b55      	ldr	r3, [pc, #340]	@ (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c8c:	4a54      	ldr	r2, [pc, #336]	@ (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006c8e:	f023 0304 	bic.w	r3, r3, #4
 8006c92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d015      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c9c:	f7fd fdd0 	bl	8004840 <HAL_GetTick>
 8006ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ca2:	e00a      	b.n	8006cba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ca4:	f7fd fdcc 	bl	8004840 <HAL_GetTick>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d901      	bls.n	8006cba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e0cb      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cba:	4b49      	ldr	r3, [pc, #292]	@ (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cbe:	f003 0302 	and.w	r3, r3, #2
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d0ee      	beq.n	8006ca4 <HAL_RCC_OscConfig+0x334>
 8006cc6:	e014      	b.n	8006cf2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cc8:	f7fd fdba 	bl	8004840 <HAL_GetTick>
 8006ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cce:	e00a      	b.n	8006ce6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cd0:	f7fd fdb6 	bl	8004840 <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e0b5      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ce6:	4b3e      	ldr	r3, [pc, #248]	@ (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1ee      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006cf2:	7dfb      	ldrb	r3, [r7, #23]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d105      	bne.n	8006d04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cf8:	4b39      	ldr	r3, [pc, #228]	@ (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfc:	4a38      	ldr	r2, [pc, #224]	@ (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006cfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d02:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 80a1 	beq.w	8006e50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d0e:	4b34      	ldr	r3, [pc, #208]	@ (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f003 030c 	and.w	r3, r3, #12
 8006d16:	2b08      	cmp	r3, #8
 8006d18:	d05c      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d141      	bne.n	8006da6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d22:	4b31      	ldr	r3, [pc, #196]	@ (8006de8 <HAL_RCC_OscConfig+0x478>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d28:	f7fd fd8a 	bl	8004840 <HAL_GetTick>
 8006d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d2e:	e008      	b.n	8006d42 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d30:	f7fd fd86 	bl	8004840 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e087      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d42:	4b27      	ldr	r3, [pc, #156]	@ (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1f0      	bne.n	8006d30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	69da      	ldr	r2, [r3, #28]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	431a      	orrs	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5c:	019b      	lsls	r3, r3, #6
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d64:	085b      	lsrs	r3, r3, #1
 8006d66:	3b01      	subs	r3, #1
 8006d68:	041b      	lsls	r3, r3, #16
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d70:	061b      	lsls	r3, r3, #24
 8006d72:	491b      	ldr	r1, [pc, #108]	@ (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d78:	4b1b      	ldr	r3, [pc, #108]	@ (8006de8 <HAL_RCC_OscConfig+0x478>)
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d7e:	f7fd fd5f 	bl	8004840 <HAL_GetTick>
 8006d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d84:	e008      	b.n	8006d98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d86:	f7fd fd5b 	bl	8004840 <HAL_GetTick>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d901      	bls.n	8006d98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e05c      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d98:	4b11      	ldr	r3, [pc, #68]	@ (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d0f0      	beq.n	8006d86 <HAL_RCC_OscConfig+0x416>
 8006da4:	e054      	b.n	8006e50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006da6:	4b10      	ldr	r3, [pc, #64]	@ (8006de8 <HAL_RCC_OscConfig+0x478>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dac:	f7fd fd48 	bl	8004840 <HAL_GetTick>
 8006db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006db2:	e008      	b.n	8006dc6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006db4:	f7fd fd44 	bl	8004840 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d901      	bls.n	8006dc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e045      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dc6:	4b06      	ldr	r3, [pc, #24]	@ (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1f0      	bne.n	8006db4 <HAL_RCC_OscConfig+0x444>
 8006dd2:	e03d      	b.n	8006e50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d107      	bne.n	8006dec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e038      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
 8006de0:	40023800 	.word	0x40023800
 8006de4:	40007000 	.word	0x40007000
 8006de8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006dec:	4b1b      	ldr	r3, [pc, #108]	@ (8006e5c <HAL_RCC_OscConfig+0x4ec>)
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d028      	beq.n	8006e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d121      	bne.n	8006e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d11a      	bne.n	8006e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006e22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d111      	bne.n	8006e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e32:	085b      	lsrs	r3, r3, #1
 8006e34:	3b01      	subs	r3, #1
 8006e36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d107      	bne.n	8006e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d001      	beq.n	8006e50 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e000      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3718      	adds	r7, #24
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	40023800 	.word	0x40023800

08006e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e0cc      	b.n	800700e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e74:	4b68      	ldr	r3, [pc, #416]	@ (8007018 <HAL_RCC_ClockConfig+0x1b8>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0307 	and.w	r3, r3, #7
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d90c      	bls.n	8006e9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e82:	4b65      	ldr	r3, [pc, #404]	@ (8007018 <HAL_RCC_ClockConfig+0x1b8>)
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	b2d2      	uxtb	r2, r2
 8006e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e8a:	4b63      	ldr	r3, [pc, #396]	@ (8007018 <HAL_RCC_ClockConfig+0x1b8>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0307 	and.w	r3, r3, #7
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d001      	beq.n	8006e9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e0b8      	b.n	800700e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d020      	beq.n	8006eea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d005      	beq.n	8006ec0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006eb4:	4b59      	ldr	r3, [pc, #356]	@ (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	4a58      	ldr	r2, [pc, #352]	@ (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006eba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006ebe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0308 	and.w	r3, r3, #8
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d005      	beq.n	8006ed8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ecc:	4b53      	ldr	r3, [pc, #332]	@ (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	4a52      	ldr	r2, [pc, #328]	@ (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006ed2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006ed6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ed8:	4b50      	ldr	r3, [pc, #320]	@ (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	494d      	ldr	r1, [pc, #308]	@ (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0301 	and.w	r3, r3, #1
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d044      	beq.n	8006f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d107      	bne.n	8006f0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006efe:	4b47      	ldr	r3, [pc, #284]	@ (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d119      	bne.n	8006f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e07f      	b.n	800700e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d003      	beq.n	8006f1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d107      	bne.n	8006f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f1e:	4b3f      	ldr	r3, [pc, #252]	@ (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d109      	bne.n	8006f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e06f      	b.n	800700e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0302 	and.w	r3, r3, #2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e067      	b.n	800700e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f3e:	4b37      	ldr	r3, [pc, #220]	@ (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f023 0203 	bic.w	r2, r3, #3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	4934      	ldr	r1, [pc, #208]	@ (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f50:	f7fd fc76 	bl	8004840 <HAL_GetTick>
 8006f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f56:	e00a      	b.n	8006f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f58:	f7fd fc72 	bl	8004840 <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e04f      	b.n	800700e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f6e:	4b2b      	ldr	r3, [pc, #172]	@ (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f003 020c 	and.w	r2, r3, #12
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d1eb      	bne.n	8006f58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f80:	4b25      	ldr	r3, [pc, #148]	@ (8007018 <HAL_RCC_ClockConfig+0x1b8>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0307 	and.w	r3, r3, #7
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d20c      	bcs.n	8006fa8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f8e:	4b22      	ldr	r3, [pc, #136]	@ (8007018 <HAL_RCC_ClockConfig+0x1b8>)
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	b2d2      	uxtb	r2, r2
 8006f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f96:	4b20      	ldr	r3, [pc, #128]	@ (8007018 <HAL_RCC_ClockConfig+0x1b8>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d001      	beq.n	8006fa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e032      	b.n	800700e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0304 	and.w	r3, r3, #4
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d008      	beq.n	8006fc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fb4:	4b19      	ldr	r3, [pc, #100]	@ (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	4916      	ldr	r1, [pc, #88]	@ (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0308 	and.w	r3, r3, #8
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d009      	beq.n	8006fe6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fd2:	4b12      	ldr	r3, [pc, #72]	@ (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	00db      	lsls	r3, r3, #3
 8006fe0:	490e      	ldr	r1, [pc, #56]	@ (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006fe6:	f000 f821 	bl	800702c <HAL_RCC_GetSysClockFreq>
 8006fea:	4602      	mov	r2, r0
 8006fec:	4b0b      	ldr	r3, [pc, #44]	@ (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	091b      	lsrs	r3, r3, #4
 8006ff2:	f003 030f 	and.w	r3, r3, #15
 8006ff6:	490a      	ldr	r1, [pc, #40]	@ (8007020 <HAL_RCC_ClockConfig+0x1c0>)
 8006ff8:	5ccb      	ldrb	r3, [r1, r3]
 8006ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8006ffe:	4a09      	ldr	r2, [pc, #36]	@ (8007024 <HAL_RCC_ClockConfig+0x1c4>)
 8007000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007002:	4b09      	ldr	r3, [pc, #36]	@ (8007028 <HAL_RCC_ClockConfig+0x1c8>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4618      	mov	r0, r3
 8007008:	f7fb f974 	bl	80022f4 <HAL_InitTick>

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	40023c00 	.word	0x40023c00
 800701c:	40023800 	.word	0x40023800
 8007020:	08014ab8 	.word	0x08014ab8
 8007024:	20000004 	.word	0x20000004
 8007028:	20000014 	.word	0x20000014

0800702c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800702c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007030:	b094      	sub	sp, #80	@ 0x50
 8007032:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007038:	2300      	movs	r3, #0
 800703a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007040:	2300      	movs	r3, #0
 8007042:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007044:	4b79      	ldr	r3, [pc, #484]	@ (800722c <HAL_RCC_GetSysClockFreq+0x200>)
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f003 030c 	and.w	r3, r3, #12
 800704c:	2b08      	cmp	r3, #8
 800704e:	d00d      	beq.n	800706c <HAL_RCC_GetSysClockFreq+0x40>
 8007050:	2b08      	cmp	r3, #8
 8007052:	f200 80e1 	bhi.w	8007218 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <HAL_RCC_GetSysClockFreq+0x34>
 800705a:	2b04      	cmp	r3, #4
 800705c:	d003      	beq.n	8007066 <HAL_RCC_GetSysClockFreq+0x3a>
 800705e:	e0db      	b.n	8007218 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007060:	4b73      	ldr	r3, [pc, #460]	@ (8007230 <HAL_RCC_GetSysClockFreq+0x204>)
 8007062:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007064:	e0db      	b.n	800721e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007066:	4b73      	ldr	r3, [pc, #460]	@ (8007234 <HAL_RCC_GetSysClockFreq+0x208>)
 8007068:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800706a:	e0d8      	b.n	800721e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800706c:	4b6f      	ldr	r3, [pc, #444]	@ (800722c <HAL_RCC_GetSysClockFreq+0x200>)
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007074:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007076:	4b6d      	ldr	r3, [pc, #436]	@ (800722c <HAL_RCC_GetSysClockFreq+0x200>)
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d063      	beq.n	800714a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007082:	4b6a      	ldr	r3, [pc, #424]	@ (800722c <HAL_RCC_GetSysClockFreq+0x200>)
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	099b      	lsrs	r3, r3, #6
 8007088:	2200      	movs	r2, #0
 800708a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800708c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800708e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007094:	633b      	str	r3, [r7, #48]	@ 0x30
 8007096:	2300      	movs	r3, #0
 8007098:	637b      	str	r3, [r7, #52]	@ 0x34
 800709a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800709e:	4622      	mov	r2, r4
 80070a0:	462b      	mov	r3, r5
 80070a2:	f04f 0000 	mov.w	r0, #0
 80070a6:	f04f 0100 	mov.w	r1, #0
 80070aa:	0159      	lsls	r1, r3, #5
 80070ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070b0:	0150      	lsls	r0, r2, #5
 80070b2:	4602      	mov	r2, r0
 80070b4:	460b      	mov	r3, r1
 80070b6:	4621      	mov	r1, r4
 80070b8:	1a51      	subs	r1, r2, r1
 80070ba:	6139      	str	r1, [r7, #16]
 80070bc:	4629      	mov	r1, r5
 80070be:	eb63 0301 	sbc.w	r3, r3, r1
 80070c2:	617b      	str	r3, [r7, #20]
 80070c4:	f04f 0200 	mov.w	r2, #0
 80070c8:	f04f 0300 	mov.w	r3, #0
 80070cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070d0:	4659      	mov	r1, fp
 80070d2:	018b      	lsls	r3, r1, #6
 80070d4:	4651      	mov	r1, sl
 80070d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80070da:	4651      	mov	r1, sl
 80070dc:	018a      	lsls	r2, r1, #6
 80070de:	4651      	mov	r1, sl
 80070e0:	ebb2 0801 	subs.w	r8, r2, r1
 80070e4:	4659      	mov	r1, fp
 80070e6:	eb63 0901 	sbc.w	r9, r3, r1
 80070ea:	f04f 0200 	mov.w	r2, #0
 80070ee:	f04f 0300 	mov.w	r3, #0
 80070f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070fe:	4690      	mov	r8, r2
 8007100:	4699      	mov	r9, r3
 8007102:	4623      	mov	r3, r4
 8007104:	eb18 0303 	adds.w	r3, r8, r3
 8007108:	60bb      	str	r3, [r7, #8]
 800710a:	462b      	mov	r3, r5
 800710c:	eb49 0303 	adc.w	r3, r9, r3
 8007110:	60fb      	str	r3, [r7, #12]
 8007112:	f04f 0200 	mov.w	r2, #0
 8007116:	f04f 0300 	mov.w	r3, #0
 800711a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800711e:	4629      	mov	r1, r5
 8007120:	024b      	lsls	r3, r1, #9
 8007122:	4621      	mov	r1, r4
 8007124:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007128:	4621      	mov	r1, r4
 800712a:	024a      	lsls	r2, r1, #9
 800712c:	4610      	mov	r0, r2
 800712e:	4619      	mov	r1, r3
 8007130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007132:	2200      	movs	r2, #0
 8007134:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007136:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007138:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800713c:	f7f9 fd36 	bl	8000bac <__aeabi_uldivmod>
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	4613      	mov	r3, r2
 8007146:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007148:	e058      	b.n	80071fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800714a:	4b38      	ldr	r3, [pc, #224]	@ (800722c <HAL_RCC_GetSysClockFreq+0x200>)
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	099b      	lsrs	r3, r3, #6
 8007150:	2200      	movs	r2, #0
 8007152:	4618      	mov	r0, r3
 8007154:	4611      	mov	r1, r2
 8007156:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800715a:	623b      	str	r3, [r7, #32]
 800715c:	2300      	movs	r3, #0
 800715e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007160:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007164:	4642      	mov	r2, r8
 8007166:	464b      	mov	r3, r9
 8007168:	f04f 0000 	mov.w	r0, #0
 800716c:	f04f 0100 	mov.w	r1, #0
 8007170:	0159      	lsls	r1, r3, #5
 8007172:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007176:	0150      	lsls	r0, r2, #5
 8007178:	4602      	mov	r2, r0
 800717a:	460b      	mov	r3, r1
 800717c:	4641      	mov	r1, r8
 800717e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007182:	4649      	mov	r1, r9
 8007184:	eb63 0b01 	sbc.w	fp, r3, r1
 8007188:	f04f 0200 	mov.w	r2, #0
 800718c:	f04f 0300 	mov.w	r3, #0
 8007190:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007194:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007198:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800719c:	ebb2 040a 	subs.w	r4, r2, sl
 80071a0:	eb63 050b 	sbc.w	r5, r3, fp
 80071a4:	f04f 0200 	mov.w	r2, #0
 80071a8:	f04f 0300 	mov.w	r3, #0
 80071ac:	00eb      	lsls	r3, r5, #3
 80071ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071b2:	00e2      	lsls	r2, r4, #3
 80071b4:	4614      	mov	r4, r2
 80071b6:	461d      	mov	r5, r3
 80071b8:	4643      	mov	r3, r8
 80071ba:	18e3      	adds	r3, r4, r3
 80071bc:	603b      	str	r3, [r7, #0]
 80071be:	464b      	mov	r3, r9
 80071c0:	eb45 0303 	adc.w	r3, r5, r3
 80071c4:	607b      	str	r3, [r7, #4]
 80071c6:	f04f 0200 	mov.w	r2, #0
 80071ca:	f04f 0300 	mov.w	r3, #0
 80071ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80071d2:	4629      	mov	r1, r5
 80071d4:	028b      	lsls	r3, r1, #10
 80071d6:	4621      	mov	r1, r4
 80071d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80071dc:	4621      	mov	r1, r4
 80071de:	028a      	lsls	r2, r1, #10
 80071e0:	4610      	mov	r0, r2
 80071e2:	4619      	mov	r1, r3
 80071e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071e6:	2200      	movs	r2, #0
 80071e8:	61bb      	str	r3, [r7, #24]
 80071ea:	61fa      	str	r2, [r7, #28]
 80071ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071f0:	f7f9 fcdc 	bl	8000bac <__aeabi_uldivmod>
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	4613      	mov	r3, r2
 80071fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80071fc:	4b0b      	ldr	r3, [pc, #44]	@ (800722c <HAL_RCC_GetSysClockFreq+0x200>)
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	0c1b      	lsrs	r3, r3, #16
 8007202:	f003 0303 	and.w	r3, r3, #3
 8007206:	3301      	adds	r3, #1
 8007208:	005b      	lsls	r3, r3, #1
 800720a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800720c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800720e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007210:	fbb2 f3f3 	udiv	r3, r2, r3
 8007214:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007216:	e002      	b.n	800721e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007218:	4b05      	ldr	r3, [pc, #20]	@ (8007230 <HAL_RCC_GetSysClockFreq+0x204>)
 800721a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800721c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800721e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007220:	4618      	mov	r0, r3
 8007222:	3750      	adds	r7, #80	@ 0x50
 8007224:	46bd      	mov	sp, r7
 8007226:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800722a:	bf00      	nop
 800722c:	40023800 	.word	0x40023800
 8007230:	00f42400 	.word	0x00f42400
 8007234:	007a1200 	.word	0x007a1200

08007238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007238:	b480      	push	{r7}
 800723a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800723c:	4b03      	ldr	r3, [pc, #12]	@ (800724c <HAL_RCC_GetHCLKFreq+0x14>)
 800723e:	681b      	ldr	r3, [r3, #0]
}
 8007240:	4618      	mov	r0, r3
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	20000004 	.word	0x20000004

08007250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007254:	f7ff fff0 	bl	8007238 <HAL_RCC_GetHCLKFreq>
 8007258:	4602      	mov	r2, r0
 800725a:	4b05      	ldr	r3, [pc, #20]	@ (8007270 <HAL_RCC_GetPCLK1Freq+0x20>)
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	0a9b      	lsrs	r3, r3, #10
 8007260:	f003 0307 	and.w	r3, r3, #7
 8007264:	4903      	ldr	r1, [pc, #12]	@ (8007274 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007266:	5ccb      	ldrb	r3, [r1, r3]
 8007268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800726c:	4618      	mov	r0, r3
 800726e:	bd80      	pop	{r7, pc}
 8007270:	40023800 	.word	0x40023800
 8007274:	08014ac8 	.word	0x08014ac8

08007278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800727c:	f7ff ffdc 	bl	8007238 <HAL_RCC_GetHCLKFreq>
 8007280:	4602      	mov	r2, r0
 8007282:	4b05      	ldr	r3, [pc, #20]	@ (8007298 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	0b5b      	lsrs	r3, r3, #13
 8007288:	f003 0307 	and.w	r3, r3, #7
 800728c:	4903      	ldr	r1, [pc, #12]	@ (800729c <HAL_RCC_GetPCLK2Freq+0x24>)
 800728e:	5ccb      	ldrb	r3, [r1, r3]
 8007290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007294:	4618      	mov	r0, r3
 8007296:	bd80      	pop	{r7, pc}
 8007298:	40023800 	.word	0x40023800
 800729c:	08014ac8 	.word	0x08014ac8

080072a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	220f      	movs	r2, #15
 80072ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80072b0:	4b12      	ldr	r3, [pc, #72]	@ (80072fc <HAL_RCC_GetClockConfig+0x5c>)
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f003 0203 	and.w	r2, r3, #3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80072bc:	4b0f      	ldr	r3, [pc, #60]	@ (80072fc <HAL_RCC_GetClockConfig+0x5c>)
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80072c8:	4b0c      	ldr	r3, [pc, #48]	@ (80072fc <HAL_RCC_GetClockConfig+0x5c>)
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80072d4:	4b09      	ldr	r3, [pc, #36]	@ (80072fc <HAL_RCC_GetClockConfig+0x5c>)
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	08db      	lsrs	r3, r3, #3
 80072da:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80072e2:	4b07      	ldr	r3, [pc, #28]	@ (8007300 <HAL_RCC_GetClockConfig+0x60>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0207 	and.w	r2, r3, #7
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	601a      	str	r2, [r3, #0]
}
 80072ee:	bf00      	nop
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	40023800 	.word	0x40023800
 8007300:	40023c00 	.word	0x40023c00

08007304 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007310:	2300      	movs	r3, #0
 8007312:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0301 	and.w	r3, r3, #1
 800731c:	2b00      	cmp	r3, #0
 800731e:	d105      	bne.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007328:	2b00      	cmp	r3, #0
 800732a:	d035      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800732c:	4b67      	ldr	r3, [pc, #412]	@ (80074cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800732e:	2200      	movs	r2, #0
 8007330:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007332:	f7fd fa85 	bl	8004840 <HAL_GetTick>
 8007336:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007338:	e008      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800733a:	f7fd fa81 	bl	8004840 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	2b02      	cmp	r3, #2
 8007346:	d901      	bls.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e0ba      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800734c:	4b60      	ldr	r3, [pc, #384]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1f0      	bne.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	019a      	lsls	r2, r3, #6
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	071b      	lsls	r3, r3, #28
 8007364:	495a      	ldr	r1, [pc, #360]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007366:	4313      	orrs	r3, r2
 8007368:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800736c:	4b57      	ldr	r3, [pc, #348]	@ (80074cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800736e:	2201      	movs	r2, #1
 8007370:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007372:	f7fd fa65 	bl	8004840 <HAL_GetTick>
 8007376:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007378:	e008      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800737a:	f7fd fa61 	bl	8004840 <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	2b02      	cmp	r3, #2
 8007386:	d901      	bls.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e09a      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800738c:	4b50      	ldr	r3, [pc, #320]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d0f0      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0302 	and.w	r3, r3, #2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 8083 	beq.w	80074ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80073a6:	2300      	movs	r3, #0
 80073a8:	60fb      	str	r3, [r7, #12]
 80073aa:	4b49      	ldr	r3, [pc, #292]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80073ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ae:	4a48      	ldr	r2, [pc, #288]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80073b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80073b6:	4b46      	ldr	r3, [pc, #280]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80073b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073be:	60fb      	str	r3, [r7, #12]
 80073c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80073c2:	4b44      	ldr	r3, [pc, #272]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a43      	ldr	r2, [pc, #268]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80073ce:	f7fd fa37 	bl	8004840 <HAL_GetTick>
 80073d2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80073d4:	e008      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073d6:	f7fd fa33 	bl	8004840 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d901      	bls.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e06c      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80073e8:	4b3a      	ldr	r3, [pc, #232]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d0f0      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073f4:	4b36      	ldr	r3, [pc, #216]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80073f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073fc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d02f      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	429a      	cmp	r2, r3
 8007410:	d028      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007412:	4b2f      	ldr	r3, [pc, #188]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007416:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800741a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800741c:	4b2e      	ldr	r3, [pc, #184]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800741e:	2201      	movs	r2, #1
 8007420:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007422:	4b2d      	ldr	r3, [pc, #180]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007424:	2200      	movs	r2, #0
 8007426:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007428:	4a29      	ldr	r2, [pc, #164]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800742e:	4b28      	ldr	r3, [pc, #160]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	2b01      	cmp	r3, #1
 8007438:	d114      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800743a:	f7fd fa01 	bl	8004840 <HAL_GetTick>
 800743e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007440:	e00a      	b.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007442:	f7fd f9fd 	bl	8004840 <HAL_GetTick>
 8007446:	4602      	mov	r2, r0
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007450:	4293      	cmp	r3, r2
 8007452:	d901      	bls.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e034      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007458:	4b1d      	ldr	r3, [pc, #116]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800745a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800745c:	f003 0302 	and.w	r3, r3, #2
 8007460:	2b00      	cmp	r3, #0
 8007462:	d0ee      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800746c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007470:	d10d      	bne.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007472:	4b17      	ldr	r3, [pc, #92]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007482:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007486:	4912      	ldr	r1, [pc, #72]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007488:	4313      	orrs	r3, r2
 800748a:	608b      	str	r3, [r1, #8]
 800748c:	e005      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800748e:	4b10      	ldr	r3, [pc, #64]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	4a0f      	ldr	r2, [pc, #60]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007494:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007498:	6093      	str	r3, [r2, #8]
 800749a:	4b0d      	ldr	r3, [pc, #52]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800749c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074a6:	490a      	ldr	r1, [pc, #40]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0308 	and.w	r3, r3, #8
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d003      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	7c1a      	ldrb	r2, [r3, #16]
 80074bc:	4b07      	ldr	r3, [pc, #28]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80074be:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	42470068 	.word	0x42470068
 80074d0:	40023800 	.word	0x40023800
 80074d4:	40007000 	.word	0x40007000
 80074d8:	42470e40 	.word	0x42470e40
 80074dc:	424711e0 	.word	0x424711e0

080074e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e073      	b.n	80075de <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	7f5b      	ldrb	r3, [r3, #29]
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d105      	bne.n	800750c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7fa fdfe 	bl	8002108 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2202      	movs	r2, #2
 8007510:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	f003 0310 	and.w	r3, r3, #16
 800751c:	2b10      	cmp	r3, #16
 800751e:	d055      	beq.n	80075cc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	22ca      	movs	r2, #202	@ 0xca
 8007526:	625a      	str	r2, [r3, #36]	@ 0x24
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2253      	movs	r2, #83	@ 0x53
 800752e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fa49 	bl	80079c8 <RTC_EnterInitMode>
 8007536:	4603      	mov	r3, r0
 8007538:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800753a:	7bfb      	ldrb	r3, [r7, #15]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d12c      	bne.n	800759a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	6812      	ldr	r2, [r2, #0]
 800754a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800754e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007552:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6899      	ldr	r1, [r3, #8]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	431a      	orrs	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	695b      	ldr	r3, [r3, #20]
 8007568:	431a      	orrs	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	430a      	orrs	r2, r1
 8007570:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	68d2      	ldr	r2, [r2, #12]
 800757a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6919      	ldr	r1, [r3, #16]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	041a      	lsls	r2, r3, #16
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	430a      	orrs	r2, r1
 800758e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fa50 	bl	8007a36 <RTC_ExitInitMode>
 8007596:	4603      	mov	r3, r0
 8007598:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800759a:	7bfb      	ldrb	r3, [r7, #15]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d110      	bne.n	80075c2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80075ae:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	699a      	ldr	r2, [r3, #24]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	430a      	orrs	r2, r1
 80075c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	22ff      	movs	r2, #255	@ 0xff
 80075c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80075ca:	e001      	b.n	80075d0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d102      	bne.n	80075dc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80075e6:	b590      	push	{r4, r7, lr}
 80075e8:	b087      	sub	sp, #28
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	60f8      	str	r0, [r7, #12]
 80075ee:	60b9      	str	r1, [r7, #8]
 80075f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	7f1b      	ldrb	r3, [r3, #28]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d101      	bne.n	8007602 <HAL_RTC_SetTime+0x1c>
 80075fe:	2302      	movs	r3, #2
 8007600:	e087      	b.n	8007712 <HAL_RTC_SetTime+0x12c>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2201      	movs	r2, #1
 8007606:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2202      	movs	r2, #2
 800760c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d126      	bne.n	8007662 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800761e:	2b00      	cmp	r3, #0
 8007620:	d102      	bne.n	8007628 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	2200      	movs	r2, #0
 8007626:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	4618      	mov	r0, r3
 800762e:	f000 fa27 	bl	8007a80 <RTC_ByteToBcd2>
 8007632:	4603      	mov	r3, r0
 8007634:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	785b      	ldrb	r3, [r3, #1]
 800763a:	4618      	mov	r0, r3
 800763c:	f000 fa20 	bl	8007a80 <RTC_ByteToBcd2>
 8007640:	4603      	mov	r3, r0
 8007642:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007644:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	789b      	ldrb	r3, [r3, #2]
 800764a:	4618      	mov	r0, r3
 800764c:	f000 fa18 	bl	8007a80 <RTC_ByteToBcd2>
 8007650:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007652:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	78db      	ldrb	r3, [r3, #3]
 800765a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800765c:	4313      	orrs	r3, r2
 800765e:	617b      	str	r3, [r7, #20]
 8007660:	e018      	b.n	8007694 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800766c:	2b00      	cmp	r3, #0
 800766e:	d102      	bne.n	8007676 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2200      	movs	r2, #0
 8007674:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	785b      	ldrb	r3, [r3, #1]
 8007680:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007682:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007688:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	78db      	ldrb	r3, [r3, #3]
 800768e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007690:	4313      	orrs	r3, r2
 8007692:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	22ca      	movs	r2, #202	@ 0xca
 800769a:	625a      	str	r2, [r3, #36]	@ 0x24
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2253      	movs	r2, #83	@ 0x53
 80076a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f000 f98f 	bl	80079c8 <RTC_EnterInitMode>
 80076aa:	4603      	mov	r3, r0
 80076ac:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80076ae:	7cfb      	ldrb	r3, [r7, #19]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d120      	bne.n	80076f6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80076be:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80076c2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689a      	ldr	r2, [r3, #8]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80076d2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6899      	ldr	r1, [r3, #8]
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	68da      	ldr	r2, [r3, #12]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	431a      	orrs	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	430a      	orrs	r2, r1
 80076ea:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 f9a2 	bl	8007a36 <RTC_ExitInitMode>
 80076f2:	4603      	mov	r3, r0
 80076f4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80076f6:	7cfb      	ldrb	r3, [r7, #19]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d102      	bne.n	8007702 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2201      	movs	r2, #1
 8007700:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	22ff      	movs	r2, #255	@ 0xff
 8007708:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	771a      	strb	r2, [r3, #28]

  return status;
 8007710:	7cfb      	ldrb	r3, [r7, #19]
}
 8007712:	4618      	mov	r0, r3
 8007714:	371c      	adds	r7, #28
 8007716:	46bd      	mov	sp, r7
 8007718:	bd90      	pop	{r4, r7, pc}

0800771a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b086      	sub	sp, #24
 800771e:	af00      	add	r7, sp, #0
 8007720:	60f8      	str	r0, [r7, #12]
 8007722:	60b9      	str	r1, [r7, #8]
 8007724:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007726:	2300      	movs	r3, #0
 8007728:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800774c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007750:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	0c1b      	lsrs	r3, r3, #16
 8007756:	b2db      	uxtb	r3, r3
 8007758:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800775c:	b2da      	uxtb	r2, r3
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	0a1b      	lsrs	r3, r3, #8
 8007766:	b2db      	uxtb	r3, r3
 8007768:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800776c:	b2da      	uxtb	r2, r3
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	b2db      	uxtb	r3, r3
 8007776:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800777a:	b2da      	uxtb	r2, r3
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	0d9b      	lsrs	r3, r3, #22
 8007784:	b2db      	uxtb	r3, r3
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	b2da      	uxtb	r2, r3
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d11a      	bne.n	80077cc <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	4618      	mov	r0, r3
 800779c:	f000 f98e 	bl	8007abc <RTC_Bcd2ToByte>
 80077a0:	4603      	mov	r3, r0
 80077a2:	461a      	mov	r2, r3
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	785b      	ldrb	r3, [r3, #1]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f000 f985 	bl	8007abc <RTC_Bcd2ToByte>
 80077b2:	4603      	mov	r3, r0
 80077b4:	461a      	mov	r2, r3
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	789b      	ldrb	r3, [r3, #2]
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 f97c 	bl	8007abc <RTC_Bcd2ToByte>
 80077c4:	4603      	mov	r3, r0
 80077c6:	461a      	mov	r2, r3
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80077d6:	b590      	push	{r4, r7, lr}
 80077d8:	b087      	sub	sp, #28
 80077da:	af00      	add	r7, sp, #0
 80077dc:	60f8      	str	r0, [r7, #12]
 80077de:	60b9      	str	r1, [r7, #8]
 80077e0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80077e2:	2300      	movs	r3, #0
 80077e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	7f1b      	ldrb	r3, [r3, #28]
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d101      	bne.n	80077f2 <HAL_RTC_SetDate+0x1c>
 80077ee:	2302      	movs	r3, #2
 80077f0:	e071      	b.n	80078d6 <HAL_RTC_SetDate+0x100>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2201      	movs	r2, #1
 80077f6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2202      	movs	r2, #2
 80077fc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10e      	bne.n	8007822 <HAL_RTC_SetDate+0x4c>
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	785b      	ldrb	r3, [r3, #1]
 8007808:	f003 0310 	and.w	r3, r3, #16
 800780c:	2b00      	cmp	r3, #0
 800780e:	d008      	beq.n	8007822 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	785b      	ldrb	r3, [r3, #1]
 8007814:	f023 0310 	bic.w	r3, r3, #16
 8007818:	b2db      	uxtb	r3, r3
 800781a:	330a      	adds	r3, #10
 800781c:	b2da      	uxtb	r2, r3
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d11c      	bne.n	8007862 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	78db      	ldrb	r3, [r3, #3]
 800782c:	4618      	mov	r0, r3
 800782e:	f000 f927 	bl	8007a80 <RTC_ByteToBcd2>
 8007832:	4603      	mov	r3, r0
 8007834:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	785b      	ldrb	r3, [r3, #1]
 800783a:	4618      	mov	r0, r3
 800783c:	f000 f920 	bl	8007a80 <RTC_ByteToBcd2>
 8007840:	4603      	mov	r3, r0
 8007842:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007844:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	789b      	ldrb	r3, [r3, #2]
 800784a:	4618      	mov	r0, r3
 800784c:	f000 f918 	bl	8007a80 <RTC_ByteToBcd2>
 8007850:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007852:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800785c:	4313      	orrs	r3, r2
 800785e:	617b      	str	r3, [r7, #20]
 8007860:	e00e      	b.n	8007880 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	78db      	ldrb	r3, [r3, #3]
 8007866:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	785b      	ldrb	r3, [r3, #1]
 800786c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800786e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007874:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800787c:	4313      	orrs	r3, r2
 800787e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	22ca      	movs	r2, #202	@ 0xca
 8007886:	625a      	str	r2, [r3, #36]	@ 0x24
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2253      	movs	r2, #83	@ 0x53
 800788e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 f899 	bl	80079c8 <RTC_EnterInitMode>
 8007896:	4603      	mov	r3, r0
 8007898:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800789a:	7cfb      	ldrb	r3, [r7, #19]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10c      	bne.n	80078ba <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80078aa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80078ae:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 f8c0 	bl	8007a36 <RTC_ExitInitMode>
 80078b6:	4603      	mov	r3, r0
 80078b8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80078ba:	7cfb      	ldrb	r3, [r7, #19]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d102      	bne.n	80078c6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2201      	movs	r2, #1
 80078c4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	22ff      	movs	r2, #255	@ 0xff
 80078cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	771a      	strb	r2, [r3, #28]

  return status;
 80078d4:	7cfb      	ldrb	r3, [r7, #19]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	371c      	adds	r7, #28
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd90      	pop	{r4, r7, pc}

080078de <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b086      	sub	sp, #24
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	60f8      	str	r0, [r7, #12]
 80078e6:	60b9      	str	r1, [r7, #8]
 80078e8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80078ea:	2300      	movs	r3, #0
 80078ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80078f8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80078fc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	0c1b      	lsrs	r3, r3, #16
 8007902:	b2da      	uxtb	r2, r3
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	0a1b      	lsrs	r3, r3, #8
 800790c:	b2db      	uxtb	r3, r3
 800790e:	f003 031f 	and.w	r3, r3, #31
 8007912:	b2da      	uxtb	r2, r3
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	b2db      	uxtb	r3, r3
 800791c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007920:	b2da      	uxtb	r2, r3
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	0b5b      	lsrs	r3, r3, #13
 800792a:	b2db      	uxtb	r3, r3
 800792c:	f003 0307 	and.w	r3, r3, #7
 8007930:	b2da      	uxtb	r2, r3
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d11a      	bne.n	8007972 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	78db      	ldrb	r3, [r3, #3]
 8007940:	4618      	mov	r0, r3
 8007942:	f000 f8bb 	bl	8007abc <RTC_Bcd2ToByte>
 8007946:	4603      	mov	r3, r0
 8007948:	461a      	mov	r2, r3
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	785b      	ldrb	r3, [r3, #1]
 8007952:	4618      	mov	r0, r3
 8007954:	f000 f8b2 	bl	8007abc <RTC_Bcd2ToByte>
 8007958:	4603      	mov	r3, r0
 800795a:	461a      	mov	r2, r3
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	789b      	ldrb	r3, [r3, #2]
 8007964:	4618      	mov	r0, r3
 8007966:	f000 f8a9 	bl	8007abc <RTC_Bcd2ToByte>
 800796a:	4603      	mov	r3, r0
 800796c:	461a      	mov	r2, r3
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3718      	adds	r7, #24
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007984:	2300      	movs	r3, #0
 8007986:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a0d      	ldr	r2, [pc, #52]	@ (80079c4 <HAL_RTC_WaitForSynchro+0x48>)
 800798e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007990:	f7fc ff56 	bl	8004840 <HAL_GetTick>
 8007994:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007996:	e009      	b.n	80079ac <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007998:	f7fc ff52 	bl	8004840 <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80079a6:	d901      	bls.n	80079ac <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e007      	b.n	80079bc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	f003 0320 	and.w	r3, r3, #32
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d0ee      	beq.n	8007998 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	00013f5f 	.word	0x00013f5f

080079c8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80079d0:	2300      	movs	r3, #0
 80079d2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80079d4:	2300      	movs	r3, #0
 80079d6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d122      	bne.n	8007a2c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68da      	ldr	r2, [r3, #12]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80079f4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80079f6:	f7fc ff23 	bl	8004840 <HAL_GetTick>
 80079fa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80079fc:	e00c      	b.n	8007a18 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80079fe:	f7fc ff1f 	bl	8004840 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a0c:	d904      	bls.n	8007a18 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2204      	movs	r2, #4
 8007a12:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d102      	bne.n	8007a2c <RTC_EnterInitMode+0x64>
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d1e8      	bne.n	80079fe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b084      	sub	sp, #16
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68da      	ldr	r2, [r3, #12]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007a50:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f003 0320 	and.w	r3, r3, #32
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10a      	bne.n	8007a76 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7ff ff8b 	bl	800797c <HAL_RTC_WaitForSynchro>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d004      	beq.n	8007a76 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2204      	movs	r2, #4
 8007a70:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	4603      	mov	r3, r0
 8007a88:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8007a8e:	e005      	b.n	8007a9c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3301      	adds	r3, #1
 8007a94:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8007a96:	79fb      	ldrb	r3, [r7, #7]
 8007a98:	3b0a      	subs	r3, #10
 8007a9a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007a9c:	79fb      	ldrb	r3, [r7, #7]
 8007a9e:	2b09      	cmp	r3, #9
 8007aa0:	d8f6      	bhi.n	8007a90 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	011b      	lsls	r3, r3, #4
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	b2db      	uxtb	r3, r3
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8007aca:	79fb      	ldrb	r3, [r7, #7]
 8007acc:	091b      	lsrs	r3, r3, #4
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	b2da      	uxtb	r2, r3
 8007ae0:	79fb      	ldrb	r3, [r7, #7]
 8007ae2:	f003 030f 	and.w	r3, r3, #15
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	4413      	add	r3, r2
 8007aea:	b2db      	uxtb	r3, r3
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3714      	adds	r7, #20
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e07b      	b.n	8007c02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d108      	bne.n	8007b24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b1a:	d009      	beq.n	8007b30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	61da      	str	r2, [r3, #28]
 8007b22:	e005      	b.n	8007b30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d106      	bne.n	8007b50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7fa fb08 	bl	8002160 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2202      	movs	r2, #2
 8007b54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b82:	431a      	orrs	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	f003 0302 	and.w	r3, r3, #2
 8007b8c:	431a      	orrs	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	431a      	orrs	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	69db      	ldr	r3, [r3, #28]
 8007ba6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007baa:	431a      	orrs	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a1b      	ldr	r3, [r3, #32]
 8007bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bb4:	ea42 0103 	orr.w	r1, r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bbc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	0c1b      	lsrs	r3, r3, #16
 8007bce:	f003 0104 	and.w	r1, r3, #4
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd6:	f003 0210 	and.w	r2, r3, #16
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	69da      	ldr	r2, [r3, #28]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007bf0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b088      	sub	sp, #32
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	60f8      	str	r0, [r7, #12]
 8007c12:	60b9      	str	r1, [r7, #8]
 8007c14:	603b      	str	r3, [r7, #0]
 8007c16:	4613      	mov	r3, r2
 8007c18:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c1a:	f7fc fe11 	bl	8004840 <HAL_GetTick>
 8007c1e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007c20:	88fb      	ldrh	r3, [r7, #6]
 8007c22:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d001      	beq.n	8007c34 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007c30:	2302      	movs	r3, #2
 8007c32:	e12a      	b.n	8007e8a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d002      	beq.n	8007c40 <HAL_SPI_Transmit+0x36>
 8007c3a:	88fb      	ldrh	r3, [r7, #6]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d101      	bne.n	8007c44 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e122      	b.n	8007e8a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d101      	bne.n	8007c52 <HAL_SPI_Transmit+0x48>
 8007c4e:	2302      	movs	r3, #2
 8007c50:	e11b      	b.n	8007e8a <HAL_SPI_Transmit+0x280>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2203      	movs	r2, #3
 8007c5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	88fa      	ldrh	r2, [r7, #6]
 8007c72:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	88fa      	ldrh	r2, [r7, #6]
 8007c78:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ca0:	d10f      	bne.n	8007cc2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007cc0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ccc:	2b40      	cmp	r3, #64	@ 0x40
 8007cce:	d007      	beq.n	8007ce0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ce8:	d152      	bne.n	8007d90 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <HAL_SPI_Transmit+0xee>
 8007cf2:	8b7b      	ldrh	r3, [r7, #26]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d145      	bne.n	8007d84 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cfc:	881a      	ldrh	r2, [r3, #0]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d08:	1c9a      	adds	r2, r3, #2
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	3b01      	subs	r3, #1
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007d1c:	e032      	b.n	8007d84 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f003 0302 	and.w	r3, r3, #2
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d112      	bne.n	8007d52 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d30:	881a      	ldrh	r2, [r3, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d3c:	1c9a      	adds	r2, r3, #2
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007d50:	e018      	b.n	8007d84 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d52:	f7fc fd75 	bl	8004840 <HAL_GetTick>
 8007d56:	4602      	mov	r2, r0
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	683a      	ldr	r2, [r7, #0]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d803      	bhi.n	8007d6a <HAL_SPI_Transmit+0x160>
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d68:	d102      	bne.n	8007d70 <HAL_SPI_Transmit+0x166>
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d109      	bne.n	8007d84 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e082      	b.n	8007e8a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1c7      	bne.n	8007d1e <HAL_SPI_Transmit+0x114>
 8007d8e:	e053      	b.n	8007e38 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d002      	beq.n	8007d9e <HAL_SPI_Transmit+0x194>
 8007d98:	8b7b      	ldrh	r3, [r7, #26]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d147      	bne.n	8007e2e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	330c      	adds	r3, #12
 8007da8:	7812      	ldrb	r2, [r2, #0]
 8007daa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007db0:	1c5a      	adds	r2, r3, #1
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007dc4:	e033      	b.n	8007e2e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	f003 0302 	and.w	r3, r3, #2
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d113      	bne.n	8007dfc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	330c      	adds	r3, #12
 8007dde:	7812      	ldrb	r2, [r2, #0]
 8007de0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de6:	1c5a      	adds	r2, r3, #1
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	3b01      	subs	r3, #1
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007dfa:	e018      	b.n	8007e2e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007dfc:	f7fc fd20 	bl	8004840 <HAL_GetTick>
 8007e00:	4602      	mov	r2, r0
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	683a      	ldr	r2, [r7, #0]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d803      	bhi.n	8007e14 <HAL_SPI_Transmit+0x20a>
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e12:	d102      	bne.n	8007e1a <HAL_SPI_Transmit+0x210>
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d109      	bne.n	8007e2e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e02d      	b.n	8007e8a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1c6      	bne.n	8007dc6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e38:	69fa      	ldr	r2, [r7, #28]
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 fa67 	bl	8008310 <SPI_EndRxTxTransaction>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d002      	beq.n	8007e4e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2220      	movs	r2, #32
 8007e4c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10a      	bne.n	8007e6c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e56:	2300      	movs	r3, #0
 8007e58:	617b      	str	r3, [r7, #20]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	617b      	str	r3, [r7, #20]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	617b      	str	r3, [r7, #20]
 8007e6a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d001      	beq.n	8007e88 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e000      	b.n	8007e8a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007e88:	2300      	movs	r3, #0
  }
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3720      	adds	r7, #32
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b08a      	sub	sp, #40	@ 0x28
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	60f8      	str	r0, [r7, #12]
 8007e9a:	60b9      	str	r1, [r7, #8]
 8007e9c:	607a      	str	r2, [r7, #4]
 8007e9e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ea4:	f7fc fccc 	bl	8004840 <HAL_GetTick>
 8007ea8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007eb0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007eb8:	887b      	ldrh	r3, [r7, #2]
 8007eba:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ebc:	7ffb      	ldrb	r3, [r7, #31]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d00c      	beq.n	8007edc <HAL_SPI_TransmitReceive+0x4a>
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ec8:	d106      	bne.n	8007ed8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d102      	bne.n	8007ed8 <HAL_SPI_TransmitReceive+0x46>
 8007ed2:	7ffb      	ldrb	r3, [r7, #31]
 8007ed4:	2b04      	cmp	r3, #4
 8007ed6:	d001      	beq.n	8007edc <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007ed8:	2302      	movs	r3, #2
 8007eda:	e17f      	b.n	80081dc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d005      	beq.n	8007eee <HAL_SPI_TransmitReceive+0x5c>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <HAL_SPI_TransmitReceive+0x5c>
 8007ee8:	887b      	ldrh	r3, [r7, #2]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e174      	b.n	80081dc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d101      	bne.n	8007f00 <HAL_SPI_TransmitReceive+0x6e>
 8007efc:	2302      	movs	r3, #2
 8007efe:	e16d      	b.n	80081dc <HAL_SPI_TransmitReceive+0x34a>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	2b04      	cmp	r3, #4
 8007f12:	d003      	beq.n	8007f1c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2205      	movs	r2, #5
 8007f18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	887a      	ldrh	r2, [r7, #2]
 8007f2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	887a      	ldrh	r2, [r7, #2]
 8007f32:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	887a      	ldrh	r2, [r7, #2]
 8007f3e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	887a      	ldrh	r2, [r7, #2]
 8007f44:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f5c:	2b40      	cmp	r3, #64	@ 0x40
 8007f5e:	d007      	beq.n	8007f70 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f78:	d17e      	bne.n	8008078 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d002      	beq.n	8007f88 <HAL_SPI_TransmitReceive+0xf6>
 8007f82:	8afb      	ldrh	r3, [r7, #22]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d16c      	bne.n	8008062 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f8c:	881a      	ldrh	r2, [r3, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f98:	1c9a      	adds	r2, r3, #2
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fac:	e059      	b.n	8008062 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f003 0302 	and.w	r3, r3, #2
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d11b      	bne.n	8007ff4 <HAL_SPI_TransmitReceive+0x162>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d016      	beq.n	8007ff4 <HAL_SPI_TransmitReceive+0x162>
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d113      	bne.n	8007ff4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fd0:	881a      	ldrh	r2, [r3, #0]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fdc:	1c9a      	adds	r2, r3, #2
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	f003 0301 	and.w	r3, r3, #1
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d119      	bne.n	8008036 <HAL_SPI_TransmitReceive+0x1a4>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008006:	b29b      	uxth	r3, r3
 8008008:	2b00      	cmp	r3, #0
 800800a:	d014      	beq.n	8008036 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68da      	ldr	r2, [r3, #12]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008016:	b292      	uxth	r2, r2
 8008018:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800801e:	1c9a      	adds	r2, r3, #2
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008028:	b29b      	uxth	r3, r3
 800802a:	3b01      	subs	r3, #1
 800802c:	b29a      	uxth	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008032:	2301      	movs	r3, #1
 8008034:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008036:	f7fc fc03 	bl	8004840 <HAL_GetTick>
 800803a:	4602      	mov	r2, r0
 800803c:	6a3b      	ldr	r3, [r7, #32]
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008042:	429a      	cmp	r2, r3
 8008044:	d80d      	bhi.n	8008062 <HAL_SPI_TransmitReceive+0x1d0>
 8008046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804c:	d009      	beq.n	8008062 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e0bc      	b.n	80081dc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008066:	b29b      	uxth	r3, r3
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1a0      	bne.n	8007fae <HAL_SPI_TransmitReceive+0x11c>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008070:	b29b      	uxth	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	d19b      	bne.n	8007fae <HAL_SPI_TransmitReceive+0x11c>
 8008076:	e082      	b.n	800817e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d002      	beq.n	8008086 <HAL_SPI_TransmitReceive+0x1f4>
 8008080:	8afb      	ldrh	r3, [r7, #22]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d171      	bne.n	800816a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	330c      	adds	r3, #12
 8008090:	7812      	ldrb	r2, [r2, #0]
 8008092:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008098:	1c5a      	adds	r2, r3, #1
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	3b01      	subs	r3, #1
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080ac:	e05d      	b.n	800816a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f003 0302 	and.w	r3, r3, #2
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d11c      	bne.n	80080f6 <HAL_SPI_TransmitReceive+0x264>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d017      	beq.n	80080f6 <HAL_SPI_TransmitReceive+0x264>
 80080c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d114      	bne.n	80080f6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	330c      	adds	r3, #12
 80080d6:	7812      	ldrb	r2, [r2, #0]
 80080d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080de:	1c5a      	adds	r2, r3, #1
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	3b01      	subs	r3, #1
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80080f2:	2300      	movs	r3, #0
 80080f4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	f003 0301 	and.w	r3, r3, #1
 8008100:	2b01      	cmp	r3, #1
 8008102:	d119      	bne.n	8008138 <HAL_SPI_TransmitReceive+0x2a6>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008108:	b29b      	uxth	r3, r3
 800810a:	2b00      	cmp	r3, #0
 800810c:	d014      	beq.n	8008138 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68da      	ldr	r2, [r3, #12]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008118:	b2d2      	uxtb	r2, r2
 800811a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800812a:	b29b      	uxth	r3, r3
 800812c:	3b01      	subs	r3, #1
 800812e:	b29a      	uxth	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008134:	2301      	movs	r3, #1
 8008136:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008138:	f7fc fb82 	bl	8004840 <HAL_GetTick>
 800813c:	4602      	mov	r2, r0
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008144:	429a      	cmp	r2, r3
 8008146:	d803      	bhi.n	8008150 <HAL_SPI_TransmitReceive+0x2be>
 8008148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814e:	d102      	bne.n	8008156 <HAL_SPI_TransmitReceive+0x2c4>
 8008150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008152:	2b00      	cmp	r3, #0
 8008154:	d109      	bne.n	800816a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e038      	b.n	80081dc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800816e:	b29b      	uxth	r3, r3
 8008170:	2b00      	cmp	r3, #0
 8008172:	d19c      	bne.n	80080ae <HAL_SPI_TransmitReceive+0x21c>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008178:	b29b      	uxth	r3, r3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d197      	bne.n	80080ae <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800817e:	6a3a      	ldr	r2, [r7, #32]
 8008180:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f000 f8c4 	bl	8008310 <SPI_EndRxTxTransaction>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d008      	beq.n	80081a0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2220      	movs	r2, #32
 8008192:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e01d      	b.n	80081dc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d10a      	bne.n	80081be <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081a8:	2300      	movs	r3, #0
 80081aa:	613b      	str	r3, [r7, #16]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	613b      	str	r3, [r7, #16]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	613b      	str	r3, [r7, #16]
 80081bc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d001      	beq.n	80081da <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e000      	b.n	80081dc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80081da:	2300      	movs	r3, #0
  }
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3728      	adds	r7, #40	@ 0x28
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80081f2:	b2db      	uxtb	r3, r3
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b088      	sub	sp, #32
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	603b      	str	r3, [r7, #0]
 800820c:	4613      	mov	r3, r2
 800820e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008210:	f7fc fb16 	bl	8004840 <HAL_GetTick>
 8008214:	4602      	mov	r2, r0
 8008216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008218:	1a9b      	subs	r3, r3, r2
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	4413      	add	r3, r2
 800821e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008220:	f7fc fb0e 	bl	8004840 <HAL_GetTick>
 8008224:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008226:	4b39      	ldr	r3, [pc, #228]	@ (800830c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	015b      	lsls	r3, r3, #5
 800822c:	0d1b      	lsrs	r3, r3, #20
 800822e:	69fa      	ldr	r2, [r7, #28]
 8008230:	fb02 f303 	mul.w	r3, r2, r3
 8008234:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008236:	e054      	b.n	80082e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800823e:	d050      	beq.n	80082e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008240:	f7fc fafe 	bl	8004840 <HAL_GetTick>
 8008244:	4602      	mov	r2, r0
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	69fa      	ldr	r2, [r7, #28]
 800824c:	429a      	cmp	r2, r3
 800824e:	d902      	bls.n	8008256 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d13d      	bne.n	80082d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	685a      	ldr	r2, [r3, #4]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008264:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800826e:	d111      	bne.n	8008294 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008278:	d004      	beq.n	8008284 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008282:	d107      	bne.n	8008294 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008292:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008298:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800829c:	d10f      	bne.n	80082be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80082bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e017      	b.n	8008302 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d101      	bne.n	80082dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80082d8:	2300      	movs	r3, #0
 80082da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	3b01      	subs	r3, #1
 80082e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	689a      	ldr	r2, [r3, #8]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	4013      	ands	r3, r2
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	bf0c      	ite	eq
 80082f2:	2301      	moveq	r3, #1
 80082f4:	2300      	movne	r3, #0
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	461a      	mov	r2, r3
 80082fa:	79fb      	ldrb	r3, [r7, #7]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d19b      	bne.n	8008238 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3720      	adds	r7, #32
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	20000004 	.word	0x20000004

08008310 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b088      	sub	sp, #32
 8008314:	af02      	add	r7, sp, #8
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	2201      	movs	r2, #1
 8008324:	2102      	movs	r1, #2
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f7ff ff6a 	bl	8008200 <SPI_WaitFlagStateUntilTimeout>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d007      	beq.n	8008342 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008336:	f043 0220 	orr.w	r2, r3, #32
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800833e:	2303      	movs	r3, #3
 8008340:	e032      	b.n	80083a8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008342:	4b1b      	ldr	r3, [pc, #108]	@ (80083b0 <SPI_EndRxTxTransaction+0xa0>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a1b      	ldr	r2, [pc, #108]	@ (80083b4 <SPI_EndRxTxTransaction+0xa4>)
 8008348:	fba2 2303 	umull	r2, r3, r2, r3
 800834c:	0d5b      	lsrs	r3, r3, #21
 800834e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008352:	fb02 f303 	mul.w	r3, r2, r3
 8008356:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008360:	d112      	bne.n	8008388 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	9300      	str	r3, [sp, #0]
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	2200      	movs	r2, #0
 800836a:	2180      	movs	r1, #128	@ 0x80
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f7ff ff47 	bl	8008200 <SPI_WaitFlagStateUntilTimeout>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d016      	beq.n	80083a6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800837c:	f043 0220 	orr.w	r2, r3, #32
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008384:	2303      	movs	r3, #3
 8008386:	e00f      	b.n	80083a8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00a      	beq.n	80083a4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	3b01      	subs	r3, #1
 8008392:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800839e:	2b80      	cmp	r3, #128	@ 0x80
 80083a0:	d0f2      	beq.n	8008388 <SPI_EndRxTxTransaction+0x78>
 80083a2:	e000      	b.n	80083a6 <SPI_EndRxTxTransaction+0x96>
        break;
 80083a4:	bf00      	nop
  }

  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3718      	adds	r7, #24
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	20000004 	.word	0x20000004
 80083b4:	165e9f81 	.word	0x165e9f81

080083b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d101      	bne.n	80083ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	e041      	b.n	800844e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d106      	bne.n	80083e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f7f9 ff18 	bl	8002214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2202      	movs	r2, #2
 80083e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	3304      	adds	r3, #4
 80083f4:	4619      	mov	r1, r3
 80083f6:	4610      	mov	r0, r2
 80083f8:	f000 fa9e 	bl	8008938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008466:	b2db      	uxtb	r3, r3
 8008468:	2b01      	cmp	r3, #1
 800846a:	d001      	beq.n	8008470 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e044      	b.n	80084fa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2202      	movs	r2, #2
 8008474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68da      	ldr	r2, [r3, #12]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f042 0201 	orr.w	r2, r2, #1
 8008486:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a1e      	ldr	r2, [pc, #120]	@ (8008508 <HAL_TIM_Base_Start_IT+0xb0>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d018      	beq.n	80084c4 <HAL_TIM_Base_Start_IT+0x6c>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800849a:	d013      	beq.n	80084c4 <HAL_TIM_Base_Start_IT+0x6c>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a1a      	ldr	r2, [pc, #104]	@ (800850c <HAL_TIM_Base_Start_IT+0xb4>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d00e      	beq.n	80084c4 <HAL_TIM_Base_Start_IT+0x6c>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a19      	ldr	r2, [pc, #100]	@ (8008510 <HAL_TIM_Base_Start_IT+0xb8>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d009      	beq.n	80084c4 <HAL_TIM_Base_Start_IT+0x6c>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a17      	ldr	r2, [pc, #92]	@ (8008514 <HAL_TIM_Base_Start_IT+0xbc>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d004      	beq.n	80084c4 <HAL_TIM_Base_Start_IT+0x6c>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a16      	ldr	r2, [pc, #88]	@ (8008518 <HAL_TIM_Base_Start_IT+0xc0>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d111      	bne.n	80084e8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	f003 0307 	and.w	r3, r3, #7
 80084ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2b06      	cmp	r3, #6
 80084d4:	d010      	beq.n	80084f8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f042 0201 	orr.w	r2, r2, #1
 80084e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084e6:	e007      	b.n	80084f8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f042 0201 	orr.w	r2, r2, #1
 80084f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3714      	adds	r7, #20
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop
 8008508:	40010000 	.word	0x40010000
 800850c:	40000400 	.word	0x40000400
 8008510:	40000800 	.word	0x40000800
 8008514:	40000c00 	.word	0x40000c00
 8008518:	40014000 	.word	0x40014000

0800851c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68da      	ldr	r2, [r3, #12]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f022 0201 	bic.w	r2, r2, #1
 8008532:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	6a1a      	ldr	r2, [r3, #32]
 800853a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800853e:	4013      	ands	r3, r2
 8008540:	2b00      	cmp	r3, #0
 8008542:	d10f      	bne.n	8008564 <HAL_TIM_Base_Stop_IT+0x48>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6a1a      	ldr	r2, [r3, #32]
 800854a:	f240 4344 	movw	r3, #1092	@ 0x444
 800854e:	4013      	ands	r3, r2
 8008550:	2b00      	cmp	r3, #0
 8008552:	d107      	bne.n	8008564 <HAL_TIM_Base_Stop_IT+0x48>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f022 0201 	bic.w	r2, r2, #1
 8008562:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b084      	sub	sp, #16
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	f003 0302 	and.w	r3, r3, #2
 8008598:	2b00      	cmp	r3, #0
 800859a:	d020      	beq.n	80085de <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f003 0302 	and.w	r3, r3, #2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d01b      	beq.n	80085de <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f06f 0202 	mvn.w	r2, #2
 80085ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	f003 0303 	and.w	r3, r3, #3
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d003      	beq.n	80085cc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f999 	bl	80088fc <HAL_TIM_IC_CaptureCallback>
 80085ca:	e005      	b.n	80085d8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f98b 	bl	80088e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f99c 	bl	8008910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	f003 0304 	and.w	r3, r3, #4
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d020      	beq.n	800862a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f003 0304 	and.w	r3, r3, #4
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d01b      	beq.n	800862a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f06f 0204 	mvn.w	r2, #4
 80085fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2202      	movs	r2, #2
 8008600:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800860c:	2b00      	cmp	r3, #0
 800860e:	d003      	beq.n	8008618 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f973 	bl	80088fc <HAL_TIM_IC_CaptureCallback>
 8008616:	e005      	b.n	8008624 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f965 	bl	80088e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f976 	bl	8008910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	f003 0308 	and.w	r3, r3, #8
 8008630:	2b00      	cmp	r3, #0
 8008632:	d020      	beq.n	8008676 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f003 0308 	and.w	r3, r3, #8
 800863a:	2b00      	cmp	r3, #0
 800863c:	d01b      	beq.n	8008676 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f06f 0208 	mvn.w	r2, #8
 8008646:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2204      	movs	r2, #4
 800864c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	f003 0303 	and.w	r3, r3, #3
 8008658:	2b00      	cmp	r3, #0
 800865a:	d003      	beq.n	8008664 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f94d 	bl	80088fc <HAL_TIM_IC_CaptureCallback>
 8008662:	e005      	b.n	8008670 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f93f 	bl	80088e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f950 	bl	8008910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	f003 0310 	and.w	r3, r3, #16
 800867c:	2b00      	cmp	r3, #0
 800867e:	d020      	beq.n	80086c2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f003 0310 	and.w	r3, r3, #16
 8008686:	2b00      	cmp	r3, #0
 8008688:	d01b      	beq.n	80086c2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f06f 0210 	mvn.w	r2, #16
 8008692:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2208      	movs	r2, #8
 8008698:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	69db      	ldr	r3, [r3, #28]
 80086a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d003      	beq.n	80086b0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 f927 	bl	80088fc <HAL_TIM_IC_CaptureCallback>
 80086ae:	e005      	b.n	80086bc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f919 	bl	80088e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f92a 	bl	8008910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	f003 0301 	and.w	r3, r3, #1
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00c      	beq.n	80086e6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d007      	beq.n	80086e6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f06f 0201 	mvn.w	r2, #1
 80086de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7f9 fc09 	bl	8001ef8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00c      	beq.n	800870a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d007      	beq.n	800870a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 fab5 	bl	8008c74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00c      	beq.n	800872e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800871a:	2b00      	cmp	r3, #0
 800871c:	d007      	beq.n	800872e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f8fb 	bl	8008924 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	f003 0320 	and.w	r3, r3, #32
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00c      	beq.n	8008752 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f003 0320 	and.w	r3, r3, #32
 800873e:	2b00      	cmp	r3, #0
 8008740:	d007      	beq.n	8008752 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f06f 0220 	mvn.w	r2, #32
 800874a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fa87 	bl	8008c60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008752:	bf00      	nop
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b084      	sub	sp, #16
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008764:	2300      	movs	r3, #0
 8008766:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800876e:	2b01      	cmp	r3, #1
 8008770:	d101      	bne.n	8008776 <HAL_TIM_ConfigClockSource+0x1c>
 8008772:	2302      	movs	r3, #2
 8008774:	e0b4      	b.n	80088e0 <HAL_TIM_ConfigClockSource+0x186>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2202      	movs	r2, #2
 8008782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008794:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800879c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087ae:	d03e      	beq.n	800882e <HAL_TIM_ConfigClockSource+0xd4>
 80087b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087b4:	f200 8087 	bhi.w	80088c6 <HAL_TIM_ConfigClockSource+0x16c>
 80087b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087bc:	f000 8086 	beq.w	80088cc <HAL_TIM_ConfigClockSource+0x172>
 80087c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087c4:	d87f      	bhi.n	80088c6 <HAL_TIM_ConfigClockSource+0x16c>
 80087c6:	2b70      	cmp	r3, #112	@ 0x70
 80087c8:	d01a      	beq.n	8008800 <HAL_TIM_ConfigClockSource+0xa6>
 80087ca:	2b70      	cmp	r3, #112	@ 0x70
 80087cc:	d87b      	bhi.n	80088c6 <HAL_TIM_ConfigClockSource+0x16c>
 80087ce:	2b60      	cmp	r3, #96	@ 0x60
 80087d0:	d050      	beq.n	8008874 <HAL_TIM_ConfigClockSource+0x11a>
 80087d2:	2b60      	cmp	r3, #96	@ 0x60
 80087d4:	d877      	bhi.n	80088c6 <HAL_TIM_ConfigClockSource+0x16c>
 80087d6:	2b50      	cmp	r3, #80	@ 0x50
 80087d8:	d03c      	beq.n	8008854 <HAL_TIM_ConfigClockSource+0xfa>
 80087da:	2b50      	cmp	r3, #80	@ 0x50
 80087dc:	d873      	bhi.n	80088c6 <HAL_TIM_ConfigClockSource+0x16c>
 80087de:	2b40      	cmp	r3, #64	@ 0x40
 80087e0:	d058      	beq.n	8008894 <HAL_TIM_ConfigClockSource+0x13a>
 80087e2:	2b40      	cmp	r3, #64	@ 0x40
 80087e4:	d86f      	bhi.n	80088c6 <HAL_TIM_ConfigClockSource+0x16c>
 80087e6:	2b30      	cmp	r3, #48	@ 0x30
 80087e8:	d064      	beq.n	80088b4 <HAL_TIM_ConfigClockSource+0x15a>
 80087ea:	2b30      	cmp	r3, #48	@ 0x30
 80087ec:	d86b      	bhi.n	80088c6 <HAL_TIM_ConfigClockSource+0x16c>
 80087ee:	2b20      	cmp	r3, #32
 80087f0:	d060      	beq.n	80088b4 <HAL_TIM_ConfigClockSource+0x15a>
 80087f2:	2b20      	cmp	r3, #32
 80087f4:	d867      	bhi.n	80088c6 <HAL_TIM_ConfigClockSource+0x16c>
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d05c      	beq.n	80088b4 <HAL_TIM_ConfigClockSource+0x15a>
 80087fa:	2b10      	cmp	r3, #16
 80087fc:	d05a      	beq.n	80088b4 <HAL_TIM_ConfigClockSource+0x15a>
 80087fe:	e062      	b.n	80088c6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008810:	f000 f998 	bl	8008b44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008822:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	609a      	str	r2, [r3, #8]
      break;
 800882c:	e04f      	b.n	80088ce <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800883e:	f000 f981 	bl	8008b44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	689a      	ldr	r2, [r3, #8]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008850:	609a      	str	r2, [r3, #8]
      break;
 8008852:	e03c      	b.n	80088ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008860:	461a      	mov	r2, r3
 8008862:	f000 f8f5 	bl	8008a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2150      	movs	r1, #80	@ 0x50
 800886c:	4618      	mov	r0, r3
 800886e:	f000 f94e 	bl	8008b0e <TIM_ITRx_SetConfig>
      break;
 8008872:	e02c      	b.n	80088ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008880:	461a      	mov	r2, r3
 8008882:	f000 f914 	bl	8008aae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2160      	movs	r1, #96	@ 0x60
 800888c:	4618      	mov	r0, r3
 800888e:	f000 f93e 	bl	8008b0e <TIM_ITRx_SetConfig>
      break;
 8008892:	e01c      	b.n	80088ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088a0:	461a      	mov	r2, r3
 80088a2:	f000 f8d5 	bl	8008a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2140      	movs	r1, #64	@ 0x40
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 f92e 	bl	8008b0e <TIM_ITRx_SetConfig>
      break;
 80088b2:	e00c      	b.n	80088ce <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4619      	mov	r1, r3
 80088be:	4610      	mov	r0, r2
 80088c0:	f000 f925 	bl	8008b0e <TIM_ITRx_SetConfig>
      break;
 80088c4:	e003      	b.n	80088ce <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	73fb      	strb	r3, [r7, #15]
      break;
 80088ca:	e000      	b.n	80088ce <HAL_TIM_ConfigClockSource+0x174>
      break;
 80088cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80088de:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008918:	bf00      	nop
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a3a      	ldr	r2, [pc, #232]	@ (8008a34 <TIM_Base_SetConfig+0xfc>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d00f      	beq.n	8008970 <TIM_Base_SetConfig+0x38>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008956:	d00b      	beq.n	8008970 <TIM_Base_SetConfig+0x38>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a37      	ldr	r2, [pc, #220]	@ (8008a38 <TIM_Base_SetConfig+0x100>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d007      	beq.n	8008970 <TIM_Base_SetConfig+0x38>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a36      	ldr	r2, [pc, #216]	@ (8008a3c <TIM_Base_SetConfig+0x104>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d003      	beq.n	8008970 <TIM_Base_SetConfig+0x38>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a35      	ldr	r2, [pc, #212]	@ (8008a40 <TIM_Base_SetConfig+0x108>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d108      	bne.n	8008982 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	4313      	orrs	r3, r2
 8008980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a2b      	ldr	r2, [pc, #172]	@ (8008a34 <TIM_Base_SetConfig+0xfc>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d01b      	beq.n	80089c2 <TIM_Base_SetConfig+0x8a>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008990:	d017      	beq.n	80089c2 <TIM_Base_SetConfig+0x8a>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a28      	ldr	r2, [pc, #160]	@ (8008a38 <TIM_Base_SetConfig+0x100>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d013      	beq.n	80089c2 <TIM_Base_SetConfig+0x8a>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a27      	ldr	r2, [pc, #156]	@ (8008a3c <TIM_Base_SetConfig+0x104>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d00f      	beq.n	80089c2 <TIM_Base_SetConfig+0x8a>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a26      	ldr	r2, [pc, #152]	@ (8008a40 <TIM_Base_SetConfig+0x108>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d00b      	beq.n	80089c2 <TIM_Base_SetConfig+0x8a>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a25      	ldr	r2, [pc, #148]	@ (8008a44 <TIM_Base_SetConfig+0x10c>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d007      	beq.n	80089c2 <TIM_Base_SetConfig+0x8a>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a24      	ldr	r2, [pc, #144]	@ (8008a48 <TIM_Base_SetConfig+0x110>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d003      	beq.n	80089c2 <TIM_Base_SetConfig+0x8a>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a23      	ldr	r2, [pc, #140]	@ (8008a4c <TIM_Base_SetConfig+0x114>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d108      	bne.n	80089d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	4313      	orrs	r3, r2
 80089e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	689a      	ldr	r2, [r3, #8]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a0e      	ldr	r2, [pc, #56]	@ (8008a34 <TIM_Base_SetConfig+0xfc>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d103      	bne.n	8008a08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	691a      	ldr	r2, [r3, #16]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	f003 0301 	and.w	r3, r3, #1
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d105      	bne.n	8008a26 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	f023 0201 	bic.w	r2, r3, #1
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	611a      	str	r2, [r3, #16]
  }
}
 8008a26:	bf00      	nop
 8008a28:	3714      	adds	r7, #20
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	40010000 	.word	0x40010000
 8008a38:	40000400 	.word	0x40000400
 8008a3c:	40000800 	.word	0x40000800
 8008a40:	40000c00 	.word	0x40000c00
 8008a44:	40014000 	.word	0x40014000
 8008a48:	40014400 	.word	0x40014400
 8008a4c:	40014800 	.word	0x40014800

08008a50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b087      	sub	sp, #28
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6a1b      	ldr	r3, [r3, #32]
 8008a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	f023 0201 	bic.w	r2, r3, #1
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	699b      	ldr	r3, [r3, #24]
 8008a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	011b      	lsls	r3, r3, #4
 8008a80:	693a      	ldr	r2, [r7, #16]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	f023 030a 	bic.w	r3, r3, #10
 8008a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	697a      	ldr	r2, [r7, #20]
 8008aa0:	621a      	str	r2, [r3, #32]
}
 8008aa2:	bf00      	nop
 8008aa4:	371c      	adds	r7, #28
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	b087      	sub	sp, #28
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	60f8      	str	r0, [r7, #12]
 8008ab6:	60b9      	str	r1, [r7, #8]
 8008ab8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	6a1b      	ldr	r3, [r3, #32]
 8008abe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6a1b      	ldr	r3, [r3, #32]
 8008ac4:	f023 0210 	bic.w	r2, r3, #16
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008ad8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	031b      	lsls	r3, r3, #12
 8008ade:	693a      	ldr	r2, [r7, #16]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008aea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	011b      	lsls	r3, r3, #4
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	693a      	ldr	r2, [r7, #16]
 8008afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	697a      	ldr	r2, [r7, #20]
 8008b00:	621a      	str	r2, [r3, #32]
}
 8008b02:	bf00      	nop
 8008b04:	371c      	adds	r7, #28
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr

08008b0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b0e:	b480      	push	{r7}
 8008b10:	b085      	sub	sp, #20
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
 8008b16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b26:	683a      	ldr	r2, [r7, #0]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	f043 0307 	orr.w	r3, r3, #7
 8008b30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	609a      	str	r2, [r3, #8]
}
 8008b38:	bf00      	nop
 8008b3a:	3714      	adds	r7, #20
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b087      	sub	sp, #28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]
 8008b50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	021a      	lsls	r2, r3, #8
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	431a      	orrs	r2, r3
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	697a      	ldr	r2, [r7, #20]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	697a      	ldr	r2, [r7, #20]
 8008b76:	609a      	str	r2, [r3, #8]
}
 8008b78:	bf00      	nop
 8008b7a:	371c      	adds	r7, #28
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d101      	bne.n	8008b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b98:	2302      	movs	r3, #2
 8008b9a:	e050      	b.n	8008c3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2202      	movs	r2, #2
 8008ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a1c      	ldr	r2, [pc, #112]	@ (8008c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d018      	beq.n	8008c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008be8:	d013      	beq.n	8008c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a18      	ldr	r2, [pc, #96]	@ (8008c50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d00e      	beq.n	8008c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a16      	ldr	r2, [pc, #88]	@ (8008c54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d009      	beq.n	8008c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a15      	ldr	r2, [pc, #84]	@ (8008c58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d004      	beq.n	8008c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a13      	ldr	r2, [pc, #76]	@ (8008c5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d10c      	bne.n	8008c2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68ba      	ldr	r2, [r7, #8]
 8008c2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	40010000 	.word	0x40010000
 8008c50:	40000400 	.word	0x40000400
 8008c54:	40000800 	.word	0x40000800
 8008c58:	40000c00 	.word	0x40000c00
 8008c5c:	40014000 	.word	0x40014000

08008c60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d101      	bne.n	8008c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	e042      	b.n	8008d20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d106      	bne.n	8008cb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f7f9 fad8 	bl	8002264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2224      	movs	r2, #36	@ 0x24
 8008cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68da      	ldr	r2, [r3, #12]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008cca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f973 	bl	8008fb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	691a      	ldr	r2, [r3, #16]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008ce0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	695a      	ldr	r2, [r3, #20]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008cf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	68da      	ldr	r2, [r3, #12]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008d00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2220      	movs	r2, #32
 8008d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2220      	movs	r2, #32
 8008d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b08a      	sub	sp, #40	@ 0x28
 8008d2c:	af02      	add	r7, sp, #8
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	603b      	str	r3, [r7, #0]
 8008d34:	4613      	mov	r3, r2
 8008d36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	2b20      	cmp	r3, #32
 8008d46:	d175      	bne.n	8008e34 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d002      	beq.n	8008d54 <HAL_UART_Transmit+0x2c>
 8008d4e:	88fb      	ldrh	r3, [r7, #6]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d101      	bne.n	8008d58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	e06e      	b.n	8008e36 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2221      	movs	r2, #33	@ 0x21
 8008d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d66:	f7fb fd6b 	bl	8004840 <HAL_GetTick>
 8008d6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	88fa      	ldrh	r2, [r7, #6]
 8008d70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	88fa      	ldrh	r2, [r7, #6]
 8008d76:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d80:	d108      	bne.n	8008d94 <HAL_UART_Transmit+0x6c>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	691b      	ldr	r3, [r3, #16]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d104      	bne.n	8008d94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	61bb      	str	r3, [r7, #24]
 8008d92:	e003      	b.n	8008d9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008d9c:	e02e      	b.n	8008dfc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	9300      	str	r3, [sp, #0]
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	2200      	movs	r2, #0
 8008da6:	2180      	movs	r1, #128	@ 0x80
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f000 f848 	bl	8008e3e <UART_WaitOnFlagUntilTimeout>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d005      	beq.n	8008dc0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2220      	movs	r2, #32
 8008db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	e03a      	b.n	8008e36 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d10b      	bne.n	8008dde <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008dc6:	69bb      	ldr	r3, [r7, #24]
 8008dc8:	881b      	ldrh	r3, [r3, #0]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008dd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	3302      	adds	r3, #2
 8008dda:	61bb      	str	r3, [r7, #24]
 8008ddc:	e007      	b.n	8008dee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	781a      	ldrb	r2, [r3, #0]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	3301      	adds	r3, #1
 8008dec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	3b01      	subs	r3, #1
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1cb      	bne.n	8008d9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	2140      	movs	r1, #64	@ 0x40
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f000 f814 	bl	8008e3e <UART_WaitOnFlagUntilTimeout>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d005      	beq.n	8008e28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2220      	movs	r2, #32
 8008e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e006      	b.n	8008e36 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2220      	movs	r2, #32
 8008e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	e000      	b.n	8008e36 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008e34:	2302      	movs	r3, #2
  }
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3720      	adds	r7, #32
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b086      	sub	sp, #24
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	60f8      	str	r0, [r7, #12]
 8008e46:	60b9      	str	r1, [r7, #8]
 8008e48:	603b      	str	r3, [r7, #0]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e4e:	e03b      	b.n	8008ec8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e50:	6a3b      	ldr	r3, [r7, #32]
 8008e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e56:	d037      	beq.n	8008ec8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e58:	f7fb fcf2 	bl	8004840 <HAL_GetTick>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	1ad3      	subs	r3, r2, r3
 8008e62:	6a3a      	ldr	r2, [r7, #32]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d302      	bcc.n	8008e6e <UART_WaitOnFlagUntilTimeout+0x30>
 8008e68:	6a3b      	ldr	r3, [r7, #32]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d101      	bne.n	8008e72 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	e03a      	b.n	8008ee8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	f003 0304 	and.w	r3, r3, #4
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d023      	beq.n	8008ec8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	2b80      	cmp	r3, #128	@ 0x80
 8008e84:	d020      	beq.n	8008ec8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	2b40      	cmp	r3, #64	@ 0x40
 8008e8a:	d01d      	beq.n	8008ec8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f003 0308 	and.w	r3, r3, #8
 8008e96:	2b08      	cmp	r3, #8
 8008e98:	d116      	bne.n	8008ec8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	617b      	str	r3, [r7, #20]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	617b      	str	r3, [r7, #20]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	617b      	str	r3, [r7, #20]
 8008eae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008eb0:	68f8      	ldr	r0, [r7, #12]
 8008eb2:	f000 f81d 	bl	8008ef0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2208      	movs	r2, #8
 8008eba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e00f      	b.n	8008ee8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	68ba      	ldr	r2, [r7, #8]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	bf0c      	ite	eq
 8008ed8:	2301      	moveq	r3, #1
 8008eda:	2300      	movne	r3, #0
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	461a      	mov	r2, r3
 8008ee0:	79fb      	ldrb	r3, [r7, #7]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d0b4      	beq.n	8008e50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3718      	adds	r7, #24
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b095      	sub	sp, #84	@ 0x54
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	330c      	adds	r3, #12
 8008efe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f02:	e853 3f00 	ldrex	r3, [r3]
 8008f06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	330c      	adds	r3, #12
 8008f16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008f18:	643a      	str	r2, [r7, #64]	@ 0x40
 8008f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f20:	e841 2300 	strex	r3, r2, [r1]
 8008f24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1e5      	bne.n	8008ef8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	3314      	adds	r3, #20
 8008f32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	e853 3f00 	ldrex	r3, [r3]
 8008f3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	f023 0301 	bic.w	r3, r3, #1
 8008f42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	3314      	adds	r3, #20
 8008f4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f54:	e841 2300 	strex	r3, r2, [r1]
 8008f58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1e5      	bne.n	8008f2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d119      	bne.n	8008f9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	330c      	adds	r3, #12
 8008f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	e853 3f00 	ldrex	r3, [r3]
 8008f76:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	f023 0310 	bic.w	r3, r3, #16
 8008f7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	330c      	adds	r3, #12
 8008f86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f88:	61ba      	str	r2, [r7, #24]
 8008f8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8c:	6979      	ldr	r1, [r7, #20]
 8008f8e:	69ba      	ldr	r2, [r7, #24]
 8008f90:	e841 2300 	strex	r3, r2, [r1]
 8008f94:	613b      	str	r3, [r7, #16]
   return(result);
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1e5      	bne.n	8008f68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2220      	movs	r2, #32
 8008fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008faa:	bf00      	nop
 8008fac:	3754      	adds	r7, #84	@ 0x54
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
	...

08008fb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fbc:	b0c0      	sub	sp, #256	@ 0x100
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fd4:	68d9      	ldr	r1, [r3, #12]
 8008fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	ea40 0301 	orr.w	r3, r0, r1
 8008fe0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fe6:	689a      	ldr	r2, [r3, #8]
 8008fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	431a      	orrs	r2, r3
 8008ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ff4:	695b      	ldr	r3, [r3, #20]
 8008ff6:	431a      	orrs	r2, r3
 8008ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009010:	f021 010c 	bic.w	r1, r1, #12
 8009014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800901e:	430b      	orrs	r3, r1
 8009020:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	695b      	ldr	r3, [r3, #20]
 800902a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800902e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009032:	6999      	ldr	r1, [r3, #24]
 8009034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	ea40 0301 	orr.w	r3, r0, r1
 800903e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	4b8f      	ldr	r3, [pc, #572]	@ (8009284 <UART_SetConfig+0x2cc>)
 8009048:	429a      	cmp	r2, r3
 800904a:	d005      	beq.n	8009058 <UART_SetConfig+0xa0>
 800904c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	4b8d      	ldr	r3, [pc, #564]	@ (8009288 <UART_SetConfig+0x2d0>)
 8009054:	429a      	cmp	r2, r3
 8009056:	d104      	bne.n	8009062 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009058:	f7fe f90e 	bl	8007278 <HAL_RCC_GetPCLK2Freq>
 800905c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009060:	e003      	b.n	800906a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009062:	f7fe f8f5 	bl	8007250 <HAL_RCC_GetPCLK1Freq>
 8009066:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800906a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800906e:	69db      	ldr	r3, [r3, #28]
 8009070:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009074:	f040 810c 	bne.w	8009290 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800907c:	2200      	movs	r2, #0
 800907e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009082:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009086:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800908a:	4622      	mov	r2, r4
 800908c:	462b      	mov	r3, r5
 800908e:	1891      	adds	r1, r2, r2
 8009090:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009092:	415b      	adcs	r3, r3
 8009094:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009096:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800909a:	4621      	mov	r1, r4
 800909c:	eb12 0801 	adds.w	r8, r2, r1
 80090a0:	4629      	mov	r1, r5
 80090a2:	eb43 0901 	adc.w	r9, r3, r1
 80090a6:	f04f 0200 	mov.w	r2, #0
 80090aa:	f04f 0300 	mov.w	r3, #0
 80090ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80090b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80090b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80090ba:	4690      	mov	r8, r2
 80090bc:	4699      	mov	r9, r3
 80090be:	4623      	mov	r3, r4
 80090c0:	eb18 0303 	adds.w	r3, r8, r3
 80090c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80090c8:	462b      	mov	r3, r5
 80090ca:	eb49 0303 	adc.w	r3, r9, r3
 80090ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80090d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80090de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80090e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80090e6:	460b      	mov	r3, r1
 80090e8:	18db      	adds	r3, r3, r3
 80090ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80090ec:	4613      	mov	r3, r2
 80090ee:	eb42 0303 	adc.w	r3, r2, r3
 80090f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80090f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80090f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80090fc:	f7f7 fd56 	bl	8000bac <__aeabi_uldivmod>
 8009100:	4602      	mov	r2, r0
 8009102:	460b      	mov	r3, r1
 8009104:	4b61      	ldr	r3, [pc, #388]	@ (800928c <UART_SetConfig+0x2d4>)
 8009106:	fba3 2302 	umull	r2, r3, r3, r2
 800910a:	095b      	lsrs	r3, r3, #5
 800910c:	011c      	lsls	r4, r3, #4
 800910e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009112:	2200      	movs	r2, #0
 8009114:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009118:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800911c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009120:	4642      	mov	r2, r8
 8009122:	464b      	mov	r3, r9
 8009124:	1891      	adds	r1, r2, r2
 8009126:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009128:	415b      	adcs	r3, r3
 800912a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800912c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009130:	4641      	mov	r1, r8
 8009132:	eb12 0a01 	adds.w	sl, r2, r1
 8009136:	4649      	mov	r1, r9
 8009138:	eb43 0b01 	adc.w	fp, r3, r1
 800913c:	f04f 0200 	mov.w	r2, #0
 8009140:	f04f 0300 	mov.w	r3, #0
 8009144:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009148:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800914c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009150:	4692      	mov	sl, r2
 8009152:	469b      	mov	fp, r3
 8009154:	4643      	mov	r3, r8
 8009156:	eb1a 0303 	adds.w	r3, sl, r3
 800915a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800915e:	464b      	mov	r3, r9
 8009160:	eb4b 0303 	adc.w	r3, fp, r3
 8009164:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009174:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009178:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800917c:	460b      	mov	r3, r1
 800917e:	18db      	adds	r3, r3, r3
 8009180:	643b      	str	r3, [r7, #64]	@ 0x40
 8009182:	4613      	mov	r3, r2
 8009184:	eb42 0303 	adc.w	r3, r2, r3
 8009188:	647b      	str	r3, [r7, #68]	@ 0x44
 800918a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800918e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009192:	f7f7 fd0b 	bl	8000bac <__aeabi_uldivmod>
 8009196:	4602      	mov	r2, r0
 8009198:	460b      	mov	r3, r1
 800919a:	4611      	mov	r1, r2
 800919c:	4b3b      	ldr	r3, [pc, #236]	@ (800928c <UART_SetConfig+0x2d4>)
 800919e:	fba3 2301 	umull	r2, r3, r3, r1
 80091a2:	095b      	lsrs	r3, r3, #5
 80091a4:	2264      	movs	r2, #100	@ 0x64
 80091a6:	fb02 f303 	mul.w	r3, r2, r3
 80091aa:	1acb      	subs	r3, r1, r3
 80091ac:	00db      	lsls	r3, r3, #3
 80091ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80091b2:	4b36      	ldr	r3, [pc, #216]	@ (800928c <UART_SetConfig+0x2d4>)
 80091b4:	fba3 2302 	umull	r2, r3, r3, r2
 80091b8:	095b      	lsrs	r3, r3, #5
 80091ba:	005b      	lsls	r3, r3, #1
 80091bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80091c0:	441c      	add	r4, r3
 80091c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091c6:	2200      	movs	r2, #0
 80091c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80091cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80091d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80091d4:	4642      	mov	r2, r8
 80091d6:	464b      	mov	r3, r9
 80091d8:	1891      	adds	r1, r2, r2
 80091da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80091dc:	415b      	adcs	r3, r3
 80091de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80091e4:	4641      	mov	r1, r8
 80091e6:	1851      	adds	r1, r2, r1
 80091e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80091ea:	4649      	mov	r1, r9
 80091ec:	414b      	adcs	r3, r1
 80091ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80091f0:	f04f 0200 	mov.w	r2, #0
 80091f4:	f04f 0300 	mov.w	r3, #0
 80091f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80091fc:	4659      	mov	r1, fp
 80091fe:	00cb      	lsls	r3, r1, #3
 8009200:	4651      	mov	r1, sl
 8009202:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009206:	4651      	mov	r1, sl
 8009208:	00ca      	lsls	r2, r1, #3
 800920a:	4610      	mov	r0, r2
 800920c:	4619      	mov	r1, r3
 800920e:	4603      	mov	r3, r0
 8009210:	4642      	mov	r2, r8
 8009212:	189b      	adds	r3, r3, r2
 8009214:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009218:	464b      	mov	r3, r9
 800921a:	460a      	mov	r2, r1
 800921c:	eb42 0303 	adc.w	r3, r2, r3
 8009220:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009230:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009234:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009238:	460b      	mov	r3, r1
 800923a:	18db      	adds	r3, r3, r3
 800923c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800923e:	4613      	mov	r3, r2
 8009240:	eb42 0303 	adc.w	r3, r2, r3
 8009244:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009246:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800924a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800924e:	f7f7 fcad 	bl	8000bac <__aeabi_uldivmod>
 8009252:	4602      	mov	r2, r0
 8009254:	460b      	mov	r3, r1
 8009256:	4b0d      	ldr	r3, [pc, #52]	@ (800928c <UART_SetConfig+0x2d4>)
 8009258:	fba3 1302 	umull	r1, r3, r3, r2
 800925c:	095b      	lsrs	r3, r3, #5
 800925e:	2164      	movs	r1, #100	@ 0x64
 8009260:	fb01 f303 	mul.w	r3, r1, r3
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	00db      	lsls	r3, r3, #3
 8009268:	3332      	adds	r3, #50	@ 0x32
 800926a:	4a08      	ldr	r2, [pc, #32]	@ (800928c <UART_SetConfig+0x2d4>)
 800926c:	fba2 2303 	umull	r2, r3, r2, r3
 8009270:	095b      	lsrs	r3, r3, #5
 8009272:	f003 0207 	and.w	r2, r3, #7
 8009276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4422      	add	r2, r4
 800927e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009280:	e106      	b.n	8009490 <UART_SetConfig+0x4d8>
 8009282:	bf00      	nop
 8009284:	40011000 	.word	0x40011000
 8009288:	40011400 	.word	0x40011400
 800928c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009294:	2200      	movs	r2, #0
 8009296:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800929a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800929e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80092a2:	4642      	mov	r2, r8
 80092a4:	464b      	mov	r3, r9
 80092a6:	1891      	adds	r1, r2, r2
 80092a8:	6239      	str	r1, [r7, #32]
 80092aa:	415b      	adcs	r3, r3
 80092ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80092ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80092b2:	4641      	mov	r1, r8
 80092b4:	1854      	adds	r4, r2, r1
 80092b6:	4649      	mov	r1, r9
 80092b8:	eb43 0501 	adc.w	r5, r3, r1
 80092bc:	f04f 0200 	mov.w	r2, #0
 80092c0:	f04f 0300 	mov.w	r3, #0
 80092c4:	00eb      	lsls	r3, r5, #3
 80092c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092ca:	00e2      	lsls	r2, r4, #3
 80092cc:	4614      	mov	r4, r2
 80092ce:	461d      	mov	r5, r3
 80092d0:	4643      	mov	r3, r8
 80092d2:	18e3      	adds	r3, r4, r3
 80092d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80092d8:	464b      	mov	r3, r9
 80092da:	eb45 0303 	adc.w	r3, r5, r3
 80092de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80092e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80092ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80092f2:	f04f 0200 	mov.w	r2, #0
 80092f6:	f04f 0300 	mov.w	r3, #0
 80092fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80092fe:	4629      	mov	r1, r5
 8009300:	008b      	lsls	r3, r1, #2
 8009302:	4621      	mov	r1, r4
 8009304:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009308:	4621      	mov	r1, r4
 800930a:	008a      	lsls	r2, r1, #2
 800930c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009310:	f7f7 fc4c 	bl	8000bac <__aeabi_uldivmod>
 8009314:	4602      	mov	r2, r0
 8009316:	460b      	mov	r3, r1
 8009318:	4b60      	ldr	r3, [pc, #384]	@ (800949c <UART_SetConfig+0x4e4>)
 800931a:	fba3 2302 	umull	r2, r3, r3, r2
 800931e:	095b      	lsrs	r3, r3, #5
 8009320:	011c      	lsls	r4, r3, #4
 8009322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009326:	2200      	movs	r2, #0
 8009328:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800932c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009330:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009334:	4642      	mov	r2, r8
 8009336:	464b      	mov	r3, r9
 8009338:	1891      	adds	r1, r2, r2
 800933a:	61b9      	str	r1, [r7, #24]
 800933c:	415b      	adcs	r3, r3
 800933e:	61fb      	str	r3, [r7, #28]
 8009340:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009344:	4641      	mov	r1, r8
 8009346:	1851      	adds	r1, r2, r1
 8009348:	6139      	str	r1, [r7, #16]
 800934a:	4649      	mov	r1, r9
 800934c:	414b      	adcs	r3, r1
 800934e:	617b      	str	r3, [r7, #20]
 8009350:	f04f 0200 	mov.w	r2, #0
 8009354:	f04f 0300 	mov.w	r3, #0
 8009358:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800935c:	4659      	mov	r1, fp
 800935e:	00cb      	lsls	r3, r1, #3
 8009360:	4651      	mov	r1, sl
 8009362:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009366:	4651      	mov	r1, sl
 8009368:	00ca      	lsls	r2, r1, #3
 800936a:	4610      	mov	r0, r2
 800936c:	4619      	mov	r1, r3
 800936e:	4603      	mov	r3, r0
 8009370:	4642      	mov	r2, r8
 8009372:	189b      	adds	r3, r3, r2
 8009374:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009378:	464b      	mov	r3, r9
 800937a:	460a      	mov	r2, r1
 800937c:	eb42 0303 	adc.w	r3, r2, r3
 8009380:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800938e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009390:	f04f 0200 	mov.w	r2, #0
 8009394:	f04f 0300 	mov.w	r3, #0
 8009398:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800939c:	4649      	mov	r1, r9
 800939e:	008b      	lsls	r3, r1, #2
 80093a0:	4641      	mov	r1, r8
 80093a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093a6:	4641      	mov	r1, r8
 80093a8:	008a      	lsls	r2, r1, #2
 80093aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80093ae:	f7f7 fbfd 	bl	8000bac <__aeabi_uldivmod>
 80093b2:	4602      	mov	r2, r0
 80093b4:	460b      	mov	r3, r1
 80093b6:	4611      	mov	r1, r2
 80093b8:	4b38      	ldr	r3, [pc, #224]	@ (800949c <UART_SetConfig+0x4e4>)
 80093ba:	fba3 2301 	umull	r2, r3, r3, r1
 80093be:	095b      	lsrs	r3, r3, #5
 80093c0:	2264      	movs	r2, #100	@ 0x64
 80093c2:	fb02 f303 	mul.w	r3, r2, r3
 80093c6:	1acb      	subs	r3, r1, r3
 80093c8:	011b      	lsls	r3, r3, #4
 80093ca:	3332      	adds	r3, #50	@ 0x32
 80093cc:	4a33      	ldr	r2, [pc, #204]	@ (800949c <UART_SetConfig+0x4e4>)
 80093ce:	fba2 2303 	umull	r2, r3, r2, r3
 80093d2:	095b      	lsrs	r3, r3, #5
 80093d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80093d8:	441c      	add	r4, r3
 80093da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093de:	2200      	movs	r2, #0
 80093e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80093e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80093e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80093e8:	4642      	mov	r2, r8
 80093ea:	464b      	mov	r3, r9
 80093ec:	1891      	adds	r1, r2, r2
 80093ee:	60b9      	str	r1, [r7, #8]
 80093f0:	415b      	adcs	r3, r3
 80093f2:	60fb      	str	r3, [r7, #12]
 80093f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80093f8:	4641      	mov	r1, r8
 80093fa:	1851      	adds	r1, r2, r1
 80093fc:	6039      	str	r1, [r7, #0]
 80093fe:	4649      	mov	r1, r9
 8009400:	414b      	adcs	r3, r1
 8009402:	607b      	str	r3, [r7, #4]
 8009404:	f04f 0200 	mov.w	r2, #0
 8009408:	f04f 0300 	mov.w	r3, #0
 800940c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009410:	4659      	mov	r1, fp
 8009412:	00cb      	lsls	r3, r1, #3
 8009414:	4651      	mov	r1, sl
 8009416:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800941a:	4651      	mov	r1, sl
 800941c:	00ca      	lsls	r2, r1, #3
 800941e:	4610      	mov	r0, r2
 8009420:	4619      	mov	r1, r3
 8009422:	4603      	mov	r3, r0
 8009424:	4642      	mov	r2, r8
 8009426:	189b      	adds	r3, r3, r2
 8009428:	66bb      	str	r3, [r7, #104]	@ 0x68
 800942a:	464b      	mov	r3, r9
 800942c:	460a      	mov	r2, r1
 800942e:	eb42 0303 	adc.w	r3, r2, r3
 8009432:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	663b      	str	r3, [r7, #96]	@ 0x60
 800943e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009440:	f04f 0200 	mov.w	r2, #0
 8009444:	f04f 0300 	mov.w	r3, #0
 8009448:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800944c:	4649      	mov	r1, r9
 800944e:	008b      	lsls	r3, r1, #2
 8009450:	4641      	mov	r1, r8
 8009452:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009456:	4641      	mov	r1, r8
 8009458:	008a      	lsls	r2, r1, #2
 800945a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800945e:	f7f7 fba5 	bl	8000bac <__aeabi_uldivmod>
 8009462:	4602      	mov	r2, r0
 8009464:	460b      	mov	r3, r1
 8009466:	4b0d      	ldr	r3, [pc, #52]	@ (800949c <UART_SetConfig+0x4e4>)
 8009468:	fba3 1302 	umull	r1, r3, r3, r2
 800946c:	095b      	lsrs	r3, r3, #5
 800946e:	2164      	movs	r1, #100	@ 0x64
 8009470:	fb01 f303 	mul.w	r3, r1, r3
 8009474:	1ad3      	subs	r3, r2, r3
 8009476:	011b      	lsls	r3, r3, #4
 8009478:	3332      	adds	r3, #50	@ 0x32
 800947a:	4a08      	ldr	r2, [pc, #32]	@ (800949c <UART_SetConfig+0x4e4>)
 800947c:	fba2 2303 	umull	r2, r3, r2, r3
 8009480:	095b      	lsrs	r3, r3, #5
 8009482:	f003 020f 	and.w	r2, r3, #15
 8009486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4422      	add	r2, r4
 800948e:	609a      	str	r2, [r3, #8]
}
 8009490:	bf00      	nop
 8009492:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009496:	46bd      	mov	sp, r7
 8009498:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800949c:	51eb851f 	.word	0x51eb851f

080094a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80094a4:	4904      	ldr	r1, [pc, #16]	@ (80094b8 <MX_FATFS_Init+0x18>)
 80094a6:	4805      	ldr	r0, [pc, #20]	@ (80094bc <MX_FATFS_Init+0x1c>)
 80094a8:	f005 fd12 	bl	800eed0 <FATFS_LinkDriver>
 80094ac:	4603      	mov	r3, r0
 80094ae:	461a      	mov	r2, r3
 80094b0:	4b03      	ldr	r3, [pc, #12]	@ (80094c0 <MX_FATFS_Init+0x20>)
 80094b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80094b4:	bf00      	nop
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	2000291c 	.word	0x2000291c
 80094bc:	2000001c 	.word	0x2000001c
 80094c0:	20002918 	.word	0x20002918

080094c4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80094c4:	b480      	push	{r7}
 80094c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80094c8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	4603      	mov	r3, r0
 80094dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 80094de:	79fb      	ldrb	r3, [r7, #7]
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7f7 fe95 	bl	8001210 <SD_disk_initialize>
 80094e6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	4603      	mov	r3, r0
 80094f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 80094fa:	79fb      	ldrb	r3, [r7, #7]
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7f7 ff71 	bl	80013e4 <SD_disk_status>
 8009502:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009504:	4618      	mov	r0, r3
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	60b9      	str	r1, [r7, #8]
 8009514:	607a      	str	r2, [r7, #4]
 8009516:	603b      	str	r3, [r7, #0]
 8009518:	4603      	mov	r3, r0
 800951a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800951c:	7bf8      	ldrb	r0, [r7, #15]
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	68b9      	ldr	r1, [r7, #8]
 8009524:	f7f7 ff74 	bl	8001410 <SD_disk_read>
 8009528:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800952a:	4618      	mov	r0, r3
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b084      	sub	sp, #16
 8009536:	af00      	add	r7, sp, #0
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	607a      	str	r2, [r7, #4]
 800953c:	603b      	str	r3, [r7, #0]
 800953e:	4603      	mov	r3, r0
 8009540:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8009542:	7bf8      	ldrb	r0, [r7, #15]
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	68b9      	ldr	r1, [r7, #8]
 800954a:	f7f7 ffcb 	bl	80014e4 <SD_disk_write>
 800954e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009550:	4618      	mov	r0, r3
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	4603      	mov	r3, r0
 8009560:	603a      	str	r2, [r7, #0]
 8009562:	71fb      	strb	r3, [r7, #7]
 8009564:	460b      	mov	r3, r1
 8009566:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8009568:	79b9      	ldrb	r1, [r7, #6]
 800956a:	79fb      	ldrb	r3, [r7, #7]
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	4618      	mov	r0, r3
 8009570:	f7f8 f83c 	bl	80015ec <SD_disk_ioctl>
 8009574:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009576:	4618      	mov	r0, r3
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
	...

08009580 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	4603      	mov	r3, r0
 8009588:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800958a:	79fb      	ldrb	r3, [r7, #7]
 800958c:	4a08      	ldr	r2, [pc, #32]	@ (80095b0 <disk_status+0x30>)
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	4413      	add	r3, r2
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	79fa      	ldrb	r2, [r7, #7]
 8009598:	4905      	ldr	r1, [pc, #20]	@ (80095b0 <disk_status+0x30>)
 800959a:	440a      	add	r2, r1
 800959c:	7a12      	ldrb	r2, [r2, #8]
 800959e:	4610      	mov	r0, r2
 80095a0:	4798      	blx	r3
 80095a2:	4603      	mov	r3, r0
 80095a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80095a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3710      	adds	r7, #16
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	20002948 	.word	0x20002948

080095b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	4603      	mov	r3, r0
 80095bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80095be:	2300      	movs	r3, #0
 80095c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80095c2:	79fb      	ldrb	r3, [r7, #7]
 80095c4:	4a0e      	ldr	r2, [pc, #56]	@ (8009600 <disk_initialize+0x4c>)
 80095c6:	5cd3      	ldrb	r3, [r2, r3]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d114      	bne.n	80095f6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80095cc:	79fb      	ldrb	r3, [r7, #7]
 80095ce:	4a0c      	ldr	r2, [pc, #48]	@ (8009600 <disk_initialize+0x4c>)
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	4413      	add	r3, r2
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	79fa      	ldrb	r2, [r7, #7]
 80095da:	4909      	ldr	r1, [pc, #36]	@ (8009600 <disk_initialize+0x4c>)
 80095dc:	440a      	add	r2, r1
 80095de:	7a12      	ldrb	r2, [r2, #8]
 80095e0:	4610      	mov	r0, r2
 80095e2:	4798      	blx	r3
 80095e4:	4603      	mov	r3, r0
 80095e6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80095e8:	7bfb      	ldrb	r3, [r7, #15]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d103      	bne.n	80095f6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80095ee:	79fb      	ldrb	r3, [r7, #7]
 80095f0:	4a03      	ldr	r2, [pc, #12]	@ (8009600 <disk_initialize+0x4c>)
 80095f2:	2101      	movs	r1, #1
 80095f4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	20002948 	.word	0x20002948

08009604 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009604:	b590      	push	{r4, r7, lr}
 8009606:	b087      	sub	sp, #28
 8009608:	af00      	add	r7, sp, #0
 800960a:	60b9      	str	r1, [r7, #8]
 800960c:	607a      	str	r2, [r7, #4]
 800960e:	603b      	str	r3, [r7, #0]
 8009610:	4603      	mov	r3, r0
 8009612:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009614:	7bfb      	ldrb	r3, [r7, #15]
 8009616:	4a0a      	ldr	r2, [pc, #40]	@ (8009640 <disk_read+0x3c>)
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4413      	add	r3, r2
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	689c      	ldr	r4, [r3, #8]
 8009620:	7bfb      	ldrb	r3, [r7, #15]
 8009622:	4a07      	ldr	r2, [pc, #28]	@ (8009640 <disk_read+0x3c>)
 8009624:	4413      	add	r3, r2
 8009626:	7a18      	ldrb	r0, [r3, #8]
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	68b9      	ldr	r1, [r7, #8]
 800962e:	47a0      	blx	r4
 8009630:	4603      	mov	r3, r0
 8009632:	75fb      	strb	r3, [r7, #23]
  return res;
 8009634:	7dfb      	ldrb	r3, [r7, #23]
}
 8009636:	4618      	mov	r0, r3
 8009638:	371c      	adds	r7, #28
 800963a:	46bd      	mov	sp, r7
 800963c:	bd90      	pop	{r4, r7, pc}
 800963e:	bf00      	nop
 8009640:	20002948 	.word	0x20002948

08009644 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009644:	b590      	push	{r4, r7, lr}
 8009646:	b087      	sub	sp, #28
 8009648:	af00      	add	r7, sp, #0
 800964a:	60b9      	str	r1, [r7, #8]
 800964c:	607a      	str	r2, [r7, #4]
 800964e:	603b      	str	r3, [r7, #0]
 8009650:	4603      	mov	r3, r0
 8009652:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009654:	7bfb      	ldrb	r3, [r7, #15]
 8009656:	4a0a      	ldr	r2, [pc, #40]	@ (8009680 <disk_write+0x3c>)
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	4413      	add	r3, r2
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	68dc      	ldr	r4, [r3, #12]
 8009660:	7bfb      	ldrb	r3, [r7, #15]
 8009662:	4a07      	ldr	r2, [pc, #28]	@ (8009680 <disk_write+0x3c>)
 8009664:	4413      	add	r3, r2
 8009666:	7a18      	ldrb	r0, [r3, #8]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	68b9      	ldr	r1, [r7, #8]
 800966e:	47a0      	blx	r4
 8009670:	4603      	mov	r3, r0
 8009672:	75fb      	strb	r3, [r7, #23]
  return res;
 8009674:	7dfb      	ldrb	r3, [r7, #23]
}
 8009676:	4618      	mov	r0, r3
 8009678:	371c      	adds	r7, #28
 800967a:	46bd      	mov	sp, r7
 800967c:	bd90      	pop	{r4, r7, pc}
 800967e:	bf00      	nop
 8009680:	20002948 	.word	0x20002948

08009684 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	4603      	mov	r3, r0
 800968c:	603a      	str	r2, [r7, #0]
 800968e:	71fb      	strb	r3, [r7, #7]
 8009690:	460b      	mov	r3, r1
 8009692:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009694:	79fb      	ldrb	r3, [r7, #7]
 8009696:	4a09      	ldr	r2, [pc, #36]	@ (80096bc <disk_ioctl+0x38>)
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	4413      	add	r3, r2
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	79fa      	ldrb	r2, [r7, #7]
 80096a2:	4906      	ldr	r1, [pc, #24]	@ (80096bc <disk_ioctl+0x38>)
 80096a4:	440a      	add	r2, r1
 80096a6:	7a10      	ldrb	r0, [r2, #8]
 80096a8:	79b9      	ldrb	r1, [r7, #6]
 80096aa:	683a      	ldr	r2, [r7, #0]
 80096ac:	4798      	blx	r3
 80096ae:	4603      	mov	r3, r0
 80096b0:	73fb      	strb	r3, [r7, #15]
  return res;
 80096b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	20002948 	.word	0x20002948

080096c0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	3301      	adds	r3, #1
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80096d0:	89fb      	ldrh	r3, [r7, #14]
 80096d2:	021b      	lsls	r3, r3, #8
 80096d4:	b21a      	sxth	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	b21b      	sxth	r3, r3
 80096dc:	4313      	orrs	r3, r2
 80096de:	b21b      	sxth	r3, r3
 80096e0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80096e2:	89fb      	ldrh	r3, [r7, #14]
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3714      	adds	r7, #20
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80096f0:	b480      	push	{r7}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	3303      	adds	r3, #3
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	021b      	lsls	r3, r3, #8
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	3202      	adds	r2, #2
 8009708:	7812      	ldrb	r2, [r2, #0]
 800970a:	4313      	orrs	r3, r2
 800970c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	021b      	lsls	r3, r3, #8
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	3201      	adds	r2, #1
 8009716:	7812      	ldrb	r2, [r2, #0]
 8009718:	4313      	orrs	r3, r2
 800971a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	021b      	lsls	r3, r3, #8
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	7812      	ldrb	r2, [r2, #0]
 8009724:	4313      	orrs	r3, r2
 8009726:	60fb      	str	r3, [r7, #12]
	return rv;
 8009728:	68fb      	ldr	r3, [r7, #12]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3714      	adds	r7, #20
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr

08009736 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8009736:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800973a:	b09d      	sub	sp, #116	@ 0x74
 800973c:	af00      	add	r7, sp, #0
 800973e:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 8009740:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009742:	3307      	adds	r3, #7
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	b2db      	uxtb	r3, r3
 8009748:	2200      	movs	r2, #0
 800974a:	469a      	mov	sl, r3
 800974c:	4693      	mov	fp, r2
 800974e:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 8009752:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009756:	f04f 0000 	mov.w	r0, #0
 800975a:	f04f 0100 	mov.w	r1, #0
 800975e:	0219      	lsls	r1, r3, #8
 8009760:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009764:	0210      	lsls	r0, r2, #8
 8009766:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009768:	3306      	adds	r3, #6
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	b2db      	uxtb	r3, r3
 800976e:	2200      	movs	r2, #0
 8009770:	461c      	mov	r4, r3
 8009772:	4615      	mov	r5, r2
 8009774:	ea40 0804 	orr.w	r8, r0, r4
 8009778:	ea41 0905 	orr.w	r9, r1, r5
 800977c:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 8009780:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009784:	f04f 0000 	mov.w	r0, #0
 8009788:	f04f 0100 	mov.w	r1, #0
 800978c:	0219      	lsls	r1, r3, #8
 800978e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009792:	0210      	lsls	r0, r2, #8
 8009794:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009796:	3305      	adds	r3, #5
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	b2db      	uxtb	r3, r3
 800979c:	2200      	movs	r2, #0
 800979e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80097a0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80097a2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80097a6:	4623      	mov	r3, r4
 80097a8:	4303      	orrs	r3, r0
 80097aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80097ac:	462b      	mov	r3, r5
 80097ae:	430b      	orrs	r3, r1
 80097b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097b2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80097b6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 80097ba:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80097be:	f04f 0000 	mov.w	r0, #0
 80097c2:	f04f 0100 	mov.w	r1, #0
 80097c6:	0219      	lsls	r1, r3, #8
 80097c8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80097cc:	0210      	lsls	r0, r2, #8
 80097ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097d0:	3304      	adds	r3, #4
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	2200      	movs	r2, #0
 80097d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80097da:	657a      	str	r2, [r7, #84]	@ 0x54
 80097dc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80097e0:	4623      	mov	r3, r4
 80097e2:	4303      	orrs	r3, r0
 80097e4:	623b      	str	r3, [r7, #32]
 80097e6:	462b      	mov	r3, r5
 80097e8:	430b      	orrs	r3, r1
 80097ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80097ec:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80097f0:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 80097f4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80097f8:	f04f 0000 	mov.w	r0, #0
 80097fc:	f04f 0100 	mov.w	r1, #0
 8009800:	0219      	lsls	r1, r3, #8
 8009802:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009806:	0210      	lsls	r0, r2, #8
 8009808:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800980a:	3303      	adds	r3, #3
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	b2db      	uxtb	r3, r3
 8009810:	2200      	movs	r2, #0
 8009812:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009814:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009816:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800981a:	4623      	mov	r3, r4
 800981c:	4303      	orrs	r3, r0
 800981e:	61bb      	str	r3, [r7, #24]
 8009820:	462b      	mov	r3, r5
 8009822:	430b      	orrs	r3, r1
 8009824:	61fb      	str	r3, [r7, #28]
 8009826:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800982a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 800982e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009832:	f04f 0000 	mov.w	r0, #0
 8009836:	f04f 0100 	mov.w	r1, #0
 800983a:	0219      	lsls	r1, r3, #8
 800983c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009840:	0210      	lsls	r0, r2, #8
 8009842:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009844:	3302      	adds	r3, #2
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	b2db      	uxtb	r3, r3
 800984a:	2200      	movs	r2, #0
 800984c:	643b      	str	r3, [r7, #64]	@ 0x40
 800984e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009850:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8009854:	4623      	mov	r3, r4
 8009856:	4303      	orrs	r3, r0
 8009858:	613b      	str	r3, [r7, #16]
 800985a:	462b      	mov	r3, r5
 800985c:	430b      	orrs	r3, r1
 800985e:	617b      	str	r3, [r7, #20]
 8009860:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009864:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 8009868:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800986c:	f04f 0200 	mov.w	r2, #0
 8009870:	f04f 0300 	mov.w	r3, #0
 8009874:	020b      	lsls	r3, r1, #8
 8009876:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800987a:	0202      	lsls	r2, r0, #8
 800987c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800987e:	3101      	adds	r1, #1
 8009880:	7809      	ldrb	r1, [r1, #0]
 8009882:	b2c9      	uxtb	r1, r1
 8009884:	2000      	movs	r0, #0
 8009886:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009888:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800988a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800988e:	4621      	mov	r1, r4
 8009890:	4311      	orrs	r1, r2
 8009892:	60b9      	str	r1, [r7, #8]
 8009894:	4629      	mov	r1, r5
 8009896:	4319      	orrs	r1, r3
 8009898:	60f9      	str	r1, [r7, #12]
 800989a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800989e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 80098a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80098a6:	f04f 0200 	mov.w	r2, #0
 80098aa:	f04f 0300 	mov.w	r3, #0
 80098ae:	020b      	lsls	r3, r1, #8
 80098b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80098b4:	0202      	lsls	r2, r0, #8
 80098b6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80098b8:	7809      	ldrb	r1, [r1, #0]
 80098ba:	b2c9      	uxtb	r1, r1
 80098bc:	2000      	movs	r0, #0
 80098be:	6339      	str	r1, [r7, #48]	@ 0x30
 80098c0:	6378      	str	r0, [r7, #52]	@ 0x34
 80098c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80098c6:	4621      	mov	r1, r4
 80098c8:	4311      	orrs	r1, r2
 80098ca:	6039      	str	r1, [r7, #0]
 80098cc:	4629      	mov	r1, r5
 80098ce:	4319      	orrs	r1, r3
 80098d0:	6079      	str	r1, [r7, #4]
 80098d2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80098d6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 80098da:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 80098de:	4610      	mov	r0, r2
 80098e0:	4619      	mov	r1, r3
 80098e2:	3774      	adds	r7, #116	@ 0x74
 80098e4:	46bd      	mov	sp, r7
 80098e6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80098ea:	4770      	bx	lr

080098ec <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	460b      	mov	r3, r1
 80098f6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	1c5a      	adds	r2, r3, #1
 80098fc:	607a      	str	r2, [r7, #4]
 80098fe:	887a      	ldrh	r2, [r7, #2]
 8009900:	b2d2      	uxtb	r2, r2
 8009902:	701a      	strb	r2, [r3, #0]
 8009904:	887b      	ldrh	r3, [r7, #2]
 8009906:	0a1b      	lsrs	r3, r3, #8
 8009908:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	1c5a      	adds	r2, r3, #1
 800990e:	607a      	str	r2, [r7, #4]
 8009910:	887a      	ldrh	r2, [r7, #2]
 8009912:	b2d2      	uxtb	r2, r2
 8009914:	701a      	strb	r2, [r3, #0]
}
 8009916:	bf00      	nop
 8009918:	370c      	adds	r7, #12
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009922:	b480      	push	{r7}
 8009924:	b083      	sub	sp, #12
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
 800992a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	1c5a      	adds	r2, r3, #1
 8009930:	607a      	str	r2, [r7, #4]
 8009932:	683a      	ldr	r2, [r7, #0]
 8009934:	b2d2      	uxtb	r2, r2
 8009936:	701a      	strb	r2, [r3, #0]
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	0a1b      	lsrs	r3, r3, #8
 800993c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	1c5a      	adds	r2, r3, #1
 8009942:	607a      	str	r2, [r7, #4]
 8009944:	683a      	ldr	r2, [r7, #0]
 8009946:	b2d2      	uxtb	r2, r2
 8009948:	701a      	strb	r2, [r3, #0]
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	0a1b      	lsrs	r3, r3, #8
 800994e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	1c5a      	adds	r2, r3, #1
 8009954:	607a      	str	r2, [r7, #4]
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	b2d2      	uxtb	r2, r2
 800995a:	701a      	strb	r2, [r3, #0]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	0a1b      	lsrs	r3, r3, #8
 8009960:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	1c5a      	adds	r2, r3, #1
 8009966:	607a      	str	r2, [r7, #4]
 8009968:	683a      	ldr	r2, [r7, #0]
 800996a:	b2d2      	uxtb	r2, r2
 800996c:	701a      	strb	r2, [r3, #0]
}
 800996e:	bf00      	nop
 8009970:	370c      	adds	r7, #12
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800997a:	b480      	push	{r7}
 800997c:	b085      	sub	sp, #20
 800997e:	af00      	add	r7, sp, #0
 8009980:	60f8      	str	r0, [r7, #12]
 8009982:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	1c5a      	adds	r2, r3, #1
 800998a:	60fa      	str	r2, [r7, #12]
 800998c:	783a      	ldrb	r2, [r7, #0]
 800998e:	701a      	strb	r2, [r3, #0]
 8009990:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009994:	f04f 0200 	mov.w	r2, #0
 8009998:	f04f 0300 	mov.w	r3, #0
 800999c:	0a02      	lsrs	r2, r0, #8
 800999e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80099a2:	0a0b      	lsrs	r3, r1, #8
 80099a4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	1c5a      	adds	r2, r3, #1
 80099ac:	60fa      	str	r2, [r7, #12]
 80099ae:	783a      	ldrb	r2, [r7, #0]
 80099b0:	701a      	strb	r2, [r3, #0]
 80099b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099b6:	f04f 0200 	mov.w	r2, #0
 80099ba:	f04f 0300 	mov.w	r3, #0
 80099be:	0a02      	lsrs	r2, r0, #8
 80099c0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80099c4:	0a0b      	lsrs	r3, r1, #8
 80099c6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	1c5a      	adds	r2, r3, #1
 80099ce:	60fa      	str	r2, [r7, #12]
 80099d0:	783a      	ldrb	r2, [r7, #0]
 80099d2:	701a      	strb	r2, [r3, #0]
 80099d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099d8:	f04f 0200 	mov.w	r2, #0
 80099dc:	f04f 0300 	mov.w	r3, #0
 80099e0:	0a02      	lsrs	r2, r0, #8
 80099e2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80099e6:	0a0b      	lsrs	r3, r1, #8
 80099e8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	1c5a      	adds	r2, r3, #1
 80099f0:	60fa      	str	r2, [r7, #12]
 80099f2:	783a      	ldrb	r2, [r7, #0]
 80099f4:	701a      	strb	r2, [r3, #0]
 80099f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099fa:	f04f 0200 	mov.w	r2, #0
 80099fe:	f04f 0300 	mov.w	r3, #0
 8009a02:	0a02      	lsrs	r2, r0, #8
 8009a04:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009a08:	0a0b      	lsrs	r3, r1, #8
 8009a0a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	1c5a      	adds	r2, r3, #1
 8009a12:	60fa      	str	r2, [r7, #12]
 8009a14:	783a      	ldrb	r2, [r7, #0]
 8009a16:	701a      	strb	r2, [r3, #0]
 8009a18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a1c:	f04f 0200 	mov.w	r2, #0
 8009a20:	f04f 0300 	mov.w	r3, #0
 8009a24:	0a02      	lsrs	r2, r0, #8
 8009a26:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009a2a:	0a0b      	lsrs	r3, r1, #8
 8009a2c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	1c5a      	adds	r2, r3, #1
 8009a34:	60fa      	str	r2, [r7, #12]
 8009a36:	783a      	ldrb	r2, [r7, #0]
 8009a38:	701a      	strb	r2, [r3, #0]
 8009a3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a3e:	f04f 0200 	mov.w	r2, #0
 8009a42:	f04f 0300 	mov.w	r3, #0
 8009a46:	0a02      	lsrs	r2, r0, #8
 8009a48:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009a4c:	0a0b      	lsrs	r3, r1, #8
 8009a4e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	1c5a      	adds	r2, r3, #1
 8009a56:	60fa      	str	r2, [r7, #12]
 8009a58:	783a      	ldrb	r2, [r7, #0]
 8009a5a:	701a      	strb	r2, [r3, #0]
 8009a5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a60:	f04f 0200 	mov.w	r2, #0
 8009a64:	f04f 0300 	mov.w	r3, #0
 8009a68:	0a02      	lsrs	r2, r0, #8
 8009a6a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009a6e:	0a0b      	lsrs	r3, r1, #8
 8009a70:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	1c5a      	adds	r2, r3, #1
 8009a78:	60fa      	str	r2, [r7, #12]
 8009a7a:	783a      	ldrb	r2, [r7, #0]
 8009a7c:	701a      	strb	r2, [r3, #0]
}
 8009a7e:	bf00      	nop
 8009a80:	3714      	adds	r7, #20
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr

08009a8a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009a8a:	b480      	push	{r7}
 8009a8c:	b087      	sub	sp, #28
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	60f8      	str	r0, [r7, #12]
 8009a92:	60b9      	str	r1, [r7, #8]
 8009a94:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00d      	beq.n	8009ac0 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009aa4:	693a      	ldr	r2, [r7, #16]
 8009aa6:	1c53      	adds	r3, r2, #1
 8009aa8:	613b      	str	r3, [r7, #16]
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	1c59      	adds	r1, r3, #1
 8009aae:	6179      	str	r1, [r7, #20]
 8009ab0:	7812      	ldrb	r2, [r2, #0]
 8009ab2:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	607b      	str	r3, [r7, #4]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d1f1      	bne.n	8009aa4 <mem_cpy+0x1a>
	}
}
 8009ac0:	bf00      	nop
 8009ac2:	371c      	adds	r7, #28
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009acc:	b480      	push	{r7}
 8009ace:	b087      	sub	sp, #28
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	1c5a      	adds	r2, r3, #1
 8009ae0:	617a      	str	r2, [r7, #20]
 8009ae2:	68ba      	ldr	r2, [r7, #8]
 8009ae4:	b2d2      	uxtb	r2, r2
 8009ae6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	3b01      	subs	r3, #1
 8009aec:	607b      	str	r3, [r7, #4]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d1f3      	bne.n	8009adc <mem_set+0x10>
}
 8009af4:	bf00      	nop
 8009af6:	bf00      	nop
 8009af8:	371c      	adds	r7, #28
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr

08009b02 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009b02:	b480      	push	{r7}
 8009b04:	b089      	sub	sp, #36	@ 0x24
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	60f8      	str	r0, [r7, #12]
 8009b0a:	60b9      	str	r1, [r7, #8]
 8009b0c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	61fb      	str	r3, [r7, #28]
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009b16:	2300      	movs	r3, #0
 8009b18:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	1c5a      	adds	r2, r3, #1
 8009b1e:	61fa      	str	r2, [r7, #28]
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	4619      	mov	r1, r3
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	1c5a      	adds	r2, r3, #1
 8009b28:	61ba      	str	r2, [r7, #24]
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	1acb      	subs	r3, r1, r3
 8009b2e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	3b01      	subs	r3, #1
 8009b34:	607b      	str	r3, [r7, #4]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d002      	beq.n	8009b42 <mem_cmp+0x40>
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d0eb      	beq.n	8009b1a <mem_cmp+0x18>

	return r;
 8009b42:	697b      	ldr	r3, [r7, #20]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3724      	adds	r7, #36	@ 0x24
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009b5a:	e002      	b.n	8009b62 <chk_chr+0x12>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	607b      	str	r3, [r7, #4]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d005      	beq.n	8009b76 <chk_chr+0x26>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	461a      	mov	r2, r3
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d1f2      	bne.n	8009b5c <chk_chr+0xc>
	return *str;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	781b      	ldrb	r3, [r3, #0]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	370c      	adds	r7, #12
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr

08009b86 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b082      	sub	sp, #8
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d009      	beq.n	8009ba8 <lock_fs+0x22>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	699b      	ldr	r3, [r3, #24]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f005 fa99 	bl	800f0d0 <ff_req_grant>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d001      	beq.n	8009ba8 <lock_fs+0x22>
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e000      	b.n	8009baa <lock_fs+0x24>
 8009ba8:	2300      	movs	r3, #0
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3708      	adds	r7, #8
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b082      	sub	sp, #8
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
 8009bba:	460b      	mov	r3, r1
 8009bbc:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d00d      	beq.n	8009be0 <unlock_fs+0x2e>
 8009bc4:	78fb      	ldrb	r3, [r7, #3]
 8009bc6:	2b0c      	cmp	r3, #12
 8009bc8:	d00a      	beq.n	8009be0 <unlock_fs+0x2e>
 8009bca:	78fb      	ldrb	r3, [r7, #3]
 8009bcc:	2b0b      	cmp	r3, #11
 8009bce:	d007      	beq.n	8009be0 <unlock_fs+0x2e>
 8009bd0:	78fb      	ldrb	r3, [r7, #3]
 8009bd2:	2b0f      	cmp	r3, #15
 8009bd4:	d004      	beq.n	8009be0 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	699b      	ldr	r3, [r3, #24]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f005 fa8d 	bl	800f0fa <ff_rel_grant>
	}
}
 8009be0:	bf00      	nop
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	60bb      	str	r3, [r7, #8]
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	60fb      	str	r3, [r7, #12]
 8009bfa:	e029      	b.n	8009c50 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009bfc:	4a27      	ldr	r2, [pc, #156]	@ (8009c9c <chk_lock+0xb4>)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	011b      	lsls	r3, r3, #4
 8009c02:	4413      	add	r3, r2
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d01d      	beq.n	8009c46 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009c0a:	4a24      	ldr	r2, [pc, #144]	@ (8009c9c <chk_lock+0xb4>)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	011b      	lsls	r3, r3, #4
 8009c10:	4413      	add	r3, r2
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d116      	bne.n	8009c4a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009c1c:	4a1f      	ldr	r2, [pc, #124]	@ (8009c9c <chk_lock+0xb4>)
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	011b      	lsls	r3, r3, #4
 8009c22:	4413      	add	r3, r2
 8009c24:	3304      	adds	r3, #4
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d10c      	bne.n	8009c4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009c30:	4a1a      	ldr	r2, [pc, #104]	@ (8009c9c <chk_lock+0xb4>)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	011b      	lsls	r3, r3, #4
 8009c36:	4413      	add	r3, r2
 8009c38:	3308      	adds	r3, #8
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d102      	bne.n	8009c4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009c44:	e007      	b.n	8009c56 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009c46:	2301      	movs	r3, #1
 8009c48:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	60fb      	str	r3, [r7, #12]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d9d2      	bls.n	8009bfc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d109      	bne.n	8009c70 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d102      	bne.n	8009c68 <chk_lock+0x80>
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d101      	bne.n	8009c6c <chk_lock+0x84>
 8009c68:	2300      	movs	r3, #0
 8009c6a:	e010      	b.n	8009c8e <chk_lock+0xa6>
 8009c6c:	2312      	movs	r3, #18
 8009c6e:	e00e      	b.n	8009c8e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d108      	bne.n	8009c88 <chk_lock+0xa0>
 8009c76:	4a09      	ldr	r2, [pc, #36]	@ (8009c9c <chk_lock+0xb4>)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	011b      	lsls	r3, r3, #4
 8009c7c:	4413      	add	r3, r2
 8009c7e:	330c      	adds	r3, #12
 8009c80:	881b      	ldrh	r3, [r3, #0]
 8009c82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c86:	d101      	bne.n	8009c8c <chk_lock+0xa4>
 8009c88:	2310      	movs	r3, #16
 8009c8a:	e000      	b.n	8009c8e <chk_lock+0xa6>
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3714      	adds	r7, #20
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop
 8009c9c:	20002928 	.word	0x20002928

08009ca0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	607b      	str	r3, [r7, #4]
 8009caa:	e002      	b.n	8009cb2 <enq_lock+0x12>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	607b      	str	r3, [r7, #4]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d806      	bhi.n	8009cc6 <enq_lock+0x26>
 8009cb8:	4a09      	ldr	r2, [pc, #36]	@ (8009ce0 <enq_lock+0x40>)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	011b      	lsls	r3, r3, #4
 8009cbe:	4413      	add	r3, r2
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d1f2      	bne.n	8009cac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	bf14      	ite	ne
 8009ccc:	2301      	movne	r3, #1
 8009cce:	2300      	moveq	r3, #0
 8009cd0:	b2db      	uxtb	r3, r3
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	370c      	adds	r7, #12
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	20002928 	.word	0x20002928

08009ce4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009cee:	2300      	movs	r3, #0
 8009cf0:	60fb      	str	r3, [r7, #12]
 8009cf2:	e01f      	b.n	8009d34 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009cf4:	4a41      	ldr	r2, [pc, #260]	@ (8009dfc <inc_lock+0x118>)
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	011b      	lsls	r3, r3, #4
 8009cfa:	4413      	add	r3, r2
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d113      	bne.n	8009d2e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009d06:	4a3d      	ldr	r2, [pc, #244]	@ (8009dfc <inc_lock+0x118>)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	011b      	lsls	r3, r3, #4
 8009d0c:	4413      	add	r3, r2
 8009d0e:	3304      	adds	r3, #4
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d109      	bne.n	8009d2e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009d1a:	4a38      	ldr	r2, [pc, #224]	@ (8009dfc <inc_lock+0x118>)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	011b      	lsls	r3, r3, #4
 8009d20:	4413      	add	r3, r2
 8009d22:	3308      	adds	r3, #8
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d006      	beq.n	8009d3c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	3301      	adds	r3, #1
 8009d32:	60fb      	str	r3, [r7, #12]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d9dc      	bls.n	8009cf4 <inc_lock+0x10>
 8009d3a:	e000      	b.n	8009d3e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009d3c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	d132      	bne.n	8009daa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009d44:	2300      	movs	r3, #0
 8009d46:	60fb      	str	r3, [r7, #12]
 8009d48:	e002      	b.n	8009d50 <inc_lock+0x6c>
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	60fb      	str	r3, [r7, #12]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d806      	bhi.n	8009d64 <inc_lock+0x80>
 8009d56:	4a29      	ldr	r2, [pc, #164]	@ (8009dfc <inc_lock+0x118>)
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	011b      	lsls	r3, r3, #4
 8009d5c:	4413      	add	r3, r2
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d1f2      	bne.n	8009d4a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	d101      	bne.n	8009d6e <inc_lock+0x8a>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	e040      	b.n	8009df0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	4922      	ldr	r1, [pc, #136]	@ (8009dfc <inc_lock+0x118>)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	011b      	lsls	r3, r3, #4
 8009d78:	440b      	add	r3, r1
 8009d7a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	689a      	ldr	r2, [r3, #8]
 8009d80:	491e      	ldr	r1, [pc, #120]	@ (8009dfc <inc_lock+0x118>)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	011b      	lsls	r3, r3, #4
 8009d86:	440b      	add	r3, r1
 8009d88:	3304      	adds	r3, #4
 8009d8a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d90:	491a      	ldr	r1, [pc, #104]	@ (8009dfc <inc_lock+0x118>)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	011b      	lsls	r3, r3, #4
 8009d96:	440b      	add	r3, r1
 8009d98:	3308      	adds	r3, #8
 8009d9a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009d9c:	4a17      	ldr	r2, [pc, #92]	@ (8009dfc <inc_lock+0x118>)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	011b      	lsls	r3, r3, #4
 8009da2:	4413      	add	r3, r2
 8009da4:	330c      	adds	r3, #12
 8009da6:	2200      	movs	r2, #0
 8009da8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d009      	beq.n	8009dc4 <inc_lock+0xe0>
 8009db0:	4a12      	ldr	r2, [pc, #72]	@ (8009dfc <inc_lock+0x118>)
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	011b      	lsls	r3, r3, #4
 8009db6:	4413      	add	r3, r2
 8009db8:	330c      	adds	r3, #12
 8009dba:	881b      	ldrh	r3, [r3, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d001      	beq.n	8009dc4 <inc_lock+0xe0>
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	e015      	b.n	8009df0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d108      	bne.n	8009ddc <inc_lock+0xf8>
 8009dca:	4a0c      	ldr	r2, [pc, #48]	@ (8009dfc <inc_lock+0x118>)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	011b      	lsls	r3, r3, #4
 8009dd0:	4413      	add	r3, r2
 8009dd2:	330c      	adds	r3, #12
 8009dd4:	881b      	ldrh	r3, [r3, #0]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	b29a      	uxth	r2, r3
 8009dda:	e001      	b.n	8009de0 <inc_lock+0xfc>
 8009ddc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009de0:	4906      	ldr	r1, [pc, #24]	@ (8009dfc <inc_lock+0x118>)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	011b      	lsls	r3, r3, #4
 8009de6:	440b      	add	r3, r1
 8009de8:	330c      	adds	r3, #12
 8009dea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	3301      	adds	r3, #1
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3714      	adds	r7, #20
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr
 8009dfc:	20002928 	.word	0x20002928

08009e00 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b085      	sub	sp, #20
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	607b      	str	r3, [r7, #4]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d825      	bhi.n	8009e60 <dec_lock+0x60>
		n = Files[i].ctr;
 8009e14:	4a17      	ldr	r2, [pc, #92]	@ (8009e74 <dec_lock+0x74>)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	011b      	lsls	r3, r3, #4
 8009e1a:	4413      	add	r3, r2
 8009e1c:	330c      	adds	r3, #12
 8009e1e:	881b      	ldrh	r3, [r3, #0]
 8009e20:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009e22:	89fb      	ldrh	r3, [r7, #14]
 8009e24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e28:	d101      	bne.n	8009e2e <dec_lock+0x2e>
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009e2e:	89fb      	ldrh	r3, [r7, #14]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d002      	beq.n	8009e3a <dec_lock+0x3a>
 8009e34:	89fb      	ldrh	r3, [r7, #14]
 8009e36:	3b01      	subs	r3, #1
 8009e38:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8009e74 <dec_lock+0x74>)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	011b      	lsls	r3, r3, #4
 8009e40:	4413      	add	r3, r2
 8009e42:	330c      	adds	r3, #12
 8009e44:	89fa      	ldrh	r2, [r7, #14]
 8009e46:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009e48:	89fb      	ldrh	r3, [r7, #14]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d105      	bne.n	8009e5a <dec_lock+0x5a>
 8009e4e:	4a09      	ldr	r2, [pc, #36]	@ (8009e74 <dec_lock+0x74>)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	011b      	lsls	r3, r3, #4
 8009e54:	4413      	add	r3, r2
 8009e56:	2200      	movs	r2, #0
 8009e58:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	737b      	strb	r3, [r7, #13]
 8009e5e:	e001      	b.n	8009e64 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009e60:	2302      	movs	r3, #2
 8009e62:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009e64:	7b7b      	ldrb	r3, [r7, #13]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3714      	adds	r7, #20
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	20002928 	.word	0x20002928

08009e78 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009e80:	2300      	movs	r3, #0
 8009e82:	60fb      	str	r3, [r7, #12]
 8009e84:	e010      	b.n	8009ea8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009e86:	4a0d      	ldr	r2, [pc, #52]	@ (8009ebc <clear_lock+0x44>)
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	011b      	lsls	r3, r3, #4
 8009e8c:	4413      	add	r3, r2
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d105      	bne.n	8009ea2 <clear_lock+0x2a>
 8009e96:	4a09      	ldr	r2, [pc, #36]	@ (8009ebc <clear_lock+0x44>)
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	011b      	lsls	r3, r3, #4
 8009e9c:	4413      	add	r3, r2
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	60fb      	str	r3, [r7, #12]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d9eb      	bls.n	8009e86 <clear_lock+0xe>
	}
}
 8009eae:	bf00      	nop
 8009eb0:	bf00      	nop
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr
 8009ebc:	20002928 	.word	0x20002928

08009ec0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	78db      	ldrb	r3, [r3, #3]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d034      	beq.n	8009f3e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ed8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	7858      	ldrb	r0, [r3, #1]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	697a      	ldr	r2, [r7, #20]
 8009ee8:	f7ff fbac 	bl	8009644 <disk_write>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d002      	beq.n	8009ef8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	73fb      	strb	r3, [r7, #15]
 8009ef6:	e022      	b.n	8009f3e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f02:	697a      	ldr	r2, [r7, #20]
 8009f04:	1ad2      	subs	r2, r2, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d217      	bcs.n	8009f3e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	789b      	ldrb	r3, [r3, #2]
 8009f12:	613b      	str	r3, [r7, #16]
 8009f14:	e010      	b.n	8009f38 <sync_window+0x78>
					wsect += fs->fsize;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f1a:	697a      	ldr	r2, [r7, #20]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	7858      	ldrb	r0, [r3, #1]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	697a      	ldr	r2, [r7, #20]
 8009f2e:	f7ff fb89 	bl	8009644 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	3b01      	subs	r3, #1
 8009f36:	613b      	str	r3, [r7, #16]
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d8eb      	bhi.n	8009f16 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3718      	adds	r7, #24
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009f52:	2300      	movs	r3, #0
 8009f54:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f5a:	683a      	ldr	r2, [r7, #0]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d01b      	beq.n	8009f98 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f7ff ffad 	bl	8009ec0 <sync_window>
 8009f66:	4603      	mov	r3, r0
 8009f68:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009f6a:	7bfb      	ldrb	r3, [r7, #15]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d113      	bne.n	8009f98 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	7858      	ldrb	r0, [r3, #1]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	683a      	ldr	r2, [r7, #0]
 8009f7e:	f7ff fb41 	bl	8009604 <disk_read>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d004      	beq.n	8009f92 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009f88:	f04f 33ff 	mov.w	r3, #4294967295
 8009f8c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	683a      	ldr	r2, [r7, #0]
 8009f96:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
	}
	return res;
 8009f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
	...

08009fa4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f7ff ff87 	bl	8009ec0 <sync_window>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009fb6:	7bfb      	ldrb	r3, [r7, #15]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d159      	bne.n	800a070 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	2b03      	cmp	r3, #3
 8009fc2:	d149      	bne.n	800a058 <sync_fs+0xb4>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	791b      	ldrb	r3, [r3, #4]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d145      	bne.n	800a058 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	899b      	ldrh	r3, [r3, #12]
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	2100      	movs	r1, #0
 8009fda:	f7ff fd77 	bl	8009acc <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	3340      	adds	r3, #64	@ 0x40
 8009fe2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009fe6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7ff fc7e 	bl	80098ec <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	3340      	adds	r3, #64	@ 0x40
 8009ff4:	4921      	ldr	r1, [pc, #132]	@ (800a07c <sync_fs+0xd8>)
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7ff fc93 	bl	8009922 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	3340      	adds	r3, #64	@ 0x40
 800a000:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a004:	491e      	ldr	r1, [pc, #120]	@ (800a080 <sync_fs+0xdc>)
 800a006:	4618      	mov	r0, r3
 800a008:	f7ff fc8b 	bl	8009922 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	3340      	adds	r3, #64	@ 0x40
 800a010:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6a1b      	ldr	r3, [r3, #32]
 800a018:	4619      	mov	r1, r3
 800a01a:	4610      	mov	r0, r2
 800a01c:	f7ff fc81 	bl	8009922 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	3340      	adds	r3, #64	@ 0x40
 800a024:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	69db      	ldr	r3, [r3, #28]
 800a02c:	4619      	mov	r1, r3
 800a02e:	4610      	mov	r0, r2
 800a030:	f7ff fc77 	bl	8009922 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a038:	1c5a      	adds	r2, r3, #1
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	63da      	str	r2, [r3, #60]	@ 0x3c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	7858      	ldrb	r0, [r3, #1]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a04c:	2301      	movs	r3, #1
 800a04e:	f7ff faf9 	bl	8009644 <disk_write>
			fs->fsi_flag = 0;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	785b      	ldrb	r3, [r3, #1]
 800a05c:	2200      	movs	r2, #0
 800a05e:	2100      	movs	r1, #0
 800a060:	4618      	mov	r0, r3
 800a062:	f7ff fb0f 	bl	8009684 <disk_ioctl>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d001      	beq.n	800a070 <sync_fs+0xcc>
 800a06c:	2301      	movs	r3, #1
 800a06e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a070:	7bfb      	ldrb	r3, [r7, #15]
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	41615252 	.word	0x41615252
 800a080:	61417272 	.word	0x61417272

0800a084 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	3b02      	subs	r3, #2
 800a092:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a098:	3b02      	subs	r3, #2
 800a09a:	683a      	ldr	r2, [r7, #0]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d301      	bcc.n	800a0a4 <clust2sect+0x20>
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	e008      	b.n	800a0b6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	895b      	ldrh	r3, [r3, #10]
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	fb03 f202 	mul.w	r2, r3, r2
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0b4:	4413      	add	r3, r2
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	370c      	adds	r7, #12
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr
	...

0800a0c4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a0c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a0c8:	b088      	sub	sp, #32
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
 800a0ce:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d904      	bls.n	800a0e6 <get_fat+0x22>
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0e0:	683a      	ldr	r2, [r7, #0]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d302      	bcc.n	800a0ec <get_fat+0x28>
		val = 1;	/* Internal error */
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	61fb      	str	r3, [r7, #28]
 800a0ea:	e139      	b.n	800a360 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a0ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f0:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	2b03      	cmp	r3, #3
 800a0fa:	f200 8125 	bhi.w	800a348 <get_fat+0x284>
 800a0fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a104 <get_fat+0x40>)
 800a100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a104:	0800a115 	.word	0x0800a115
 800a108:	0800a1c1 	.word	0x0800a1c1
 800a10c:	0800a20d 	.word	0x0800a20d
 800a110:	0800a25d 	.word	0x0800a25d
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	60fb      	str	r3, [r7, #12]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	085b      	lsrs	r3, r3, #1
 800a11c:	68fa      	ldr	r2, [r7, #12]
 800a11e:	4413      	add	r3, r2
 800a120:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	899b      	ldrh	r3, [r3, #12]
 800a12a:	4619      	mov	r1, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a132:	4413      	add	r3, r2
 800a134:	4619      	mov	r1, r3
 800a136:	69b8      	ldr	r0, [r7, #24]
 800a138:	f7ff ff06 	bl	8009f48 <move_window>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	f040 8105 	bne.w	800a34e <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	1c5a      	adds	r2, r3, #1
 800a148:	60fa      	str	r2, [r7, #12]
 800a14a:	69ba      	ldr	r2, [r7, #24]
 800a14c:	8992      	ldrh	r2, [r2, #12]
 800a14e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a152:	fb01 f202 	mul.w	r2, r1, r2
 800a156:	1a9b      	subs	r3, r3, r2
 800a158:	69ba      	ldr	r2, [r7, #24]
 800a15a:	4413      	add	r3, r2
 800a15c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a160:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a166:	69bb      	ldr	r3, [r7, #24]
 800a168:	899b      	ldrh	r3, [r3, #12]
 800a16a:	4619      	mov	r1, r3
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a172:	4413      	add	r3, r2
 800a174:	4619      	mov	r1, r3
 800a176:	69b8      	ldr	r0, [r7, #24]
 800a178:	f7ff fee6 	bl	8009f48 <move_window>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	f040 80e7 	bne.w	800a352 <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	899b      	ldrh	r3, [r3, #12]
 800a188:	461a      	mov	r2, r3
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a190:	fb01 f202 	mul.w	r2, r1, r2
 800a194:	1a9b      	subs	r3, r3, r2
 800a196:	69ba      	ldr	r2, [r7, #24]
 800a198:	4413      	add	r3, r2
 800a19a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a19e:	021b      	lsls	r3, r3, #8
 800a1a0:	68ba      	ldr	r2, [r7, #8]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	f003 0301 	and.w	r3, r3, #1
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d002      	beq.n	800a1b6 <get_fat+0xf2>
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	091b      	lsrs	r3, r3, #4
 800a1b4:	e002      	b.n	800a1bc <get_fat+0xf8>
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1bc:	61fb      	str	r3, [r7, #28]
			break;
 800a1be:	e0cf      	b.n	800a360 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	899b      	ldrh	r3, [r3, #12]
 800a1c8:	085b      	lsrs	r3, r3, #1
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	fbb3 f3f1 	udiv	r3, r3, r1
 800a1d4:	4413      	add	r3, r2
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	69b8      	ldr	r0, [r7, #24]
 800a1da:	f7ff feb5 	bl	8009f48 <move_window>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f040 80b8 	bne.w	800a356 <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	005b      	lsls	r3, r3, #1
 800a1f0:	69ba      	ldr	r2, [r7, #24]
 800a1f2:	8992      	ldrh	r2, [r2, #12]
 800a1f4:	fbb3 f0f2 	udiv	r0, r3, r2
 800a1f8:	fb00 f202 	mul.w	r2, r0, r2
 800a1fc:	1a9b      	subs	r3, r3, r2
 800a1fe:	440b      	add	r3, r1
 800a200:	4618      	mov	r0, r3
 800a202:	f7ff fa5d 	bl	80096c0 <ld_word>
 800a206:	4603      	mov	r3, r0
 800a208:	61fb      	str	r3, [r7, #28]
			break;
 800a20a:	e0a9      	b.n	800a360 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	899b      	ldrh	r3, [r3, #12]
 800a214:	089b      	lsrs	r3, r3, #2
 800a216:	b29b      	uxth	r3, r3
 800a218:	4619      	mov	r1, r3
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a220:	4413      	add	r3, r2
 800a222:	4619      	mov	r1, r3
 800a224:	69b8      	ldr	r0, [r7, #24]
 800a226:	f7ff fe8f 	bl	8009f48 <move_window>
 800a22a:	4603      	mov	r3, r0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	f040 8094 	bne.w	800a35a <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	69ba      	ldr	r2, [r7, #24]
 800a23e:	8992      	ldrh	r2, [r2, #12]
 800a240:	fbb3 f0f2 	udiv	r0, r3, r2
 800a244:	fb00 f202 	mul.w	r2, r0, r2
 800a248:	1a9b      	subs	r3, r3, r2
 800a24a:	440b      	add	r3, r1
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7ff fa4f 	bl	80096f0 <ld_dword>
 800a252:	4603      	mov	r3, r0
 800a254:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a258:	61fb      	str	r3, [r7, #28]
			break;
 800a25a:	e081      	b.n	800a360 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a262:	4313      	orrs	r3, r2
 800a264:	d070      	beq.n	800a348 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	683a      	ldr	r2, [r7, #0]
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a276:	1e54      	subs	r4, r2, #1
 800a278:	f143 35ff 	adc.w	r5, r3, #4294967295
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	899b      	ldrh	r3, [r3, #12]
 800a280:	b29b      	uxth	r3, r3
 800a282:	2200      	movs	r2, #0
 800a284:	4698      	mov	r8, r3
 800a286:	4691      	mov	r9, r2
 800a288:	4642      	mov	r2, r8
 800a28a:	464b      	mov	r3, r9
 800a28c:	4620      	mov	r0, r4
 800a28e:	4629      	mov	r1, r5
 800a290:	f7f6 fc8c 	bl	8000bac <__aeabi_uldivmod>
 800a294:	4602      	mov	r2, r0
 800a296:	460b      	mov	r3, r1
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	895b      	ldrh	r3, [r3, #10]
 800a29c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2a0:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	79db      	ldrb	r3, [r3, #7]
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d10e      	bne.n	800a2c8 <get_fat+0x204>
					if (cofs <= clen) {
 800a2aa:	697a      	ldr	r2, [r7, #20]
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d80a      	bhi.n	800a2c8 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800a2b2:	697a      	ldr	r2, [r7, #20]
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d002      	beq.n	800a2c0 <get_fat+0x1fc>
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	e001      	b.n	800a2c4 <get_fat+0x200>
 800a2c0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a2c4:	61fb      	str	r3, [r7, #28]
						break;
 800a2c6:	e04b      	b.n	800a360 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	79db      	ldrb	r3, [r3, #7]
 800a2cc:	2b03      	cmp	r3, #3
 800a2ce:	d108      	bne.n	800a2e2 <get_fat+0x21e>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	699b      	ldr	r3, [r3, #24]
 800a2d4:	697a      	ldr	r2, [r7, #20]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d203      	bcs.n	800a2e2 <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	61fb      	str	r3, [r7, #28]
					break;
 800a2e0:	e03e      	b.n	800a360 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	79db      	ldrb	r3, [r3, #7]
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d02e      	beq.n	800a348 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	69db      	ldr	r3, [r3, #28]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d003      	beq.n	800a2fa <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800a2f2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a2f6:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800a2f8:	e032      	b.n	800a360 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	899b      	ldrh	r3, [r3, #12]
 800a302:	089b      	lsrs	r3, r3, #2
 800a304:	b29b      	uxth	r3, r3
 800a306:	4619      	mov	r1, r3
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a30e:	4413      	add	r3, r2
 800a310:	4619      	mov	r1, r3
 800a312:	69b8      	ldr	r0, [r7, #24]
 800a314:	f7ff fe18 	bl	8009f48 <move_window>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d11f      	bne.n	800a35e <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	69ba      	ldr	r2, [r7, #24]
 800a32a:	8992      	ldrh	r2, [r2, #12]
 800a32c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a330:	fb00 f202 	mul.w	r2, r0, r2
 800a334:	1a9b      	subs	r3, r3, r2
 800a336:	440b      	add	r3, r1
 800a338:	4618      	mov	r0, r3
 800a33a:	f7ff f9d9 	bl	80096f0 <ld_dword>
 800a33e:	4603      	mov	r3, r0
 800a340:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a344:	61fb      	str	r3, [r7, #28]
					break;
 800a346:	e00b      	b.n	800a360 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a348:	2301      	movs	r3, #1
 800a34a:	61fb      	str	r3, [r7, #28]
 800a34c:	e008      	b.n	800a360 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a34e:	bf00      	nop
 800a350:	e006      	b.n	800a360 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a352:	bf00      	nop
 800a354:	e004      	b.n	800a360 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a356:	bf00      	nop
 800a358:	e002      	b.n	800a360 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a35a:	bf00      	nop
 800a35c:	e000      	b.n	800a360 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a35e:	bf00      	nop
		}
	}

	return val;
 800a360:	69fb      	ldr	r3, [r7, #28]
}
 800a362:	4618      	mov	r0, r3
 800a364:	3720      	adds	r7, #32
 800a366:	46bd      	mov	sp, r7
 800a368:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800a36c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a36c:	b590      	push	{r4, r7, lr}
 800a36e:	b089      	sub	sp, #36	@ 0x24
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a378:	2302      	movs	r3, #2
 800a37a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	2b01      	cmp	r3, #1
 800a380:	f240 810d 	bls.w	800a59e <put_fat+0x232>
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a388:	68ba      	ldr	r2, [r7, #8]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	f080 8107 	bcs.w	800a59e <put_fat+0x232>
		switch (fs->fs_type) {
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	2b04      	cmp	r3, #4
 800a396:	f300 8102 	bgt.w	800a59e <put_fat+0x232>
 800a39a:	2b03      	cmp	r3, #3
 800a39c:	f280 80b3 	bge.w	800a506 <put_fat+0x19a>
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d003      	beq.n	800a3ac <put_fat+0x40>
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	f000 8083 	beq.w	800a4b0 <put_fat+0x144>
 800a3aa:	e0f8      	b.n	800a59e <put_fat+0x232>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	61bb      	str	r3, [r7, #24]
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	085b      	lsrs	r3, r3, #1
 800a3b4:	69ba      	ldr	r2, [r7, #24]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	899b      	ldrh	r3, [r3, #12]
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3ca:	4413      	add	r3, r2
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f7ff fdba 	bl	8009f48 <move_window>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a3d8:	7ffb      	ldrb	r3, [r7, #31]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f040 80d8 	bne.w	800a590 <put_fat+0x224>
			p = fs->win + bc++ % SS(fs);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	1c5a      	adds	r2, r3, #1
 800a3ea:	61ba      	str	r2, [r7, #24]
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	8992      	ldrh	r2, [r2, #12]
 800a3f0:	fbb3 f0f2 	udiv	r0, r3, r2
 800a3f4:	fb00 f202 	mul.w	r2, r0, r2
 800a3f8:	1a9b      	subs	r3, r3, r2
 800a3fa:	440b      	add	r3, r1
 800a3fc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	f003 0301 	and.w	r3, r3, #1
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00d      	beq.n	800a424 <put_fat+0xb8>
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	b25b      	sxtb	r3, r3
 800a40e:	f003 030f 	and.w	r3, r3, #15
 800a412:	b25a      	sxtb	r2, r3
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	b2db      	uxtb	r3, r3
 800a418:	011b      	lsls	r3, r3, #4
 800a41a:	b25b      	sxtb	r3, r3
 800a41c:	4313      	orrs	r3, r2
 800a41e:	b25b      	sxtb	r3, r3
 800a420:	b2db      	uxtb	r3, r3
 800a422:	e001      	b.n	800a428 <put_fat+0xbc>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	b2db      	uxtb	r3, r3
 800a428:	697a      	ldr	r2, [r7, #20]
 800a42a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2201      	movs	r2, #1
 800a430:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	899b      	ldrh	r3, [r3, #12]
 800a43a:	4619      	mov	r1, r3
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a442:	4413      	add	r3, r2
 800a444:	4619      	mov	r1, r3
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f7ff fd7e 	bl	8009f48 <move_window>
 800a44c:	4603      	mov	r3, r0
 800a44e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a450:	7ffb      	ldrb	r3, [r7, #31]
 800a452:	2b00      	cmp	r3, #0
 800a454:	f040 809e 	bne.w	800a594 <put_fat+0x228>
			p = fs->win + bc % SS(fs);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	899b      	ldrh	r3, [r3, #12]
 800a462:	461a      	mov	r2, r3
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	fbb3 f0f2 	udiv	r0, r3, r2
 800a46a:	fb00 f202 	mul.w	r2, r0, r2
 800a46e:	1a9b      	subs	r3, r3, r2
 800a470:	440b      	add	r3, r1
 800a472:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	f003 0301 	and.w	r3, r3, #1
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d003      	beq.n	800a486 <put_fat+0x11a>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	091b      	lsrs	r3, r3, #4
 800a482:	b2db      	uxtb	r3, r3
 800a484:	e00e      	b.n	800a4a4 <put_fat+0x138>
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	b25b      	sxtb	r3, r3
 800a48c:	f023 030f 	bic.w	r3, r3, #15
 800a490:	b25a      	sxtb	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	0a1b      	lsrs	r3, r3, #8
 800a496:	b25b      	sxtb	r3, r3
 800a498:	f003 030f 	and.w	r3, r3, #15
 800a49c:	b25b      	sxtb	r3, r3
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	b25b      	sxtb	r3, r3
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	697a      	ldr	r2, [r7, #20]
 800a4a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	70da      	strb	r2, [r3, #3]
			break;
 800a4ae:	e076      	b.n	800a59e <put_fat+0x232>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	899b      	ldrh	r3, [r3, #12]
 800a4b8:	085b      	lsrs	r3, r3, #1
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	4619      	mov	r1, r3
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	fbb3 f3f1 	udiv	r3, r3, r1
 800a4c4:	4413      	add	r3, r2
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f7ff fd3d 	bl	8009f48 <move_window>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a4d2:	7ffb      	ldrb	r3, [r7, #31]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d15f      	bne.n	800a598 <put_fat+0x22c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	005b      	lsls	r3, r3, #1
 800a4e2:	68fa      	ldr	r2, [r7, #12]
 800a4e4:	8992      	ldrh	r2, [r2, #12]
 800a4e6:	fbb3 f0f2 	udiv	r0, r3, r2
 800a4ea:	fb00 f202 	mul.w	r2, r0, r2
 800a4ee:	1a9b      	subs	r3, r3, r2
 800a4f0:	440b      	add	r3, r1
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	b292      	uxth	r2, r2
 800a4f6:	4611      	mov	r1, r2
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7ff f9f7 	bl	80098ec <st_word>
			fs->wflag = 1;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2201      	movs	r2, #1
 800a502:	70da      	strb	r2, [r3, #3]
			break;
 800a504:	e04b      	b.n	800a59e <put_fat+0x232>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	899b      	ldrh	r3, [r3, #12]
 800a50e:	089b      	lsrs	r3, r3, #2
 800a510:	b29b      	uxth	r3, r3
 800a512:	4619      	mov	r1, r3
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	fbb3 f3f1 	udiv	r3, r3, r1
 800a51a:	4413      	add	r3, r2
 800a51c:	4619      	mov	r1, r3
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	f7ff fd12 	bl	8009f48 <move_window>
 800a524:	4603      	mov	r3, r0
 800a526:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a528:	7ffb      	ldrb	r3, [r7, #31]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d136      	bne.n	800a59c <put_fat+0x230>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	2b04      	cmp	r3, #4
 800a534:	d017      	beq.n	800a566 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	8992      	ldrh	r2, [r2, #12]
 800a54a:	fbb3 f0f2 	udiv	r0, r3, r2
 800a54e:	fb00 f202 	mul.w	r2, r0, r2
 800a552:	1a9b      	subs	r3, r3, r2
 800a554:	440b      	add	r3, r1
 800a556:	4618      	mov	r0, r3
 800a558:	f7ff f8ca 	bl	80096f0 <ld_dword>
 800a55c:	4603      	mov	r3, r0
 800a55e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a562:	4323      	orrs	r3, r4
 800a564:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	009b      	lsls	r3, r3, #2
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	8992      	ldrh	r2, [r2, #12]
 800a574:	fbb3 f0f2 	udiv	r0, r3, r2
 800a578:	fb00 f202 	mul.w	r2, r0, r2
 800a57c:	1a9b      	subs	r3, r3, r2
 800a57e:	440b      	add	r3, r1
 800a580:	6879      	ldr	r1, [r7, #4]
 800a582:	4618      	mov	r0, r3
 800a584:	f7ff f9cd 	bl	8009922 <st_dword>
			fs->wflag = 1;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2201      	movs	r2, #1
 800a58c:	70da      	strb	r2, [r3, #3]
			break;
 800a58e:	e006      	b.n	800a59e <put_fat+0x232>
			if (res != FR_OK) break;
 800a590:	bf00      	nop
 800a592:	e004      	b.n	800a59e <put_fat+0x232>
			if (res != FR_OK) break;
 800a594:	bf00      	nop
 800a596:	e002      	b.n	800a59e <put_fat+0x232>
			if (res != FR_OK) break;
 800a598:	bf00      	nop
 800a59a:	e000      	b.n	800a59e <put_fat+0x232>
			if (res != FR_OK) break;
 800a59c:	bf00      	nop
		}
	}
	return res;
 800a59e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3724      	adds	r7, #36	@ 0x24
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd90      	pop	{r4, r7, pc}

0800a5a8 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b08a      	sub	sp, #40	@ 0x28
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	3b02      	subs	r3, #2
 800a5b8:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5be:	3b02      	subs	r3, #2
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d301      	bcc.n	800a5ca <find_bitmap+0x22>
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	61fb      	str	r3, [r7, #28]
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	61bb      	str	r3, [r7, #24]
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	08db      	lsrs	r3, r3, #3
 800a5de:	68f9      	ldr	r1, [r7, #12]
 800a5e0:	8989      	ldrh	r1, [r1, #12]
 800a5e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a5e6:	4413      	add	r3, r2
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f7ff fcac 	bl	8009f48 <move_window>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d002      	beq.n	800a5fc <find_bitmap+0x54>
 800a5f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5fa:	e058      	b.n	800a6ae <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	08db      	lsrs	r3, r3, #3
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	8992      	ldrh	r2, [r2, #12]
 800a604:	fbb3 f1f2 	udiv	r1, r3, r2
 800a608:	fb01 f202 	mul.w	r2, r1, r2
 800a60c:	1a9b      	subs	r3, r3, r2
 800a60e:	623b      	str	r3, [r7, #32]
 800a610:	69fb      	ldr	r3, [r7, #28]
 800a612:	f003 0307 	and.w	r3, r3, #7
 800a616:	2201      	movs	r2, #1
 800a618:	fa02 f303 	lsl.w	r3, r2, r3
 800a61c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	6a3b      	ldr	r3, [r7, #32]
 800a624:	4413      	add	r3, r2
 800a626:	3340      	adds	r3, #64	@ 0x40
 800a628:	781a      	ldrb	r2, [r3, #0]
 800a62a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a62e:	4013      	ands	r3, r2
 800a630:	74fb      	strb	r3, [r7, #19]
 800a632:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a636:	005b      	lsls	r3, r3, #1
 800a638:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800a63c:	69fb      	ldr	r3, [r7, #28]
 800a63e:	3301      	adds	r3, #1
 800a640:	61fb      	str	r3, [r7, #28]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a646:	3b02      	subs	r3, #2
 800a648:	69fa      	ldr	r2, [r7, #28]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d307      	bcc.n	800a65e <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800a64e:	2300      	movs	r3, #0
 800a650:	61fb      	str	r3, [r7, #28]
 800a652:	2300      	movs	r3, #0
 800a654:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	899b      	ldrh	r3, [r3, #12]
 800a65c:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800a65e:	7cfb      	ldrb	r3, [r7, #19]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d109      	bne.n	800a678 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	3301      	adds	r3, #1
 800a668:	617b      	str	r3, [r7, #20]
 800a66a:	697a      	ldr	r2, [r7, #20]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d106      	bne.n	800a680 <find_bitmap+0xd8>
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	3302      	adds	r3, #2
 800a676:	e01a      	b.n	800a6ae <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800a678:	69fb      	ldr	r3, [r7, #28]
 800a67a:	61bb      	str	r3, [r7, #24]
 800a67c:	2300      	movs	r3, #0
 800a67e:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800a680:	69fa      	ldr	r2, [r7, #28]
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	429a      	cmp	r2, r3
 800a686:	d101      	bne.n	800a68c <find_bitmap+0xe4>
 800a688:	2300      	movs	r3, #0
 800a68a:	e010      	b.n	800a6ae <find_bitmap+0x106>
			} while (bm);
 800a68c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a690:	2b00      	cmp	r3, #0
 800a692:	d1c5      	bne.n	800a620 <find_bitmap+0x78>
			bm = 1;
 800a694:	2301      	movs	r3, #1
 800a696:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 800a69a:	6a3b      	ldr	r3, [r7, #32]
 800a69c:	3301      	adds	r3, #1
 800a69e:	623b      	str	r3, [r7, #32]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	899b      	ldrh	r3, [r3, #12]
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	6a3b      	ldr	r3, [r7, #32]
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d3b9      	bcc.n	800a620 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800a6ac:	e793      	b.n	800a5d6 <find_bitmap+0x2e>
	}
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3728      	adds	r7, #40	@ 0x28
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b088      	sub	sp, #32
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	60f8      	str	r0, [r7, #12]
 800a6be:	60b9      	str	r1, [r7, #8]
 800a6c0:	607a      	str	r2, [r7, #4]
 800a6c2:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	3b02      	subs	r3, #2
 800a6c8:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	08db      	lsrs	r3, r3, #3
 800a6d2:	68f9      	ldr	r1, [r7, #12]
 800a6d4:	8989      	ldrh	r1, [r1, #12]
 800a6d6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a6da:	4413      	add	r3, r2
 800a6dc:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	08db      	lsrs	r3, r3, #3
 800a6e2:	68fa      	ldr	r2, [r7, #12]
 800a6e4:	8992      	ldrh	r2, [r2, #12]
 800a6e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6ea:	fb01 f202 	mul.w	r2, r1, r2
 800a6ee:	1a9b      	subs	r3, r3, r2
 800a6f0:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	f003 0307 	and.w	r3, r3, #7
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a6fe:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	1c5a      	adds	r2, r3, #1
 800a704:	617a      	str	r2, [r7, #20]
 800a706:	4619      	mov	r1, r3
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f7ff fc1d 	bl	8009f48 <move_window>
 800a70e:	4603      	mov	r3, r0
 800a710:	2b00      	cmp	r3, #0
 800a712:	d001      	beq.n	800a718 <change_bitmap+0x62>
 800a714:	2301      	movs	r3, #1
 800a716:	e03f      	b.n	800a798 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	69bb      	ldr	r3, [r7, #24]
 800a71c:	4413      	add	r3, r2
 800a71e:	3340      	adds	r3, #64	@ 0x40
 800a720:	781a      	ldrb	r2, [r3, #0]
 800a722:	7ffb      	ldrb	r3, [r7, #31]
 800a724:	4013      	ands	r3, r2
 800a726:	b2db      	uxtb	r3, r3
 800a728:	2b00      	cmp	r3, #0
 800a72a:	bf14      	ite	ne
 800a72c:	2301      	movne	r3, #1
 800a72e:	2300      	moveq	r3, #0
 800a730:	b2db      	uxtb	r3, r3
 800a732:	461a      	mov	r2, r3
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	4293      	cmp	r3, r2
 800a738:	d101      	bne.n	800a73e <change_bitmap+0x88>
 800a73a:	2302      	movs	r3, #2
 800a73c:	e02c      	b.n	800a798 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	69bb      	ldr	r3, [r7, #24]
 800a742:	4413      	add	r3, r2
 800a744:	3340      	adds	r3, #64	@ 0x40
 800a746:	781a      	ldrb	r2, [r3, #0]
 800a748:	7ffb      	ldrb	r3, [r7, #31]
 800a74a:	4053      	eors	r3, r2
 800a74c:	b2d9      	uxtb	r1, r3
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	69bb      	ldr	r3, [r7, #24]
 800a752:	4413      	add	r3, r2
 800a754:	3340      	adds	r3, #64	@ 0x40
 800a756:	460a      	mov	r2, r1
 800a758:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2201      	movs	r2, #1
 800a75e:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	3b01      	subs	r3, #1
 800a764:	607b      	str	r3, [r7, #4]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d101      	bne.n	800a770 <change_bitmap+0xba>
 800a76c:	2300      	movs	r3, #0
 800a76e:	e013      	b.n	800a798 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800a770:	7ffb      	ldrb	r3, [r7, #31]
 800a772:	005b      	lsls	r3, r3, #1
 800a774:	77fb      	strb	r3, [r7, #31]
 800a776:	7ffb      	ldrb	r3, [r7, #31]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d1cd      	bne.n	800a718 <change_bitmap+0x62>
			bm = 1;
 800a77c:	2301      	movs	r3, #1
 800a77e:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800a780:	69bb      	ldr	r3, [r7, #24]
 800a782:	3301      	adds	r3, #1
 800a784:	61bb      	str	r3, [r7, #24]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	899b      	ldrh	r3, [r3, #12]
 800a78a:	461a      	mov	r2, r3
 800a78c:	69bb      	ldr	r3, [r7, #24]
 800a78e:	4293      	cmp	r3, r2
 800a790:	d3c2      	bcc.n	800a718 <change_bitmap+0x62>
		i = 0;
 800a792:	2300      	movs	r3, #0
 800a794:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800a796:	e7b3      	b.n	800a700 <change_bitmap+0x4a>
	}
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3720      	adds	r7, #32
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b086      	sub	sp, #24
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	79db      	ldrb	r3, [r3, #7]
 800a7ac:	2b03      	cmp	r3, #3
 800a7ae:	d121      	bne.n	800a7f4 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	617b      	str	r3, [r7, #20]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	699b      	ldr	r3, [r3, #24]
 800a7ba:	613b      	str	r3, [r7, #16]
 800a7bc:	e014      	b.n	800a7e8 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6818      	ldr	r0, [r3, #0]
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	6979      	ldr	r1, [r7, #20]
 800a7ca:	f7ff fdcf 	bl	800a36c <put_fat>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800a7d2:	7bfb      	ldrb	r3, [r7, #15]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d001      	beq.n	800a7dc <fill_first_frag+0x3c>
 800a7d8:	7bfb      	ldrb	r3, [r7, #15]
 800a7da:	e00c      	b.n	800a7f6 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	617b      	str	r3, [r7, #20]
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	613b      	str	r3, [r7, #16]
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d1e7      	bne.n	800a7be <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3718      	adds	r7, #24
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b086      	sub	sp, #24
 800a802:	af00      	add	r7, sp, #0
 800a804:	60f8      	str	r0, [r7, #12]
 800a806:	60b9      	str	r1, [r7, #8]
 800a808:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800a80a:	e020      	b.n	800a84e <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6818      	ldr	r0, [r3, #0]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	69db      	ldr	r3, [r3, #28]
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	1ad3      	subs	r3, r2, r3
 800a818:	1c59      	adds	r1, r3, #1
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	69db      	ldr	r3, [r3, #28]
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d905      	bls.n	800a82e <fill_last_frag+0x30>
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	69db      	ldr	r3, [r3, #28]
 800a826:	68ba      	ldr	r2, [r7, #8]
 800a828:	1ad3      	subs	r3, r2, r3
 800a82a:	3302      	adds	r3, #2
 800a82c:	e000      	b.n	800a830 <fill_last_frag+0x32>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	461a      	mov	r2, r3
 800a832:	f7ff fd9b 	bl	800a36c <put_fat>
 800a836:	4603      	mov	r3, r0
 800a838:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800a83a:	7dfb      	ldrb	r3, [r7, #23]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d001      	beq.n	800a844 <fill_last_frag+0x46>
 800a840:	7dfb      	ldrb	r3, [r7, #23]
 800a842:	e009      	b.n	800a858 <fill_last_frag+0x5a>
		obj->n_frag--;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	69db      	ldr	r3, [r3, #28]
 800a848:	1e5a      	subs	r2, r3, #1
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	69db      	ldr	r3, [r3, #28]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1da      	bne.n	800a80c <fill_last_frag+0xe>
	}
	return FR_OK;
 800a856:	2300      	movs	r3, #0
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3718      	adds	r7, #24
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b08a      	sub	sp, #40	@ 0x28
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a86c:	2300      	movs	r3, #0
 800a86e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	627b      	str	r3, [r7, #36]	@ 0x24
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d904      	bls.n	800a88e <remove_chain+0x2e>
 800a884:	69bb      	ldr	r3, [r7, #24]
 800a886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d301      	bcc.n	800a892 <remove_chain+0x32>
 800a88e:	2302      	movs	r3, #2
 800a890:	e096      	b.n	800a9c0 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d014      	beq.n	800a8c2 <remove_chain+0x62>
 800a898:	69bb      	ldr	r3, [r7, #24]
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	2b04      	cmp	r3, #4
 800a89e:	d103      	bne.n	800a8a8 <remove_chain+0x48>
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	79db      	ldrb	r3, [r3, #7]
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	d00c      	beq.n	800a8c2 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a8a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ac:	6879      	ldr	r1, [r7, #4]
 800a8ae:	69b8      	ldr	r0, [r7, #24]
 800a8b0:	f7ff fd5c 	bl	800a36c <put_fat>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a8b8:	7ffb      	ldrb	r3, [r7, #31]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d001      	beq.n	800a8c2 <remove_chain+0x62>
 800a8be:	7ffb      	ldrb	r3, [r7, #31]
 800a8c0:	e07e      	b.n	800a9c0 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a8c2:	68b9      	ldr	r1, [r7, #8]
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f7ff fbfd 	bl	800a0c4 <get_fat>
 800a8ca:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d055      	beq.n	800a97e <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d101      	bne.n	800a8dc <remove_chain+0x7c>
 800a8d8:	2302      	movs	r3, #2
 800a8da:	e071      	b.n	800a9c0 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8e2:	d101      	bne.n	800a8e8 <remove_chain+0x88>
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	e06b      	b.n	800a9c0 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	2b04      	cmp	r3, #4
 800a8ee:	d00b      	beq.n	800a908 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	68b9      	ldr	r1, [r7, #8]
 800a8f4:	69b8      	ldr	r0, [r7, #24]
 800a8f6:	f7ff fd39 	bl	800a36c <put_fat>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a8fe:	7ffb      	ldrb	r3, [r7, #31]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d001      	beq.n	800a908 <remove_chain+0xa8>
 800a904:	7ffb      	ldrb	r3, [r7, #31]
 800a906:	e05b      	b.n	800a9c0 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	6a1a      	ldr	r2, [r3, #32]
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a910:	3b02      	subs	r3, #2
 800a912:	429a      	cmp	r2, r3
 800a914:	d20b      	bcs.n	800a92e <remove_chain+0xce>
			fs->free_clst++;
 800a916:	69bb      	ldr	r3, [r7, #24]
 800a918:	6a1b      	ldr	r3, [r3, #32]
 800a91a:	1c5a      	adds	r2, r3, #1
 800a91c:	69bb      	ldr	r3, [r7, #24]
 800a91e:	621a      	str	r2, [r3, #32]
			fs->fsi_flag |= 1;
 800a920:	69bb      	ldr	r3, [r7, #24]
 800a922:	791b      	ldrb	r3, [r3, #4]
 800a924:	f043 0301 	orr.w	r3, r3, #1
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800a92e:	6a3b      	ldr	r3, [r7, #32]
 800a930:	3301      	adds	r3, #1
 800a932:	697a      	ldr	r2, [r7, #20]
 800a934:	429a      	cmp	r2, r3
 800a936:	d102      	bne.n	800a93e <remove_chain+0xde>
			ecl = nxt;
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	623b      	str	r3, [r7, #32]
 800a93c:	e017      	b.n	800a96e <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	2b04      	cmp	r3, #4
 800a944:	d10f      	bne.n	800a966 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800a946:	6a3a      	ldr	r2, [r7, #32]
 800a948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a94a:	1ad3      	subs	r3, r2, r3
 800a94c:	1c5a      	adds	r2, r3, #1
 800a94e:	2300      	movs	r3, #0
 800a950:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a952:	69b8      	ldr	r0, [r7, #24]
 800a954:	f7ff feaf 	bl	800a6b6 <change_bitmap>
 800a958:	4603      	mov	r3, r0
 800a95a:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800a95c:	7ffb      	ldrb	r3, [r7, #31]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d001      	beq.n	800a966 <remove_chain+0x106>
 800a962:	7ffb      	ldrb	r3, [r7, #31]
 800a964:	e02c      	b.n	800a9c0 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	623b      	str	r3, [r7, #32]
 800a96a:	6a3b      	ldr	r3, [r7, #32]
 800a96c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a976:	68ba      	ldr	r2, [r7, #8]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d3a2      	bcc.n	800a8c2 <remove_chain+0x62>
 800a97c:	e000      	b.n	800a980 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800a97e:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800a980:	69bb      	ldr	r3, [r7, #24]
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	2b04      	cmp	r3, #4
 800a986:	d11a      	bne.n	800a9be <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d103      	bne.n	800a996 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2200      	movs	r2, #0
 800a992:	71da      	strb	r2, [r3, #7]
 800a994:	e013      	b.n	800a9be <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	79db      	ldrb	r3, [r3, #7]
 800a99a:	2b03      	cmp	r3, #3
 800a99c:	d10f      	bne.n	800a9be <remove_chain+0x15e>
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	689b      	ldr	r3, [r3, #8]
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d30a      	bcc.n	800a9be <remove_chain+0x15e>
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	689a      	ldr	r2, [r3, #8]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	699b      	ldr	r3, [r3, #24]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d802      	bhi.n	800a9be <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2202      	movs	r2, #2
 800a9bc:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3728      	adds	r7, #40	@ 0x28
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b088      	sub	sp, #32
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d10d      	bne.n	800a9fa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	69db      	ldr	r3, [r3, #28]
 800a9e2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a9e4:	69bb      	ldr	r3, [r7, #24]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d004      	beq.n	800a9f4 <create_chain+0x2c>
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ee:	69ba      	ldr	r2, [r7, #24]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d31b      	bcc.n	800aa2c <create_chain+0x64>
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	61bb      	str	r3, [r7, #24]
 800a9f8:	e018      	b.n	800aa2c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a9fa:	6839      	ldr	r1, [r7, #0]
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f7ff fb61 	bl	800a0c4 <get_fat>
 800aa02:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d801      	bhi.n	800aa0e <create_chain+0x46>
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	e0d9      	b.n	800abc2 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa14:	d101      	bne.n	800aa1a <create_chain+0x52>
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	e0d3      	b.n	800abc2 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d201      	bcs.n	800aa28 <create_chain+0x60>
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	e0cc      	b.n	800abc2 <create_chain+0x1fa>
		scl = clst;
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	2b04      	cmp	r3, #4
 800aa32:	d164      	bne.n	800aafe <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800aa34:	2201      	movs	r2, #1
 800aa36:	69b9      	ldr	r1, [r7, #24]
 800aa38:	6938      	ldr	r0, [r7, #16]
 800aa3a:	f7ff fdb5 	bl	800a5a8 <find_bitmap>
 800aa3e:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d003      	beq.n	800aa4e <create_chain+0x86>
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa4c:	d101      	bne.n	800aa52 <create_chain+0x8a>
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	e0b7      	b.n	800abc2 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800aa52:	2301      	movs	r3, #1
 800aa54:	2201      	movs	r2, #1
 800aa56:	69f9      	ldr	r1, [r7, #28]
 800aa58:	6938      	ldr	r0, [r7, #16]
 800aa5a:	f7ff fe2c 	bl	800a6b6 <change_bitmap>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800aa62:	7dfb      	ldrb	r3, [r7, #23]
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d101      	bne.n	800aa6c <create_chain+0xa4>
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e0aa      	b.n	800abc2 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800aa6c:	7dfb      	ldrb	r3, [r7, #23]
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d102      	bne.n	800aa78 <create_chain+0xb0>
 800aa72:	f04f 33ff 	mov.w	r3, #4294967295
 800aa76:	e0a4      	b.n	800abc2 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d103      	bne.n	800aa86 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2202      	movs	r2, #2
 800aa82:	71da      	strb	r2, [r3, #7]
 800aa84:	e011      	b.n	800aaaa <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	79db      	ldrb	r3, [r3, #7]
 800aa8a:	2b02      	cmp	r3, #2
 800aa8c:	d10d      	bne.n	800aaaa <create_chain+0xe2>
 800aa8e:	69bb      	ldr	r3, [r7, #24]
 800aa90:	3301      	adds	r3, #1
 800aa92:	69fa      	ldr	r2, [r7, #28]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d008      	beq.n	800aaaa <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	69ba      	ldr	r2, [r7, #24]
 800aa9e:	1ad2      	subs	r2, r2, r3
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2203      	movs	r2, #3
 800aaa8:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	79db      	ldrb	r3, [r3, #7]
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	d064      	beq.n	800ab7c <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	3301      	adds	r3, #1
 800aab6:	69fa      	ldr	r2, [r7, #28]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d10b      	bne.n	800aad4 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	69db      	ldr	r3, [r3, #28]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d003      	beq.n	800aacc <create_chain+0x104>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	69db      	ldr	r3, [r3, #28]
 800aac8:	3301      	adds	r3, #1
 800aaca:	e000      	b.n	800aace <create_chain+0x106>
 800aacc:	2302      	movs	r3, #2
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	61d3      	str	r3, [r2, #28]
 800aad2:	e053      	b.n	800ab7c <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	69db      	ldr	r3, [r3, #28]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d102      	bne.n	800aae2 <create_chain+0x11a>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2201      	movs	r2, #1
 800aae0:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800aae2:	69fa      	ldr	r2, [r7, #28]
 800aae4:	6839      	ldr	r1, [r7, #0]
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f7ff fe89 	bl	800a7fe <fill_last_frag>
 800aaec:	4603      	mov	r3, r0
 800aaee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800aaf0:	7dfb      	ldrb	r3, [r7, #23]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d142      	bne.n	800ab7c <create_chain+0x1b4>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	61da      	str	r2, [r3, #28]
 800aafc:	e03e      	b.n	800ab7c <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	3301      	adds	r3, #1
 800ab06:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab0c:	69fa      	ldr	r2, [r7, #28]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d307      	bcc.n	800ab22 <create_chain+0x15a>
				ncl = 2;
 800ab12:	2302      	movs	r3, #2
 800ab14:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ab16:	69fa      	ldr	r2, [r7, #28]
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d901      	bls.n	800ab22 <create_chain+0x15a>
 800ab1e:	2300      	movs	r3, #0
 800ab20:	e04f      	b.n	800abc2 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ab22:	69f9      	ldr	r1, [r7, #28]
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f7ff facd 	bl	800a0c4 <get_fat>
 800ab2a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d00e      	beq.n	800ab50 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d003      	beq.n	800ab40 <create_chain+0x178>
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab3e:	d101      	bne.n	800ab44 <create_chain+0x17c>
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	e03e      	b.n	800abc2 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800ab44:	69fa      	ldr	r2, [r7, #28]
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d1da      	bne.n	800ab02 <create_chain+0x13a>
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	e038      	b.n	800abc2 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800ab50:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ab52:	f04f 32ff 	mov.w	r2, #4294967295
 800ab56:	69f9      	ldr	r1, [r7, #28]
 800ab58:	6938      	ldr	r0, [r7, #16]
 800ab5a:	f7ff fc07 	bl	800a36c <put_fat>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ab62:	7dfb      	ldrb	r3, [r7, #23]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d109      	bne.n	800ab7c <create_chain+0x1b4>
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d006      	beq.n	800ab7c <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ab6e:	69fa      	ldr	r2, [r7, #28]
 800ab70:	6839      	ldr	r1, [r7, #0]
 800ab72:	6938      	ldr	r0, [r7, #16]
 800ab74:	f7ff fbfa 	bl	800a36c <put_fat>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ab7c:	7dfb      	ldrb	r3, [r7, #23]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d116      	bne.n	800abb0 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	69fa      	ldr	r2, [r7, #28]
 800ab86:	61da      	str	r2, [r3, #28]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	6a1a      	ldr	r2, [r3, #32]
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab90:	3b02      	subs	r3, #2
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d804      	bhi.n	800aba0 <create_chain+0x1d8>
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	6a1b      	ldr	r3, [r3, #32]
 800ab9a:	1e5a      	subs	r2, r3, #1
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	621a      	str	r2, [r3, #32]
		fs->fsi_flag |= 1;
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	791b      	ldrb	r3, [r3, #4]
 800aba4:	f043 0301 	orr.w	r3, r3, #1
 800aba8:	b2da      	uxtb	r2, r3
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	711a      	strb	r2, [r3, #4]
 800abae:	e007      	b.n	800abc0 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800abb0:	7dfb      	ldrb	r3, [r7, #23]
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d102      	bne.n	800abbc <create_chain+0x1f4>
 800abb6:	f04f 33ff 	mov.w	r3, #4294967295
 800abba:	e000      	b.n	800abbe <create_chain+0x1f6>
 800abbc:	2301      	movs	r3, #1
 800abbe:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800abc0:	69fb      	ldr	r3, [r7, #28]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3720      	adds	r7, #32
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800abca:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800abce:	b088      	sub	sp, #32
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abe2:	3304      	adds	r3, #4
 800abe4:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	899b      	ldrh	r3, [r3, #12]
 800abea:	b29b      	uxth	r3, r3
 800abec:	2200      	movs	r2, #0
 800abee:	4698      	mov	r8, r3
 800abf0:	4691      	mov	r9, r2
 800abf2:	4642      	mov	r2, r8
 800abf4:	464b      	mov	r3, r9
 800abf6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800abfa:	f7f5 ffd7 	bl	8000bac <__aeabi_uldivmod>
 800abfe:	4602      	mov	r2, r0
 800ac00:	460b      	mov	r3, r1
 800ac02:	4610      	mov	r0, r2
 800ac04:	4619      	mov	r1, r3
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	895b      	ldrh	r3, [r3, #10]
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	461c      	mov	r4, r3
 800ac10:	4615      	mov	r5, r2
 800ac12:	4622      	mov	r2, r4
 800ac14:	462b      	mov	r3, r5
 800ac16:	f7f5 ffc9 	bl	8000bac <__aeabi_uldivmod>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	4613      	mov	r3, r2
 800ac20:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	1d1a      	adds	r2, r3, #4
 800ac26:	61ba      	str	r2, [r7, #24]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d101      	bne.n	800ac36 <clmt_clust+0x6c>
 800ac32:	2300      	movs	r3, #0
 800ac34:	e010      	b.n	800ac58 <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 800ac36:	69fa      	ldr	r2, [r7, #28]
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d307      	bcc.n	800ac4e <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 800ac3e:	69fa      	ldr	r2, [r7, #28]
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	1ad3      	subs	r3, r2, r3
 800ac44:	61fb      	str	r3, [r7, #28]
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	3304      	adds	r3, #4
 800ac4a:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ac4c:	e7e9      	b.n	800ac22 <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 800ac4e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ac50:	69bb      	ldr	r3, [r7, #24]
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	69fb      	ldr	r3, [r7, #28]
 800ac56:	4413      	add	r3, r2
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3720      	adds	r7, #32
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800ac62 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ac62:	b580      	push	{r7, lr}
 800ac64:	b086      	sub	sp, #24
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	2b04      	cmp	r3, #4
 800ac78:	d102      	bne.n	800ac80 <dir_sdi+0x1e>
 800ac7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac7e:	e001      	b.n	800ac84 <dir_sdi+0x22>
 800ac80:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d904      	bls.n	800ac94 <dir_sdi+0x32>
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	f003 031f 	and.w	r3, r3, #31
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d001      	beq.n	800ac98 <dir_sdi+0x36>
		return FR_INT_ERR;
 800ac94:	2302      	movs	r3, #2
 800ac96:	e074      	b.n	800ad82 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	683a      	ldr	r2, [r7, #0]
 800ac9c:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d109      	bne.n	800acbe <dir_sdi+0x5c>
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	2b02      	cmp	r3, #2
 800acb0:	d905      	bls.n	800acbe <dir_sdi+0x5c>
		clst = fs->dirbase;
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acb6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d10c      	bne.n	800acde <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	095b      	lsrs	r3, r3, #5
 800acc8:	693a      	ldr	r2, [r7, #16]
 800acca:	8912      	ldrh	r2, [r2, #8]
 800accc:	4293      	cmp	r3, r2
 800acce:	d301      	bcc.n	800acd4 <dir_sdi+0x72>
 800acd0:	2302      	movs	r3, #2
 800acd2:	e056      	b.n	800ad82 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	639a      	str	r2, [r3, #56]	@ 0x38
 800acdc:	e02d      	b.n	800ad3a <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	895b      	ldrh	r3, [r3, #10]
 800ace2:	461a      	mov	r2, r3
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	899b      	ldrh	r3, [r3, #12]
 800ace8:	fb02 f303 	mul.w	r3, r2, r3
 800acec:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800acee:	e019      	b.n	800ad24 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6979      	ldr	r1, [r7, #20]
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7ff f9e5 	bl	800a0c4 <get_fat>
 800acfa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad02:	d101      	bne.n	800ad08 <dir_sdi+0xa6>
 800ad04:	2301      	movs	r3, #1
 800ad06:	e03c      	b.n	800ad82 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d904      	bls.n	800ad18 <dir_sdi+0xb6>
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad12:	697a      	ldr	r2, [r7, #20]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d301      	bcc.n	800ad1c <dir_sdi+0xba>
 800ad18:	2302      	movs	r3, #2
 800ad1a:	e032      	b.n	800ad82 <dir_sdi+0x120>
			ofs -= csz;
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ad24:	683a      	ldr	r2, [r7, #0]
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d2e1      	bcs.n	800acf0 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800ad2c:	6979      	ldr	r1, [r7, #20]
 800ad2e:	6938      	ldr	r0, [r7, #16]
 800ad30:	f7ff f9a8 	bl	800a084 <clust2sect>
 800ad34:	4602      	mov	r2, r0
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	697a      	ldr	r2, [r7, #20]
 800ad3e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d101      	bne.n	800ad4c <dir_sdi+0xea>
 800ad48:	2302      	movs	r3, #2
 800ad4a:	e01a      	b.n	800ad82 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	899b      	ldrh	r3, [r3, #12]
 800ad54:	4619      	mov	r1, r3
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad5c:	441a      	add	r2, r3
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	899b      	ldrh	r3, [r3, #12]
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad74:	fb00 f202 	mul.w	r2, r0, r2
 800ad78:	1a9b      	subs	r3, r3, r2
 800ad7a:	18ca      	adds	r2, r1, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800ad80:	2300      	movs	r3, #0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3718      	adds	r7, #24
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b086      	sub	sp, #24
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
 800ad92:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad9e:	3320      	adds	r3, #32
 800ada0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d00b      	beq.n	800adc2 <dir_next+0x38>
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	2b04      	cmp	r3, #4
 800adb0:	d102      	bne.n	800adb8 <dir_next+0x2e>
 800adb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adb6:	e001      	b.n	800adbc <dir_next+0x32>
 800adb8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d801      	bhi.n	800adc6 <dir_next+0x3c>
 800adc2:	2304      	movs	r3, #4
 800adc4:	e0c3      	b.n	800af4e <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	899b      	ldrh	r3, [r3, #12]
 800adca:	461a      	mov	r2, r3
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	fbb3 f1f2 	udiv	r1, r3, r2
 800add2:	fb01 f202 	mul.w	r2, r1, r2
 800add6:	1a9b      	subs	r3, r3, r2
 800add8:	2b00      	cmp	r3, #0
 800adda:	f040 80a5 	bne.w	800af28 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ade2:	1c5a      	adds	r2, r3, #1
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adec:	2b00      	cmp	r3, #0
 800adee:	d10b      	bne.n	800ae08 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	095b      	lsrs	r3, r3, #5
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	8912      	ldrh	r2, [r2, #8]
 800adf8:	4293      	cmp	r3, r2
 800adfa:	f0c0 8095 	bcc.w	800af28 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	639a      	str	r2, [r3, #56]	@ 0x38
 800ae04:	2304      	movs	r3, #4
 800ae06:	e0a2      	b.n	800af4e <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	899b      	ldrh	r3, [r3, #12]
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	8952      	ldrh	r2, [r2, #10]
 800ae18:	3a01      	subs	r2, #1
 800ae1a:	4013      	ands	r3, r2
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	f040 8083 	bne.w	800af28 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae28:	4619      	mov	r1, r3
 800ae2a:	4610      	mov	r0, r2
 800ae2c:	f7ff f94a 	bl	800a0c4 <get_fat>
 800ae30:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d801      	bhi.n	800ae3c <dir_next+0xb2>
 800ae38:	2302      	movs	r3, #2
 800ae3a:	e088      	b.n	800af4e <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae42:	d101      	bne.n	800ae48 <dir_next+0xbe>
 800ae44:	2301      	movs	r3, #1
 800ae46:	e082      	b.n	800af4e <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae4c:	697a      	ldr	r2, [r7, #20]
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d360      	bcc.n	800af14 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d104      	bne.n	800ae62 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	639a      	str	r2, [r3, #56]	@ 0x38
 800ae5e:	2304      	movs	r3, #4
 800ae60:	e075      	b.n	800af4e <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae68:	4619      	mov	r1, r3
 800ae6a:	4610      	mov	r0, r2
 800ae6c:	f7ff fdac 	bl	800a9c8 <create_chain>
 800ae70:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d101      	bne.n	800ae7c <dir_next+0xf2>
 800ae78:	2307      	movs	r3, #7
 800ae7a:	e068      	b.n	800af4e <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d101      	bne.n	800ae86 <dir_next+0xfc>
 800ae82:	2302      	movs	r3, #2
 800ae84:	e063      	b.n	800af4e <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae8c:	d101      	bne.n	800ae92 <dir_next+0x108>
 800ae8e:	2301      	movs	r3, #1
 800ae90:	e05d      	b.n	800af4e <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	79db      	ldrb	r3, [r3, #7]
 800ae96:	f043 0304 	orr.w	r3, r3, #4
 800ae9a:	b2da      	uxtb	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800aea0:	68f8      	ldr	r0, [r7, #12]
 800aea2:	f7ff f80d 	bl	8009ec0 <sync_window>
 800aea6:	4603      	mov	r3, r0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d001      	beq.n	800aeb0 <dir_next+0x126>
 800aeac:	2301      	movs	r3, #1
 800aeae:	e04e      	b.n	800af4e <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	899b      	ldrh	r3, [r3, #12]
 800aeba:	461a      	mov	r2, r3
 800aebc:	2100      	movs	r1, #0
 800aebe:	f7fe fe05 	bl	8009acc <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aec2:	2300      	movs	r3, #0
 800aec4:	613b      	str	r3, [r7, #16]
 800aec6:	6979      	ldr	r1, [r7, #20]
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f7ff f8db 	bl	800a084 <clust2sect>
 800aece:	4602      	mov	r2, r0
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	63da      	str	r2, [r3, #60]	@ 0x3c
 800aed4:	e012      	b.n	800aefc <dir_next+0x172>
						fs->wflag = 1;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2201      	movs	r2, #1
 800aeda:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f7fe ffef 	bl	8009ec0 <sync_window>
 800aee2:	4603      	mov	r3, r0
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d001      	beq.n	800aeec <dir_next+0x162>
 800aee8:	2301      	movs	r3, #1
 800aeea:	e030      	b.n	800af4e <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	3301      	adds	r3, #1
 800aef0:	613b      	str	r3, [r7, #16]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aef6:	1c5a      	adds	r2, r3, #1
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	63da      	str	r2, [r3, #60]	@ 0x3c
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	895b      	ldrh	r3, [r3, #10]
 800af00:	461a      	mov	r2, r3
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	4293      	cmp	r3, r2
 800af06:	d3e6      	bcc.n	800aed6 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	1ad2      	subs	r2, r2, r3
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	63da      	str	r2, [r3, #60]	@ 0x3c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	697a      	ldr	r2, [r7, #20]
 800af18:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 800af1a:	6979      	ldr	r1, [r7, #20]
 800af1c:	68f8      	ldr	r0, [r7, #12]
 800af1e:	f7ff f8b1 	bl	800a084 <clust2sect>
 800af22:	4602      	mov	r2, r0
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	68ba      	ldr	r2, [r7, #8]
 800af2c:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	899b      	ldrh	r3, [r3, #12]
 800af38:	461a      	mov	r2, r3
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	fbb3 f0f2 	udiv	r0, r3, r2
 800af40:	fb00 f202 	mul.w	r2, r0, r2
 800af44:	1a9b      	subs	r3, r3, r2
 800af46:	18ca      	adds	r2, r1, r3
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3718      	adds	r7, #24
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800af56:	b580      	push	{r7, lr}
 800af58:	b086      	sub	sp, #24
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
 800af5e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800af66:	2100      	movs	r1, #0
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f7ff fe7a 	bl	800ac62 <dir_sdi>
 800af6e:	4603      	mov	r3, r0
 800af70:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800af72:	7dfb      	ldrb	r3, [r7, #23]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d140      	bne.n	800affa <dir_alloc+0xa4>
		n = 0;
 800af78:	2300      	movs	r3, #0
 800af7a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af80:	4619      	mov	r1, r3
 800af82:	68f8      	ldr	r0, [r7, #12]
 800af84:	f7fe ffe0 	bl	8009f48 <move_window>
 800af88:	4603      	mov	r3, r0
 800af8a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800af8c:	7dfb      	ldrb	r3, [r7, #23]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d132      	bne.n	800aff8 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	2b04      	cmp	r3, #4
 800af98:	d108      	bne.n	800afac <dir_alloc+0x56>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	b25b      	sxtb	r3, r3
 800afa2:	43db      	mvns	r3, r3
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	09db      	lsrs	r3, r3, #7
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	e00f      	b.n	800afcc <dir_alloc+0x76>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	2be5      	cmp	r3, #229	@ 0xe5
 800afb4:	d004      	beq.n	800afc0 <dir_alloc+0x6a>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d101      	bne.n	800afc4 <dir_alloc+0x6e>
 800afc0:	2301      	movs	r3, #1
 800afc2:	e000      	b.n	800afc6 <dir_alloc+0x70>
 800afc4:	2300      	movs	r3, #0
 800afc6:	f003 0301 	and.w	r3, r3, #1
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d007      	beq.n	800afe0 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	3301      	adds	r3, #1
 800afd4:	613b      	str	r3, [r7, #16]
 800afd6:	693a      	ldr	r2, [r7, #16]
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d102      	bne.n	800afe4 <dir_alloc+0x8e>
 800afde:	e00c      	b.n	800affa <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800afe0:	2300      	movs	r3, #0
 800afe2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800afe4:	2101      	movs	r1, #1
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f7ff fecf 	bl	800ad8a <dir_next>
 800afec:	4603      	mov	r3, r0
 800afee:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800aff0:	7dfb      	ldrb	r3, [r7, #23]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d0c2      	beq.n	800af7c <dir_alloc+0x26>
 800aff6:	e000      	b.n	800affa <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800aff8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800affa:	7dfb      	ldrb	r3, [r7, #23]
 800affc:	2b04      	cmp	r3, #4
 800affe:	d101      	bne.n	800b004 <dir_alloc+0xae>
 800b000:	2307      	movs	r3, #7
 800b002:	75fb      	strb	r3, [r7, #23]
	return res;
 800b004:	7dfb      	ldrb	r3, [r7, #23]
}
 800b006:	4618      	mov	r0, r3
 800b008:	3718      	adds	r7, #24
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b084      	sub	sp, #16
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
 800b016:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	331a      	adds	r3, #26
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7fe fb4f 	bl	80096c0 <ld_word>
 800b022:	4603      	mov	r3, r0
 800b024:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	2b03      	cmp	r3, #3
 800b02c:	d109      	bne.n	800b042 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	3314      	adds	r3, #20
 800b032:	4618      	mov	r0, r3
 800b034:	f7fe fb44 	bl	80096c0 <ld_word>
 800b038:	4603      	mov	r3, r0
 800b03a:	041b      	lsls	r3, r3, #16
 800b03c:	68fa      	ldr	r2, [r7, #12]
 800b03e:	4313      	orrs	r3, r2
 800b040:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b042:	68fb      	ldr	r3, [r7, #12]
}
 800b044:	4618      	mov	r0, r3
 800b046:	3710      	adds	r7, #16
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	331a      	adds	r3, #26
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	b292      	uxth	r2, r2
 800b060:	4611      	mov	r1, r2
 800b062:	4618      	mov	r0, r3
 800b064:	f7fe fc42 	bl	80098ec <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	2b03      	cmp	r3, #3
 800b06e:	d109      	bne.n	800b084 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	f103 0214 	add.w	r2, r3, #20
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	0c1b      	lsrs	r3, r3, #16
 800b07a:	b29b      	uxth	r3, r3
 800b07c:	4619      	mov	r1, r3
 800b07e:	4610      	mov	r0, r2
 800b080:	f7fe fc34 	bl	80098ec <st_word>
	}
}
 800b084:	bf00      	nop
 800b086:	3710      	adds	r7, #16
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b08c:	b590      	push	{r4, r7, lr}
 800b08e:	b087      	sub	sp, #28
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	331a      	adds	r3, #26
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7fe fb10 	bl	80096c0 <ld_word>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d001      	beq.n	800b0aa <cmp_lfn+0x1e>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	e059      	b.n	800b15e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0b2:	1e5a      	subs	r2, r3, #1
 800b0b4:	4613      	mov	r3, r2
 800b0b6:	005b      	lsls	r3, r3, #1
 800b0b8:	4413      	add	r3, r2
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	4413      	add	r3, r2
 800b0be:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	81fb      	strh	r3, [r7, #14]
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	613b      	str	r3, [r7, #16]
 800b0c8:	e033      	b.n	800b132 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b0ca:	4a27      	ldr	r2, [pc, #156]	@ (800b168 <cmp_lfn+0xdc>)
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	4413      	add	r3, r2
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	4413      	add	r3, r2
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7fe faf1 	bl	80096c0 <ld_word>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b0e2:	89fb      	ldrh	r3, [r7, #14]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d01a      	beq.n	800b11e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	2bfe      	cmp	r3, #254	@ 0xfe
 800b0ec:	d812      	bhi.n	800b114 <cmp_lfn+0x88>
 800b0ee:	89bb      	ldrh	r3, [r7, #12]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f003 ff39 	bl	800ef68 <ff_wtoupper>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	461c      	mov	r4, r3
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	1c5a      	adds	r2, r3, #1
 800b0fe:	617a      	str	r2, [r7, #20]
 800b100:	005b      	lsls	r3, r3, #1
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	4413      	add	r3, r2
 800b106:	881b      	ldrh	r3, [r3, #0]
 800b108:	4618      	mov	r0, r3
 800b10a:	f003 ff2d 	bl	800ef68 <ff_wtoupper>
 800b10e:	4603      	mov	r3, r0
 800b110:	429c      	cmp	r4, r3
 800b112:	d001      	beq.n	800b118 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b114:	2300      	movs	r3, #0
 800b116:	e022      	b.n	800b15e <cmp_lfn+0xd2>
			}
			wc = uc;
 800b118:	89bb      	ldrh	r3, [r7, #12]
 800b11a:	81fb      	strh	r3, [r7, #14]
 800b11c:	e006      	b.n	800b12c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b11e:	89bb      	ldrh	r3, [r7, #12]
 800b120:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b124:	4293      	cmp	r3, r2
 800b126:	d001      	beq.n	800b12c <cmp_lfn+0xa0>
 800b128:	2300      	movs	r3, #0
 800b12a:	e018      	b.n	800b15e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	3301      	adds	r3, #1
 800b130:	613b      	str	r3, [r7, #16]
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	2b0c      	cmp	r3, #12
 800b136:	d9c8      	bls.n	800b0ca <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b140:	2b00      	cmp	r3, #0
 800b142:	d00b      	beq.n	800b15c <cmp_lfn+0xd0>
 800b144:	89fb      	ldrh	r3, [r7, #14]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d008      	beq.n	800b15c <cmp_lfn+0xd0>
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	005b      	lsls	r3, r3, #1
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	4413      	add	r3, r2
 800b152:	881b      	ldrh	r3, [r3, #0]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d001      	beq.n	800b15c <cmp_lfn+0xd0>
 800b158:	2300      	movs	r3, #0
 800b15a:	e000      	b.n	800b15e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b15c:	2301      	movs	r3, #1
}
 800b15e:	4618      	mov	r0, r3
 800b160:	371c      	adds	r7, #28
 800b162:	46bd      	mov	sp, r7
 800b164:	bd90      	pop	{r4, r7, pc}
 800b166:	bf00      	nop
 800b168:	0801870c 	.word	0x0801870c

0800b16c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b086      	sub	sp, #24
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	331a      	adds	r3, #26
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7fe faa0 	bl	80096c0 <ld_word>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d001      	beq.n	800b18a <pick_lfn+0x1e>
 800b186:	2300      	movs	r3, #0
 800b188:	e04d      	b.n	800b226 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b192:	1e5a      	subs	r2, r3, #1
 800b194:	4613      	mov	r3, r2
 800b196:	005b      	lsls	r3, r3, #1
 800b198:	4413      	add	r3, r2
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	4413      	add	r3, r2
 800b19e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	81fb      	strh	r3, [r7, #14]
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	613b      	str	r3, [r7, #16]
 800b1a8:	e028      	b.n	800b1fc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b1aa:	4a21      	ldr	r2, [pc, #132]	@ (800b230 <pick_lfn+0xc4>)
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	4413      	add	r3, r2
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7fe fa81 	bl	80096c0 <ld_word>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b1c2:	89fb      	ldrh	r3, [r7, #14]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00f      	beq.n	800b1e8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	2bfe      	cmp	r3, #254	@ 0xfe
 800b1cc:	d901      	bls.n	800b1d2 <pick_lfn+0x66>
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	e029      	b.n	800b226 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b1d2:	89bb      	ldrh	r3, [r7, #12]
 800b1d4:	81fb      	strh	r3, [r7, #14]
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	1c5a      	adds	r2, r3, #1
 800b1da:	617a      	str	r2, [r7, #20]
 800b1dc:	005b      	lsls	r3, r3, #1
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	89fa      	ldrh	r2, [r7, #14]
 800b1e4:	801a      	strh	r2, [r3, #0]
 800b1e6:	e006      	b.n	800b1f6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b1e8:	89bb      	ldrh	r3, [r7, #12]
 800b1ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d001      	beq.n	800b1f6 <pick_lfn+0x8a>
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	e017      	b.n	800b226 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	613b      	str	r3, [r7, #16]
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	2b0c      	cmp	r3, #12
 800b200:	d9d3      	bls.n	800b1aa <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d00a      	beq.n	800b224 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	2bfe      	cmp	r3, #254	@ 0xfe
 800b212:	d901      	bls.n	800b218 <pick_lfn+0xac>
 800b214:	2300      	movs	r3, #0
 800b216:	e006      	b.n	800b226 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	005b      	lsls	r3, r3, #1
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	4413      	add	r3, r2
 800b220:	2200      	movs	r2, #0
 800b222:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800b224:	2301      	movs	r3, #1
}
 800b226:	4618      	mov	r0, r3
 800b228:	3718      	adds	r7, #24
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	0801870c 	.word	0x0801870c

0800b234 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b088      	sub	sp, #32
 800b238:	af00      	add	r7, sp, #0
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	4611      	mov	r1, r2
 800b240:	461a      	mov	r2, r3
 800b242:	460b      	mov	r3, r1
 800b244:	71fb      	strb	r3, [r7, #7]
 800b246:	4613      	mov	r3, r2
 800b248:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	330d      	adds	r3, #13
 800b24e:	79ba      	ldrb	r2, [r7, #6]
 800b250:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	330b      	adds	r3, #11
 800b256:	220f      	movs	r2, #15
 800b258:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	330c      	adds	r3, #12
 800b25e:	2200      	movs	r2, #0
 800b260:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	331a      	adds	r3, #26
 800b266:	2100      	movs	r1, #0
 800b268:	4618      	mov	r0, r3
 800b26a:	f7fe fb3f 	bl	80098ec <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b26e:	79fb      	ldrb	r3, [r7, #7]
 800b270:	1e5a      	subs	r2, r3, #1
 800b272:	4613      	mov	r3, r2
 800b274:	005b      	lsls	r3, r3, #1
 800b276:	4413      	add	r3, r2
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	4413      	add	r3, r2
 800b27c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b27e:	2300      	movs	r3, #0
 800b280:	82fb      	strh	r3, [r7, #22]
 800b282:	2300      	movs	r3, #0
 800b284:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b286:	8afb      	ldrh	r3, [r7, #22]
 800b288:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d007      	beq.n	800b2a0 <put_lfn+0x6c>
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	1c5a      	adds	r2, r3, #1
 800b294:	61fa      	str	r2, [r7, #28]
 800b296:	005b      	lsls	r3, r3, #1
 800b298:	68fa      	ldr	r2, [r7, #12]
 800b29a:	4413      	add	r3, r2
 800b29c:	881b      	ldrh	r3, [r3, #0]
 800b29e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b2a0:	4a17      	ldr	r2, [pc, #92]	@ (800b300 <put_lfn+0xcc>)
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	4413      	add	r3, r2
 800b2ae:	8afa      	ldrh	r2, [r7, #22]
 800b2b0:	4611      	mov	r1, r2
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7fe fb1a 	bl	80098ec <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b2b8:	8afb      	ldrh	r3, [r7, #22]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d102      	bne.n	800b2c4 <put_lfn+0x90>
 800b2be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b2c2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	61bb      	str	r3, [r7, #24]
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	2b0c      	cmp	r3, #12
 800b2ce:	d9da      	bls.n	800b286 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b2d0:	8afb      	ldrh	r3, [r7, #22]
 800b2d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d006      	beq.n	800b2e8 <put_lfn+0xb4>
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	005b      	lsls	r3, r3, #1
 800b2de:	68fa      	ldr	r2, [r7, #12]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	881b      	ldrh	r3, [r3, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d103      	bne.n	800b2f0 <put_lfn+0xbc>
 800b2e8:	79fb      	ldrb	r3, [r7, #7]
 800b2ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2ee:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	79fa      	ldrb	r2, [r7, #7]
 800b2f4:	701a      	strb	r2, [r3, #0]
}
 800b2f6:	bf00      	nop
 800b2f8:	3720      	adds	r7, #32
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	0801870c 	.word	0x0801870c

0800b304 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b08c      	sub	sp, #48	@ 0x30
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	607a      	str	r2, [r7, #4]
 800b310:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b312:	220b      	movs	r2, #11
 800b314:	68b9      	ldr	r1, [r7, #8]
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	f7fe fbb7 	bl	8009a8a <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	2b05      	cmp	r3, #5
 800b320:	d92b      	bls.n	800b37a <gen_numname+0x76>
		sr = seq;
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b326:	e022      	b.n	800b36e <gen_numname+0x6a>
			wc = *lfn++;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	1c9a      	adds	r2, r3, #2
 800b32c:	607a      	str	r2, [r7, #4]
 800b32e:	881b      	ldrh	r3, [r3, #0]
 800b330:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800b332:	2300      	movs	r3, #0
 800b334:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b336:	e017      	b.n	800b368 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	005a      	lsls	r2, r3, #1
 800b33c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b33e:	f003 0301 	and.w	r3, r3, #1
 800b342:	4413      	add	r3, r2
 800b344:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b346:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b348:	085b      	lsrs	r3, r3, #1
 800b34a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b34c:	69fb      	ldr	r3, [r7, #28]
 800b34e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b352:	2b00      	cmp	r3, #0
 800b354:	d005      	beq.n	800b362 <gen_numname+0x5e>
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800b35c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800b360:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b364:	3301      	adds	r3, #1
 800b366:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b36a:	2b0f      	cmp	r3, #15
 800b36c:	d9e4      	bls.n	800b338 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	881b      	ldrh	r3, [r3, #0]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d1d8      	bne.n	800b328 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b37a:	2307      	movs	r3, #7
 800b37c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	b2db      	uxtb	r3, r3
 800b382:	f003 030f 	and.w	r3, r3, #15
 800b386:	b2db      	uxtb	r3, r3
 800b388:	3330      	adds	r3, #48	@ 0x30
 800b38a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800b38e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b392:	2b39      	cmp	r3, #57	@ 0x39
 800b394:	d904      	bls.n	800b3a0 <gen_numname+0x9c>
 800b396:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b39a:	3307      	adds	r3, #7
 800b39c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800b3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3a2:	1e5a      	subs	r2, r3, #1
 800b3a4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b3a6:	3330      	adds	r3, #48	@ 0x30
 800b3a8:	443b      	add	r3, r7
 800b3aa:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b3ae:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	091b      	lsrs	r3, r3, #4
 800b3b6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d1df      	bne.n	800b37e <gen_numname+0x7a>
	ns[i] = '~';
 800b3be:	f107 0214 	add.w	r2, r7, #20
 800b3c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c4:	4413      	add	r3, r2
 800b3c6:	227e      	movs	r2, #126	@ 0x7e
 800b3c8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3ce:	e002      	b.n	800b3d6 <gen_numname+0xd2>
 800b3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d205      	bcs.n	800b3ea <gen_numname+0xe6>
 800b3de:	68fa      	ldr	r2, [r7, #12]
 800b3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3e2:	4413      	add	r3, r2
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	2b20      	cmp	r3, #32
 800b3e8:	d1f2      	bne.n	800b3d0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ec:	2b07      	cmp	r3, #7
 800b3ee:	d807      	bhi.n	800b400 <gen_numname+0xfc>
 800b3f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f2:	1c5a      	adds	r2, r3, #1
 800b3f4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b3f6:	3330      	adds	r3, #48	@ 0x30
 800b3f8:	443b      	add	r3, r7
 800b3fa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b3fe:	e000      	b.n	800b402 <gen_numname+0xfe>
 800b400:	2120      	movs	r1, #32
 800b402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b404:	1c5a      	adds	r2, r3, #1
 800b406:	627a      	str	r2, [r7, #36]	@ 0x24
 800b408:	68fa      	ldr	r2, [r7, #12]
 800b40a:	4413      	add	r3, r2
 800b40c:	460a      	mov	r2, r1
 800b40e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b412:	2b07      	cmp	r3, #7
 800b414:	d9e9      	bls.n	800b3ea <gen_numname+0xe6>
}
 800b416:	bf00      	nop
 800b418:	bf00      	nop
 800b41a:	3730      	adds	r7, #48	@ 0x30
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b420:	b480      	push	{r7}
 800b422:	b085      	sub	sp, #20
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b428:	2300      	movs	r3, #0
 800b42a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b42c:	230b      	movs	r3, #11
 800b42e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b430:	7bfb      	ldrb	r3, [r7, #15]
 800b432:	b2da      	uxtb	r2, r3
 800b434:	0852      	lsrs	r2, r2, #1
 800b436:	01db      	lsls	r3, r3, #7
 800b438:	4313      	orrs	r3, r2
 800b43a:	b2da      	uxtb	r2, r3
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	1c59      	adds	r1, r3, #1
 800b440:	6079      	str	r1, [r7, #4]
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	4413      	add	r3, r2
 800b446:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	3b01      	subs	r3, #1
 800b44c:	60bb      	str	r3, [r7, #8]
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d1ed      	bne.n	800b430 <sum_sfn+0x10>
	return sum;
 800b454:	7bfb      	ldrb	r3, [r7, #15]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3714      	adds	r7, #20
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr

0800b462 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800b462:	b480      	push	{r7}
 800b464:	b087      	sub	sp, #28
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	3301      	adds	r3, #1
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	3301      	adds	r3, #1
 800b472:	015b      	lsls	r3, r3, #5
 800b474:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800b476:	2300      	movs	r3, #0
 800b478:	827b      	strh	r3, [r7, #18]
 800b47a:	2300      	movs	r3, #0
 800b47c:	617b      	str	r3, [r7, #20]
 800b47e:	e017      	b.n	800b4b0 <xdir_sum+0x4e>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	2b02      	cmp	r3, #2
 800b484:	d103      	bne.n	800b48e <xdir_sum+0x2c>
			i++;
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	3301      	adds	r3, #1
 800b48a:	617b      	str	r3, [r7, #20]
 800b48c:	e00d      	b.n	800b4aa <xdir_sum+0x48>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800b48e:	8a7b      	ldrh	r3, [r7, #18]
 800b490:	03db      	lsls	r3, r3, #15
 800b492:	b29a      	uxth	r2, r3
 800b494:	8a7b      	ldrh	r3, [r7, #18]
 800b496:	085b      	lsrs	r3, r3, #1
 800b498:	b29b      	uxth	r3, r3
 800b49a:	4413      	add	r3, r2
 800b49c:	b29b      	uxth	r3, r3
 800b49e:	6879      	ldr	r1, [r7, #4]
 800b4a0:	697a      	ldr	r2, [r7, #20]
 800b4a2:	440a      	add	r2, r1
 800b4a4:	7812      	ldrb	r2, [r2, #0]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	617b      	str	r3, [r7, #20]
 800b4b0:	697a      	ldr	r2, [r7, #20]
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d3e3      	bcc.n	800b480 <xdir_sum+0x1e>
		}
	}
	return sum;
 800b4b8:	8a7b      	ldrh	r3, [r7, #18]
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	371c      	adds	r7, #28
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr

0800b4c6 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b084      	sub	sp, #16
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800b4d2:	e01f      	b.n	800b514 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800b4d4:	89bb      	ldrh	r3, [r7, #12]
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f003 fd46 	bl	800ef68 <ff_wtoupper>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800b4e0:	89fb      	ldrh	r3, [r7, #14]
 800b4e2:	03db      	lsls	r3, r3, #15
 800b4e4:	b29a      	uxth	r2, r3
 800b4e6:	89fb      	ldrh	r3, [r7, #14]
 800b4e8:	085b      	lsrs	r3, r3, #1
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	4413      	add	r3, r2
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	89bb      	ldrh	r3, [r7, #12]
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	b29b      	uxth	r3, r3
 800b4f6:	4413      	add	r3, r2
 800b4f8:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800b4fa:	89fb      	ldrh	r3, [r7, #14]
 800b4fc:	03db      	lsls	r3, r3, #15
 800b4fe:	b29a      	uxth	r2, r3
 800b500:	89fb      	ldrh	r3, [r7, #14]
 800b502:	085b      	lsrs	r3, r3, #1
 800b504:	b29b      	uxth	r3, r3
 800b506:	4413      	add	r3, r2
 800b508:	b29a      	uxth	r2, r3
 800b50a:	89bb      	ldrh	r3, [r7, #12]
 800b50c:	0a1b      	lsrs	r3, r3, #8
 800b50e:	b29b      	uxth	r3, r3
 800b510:	4413      	add	r3, r2
 800b512:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	1c9a      	adds	r2, r3, #2
 800b518:	607a      	str	r2, [r7, #4]
 800b51a:	881b      	ldrh	r3, [r3, #0]
 800b51c:	81bb      	strh	r3, [r7, #12]
 800b51e:	89bb      	ldrh	r3, [r7, #12]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d1d7      	bne.n	800b4d4 <xname_sum+0xe>
	}
	return sum;
 800b524:	89fb      	ldrh	r3, [r7, #14]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800b52e:	b580      	push	{r7, lr}
 800b530:	b086      	sub	sp, #24
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
 800b536:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800b538:	2300      	movs	r3, #0
 800b53a:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800b53c:	2340      	movs	r3, #64	@ 0x40
 800b53e:	613b      	str	r3, [r7, #16]
 800b540:	2300      	movs	r3, #0
 800b542:	60fb      	str	r3, [r7, #12]
 800b544:	e02c      	b.n	800b5a0 <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	f003 031f 	and.w	r3, r3, #31
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d102      	bne.n	800b556 <get_xdir_info+0x28>
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	3302      	adds	r3, #2
 800b554:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	4413      	add	r3, r2
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7fe f8af 	bl	80096c0 <ld_word>
 800b562:	4603      	mov	r3, r0
 800b564:	2100      	movs	r1, #0
 800b566:	4618      	mov	r0, r3
 800b568:	f003 fcc2 	bl	800eef0 <ff_convert>
 800b56c:	4603      	mov	r3, r0
 800b56e:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800b570:	897b      	ldrh	r3, [r7, #10]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d002      	beq.n	800b57c <get_xdir_info+0x4e>
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	2bfe      	cmp	r3, #254	@ 0xfe
 800b57a:	d902      	bls.n	800b582 <get_xdir_info+0x54>
 800b57c:	2300      	movs	r3, #0
 800b57e:	617b      	str	r3, [r7, #20]
 800b580:	e015      	b.n	800b5ae <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	1c5a      	adds	r2, r3, #1
 800b586:	617a      	str	r2, [r7, #20]
 800b588:	897a      	ldrh	r2, [r7, #10]
 800b58a:	b2d1      	uxtb	r1, r2
 800b58c:	683a      	ldr	r2, [r7, #0]
 800b58e:	4413      	add	r3, r2
 800b590:	460a      	mov	r2, r1
 800b592:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	3302      	adds	r3, #2
 800b598:	613b      	str	r3, [r7, #16]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	3301      	adds	r3, #1
 800b59e:	60fb      	str	r3, [r7, #12]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	3323      	adds	r3, #35	@ 0x23
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d3cb      	bcc.n	800b546 <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d106      	bne.n	800b5c2 <get_xdir_info+0x94>
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	1c5a      	adds	r2, r3, #1
 800b5b8:	617a      	str	r2, [r7, #20]
 800b5ba:	683a      	ldr	r2, [r7, #0]
 800b5bc:	4413      	add	r3, r2
 800b5be:	223f      	movs	r2, #63	@ 0x3f
 800b5c0:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800b5c2:	683a      	ldr	r2, [r7, #0]
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	331a      	adds	r3, #26
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	791a      	ldrb	r2, [r3, #4]
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	7b1b      	ldrb	r3, [r3, #12]
 800b5e0:	f003 0310 	and.w	r3, r3, #16
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d107      	bne.n	800b5f8 <get_xdir_info+0xca>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	3338      	adds	r3, #56	@ 0x38
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7fe f8a2 	bl	8009736 <ld_qword>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	e003      	b.n	800b600 <get_xdir_info+0xd2>
 800b5f8:	f04f 0200 	mov.w	r2, #0
 800b5fc:	f04f 0300 	mov.w	r3, #0
 800b600:	6839      	ldr	r1, [r7, #0]
 800b602:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	330c      	adds	r3, #12
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7fe f858 	bl	80096c0 <ld_word>
 800b610:	4603      	mov	r3, r0
 800b612:	461a      	mov	r2, r3
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	330e      	adds	r3, #14
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7fe f84f 	bl	80096c0 <ld_word>
 800b622:	4603      	mov	r3, r0
 800b624:	461a      	mov	r2, r3
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	811a      	strh	r2, [r3, #8]
}
 800b62a:	bf00      	nop
 800b62c:	3718      	adds	r7, #24
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
	...

0800b634 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800b634:	b590      	push	{r4, r7, lr}
 800b636:	b087      	sub	sp, #28
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	695b      	ldr	r3, [r3, #20]
 800b642:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b64c:	4619      	mov	r1, r3
 800b64e:	4610      	mov	r0, r2
 800b650:	f7fe fc7a 	bl	8009f48 <move_window>
 800b654:	4603      	mov	r3, r0
 800b656:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800b658:	7bfb      	ldrb	r3, [r7, #15]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d001      	beq.n	800b662 <load_xdir+0x2e>
 800b65e:	7bfb      	ldrb	r3, [r7, #15]
 800b660:	e09f      	b.n	800b7a2 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	2b85      	cmp	r3, #133	@ 0x85
 800b66a:	d001      	beq.n	800b670 <load_xdir+0x3c>
 800b66c:	2302      	movs	r3, #2
 800b66e:	e098      	b.n	800b7a2 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b674:	2220      	movs	r2, #32
 800b676:	4619      	mov	r1, r3
 800b678:	6938      	ldr	r0, [r7, #16]
 800b67a:	f7fe fa06 	bl	8009a8a <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	3301      	adds	r3, #1
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	3301      	adds	r3, #1
 800b686:	015b      	lsls	r3, r3, #5
 800b688:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	2b5f      	cmp	r3, #95	@ 0x5f
 800b68e:	d903      	bls.n	800b698 <load_xdir+0x64>
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800b696:	d901      	bls.n	800b69c <load_xdir+0x68>
 800b698:	2302      	movs	r3, #2
 800b69a:	e082      	b.n	800b7a2 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800b69c:	2100      	movs	r1, #0
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f7ff fb73 	bl	800ad8a <dir_next>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800b6a8:	7bfb      	ldrb	r3, [r7, #15]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d001      	beq.n	800b6b2 <load_xdir+0x7e>
 800b6ae:	7bfb      	ldrb	r3, [r7, #15]
 800b6b0:	e077      	b.n	800b7a2 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	4610      	mov	r0, r2
 800b6be:	f7fe fc43 	bl	8009f48 <move_window>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800b6c6:	7bfb      	ldrb	r3, [r7, #15]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d001      	beq.n	800b6d0 <load_xdir+0x9c>
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
 800b6ce:	e068      	b.n	800b7a2 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	2bc0      	cmp	r3, #192	@ 0xc0
 800b6d8:	d001      	beq.n	800b6de <load_xdir+0xaa>
 800b6da:	2302      	movs	r3, #2
 800b6dc:	e061      	b.n	800b7a2 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	f103 0020 	add.w	r0, r3, #32
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6e8:	2220      	movs	r2, #32
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	f7fe f9cd 	bl	8009a8a <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	3323      	adds	r3, #35	@ 0x23
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	332c      	adds	r3, #44	@ 0x2c
 800b6f8:	4a2c      	ldr	r2, [pc, #176]	@ (800b7ac <load_xdir+0x178>)
 800b6fa:	fba2 2303 	umull	r2, r3, r2, r3
 800b6fe:	08db      	lsrs	r3, r3, #3
 800b700:	015b      	lsls	r3, r3, #5
 800b702:	68ba      	ldr	r2, [r7, #8]
 800b704:	429a      	cmp	r2, r3
 800b706:	d201      	bcs.n	800b70c <load_xdir+0xd8>
 800b708:	2302      	movs	r3, #2
 800b70a:	e04a      	b.n	800b7a2 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800b70c:	2340      	movs	r3, #64	@ 0x40
 800b70e:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800b710:	2100      	movs	r1, #0
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f7ff fb39 	bl	800ad8a <dir_next>
 800b718:	4603      	mov	r3, r0
 800b71a:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800b71c:	7bfb      	ldrb	r3, [r7, #15]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d001      	beq.n	800b726 <load_xdir+0xf2>
 800b722:	7bfb      	ldrb	r3, [r7, #15]
 800b724:	e03d      	b.n	800b7a2 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b72e:	4619      	mov	r1, r3
 800b730:	4610      	mov	r0, r2
 800b732:	f7fe fc09 	bl	8009f48 <move_window>
 800b736:	4603      	mov	r3, r0
 800b738:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800b73a:	7bfb      	ldrb	r3, [r7, #15]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d001      	beq.n	800b744 <load_xdir+0x110>
 800b740:	7bfb      	ldrb	r3, [r7, #15]
 800b742:	e02e      	b.n	800b7a2 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	2bc1      	cmp	r3, #193	@ 0xc1
 800b74c:	d001      	beq.n	800b752 <load_xdir+0x11e>
 800b74e:	2302      	movs	r3, #2
 800b750:	e027      	b.n	800b7a2 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800b758:	d208      	bcs.n	800b76c <load_xdir+0x138>
 800b75a:	693a      	ldr	r2, [r7, #16]
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	18d0      	adds	r0, r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b764:	2220      	movs	r2, #32
 800b766:	4619      	mov	r1, r3
 800b768:	f7fe f98f 	bl	8009a8a <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	3320      	adds	r3, #32
 800b770:	617b      	str	r3, [r7, #20]
 800b772:	697a      	ldr	r2, [r7, #20]
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	429a      	cmp	r2, r3
 800b778:	d3ca      	bcc.n	800b710 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800b780:	d80e      	bhi.n	800b7a0 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800b782:	6938      	ldr	r0, [r7, #16]
 800b784:	f7ff fe6d 	bl	800b462 <xdir_sum>
 800b788:	4603      	mov	r3, r0
 800b78a:	461c      	mov	r4, r3
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	3302      	adds	r3, #2
 800b790:	4618      	mov	r0, r3
 800b792:	f7fd ff95 	bl	80096c0 <ld_word>
 800b796:	4603      	mov	r3, r0
 800b798:	429c      	cmp	r4, r3
 800b79a:	d001      	beq.n	800b7a0 <load_xdir+0x16c>
 800b79c:	2302      	movs	r3, #2
 800b79e:	e000      	b.n	800b7a2 <load_xdir+0x16e>
	}
	return FR_OK;
 800b7a0:	2300      	movs	r3, #0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	371c      	adds	r7, #28
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd90      	pop	{r4, r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	88888889 	.word	0x88888889

0800b7b0 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800b7b0:	b5b0      	push	{r4, r5, r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800b7ba:	6839      	ldr	r1, [r7, #0]
 800b7bc:	6808      	ldr	r0, [r1, #0]
 800b7be:	6879      	ldr	r1, [r7, #4]
 800b7c0:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800b7c2:	6839      	ldr	r1, [r7, #0]
 800b7c4:	6a08      	ldr	r0, [r1, #32]
 800b7c6:	6879      	ldr	r1, [r7, #4]
 800b7c8:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800b7ca:	6839      	ldr	r1, [r7, #0]
 800b7cc:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800b7ce:	b2c8      	uxtb	r0, r1
 800b7d0:	6879      	ldr	r1, [r7, #4]
 800b7d2:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800b7d4:	6839      	ldr	r1, [r7, #0]
 800b7d6:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800b7d8:	2000      	movs	r0, #0
 800b7da:	460c      	mov	r4, r1
 800b7dc:	4605      	mov	r5, r0
 800b7de:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	6879      	ldr	r1, [r7, #4]
 800b7e6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f7ff fa32 	bl	800ac62 <dir_sdi>
 800b7fe:	4603      	mov	r3, r0
 800b800:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b802:	7bfb      	ldrb	r3, [r7, #15]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d104      	bne.n	800b812 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f7ff ff13 	bl	800b634 <load_xdir>
 800b80e:	4603      	mov	r3, r0
 800b810:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800b812:	7bfb      	ldrb	r3, [r7, #15]
}
 800b814:	4618      	mov	r0, r3
 800b816:	3710      	adds	r7, #16
 800b818:	46bd      	mov	sp, r7
 800b81a:	bdb0      	pop	{r4, r5, r7, pc}

0800b81c <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800b81c:	b590      	push	{r4, r7, lr}
 800b81e:	b087      	sub	sp, #28
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	695b      	ldr	r3, [r3, #20]
 800b82a:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	1c9c      	adds	r4, r3, #2
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f7ff fe16 	bl	800b462 <xdir_sum>
 800b836:	4603      	mov	r3, r0
 800b838:	4619      	mov	r1, r3
 800b83a:	4620      	mov	r0, r4
 800b83c:	f7fe f856 	bl	80098ec <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	3301      	adds	r3, #1
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	3301      	adds	r3, #1
 800b848:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b84e:	4619      	mov	r1, r3
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f7ff fa06 	bl	800ac62 <dir_sdi>
 800b856:	4603      	mov	r3, r0
 800b858:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800b85a:	e026      	b.n	800b8aa <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b864:	4619      	mov	r1, r3
 800b866:	4610      	mov	r0, r2
 800b868:	f7fe fb6e 	bl	8009f48 <move_window>
 800b86c:	4603      	mov	r3, r0
 800b86e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b870:	7dfb      	ldrb	r3, [r7, #23]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d11d      	bne.n	800b8b2 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b87a:	2220      	movs	r2, #32
 800b87c:	68f9      	ldr	r1, [r7, #12]
 800b87e:	4618      	mov	r0, r3
 800b880:	f7fe f903 	bl	8009a8a <mem_cpy>
		dp->obj.fs->wflag = 1;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	2201      	movs	r2, #1
 800b88a:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	3b01      	subs	r3, #1
 800b890:	613b      	str	r3, [r7, #16]
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d00e      	beq.n	800b8b6 <store_xdir+0x9a>
		dirb += SZDIRE;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	3320      	adds	r3, #32
 800b89c:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800b89e:	2100      	movs	r1, #0
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f7ff fa72 	bl	800ad8a <dir_next>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800b8aa:	7dfb      	ldrb	r3, [r7, #23]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d0d5      	beq.n	800b85c <store_xdir+0x40>
 800b8b0:	e002      	b.n	800b8b8 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800b8b2:	bf00      	nop
 800b8b4:	e000      	b.n	800b8b8 <store_xdir+0x9c>
		if (--nent == 0) break;
 800b8b6:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800b8b8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d002      	beq.n	800b8c4 <store_xdir+0xa8>
 800b8be:	7dfb      	ldrb	r3, [r7, #23]
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d101      	bne.n	800b8c8 <store_xdir+0xac>
 800b8c4:	7dfb      	ldrb	r3, [r7, #23]
 800b8c6:	e000      	b.n	800b8ca <store_xdir+0xae>
 800b8c8:	2302      	movs	r3, #2
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	371c      	adds	r7, #28
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd90      	pop	{r4, r7, pc}

0800b8d2 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800b8d2:	b590      	push	{r4, r7, lr}
 800b8d4:	b085      	sub	sp, #20
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
 800b8da:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800b8dc:	2240      	movs	r2, #64	@ 0x40
 800b8de:	2100      	movs	r1, #0
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f7fe f8f3 	bl	8009acc <mem_set>
	dirb[XDIR_Type] = 0x85;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2285      	movs	r2, #133	@ 0x85
 800b8ea:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	3320      	adds	r3, #32
 800b8f0:	22c0      	movs	r2, #192	@ 0xc0
 800b8f2:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	72bb      	strb	r3, [r7, #10]
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	72fb      	strb	r3, [r7, #11]
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	813b      	strh	r3, [r7, #8]
 800b900:	2340      	movs	r3, #64	@ 0x40
 800b902:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	1c5a      	adds	r2, r3, #1
 800b908:	60fa      	str	r2, [r7, #12]
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	4413      	add	r3, r2
 800b90e:	22c1      	movs	r2, #193	@ 0xc1
 800b910:	701a      	strb	r2, [r3, #0]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	1c5a      	adds	r2, r3, #1
 800b916:	60fa      	str	r2, [r7, #12]
 800b918:	687a      	ldr	r2, [r7, #4]
 800b91a:	4413      	add	r3, r2
 800b91c:	2200      	movs	r2, #0
 800b91e:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800b920:	893b      	ldrh	r3, [r7, #8]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d00b      	beq.n	800b93e <create_xdir+0x6c>
 800b926:	7abb      	ldrb	r3, [r7, #10]
 800b928:	005b      	lsls	r3, r3, #1
 800b92a:	683a      	ldr	r2, [r7, #0]
 800b92c:	4413      	add	r3, r2
 800b92e:	881b      	ldrh	r3, [r3, #0]
 800b930:	813b      	strh	r3, [r7, #8]
 800b932:	893b      	ldrh	r3, [r7, #8]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d002      	beq.n	800b93e <create_xdir+0x6c>
 800b938:	7abb      	ldrb	r3, [r7, #10]
 800b93a:	3301      	adds	r3, #1
 800b93c:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	4413      	add	r3, r2
 800b944:	893a      	ldrh	r2, [r7, #8]
 800b946:	4611      	mov	r1, r2
 800b948:	4618      	mov	r0, r3
 800b94a:	f7fd ffcf 	bl	80098ec <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	3302      	adds	r3, #2
 800b952:	60fb      	str	r3, [r7, #12]
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f003 031f 	and.w	r3, r3, #31
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d1e0      	bne.n	800b920 <create_xdir+0x4e>
		nb++;
 800b95e:	7afb      	ldrb	r3, [r7, #11]
 800b960:	3301      	adds	r3, #1
 800b962:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800b964:	7abb      	ldrb	r3, [r7, #10]
 800b966:	005b      	lsls	r3, r3, #1
 800b968:	683a      	ldr	r2, [r7, #0]
 800b96a:	4413      	add	r3, r2
 800b96c:	881b      	ldrh	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d1c8      	bne.n	800b904 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	3323      	adds	r3, #35	@ 0x23
 800b976:	7aba      	ldrb	r2, [r7, #10]
 800b978:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	3301      	adds	r3, #1
 800b97e:	7afa      	ldrb	r2, [r7, #11]
 800b980:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800b988:	6838      	ldr	r0, [r7, #0]
 800b98a:	f7ff fd9c 	bl	800b4c6 <xname_sum>
 800b98e:	4603      	mov	r3, r0
 800b990:	4619      	mov	r1, r3
 800b992:	4620      	mov	r0, r4
 800b994:	f7fd ffaa 	bl	80098ec <st_word>
}
 800b998:	bf00      	nop
 800b99a:	3714      	adds	r7, #20
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd90      	pop	{r4, r7, pc}

0800b9a0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b086      	sub	sp, #24
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b9aa:	2304      	movs	r3, #4
 800b9ac:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800b9b4:	23ff      	movs	r3, #255	@ 0xff
 800b9b6:	757b      	strb	r3, [r7, #21]
 800b9b8:	23ff      	movs	r3, #255	@ 0xff
 800b9ba:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800b9bc:	e09f      	b.n	800bafe <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	6938      	ldr	r0, [r7, #16]
 800b9c6:	f7fe fabf 	bl	8009f48 <move_window>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b9ce:	7dfb      	ldrb	r3, [r7, #23]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	f040 809a 	bne.w	800bb0a <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800b9de:	7dbb      	ldrb	r3, [r7, #22]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d102      	bne.n	800b9ea <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b9e4:	2304      	movs	r3, #4
 800b9e6:	75fb      	strb	r3, [r7, #23]
 800b9e8:	e096      	b.n	800bb18 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	2b04      	cmp	r3, #4
 800b9f0:	d118      	bne.n	800ba24 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800b9f2:	7dbb      	ldrb	r3, [r7, #22]
 800b9f4:	2b85      	cmp	r3, #133	@ 0x85
 800b9f6:	d179      	bne.n	800baec <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f7ff fe17 	bl	800b634 <load_xdir>
 800ba06:	4603      	mov	r3, r0
 800ba08:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800ba0a:	7dfb      	ldrb	r3, [r7, #23]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d17e      	bne.n	800bb0e <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	695b      	ldr	r3, [r3, #20]
 800ba14:	3304      	adds	r3, #4
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ba1c:	b2da      	uxtb	r2, r3
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	719a      	strb	r2, [r3, #6]
					}
					break;
 800ba22:	e074      	b.n	800bb0e <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba28:	330b      	adds	r3, #11
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ba30:	73fb      	strb	r3, [r7, #15]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	7bfa      	ldrb	r2, [r7, #15]
 800ba36:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800ba38:	7dbb      	ldrb	r3, [r7, #22]
 800ba3a:	2be5      	cmp	r3, #229	@ 0xe5
 800ba3c:	d00e      	beq.n	800ba5c <dir_read+0xbc>
 800ba3e:	7dbb      	ldrb	r3, [r7, #22]
 800ba40:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba42:	d00b      	beq.n	800ba5c <dir_read+0xbc>
 800ba44:	7bfb      	ldrb	r3, [r7, #15]
 800ba46:	f023 0320 	bic.w	r3, r3, #32
 800ba4a:	2b08      	cmp	r3, #8
 800ba4c:	bf0c      	ite	eq
 800ba4e:	2301      	moveq	r3, #1
 800ba50:	2300      	movne	r3, #0
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	461a      	mov	r2, r3
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d002      	beq.n	800ba62 <dir_read+0xc2>
				ord = 0xFF;
 800ba5c:	23ff      	movs	r3, #255	@ 0xff
 800ba5e:	757b      	strb	r3, [r7, #21]
 800ba60:	e044      	b.n	800baec <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800ba62:	7bfb      	ldrb	r3, [r7, #15]
 800ba64:	2b0f      	cmp	r3, #15
 800ba66:	d12f      	bne.n	800bac8 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800ba68:	7dbb      	ldrb	r3, [r7, #22]
 800ba6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d00d      	beq.n	800ba8e <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba76:	7b5b      	ldrb	r3, [r3, #13]
 800ba78:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800ba7a:	7dbb      	ldrb	r3, [r7, #22]
 800ba7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba80:	75bb      	strb	r3, [r7, #22]
 800ba82:	7dbb      	ldrb	r3, [r7, #22]
 800ba84:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ba8e:	7dba      	ldrb	r2, [r7, #22]
 800ba90:	7d7b      	ldrb	r3, [r7, #21]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d115      	bne.n	800bac2 <dir_read+0x122>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba9a:	330d      	adds	r3, #13
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	7d3a      	ldrb	r2, [r7, #20]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d10e      	bne.n	800bac2 <dir_read+0x122>
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	691a      	ldr	r2, [r3, #16]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baac:	4619      	mov	r1, r3
 800baae:	4610      	mov	r0, r2
 800bab0:	f7ff fb5c 	bl	800b16c <pick_lfn>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d003      	beq.n	800bac2 <dir_read+0x122>
 800baba:	7d7b      	ldrb	r3, [r7, #21]
 800babc:	3b01      	subs	r3, #1
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	e000      	b.n	800bac4 <dir_read+0x124>
 800bac2:	23ff      	movs	r3, #255	@ 0xff
 800bac4:	757b      	strb	r3, [r7, #21]
 800bac6:	e011      	b.n	800baec <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800bac8:	7d7b      	ldrb	r3, [r7, #21]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d109      	bne.n	800bae2 <dir_read+0x142>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7ff fca4 	bl	800b420 <sum_sfn>
 800bad8:	4603      	mov	r3, r0
 800bada:	461a      	mov	r2, r3
 800badc:	7d3b      	ldrb	r3, [r7, #20]
 800bade:	4293      	cmp	r3, r2
 800bae0:	d017      	beq.n	800bb12 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f04f 32ff 	mov.w	r2, #4294967295
 800bae8:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800baea:	e012      	b.n	800bb12 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800baec:	2100      	movs	r1, #0
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f7ff f94b 	bl	800ad8a <dir_next>
 800baf4:	4603      	mov	r3, r0
 800baf6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800baf8:	7dfb      	ldrb	r3, [r7, #23]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d10b      	bne.n	800bb16 <dir_read+0x176>
	while (dp->sect) {
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	f47f af5b 	bne.w	800b9be <dir_read+0x1e>
 800bb08:	e006      	b.n	800bb18 <dir_read+0x178>
		if (res != FR_OK) break;
 800bb0a:	bf00      	nop
 800bb0c:	e004      	b.n	800bb18 <dir_read+0x178>
					break;
 800bb0e:	bf00      	nop
 800bb10:	e002      	b.n	800bb18 <dir_read+0x178>
					break;
 800bb12:	bf00      	nop
 800bb14:	e000      	b.n	800bb18 <dir_read+0x178>
		if (res != FR_OK) break;
 800bb16:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800bb18:	7dfb      	ldrb	r3, [r7, #23]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d002      	beq.n	800bb24 <dir_read+0x184>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2200      	movs	r2, #0
 800bb22:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800bb24:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3718      	adds	r7, #24
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bb2e:	b590      	push	{r4, r7, lr}
 800bb30:	b089      	sub	sp, #36	@ 0x24
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bb3c:	2100      	movs	r1, #0
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f7ff f88f 	bl	800ac62 <dir_sdi>
 800bb44:	4603      	mov	r3, r0
 800bb46:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800bb48:	7ffb      	ldrb	r3, [r7, #31]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d001      	beq.n	800bb52 <dir_find+0x24>
 800bb4e:	7ffb      	ldrb	r3, [r7, #31]
 800bb50:	e113      	b.n	800bd7a <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	781b      	ldrb	r3, [r3, #0]
 800bb56:	2b04      	cmp	r3, #4
 800bb58:	d165      	bne.n	800bc26 <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7ff fcb1 	bl	800b4c6 <xname_sum>
 800bb64:	4603      	mov	r3, r0
 800bb66:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800bb68:	e050      	b.n	800bc0c <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	695b      	ldr	r3, [r3, #20]
 800bb6e:	3324      	adds	r3, #36	@ 0x24
 800bb70:	4618      	mov	r0, r3
 800bb72:	f7fd fda5 	bl	80096c0 <ld_word>
 800bb76:	4603      	mov	r3, r0
 800bb78:	461a      	mov	r2, r3
 800bb7a:	893b      	ldrh	r3, [r7, #8]
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d144      	bne.n	800bc0a <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	695b      	ldr	r3, [r3, #20]
 800bb84:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800bb88:	76fb      	strb	r3, [r7, #27]
 800bb8a:	2340      	movs	r3, #64	@ 0x40
 800bb8c:	617b      	str	r3, [r7, #20]
 800bb8e:	2300      	movs	r3, #0
 800bb90:	613b      	str	r3, [r7, #16]
 800bb92:	e029      	b.n	800bbe8 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	f003 031f 	and.w	r3, r3, #31
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d102      	bne.n	800bba4 <dir_find+0x76>
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	3302      	adds	r3, #2
 800bba2:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	695a      	ldr	r2, [r3, #20]
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	4413      	add	r3, r2
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7fd fd87 	bl	80096c0 <ld_word>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f003 f9d7 	bl	800ef68 <ff_wtoupper>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	461c      	mov	r4, r3
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	691a      	ldr	r2, [r3, #16]
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	005b      	lsls	r3, r3, #1
 800bbc6:	4413      	add	r3, r2
 800bbc8:	881b      	ldrh	r3, [r3, #0]
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f003 f9cc 	bl	800ef68 <ff_wtoupper>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	429c      	cmp	r4, r3
 800bbd4:	d10c      	bne.n	800bbf0 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800bbd6:	7efb      	ldrb	r3, [r7, #27]
 800bbd8:	3b01      	subs	r3, #1
 800bbda:	76fb      	strb	r3, [r7, #27]
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	3302      	adds	r3, #2
 800bbe0:	617b      	str	r3, [r7, #20]
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	613b      	str	r3, [r7, #16]
 800bbe8:	7efb      	ldrb	r3, [r7, #27]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d1d2      	bne.n	800bb94 <dir_find+0x66>
 800bbee:	e000      	b.n	800bbf2 <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800bbf0:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800bbf2:	7efb      	ldrb	r3, [r7, #27]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d109      	bne.n	800bc0c <dir_find+0xde>
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	691a      	ldr	r2, [r3, #16]
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	005b      	lsls	r3, r3, #1
 800bc00:	4413      	add	r3, r2
 800bc02:	881b      	ldrh	r3, [r3, #0]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d00b      	beq.n	800bc20 <dir_find+0xf2>
 800bc08:	e000      	b.n	800bc0c <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800bc0a:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7ff fec6 	bl	800b9a0 <dir_read>
 800bc14:	4603      	mov	r3, r0
 800bc16:	77fb      	strb	r3, [r7, #31]
 800bc18:	7ffb      	ldrb	r3, [r7, #31]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d0a5      	beq.n	800bb6a <dir_find+0x3c>
 800bc1e:	e000      	b.n	800bc22 <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800bc20:	bf00      	nop
		}
		return res;
 800bc22:	7ffb      	ldrb	r3, [r7, #31]
 800bc24:	e0a9      	b.n	800bd7a <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bc26:	23ff      	movs	r3, #255	@ 0xff
 800bc28:	773b      	strb	r3, [r7, #28]
 800bc2a:	7f3b      	ldrb	r3, [r7, #28]
 800bc2c:	777b      	strb	r3, [r7, #29]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f04f 32ff 	mov.w	r2, #4294967295
 800bc34:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	68f8      	ldr	r0, [r7, #12]
 800bc3e:	f7fe f983 	bl	8009f48 <move_window>
 800bc42:	4603      	mov	r3, r0
 800bc44:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800bc46:	7ffb      	ldrb	r3, [r7, #31]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	f040 8090 	bne.w	800bd6e <dir_find+0x240>
		c = dp->dir[DIR_Name];
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bc56:	7fbb      	ldrb	r3, [r7, #30]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d102      	bne.n	800bc62 <dir_find+0x134>
 800bc5c:	2304      	movs	r3, #4
 800bc5e:	77fb      	strb	r3, [r7, #31]
 800bc60:	e08a      	b.n	800bd78 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc66:	330b      	adds	r3, #11
 800bc68:	781b      	ldrb	r3, [r3, #0]
 800bc6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc6e:	72fb      	strb	r3, [r7, #11]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	7afa      	ldrb	r2, [r7, #11]
 800bc74:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bc76:	7fbb      	ldrb	r3, [r7, #30]
 800bc78:	2be5      	cmp	r3, #229	@ 0xe5
 800bc7a:	d007      	beq.n	800bc8c <dir_find+0x15e>
 800bc7c:	7afb      	ldrb	r3, [r7, #11]
 800bc7e:	f003 0308 	and.w	r3, r3, #8
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d009      	beq.n	800bc9a <dir_find+0x16c>
 800bc86:	7afb      	ldrb	r3, [r7, #11]
 800bc88:	2b0f      	cmp	r3, #15
 800bc8a:	d006      	beq.n	800bc9a <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bc8c:	23ff      	movs	r3, #255	@ 0xff
 800bc8e:	777b      	strb	r3, [r7, #29]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f04f 32ff 	mov.w	r2, #4294967295
 800bc96:	64da      	str	r2, [r3, #76]	@ 0x4c
 800bc98:	e05e      	b.n	800bd58 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bc9a:	7afb      	ldrb	r3, [r7, #11]
 800bc9c:	2b0f      	cmp	r3, #15
 800bc9e:	d136      	bne.n	800bd0e <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800bca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d154      	bne.n	800bd58 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800bcae:	7fbb      	ldrb	r3, [r7, #30]
 800bcb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d00d      	beq.n	800bcd4 <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcbc:	7b5b      	ldrb	r3, [r3, #13]
 800bcbe:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800bcc0:	7fbb      	ldrb	r3, [r7, #30]
 800bcc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bcc6:	77bb      	strb	r3, [r7, #30]
 800bcc8:	7fbb      	ldrb	r3, [r7, #30]
 800bcca:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bcd4:	7fba      	ldrb	r2, [r7, #30]
 800bcd6:	7f7b      	ldrb	r3, [r7, #29]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d115      	bne.n	800bd08 <dir_find+0x1da>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bce0:	330d      	adds	r3, #13
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	7f3a      	ldrb	r2, [r7, #28]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d10e      	bne.n	800bd08 <dir_find+0x1da>
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	691a      	ldr	r2, [r3, #16]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	4610      	mov	r0, r2
 800bcf6:	f7ff f9c9 	bl	800b08c <cmp_lfn>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d003      	beq.n	800bd08 <dir_find+0x1da>
 800bd00:	7f7b      	ldrb	r3, [r7, #29]
 800bd02:	3b01      	subs	r3, #1
 800bd04:	b2db      	uxtb	r3, r3
 800bd06:	e000      	b.n	800bd0a <dir_find+0x1dc>
 800bd08:	23ff      	movs	r3, #255	@ 0xff
 800bd0a:	777b      	strb	r3, [r7, #29]
 800bd0c:	e024      	b.n	800bd58 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bd0e:	7f7b      	ldrb	r3, [r7, #29]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d109      	bne.n	800bd28 <dir_find+0x1fa>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7ff fb81 	bl	800b420 <sum_sfn>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	461a      	mov	r2, r3
 800bd22:	7f3b      	ldrb	r3, [r7, #28]
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d024      	beq.n	800bd72 <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800bd2e:	f003 0301 	and.w	r3, r3, #1
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d10a      	bne.n	800bd4c <dir_find+0x21e>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	3340      	adds	r3, #64	@ 0x40
 800bd3e:	220b      	movs	r2, #11
 800bd40:	4619      	mov	r1, r3
 800bd42:	f7fd fede 	bl	8009b02 <mem_cmp>
 800bd46:	4603      	mov	r3, r0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d014      	beq.n	800bd76 <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bd4c:	23ff      	movs	r3, #255	@ 0xff
 800bd4e:	777b      	strb	r3, [r7, #29]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f04f 32ff 	mov.w	r2, #4294967295
 800bd56:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bd58:	2100      	movs	r1, #0
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f7ff f815 	bl	800ad8a <dir_next>
 800bd60:	4603      	mov	r3, r0
 800bd62:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800bd64:	7ffb      	ldrb	r3, [r7, #31]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	f43f af65 	beq.w	800bc36 <dir_find+0x108>
 800bd6c:	e004      	b.n	800bd78 <dir_find+0x24a>
		if (res != FR_OK) break;
 800bd6e:	bf00      	nop
 800bd70:	e002      	b.n	800bd78 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bd72:	bf00      	nop
 800bd74:	e000      	b.n	800bd78 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bd76:	bf00      	nop

	return res;
 800bd78:	7ffb      	ldrb	r3, [r7, #31]
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3724      	adds	r7, #36	@ 0x24
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd90      	pop	{r4, r7, pc}
	...

0800bd84 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bd84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bd88:	b0a0      	sub	sp, #128	@ 0x80
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800bd9a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d001      	beq.n	800bda6 <dir_register+0x22>
 800bda2:	2306      	movs	r3, #6
 800bda4:	e192      	b.n	800c0cc <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800bda6:	2300      	movs	r3, #0
 800bda8:	677b      	str	r3, [r7, #116]	@ 0x74
 800bdaa:	e002      	b.n	800bdb2 <dir_register+0x2e>
 800bdac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bdae:	3301      	adds	r3, #1
 800bdb0:	677b      	str	r3, [r7, #116]	@ 0x74
 800bdb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdb4:	691a      	ldr	r2, [r3, #16]
 800bdb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bdb8:	005b      	lsls	r3, r3, #1
 800bdba:	4413      	add	r3, r2
 800bdbc:	881b      	ldrh	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d1f4      	bne.n	800bdac <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800bdc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	2b04      	cmp	r3, #4
 800bdc8:	f040 80a3 	bne.w	800bf12 <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800bdcc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bdce:	330e      	adds	r3, #14
 800bdd0:	4aa4      	ldr	r2, [pc, #656]	@ (800c064 <dir_register+0x2e0>)
 800bdd2:	fba2 2303 	umull	r2, r3, r2, r3
 800bdd6:	08db      	lsrs	r3, r3, #3
 800bdd8:	3302      	adds	r3, #2
 800bdda:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800bddc:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f7ff f8b9 	bl	800af56 <dir_alloc>
 800bde4:	4603      	mov	r3, r0
 800bde6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 800bdea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d002      	beq.n	800bdf8 <dir_register+0x74>
 800bdf2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bdf6:	e169      	b.n	800c0cc <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bdfc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bdfe:	3b01      	subs	r3, #1
 800be00:	015b      	lsls	r3, r3, #5
 800be02:	1ad2      	subs	r2, r2, r3
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	689b      	ldr	r3, [r3, #8]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d076      	beq.n	800befe <dir_register+0x17a>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	79db      	ldrb	r3, [r3, #7]
 800be14:	f003 0304 	and.w	r3, r3, #4
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d070      	beq.n	800befe <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800be22:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800be24:	8949      	ldrh	r1, [r1, #10]
 800be26:	4608      	mov	r0, r1
 800be28:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800be2a:	8989      	ldrh	r1, [r1, #12]
 800be2c:	fb00 f101 	mul.w	r1, r0, r1
 800be30:	2000      	movs	r0, #0
 800be32:	460c      	mov	r4, r1
 800be34:	4605      	mov	r5, r0
 800be36:	eb12 0804 	adds.w	r8, r2, r4
 800be3a:	eb43 0905 	adc.w	r9, r3, r5
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	4618      	mov	r0, r3
 800be48:	f7fe fcaa 	bl	800a7a0 <fill_first_frag>
 800be4c:	4603      	mov	r3, r0
 800be4e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800be52:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800be56:	2b00      	cmp	r3, #0
 800be58:	d002      	beq.n	800be60 <dir_register+0xdc>
 800be5a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800be5e:	e135      	b.n	800c0cc <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be66:	f04f 32ff 	mov.w	r2, #4294967295
 800be6a:	4619      	mov	r1, r3
 800be6c:	f7fe fcc7 	bl	800a7fe <fill_last_frag>
 800be70:	4603      	mov	r3, r0
 800be72:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800be76:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d002      	beq.n	800be84 <dir_register+0x100>
 800be7e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800be82:	e123      	b.n	800c0cc <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	f107 0308 	add.w	r3, r7, #8
 800be8a:	4611      	mov	r1, r2
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7ff fc8f 	bl	800b7b0 <load_obj_dir>
 800be92:	4603      	mov	r3, r0
 800be94:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800be98:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d002      	beq.n	800bea6 <dir_register+0x122>
 800bea0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bea4:	e112      	b.n	800c0cc <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800bea6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bea8:	695b      	ldr	r3, [r3, #20]
 800beaa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800beb4:	4608      	mov	r0, r1
 800beb6:	f7fd fd60 	bl	800997a <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800beba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bebc:	695b      	ldr	r3, [r3, #20]
 800bebe:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bec8:	4608      	mov	r0, r1
 800beca:	f7fd fd56 	bl	800997a <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	79da      	ldrb	r2, [r3, #7]
 800bed2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bed4:	695b      	ldr	r3, [r3, #20]
 800bed6:	3321      	adds	r3, #33	@ 0x21
 800bed8:	f042 0201 	orr.w	r2, r2, #1
 800bedc:	b2d2      	uxtb	r2, r2
 800bede:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800bee0:	f107 0308 	add.w	r3, r7, #8
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7ff fc99 	bl	800b81c <store_xdir>
 800beea:	4603      	mov	r3, r0
 800beec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800bef0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d002      	beq.n	800befe <dir_register+0x17a>
 800bef8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800befc:	e0e6      	b.n	800c0cc <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800befe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf00:	695a      	ldr	r2, [r3, #20]
 800bf02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf04:	691b      	ldr	r3, [r3, #16]
 800bf06:	4619      	mov	r1, r3
 800bf08:	4610      	mov	r0, r2
 800bf0a:	f7ff fce2 	bl	800b8d2 <create_xdir>
		return FR_OK;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	e0dc      	b.n	800c0cc <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800bf18:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800bf1c:	220c      	movs	r2, #12
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7fd fdb3 	bl	8009a8a <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800bf24:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bf28:	f003 0301 	and.w	r3, r3, #1
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d033      	beq.n	800bf98 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2240      	movs	r2, #64	@ 0x40
 800bf34:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 800bf38:	2301      	movs	r3, #1
 800bf3a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bf3c:	e016      	b.n	800bf6c <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800bf44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf46:	691a      	ldr	r2, [r3, #16]
 800bf48:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800bf4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf4e:	f7ff f9d9 	bl	800b304 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f7ff fdeb 	bl	800bb2e <dir_find>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 800bf5e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d106      	bne.n	800bf74 <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 800bf66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf68:	3301      	adds	r3, #1
 800bf6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bf6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf6e:	2b63      	cmp	r3, #99	@ 0x63
 800bf70:	d9e5      	bls.n	800bf3e <dir_register+0x1ba>
 800bf72:	e000      	b.n	800bf76 <dir_register+0x1f2>
			if (res != FR_OK) break;
 800bf74:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bf76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf78:	2b64      	cmp	r3, #100	@ 0x64
 800bf7a:	d101      	bne.n	800bf80 <dir_register+0x1fc>
 800bf7c:	2307      	movs	r3, #7
 800bf7e:	e0a5      	b.n	800c0cc <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800bf80:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bf84:	2b04      	cmp	r3, #4
 800bf86:	d002      	beq.n	800bf8e <dir_register+0x20a>
 800bf88:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bf8c:	e09e      	b.n	800c0cc <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800bf8e:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800bf98:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bf9c:	f003 0302 	and.w	r3, r3, #2
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d007      	beq.n	800bfb4 <dir_register+0x230>
 800bfa4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bfa6:	330c      	adds	r3, #12
 800bfa8:	4a2f      	ldr	r2, [pc, #188]	@ (800c068 <dir_register+0x2e4>)
 800bfaa:	fba2 2303 	umull	r2, r3, r2, r3
 800bfae:	089b      	lsrs	r3, r3, #2
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	e000      	b.n	800bfb6 <dir_register+0x232>
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800bfb8:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f7fe ffcb 	bl	800af56 <dir_alloc>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800bfc6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d14f      	bne.n	800c06e <dir_register+0x2ea>
 800bfce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bfd0:	3b01      	subs	r3, #1
 800bfd2:	673b      	str	r3, [r7, #112]	@ 0x70
 800bfd4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d049      	beq.n	800c06e <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bfde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bfe0:	015b      	lsls	r3, r3, #5
 800bfe2:	1ad3      	subs	r3, r2, r3
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f7fe fe3b 	bl	800ac62 <dir_sdi>
 800bfec:	4603      	mov	r3, r0
 800bfee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800bff2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d139      	bne.n	800c06e <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	3340      	adds	r3, #64	@ 0x40
 800bffe:	4618      	mov	r0, r3
 800c000:	f7ff fa0e 	bl	800b420 <sum_sfn>
 800c004:	4603      	mov	r3, r0
 800c006:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c00e:	4619      	mov	r1, r3
 800c010:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c012:	f7fd ff99 	bl	8009f48 <move_window>
 800c016:	4603      	mov	r3, r0
 800c018:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 800c01c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c020:	2b00      	cmp	r3, #0
 800c022:	d123      	bne.n	800c06c <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c024:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c026:	6918      	ldr	r0, [r3, #16]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c02c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c02e:	b2da      	uxtb	r2, r3
 800c030:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800c034:	f7ff f8fe 	bl	800b234 <put_lfn>
				fs->wflag = 1;
 800c038:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c03a:	2201      	movs	r2, #1
 800c03c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c03e:	2100      	movs	r1, #0
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f7fe fea2 	bl	800ad8a <dir_next>
 800c046:	4603      	mov	r3, r0
 800c048:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 800c04c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c050:	2b00      	cmp	r3, #0
 800c052:	d10c      	bne.n	800c06e <dir_register+0x2ea>
 800c054:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c056:	3b01      	subs	r3, #1
 800c058:	673b      	str	r3, [r7, #112]	@ 0x70
 800c05a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1d4      	bne.n	800c00a <dir_register+0x286>
 800c060:	e005      	b.n	800c06e <dir_register+0x2ea>
 800c062:	bf00      	nop
 800c064:	88888889 	.word	0x88888889
 800c068:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800c06c:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c06e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c072:	2b00      	cmp	r3, #0
 800c074:	d128      	bne.n	800c0c8 <dir_register+0x344>
		res = move_window(fs, dp->sect);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c07a:	4619      	mov	r1, r3
 800c07c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c07e:	f7fd ff63 	bl	8009f48 <move_window>
 800c082:	4603      	mov	r3, r0
 800c084:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800c088:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d11b      	bne.n	800c0c8 <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c094:	2220      	movs	r2, #32
 800c096:	2100      	movs	r1, #0
 800c098:	4618      	mov	r0, r3
 800c09a:	f7fd fd17 	bl	8009acc <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	3340      	adds	r3, #64	@ 0x40
 800c0a6:	220b      	movs	r2, #11
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	f7fd fcee 	bl	8009a8a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0b8:	330c      	adds	r3, #12
 800c0ba:	f002 0218 	and.w	r2, r2, #24
 800c0be:	b2d2      	uxtb	r2, r2
 800c0c0:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c0c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c0c8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3780      	adds	r7, #128	@ 0x80
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c0d6:	bf00      	nop

0800c0d8 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b086      	sub	sp, #24
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0ea:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f4:	d007      	beq.n	800c106 <dir_remove+0x2e>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0fa:	4619      	mov	r1, r3
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f7fe fdb0 	bl	800ac62 <dir_sdi>
 800c102:	4603      	mov	r3, r0
 800c104:	e000      	b.n	800c108 <dir_remove+0x30>
 800c106:	2300      	movs	r3, #0
 800c108:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c10a:	7dfb      	ldrb	r3, [r7, #23]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d136      	bne.n	800c17e <dir_remove+0xa6>
		do {
			res = move_window(fs, dp->sect);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c114:	4619      	mov	r1, r3
 800c116:	6938      	ldr	r0, [r7, #16]
 800c118:	f7fd ff16 	bl	8009f48 <move_window>
 800c11c:	4603      	mov	r3, r0
 800c11e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c120:	7dfb      	ldrb	r3, [r7, #23]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d123      	bne.n	800c16e <dir_remove+0x96>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	2b04      	cmp	r3, #4
 800c12c:	d109      	bne.n	800c142 <dir_remove+0x6a>
				dp->dir[XDIR_Type] &= 0x7F;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c132:	781a      	ldrb	r2, [r3, #0]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c138:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c13c:	b2d2      	uxtb	r2, r2
 800c13e:	701a      	strb	r2, [r3, #0]
 800c140:	e003      	b.n	800c14a <dir_remove+0x72>
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c146:	22e5      	movs	r2, #229	@ 0xe5
 800c148:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	2201      	movs	r2, #1
 800c14e:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c154:	68fa      	ldr	r2, [r7, #12]
 800c156:	429a      	cmp	r2, r3
 800c158:	d90b      	bls.n	800c172 <dir_remove+0x9a>
			res = dir_next(dp, 0);	/* Next entry */
 800c15a:	2100      	movs	r1, #0
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f7fe fe14 	bl	800ad8a <dir_next>
 800c162:	4603      	mov	r3, r0
 800c164:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800c166:	7dfb      	ldrb	r3, [r7, #23]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d0d1      	beq.n	800c110 <dir_remove+0x38>
 800c16c:	e002      	b.n	800c174 <dir_remove+0x9c>
			if (res != FR_OK) break;
 800c16e:	bf00      	nop
 800c170:	e000      	b.n	800c174 <dir_remove+0x9c>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800c172:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800c174:	7dfb      	ldrb	r3, [r7, #23]
 800c176:	2b04      	cmp	r3, #4
 800c178:	d101      	bne.n	800c17e <dir_remove+0xa6>
 800c17a:	2302      	movs	r3, #2
 800c17c:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800c17e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c180:	4618      	mov	r0, r3
 800c182:	3718      	adds	r7, #24
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800c188:	b5b0      	push	{r4, r5, r7, lr}
 800c18a:	b088      	sub	sp, #32
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	2200      	movs	r2, #0
 800c19c:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	f000 80d9 	beq.w	800c35a <get_fileinfo+0x1d2>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	2b04      	cmp	r3, #4
 800c1ae:	d106      	bne.n	800c1be <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	695b      	ldr	r3, [r3, #20]
 800c1b4:	6839      	ldr	r1, [r7, #0]
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7ff f9b9 	bl	800b52e <get_xdir_info>
		return;
 800c1bc:	e0ce      	b.n	800c35c <get_fileinfo+0x1d4>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c6:	d032      	beq.n	800c22e <get_fileinfo+0xa6>
			i = j = 0;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	61bb      	str	r3, [r7, #24]
 800c1cc:	69bb      	ldr	r3, [r7, #24]
 800c1ce:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c1d0:	e01b      	b.n	800c20a <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800c1d2:	89fb      	ldrh	r3, [r7, #14]
 800c1d4:	2100      	movs	r1, #0
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f002 fe8a 	bl	800eef0 <ff_convert>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800c1e0:	89fb      	ldrh	r3, [r7, #14]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d102      	bne.n	800c1ec <get_fileinfo+0x64>
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	61fb      	str	r3, [r7, #28]
 800c1ea:	e01a      	b.n	800c222 <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800c1ec:	69fb      	ldr	r3, [r7, #28]
 800c1ee:	2bfe      	cmp	r3, #254	@ 0xfe
 800c1f0:	d902      	bls.n	800c1f8 <get_fileinfo+0x70>
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	61fb      	str	r3, [r7, #28]
 800c1f6:	e014      	b.n	800c222 <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 800c1f8:	69fb      	ldr	r3, [r7, #28]
 800c1fa:	1c5a      	adds	r2, r3, #1
 800c1fc:	61fa      	str	r2, [r7, #28]
 800c1fe:	89fa      	ldrh	r2, [r7, #14]
 800c200:	b2d1      	uxtb	r1, r2
 800c202:	683a      	ldr	r2, [r7, #0]
 800c204:	4413      	add	r3, r2
 800c206:	460a      	mov	r2, r1
 800c208:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	691a      	ldr	r2, [r3, #16]
 800c20e:	69bb      	ldr	r3, [r7, #24]
 800c210:	1c59      	adds	r1, r3, #1
 800c212:	61b9      	str	r1, [r7, #24]
 800c214:	005b      	lsls	r3, r3, #1
 800c216:	4413      	add	r3, r2
 800c218:	881b      	ldrh	r3, [r3, #0]
 800c21a:	81fb      	strh	r3, [r7, #14]
 800c21c:	89fb      	ldrh	r3, [r7, #14]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d1d7      	bne.n	800c1d2 <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800c222:	683a      	ldr	r2, [r7, #0]
 800c224:	69fb      	ldr	r3, [r7, #28]
 800c226:	4413      	add	r3, r2
 800c228:	331a      	adds	r3, #26
 800c22a:	2200      	movs	r2, #0
 800c22c:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800c22e:	2300      	movs	r3, #0
 800c230:	61bb      	str	r3, [r7, #24]
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800c236:	683a      	ldr	r2, [r7, #0]
 800c238:	69fb      	ldr	r3, [r7, #28]
 800c23a:	4413      	add	r3, r2
 800c23c:	331a      	adds	r3, #26
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800c242:	e04d      	b.n	800c2e0 <get_fileinfo+0x158>
		c = (TCHAR)dp->dir[i++];
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c248:	69fb      	ldr	r3, [r7, #28]
 800c24a:	1c59      	adds	r1, r3, #1
 800c24c:	61f9      	str	r1, [r7, #28]
 800c24e:	4413      	add	r3, r2
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800c254:	7dfb      	ldrb	r3, [r7, #23]
 800c256:	2b20      	cmp	r3, #32
 800c258:	d041      	beq.n	800c2de <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c25a:	7dfb      	ldrb	r3, [r7, #23]
 800c25c:	2b05      	cmp	r3, #5
 800c25e:	d101      	bne.n	800c264 <get_fileinfo+0xdc>
 800c260:	23e5      	movs	r3, #229	@ 0xe5
 800c262:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800c264:	69fb      	ldr	r3, [r7, #28]
 800c266:	2b09      	cmp	r3, #9
 800c268:	d10f      	bne.n	800c28a <get_fileinfo+0x102>
			if (!lfv) fno->fname[j] = '.';
 800c26a:	89bb      	ldrh	r3, [r7, #12]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d105      	bne.n	800c27c <get_fileinfo+0xf4>
 800c270:	683a      	ldr	r2, [r7, #0]
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	4413      	add	r3, r2
 800c276:	331a      	adds	r3, #26
 800c278:	222e      	movs	r2, #46	@ 0x2e
 800c27a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800c27c:	69bb      	ldr	r3, [r7, #24]
 800c27e:	1c5a      	adds	r2, r3, #1
 800c280:	61ba      	str	r2, [r7, #24]
 800c282:	683a      	ldr	r2, [r7, #0]
 800c284:	4413      	add	r3, r2
 800c286:	222e      	movs	r2, #46	@ 0x2e
 800c288:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800c28a:	683a      	ldr	r2, [r7, #0]
 800c28c:	69bb      	ldr	r3, [r7, #24]
 800c28e:	4413      	add	r3, r2
 800c290:	330d      	adds	r3, #13
 800c292:	7dfa      	ldrb	r2, [r7, #23]
 800c294:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800c296:	89bb      	ldrh	r3, [r7, #12]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d11c      	bne.n	800c2d6 <get_fileinfo+0x14e>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800c29c:	7dfb      	ldrb	r3, [r7, #23]
 800c29e:	2b40      	cmp	r3, #64	@ 0x40
 800c2a0:	d913      	bls.n	800c2ca <get_fileinfo+0x142>
 800c2a2:	7dfb      	ldrb	r3, [r7, #23]
 800c2a4:	2b5a      	cmp	r3, #90	@ 0x5a
 800c2a6:	d810      	bhi.n	800c2ca <get_fileinfo+0x142>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2ac:	330c      	adds	r3, #12
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	69fb      	ldr	r3, [r7, #28]
 800c2b4:	2b08      	cmp	r3, #8
 800c2b6:	d901      	bls.n	800c2bc <get_fileinfo+0x134>
 800c2b8:	2310      	movs	r3, #16
 800c2ba:	e000      	b.n	800c2be <get_fileinfo+0x136>
 800c2bc:	2308      	movs	r3, #8
 800c2be:	4013      	ands	r3, r2
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d002      	beq.n	800c2ca <get_fileinfo+0x142>
				c += 0x20;			/* To lower */
 800c2c4:	7dfb      	ldrb	r3, [r7, #23]
 800c2c6:	3320      	adds	r3, #32
 800c2c8:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800c2ca:	683a      	ldr	r2, [r7, #0]
 800c2cc:	69bb      	ldr	r3, [r7, #24]
 800c2ce:	4413      	add	r3, r2
 800c2d0:	331a      	adds	r3, #26
 800c2d2:	7dfa      	ldrb	r2, [r7, #23]
 800c2d4:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800c2d6:	69bb      	ldr	r3, [r7, #24]
 800c2d8:	3301      	adds	r3, #1
 800c2da:	61bb      	str	r3, [r7, #24]
 800c2dc:	e000      	b.n	800c2e0 <get_fileinfo+0x158>
		if (c == ' ') continue;				/* Skip padding spaces */
 800c2de:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	2b0a      	cmp	r3, #10
 800c2e4:	d9ae      	bls.n	800c244 <get_fileinfo+0xbc>
	}
	if (!lfv) {
 800c2e6:	89bb      	ldrh	r3, [r7, #12]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d10d      	bne.n	800c308 <get_fileinfo+0x180>
		fno->fname[j] = 0;
 800c2ec:	683a      	ldr	r2, [r7, #0]
 800c2ee:	69bb      	ldr	r3, [r7, #24]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	331a      	adds	r3, #26
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2fc:	330c      	adds	r3, #12
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d101      	bne.n	800c308 <get_fileinfo+0x180>
 800c304:	2300      	movs	r3, #0
 800c306:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800c308:	683a      	ldr	r2, [r7, #0]
 800c30a:	69bb      	ldr	r3, [r7, #24]
 800c30c:	4413      	add	r3, r2
 800c30e:	330d      	adds	r3, #13
 800c310:	2200      	movs	r2, #0
 800c312:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c318:	7ada      	ldrb	r2, [r3, #11]
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c322:	331c      	adds	r3, #28
 800c324:	4618      	mov	r0, r3
 800c326:	f7fd f9e3 	bl	80096f0 <ld_dword>
 800c32a:	4603      	mov	r3, r0
 800c32c:	2200      	movs	r2, #0
 800c32e:	461c      	mov	r4, r3
 800c330:	4615      	mov	r5, r2
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	e9c3 4500 	strd	r4, r5, [r3]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c33c:	3316      	adds	r3, #22
 800c33e:	4618      	mov	r0, r3
 800c340:	f7fd f9d6 	bl	80096f0 <ld_dword>
 800c344:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	b29a      	uxth	r2, r3
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	815a      	strh	r2, [r3, #10]
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	0c1b      	lsrs	r3, r3, #16
 800c352:	b29a      	uxth	r2, r3
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	811a      	strh	r2, [r3, #8]
 800c358:	e000      	b.n	800c35c <get_fileinfo+0x1d4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c35a:	bf00      	nop
}
 800c35c:	3720      	adds	r7, #32
 800c35e:	46bd      	mov	sp, r7
 800c360:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c364 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b08a      	sub	sp, #40	@ 0x28
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	613b      	str	r3, [r7, #16]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	691b      	ldr	r3, [r3, #16]
 800c37a:	60fb      	str	r3, [r7, #12]
 800c37c:	2300      	movs	r3, #0
 800c37e:	617b      	str	r3, [r7, #20]
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	1c5a      	adds	r2, r3, #1
 800c388:	61ba      	str	r2, [r7, #24]
 800c38a:	693a      	ldr	r2, [r7, #16]
 800c38c:	4413      	add	r3, r2
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c392:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c394:	2b1f      	cmp	r3, #31
 800c396:	d940      	bls.n	800c41a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c398:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c39a:	2b2f      	cmp	r3, #47	@ 0x2f
 800c39c:	d006      	beq.n	800c3ac <create_name+0x48>
 800c39e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c3a0:	2b5c      	cmp	r3, #92	@ 0x5c
 800c3a2:	d110      	bne.n	800c3c6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c3a4:	e002      	b.n	800c3ac <create_name+0x48>
 800c3a6:	69bb      	ldr	r3, [r7, #24]
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	61bb      	str	r3, [r7, #24]
 800c3ac:	693a      	ldr	r2, [r7, #16]
 800c3ae:	69bb      	ldr	r3, [r7, #24]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	2b2f      	cmp	r3, #47	@ 0x2f
 800c3b6:	d0f6      	beq.n	800c3a6 <create_name+0x42>
 800c3b8:	693a      	ldr	r2, [r7, #16]
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	4413      	add	r3, r2
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	2b5c      	cmp	r3, #92	@ 0x5c
 800c3c2:	d0f0      	beq.n	800c3a6 <create_name+0x42>
			break;
 800c3c4:	e02a      	b.n	800c41c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	2bfe      	cmp	r3, #254	@ 0xfe
 800c3ca:	d901      	bls.n	800c3d0 <create_name+0x6c>
 800c3cc:	2306      	movs	r3, #6
 800c3ce:	e17d      	b.n	800c6cc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c3d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c3d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c3d8:	2101      	movs	r1, #1
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f002 fd88 	bl	800eef0 <ff_convert>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c3e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d101      	bne.n	800c3ee <create_name+0x8a>
 800c3ea:	2306      	movs	r3, #6
 800c3ec:	e16e      	b.n	800c6cc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c3ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c3f0:	2b7f      	cmp	r3, #127	@ 0x7f
 800c3f2:	d809      	bhi.n	800c408 <create_name+0xa4>
 800c3f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	488d      	ldr	r0, [pc, #564]	@ (800c630 <create_name+0x2cc>)
 800c3fa:	f7fd fba9 	bl	8009b50 <chk_chr>
 800c3fe:	4603      	mov	r3, r0
 800c400:	2b00      	cmp	r3, #0
 800c402:	d001      	beq.n	800c408 <create_name+0xa4>
 800c404:	2306      	movs	r3, #6
 800c406:	e161      	b.n	800c6cc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	1c5a      	adds	r2, r3, #1
 800c40c:	617a      	str	r2, [r7, #20]
 800c40e:	005b      	lsls	r3, r3, #1
 800c410:	68fa      	ldr	r2, [r7, #12]
 800c412:	4413      	add	r3, r2
 800c414:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c416:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c418:	e7b4      	b.n	800c384 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c41a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c41c:	693a      	ldr	r2, [r7, #16]
 800c41e:	69bb      	ldr	r3, [r7, #24]
 800c420:	441a      	add	r2, r3
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c426:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c428:	2b1f      	cmp	r3, #31
 800c42a:	d801      	bhi.n	800c430 <create_name+0xcc>
 800c42c:	2304      	movs	r3, #4
 800c42e:	e000      	b.n	800c432 <create_name+0xce>
 800c430:	2300      	movs	r3, #0
 800c432:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c436:	e011      	b.n	800c45c <create_name+0xf8>
		w = lfn[di - 1];
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c43e:	3b01      	subs	r3, #1
 800c440:	005b      	lsls	r3, r3, #1
 800c442:	68fa      	ldr	r2, [r7, #12]
 800c444:	4413      	add	r3, r2
 800c446:	881b      	ldrh	r3, [r3, #0]
 800c448:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800c44a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c44c:	2b20      	cmp	r3, #32
 800c44e:	d002      	beq.n	800c456 <create_name+0xf2>
 800c450:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c452:	2b2e      	cmp	r3, #46	@ 0x2e
 800c454:	d106      	bne.n	800c464 <create_name+0x100>
		di--;
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	3b01      	subs	r3, #1
 800c45a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d1ea      	bne.n	800c438 <create_name+0xd4>
 800c462:	e000      	b.n	800c466 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c464:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	005b      	lsls	r3, r3, #1
 800c46a:	68fa      	ldr	r2, [r7, #12]
 800c46c:	4413      	add	r3, r2
 800c46e:	2200      	movs	r2, #0
 800c470:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d101      	bne.n	800c47c <create_name+0x118>
 800c478:	2306      	movs	r3, #6
 800c47a:	e127      	b.n	800c6cc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	3340      	adds	r3, #64	@ 0x40
 800c480:	220b      	movs	r2, #11
 800c482:	2120      	movs	r1, #32
 800c484:	4618      	mov	r0, r3
 800c486:	f7fd fb21 	bl	8009acc <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c48a:	2300      	movs	r3, #0
 800c48c:	61bb      	str	r3, [r7, #24]
 800c48e:	e002      	b.n	800c496 <create_name+0x132>
 800c490:	69bb      	ldr	r3, [r7, #24]
 800c492:	3301      	adds	r3, #1
 800c494:	61bb      	str	r3, [r7, #24]
 800c496:	69bb      	ldr	r3, [r7, #24]
 800c498:	005b      	lsls	r3, r3, #1
 800c49a:	68fa      	ldr	r2, [r7, #12]
 800c49c:	4413      	add	r3, r2
 800c49e:	881b      	ldrh	r3, [r3, #0]
 800c4a0:	2b20      	cmp	r3, #32
 800c4a2:	d0f5      	beq.n	800c490 <create_name+0x12c>
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	005b      	lsls	r3, r3, #1
 800c4a8:	68fa      	ldr	r2, [r7, #12]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	881b      	ldrh	r3, [r3, #0]
 800c4ae:	2b2e      	cmp	r3, #46	@ 0x2e
 800c4b0:	d0ee      	beq.n	800c490 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c4b2:	69bb      	ldr	r3, [r7, #24]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d009      	beq.n	800c4cc <create_name+0x168>
 800c4b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c4bc:	f043 0303 	orr.w	r3, r3, #3
 800c4c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c4c4:	e002      	b.n	800c4cc <create_name+0x168>
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	3b01      	subs	r3, #1
 800c4ca:	617b      	str	r3, [r7, #20]
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d009      	beq.n	800c4e6 <create_name+0x182>
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c4d8:	3b01      	subs	r3, #1
 800c4da:	005b      	lsls	r3, r3, #1
 800c4dc:	68fa      	ldr	r2, [r7, #12]
 800c4de:	4413      	add	r3, r2
 800c4e0:	881b      	ldrh	r3, [r3, #0]
 800c4e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c4e4:	d1ef      	bne.n	800c4c6 <create_name+0x162>

	i = b = 0; ni = 8;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	623b      	str	r3, [r7, #32]
 800c4f0:	2308      	movs	r3, #8
 800c4f2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c4f4:	69bb      	ldr	r3, [r7, #24]
 800c4f6:	1c5a      	adds	r2, r3, #1
 800c4f8:	61ba      	str	r2, [r7, #24]
 800c4fa:	005b      	lsls	r3, r3, #1
 800c4fc:	68fa      	ldr	r2, [r7, #12]
 800c4fe:	4413      	add	r3, r2
 800c500:	881b      	ldrh	r3, [r3, #0]
 800c502:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c504:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c506:	2b00      	cmp	r3, #0
 800c508:	f000 8090 	beq.w	800c62c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c50c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c50e:	2b20      	cmp	r3, #32
 800c510:	d006      	beq.n	800c520 <create_name+0x1bc>
 800c512:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c514:	2b2e      	cmp	r3, #46	@ 0x2e
 800c516:	d10a      	bne.n	800c52e <create_name+0x1ca>
 800c518:	69ba      	ldr	r2, [r7, #24]
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d006      	beq.n	800c52e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c524:	f043 0303 	orr.w	r3, r3, #3
 800c528:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c52c:	e07d      	b.n	800c62a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c52e:	6a3a      	ldr	r2, [r7, #32]
 800c530:	69fb      	ldr	r3, [r7, #28]
 800c532:	429a      	cmp	r2, r3
 800c534:	d203      	bcs.n	800c53e <create_name+0x1da>
 800c536:	69ba      	ldr	r2, [r7, #24]
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d123      	bne.n	800c586 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c53e:	69fb      	ldr	r3, [r7, #28]
 800c540:	2b0b      	cmp	r3, #11
 800c542:	d106      	bne.n	800c552 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c544:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c548:	f043 0303 	orr.w	r3, r3, #3
 800c54c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c550:	e075      	b.n	800c63e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c552:	69ba      	ldr	r2, [r7, #24]
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	429a      	cmp	r2, r3
 800c558:	d005      	beq.n	800c566 <create_name+0x202>
 800c55a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c55e:	f043 0303 	orr.w	r3, r3, #3
 800c562:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800c566:	69ba      	ldr	r2, [r7, #24]
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d866      	bhi.n	800c63c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	61bb      	str	r3, [r7, #24]
 800c572:	2308      	movs	r3, #8
 800c574:	623b      	str	r3, [r7, #32]
 800c576:	230b      	movs	r3, #11
 800c578:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c57a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c57e:	009b      	lsls	r3, r3, #2
 800c580:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c584:	e051      	b.n	800c62a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c586:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c588:	2b7f      	cmp	r3, #127	@ 0x7f
 800c58a:	d914      	bls.n	800c5b6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c58c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c58e:	2100      	movs	r1, #0
 800c590:	4618      	mov	r0, r3
 800c592:	f002 fcad 	bl	800eef0 <ff_convert>
 800c596:	4603      	mov	r3, r0
 800c598:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c59a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d004      	beq.n	800c5aa <create_name+0x246>
 800c5a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c5a2:	3b80      	subs	r3, #128	@ 0x80
 800c5a4:	4a23      	ldr	r2, [pc, #140]	@ (800c634 <create_name+0x2d0>)
 800c5a6:	5cd3      	ldrb	r3, [r2, r3]
 800c5a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c5aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c5ae:	f043 0302 	orr.w	r3, r3, #2
 800c5b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c5b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d007      	beq.n	800c5cc <create_name+0x268>
 800c5bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c5be:	4619      	mov	r1, r3
 800c5c0:	481d      	ldr	r0, [pc, #116]	@ (800c638 <create_name+0x2d4>)
 800c5c2:	f7fd fac5 	bl	8009b50 <chk_chr>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d008      	beq.n	800c5de <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c5cc:	235f      	movs	r3, #95	@ 0x5f
 800c5ce:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c5d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c5d4:	f043 0303 	orr.w	r3, r3, #3
 800c5d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c5dc:	e01b      	b.n	800c616 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c5de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c5e0:	2b40      	cmp	r3, #64	@ 0x40
 800c5e2:	d909      	bls.n	800c5f8 <create_name+0x294>
 800c5e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c5e6:	2b5a      	cmp	r3, #90	@ 0x5a
 800c5e8:	d806      	bhi.n	800c5f8 <create_name+0x294>
					b |= 2;
 800c5ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c5ee:	f043 0302 	orr.w	r3, r3, #2
 800c5f2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c5f6:	e00e      	b.n	800c616 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c5f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c5fa:	2b60      	cmp	r3, #96	@ 0x60
 800c5fc:	d90b      	bls.n	800c616 <create_name+0x2b2>
 800c5fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c600:	2b7a      	cmp	r3, #122	@ 0x7a
 800c602:	d808      	bhi.n	800c616 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c604:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c608:	f043 0301 	orr.w	r3, r3, #1
 800c60c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c610:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c612:	3b20      	subs	r3, #32
 800c614:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c616:	6a3b      	ldr	r3, [r7, #32]
 800c618:	1c5a      	adds	r2, r3, #1
 800c61a:	623a      	str	r2, [r7, #32]
 800c61c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c61e:	b2d1      	uxtb	r1, r2
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	4413      	add	r3, r2
 800c624:	460a      	mov	r2, r1
 800c626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 800c62a:	e763      	b.n	800c4f4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c62c:	bf00      	nop
 800c62e:	e006      	b.n	800c63e <create_name+0x2da>
 800c630:	08014a5c 	.word	0x08014a5c
 800c634:	0801868c 	.word	0x0801868c
 800c638:	08014a68 	.word	0x08014a68
			if (si > di) break;			/* No extension */
 800c63c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c644:	2be5      	cmp	r3, #229	@ 0xe5
 800c646:	d103      	bne.n	800c650 <create_name+0x2ec>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2205      	movs	r2, #5
 800c64c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	2b08      	cmp	r3, #8
 800c654:	d104      	bne.n	800c660 <create_name+0x2fc>
 800c656:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c65a:	009b      	lsls	r3, r3, #2
 800c65c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c660:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c664:	f003 030c 	and.w	r3, r3, #12
 800c668:	2b0c      	cmp	r3, #12
 800c66a:	d005      	beq.n	800c678 <create_name+0x314>
 800c66c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c670:	f003 0303 	and.w	r3, r3, #3
 800c674:	2b03      	cmp	r3, #3
 800c676:	d105      	bne.n	800c684 <create_name+0x320>
 800c678:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c67c:	f043 0302 	orr.w	r3, r3, #2
 800c680:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c684:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c688:	f003 0302 	and.w	r3, r3, #2
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d117      	bne.n	800c6c0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c690:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c694:	f003 0303 	and.w	r3, r3, #3
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d105      	bne.n	800c6a8 <create_name+0x344>
 800c69c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c6a0:	f043 0310 	orr.w	r3, r3, #16
 800c6a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c6a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c6ac:	f003 030c 	and.w	r3, r3, #12
 800c6b0:	2b04      	cmp	r3, #4
 800c6b2:	d105      	bne.n	800c6c0 <create_name+0x35c>
 800c6b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c6b8:	f043 0308 	orr.w	r3, r3, #8
 800c6bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c6c6:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800c6ca:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3728      	adds	r7, #40	@ 0x28
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b086      	sub	sp, #24
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c6e8:	e002      	b.n	800c6f0 <follow_path+0x1c>
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	603b      	str	r3, [r7, #0]
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	2b2f      	cmp	r3, #47	@ 0x2f
 800c6f6:	d0f8      	beq.n	800c6ea <follow_path+0x16>
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	2b5c      	cmp	r3, #92	@ 0x5c
 800c6fe:	d0f4      	beq.n	800c6ea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	2200      	movs	r2, #0
 800c704:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	2200      	movs	r2, #0
 800c70a:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	2b1f      	cmp	r3, #31
 800c712:	d80a      	bhi.n	800c72a <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2280      	movs	r2, #128	@ 0x80
 800c718:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800c71c:	2100      	movs	r1, #0
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f7fe fa9f 	bl	800ac62 <dir_sdi>
 800c724:	4603      	mov	r3, r0
 800c726:	75fb      	strb	r3, [r7, #23]
 800c728:	e07d      	b.n	800c826 <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c72a:	463b      	mov	r3, r7
 800c72c:	4619      	mov	r1, r3
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f7ff fe18 	bl	800c364 <create_name>
 800c734:	4603      	mov	r3, r0
 800c736:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c738:	7dfb      	ldrb	r3, [r7, #23]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d16e      	bne.n	800c81c <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f7ff f9f5 	bl	800bb2e <dir_find>
 800c744:	4603      	mov	r3, r0
 800c746:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800c74e:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c750:	7dfb      	ldrb	r3, [r7, #23]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d00a      	beq.n	800c76c <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c756:	7dfb      	ldrb	r3, [r7, #23]
 800c758:	2b04      	cmp	r3, #4
 800c75a:	d161      	bne.n	800c820 <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c75c:	7afb      	ldrb	r3, [r7, #11]
 800c75e:	f003 0304 	and.w	r3, r3, #4
 800c762:	2b00      	cmp	r3, #0
 800c764:	d15c      	bne.n	800c820 <follow_path+0x14c>
 800c766:	2305      	movs	r3, #5
 800c768:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c76a:	e059      	b.n	800c820 <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c76c:	7afb      	ldrb	r3, [r7, #11]
 800c76e:	f003 0304 	and.w	r3, r3, #4
 800c772:	2b00      	cmp	r3, #0
 800c774:	d156      	bne.n	800c824 <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	799b      	ldrb	r3, [r3, #6]
 800c77a:	f003 0310 	and.w	r3, r3, #16
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d102      	bne.n	800c788 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800c782:	2305      	movs	r3, #5
 800c784:	75fb      	strb	r3, [r7, #23]
 800c786:	e04e      	b.n	800c826 <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	2b04      	cmp	r3, #4
 800c78e:	d130      	bne.n	800c7f2 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	689a      	ldr	r2, [r3, #8]
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c79e:	4613      	mov	r3, r2
 800c7a0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c7a4:	693a      	ldr	r2, [r7, #16]
 800c7a6:	79d2      	ldrb	r2, [r2, #7]
 800c7a8:	431a      	orrs	r2, r3
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	695b      	ldr	r3, [r3, #20]
 800c7ba:	3334      	adds	r3, #52	@ 0x34
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f7fc ff97 	bl	80096f0 <ld_dword>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	695b      	ldr	r3, [r3, #20]
 800c7cc:	3321      	adds	r3, #33	@ 0x21
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	f003 0302 	and.w	r3, r3, #2
 800c7d4:	b2da      	uxtb	r2, r3
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	695b      	ldr	r3, [r3, #20]
 800c7de:	3338      	adds	r3, #56	@ 0x38
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7fc ffa8 	bl	8009736 <ld_qword>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	6939      	ldr	r1, [r7, #16]
 800c7ec:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800c7f0:	e79b      	b.n	800c72a <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7fc:	68fa      	ldr	r2, [r7, #12]
 800c7fe:	8992      	ldrh	r2, [r2, #12]
 800c800:	fbb3 f0f2 	udiv	r0, r3, r2
 800c804:	fb00 f202 	mul.w	r2, r0, r2
 800c808:	1a9b      	subs	r3, r3, r2
 800c80a:	440b      	add	r3, r1
 800c80c:	4619      	mov	r1, r3
 800c80e:	68f8      	ldr	r0, [r7, #12]
 800c810:	f7fe fbfd 	bl	800b00e <ld_clust>
 800c814:	4602      	mov	r2, r0
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c81a:	e786      	b.n	800c72a <follow_path+0x56>
			if (res != FR_OK) break;
 800c81c:	bf00      	nop
 800c81e:	e002      	b.n	800c826 <follow_path+0x152>
				break;
 800c820:	bf00      	nop
 800c822:	e000      	b.n	800c826 <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c824:	bf00      	nop
			}
		}
	}

	return res;
 800c826:	7dfb      	ldrb	r3, [r7, #23]
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3718      	adds	r7, #24
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c830:	b480      	push	{r7}
 800c832:	b087      	sub	sp, #28
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c838:	f04f 33ff 	mov.w	r3, #4294967295
 800c83c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d031      	beq.n	800c8aa <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	617b      	str	r3, [r7, #20]
 800c84c:	e002      	b.n	800c854 <get_ldnumber+0x24>
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	3301      	adds	r3, #1
 800c852:	617b      	str	r3, [r7, #20]
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	2b1f      	cmp	r3, #31
 800c85a:	d903      	bls.n	800c864 <get_ldnumber+0x34>
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	2b3a      	cmp	r3, #58	@ 0x3a
 800c862:	d1f4      	bne.n	800c84e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	2b3a      	cmp	r3, #58	@ 0x3a
 800c86a:	d11c      	bne.n	800c8a6 <get_ldnumber+0x76>
			tp = *path;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	1c5a      	adds	r2, r3, #1
 800c876:	60fa      	str	r2, [r7, #12]
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	3b30      	subs	r3, #48	@ 0x30
 800c87c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	2b09      	cmp	r3, #9
 800c882:	d80e      	bhi.n	800c8a2 <get_ldnumber+0x72>
 800c884:	68fa      	ldr	r2, [r7, #12]
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	429a      	cmp	r2, r3
 800c88a:	d10a      	bne.n	800c8a2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d107      	bne.n	800c8a2 <get_ldnumber+0x72>
					vol = (int)i;
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	3301      	adds	r3, #1
 800c89a:	617b      	str	r3, [r7, #20]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	697a      	ldr	r2, [r7, #20]
 800c8a0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	e002      	b.n	800c8ac <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c8aa:	693b      	ldr	r3, [r7, #16]
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	371c      	adds	r7, #28
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b6:	4770      	bx	lr

0800c8b8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	70da      	strb	r2, [r3, #3]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c8ce:	63da      	str	r2, [r3, #60]	@ 0x3c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c8d0:	6839      	ldr	r1, [r7, #0]
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f7fd fb38 	bl	8009f48 <move_window>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d001      	beq.n	800c8e2 <check_fs+0x2a>
 800c8de:	2304      	movs	r3, #4
 800c8e0:	e044      	b.n	800c96c <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	3340      	adds	r3, #64	@ 0x40
 800c8e6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f7fc fee8 	bl	80096c0 <ld_word>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d001      	beq.n	800c900 <check_fs+0x48>
 800c8fc:	2303      	movs	r3, #3
 800c8fe:	e035      	b.n	800c96c <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c906:	2be9      	cmp	r3, #233	@ 0xe9
 800c908:	d009      	beq.n	800c91e <check_fs+0x66>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c910:	2beb      	cmp	r3, #235	@ 0xeb
 800c912:	d11e      	bne.n	800c952 <check_fs+0x9a>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c91a:	2b90      	cmp	r3, #144	@ 0x90
 800c91c:	d119      	bne.n	800c952 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	3340      	adds	r3, #64	@ 0x40
 800c922:	3336      	adds	r3, #54	@ 0x36
 800c924:	4618      	mov	r0, r3
 800c926:	f7fc fee3 	bl	80096f0 <ld_dword>
 800c92a:	4603      	mov	r3, r0
 800c92c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c930:	4a10      	ldr	r2, [pc, #64]	@ (800c974 <check_fs+0xbc>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d101      	bne.n	800c93a <check_fs+0x82>
 800c936:	2300      	movs	r3, #0
 800c938:	e018      	b.n	800c96c <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	3340      	adds	r3, #64	@ 0x40
 800c93e:	3352      	adds	r3, #82	@ 0x52
 800c940:	4618      	mov	r0, r3
 800c942:	f7fc fed5 	bl	80096f0 <ld_dword>
 800c946:	4603      	mov	r3, r0
 800c948:	4a0b      	ldr	r2, [pc, #44]	@ (800c978 <check_fs+0xc0>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d101      	bne.n	800c952 <check_fs+0x9a>
 800c94e:	2300      	movs	r3, #0
 800c950:	e00c      	b.n	800c96c <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	3340      	adds	r3, #64	@ 0x40
 800c956:	220b      	movs	r2, #11
 800c958:	4908      	ldr	r1, [pc, #32]	@ (800c97c <check_fs+0xc4>)
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7fd f8d1 	bl	8009b02 <mem_cmp>
 800c960:	4603      	mov	r3, r0
 800c962:	2b00      	cmp	r3, #0
 800c964:	d101      	bne.n	800c96a <check_fs+0xb2>
 800c966:	2301      	movs	r3, #1
 800c968:	e000      	b.n	800c96c <check_fs+0xb4>
#endif
	return 2;
 800c96a:	2302      	movs	r3, #2
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3708      	adds	r7, #8
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	00544146 	.word	0x00544146
 800c978:	33544146 	.word	0x33544146
 800c97c:	08014a70 	.word	0x08014a70

0800c980 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c984:	b09c      	sub	sp, #112	@ 0x70
 800c986:	af00      	add	r7, sp, #0
 800c988:	61f8      	str	r0, [r7, #28]
 800c98a:	61b9      	str	r1, [r7, #24]
 800c98c:	4613      	mov	r3, r2
 800c98e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c990:	69bb      	ldr	r3, [r7, #24]
 800c992:	2200      	movs	r2, #0
 800c994:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c996:	69f8      	ldr	r0, [r7, #28]
 800c998:	f7ff ff4a 	bl	800c830 <get_ldnumber>
 800c99c:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800c99e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	da01      	bge.n	800c9a8 <find_volume+0x28>
 800c9a4:	230b      	movs	r3, #11
 800c9a6:	e378      	b.n	800d09a <find_volume+0x71a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c9a8:	4aa2      	ldr	r2, [pc, #648]	@ (800cc34 <find_volume+0x2b4>)
 800c9aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9b0:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c9b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d101      	bne.n	800c9bc <find_volume+0x3c>
 800c9b8:	230c      	movs	r3, #12
 800c9ba:	e36e      	b.n	800d09a <find_volume+0x71a>

	ENTER_FF(fs);						/* Lock the volume */
 800c9bc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c9be:	f7fd f8e2 	bl	8009b86 <lock_fs>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d101      	bne.n	800c9cc <find_volume+0x4c>
 800c9c8:	230f      	movs	r3, #15
 800c9ca:	e366      	b.n	800d09a <find_volume+0x71a>
	*rfs = fs;							/* Return pointer to the file system object */
 800c9cc:	69bb      	ldr	r3, [r7, #24]
 800c9ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c9d0:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c9d2:	7dfb      	ldrb	r3, [r7, #23]
 800c9d4:	f023 0301 	bic.w	r3, r3, #1
 800c9d8:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c9da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d01a      	beq.n	800ca18 <find_volume+0x98>
		stat = disk_status(fs->drv);
 800c9e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9e4:	785b      	ldrb	r3, [r3, #1]
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7fc fdca 	bl	8009580 <disk_status>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c9f2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c9f6:	f003 0301 	and.w	r3, r3, #1
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d10c      	bne.n	800ca18 <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c9fe:	7dfb      	ldrb	r3, [r7, #23]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d007      	beq.n	800ca14 <find_volume+0x94>
 800ca04:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ca08:	f003 0304 	and.w	r3, r3, #4
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d001      	beq.n	800ca14 <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 800ca10:	230a      	movs	r3, #10
 800ca12:	e342      	b.n	800d09a <find_volume+0x71a>
			}
			return FR_OK;				/* The file system object is valid */
 800ca14:	2300      	movs	r3, #0
 800ca16:	e340      	b.n	800d09a <find_volume+0x71a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ca18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ca1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca20:	b2da      	uxtb	r2, r3
 800ca22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca24:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ca26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca28:	785b      	ldrb	r3, [r3, #1]
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7fc fdc2 	bl	80095b4 <disk_initialize>
 800ca30:	4603      	mov	r3, r0
 800ca32:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ca36:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ca3a:	f003 0301 	and.w	r3, r3, #1
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d001      	beq.n	800ca46 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ca42:	2303      	movs	r3, #3
 800ca44:	e329      	b.n	800d09a <find_volume+0x71a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ca46:	7dfb      	ldrb	r3, [r7, #23]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d007      	beq.n	800ca5c <find_volume+0xdc>
 800ca4c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ca50:	f003 0304 	and.w	r3, r3, #4
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d001      	beq.n	800ca5c <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800ca58:	230a      	movs	r3, #10
 800ca5a:	e31e      	b.n	800d09a <find_volume+0x71a>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ca5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca5e:	7858      	ldrb	r0, [r3, #1]
 800ca60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca62:	330c      	adds	r3, #12
 800ca64:	461a      	mov	r2, r3
 800ca66:	2102      	movs	r1, #2
 800ca68:	f7fc fe0c 	bl	8009684 <disk_ioctl>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d001      	beq.n	800ca76 <find_volume+0xf6>
 800ca72:	2301      	movs	r3, #1
 800ca74:	e311      	b.n	800d09a <find_volume+0x71a>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ca76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca78:	899b      	ldrh	r3, [r3, #12]
 800ca7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca7e:	d80d      	bhi.n	800ca9c <find_volume+0x11c>
 800ca80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca82:	899b      	ldrh	r3, [r3, #12]
 800ca84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca88:	d308      	bcc.n	800ca9c <find_volume+0x11c>
 800ca8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca8c:	899b      	ldrh	r3, [r3, #12]
 800ca8e:	461a      	mov	r2, r3
 800ca90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca92:	899b      	ldrh	r3, [r3, #12]
 800ca94:	3b01      	subs	r3, #1
 800ca96:	4013      	ands	r3, r2
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d001      	beq.n	800caa0 <find_volume+0x120>
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	e2fc      	b.n	800d09a <find_volume+0x71a>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800caa0:	2300      	movs	r3, #0
 800caa2:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800caa4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800caa6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800caa8:	f7ff ff06 	bl	800c8b8 <check_fs>
 800caac:	4603      	mov	r3, r0
 800caae:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cab2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cab6:	2b02      	cmp	r3, #2
 800cab8:	d14d      	bne.n	800cb56 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800caba:	2300      	movs	r3, #0
 800cabc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cabe:	e020      	b.n	800cb02 <find_volume+0x182>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cac0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cac2:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800cac6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cac8:	011b      	lsls	r3, r3, #4
 800caca:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800cace:	4413      	add	r3, r2
 800cad0:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cad2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cad4:	3304      	adds	r3, #4
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d006      	beq.n	800caea <find_volume+0x16a>
 800cadc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cade:	3308      	adds	r3, #8
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7fc fe05 	bl	80096f0 <ld_dword>
 800cae6:	4602      	mov	r2, r0
 800cae8:	e000      	b.n	800caec <find_volume+0x16c>
 800caea:	2200      	movs	r2, #0
 800caec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800caee:	009b      	lsls	r3, r3, #2
 800caf0:	3360      	adds	r3, #96	@ 0x60
 800caf2:	f107 0110 	add.w	r1, r7, #16
 800caf6:	440b      	add	r3, r1
 800caf8:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cafc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cafe:	3301      	adds	r3, #1
 800cb00:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cb02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb04:	2b03      	cmp	r3, #3
 800cb06:	d9db      	bls.n	800cac0 <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cb08:	2300      	movs	r3, #0
 800cb0a:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 800cb0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d002      	beq.n	800cb18 <find_volume+0x198>
 800cb12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb14:	3b01      	subs	r3, #1
 800cb16:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cb18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb1a:	009b      	lsls	r3, r3, #2
 800cb1c:	3360      	adds	r3, #96	@ 0x60
 800cb1e:	f107 0210 	add.w	r2, r7, #16
 800cb22:	4413      	add	r3, r2
 800cb24:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800cb28:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cb2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d005      	beq.n	800cb3c <find_volume+0x1bc>
 800cb30:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cb32:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800cb34:	f7ff fec0 	bl	800c8b8 <check_fs>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	e000      	b.n	800cb3e <find_volume+0x1be>
 800cb3c:	2303      	movs	r3, #3
 800cb3e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cb42:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d905      	bls.n	800cb56 <find_volume+0x1d6>
 800cb4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cb50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb52:	2b03      	cmp	r3, #3
 800cb54:	d9e0      	bls.n	800cb18 <find_volume+0x198>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cb56:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cb5a:	2b04      	cmp	r3, #4
 800cb5c:	d101      	bne.n	800cb62 <find_volume+0x1e2>
 800cb5e:	2301      	movs	r3, #1
 800cb60:	e29b      	b.n	800d09a <find_volume+0x71a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cb62:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	d901      	bls.n	800cb6e <find_volume+0x1ee>
 800cb6a:	230d      	movs	r3, #13
 800cb6c:	e295      	b.n	800d09a <find_volume+0x71a>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800cb6e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cb72:	2b01      	cmp	r3, #1
 800cb74:	f040 8100 	bne.w	800cd78 <find_volume+0x3f8>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800cb78:	230b      	movs	r3, #11
 800cb7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cb7c:	e002      	b.n	800cb84 <find_volume+0x204>
 800cb7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb80:	3301      	adds	r3, #1
 800cb82:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cb84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb86:	2b3f      	cmp	r3, #63	@ 0x3f
 800cb88:	d806      	bhi.n	800cb98 <find_volume+0x218>
 800cb8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cb8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb8e:	4413      	add	r3, r2
 800cb90:	3340      	adds	r3, #64	@ 0x40
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d0f2      	beq.n	800cb7e <find_volume+0x1fe>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800cb98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb9a:	2b3f      	cmp	r3, #63	@ 0x3f
 800cb9c:	d801      	bhi.n	800cba2 <find_volume+0x222>
 800cb9e:	230d      	movs	r3, #13
 800cba0:	e27b      	b.n	800d09a <find_volume+0x71a>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800cba2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cba4:	3340      	adds	r3, #64	@ 0x40
 800cba6:	3368      	adds	r3, #104	@ 0x68
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f7fc fd89 	bl	80096c0 <ld_word>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cbb4:	d001      	beq.n	800cbba <find_volume+0x23a>
 800cbb6:	230d      	movs	r3, #13
 800cbb8:	e26f      	b.n	800d09a <find_volume+0x71a>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800cbba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbbc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	4093      	lsls	r3, r2
 800cbc6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cbc8:	8992      	ldrh	r2, [r2, #12]
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d001      	beq.n	800cbd2 <find_volume+0x252>
			return FR_NO_FILESYSTEM;
 800cbce:	230d      	movs	r3, #13
 800cbd0:	e263      	b.n	800d09a <find_volume+0x71a>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800cbd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbd4:	3340      	adds	r3, #64	@ 0x40
 800cbd6:	3348      	adds	r3, #72	@ 0x48
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7fc fdac 	bl	8009736 <ld_qword>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	460b      	mov	r3, r1
 800cbe2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cbe4:	2000      	movs	r0, #0
 800cbe6:	60b9      	str	r1, [r7, #8]
 800cbe8:	60f8      	str	r0, [r7, #12]
 800cbea:	68b9      	ldr	r1, [r7, #8]
 800cbec:	1851      	adds	r1, r2, r1
 800cbee:	6039      	str	r1, [r7, #0]
 800cbf0:	68f9      	ldr	r1, [r7, #12]
 800cbf2:	eb43 0101 	adc.w	r1, r3, r1
 800cbf6:	6079      	str	r1, [r7, #4]
 800cbf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbfc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800cc00:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d301      	bcc.n	800cc0c <find_volume+0x28c>
 800cc08:	230d      	movs	r3, #13
 800cc0a:	e246      	b.n	800d09a <find_volume+0x71a>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800cc0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc0e:	3340      	adds	r3, #64	@ 0x40
 800cc10:	3354      	adds	r3, #84	@ 0x54
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7fc fd6c 	bl	80096f0 <ld_dword>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc1c:	629a      	str	r2, [r3, #40]	@ 0x28

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800cc1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc20:	f893 20ae 	ldrb.w	r2, [r3, #174]	@ 0xae
 800cc24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc26:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800cc28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc2a:	789b      	ldrb	r3, [r3, #2]
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d003      	beq.n	800cc38 <find_volume+0x2b8>
 800cc30:	230d      	movs	r3, #13
 800cc32:	e232      	b.n	800d09a <find_volume+0x71a>
 800cc34:	20002920 	.word	0x20002920

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800cc38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc3a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800cc3e:	461a      	mov	r2, r3
 800cc40:	2301      	movs	r3, #1
 800cc42:	4093      	lsls	r3, r2
 800cc44:	b29a      	uxth	r2, r3
 800cc46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc48:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800cc4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc4c:	895b      	ldrh	r3, [r3, #10]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d101      	bne.n	800cc56 <find_volume+0x2d6>
 800cc52:	230d      	movs	r3, #13
 800cc54:	e221      	b.n	800d09a <find_volume+0x71a>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800cc56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc58:	3340      	adds	r3, #64	@ 0x40
 800cc5a:	335c      	adds	r3, #92	@ 0x5c
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f7fc fd47 	bl	80096f0 <ld_dword>
 800cc62:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800cc64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc66:	4a9a      	ldr	r2, [pc, #616]	@ (800ced0 <find_volume+0x550>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d901      	bls.n	800cc70 <find_volume+0x2f0>
 800cc6c:	230d      	movs	r3, #13
 800cc6e:	e214      	b.n	800d09a <find_volume+0x71a>
		fs->n_fatent = nclst + 2;
 800cc70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc72:	1c9a      	adds	r2, r3, #2
 800cc74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc76:	625a      	str	r2, [r3, #36]	@ 0x24

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800cc78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc7a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cc7c:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800cc7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc80:	3340      	adds	r3, #64	@ 0x40
 800cc82:	3358      	adds	r3, #88	@ 0x58
 800cc84:	4618      	mov	r0, r3
 800cc86:	f7fc fd33 	bl	80096f0 <ld_dword>
 800cc8a:	4602      	mov	r2, r0
 800cc8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cc8e:	441a      	add	r2, r3
 800cc90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc92:	639a      	str	r2, [r3, #56]	@ 0x38
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800cc94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc96:	3340      	adds	r3, #64	@ 0x40
 800cc98:	3350      	adds	r3, #80	@ 0x50
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7fc fd28 	bl	80096f0 <ld_dword>
 800cca0:	4602      	mov	r2, r0
 800cca2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cca4:	441a      	add	r2, r3
 800cca6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cca8:	631a      	str	r2, [r3, #48]	@ 0x30
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800ccaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccae:	2200      	movs	r2, #0
 800ccb0:	469a      	mov	sl, r3
 800ccb2:	4693      	mov	fp, r2
 800ccb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccb6:	895b      	ldrh	r3, [r3, #10]
 800ccb8:	461a      	mov	r2, r3
 800ccba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccbc:	fb02 f303 	mul.w	r3, r2, r3
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	4698      	mov	r8, r3
 800ccc4:	4691      	mov	r9, r2
 800ccc6:	eb1a 0408 	adds.w	r4, sl, r8
 800ccca:	eb4b 0509 	adc.w	r5, fp, r9
 800ccce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800ccd2:	42a2      	cmp	r2, r4
 800ccd4:	41ab      	sbcs	r3, r5
 800ccd6:	d201      	bcs.n	800ccdc <find_volume+0x35c>
 800ccd8:	230d      	movs	r3, #13
 800ccda:	e1de      	b.n	800d09a <find_volume+0x71a>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800ccdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccde:	3340      	adds	r3, #64	@ 0x40
 800cce0:	3360      	adds	r3, #96	@ 0x60
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7fc fd04 	bl	80096f0 <ld_dword>
 800cce8:	4602      	mov	r2, r0
 800ccea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccec:	635a      	str	r2, [r3, #52]	@ 0x34

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800ccee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccf2:	4619      	mov	r1, r3
 800ccf4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ccf6:	f7fd f9c5 	bl	800a084 <clust2sect>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	4619      	mov	r1, r3
 800ccfe:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800cd00:	f7fd f922 	bl	8009f48 <move_window>
 800cd04:	4603      	mov	r3, r0
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d001      	beq.n	800cd0e <find_volume+0x38e>
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	e1c5      	b.n	800d09a <find_volume+0x71a>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800cd0e:	2300      	movs	r3, #0
 800cd10:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cd12:	e015      	b.n	800cd40 <find_volume+0x3c0>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800cd14:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cd16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cd18:	4413      	add	r3, r2
 800cd1a:	3340      	adds	r3, #64	@ 0x40
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	2b81      	cmp	r3, #129	@ 0x81
 800cd20:	d10b      	bne.n	800cd3a <find_volume+0x3ba>
 800cd22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd24:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800cd28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cd2a:	3314      	adds	r3, #20
 800cd2c:	4413      	add	r3, r2
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7fc fcde 	bl	80096f0 <ld_dword>
 800cd34:	4603      	mov	r3, r0
 800cd36:	2b02      	cmp	r3, #2
 800cd38:	d009      	beq.n	800cd4e <find_volume+0x3ce>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800cd3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cd3c:	3320      	adds	r3, #32
 800cd3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cd40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd42:	899b      	ldrh	r3, [r3, #12]
 800cd44:	461a      	mov	r2, r3
 800cd46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	d3e3      	bcc.n	800cd14 <find_volume+0x394>
 800cd4c:	e000      	b.n	800cd50 <find_volume+0x3d0>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800cd4e:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800cd50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd52:	899b      	ldrh	r3, [r3, #12]
 800cd54:	461a      	mov	r2, r3
 800cd56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d101      	bne.n	800cd60 <find_volume+0x3e0>
 800cd5c:	230d      	movs	r3, #13
 800cd5e:	e19c      	b.n	800d09a <find_volume+0x71a>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cd60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd62:	f04f 32ff 	mov.w	r2, #4294967295
 800cd66:	621a      	str	r2, [r3, #32]
 800cd68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd6a:	6a1a      	ldr	r2, [r3, #32]
 800cd6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd6e:	61da      	str	r2, [r3, #28]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800cd70:	2304      	movs	r3, #4
 800cd72:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800cd76:	e17e      	b.n	800d076 <find_volume+0x6f6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cd78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd7a:	3340      	adds	r3, #64	@ 0x40
 800cd7c:	330b      	adds	r3, #11
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7fc fc9e 	bl	80096c0 <ld_word>
 800cd84:	4603      	mov	r3, r0
 800cd86:	461a      	mov	r2, r3
 800cd88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd8a:	899b      	ldrh	r3, [r3, #12]
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d001      	beq.n	800cd94 <find_volume+0x414>
 800cd90:	230d      	movs	r3, #13
 800cd92:	e182      	b.n	800d09a <find_volume+0x71a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cd94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd96:	3340      	adds	r3, #64	@ 0x40
 800cd98:	3316      	adds	r3, #22
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7fc fc90 	bl	80096c0 <ld_word>
 800cda0:	4603      	mov	r3, r0
 800cda2:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cda4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d106      	bne.n	800cdb8 <find_volume+0x438>
 800cdaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdac:	3340      	adds	r3, #64	@ 0x40
 800cdae:	3324      	adds	r3, #36	@ 0x24
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f7fc fc9d 	bl	80096f0 <ld_dword>
 800cdb6:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800cdb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cdbc:	629a      	str	r2, [r3, #40]	@ 0x28

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cdbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdc0:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800cdc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdc6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cdc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdca:	789b      	ldrb	r3, [r3, #2]
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	d005      	beq.n	800cddc <find_volume+0x45c>
 800cdd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdd2:	789b      	ldrb	r3, [r3, #2]
 800cdd4:	2b02      	cmp	r3, #2
 800cdd6:	d001      	beq.n	800cddc <find_volume+0x45c>
 800cdd8:	230d      	movs	r3, #13
 800cdda:	e15e      	b.n	800d09a <find_volume+0x71a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cddc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdde:	789b      	ldrb	r3, [r3, #2]
 800cde0:	461a      	mov	r2, r3
 800cde2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cde4:	fb02 f303 	mul.w	r3, r2, r3
 800cde8:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cdea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdec:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdf4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cdf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdf8:	895b      	ldrh	r3, [r3, #10]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d008      	beq.n	800ce10 <find_volume+0x490>
 800cdfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce00:	895b      	ldrh	r3, [r3, #10]
 800ce02:	461a      	mov	r2, r3
 800ce04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce06:	895b      	ldrh	r3, [r3, #10]
 800ce08:	3b01      	subs	r3, #1
 800ce0a:	4013      	ands	r3, r2
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d001      	beq.n	800ce14 <find_volume+0x494>
 800ce10:	230d      	movs	r3, #13
 800ce12:	e142      	b.n	800d09a <find_volume+0x71a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ce14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce16:	3340      	adds	r3, #64	@ 0x40
 800ce18:	3311      	adds	r3, #17
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7fc fc50 	bl	80096c0 <ld_word>
 800ce20:	4603      	mov	r3, r0
 800ce22:	461a      	mov	r2, r3
 800ce24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce26:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ce28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce2a:	891b      	ldrh	r3, [r3, #8]
 800ce2c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ce2e:	8992      	ldrh	r2, [r2, #12]
 800ce30:	0952      	lsrs	r2, r2, #5
 800ce32:	b292      	uxth	r2, r2
 800ce34:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce38:	fb01 f202 	mul.w	r2, r1, r2
 800ce3c:	1a9b      	subs	r3, r3, r2
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d001      	beq.n	800ce48 <find_volume+0x4c8>
 800ce44:	230d      	movs	r3, #13
 800ce46:	e128      	b.n	800d09a <find_volume+0x71a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ce48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce4a:	3340      	adds	r3, #64	@ 0x40
 800ce4c:	3313      	adds	r3, #19
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f7fc fc36 	bl	80096c0 <ld_word>
 800ce54:	4603      	mov	r3, r0
 800ce56:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ce58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d106      	bne.n	800ce6c <find_volume+0x4ec>
 800ce5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce60:	3340      	adds	r3, #64	@ 0x40
 800ce62:	3320      	adds	r3, #32
 800ce64:	4618      	mov	r0, r3
 800ce66:	f7fc fc43 	bl	80096f0 <ld_dword>
 800ce6a:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ce6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce6e:	3340      	adds	r3, #64	@ 0x40
 800ce70:	330e      	adds	r3, #14
 800ce72:	4618      	mov	r0, r3
 800ce74:	f7fc fc24 	bl	80096c0 <ld_word>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ce7e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d101      	bne.n	800ce8a <find_volume+0x50a>
 800ce86:	230d      	movs	r3, #13
 800ce88:	e107      	b.n	800d09a <find_volume+0x71a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ce8a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800ce8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ce90:	4413      	add	r3, r2
 800ce92:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ce94:	8911      	ldrh	r1, [r2, #8]
 800ce96:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ce98:	8992      	ldrh	r2, [r2, #12]
 800ce9a:	0952      	lsrs	r2, r2, #5
 800ce9c:	b292      	uxth	r2, r2
 800ce9e:	fbb1 f2f2 	udiv	r2, r1, r2
 800cea2:	b292      	uxth	r2, r2
 800cea4:	4413      	add	r3, r2
 800cea6:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cea8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ceaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d201      	bcs.n	800ceb4 <find_volume+0x534>
 800ceb0:	230d      	movs	r3, #13
 800ceb2:	e0f2      	b.n	800d09a <find_volume+0x71a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ceb4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ceb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ceb8:	1ad3      	subs	r3, r2, r3
 800ceba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cebc:	8952      	ldrh	r2, [r2, #10]
 800cebe:	fbb3 f3f2 	udiv	r3, r3, r2
 800cec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d104      	bne.n	800ced4 <find_volume+0x554>
 800ceca:	230d      	movs	r3, #13
 800cecc:	e0e5      	b.n	800d09a <find_volume+0x71a>
 800cece:	bf00      	nop
 800ced0:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 800ced4:	2303      	movs	r3, #3
 800ced6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ceda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cedc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d802      	bhi.n	800ceea <find_volume+0x56a>
 800cee4:	2302      	movs	r3, #2
 800cee6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ceea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ceec:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d802      	bhi.n	800cefa <find_volume+0x57a>
 800cef4:	2301      	movs	r3, #1
 800cef6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cefa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cefc:	1c9a      	adds	r2, r3, #2
 800cefe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf00:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->volbase = bsect;							/* Volume start sector */
 800cf02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf04:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cf06:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cf08:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800cf0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cf0e:	441a      	add	r2, r3
 800cf10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf12:	631a      	str	r2, [r3, #48]	@ 0x30
		fs->database = bsect + sysect;					/* Data start sector */
 800cf14:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cf16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf18:	441a      	add	r2, r3
 800cf1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf1c:	639a      	str	r2, [r3, #56]	@ 0x38
		if (fmt == FS_FAT32) {
 800cf1e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cf22:	2b03      	cmp	r3, #3
 800cf24:	d11e      	bne.n	800cf64 <find_volume+0x5e4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cf26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf28:	3340      	adds	r3, #64	@ 0x40
 800cf2a:	332a      	adds	r3, #42	@ 0x2a
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7fc fbc7 	bl	80096c0 <ld_word>
 800cf32:	4603      	mov	r3, r0
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d001      	beq.n	800cf3c <find_volume+0x5bc>
 800cf38:	230d      	movs	r3, #13
 800cf3a:	e0ae      	b.n	800d09a <find_volume+0x71a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cf3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf3e:	891b      	ldrh	r3, [r3, #8]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d001      	beq.n	800cf48 <find_volume+0x5c8>
 800cf44:	230d      	movs	r3, #13
 800cf46:	e0a8      	b.n	800d09a <find_volume+0x71a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cf48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf4a:	3340      	adds	r3, #64	@ 0x40
 800cf4c:	332c      	adds	r3, #44	@ 0x2c
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7fc fbce 	bl	80096f0 <ld_dword>
 800cf54:	4602      	mov	r2, r0
 800cf56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf58:	635a      	str	r2, [r3, #52]	@ 0x34
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cf5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf5e:	009b      	lsls	r3, r3, #2
 800cf60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cf62:	e01f      	b.n	800cfa4 <find_volume+0x624>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cf64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf66:	891b      	ldrh	r3, [r3, #8]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d101      	bne.n	800cf70 <find_volume+0x5f0>
 800cf6c:	230d      	movs	r3, #13
 800cf6e:	e094      	b.n	800d09a <find_volume+0x71a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cf70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cf74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf76:	441a      	add	r2, r3
 800cf78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf7a:	635a      	str	r2, [r3, #52]	@ 0x34
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cf7c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cf80:	2b02      	cmp	r3, #2
 800cf82:	d103      	bne.n	800cf8c <find_volume+0x60c>
 800cf84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf88:	005b      	lsls	r3, r3, #1
 800cf8a:	e00a      	b.n	800cfa2 <find_volume+0x622>
 800cf8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cf90:	4613      	mov	r3, r2
 800cf92:	005b      	lsls	r3, r3, #1
 800cf94:	4413      	add	r3, r2
 800cf96:	085a      	lsrs	r2, r3, #1
 800cf98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf9c:	f003 0301 	and.w	r3, r3, #1
 800cfa0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cfa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cfa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfa6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cfa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfaa:	899b      	ldrh	r3, [r3, #12]
 800cfac:	4619      	mov	r1, r3
 800cfae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cfb0:	440b      	add	r3, r1
 800cfb2:	3b01      	subs	r3, #1
 800cfb4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cfb6:	8989      	ldrh	r1, [r1, #12]
 800cfb8:	fbb3 f3f1 	udiv	r3, r3, r1
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d201      	bcs.n	800cfc4 <find_volume+0x644>
 800cfc0:	230d      	movs	r3, #13
 800cfc2:	e06a      	b.n	800d09a <find_volume+0x71a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cfc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfc6:	f04f 32ff 	mov.w	r2, #4294967295
 800cfca:	621a      	str	r2, [r3, #32]
 800cfcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfce:	6a1a      	ldr	r2, [r3, #32]
 800cfd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfd2:	61da      	str	r2, [r3, #28]
		fs->fsi_flag = 0x80;
 800cfd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfd6:	2280      	movs	r2, #128	@ 0x80
 800cfd8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cfda:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cfde:	2b03      	cmp	r3, #3
 800cfe0:	d149      	bne.n	800d076 <find_volume+0x6f6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cfe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfe4:	3340      	adds	r3, #64	@ 0x40
 800cfe6:	3330      	adds	r3, #48	@ 0x30
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f7fc fb69 	bl	80096c0 <ld_word>
 800cfee:	4603      	mov	r3, r0
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	d140      	bne.n	800d076 <find_volume+0x6f6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cff4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cff6:	3301      	adds	r3, #1
 800cff8:	4619      	mov	r1, r3
 800cffa:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800cffc:	f7fc ffa4 	bl	8009f48 <move_window>
 800d000:	4603      	mov	r3, r0
 800d002:	2b00      	cmp	r3, #0
 800d004:	d137      	bne.n	800d076 <find_volume+0x6f6>
		{
			fs->fsi_flag = 0;
 800d006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d008:	2200      	movs	r2, #0
 800d00a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d00c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d00e:	3340      	adds	r3, #64	@ 0x40
 800d010:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d014:	4618      	mov	r0, r3
 800d016:	f7fc fb53 	bl	80096c0 <ld_word>
 800d01a:	4603      	mov	r3, r0
 800d01c:	461a      	mov	r2, r3
 800d01e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d022:	429a      	cmp	r2, r3
 800d024:	d127      	bne.n	800d076 <find_volume+0x6f6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d028:	3340      	adds	r3, #64	@ 0x40
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7fc fb60 	bl	80096f0 <ld_dword>
 800d030:	4603      	mov	r3, r0
 800d032:	4a1c      	ldr	r2, [pc, #112]	@ (800d0a4 <find_volume+0x724>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d11e      	bne.n	800d076 <find_volume+0x6f6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d038:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d03a:	3340      	adds	r3, #64	@ 0x40
 800d03c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d040:	4618      	mov	r0, r3
 800d042:	f7fc fb55 	bl	80096f0 <ld_dword>
 800d046:	4603      	mov	r3, r0
 800d048:	4a17      	ldr	r2, [pc, #92]	@ (800d0a8 <find_volume+0x728>)
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d113      	bne.n	800d076 <find_volume+0x6f6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d04e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d050:	3340      	adds	r3, #64	@ 0x40
 800d052:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d056:	4618      	mov	r0, r3
 800d058:	f7fc fb4a 	bl	80096f0 <ld_dword>
 800d05c:	4602      	mov	r2, r0
 800d05e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d060:	621a      	str	r2, [r3, #32]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d064:	3340      	adds	r3, #64	@ 0x40
 800d066:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7fc fb40 	bl	80096f0 <ld_dword>
 800d070:	4602      	mov	r2, r0
 800d072:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d074:	61da      	str	r2, [r3, #28]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d076:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d078:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800d07c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d07e:	4b0b      	ldr	r3, [pc, #44]	@ (800d0ac <find_volume+0x72c>)
 800d080:	881b      	ldrh	r3, [r3, #0]
 800d082:	3301      	adds	r3, #1
 800d084:	b29a      	uxth	r2, r3
 800d086:	4b09      	ldr	r3, [pc, #36]	@ (800d0ac <find_volume+0x72c>)
 800d088:	801a      	strh	r2, [r3, #0]
 800d08a:	4b08      	ldr	r3, [pc, #32]	@ (800d0ac <find_volume+0x72c>)
 800d08c:	881a      	ldrh	r2, [r3, #0]
 800d08e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d090:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d092:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d094:	f7fc fef0 	bl	8009e78 <clear_lock>
#endif
	return FR_OK;
 800d098:	2300      	movs	r3, #0
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3770      	adds	r7, #112	@ 0x70
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d0a4:	41615252 	.word	0x41615252
 800d0a8:	61417272 	.word	0x61417272
 800d0ac:	20002924 	.word	0x20002924

0800d0b0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b084      	sub	sp, #16
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d0ba:	2309      	movs	r3, #9
 800d0bc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d02e      	beq.n	800d122 <validate+0x72>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d02a      	beq.n	800d122 <validate+0x72>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	781b      	ldrb	r3, [r3, #0]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d025      	beq.n	800d122 <validate+0x72>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	889a      	ldrh	r2, [r3, #4]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	88db      	ldrh	r3, [r3, #6]
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d11e      	bne.n	800d122 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7fc fd4c 	bl	8009b86 <lock_fs>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d014      	beq.n	800d11e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	785b      	ldrb	r3, [r3, #1]
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7fc fa40 	bl	8009580 <disk_status>
 800d100:	4603      	mov	r3, r0
 800d102:	f003 0301 	and.w	r3, r3, #1
 800d106:	2b00      	cmp	r3, #0
 800d108:	d102      	bne.n	800d110 <validate+0x60>
				res = FR_OK;
 800d10a:	2300      	movs	r3, #0
 800d10c:	73fb      	strb	r3, [r7, #15]
 800d10e:	e008      	b.n	800d122 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	2100      	movs	r1, #0
 800d116:	4618      	mov	r0, r3
 800d118:	f7fc fd4b 	bl	8009bb2 <unlock_fs>
 800d11c:	e001      	b.n	800d122 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800d11e:	230f      	movs	r3, #15
 800d120:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d122:	7bfb      	ldrb	r3, [r7, #15]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d102      	bne.n	800d12e <validate+0x7e>
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	e000      	b.n	800d130 <validate+0x80>
 800d12e:	2300      	movs	r3, #0
 800d130:	683a      	ldr	r2, [r7, #0]
 800d132:	6013      	str	r3, [r2, #0]
	return res;
 800d134:	7bfb      	ldrb	r3, [r7, #15]
}
 800d136:	4618      	mov	r0, r3
 800d138:	3710      	adds	r7, #16
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
	...

0800d140 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b088      	sub	sp, #32
 800d144:	af00      	add	r7, sp, #0
 800d146:	60f8      	str	r0, [r7, #12]
 800d148:	60b9      	str	r1, [r7, #8]
 800d14a:	4613      	mov	r3, r2
 800d14c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d152:	f107 0310 	add.w	r3, r7, #16
 800d156:	4618      	mov	r0, r3
 800d158:	f7ff fb6a 	bl	800c830 <get_ldnumber>
 800d15c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d15e:	69fb      	ldr	r3, [r7, #28]
 800d160:	2b00      	cmp	r3, #0
 800d162:	da01      	bge.n	800d168 <f_mount+0x28>
 800d164:	230b      	movs	r3, #11
 800d166:	e048      	b.n	800d1fa <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d168:	4a26      	ldr	r2, [pc, #152]	@ (800d204 <f_mount+0xc4>)
 800d16a:	69fb      	ldr	r3, [r7, #28]
 800d16c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d170:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d172:	69bb      	ldr	r3, [r7, #24]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d00f      	beq.n	800d198 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d178:	69b8      	ldr	r0, [r7, #24]
 800d17a:	f7fc fe7d 	bl	8009e78 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800d17e:	69bb      	ldr	r3, [r7, #24]
 800d180:	699b      	ldr	r3, [r3, #24]
 800d182:	4618      	mov	r0, r3
 800d184:	f001 ff98 	bl	800f0b8 <ff_del_syncobj>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d101      	bne.n	800d192 <f_mount+0x52>
 800d18e:	2302      	movs	r3, #2
 800d190:	e033      	b.n	800d1fa <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d192:	69bb      	ldr	r3, [r7, #24]
 800d194:	2200      	movs	r2, #0
 800d196:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d00f      	beq.n	800d1be <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800d1a4:	69fb      	ldr	r3, [r7, #28]
 800d1a6:	b2da      	uxtb	r2, r3
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	3318      	adds	r3, #24
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	4610      	mov	r0, r2
 800d1b0:	f001 ff64 	bl	800f07c <ff_cre_syncobj>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d101      	bne.n	800d1be <f_mount+0x7e>
 800d1ba:	2302      	movs	r3, #2
 800d1bc:	e01d      	b.n	800d1fa <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d1be:	68fa      	ldr	r2, [r7, #12]
 800d1c0:	4910      	ldr	r1, [pc, #64]	@ (800d204 <f_mount+0xc4>)
 800d1c2:	69fb      	ldr	r3, [r7, #28]
 800d1c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d002      	beq.n	800d1d4 <f_mount+0x94>
 800d1ce:	79fb      	ldrb	r3, [r7, #7]
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d001      	beq.n	800d1d8 <f_mount+0x98>
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	e010      	b.n	800d1fa <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d1d8:	f107 010c 	add.w	r1, r7, #12
 800d1dc:	f107 0308 	add.w	r3, r7, #8
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7ff fbcc 	bl	800c980 <find_volume>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	7dfa      	ldrb	r2, [r7, #23]
 800d1f0:	4611      	mov	r1, r2
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7fc fcdd 	bl	8009bb2 <unlock_fs>
 800d1f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3720      	adds	r7, #32
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
 800d202:	bf00      	nop
 800d204:	20002920 	.word	0x20002920

0800d208 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d20c:	b0aa      	sub	sp, #168	@ 0xa8
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6278      	str	r0, [r7, #36]	@ 0x24
 800d212:	6239      	str	r1, [r7, #32]
 800d214:	4613      	mov	r3, r2
 800d216:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d101      	bne.n	800d222 <f_open+0x1a>
 800d21e:	2309      	movs	r3, #9
 800d220:	e2e2      	b.n	800d7e8 <f_open+0x5e0>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d222:	7ffb      	ldrb	r3, [r7, #31]
 800d224:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d228:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 800d22a:	7ffb      	ldrb	r3, [r7, #31]
 800d22c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800d230:	f107 0020 	add.w	r0, r7, #32
 800d234:	461a      	mov	r2, r3
 800d236:	f7ff fba3 	bl	800c980 <find_volume>
 800d23a:	4603      	mov	r3, r0
 800d23c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	if (res == FR_OK) {
 800d240:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d244:	2b00      	cmp	r3, #0
 800d246:	f040 82bf 	bne.w	800d7c8 <f_open+0x5c0>
		dj.obj.fs = fs;
 800d24a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d24c:	633b      	str	r3, [r7, #48]	@ 0x30
		INIT_NAMBUF(fs);
 800d24e:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800d252:	f001 ff5d 	bl	800f110 <ff_memalloc>
 800d256:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 800d25a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d106      	bne.n	800d270 <f_open+0x68>
 800d262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d264:	2111      	movs	r1, #17
 800d266:	4618      	mov	r0, r3
 800d268:	f7fc fca3 	bl	8009bb2 <unlock_fs>
 800d26c:	2311      	movs	r3, #17
 800d26e:	e2bb      	b.n	800d7e8 <f_open+0x5e0>
 800d270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d272:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d276:	611a      	str	r2, [r3, #16]
 800d278:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d27a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d27e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800d282:	6153      	str	r3, [r2, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 800d284:	6a3b      	ldr	r3, [r7, #32]
 800d286:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d28a:	4619      	mov	r1, r3
 800d28c:	4610      	mov	r0, r2
 800d28e:	f7ff fa21 	bl	800c6d4 <follow_path>
 800d292:	4603      	mov	r3, r0
 800d294:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d298:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d118      	bne.n	800d2d2 <f_open+0xca>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d2a0:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800d2a4:	b25b      	sxtb	r3, r3
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	da03      	bge.n	800d2b2 <f_open+0xaa>
				res = FR_INVALID_NAME;
 800d2aa:	2306      	movs	r3, #6
 800d2ac:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800d2b0:	e00f      	b.n	800d2d2 <f_open+0xca>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d2b2:	7ffb      	ldrb	r3, [r7, #31]
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	bf8c      	ite	hi
 800d2b8:	2301      	movhi	r3, #1
 800d2ba:	2300      	movls	r3, #0
 800d2bc:	b2db      	uxtb	r3, r3
 800d2be:	461a      	mov	r2, r3
 800d2c0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d2c4:	4611      	mov	r1, r2
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f7fc fc8e 	bl	8009be8 <chk_lock>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d2d2:	7ffb      	ldrb	r3, [r7, #31]
 800d2d4:	f003 031c 	and.w	r3, r3, #28
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	f000 8117 	beq.w	800d50c <f_open+0x304>
			if (res != FR_OK) {					/* No file, create new */
 800d2de:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d017      	beq.n	800d316 <f_open+0x10e>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d2e6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d2ea:	2b04      	cmp	r3, #4
 800d2ec:	d10e      	bne.n	800d30c <f_open+0x104>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d2ee:	f7fc fcd7 	bl	8009ca0 <enq_lock>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d006      	beq.n	800d306 <f_open+0xfe>
 800d2f8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f7fe fd41 	bl	800bd84 <dir_register>
 800d302:	4603      	mov	r3, r0
 800d304:	e000      	b.n	800d308 <f_open+0x100>
 800d306:	2312      	movs	r3, #18
 800d308:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d30c:	7ffb      	ldrb	r3, [r7, #31]
 800d30e:	f043 0308 	orr.w	r3, r3, #8
 800d312:	77fb      	strb	r3, [r7, #31]
 800d314:	e011      	b.n	800d33a <f_open+0x132>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d316:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d31a:	f003 0311 	and.w	r3, r3, #17
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d003      	beq.n	800d32a <f_open+0x122>
					res = FR_DENIED;
 800d322:	2307      	movs	r3, #7
 800d324:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800d328:	e007      	b.n	800d33a <f_open+0x132>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d32a:	7ffb      	ldrb	r3, [r7, #31]
 800d32c:	f003 0304 	and.w	r3, r3, #4
 800d330:	2b00      	cmp	r3, #0
 800d332:	d002      	beq.n	800d33a <f_open+0x132>
 800d334:	2308      	movs	r3, #8
 800d336:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d33a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d33e:	2b00      	cmp	r3, #0
 800d340:	f040 8100 	bne.w	800d544 <f_open+0x33c>
 800d344:	7ffb      	ldrb	r3, [r7, #31]
 800d346:	f003 0308 	and.w	r3, r3, #8
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	f000 80fa 	beq.w	800d544 <f_open+0x33c>
				dw = GET_FATTIME();
 800d350:	f7fc f8b8 	bl	80094c4 <get_fattime>
 800d354:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800d358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	2b04      	cmp	r3, #4
 800d35e:	f040 8085 	bne.w	800d46c <f_open+0x264>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800d362:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d366:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800d368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d36a:	695b      	ldr	r3, [r3, #20]
 800d36c:	3334      	adds	r3, #52	@ 0x34
 800d36e:	4618      	mov	r0, r3
 800d370:	f7fc f9be 	bl	80096f0 <ld_dword>
 800d374:	4602      	mov	r2, r0
 800d376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d378:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d37c:	695b      	ldr	r3, [r3, #20]
 800d37e:	3338      	adds	r3, #56	@ 0x38
 800d380:	4618      	mov	r0, r3
 800d382:	f7fc f9d8 	bl	8009736 <ld_qword>
 800d386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d388:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d38e:	695b      	ldr	r3, [r3, #20]
 800d390:	3321      	adds	r3, #33	@ 0x21
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	f003 0302 	and.w	r3, r3, #2
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d39c:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 800d39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800d3a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3a6:	695b      	ldr	r3, [r3, #20]
 800d3a8:	3308      	adds	r3, #8
 800d3aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f7fc fab7 	bl	8009922 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800d3b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3b6:	695b      	ldr	r3, [r3, #20]
 800d3b8:	f103 0214 	add.w	r2, r3, #20
 800d3bc:	2300      	movs	r3, #0
 800d3be:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800d3c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3c2:	695b      	ldr	r3, [r3, #20]
 800d3c4:	330c      	adds	r3, #12
 800d3c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7fc faa9 	bl	8009922 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800d3d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3d2:	695b      	ldr	r3, [r3, #20]
 800d3d4:	f103 0215 	add.w	r2, r3, #21
 800d3d8:	2300      	movs	r3, #0
 800d3da:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800d3dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3de:	695b      	ldr	r3, [r3, #20]
 800d3e0:	1d1a      	adds	r2, r3, #4
 800d3e2:	2320      	movs	r3, #32
 800d3e4:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800d3e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3e8:	695b      	ldr	r3, [r3, #20]
 800d3ea:	3334      	adds	r3, #52	@ 0x34
 800d3ec:	2100      	movs	r1, #0
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f7fc fa97 	bl	8009922 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800d3f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3f6:	695b      	ldr	r3, [r3, #20]
 800d3f8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d3fc:	f04f 0200 	mov.w	r2, #0
 800d400:	f04f 0300 	mov.w	r3, #0
 800d404:	4608      	mov	r0, r1
 800d406:	f7fc fab8 	bl	800997a <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800d40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d40c:	695b      	ldr	r3, [r3, #20]
 800d40e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800d412:	f04f 0200 	mov.w	r2, #0
 800d416:	f04f 0300 	mov.w	r3, #0
 800d41a:	4608      	mov	r0, r1
 800d41c:	f7fc faad 	bl	800997a <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800d420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d422:	695b      	ldr	r3, [r3, #20]
 800d424:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 800d428:	2301      	movs	r3, #1
 800d42a:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 800d42c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d430:	4618      	mov	r0, r3
 800d432:	f7fe f9f3 	bl	800b81c <store_xdir>
 800d436:	4603      	mov	r3, r0
 800d438:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800d43c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d440:	2b00      	cmp	r3, #0
 800d442:	d17f      	bne.n	800d544 <f_open+0x33c>
 800d444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d446:	689b      	ldr	r3, [r3, #8]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d07b      	beq.n	800d544 <f_open+0x33c>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800d44c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d450:	689b      	ldr	r3, [r3, #8]
 800d452:	2200      	movs	r2, #0
 800d454:	4619      	mov	r1, r3
 800d456:	f7fd fa03 	bl	800a860 <remove_chain>
 800d45a:	4603      	mov	r3, r0
 800d45c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800d460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d466:	3b01      	subs	r3, #1
 800d468:	61d3      	str	r3, [r2, #28]
 800d46a:	e06b      	b.n	800d544 <f_open+0x33c>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d46c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d46e:	330e      	adds	r3, #14
 800d470:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d474:	4618      	mov	r0, r3
 800d476:	f7fc fa54 	bl	8009922 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d47a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d47c:	3316      	adds	r3, #22
 800d47e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d482:	4618      	mov	r0, r3
 800d484:	f7fc fa4d 	bl	8009922 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d48a:	f103 020b 	add.w	r2, r3, #11
 800d48e:	2320      	movs	r3, #32
 800d490:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d492:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d494:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d496:	4619      	mov	r1, r3
 800d498:	4610      	mov	r0, r2
 800d49a:	f7fd fdb8 	bl	800b00e <ld_clust>
 800d49e:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d4a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d4a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	f7fd fdcf 	bl	800b04c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d4ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4b0:	331c      	adds	r3, #28
 800d4b2:	2100      	movs	r1, #0
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f7fc fa34 	bl	8009922 <st_dword>
					fs->wflag = 1;
 800d4ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d4bc:	2301      	movs	r3, #1
 800d4be:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d4c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d03d      	beq.n	800d544 <f_open+0x33c>
						dw = fs->winsect;
 800d4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
						res = remove_chain(&dj.obj, cl, 0);
 800d4d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7fd f9c0 	bl	800a860 <remove_chain>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
						if (res == FR_OK) {
 800d4e6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d12a      	bne.n	800d544 <f_open+0x33c>
							res = move_window(fs, dw);
 800d4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f7fc fd27 	bl	8009f48 <move_window>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d500:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d502:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d506:	3b01      	subs	r3, #1
 800d508:	61d3      	str	r3, [r2, #28]
 800d50a:	e01b      	b.n	800d544 <f_open+0x33c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d50c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d510:	2b00      	cmp	r3, #0
 800d512:	d117      	bne.n	800d544 <f_open+0x33c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d514:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d518:	f003 0310 	and.w	r3, r3, #16
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d003      	beq.n	800d528 <f_open+0x320>
					res = FR_NO_FILE;
 800d520:	2304      	movs	r3, #4
 800d522:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800d526:	e00d      	b.n	800d544 <f_open+0x33c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d528:	7ffb      	ldrb	r3, [r7, #31]
 800d52a:	f003 0302 	and.w	r3, r3, #2
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d008      	beq.n	800d544 <f_open+0x33c>
 800d532:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d536:	f003 0301 	and.w	r3, r3, #1
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d002      	beq.n	800d544 <f_open+0x33c>
						res = FR_DENIED;
 800d53e:	2307      	movs	r3, #7
 800d540:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					}
				}
			}
		}
		if (res == FR_OK) {
 800d544:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d126      	bne.n	800d59a <f_open+0x392>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d54c:	7ffb      	ldrb	r3, [r7, #31]
 800d54e:	f003 0308 	and.w	r3, r3, #8
 800d552:	2b00      	cmp	r3, #0
 800d554:	d003      	beq.n	800d55e <f_open+0x356>
				mode |= FA_MODIFIED;
 800d556:	7ffb      	ldrb	r3, [r7, #31]
 800d558:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d55c:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d55e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d560:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d564:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800d566:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d56a:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d56c:	7ffb      	ldrb	r3, [r7, #31]
 800d56e:	2b01      	cmp	r3, #1
 800d570:	bf8c      	ite	hi
 800d572:	2301      	movhi	r3, #1
 800d574:	2300      	movls	r3, #0
 800d576:	b2db      	uxtb	r3, r3
 800d578:	461a      	mov	r2, r3
 800d57a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d57e:	4611      	mov	r1, r2
 800d580:	4618      	mov	r0, r3
 800d582:	f7fc fbaf 	bl	8009ce4 <inc_lock>
 800d586:	4602      	mov	r2, r0
 800d588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d58a:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d58e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d590:	2b00      	cmp	r3, #0
 800d592:	d102      	bne.n	800d59a <f_open+0x392>
 800d594:	2302      	movs	r3, #2
 800d596:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d59a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	f040 810e 	bne.w	800d7c0 <f_open+0x5b8>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800d5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	2b04      	cmp	r3, #4
 800d5aa:	d12d      	bne.n	800d608 <f_open+0x400>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800d5ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b0:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800d5b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d5b6:	4613      	mov	r3, r2
 800d5b8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d5bc:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800d5c0:	431a      	orrs	r2, r3
 800d5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c4:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800d5c6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ca:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800d5cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ce:	695b      	ldr	r3, [r3, #20]
 800d5d0:	3334      	adds	r3, #52	@ 0x34
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7fc f88c 	bl	80096f0 <ld_dword>
 800d5d8:	4602      	mov	r2, r0
 800d5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5dc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d5de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5e0:	695b      	ldr	r3, [r3, #20]
 800d5e2:	3338      	adds	r3, #56	@ 0x38
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f7fc f8a6 	bl	8009736 <ld_qword>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d5f0:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5f6:	695b      	ldr	r3, [r3, #20]
 800d5f8:	3321      	adds	r3, #33	@ 0x21
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	f003 0302 	and.w	r3, r3, #2
 800d600:	b2da      	uxtb	r2, r3
 800d602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d604:	71da      	strb	r2, [r3, #7]
 800d606:	e016      	b.n	800d636 <f_open+0x42e>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d608:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d60a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d60c:	4619      	mov	r1, r3
 800d60e:	4610      	mov	r0, r2
 800d610:	f7fd fcfd 	bl	800b00e <ld_clust>
 800d614:	4602      	mov	r2, r0
 800d616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d618:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d61a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d61c:	331c      	adds	r3, #28
 800d61e:	4618      	mov	r0, r3
 800d620:	f7fc f866 	bl	80096f0 <ld_dword>
 800d624:	4603      	mov	r3, r0
 800d626:	2200      	movs	r2, #0
 800d628:	613b      	str	r3, [r7, #16]
 800d62a:	617a      	str	r2, [r7, #20]
 800d62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d62e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d632:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d638:	2200      	movs	r2, #0
 800d63a:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d63c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d640:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d644:	88da      	ldrh	r2, [r3, #6]
 800d646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d648:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d64c:	7ffa      	ldrb	r2, [r7, #31]
 800d64e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 800d652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d654:	2200      	movs	r2, #0
 800d656:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800d65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d65c:	2200      	movs	r2, #0
 800d65e:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d660:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d662:	f04f 0200 	mov.w	r2, #0
 800d666:	f04f 0300 	mov.w	r3, #0
 800d66a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d670:	3354      	adds	r3, #84	@ 0x54
 800d672:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800d676:	2100      	movs	r1, #0
 800d678:	4618      	mov	r0, r3
 800d67a:	f7fc fa27 	bl	8009acc <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d67e:	7ffb      	ldrb	r3, [r7, #31]
 800d680:	f003 0320 	and.w	r3, r3, #32
 800d684:	2b00      	cmp	r3, #0
 800d686:	f000 809b 	beq.w	800d7c0 <f_open+0x5b8>
 800d68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d68c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d690:	4313      	orrs	r3, r2
 800d692:	f000 8095 	beq.w	800d7c0 <f_open+0x5b8>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d698:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d69c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d69e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d6a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6a4:	895b      	ldrh	r3, [r3, #10]
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6aa:	899b      	ldrh	r3, [r3, #12]
 800d6ac:	fb02 f303 	mul.w	r3, r2, r3
 800d6b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6b6:	689b      	ldr	r3, [r3, #8]
 800d6b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d6c2:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
 800d6c6:	e023      	b.n	800d710 <f_open+0x508>
					clst = get_fat(&fp->obj, clst);
 800d6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ca:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f7fc fcf8 	bl	800a0c4 <get_fat>
 800d6d4:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
					if (clst <= 1) res = FR_INT_ERR;
 800d6d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d6dc:	2b01      	cmp	r3, #1
 800d6de:	d802      	bhi.n	800d6e6 <f_open+0x4de>
 800d6e0:	2302      	movs	r3, #2
 800d6e2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d6e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d6ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ee:	d102      	bne.n	800d6f6 <f_open+0x4ee>
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d6f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	4698      	mov	r8, r3
 800d6fe:	4691      	mov	r9, r2
 800d700:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800d704:	ebb2 0a08 	subs.w	sl, r2, r8
 800d708:	eb63 0b09 	sbc.w	fp, r3, r9
 800d70c:	e9c7 ab26 	strd	sl, fp, [r7, #152]	@ 0x98
 800d710:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d714:	2b00      	cmp	r3, #0
 800d716:	d10a      	bne.n	800d72e <f_open+0x526>
 800d718:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d71c:	2200      	movs	r2, #0
 800d71e:	461c      	mov	r4, r3
 800d720:	4615      	mov	r5, r2
 800d722:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800d726:	4294      	cmp	r4, r2
 800d728:	eb75 0303 	sbcs.w	r3, r5, r3
 800d72c:	d3cc      	bcc.n	800d6c8 <f_open+0x4c0>
				}
				fp->clust = clst;
 800d72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d730:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800d734:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d736:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d140      	bne.n	800d7c0 <f_open+0x5b8>
 800d73e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d740:	899b      	ldrh	r3, [r3, #12]
 800d742:	b29b      	uxth	r3, r3
 800d744:	2200      	movs	r2, #0
 800d746:	60bb      	str	r3, [r7, #8]
 800d748:	60fa      	str	r2, [r7, #12]
 800d74a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d74e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d752:	f7f3 fa2b 	bl	8000bac <__aeabi_uldivmod>
 800d756:	4313      	orrs	r3, r2
 800d758:	d032      	beq.n	800d7c0 <f_open+0x5b8>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d75c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800d760:	4618      	mov	r0, r3
 800d762:	f7fc fc8f 	bl	800a084 <clust2sect>
 800d766:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
 800d76a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d103      	bne.n	800d77a <f_open+0x572>
						res = FR_INT_ERR;
 800d772:	2302      	movs	r3, #2
 800d774:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800d778:	e022      	b.n	800d7c0 <f_open+0x5b8>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d77a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d77c:	899b      	ldrh	r3, [r3, #12]
 800d77e:	b29b      	uxth	r3, r3
 800d780:	2200      	movs	r2, #0
 800d782:	603b      	str	r3, [r7, #0]
 800d784:	607a      	str	r2, [r7, #4]
 800d786:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d78a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d78e:	f7f3 fa0d 	bl	8000bac <__aeabi_uldivmod>
 800d792:	4602      	mov	r2, r0
 800d794:	460b      	mov	r3, r1
 800d796:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d79a:	441a      	add	r2, r3
 800d79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d79e:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7a2:	7858      	ldrb	r0, [r3, #1]
 800d7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a6:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800d7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	f7fb ff28 	bl	8009604 <disk_read>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d002      	beq.n	800d7c0 <f_open+0x5b8>
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				}
			}
#endif
		}

		FREE_NAMBUF();
 800d7c0:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800d7c4:	f001 fcb0 	bl	800f128 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d7c8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d002      	beq.n	800d7d6 <f_open+0x5ce>
 800d7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d7d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7d8:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 800d7dc:	4611      	mov	r1, r2
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7fc f9e7 	bl	8009bb2 <unlock_fs>
 800d7e4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	37a8      	adds	r7, #168	@ 0xa8
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d7f2 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d7f2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d7f6:	b098      	sub	sp, #96	@ 0x60
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d7fc:	62b9      	str	r1, [r7, #40]	@ 0x28
 800d7fe:	627a      	str	r2, [r7, #36]	@ 0x24
 800d800:	623b      	str	r3, [r7, #32]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d804:	64fb      	str	r3, [r7, #76]	@ 0x4c


	*br = 0;	/* Clear read byte counter */
 800d806:	6a3a      	ldr	r2, [r7, #32]
 800d808:	2300      	movs	r3, #0
 800d80a:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d80c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d80e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d812:	4619      	mov	r1, r3
 800d814:	4610      	mov	r0, r2
 800d816:	f7ff fc4b 	bl	800d0b0 <validate>
 800d81a:	4603      	mov	r3, r0
 800d81c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d820:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d824:	2b00      	cmp	r3, #0
 800d826:	d108      	bne.n	800d83a <f_read+0x48>
 800d828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d82a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d82e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d832:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d836:	2b00      	cmp	r3, #0
 800d838:	d009      	beq.n	800d84e <f_read+0x5c>
 800d83a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d83c:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800d840:	4611      	mov	r1, r2
 800d842:	4618      	mov	r0, r3
 800d844:	f7fc f9b5 	bl	8009bb2 <unlock_fs>
 800d848:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d84c:	e193      	b.n	800db76 <f_read+0x384>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d84e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d850:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d854:	f003 0301 	and.w	r3, r3, #1
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d106      	bne.n	800d86a <f_read+0x78>
 800d85c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d85e:	2107      	movs	r1, #7
 800d860:	4618      	mov	r0, r3
 800d862:	f7fc f9a6 	bl	8009bb2 <unlock_fs>
 800d866:	2307      	movs	r3, #7
 800d868:	e185      	b.n	800db76 <f_read+0x384>
	remain = fp->obj.objsize - fp->fptr;
 800d86a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d86c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800d870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d872:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d876:	ebb0 0802 	subs.w	r8, r0, r2
 800d87a:	eb61 0903 	sbc.w	r9, r1, r3
 800d87e:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d884:	2200      	movs	r2, #0
 800d886:	461c      	mov	r4, r3
 800d888:	4615      	mov	r5, r2
 800d88a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d88e:	42a2      	cmp	r2, r4
 800d890:	41ab      	sbcs	r3, r5
 800d892:	f080 8166 	bcs.w	800db62 <f_read+0x370>
 800d896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d898:	627b      	str	r3, [r7, #36]	@ 0x24

	for ( ;  btr;								/* Repeat until all data read */
 800d89a:	e162      	b.n	800db62 <f_read+0x370>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d89c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d89e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800d8a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8a4:	899b      	ldrh	r3, [r3, #12]
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	61bb      	str	r3, [r7, #24]
 800d8ac:	61fa      	str	r2, [r7, #28]
 800d8ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d8b2:	f7f3 f97b 	bl	8000bac <__aeabi_uldivmod>
 800d8b6:	4313      	orrs	r3, r2
 800d8b8:	f040 8107 	bne.w	800daca <f_read+0x2d8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d8bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8be:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800d8c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8c4:	899b      	ldrh	r3, [r3, #12]
 800d8c6:	b29b      	uxth	r3, r3
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	613b      	str	r3, [r7, #16]
 800d8cc:	617a      	str	r2, [r7, #20]
 800d8ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d8d2:	f7f3 f96b 	bl	8000bac <__aeabi_uldivmod>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	460b      	mov	r3, r1
 800d8da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8dc:	895b      	ldrh	r3, [r3, #10]
 800d8de:	3b01      	subs	r3, #1
 800d8e0:	4013      	ands	r3, r2
 800d8e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (csect == 0) {					/* On the cluster boundary? */
 800d8e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d13c      	bne.n	800d964 <f_read+0x172>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d8ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d8f0:	4313      	orrs	r3, r2
 800d8f2:	d103      	bne.n	800d8fc <f_read+0x10a>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d8f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8f6:	689b      	ldr	r3, [r3, #8]
 800d8f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d8fa:	e013      	b.n	800d924 <f_read+0x132>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d8fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d900:	2b00      	cmp	r3, #0
 800d902:	d007      	beq.n	800d914 <f_read+0x122>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d906:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d90a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d90c:	f7fd f95d 	bl	800abca <clmt_clust>
 800d910:	65b8      	str	r0, [r7, #88]	@ 0x58
 800d912:	e007      	b.n	800d924 <f_read+0x132>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d914:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d91a:	4619      	mov	r1, r3
 800d91c:	4610      	mov	r0, r2
 800d91e:	f7fc fbd1 	bl	800a0c4 <get_fat>
 800d922:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d924:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d926:	2b01      	cmp	r3, #1
 800d928:	d80a      	bhi.n	800d940 <f_read+0x14e>
 800d92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d92c:	2202      	movs	r2, #2
 800d92e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d934:	2102      	movs	r1, #2
 800d936:	4618      	mov	r0, r3
 800d938:	f7fc f93b 	bl	8009bb2 <unlock_fs>
 800d93c:	2302      	movs	r3, #2
 800d93e:	e11a      	b.n	800db76 <f_read+0x384>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d940:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d942:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d946:	d10a      	bne.n	800d95e <f_read+0x16c>
 800d948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d94a:	2201      	movs	r2, #1
 800d94c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d952:	2101      	movs	r1, #1
 800d954:	4618      	mov	r0, r3
 800d956:	f7fc f92c 	bl	8009bb2 <unlock_fs>
 800d95a:	2301      	movs	r3, #1
 800d95c:	e10b      	b.n	800db76 <f_read+0x384>
				fp->clust = clst;				/* Update current cluster */
 800d95e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d960:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d962:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d964:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d96a:	4619      	mov	r1, r3
 800d96c:	4610      	mov	r0, r2
 800d96e:	f7fc fb89 	bl	800a084 <clust2sect>
 800d972:	63b8      	str	r0, [r7, #56]	@ 0x38
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d976:	2b00      	cmp	r3, #0
 800d978:	d10a      	bne.n	800d990 <f_read+0x19e>
 800d97a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d97c:	2202      	movs	r2, #2
 800d97e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d984:	2102      	movs	r1, #2
 800d986:	4618      	mov	r0, r3
 800d988:	f7fc f913 	bl	8009bb2 <unlock_fs>
 800d98c:	2302      	movs	r3, #2
 800d98e:	e0f2      	b.n	800db76 <f_read+0x384>
			sect += csect;
 800d990:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d994:	4413      	add	r3, r2
 800d996:	63bb      	str	r3, [r7, #56]	@ 0x38
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d99a:	899b      	ldrh	r3, [r3, #12]
 800d99c:	461a      	mov	r2, r3
 800d99e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9a4:	653b      	str	r3, [r7, #80]	@ 0x50
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d9a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d048      	beq.n	800da3e <f_read+0x24c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d9ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d9ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9b0:	4413      	add	r3, r2
 800d9b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d9b4:	8952      	ldrh	r2, [r2, #10]
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d905      	bls.n	800d9c6 <f_read+0x1d4>
					cc = fs->csize - csect;
 800d9ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9bc:	895b      	ldrh	r3, [r3, #10]
 800d9be:	461a      	mov	r2, r3
 800d9c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9c2:	1ad3      	subs	r3, r2, r3
 800d9c4:	653b      	str	r3, [r7, #80]	@ 0x50
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d9c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9c8:	7858      	ldrb	r0, [r3, #1]
 800d9ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d9ce:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d9d0:	f7fb fe18 	bl	8009604 <disk_read>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d00a      	beq.n	800d9f0 <f_read+0x1fe>
 800d9da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9dc:	2201      	movs	r2, #1
 800d9de:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d9e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9e4:	2101      	movs	r1, #1
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7fc f8e3 	bl	8009bb2 <unlock_fs>
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	e0c2      	b.n	800db76 <f_read+0x384>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d9f6:	b25b      	sxtb	r3, r3
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	da18      	bge.n	800da2e <f_read+0x23c>
 800d9fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da02:	1ad3      	subs	r3, r2, r3
 800da04:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800da06:	429a      	cmp	r2, r3
 800da08:	d911      	bls.n	800da2e <f_read+0x23c>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800da0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da10:	1ad3      	subs	r3, r2, r3
 800da12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800da14:	8992      	ldrh	r2, [r2, #12]
 800da16:	fb02 f303 	mul.w	r3, r2, r3
 800da1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800da1c:	18d0      	adds	r0, r2, r3
 800da1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da20:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800da24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da26:	899b      	ldrh	r3, [r3, #12]
 800da28:	461a      	mov	r2, r3
 800da2a:	f7fc f82e 	bl	8009a8a <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800da2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da30:	899b      	ldrh	r3, [r3, #12]
 800da32:	461a      	mov	r2, r3
 800da34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da36:	fb02 f303 	mul.w	r3, r2, r3
 800da3a:	657b      	str	r3, [r7, #84]	@ 0x54
				continue;
 800da3c:	e071      	b.n	800db22 <f_read+0x330>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800da3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da44:	429a      	cmp	r2, r3
 800da46:	d03d      	beq.n	800dac4 <f_read+0x2d2>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800da48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800da4e:	b25b      	sxtb	r3, r3
 800da50:	2b00      	cmp	r3, #0
 800da52:	da20      	bge.n	800da96 <f_read+0x2a4>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800da54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da56:	7858      	ldrb	r0, [r3, #1]
 800da58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da5a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800da5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da62:	2301      	movs	r3, #1
 800da64:	f7fb fdee 	bl	8009644 <disk_write>
 800da68:	4603      	mov	r3, r0
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d00a      	beq.n	800da84 <f_read+0x292>
 800da6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da70:	2201      	movs	r2, #1
 800da72:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800da76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da78:	2101      	movs	r1, #1
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7fc f899 	bl	8009bb2 <unlock_fs>
 800da80:	2301      	movs	r3, #1
 800da82:	e078      	b.n	800db76 <f_read+0x384>
					fp->flag &= (BYTE)~FA_DIRTY;
 800da84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800da8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da8e:	b2da      	uxtb	r2, r3
 800da90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da92:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800da96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da98:	7858      	ldrb	r0, [r3, #1]
 800da9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da9c:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800daa0:	2301      	movs	r3, #1
 800daa2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800daa4:	f7fb fdae 	bl	8009604 <disk_read>
 800daa8:	4603      	mov	r3, r0
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d00a      	beq.n	800dac4 <f_read+0x2d2>
 800daae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dab0:	2201      	movs	r2, #1
 800dab2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dab8:	2101      	movs	r1, #1
 800daba:	4618      	mov	r0, r3
 800dabc:	f7fc f879 	bl	8009bb2 <unlock_fs>
 800dac0:	2301      	movs	r3, #1
 800dac2:	e058      	b.n	800db76 <f_read+0x384>
			}
#endif
			fp->sect = sect;
 800dac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dac6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dac8:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800daca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dacc:	899b      	ldrh	r3, [r3, #12]
 800dace:	4618      	mov	r0, r3
 800dad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dad2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800dad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dad8:	899b      	ldrh	r3, [r3, #12]
 800dada:	fbb2 f1f3 	udiv	r1, r2, r3
 800dade:	fb01 f303 	mul.w	r3, r1, r3
 800dae2:	1ad3      	subs	r3, r2, r3
 800dae4:	1ac3      	subs	r3, r0, r3
 800dae6:	657b      	str	r3, [r7, #84]	@ 0x54
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800dae8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800daea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daec:	429a      	cmp	r2, r3
 800daee:	d901      	bls.n	800daf4 <f_read+0x302>
 800daf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daf2:	657b      	str	r3, [r7, #84]	@ 0x54
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800daf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daf6:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 800dafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dafc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800db00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db02:	899b      	ldrh	r3, [r3, #12]
 800db04:	b29b      	uxth	r3, r3
 800db06:	2200      	movs	r2, #0
 800db08:	60bb      	str	r3, [r7, #8]
 800db0a:	60fa      	str	r2, [r7, #12]
 800db0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800db10:	f7f3 f84c 	bl	8000bac <__aeabi_uldivmod>
 800db14:	4613      	mov	r3, r2
 800db16:	4423      	add	r3, r4
 800db18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800db1a:	4619      	mov	r1, r3
 800db1c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800db1e:	f7fb ffb4 	bl	8009a8a <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800db22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800db24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db26:	4413      	add	r3, r2
 800db28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800db2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db2c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800db30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800db32:	2000      	movs	r0, #0
 800db34:	468a      	mov	sl, r1
 800db36:	4683      	mov	fp, r0
 800db38:	eb12 010a 	adds.w	r1, r2, sl
 800db3c:	6039      	str	r1, [r7, #0]
 800db3e:	eb43 030b 	adc.w	r3, r3, fp
 800db42:	607b      	str	r3, [r7, #4]
 800db44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db46:	e9d7 1200 	ldrd	r1, r2, [r7]
 800db4a:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 800db4e:	6a3b      	ldr	r3, [r7, #32]
 800db50:	681a      	ldr	r2, [r3, #0]
 800db52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db54:	441a      	add	r2, r3
 800db56:	6a3b      	ldr	r3, [r7, #32]
 800db58:	601a      	str	r2, [r3, #0]
 800db5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db5e:	1ad3      	subs	r3, r2, r3
 800db60:	627b      	str	r3, [r7, #36]	@ 0x24
	for ( ;  btr;								/* Repeat until all data read */
 800db62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db64:	2b00      	cmp	r3, #0
 800db66:	f47f ae99 	bne.w	800d89c <f_read+0xaa>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800db6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db6c:	2100      	movs	r1, #0
 800db6e:	4618      	mov	r0, r3
 800db70:	f7fc f81f 	bl	8009bb2 <unlock_fs>
 800db74:	2300      	movs	r3, #0
}
 800db76:	4618      	mov	r0, r3
 800db78:	3760      	adds	r7, #96	@ 0x60
 800db7a:	46bd      	mov	sp, r7
 800db7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800db80 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800db80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db84:	b091      	sub	sp, #68	@ 0x44
 800db86:	af00      	add	r7, sp, #0
 800db88:	61f8      	str	r0, [r7, #28]
 800db8a:	61b9      	str	r1, [r7, #24]
 800db8c:	617a      	str	r2, [r7, #20]
 800db8e:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800db90:	69bb      	ldr	r3, [r7, #24]
 800db92:	62fb      	str	r3, [r7, #44]	@ 0x2c


	*bw = 0;	/* Clear write byte counter */
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	2200      	movs	r2, #0
 800db98:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800db9a:	69fb      	ldr	r3, [r7, #28]
 800db9c:	f107 0220 	add.w	r2, r7, #32
 800dba0:	4611      	mov	r1, r2
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7ff fa84 	bl	800d0b0 <validate>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800dbae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d108      	bne.n	800dbc8 <f_write+0x48>
 800dbb6:	69fb      	ldr	r3, [r7, #28]
 800dbb8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800dbbc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800dbc0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d009      	beq.n	800dbdc <f_write+0x5c>
 800dbc8:	6a3b      	ldr	r3, [r7, #32]
 800dbca:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800dbce:	4611      	mov	r1, r2
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f7fb ffee 	bl	8009bb2 <unlock_fs>
 800dbd6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dbda:	e1d2      	b.n	800df82 <f_write+0x402>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800dbdc:	69fb      	ldr	r3, [r7, #28]
 800dbde:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dbe2:	f003 0302 	and.w	r3, r3, #2
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d106      	bne.n	800dbf8 <f_write+0x78>
 800dbea:	6a3b      	ldr	r3, [r7, #32]
 800dbec:	2107      	movs	r1, #7
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7fb ffdf 	bl	8009bb2 <unlock_fs>
 800dbf4:	2307      	movs	r3, #7
 800dbf6:	e1c4      	b.n	800df82 <f_write+0x402>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800dbf8:	6a3b      	ldr	r3, [r7, #32]
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	2b04      	cmp	r3, #4
 800dbfe:	f000 81ab 	beq.w	800df58 <f_write+0x3d8>
 800dc02:	69fb      	ldr	r3, [r7, #28]
 800dc04:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	18d1      	adds	r1, r2, r3
 800dc0c:	69fb      	ldr	r3, [r7, #28]
 800dc0e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800dc12:	4613      	mov	r3, r2
 800dc14:	4299      	cmp	r1, r3
 800dc16:	f080 819f 	bcs.w	800df58 <f_write+0x3d8>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800dc1a:	69fb      	ldr	r3, [r7, #28]
 800dc1c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800dc20:	4613      	mov	r3, r2
 800dc22:	43db      	mvns	r3, r3
 800dc24:	617b      	str	r3, [r7, #20]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800dc26:	e197      	b.n	800df58 <f_write+0x3d8>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800dc28:	69fb      	ldr	r3, [r7, #28]
 800dc2a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800dc2e:	6a3b      	ldr	r3, [r7, #32]
 800dc30:	899b      	ldrh	r3, [r3, #12]
 800dc32:	b29b      	uxth	r3, r3
 800dc34:	2200      	movs	r2, #0
 800dc36:	461d      	mov	r5, r3
 800dc38:	4616      	mov	r6, r2
 800dc3a:	462a      	mov	r2, r5
 800dc3c:	4633      	mov	r3, r6
 800dc3e:	f7f2 ffb5 	bl	8000bac <__aeabi_uldivmod>
 800dc42:	4313      	orrs	r3, r2
 800dc44:	f040 8128 	bne.w	800de98 <f_write+0x318>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800dc48:	69fb      	ldr	r3, [r7, #28]
 800dc4a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800dc4e:	6a3b      	ldr	r3, [r7, #32]
 800dc50:	899b      	ldrh	r3, [r3, #12]
 800dc52:	b29b      	uxth	r3, r3
 800dc54:	2200      	movs	r2, #0
 800dc56:	60bb      	str	r3, [r7, #8]
 800dc58:	60fa      	str	r2, [r7, #12]
 800dc5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dc5e:	f7f2 ffa5 	bl	8000bac <__aeabi_uldivmod>
 800dc62:	4602      	mov	r2, r0
 800dc64:	460b      	mov	r3, r1
 800dc66:	6a3b      	ldr	r3, [r7, #32]
 800dc68:	895b      	ldrh	r3, [r3, #10]
 800dc6a:	3b01      	subs	r3, #1
 800dc6c:	4013      	ands	r3, r2
 800dc6e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 800dc70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d150      	bne.n	800dd18 <f_write+0x198>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800dc76:	69fb      	ldr	r3, [r7, #28]
 800dc78:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800dc7c:	4313      	orrs	r3, r2
 800dc7e:	d10c      	bne.n	800dc9a <f_write+0x11a>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800dc80:	69fb      	ldr	r3, [r7, #28]
 800dc82:	689b      	ldr	r3, [r3, #8]
 800dc84:	63bb      	str	r3, [r7, #56]	@ 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 800dc86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d11a      	bne.n	800dcc2 <f_write+0x142>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800dc8c:	69fb      	ldr	r3, [r7, #28]
 800dc8e:	2100      	movs	r1, #0
 800dc90:	4618      	mov	r0, r3
 800dc92:	f7fc fe99 	bl	800a9c8 <create_chain>
 800dc96:	63b8      	str	r0, [r7, #56]	@ 0x38
 800dc98:	e013      	b.n	800dcc2 <f_write+0x142>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dc9a:	69fb      	ldr	r3, [r7, #28]
 800dc9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d007      	beq.n	800dcb2 <f_write+0x132>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dca2:	69fb      	ldr	r3, [r7, #28]
 800dca4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800dca8:	69f8      	ldr	r0, [r7, #28]
 800dcaa:	f7fc ff8e 	bl	800abca <clmt_clust>
 800dcae:	63b8      	str	r0, [r7, #56]	@ 0x38
 800dcb0:	e007      	b.n	800dcc2 <f_write+0x142>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800dcb2:	69fa      	ldr	r2, [r7, #28]
 800dcb4:	69fb      	ldr	r3, [r7, #28]
 800dcb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcb8:	4619      	mov	r1, r3
 800dcba:	4610      	mov	r0, r2
 800dcbc:	f7fc fe84 	bl	800a9c8 <create_chain>
 800dcc0:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dcc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	f000 814c 	beq.w	800df62 <f_write+0x3e2>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dcca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	d10a      	bne.n	800dce6 <f_write+0x166>
 800dcd0:	69fb      	ldr	r3, [r7, #28]
 800dcd2:	2202      	movs	r2, #2
 800dcd4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dcd8:	6a3b      	ldr	r3, [r7, #32]
 800dcda:	2102      	movs	r1, #2
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f7fb ff68 	bl	8009bb2 <unlock_fs>
 800dce2:	2302      	movs	r3, #2
 800dce4:	e14d      	b.n	800df82 <f_write+0x402>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcec:	d10a      	bne.n	800dd04 <f_write+0x184>
 800dcee:	69fb      	ldr	r3, [r7, #28]
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dcf6:	6a3b      	ldr	r3, [r7, #32]
 800dcf8:	2101      	movs	r1, #1
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f7fb ff59 	bl	8009bb2 <unlock_fs>
 800dd00:	2301      	movs	r3, #1
 800dd02:	e13e      	b.n	800df82 <f_write+0x402>
				fp->clust = clst;			/* Update current cluster */
 800dd04:	69fb      	ldr	r3, [r7, #28]
 800dd06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dd08:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800dd0a:	69fb      	ldr	r3, [r7, #28]
 800dd0c:	689b      	ldr	r3, [r3, #8]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d102      	bne.n	800dd18 <f_write+0x198>
 800dd12:	69fb      	ldr	r3, [r7, #28]
 800dd14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dd16:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800dd18:	69fb      	ldr	r3, [r7, #28]
 800dd1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dd1e:	b25b      	sxtb	r3, r3
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	da20      	bge.n	800dd66 <f_write+0x1e6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd24:	6a3b      	ldr	r3, [r7, #32]
 800dd26:	7858      	ldrb	r0, [r3, #1]
 800dd28:	69fb      	ldr	r3, [r7, #28]
 800dd2a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800dd2e:	69fb      	ldr	r3, [r7, #28]
 800dd30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dd32:	2301      	movs	r3, #1
 800dd34:	f7fb fc86 	bl	8009644 <disk_write>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d00a      	beq.n	800dd54 <f_write+0x1d4>
 800dd3e:	69fb      	ldr	r3, [r7, #28]
 800dd40:	2201      	movs	r2, #1
 800dd42:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dd46:	6a3b      	ldr	r3, [r7, #32]
 800dd48:	2101      	movs	r1, #1
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f7fb ff31 	bl	8009bb2 <unlock_fs>
 800dd50:	2301      	movs	r3, #1
 800dd52:	e116      	b.n	800df82 <f_write+0x402>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dd54:	69fb      	ldr	r3, [r7, #28]
 800dd56:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dd5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd5e:	b2da      	uxtb	r2, r3
 800dd60:	69fb      	ldr	r3, [r7, #28]
 800dd62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dd66:	6a3a      	ldr	r2, [r7, #32]
 800dd68:	69fb      	ldr	r3, [r7, #28]
 800dd6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	4610      	mov	r0, r2
 800dd70:	f7fc f988 	bl	800a084 <clust2sect>
 800dd74:	6278      	str	r0, [r7, #36]	@ 0x24
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d10a      	bne.n	800dd92 <f_write+0x212>
 800dd7c:	69fb      	ldr	r3, [r7, #28]
 800dd7e:	2202      	movs	r2, #2
 800dd80:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dd84:	6a3b      	ldr	r3, [r7, #32]
 800dd86:	2102      	movs	r1, #2
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7fb ff12 	bl	8009bb2 <unlock_fs>
 800dd8e:	2302      	movs	r3, #2
 800dd90:	e0f7      	b.n	800df82 <f_write+0x402>
			sect += csect;
 800dd92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd96:	4413      	add	r3, r2
 800dd98:	627b      	str	r3, [r7, #36]	@ 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800dd9a:	6a3b      	ldr	r3, [r7, #32]
 800dd9c:	899b      	ldrh	r3, [r3, #12]
 800dd9e:	461a      	mov	r2, r3
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	fbb3 f3f2 	udiv	r3, r3, r2
 800dda6:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cc) {						/* Write maximum contiguous sectors directly */
 800dda8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d04b      	beq.n	800de46 <f_write+0x2c6>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ddae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ddb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddb2:	4413      	add	r3, r2
 800ddb4:	6a3a      	ldr	r2, [r7, #32]
 800ddb6:	8952      	ldrh	r2, [r2, #10]
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d905      	bls.n	800ddc8 <f_write+0x248>
					cc = fs->csize - csect;
 800ddbc:	6a3b      	ldr	r3, [r7, #32]
 800ddbe:	895b      	ldrh	r3, [r3, #10]
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddc4:	1ad3      	subs	r3, r2, r3
 800ddc6:	633b      	str	r3, [r7, #48]	@ 0x30
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ddc8:	6a3b      	ldr	r3, [r7, #32]
 800ddca:	7858      	ldrb	r0, [r3, #1]
 800ddcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ddd2:	f7fb fc37 	bl	8009644 <disk_write>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d00a      	beq.n	800ddf2 <f_write+0x272>
 800dddc:	69fb      	ldr	r3, [r7, #28]
 800ddde:	2201      	movs	r2, #1
 800dde0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dde4:	6a3b      	ldr	r3, [r7, #32]
 800dde6:	2101      	movs	r1, #1
 800dde8:	4618      	mov	r0, r3
 800ddea:	f7fb fee2 	bl	8009bb2 <unlock_fs>
 800ddee:	2301      	movs	r3, #1
 800ddf0:	e0c7      	b.n	800df82 <f_write+0x402>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ddf2:	69fb      	ldr	r3, [r7, #28]
 800ddf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ddf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddf8:	1ad3      	subs	r3, r2, r3
 800ddfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d91a      	bls.n	800de36 <f_write+0x2b6>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800de06:	69fb      	ldr	r3, [r7, #28]
 800de08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800de0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de0c:	1ad3      	subs	r3, r2, r3
 800de0e:	6a3a      	ldr	r2, [r7, #32]
 800de10:	8992      	ldrh	r2, [r2, #12]
 800de12:	fb02 f303 	mul.w	r3, r2, r3
 800de16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de18:	18d1      	adds	r1, r2, r3
 800de1a:	6a3b      	ldr	r3, [r7, #32]
 800de1c:	899b      	ldrh	r3, [r3, #12]
 800de1e:	461a      	mov	r2, r3
 800de20:	f7fb fe33 	bl	8009a8a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800de2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de2e:	b2da      	uxtb	r2, r3
 800de30:	69fb      	ldr	r3, [r7, #28]
 800de32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800de36:	6a3b      	ldr	r3, [r7, #32]
 800de38:	899b      	ldrh	r3, [r3, #12]
 800de3a:	461a      	mov	r2, r3
 800de3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de3e:	fb02 f303 	mul.w	r3, r2, r3
 800de42:	637b      	str	r3, [r7, #52]	@ 0x34
				continue;
 800de44:	e05d      	b.n	800df02 <f_write+0x382>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800de46:	69fb      	ldr	r3, [r7, #28]
 800de48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d020      	beq.n	800de92 <f_write+0x312>
				fp->fptr < fp->obj.objsize &&
 800de50:	69fb      	ldr	r3, [r7, #28]
 800de52:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800de56:	69fb      	ldr	r3, [r7, #28]
 800de58:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800de5c:	4290      	cmp	r0, r2
 800de5e:	eb71 0303 	sbcs.w	r3, r1, r3
 800de62:	d216      	bcs.n	800de92 <f_write+0x312>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800de64:	6a3b      	ldr	r3, [r7, #32]
 800de66:	7858      	ldrb	r0, [r3, #1]
 800de68:	69fb      	ldr	r3, [r7, #28]
 800de6a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800de6e:	2301      	movs	r3, #1
 800de70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de72:	f7fb fbc7 	bl	8009604 <disk_read>
 800de76:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d00a      	beq.n	800de92 <f_write+0x312>
					ABORT(fs, FR_DISK_ERR);
 800de7c:	69fb      	ldr	r3, [r7, #28]
 800de7e:	2201      	movs	r2, #1
 800de80:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800de84:	6a3b      	ldr	r3, [r7, #32]
 800de86:	2101      	movs	r1, #1
 800de88:	4618      	mov	r0, r3
 800de8a:	f7fb fe92 	bl	8009bb2 <unlock_fs>
 800de8e:	2301      	movs	r3, #1
 800de90:	e077      	b.n	800df82 <f_write+0x402>
			}
#endif
			fp->sect = sect;
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de96:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800de98:	6a3b      	ldr	r3, [r7, #32]
 800de9a:	899b      	ldrh	r3, [r3, #12]
 800de9c:	4618      	mov	r0, r3
 800de9e:	69fb      	ldr	r3, [r7, #28]
 800dea0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800dea4:	6a3b      	ldr	r3, [r7, #32]
 800dea6:	899b      	ldrh	r3, [r3, #12]
 800dea8:	fbb2 f1f3 	udiv	r1, r2, r3
 800deac:	fb01 f303 	mul.w	r3, r1, r3
 800deb0:	1ad3      	subs	r3, r2, r3
 800deb2:	1ac3      	subs	r3, r0, r3
 800deb4:	637b      	str	r3, [r7, #52]	@ 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800deb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	429a      	cmp	r2, r3
 800debc:	d901      	bls.n	800dec2 <f_write+0x342>
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	637b      	str	r3, [r7, #52]	@ 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800dec2:	69fb      	ldr	r3, [r7, #28]
 800dec4:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 800dec8:	69fb      	ldr	r3, [r7, #28]
 800deca:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800dece:	6a3b      	ldr	r3, [r7, #32]
 800ded0:	899b      	ldrh	r3, [r3, #12]
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	2200      	movs	r2, #0
 800ded6:	603b      	str	r3, [r7, #0]
 800ded8:	607a      	str	r2, [r7, #4]
 800deda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dede:	f7f2 fe65 	bl	8000bac <__aeabi_uldivmod>
 800dee2:	4613      	mov	r3, r2
 800dee4:	4423      	add	r3, r4
 800dee6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dee8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800deea:	4618      	mov	r0, r3
 800deec:	f7fb fdcd 	bl	8009a8a <mem_cpy>
		fp->flag |= FA_DIRTY;
 800def0:	69fb      	ldr	r3, [r7, #28]
 800def2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800def6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800defa:	b2da      	uxtb	r2, r3
 800defc:	69fb      	ldr	r3, [r7, #28]
 800defe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800df02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df06:	4413      	add	r3, r2
 800df08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800df0a:	69fb      	ldr	r3, [r7, #28]
 800df0c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800df10:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800df12:	2000      	movs	r0, #0
 800df14:	4688      	mov	r8, r1
 800df16:	4681      	mov	r9, r0
 800df18:	eb12 0a08 	adds.w	sl, r2, r8
 800df1c:	eb43 0b09 	adc.w	fp, r3, r9
 800df20:	69fb      	ldr	r3, [r7, #28]
 800df22:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800df26:	69fb      	ldr	r3, [r7, #28]
 800df28:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800df2c:	69fb      	ldr	r3, [r7, #28]
 800df2e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800df32:	4290      	cmp	r0, r2
 800df34:	eb71 0403 	sbcs.w	r4, r1, r3
 800df38:	d201      	bcs.n	800df3e <f_write+0x3be>
 800df3a:	4610      	mov	r0, r2
 800df3c:	4619      	mov	r1, r3
 800df3e:	69fb      	ldr	r3, [r7, #28]
 800df40:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	681a      	ldr	r2, [r3, #0]
 800df48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df4a:	441a      	add	r2, r3
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	601a      	str	r2, [r3, #0]
 800df50:	697a      	ldr	r2, [r7, #20]
 800df52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df54:	1ad3      	subs	r3, r2, r3
 800df56:	617b      	str	r3, [r7, #20]
	for ( ;  btw;							/* Repeat until all data written */
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	f47f ae64 	bne.w	800dc28 <f_write+0xa8>
 800df60:	e000      	b.n	800df64 <f_write+0x3e4>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800df62:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800df64:	69fb      	ldr	r3, [r7, #28]
 800df66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800df6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df6e:	b2da      	uxtb	r2, r3
 800df70:	69fb      	ldr	r3, [r7, #28]
 800df72:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 800df76:	6a3b      	ldr	r3, [r7, #32]
 800df78:	2100      	movs	r1, #0
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7fb fe19 	bl	8009bb2 <unlock_fs>
 800df80:	2300      	movs	r3, #0
}
 800df82:	4618      	mov	r0, r3
 800df84:	3744      	adds	r7, #68	@ 0x44
 800df86:	46bd      	mov	sp, r7
 800df88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800df8c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b09c      	sub	sp, #112	@ 0x70
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800df9a:	4611      	mov	r1, r2
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7ff f887 	bl	800d0b0 <validate>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (res == FR_OK) {
 800dfa8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	f040 8123 	bne.w	800e1f8 <f_sync+0x26c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dfb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	f000 811b 	beq.w	800e1f8 <f_sync+0x26c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dfc8:	b25b      	sxtb	r3, r3
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	da1c      	bge.n	800e008 <f_sync+0x7c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800dfce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfd0:	7858      	ldrb	r0, [r3, #1]
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dfdc:	2301      	movs	r3, #1
 800dfde:	f7fb fb31 	bl	8009644 <disk_write>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d006      	beq.n	800dff6 <f_sync+0x6a>
 800dfe8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfea:	2101      	movs	r1, #1
 800dfec:	4618      	mov	r0, r3
 800dfee:	f7fb fde0 	bl	8009bb2 <unlock_fs>
 800dff2:	2301      	movs	r3, #1
 800dff4:	e109      	b.n	800e20a <f_sync+0x27e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dffc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e000:	b2da      	uxtb	r2, r3
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e008:	f7fb fa5c 	bl	80094c4 <get_fattime>
 800e00c:	66b8      	str	r0, [r7, #104]	@ 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800e00e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e010:	781b      	ldrb	r3, [r3, #0]
 800e012:	2b04      	cmp	r3, #4
 800e014:	f040 80a5 	bne.w	800e162 <f_sync+0x1d6>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7fc fbc0 	bl	800a7a0 <fill_first_frag>
 800e020:	4603      	mov	r3, r0
 800e022:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 800e026:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d10a      	bne.n	800e044 <f_sync+0xb8>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e034:	f04f 32ff 	mov.w	r2, #4294967295
 800e038:	4619      	mov	r1, r3
 800e03a:	f7fc fbe0 	bl	800a7fe <fill_last_frag>
 800e03e:	4603      	mov	r3, r0
 800e040:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				}
				if (res == FR_OK) {
 800e044:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800e048:	2b00      	cmp	r3, #0
 800e04a:	f040 80d5 	bne.w	800e1f8 <f_sync+0x26c>
					INIT_NAMBUF(fs);
 800e04e:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800e052:	f001 f85d 	bl	800f110 <ff_memalloc>
 800e056:	6638      	str	r0, [r7, #96]	@ 0x60
 800e058:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d106      	bne.n	800e06c <f_sync+0xe0>
 800e05e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e060:	2111      	movs	r1, #17
 800e062:	4618      	mov	r0, r3
 800e064:	f7fb fda5 	bl	8009bb2 <unlock_fs>
 800e068:	2311      	movs	r3, #17
 800e06a:	e0ce      	b.n	800e20a <f_sync+0x27e>
 800e06c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e06e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e070:	611a      	str	r2, [r3, #16]
 800e072:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e074:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e076:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800e07a:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800e07c:	687a      	ldr	r2, [r7, #4]
 800e07e:	f107 0308 	add.w	r3, r7, #8
 800e082:	4611      	mov	r1, r2
 800e084:	4618      	mov	r0, r3
 800e086:	f7fd fb93 	bl	800b7b0 <load_obj_dir>
 800e08a:	4603      	mov	r3, r0
 800e08c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					if (res == FR_OK) {
 800e090:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800e094:	2b00      	cmp	r3, #0
 800e096:	d160      	bne.n	800e15a <f_sync+0x1ce>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800e098:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e09a:	695b      	ldr	r3, [r3, #20]
 800e09c:	3304      	adds	r3, #4
 800e09e:	781a      	ldrb	r2, [r3, #0]
 800e0a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e0a2:	695b      	ldr	r3, [r3, #20]
 800e0a4:	3304      	adds	r3, #4
 800e0a6:	f042 0220 	orr.w	r2, r2, #32
 800e0aa:	b2d2      	uxtb	r2, r2
 800e0ac:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	79da      	ldrb	r2, [r3, #7]
 800e0b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e0b4:	695b      	ldr	r3, [r3, #20]
 800e0b6:	3321      	adds	r3, #33	@ 0x21
 800e0b8:	f042 0201 	orr.w	r2, r2, #1
 800e0bc:	b2d2      	uxtb	r2, r2
 800e0be:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800e0c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e0c2:	695b      	ldr	r3, [r3, #20]
 800e0c4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	689b      	ldr	r3, [r3, #8]
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	4610      	mov	r0, r2
 800e0d0:	f7fb fc27 	bl	8009922 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800e0d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e0d6:	695b      	ldr	r3, [r3, #20]
 800e0d8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e0e2:	4608      	mov	r0, r1
 800e0e4:	f7fb fc49 	bl	800997a <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800e0e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e0ea:	695b      	ldr	r3, [r3, #20]
 800e0ec:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e0f6:	4608      	mov	r0, r1
 800e0f8:	f7fb fc3f 	bl	800997a <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800e0fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e0fe:	695b      	ldr	r3, [r3, #20]
 800e100:	330c      	adds	r3, #12
 800e102:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e104:	4618      	mov	r0, r3
 800e106:	f7fb fc0c 	bl	8009922 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800e10a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e10c:	695b      	ldr	r3, [r3, #20]
 800e10e:	3315      	adds	r3, #21
 800e110:	2200      	movs	r2, #0
 800e112:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800e114:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e116:	695b      	ldr	r3, [r3, #20]
 800e118:	3310      	adds	r3, #16
 800e11a:	2100      	movs	r1, #0
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7fb fc00 	bl	8009922 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800e122:	f107 0308 	add.w	r3, r7, #8
 800e126:	4618      	mov	r0, r3
 800e128:	f7fd fb78 	bl	800b81c <store_xdir>
 800e12c:	4603      	mov	r3, r0
 800e12e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
						if (res == FR_OK) {
 800e132:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800e136:	2b00      	cmp	r3, #0
 800e138:	d10f      	bne.n	800e15a <f_sync+0x1ce>
							res = sync_fs(fs);
 800e13a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e13c:	4618      	mov	r0, r3
 800e13e:	f7fb ff31 	bl	8009fa4 <sync_fs>
 800e142:	4603      	mov	r3, r0
 800e144:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e14e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e152:	b2da      	uxtb	r2, r3
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
						}
					}
					FREE_NAMBUF();
 800e15a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800e15c:	f000 ffe4 	bl	800f128 <ff_memfree>
 800e160:	e04a      	b.n	800e1f8 <f_sync+0x26c>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e162:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e168:	4619      	mov	r1, r3
 800e16a:	4610      	mov	r0, r2
 800e16c:	f7fb feec 	bl	8009f48 <move_window>
 800e170:	4603      	mov	r3, r0
 800e172:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 800e176:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d13c      	bne.n	800e1f8 <f_sync+0x26c>
					dir = fp->dir_ptr;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e182:	667b      	str	r3, [r7, #100]	@ 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e184:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e186:	330b      	adds	r3, #11
 800e188:	781a      	ldrb	r2, [r3, #0]
 800e18a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e18c:	330b      	adds	r3, #11
 800e18e:	f042 0220 	orr.w	r2, r2, #32
 800e192:	b2d2      	uxtb	r2, r2
 800e194:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6818      	ldr	r0, [r3, #0]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	689b      	ldr	r3, [r3, #8]
 800e19e:	461a      	mov	r2, r3
 800e1a0:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800e1a2:	f7fc ff53 	bl	800b04c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e1a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e1a8:	f103 001c 	add.w	r0, r3, #28
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e1b2:	4613      	mov	r3, r2
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	f7fb fbb4 	bl	8009922 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e1ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e1bc:	3316      	adds	r3, #22
 800e1be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f7fb fbae 	bl	8009922 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e1c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e1c8:	3312      	adds	r3, #18
 800e1ca:	2100      	movs	r1, #0
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f7fb fb8d 	bl	80098ec <st_word>
					fs->wflag = 1;
 800e1d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e1d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7fb fee2 	bl	8009fa4 <sync_fs>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e1ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e1f0:	b2da      	uxtb	r2, r3
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e1f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e1fa:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800e1fe:	4611      	mov	r1, r2
 800e200:	4618      	mov	r0, r3
 800e202:	f7fb fcd6 	bl	8009bb2 <unlock_fs>
 800e206:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	3770      	adds	r7, #112	@ 0x70
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}

0800e212 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e212:	b580      	push	{r7, lr}
 800e214:	b084      	sub	sp, #16
 800e216:	af00      	add	r7, sp, #0
 800e218:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f7ff feb6 	bl	800df8c <f_sync>
 800e220:	4603      	mov	r3, r0
 800e222:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e224:	7bfb      	ldrb	r3, [r7, #15]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d11d      	bne.n	800e266 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f107 0208 	add.w	r2, r7, #8
 800e230:	4611      	mov	r1, r2
 800e232:	4618      	mov	r0, r3
 800e234:	f7fe ff3c 	bl	800d0b0 <validate>
 800e238:	4603      	mov	r3, r0
 800e23a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e23c:	7bfb      	ldrb	r3, [r7, #15]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d111      	bne.n	800e266 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e246:	4618      	mov	r0, r3
 800e248:	f7fb fdda 	bl	8009e00 <dec_lock>
 800e24c:	4603      	mov	r3, r0
 800e24e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e250:	7bfb      	ldrb	r3, [r7, #15]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d102      	bne.n	800e25c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2200      	movs	r2, #0
 800e25a:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	2100      	movs	r1, #0
 800e260:	4618      	mov	r0, r3
 800e262:	f7fb fca6 	bl	8009bb2 <unlock_fs>
#endif
		}
	}
	return res;
 800e266:	7bfb      	ldrb	r3, [r7, #15]
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3710      	adds	r7, #16
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}

0800e270 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e274:	b0ba      	sub	sp, #232	@ 0xe8
 800e276:	af00      	add	r7, sp, #0
 800e278:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 800e27c:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e280:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800e284:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800e288:	4619      	mov	r1, r3
 800e28a:	4610      	mov	r0, r2
 800e28c:	f7fe ff10 	bl	800d0b0 <validate>
 800e290:	4603      	mov	r3, r0
 800e292:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e296:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d105      	bne.n	800e2aa <f_lseek+0x3a>
 800e29e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e2a2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e2a6:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 800e2aa:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d111      	bne.n	800e2d6 <f_lseek+0x66>
 800e2b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e2b6:	781b      	ldrb	r3, [r3, #0]
 800e2b8:	2b04      	cmp	r3, #4
 800e2ba:	d10c      	bne.n	800e2d6 <f_lseek+0x66>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e2bc:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800e2c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e2c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2c6:	f04f 32ff 	mov.w	r2, #4294967295
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	f7fc fa97 	bl	800a7fe <fill_last_frag>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e2d6:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d00a      	beq.n	800e2f4 <f_lseek+0x84>
 800e2de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e2e2:	f897 20e7 	ldrb.w	r2, [r7, #231]	@ 0xe7
 800e2e6:	4611      	mov	r1, r2
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7fb fc62 	bl	8009bb2 <unlock_fs>
 800e2ee:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800e2f2:	e3fb      	b.n	800eaec <f_lseek+0x87c>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e2f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e2f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	f000 8170 	beq.w	800e5e0 <f_lseek+0x370>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e300:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e304:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e308:	bf08      	it	eq
 800e30a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800e30e:	f040 8093 	bne.w	800e438 <f_lseek+0x1c8>
			tbl = fp->cltbl;
 800e312:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e318:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e31c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e320:	1d1a      	adds	r2, r3, #4
 800e322:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e32c:	2302      	movs	r3, #2
 800e32e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e332:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e336:	689b      	ldr	r3, [r3, #8]
 800e338:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			if (cl) {
 800e33c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e340:	2b00      	cmp	r3, #0
 800e342:	d064      	beq.n	800e40e <f_lseek+0x19e>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e344:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e348:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e34c:	2300      	movs	r3, #0
 800e34e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e352:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e356:	3302      	adds	r3, #2
 800e358:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
					do {
						pcl = cl; ncl++;
 800e35c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e360:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e364:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e368:	3301      	adds	r3, #1
 800e36a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
						cl = get_fat(&fp->obj, cl);
 800e36e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e372:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800e376:	4618      	mov	r0, r3
 800e378:	f7fb fea4 	bl	800a0c4 <get_fat>
 800e37c:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e380:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e384:	2b01      	cmp	r3, #1
 800e386:	d80c      	bhi.n	800e3a2 <f_lseek+0x132>
 800e388:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e38c:	2202      	movs	r2, #2
 800e38e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e392:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e396:	2102      	movs	r1, #2
 800e398:	4618      	mov	r0, r3
 800e39a:	f7fb fc0a 	bl	8009bb2 <unlock_fs>
 800e39e:	2302      	movs	r3, #2
 800e3a0:	e3a4      	b.n	800eaec <f_lseek+0x87c>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e3a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3aa:	d10c      	bne.n	800e3c6 <f_lseek+0x156>
 800e3ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e3b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e3ba:	2101      	movs	r1, #1
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f7fb fbf8 	bl	8009bb2 <unlock_fs>
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	e392      	b.n	800eaec <f_lseek+0x87c>
					} while (cl == pcl + 1);
 800e3c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d0c3      	beq.n	800e35c <f_lseek+0xec>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e3d4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e3d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d80f      	bhi.n	800e400 <f_lseek+0x190>
						*tbl++ = ncl; *tbl++ = tcl;
 800e3e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e3e4:	1d1a      	adds	r2, r3, #4
 800e3e6:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800e3ea:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800e3ee:	601a      	str	r2, [r3, #0]
 800e3f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e3f4:	1d1a      	adds	r2, r3, #4
 800e3f6:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800e3fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e3fe:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e400:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e406:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800e40a:	429a      	cmp	r2, r3
 800e40c:	d39a      	bcc.n	800e344 <f_lseek+0xd4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e40e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e414:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e418:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e41a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e41e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e422:	429a      	cmp	r2, r3
 800e424:	d804      	bhi.n	800e430 <f_lseek+0x1c0>
				*tbl = 0;		/* Terminate table */
 800e426:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e42a:	2200      	movs	r2, #0
 800e42c:	601a      	str	r2, [r3, #0]
 800e42e:	e353      	b.n	800ead8 <f_lseek+0x868>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e430:	2311      	movs	r3, #17
 800e432:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
 800e436:	e34f      	b.n	800ead8 <f_lseek+0x868>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e438:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e43c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800e440:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e444:	4290      	cmp	r0, r2
 800e446:	eb71 0303 	sbcs.w	r3, r1, r3
 800e44a:	d205      	bcs.n	800e458 <f_lseek+0x1e8>
 800e44c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e450:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e454:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
			fp->fptr = ofs;				/* Set file pointer */
 800e458:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e45c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e460:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
			if (ofs) {
 800e464:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e468:	4313      	orrs	r3, r2
 800e46a:	f000 8335 	beq.w	800ead8 <f_lseek+0x868>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e46e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e472:	f112 38ff 	adds.w	r8, r2, #4294967295
 800e476:	f143 39ff 	adc.w	r9, r3, #4294967295
 800e47a:	4642      	mov	r2, r8
 800e47c:	464b      	mov	r3, r9
 800e47e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800e482:	f7fc fba2 	bl	800abca <clmt_clust>
 800e486:	4602      	mov	r2, r0
 800e488:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e48c:	641a      	str	r2, [r3, #64]	@ 0x40
				dsc = clust2sect(fs, fp->clust);
 800e48e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e492:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e498:	4619      	mov	r1, r3
 800e49a:	4610      	mov	r0, r2
 800e49c:	f7fb fdf2 	bl	800a084 <clust2sect>
 800e4a0:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e4a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d10c      	bne.n	800e4c6 <f_lseek+0x256>
 800e4ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e4b0:	2202      	movs	r2, #2
 800e4b2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e4b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e4ba:	2102      	movs	r1, #2
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f7fb fb78 	bl	8009bb2 <unlock_fs>
 800e4c2:	2302      	movs	r3, #2
 800e4c4:	e312      	b.n	800eaec <f_lseek+0x87c>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e4c6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e4ca:	1e54      	subs	r4, r2, #1
 800e4cc:	f143 35ff 	adc.w	r5, r3, #4294967295
 800e4d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e4d4:	899b      	ldrh	r3, [r3, #12]
 800e4d6:	b29b      	uxth	r3, r3
 800e4d8:	2200      	movs	r2, #0
 800e4da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e4de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e4e2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	4629      	mov	r1, r5
 800e4ea:	f7f2 fb5f 	bl	8000bac <__aeabi_uldivmod>
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	460b      	mov	r3, r1
 800e4f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e4f6:	895b      	ldrh	r3, [r3, #10]
 800e4f8:	3b01      	subs	r3, #1
 800e4fa:	4013      	ands	r3, r2
 800e4fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e500:	4413      	add	r3, r2
 800e502:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e506:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e50a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e50e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e512:	899b      	ldrh	r3, [r3, #12]
 800e514:	b29b      	uxth	r3, r3
 800e516:	2200      	movs	r2, #0
 800e518:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e51c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e520:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800e524:	f7f2 fb42 	bl	8000bac <__aeabi_uldivmod>
 800e528:	4313      	orrs	r3, r2
 800e52a:	f000 82d5 	beq.w	800ead8 <f_lseek+0x868>
 800e52e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e534:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e538:	429a      	cmp	r2, r3
 800e53a:	f000 82cd 	beq.w	800ead8 <f_lseek+0x868>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e53e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e542:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e546:	b25b      	sxtb	r3, r3
 800e548:	2b00      	cmp	r3, #0
 800e54a:	da27      	bge.n	800e59c <f_lseek+0x32c>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e54c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e550:	7858      	ldrb	r0, [r3, #1]
 800e552:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e556:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e55a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e55e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e560:	2301      	movs	r3, #1
 800e562:	f7fb f86f 	bl	8009644 <disk_write>
 800e566:	4603      	mov	r3, r0
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d00c      	beq.n	800e586 <f_lseek+0x316>
 800e56c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e570:	2201      	movs	r2, #1
 800e572:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e576:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e57a:	2101      	movs	r1, #1
 800e57c:	4618      	mov	r0, r3
 800e57e:	f7fb fb18 	bl	8009bb2 <unlock_fs>
 800e582:	2301      	movs	r3, #1
 800e584:	e2b2      	b.n	800eaec <f_lseek+0x87c>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e586:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e58a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e58e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e592:	b2da      	uxtb	r2, r3
 800e594:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e598:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e59c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e5a0:	7858      	ldrb	r0, [r3, #1]
 800e5a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e5a6:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e5b0:	f7fb f828 	bl	8009604 <disk_read>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d00c      	beq.n	800e5d4 <f_lseek+0x364>
 800e5ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e5be:	2201      	movs	r2, #1
 800e5c0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e5c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e5c8:	2101      	movs	r1, #1
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7fb faf1 	bl	8009bb2 <unlock_fs>
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	e28b      	b.n	800eaec <f_lseek+0x87c>
#endif
					fp->sect = dsc;
 800e5d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e5d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e5dc:	645a      	str	r2, [r3, #68]	@ 0x44
 800e5de:	e27b      	b.n	800ead8 <f_lseek+0x868>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 800e5e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e5e4:	781b      	ldrb	r3, [r3, #0]
 800e5e6:	2b04      	cmp	r3, #4
 800e5e8:	d009      	beq.n	800e5fe <f_lseek+0x38e>
 800e5ea:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e5ee:	2b01      	cmp	r3, #1
 800e5f0:	d305      	bcc.n	800e5fe <f_lseek+0x38e>
 800e5f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e5f6:	f04f 0300 	mov.w	r3, #0
 800e5fa:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e5fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e602:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800e606:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e60a:	4290      	cmp	r0, r2
 800e60c:	eb71 0303 	sbcs.w	r3, r1, r3
 800e610:	d20d      	bcs.n	800e62e <f_lseek+0x3be>
 800e612:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e616:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e61a:	f003 0302 	and.w	r3, r3, #2
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d105      	bne.n	800e62e <f_lseek+0x3be>
			ofs = fp->obj.objsize;
 800e622:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e626:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e62a:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
		}
		ifptr = fp->fptr;
 800e62e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e632:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e636:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
		fp->fptr = nsect = 0;
 800e63a:	2300      	movs	r3, #0
 800e63c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e640:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e644:	f04f 0200 	mov.w	r2, #0
 800e648:	f04f 0300 	mov.w	r3, #0
 800e64c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		if (ofs) {
 800e650:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e654:	4313      	orrs	r3, r2
 800e656:	f000 81b8 	beq.w	800e9ca <f_lseek+0x75a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e65a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e65e:	895b      	ldrh	r3, [r3, #10]
 800e660:	461a      	mov	r2, r3
 800e662:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e666:	899b      	ldrh	r3, [r3, #12]
 800e668:	fb02 f303 	mul.w	r3, r2, r3
 800e66c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			if (ifptr > 0 &&
 800e670:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800e674:	4313      	orrs	r3, r2
 800e676:	d069      	beq.n	800e74c <f_lseek+0x4dc>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e678:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e67c:	1e51      	subs	r1, r2, #1
 800e67e:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800e682:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e686:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e68a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e68e:	2200      	movs	r2, #0
 800e690:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e692:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800e694:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800e698:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800e69c:	f7f2 fa86 	bl	8000bac <__aeabi_uldivmod>
 800e6a0:	4602      	mov	r2, r0
 800e6a2:	460b      	mov	r3, r1
 800e6a4:	4614      	mov	r4, r2
 800e6a6:	461d      	mov	r5, r3
 800e6a8:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800e6ac:	1e51      	subs	r1, r2, #1
 800e6ae:	6739      	str	r1, [r7, #112]	@ 0x70
 800e6b0:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e6b4:	677b      	str	r3, [r7, #116]	@ 0x74
 800e6b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e6be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e6c0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800e6c4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800e6c8:	f7f2 fa70 	bl	8000bac <__aeabi_uldivmod>
 800e6cc:	4602      	mov	r2, r0
 800e6ce:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 800e6d0:	4294      	cmp	r4, r2
 800e6d2:	eb75 0303 	sbcs.w	r3, r5, r3
 800e6d6:	d339      	bcc.n	800e74c <f_lseek+0x4dc>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e6d8:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800e6dc:	1e51      	subs	r1, r2, #1
 800e6de:	6639      	str	r1, [r7, #96]	@ 0x60
 800e6e0:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e6e4:	667b      	str	r3, [r7, #100]	@ 0x64
 800e6e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e6ea:	3b01      	subs	r3, #1
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e6f0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800e6f2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800e6f6:	460b      	mov	r3, r1
 800e6f8:	ea6f 0a03 	mvn.w	sl, r3
 800e6fc:	4613      	mov	r3, r2
 800e6fe:	ea6f 0b03 	mvn.w	fp, r3
 800e702:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800e706:	460b      	mov	r3, r1
 800e708:	ea03 030a 	and.w	r3, r3, sl
 800e70c:	653b      	str	r3, [r7, #80]	@ 0x50
 800e70e:	4613      	mov	r3, r2
 800e710:	ea03 030b 	and.w	r3, r3, fp
 800e714:	657b      	str	r3, [r7, #84]	@ 0x54
 800e716:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e71a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800e71e:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
				ofs -= fp->fptr;
 800e722:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e726:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e72a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e72e:	1a14      	subs	r4, r2, r0
 800e730:	60bc      	str	r4, [r7, #8]
 800e732:	eb63 0301 	sbc.w	r3, r3, r1
 800e736:	60fb      	str	r3, [r7, #12]
 800e738:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e73c:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
				clst = fp->clust;
 800e740:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e746:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e74a:	e03d      	b.n	800e7c8 <f_lseek+0x558>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e74c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e750:	689b      	ldr	r3, [r3, #8]
 800e752:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d12f      	bne.n	800e7be <f_lseek+0x54e>
					clst = create_chain(&fp->obj, 0);
 800e75e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e762:	2100      	movs	r1, #0
 800e764:	4618      	mov	r0, r3
 800e766:	f7fc f92f 	bl	800a9c8 <create_chain>
 800e76a:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e76e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e772:	2b01      	cmp	r3, #1
 800e774:	d10c      	bne.n	800e790 <f_lseek+0x520>
 800e776:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e77a:	2202      	movs	r2, #2
 800e77c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e780:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e784:	2102      	movs	r1, #2
 800e786:	4618      	mov	r0, r3
 800e788:	f7fb fa13 	bl	8009bb2 <unlock_fs>
 800e78c:	2302      	movs	r3, #2
 800e78e:	e1ad      	b.n	800eaec <f_lseek+0x87c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e794:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e798:	d10c      	bne.n	800e7b4 <f_lseek+0x544>
 800e79a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e79e:	2201      	movs	r2, #1
 800e7a0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e7a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e7a8:	2101      	movs	r1, #1
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7fb fa01 	bl	8009bb2 <unlock_fs>
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	e19b      	b.n	800eaec <f_lseek+0x87c>
					fp->obj.sclust = clst;
 800e7b4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800e7b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e7bc:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 800e7be:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800e7c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e7c6:	6413      	str	r3, [r2, #64]	@ 0x40
			}
			if (clst != 0) {
 800e7c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	f000 80fc 	beq.w	800e9ca <f_lseek+0x75a>
				while (ofs > bcs) {						/* Cluster following loop */
 800e7d2:	e09c      	b.n	800e90e <f_lseek+0x69e>
					ofs -= bcs; fp->fptr += bcs;
 800e7d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e7d8:	2200      	movs	r2, #0
 800e7da:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e7dc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e7de:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e7e2:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800e7e6:	4621      	mov	r1, r4
 800e7e8:	1a51      	subs	r1, r2, r1
 800e7ea:	6039      	str	r1, [r7, #0]
 800e7ec:	4629      	mov	r1, r5
 800e7ee:	eb63 0301 	sbc.w	r3, r3, r1
 800e7f2:	607b      	str	r3, [r7, #4]
 800e7f4:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e7f8:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
 800e7fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e800:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e804:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 800e808:	2000      	movs	r0, #0
 800e80a:	6439      	str	r1, [r7, #64]	@ 0x40
 800e80c:	6478      	str	r0, [r7, #68]	@ 0x44
 800e80e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800e812:	4621      	mov	r1, r4
 800e814:	1851      	adds	r1, r2, r1
 800e816:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e818:	4629      	mov	r1, r5
 800e81a:	414b      	adcs	r3, r1
 800e81c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e81e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e822:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800e826:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e82a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e82e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e832:	f003 0302 	and.w	r3, r3, #2
 800e836:	2b00      	cmp	r3, #0
 800e838:	d031      	beq.n	800e89e <f_lseek+0x62e>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 800e83a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e83e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e842:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e846:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e84a:	4282      	cmp	r2, r0
 800e84c:	418b      	sbcs	r3, r1
 800e84e:	d212      	bcs.n	800e876 <f_lseek+0x606>
							fp->obj.objsize = fp->fptr;
 800e850:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e854:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e858:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e85c:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 800e860:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e864:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e868:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e86c:	b2db      	uxtb	r3, r3
 800e86e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800e872:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e876:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e87a:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800e87e:	4618      	mov	r0, r3
 800e880:	f7fc f8a2 	bl	800a9c8 <create_chain>
 800e884:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d10f      	bne.n	800e8b0 <f_lseek+0x640>
							ofs = 0; break;
 800e890:	f04f 0200 	mov.w	r2, #0
 800e894:	f04f 0300 	mov.w	r3, #0
 800e898:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
 800e89c:	e047      	b.n	800e92e <f_lseek+0x6be>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e89e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e8a2:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f7fb fc0c 	bl	800a0c4 <get_fat>
 800e8ac:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e8b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e8b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8b8:	d10c      	bne.n	800e8d4 <f_lseek+0x664>
 800e8ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e8be:	2201      	movs	r2, #1
 800e8c0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e8c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e8c8:	2101      	movs	r1, #1
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f7fb f971 	bl	8009bb2 <unlock_fs>
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	e10b      	b.n	800eaec <f_lseek+0x87c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e8d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e8d8:	2b01      	cmp	r3, #1
 800e8da:	d906      	bls.n	800e8ea <f_lseek+0x67a>
 800e8dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e8e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e8e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e8e6:	4293      	cmp	r3, r2
 800e8e8:	d30c      	bcc.n	800e904 <f_lseek+0x694>
 800e8ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e8ee:	2202      	movs	r2, #2
 800e8f0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e8f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e8f8:	2102      	movs	r1, #2
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7fb f959 	bl	8009bb2 <unlock_fs>
 800e900:	2302      	movs	r3, #2
 800e902:	e0f3      	b.n	800eaec <f_lseek+0x87c>
					fp->clust = clst;
 800e904:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800e908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e90c:	6413      	str	r3, [r2, #64]	@ 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 800e90e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e912:	2200      	movs	r2, #0
 800e914:	633b      	str	r3, [r7, #48]	@ 0x30
 800e916:	637a      	str	r2, [r7, #52]	@ 0x34
 800e918:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e91c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800e920:	4621      	mov	r1, r4
 800e922:	4291      	cmp	r1, r2
 800e924:	4629      	mov	r1, r5
 800e926:	eb71 0303 	sbcs.w	r3, r1, r3
 800e92a:	f4ff af53 	bcc.w	800e7d4 <f_lseek+0x564>
				}
				fp->fptr += ofs;
 800e92e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e932:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e936:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e93a:	1884      	adds	r4, r0, r2
 800e93c:	62bc      	str	r4, [r7, #40]	@ 0x28
 800e93e:	eb41 0303 	adc.w	r3, r1, r3
 800e942:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e944:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e948:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800e94c:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
				if (ofs % SS(fs)) {
 800e950:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e954:	899b      	ldrh	r3, [r3, #12]
 800e956:	b29b      	uxth	r3, r3
 800e958:	2200      	movs	r2, #0
 800e95a:	623b      	str	r3, [r7, #32]
 800e95c:	627a      	str	r2, [r7, #36]	@ 0x24
 800e95e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800e962:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e966:	f7f2 f921 	bl	8000bac <__aeabi_uldivmod>
 800e96a:	4313      	orrs	r3, r2
 800e96c:	d02d      	beq.n	800e9ca <f_lseek+0x75a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e96e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e972:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800e976:	4618      	mov	r0, r3
 800e978:	f7fb fb84 	bl	800a084 <clust2sect>
 800e97c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e984:	2b00      	cmp	r3, #0
 800e986:	d10c      	bne.n	800e9a2 <f_lseek+0x732>
 800e988:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e98c:	2202      	movs	r2, #2
 800e98e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e992:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e996:	2102      	movs	r1, #2
 800e998:	4618      	mov	r0, r3
 800e99a:	f7fb f90a 	bl	8009bb2 <unlock_fs>
 800e99e:	2302      	movs	r3, #2
 800e9a0:	e0a4      	b.n	800eaec <f_lseek+0x87c>
					nsect += (DWORD)(ofs / SS(fs));
 800e9a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e9a6:	899b      	ldrh	r3, [r3, #12]
 800e9a8:	b29b      	uxth	r3, r3
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	61bb      	str	r3, [r7, #24]
 800e9ae:	61fa      	str	r2, [r7, #28]
 800e9b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e9b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800e9b8:	f7f2 f8f8 	bl	8000bac <__aeabi_uldivmod>
 800e9bc:	4602      	mov	r2, r0
 800e9be:	460b      	mov	r3, r1
 800e9c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e9c4:	4413      	add	r3, r2
 800e9c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e9ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e9ce:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e9d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e9d6:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800e9da:	4290      	cmp	r0, r2
 800e9dc:	eb71 0303 	sbcs.w	r3, r1, r3
 800e9e0:	d212      	bcs.n	800ea08 <f_lseek+0x798>
			fp->obj.objsize = fp->fptr;
 800e9e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e9e6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e9ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e9ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 800e9f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e9f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e9fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9fe:	b2da      	uxtb	r2, r3
 800ea00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ea04:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ea08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ea0c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ea10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ea14:	899b      	ldrh	r3, [r3, #12]
 800ea16:	b29b      	uxth	r3, r3
 800ea18:	2200      	movs	r2, #0
 800ea1a:	613b      	str	r3, [r7, #16]
 800ea1c:	617a      	str	r2, [r7, #20]
 800ea1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ea22:	f7f2 f8c3 	bl	8000bac <__aeabi_uldivmod>
 800ea26:	4313      	orrs	r3, r2
 800ea28:	d056      	beq.n	800ead8 <f_lseek+0x868>
 800ea2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ea2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea30:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ea34:	429a      	cmp	r2, r3
 800ea36:	d04f      	beq.n	800ead8 <f_lseek+0x868>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ea38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ea3c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ea40:	b25b      	sxtb	r3, r3
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	da27      	bge.n	800ea96 <f_lseek+0x826>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ea46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ea4a:	7858      	ldrb	r0, [r3, #1]
 800ea4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ea50:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ea54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ea58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	f7fa fdf2 	bl	8009644 <disk_write>
 800ea60:	4603      	mov	r3, r0
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d00c      	beq.n	800ea80 <f_lseek+0x810>
 800ea66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ea6a:	2201      	movs	r2, #1
 800ea6c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ea70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ea74:	2101      	movs	r1, #1
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7fb f89b 	bl	8009bb2 <unlock_fs>
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	e035      	b.n	800eaec <f_lseek+0x87c>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ea80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ea84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ea88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea8c:	b2da      	uxtb	r2, r3
 800ea8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ea92:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ea96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ea9a:	7858      	ldrb	r0, [r3, #1]
 800ea9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800eaa0:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800eaaa:	f7fa fdab 	bl	8009604 <disk_read>
 800eaae:	4603      	mov	r3, r0
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d00c      	beq.n	800eace <f_lseek+0x85e>
 800eab4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800eab8:	2201      	movs	r2, #1
 800eaba:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800eabe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eac2:	2101      	movs	r1, #1
 800eac4:	4618      	mov	r0, r3
 800eac6:	f7fb f874 	bl	8009bb2 <unlock_fs>
 800eaca:	2301      	movs	r3, #1
 800eacc:	e00e      	b.n	800eaec <f_lseek+0x87c>
#endif
			fp->sect = nsect;
 800eace:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ead2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ead6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
	}

	LEAVE_FF(fs, res);
 800ead8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eadc:	f897 20e7 	ldrb.w	r2, [r7, #231]	@ 0xe7
 800eae0:	4611      	mov	r1, r2
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7fb f865 	bl	8009bb2 <unlock_fs>
 800eae8:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	37e8      	adds	r7, #232	@ 0xe8
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800eaf6 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800eaf6:	b580      	push	{r7, lr}
 800eaf8:	b098      	sub	sp, #96	@ 0x60
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	6078      	str	r0, [r7, #4]
 800eafe:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800eb00:	f107 0108 	add.w	r1, r7, #8
 800eb04:	1d3b      	adds	r3, r7, #4
 800eb06:	2200      	movs	r2, #0
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7fd ff39 	bl	800c980 <find_volume>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800eb14:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d139      	bne.n	800eb90 <f_stat+0x9a>
		INIT_NAMBUF(dj.obj.fs);
 800eb1c:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800eb20:	f000 faf6 	bl	800f110 <ff_memalloc>
 800eb24:	65b8      	str	r0, [r7, #88]	@ 0x58
 800eb26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d106      	bne.n	800eb3a <f_stat+0x44>
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	2111      	movs	r1, #17
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7fb f83e 	bl	8009bb2 <unlock_fs>
 800eb36:	2311      	movs	r3, #17
 800eb38:	e033      	b.n	800eba2 <f_stat+0xac>
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eb3e:	611a      	str	r2, [r3, #16]
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eb44:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800eb48:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 800eb4a:	687a      	ldr	r2, [r7, #4]
 800eb4c:	f107 0308 	add.w	r3, r7, #8
 800eb50:	4611      	mov	r1, r2
 800eb52:	4618      	mov	r0, r3
 800eb54:	f7fd fdbe 	bl	800c6d4 <follow_path>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (res == FR_OK) {				/* Follow completed */
 800eb5e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d111      	bne.n	800eb8a <f_stat+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800eb66:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800eb6a:	b25b      	sxtb	r3, r3
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	da03      	bge.n	800eb78 <f_stat+0x82>
				res = FR_INVALID_NAME;
 800eb70:	2306      	movs	r3, #6
 800eb72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800eb76:	e008      	b.n	800eb8a <f_stat+0x94>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d005      	beq.n	800eb8a <f_stat+0x94>
 800eb7e:	f107 0308 	add.w	r3, r7, #8
 800eb82:	6839      	ldr	r1, [r7, #0]
 800eb84:	4618      	mov	r0, r3
 800eb86:	f7fd faff 	bl	800c188 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
 800eb8a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800eb8c:	f000 facc 	bl	800f128 <ff_memfree>
	}

	LEAVE_FF(dj.obj.fs, res);
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800eb96:	4611      	mov	r1, r2
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f7fb f80a 	bl	8009bb2 <unlock_fs>
 800eb9e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3760      	adds	r7, #96	@ 0x60
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}

0800ebaa <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800ebaa:	b580      	push	{r7, lr}
 800ebac:	b0bc      	sub	sp, #240	@ 0xf0
 800ebae:	af00      	add	r7, sp, #0
 800ebb0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800ebb8:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800ebbc:	1d3b      	adds	r3, r7, #4
 800ebbe:	2202      	movs	r2, #2
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7fd fedd 	bl	800c980 <find_volume>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
	dj.obj.fs = fs;
 800ebcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	if (res == FR_OK) {
 800ebd2:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	f040 80e2 	bne.w	800eda0 <f_unlink+0x1f6>
		INIT_NAMBUF(fs);
 800ebdc:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800ebe0:	f000 fa96 	bl	800f110 <ff_memalloc>
 800ebe4:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 800ebe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d106      	bne.n	800ebfe <f_unlink+0x54>
 800ebf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebf2:	2111      	movs	r1, #17
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f7fa ffdc 	bl	8009bb2 <unlock_fs>
 800ebfa:	2311      	movs	r3, #17
 800ebfc:	e0d9      	b.n	800edb2 <f_unlink+0x208>
 800ebfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec00:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ec04:	611a      	str	r2, [r3, #16]
 800ec06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec08:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ec0c:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800ec10:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);		/* Follow the file path */
 800ec12:	687a      	ldr	r2, [r7, #4]
 800ec14:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800ec18:	4611      	mov	r1, r2
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f7fd fd5a 	bl	800c6d4 <follow_path>
 800ec20:	4603      	mov	r3, r0
 800ec22:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800ec26:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d108      	bne.n	800ec40 <f_unlink+0x96>
 800ec2e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800ec32:	2102      	movs	r1, #2
 800ec34:	4618      	mov	r0, r3
 800ec36:	f7fa ffd7 	bl	8009be8 <chk_lock>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800ec40:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	f040 80a7 	bne.w	800ed98 <f_unlink+0x1ee>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800ec4a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800ec4e:	b25b      	sxtb	r3, r3
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	da03      	bge.n	800ec5c <f_unlink+0xb2>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800ec54:	2306      	movs	r3, #6
 800ec56:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 800ec5a:	e008      	b.n	800ec6e <f_unlink+0xc4>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800ec5c:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800ec60:	f003 0301 	and.w	r3, r3, #1
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d002      	beq.n	800ec6e <f_unlink+0xc4>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800ec68:	2307      	movs	r3, #7
 800ec6a:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
				}
			}
			if (res == FR_OK) {
 800ec6e:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d166      	bne.n	800ed44 <f_unlink+0x19a>
#if _FS_EXFAT
				obj.fs = fs;
 800ec76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec78:	60bb      	str	r3, [r7, #8]
				if (fs->fs_type == FS_EXFAT) {
 800ec7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec7c:	781b      	ldrb	r3, [r3, #0]
 800ec7e:	2b04      	cmp	r3, #4
 800ec80:	d11d      	bne.n	800ecbe <f_unlink+0x114>
					obj.sclust = dclst = ld_dword(fs->dirbuf + XDIR_FstClus);
 800ec82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec84:	695b      	ldr	r3, [r3, #20]
 800ec86:	3334      	adds	r3, #52	@ 0x34
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7fa fd31 	bl	80096f0 <ld_dword>
 800ec8e:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
 800ec92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ec96:	613b      	str	r3, [r7, #16]
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800ec98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec9a:	695b      	ldr	r3, [r3, #20]
 800ec9c:	3338      	adds	r3, #56	@ 0x38
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f7fa fd49 	bl	8009736 <ld_qword>
 800eca4:	4602      	mov	r2, r0
 800eca6:	460b      	mov	r3, r1
 800eca8:	e9c7 2306 	strd	r2, r3, [r7, #24]
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800ecac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecae:	695b      	ldr	r3, [r3, #20]
 800ecb0:	3321      	adds	r3, #33	@ 0x21
 800ecb2:	781b      	ldrb	r3, [r3, #0]
 800ecb4:	f003 0302 	and.w	r3, r3, #2
 800ecb8:	b2db      	uxtb	r3, r3
 800ecba:	73fb      	strb	r3, [r7, #15]
 800ecbc:	e008      	b.n	800ecd0 <f_unlink+0x126>
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800ecbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecc0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800ecc4:	4611      	mov	r1, r2
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7fc f9a1 	bl	800b00e <ld_clust>
 800eccc:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800ecd0:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800ecd4:	f003 0310 	and.w	r3, r3, #16
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d033      	beq.n	800ed44 <f_unlink+0x19a>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800ecdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecde:	643b      	str	r3, [r7, #64]	@ 0x40
						sdj.obj.sclust = dclst;
 800ece0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ece4:	64bb      	str	r3, [r7, #72]	@ 0x48
#if _FS_EXFAT
						if (fs->fs_type == FS_EXFAT) {
 800ece6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	2b04      	cmp	r3, #4
 800ecec:	d106      	bne.n	800ecfc <f_unlink+0x152>
							sdj.obj.objsize = obj.objsize;
 800ecee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ecf2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
							sdj.obj.stat = obj.stat;
 800ecf6:	7bfb      	ldrb	r3, [r7, #15]
 800ecf8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
						}
#endif
						res = dir_sdi(&sdj, 0);
 800ecfc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ed00:	2100      	movs	r1, #0
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7fb ffad 	bl	800ac62 <dir_sdi>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
						if (res == FR_OK) {
 800ed0e:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d116      	bne.n	800ed44 <f_unlink+0x19a>
							res = dir_read(&sdj, 0);			/* Read an item */
 800ed16:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ed1a:	2100      	movs	r1, #0
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7fc fe3f 	bl	800b9a0 <dir_read>
 800ed22:	4603      	mov	r3, r0
 800ed24:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800ed28:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d102      	bne.n	800ed36 <f_unlink+0x18c>
 800ed30:	2307      	movs	r3, #7
 800ed32:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800ed36:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800ed3a:	2b04      	cmp	r3, #4
 800ed3c:	d102      	bne.n	800ed44 <f_unlink+0x19a>
 800ed3e:	2300      	movs	r3, #0
 800ed40:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
						}
					}
				}
			}
			if (res == FR_OK) {
 800ed44:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d125      	bne.n	800ed98 <f_unlink+0x1ee>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800ed4c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800ed50:	4618      	mov	r0, r3
 800ed52:	f7fd f9c1 	bl	800c0d8 <dir_remove>
 800ed56:	4603      	mov	r3, r0
 800ed58:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800ed5c:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d10e      	bne.n	800ed82 <f_unlink+0x1d8>
 800ed64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d00a      	beq.n	800ed82 <f_unlink+0x1d8>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
 800ed6c:	f107 0308 	add.w	r3, r7, #8
 800ed70:	2200      	movs	r2, #0
 800ed72:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 800ed76:	4618      	mov	r0, r3
 800ed78:	f7fb fd72 	bl	800a860 <remove_chain>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800ed82:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d106      	bne.n	800ed98 <f_unlink+0x1ee>
 800ed8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f7fb f909 	bl	8009fa4 <sync_fs>
 800ed92:	4603      	mov	r3, r0
 800ed94:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
			}
		}
		FREE_NAMBUF();
 800ed98:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800ed9c:	f000 f9c4 	bl	800f128 <ff_memfree>
	}

	LEAVE_FF(fs, res);
 800eda0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eda2:	f897 20ef 	ldrb.w	r2, [r7, #239]	@ 0xef
 800eda6:	4611      	mov	r1, r2
 800eda8:	4618      	mov	r0, r3
 800edaa:	f7fa ff02 	bl	8009bb2 <unlock_fs>
 800edae:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	37f0      	adds	r7, #240	@ 0xf0
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}

0800edba <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800edba:	b580      	push	{r7, lr}
 800edbc:	b088      	sub	sp, #32
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	60f8      	str	r0, [r7, #12]
 800edc2:	60b9      	str	r1, [r7, #8]
 800edc4:	607a      	str	r2, [r7, #4]
	int n = 0;
 800edc6:	2300      	movs	r3, #0
 800edc8:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800edce:	e01c      	b.n	800ee0a <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800edd0:	f107 0310 	add.w	r3, r7, #16
 800edd4:	f107 0114 	add.w	r1, r7, #20
 800edd8:	2201      	movs	r2, #1
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f7fe fd09 	bl	800d7f2 <f_read>
		if (rc != 1) break;
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	2b01      	cmp	r3, #1
 800ede4:	d117      	bne.n	800ee16 <f_gets+0x5c>
		c = s[0];
 800ede6:	7d3b      	ldrb	r3, [r7, #20]
 800ede8:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800edea:	7dfb      	ldrb	r3, [r7, #23]
 800edec:	2b0d      	cmp	r3, #13
 800edee:	d00b      	beq.n	800ee08 <f_gets+0x4e>
		*p++ = c;
 800edf0:	69bb      	ldr	r3, [r7, #24]
 800edf2:	1c5a      	adds	r2, r3, #1
 800edf4:	61ba      	str	r2, [r7, #24]
 800edf6:	7dfa      	ldrb	r2, [r7, #23]
 800edf8:	701a      	strb	r2, [r3, #0]
		n++;
 800edfa:	69fb      	ldr	r3, [r7, #28]
 800edfc:	3301      	adds	r3, #1
 800edfe:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800ee00:	7dfb      	ldrb	r3, [r7, #23]
 800ee02:	2b0a      	cmp	r3, #10
 800ee04:	d009      	beq.n	800ee1a <f_gets+0x60>
 800ee06:	e000      	b.n	800ee0a <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800ee08:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	3b01      	subs	r3, #1
 800ee0e:	69fa      	ldr	r2, [r7, #28]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	dbdd      	blt.n	800edd0 <f_gets+0x16>
 800ee14:	e002      	b.n	800ee1c <f_gets+0x62>
		if (rc != 1) break;
 800ee16:	bf00      	nop
 800ee18:	e000      	b.n	800ee1c <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800ee1a:	bf00      	nop
	}
	*p = 0;
 800ee1c:	69bb      	ldr	r3, [r7, #24]
 800ee1e:	2200      	movs	r2, #0
 800ee20:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800ee22:	69fb      	ldr	r3, [r7, #28]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d001      	beq.n	800ee2c <f_gets+0x72>
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	e000      	b.n	800ee2e <f_gets+0x74>
 800ee2c:	2300      	movs	r3, #0
}
 800ee2e:	4618      	mov	r0, r3
 800ee30:	3720      	adds	r7, #32
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
	...

0800ee38 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ee38:	b480      	push	{r7}
 800ee3a:	b087      	sub	sp, #28
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	60f8      	str	r0, [r7, #12]
 800ee40:	60b9      	str	r1, [r7, #8]
 800ee42:	4613      	mov	r3, r2
 800ee44:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ee46:	2301      	movs	r3, #1
 800ee48:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ee4e:	4b1f      	ldr	r3, [pc, #124]	@ (800eecc <FATFS_LinkDriverEx+0x94>)
 800ee50:	7a5b      	ldrb	r3, [r3, #9]
 800ee52:	b2db      	uxtb	r3, r3
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d131      	bne.n	800eebc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ee58:	4b1c      	ldr	r3, [pc, #112]	@ (800eecc <FATFS_LinkDriverEx+0x94>)
 800ee5a:	7a5b      	ldrb	r3, [r3, #9]
 800ee5c:	b2db      	uxtb	r3, r3
 800ee5e:	461a      	mov	r2, r3
 800ee60:	4b1a      	ldr	r3, [pc, #104]	@ (800eecc <FATFS_LinkDriverEx+0x94>)
 800ee62:	2100      	movs	r1, #0
 800ee64:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ee66:	4b19      	ldr	r3, [pc, #100]	@ (800eecc <FATFS_LinkDriverEx+0x94>)
 800ee68:	7a5b      	ldrb	r3, [r3, #9]
 800ee6a:	b2db      	uxtb	r3, r3
 800ee6c:	4a17      	ldr	r2, [pc, #92]	@ (800eecc <FATFS_LinkDriverEx+0x94>)
 800ee6e:	009b      	lsls	r3, r3, #2
 800ee70:	4413      	add	r3, r2
 800ee72:	68fa      	ldr	r2, [r7, #12]
 800ee74:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ee76:	4b15      	ldr	r3, [pc, #84]	@ (800eecc <FATFS_LinkDriverEx+0x94>)
 800ee78:	7a5b      	ldrb	r3, [r3, #9]
 800ee7a:	b2db      	uxtb	r3, r3
 800ee7c:	461a      	mov	r2, r3
 800ee7e:	4b13      	ldr	r3, [pc, #76]	@ (800eecc <FATFS_LinkDriverEx+0x94>)
 800ee80:	4413      	add	r3, r2
 800ee82:	79fa      	ldrb	r2, [r7, #7]
 800ee84:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ee86:	4b11      	ldr	r3, [pc, #68]	@ (800eecc <FATFS_LinkDriverEx+0x94>)
 800ee88:	7a5b      	ldrb	r3, [r3, #9]
 800ee8a:	b2db      	uxtb	r3, r3
 800ee8c:	1c5a      	adds	r2, r3, #1
 800ee8e:	b2d1      	uxtb	r1, r2
 800ee90:	4a0e      	ldr	r2, [pc, #56]	@ (800eecc <FATFS_LinkDriverEx+0x94>)
 800ee92:	7251      	strb	r1, [r2, #9]
 800ee94:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ee96:	7dbb      	ldrb	r3, [r7, #22]
 800ee98:	3330      	adds	r3, #48	@ 0x30
 800ee9a:	b2da      	uxtb	r2, r3
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	3301      	adds	r3, #1
 800eea4:	223a      	movs	r2, #58	@ 0x3a
 800eea6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	3302      	adds	r3, #2
 800eeac:	222f      	movs	r2, #47	@ 0x2f
 800eeae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	3303      	adds	r3, #3
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800eeb8:	2300      	movs	r3, #0
 800eeba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800eebc:	7dfb      	ldrb	r3, [r7, #23]
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	371c      	adds	r7, #28
 800eec2:	46bd      	mov	sp, r7
 800eec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec8:	4770      	bx	lr
 800eeca:	bf00      	nop
 800eecc:	20002948 	.word	0x20002948

0800eed0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b082      	sub	sp, #8
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800eeda:	2200      	movs	r2, #0
 800eedc:	6839      	ldr	r1, [r7, #0]
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f7ff ffaa 	bl	800ee38 <FATFS_LinkDriverEx>
 800eee4:	4603      	mov	r3, r0
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3708      	adds	r7, #8
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}
	...

0800eef0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800eef0:	b480      	push	{r7}
 800eef2:	b085      	sub	sp, #20
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	4603      	mov	r3, r0
 800eef8:	6039      	str	r1, [r7, #0]
 800eefa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800eefc:	88fb      	ldrh	r3, [r7, #6]
 800eefe:	2b7f      	cmp	r3, #127	@ 0x7f
 800ef00:	d802      	bhi.n	800ef08 <ff_convert+0x18>
		c = chr;
 800ef02:	88fb      	ldrh	r3, [r7, #6]
 800ef04:	81fb      	strh	r3, [r7, #14]
 800ef06:	e025      	b.n	800ef54 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d00b      	beq.n	800ef26 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ef0e:	88fb      	ldrh	r3, [r7, #6]
 800ef10:	2bff      	cmp	r3, #255	@ 0xff
 800ef12:	d805      	bhi.n	800ef20 <ff_convert+0x30>
 800ef14:	88fb      	ldrh	r3, [r7, #6]
 800ef16:	3b80      	subs	r3, #128	@ 0x80
 800ef18:	4a12      	ldr	r2, [pc, #72]	@ (800ef64 <ff_convert+0x74>)
 800ef1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef1e:	e000      	b.n	800ef22 <ff_convert+0x32>
 800ef20:	2300      	movs	r3, #0
 800ef22:	81fb      	strh	r3, [r7, #14]
 800ef24:	e016      	b.n	800ef54 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ef26:	2300      	movs	r3, #0
 800ef28:	81fb      	strh	r3, [r7, #14]
 800ef2a:	e009      	b.n	800ef40 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ef2c:	89fb      	ldrh	r3, [r7, #14]
 800ef2e:	4a0d      	ldr	r2, [pc, #52]	@ (800ef64 <ff_convert+0x74>)
 800ef30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef34:	88fa      	ldrh	r2, [r7, #6]
 800ef36:	429a      	cmp	r2, r3
 800ef38:	d006      	beq.n	800ef48 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ef3a:	89fb      	ldrh	r3, [r7, #14]
 800ef3c:	3301      	adds	r3, #1
 800ef3e:	81fb      	strh	r3, [r7, #14]
 800ef40:	89fb      	ldrh	r3, [r7, #14]
 800ef42:	2b7f      	cmp	r3, #127	@ 0x7f
 800ef44:	d9f2      	bls.n	800ef2c <ff_convert+0x3c>
 800ef46:	e000      	b.n	800ef4a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ef48:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ef4a:	89fb      	ldrh	r3, [r7, #14]
 800ef4c:	3380      	adds	r3, #128	@ 0x80
 800ef4e:	b29b      	uxth	r3, r3
 800ef50:	b2db      	uxtb	r3, r3
 800ef52:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ef54:	89fb      	ldrh	r3, [r7, #14]
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3714      	adds	r7, #20
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef60:	4770      	bx	lr
 800ef62:	bf00      	nop
 800ef64:	0801871c 	.word	0x0801871c

0800ef68 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ef68:	b480      	push	{r7}
 800ef6a:	b087      	sub	sp, #28
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	4603      	mov	r3, r0
 800ef70:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ef72:	88fb      	ldrh	r3, [r7, #6]
 800ef74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ef78:	d201      	bcs.n	800ef7e <ff_wtoupper+0x16>
 800ef7a:	4b3e      	ldr	r3, [pc, #248]	@ (800f074 <ff_wtoupper+0x10c>)
 800ef7c:	e000      	b.n	800ef80 <ff_wtoupper+0x18>
 800ef7e:	4b3e      	ldr	r3, [pc, #248]	@ (800f078 <ff_wtoupper+0x110>)
 800ef80:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	1c9a      	adds	r2, r3, #2
 800ef86:	617a      	str	r2, [r7, #20]
 800ef88:	881b      	ldrh	r3, [r3, #0]
 800ef8a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ef8c:	8a7b      	ldrh	r3, [r7, #18]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d068      	beq.n	800f064 <ff_wtoupper+0xfc>
 800ef92:	88fa      	ldrh	r2, [r7, #6]
 800ef94:	8a7b      	ldrh	r3, [r7, #18]
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d364      	bcc.n	800f064 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	1c9a      	adds	r2, r3, #2
 800ef9e:	617a      	str	r2, [r7, #20]
 800efa0:	881b      	ldrh	r3, [r3, #0]
 800efa2:	823b      	strh	r3, [r7, #16]
 800efa4:	8a3b      	ldrh	r3, [r7, #16]
 800efa6:	0a1b      	lsrs	r3, r3, #8
 800efa8:	81fb      	strh	r3, [r7, #14]
 800efaa:	8a3b      	ldrh	r3, [r7, #16]
 800efac:	b2db      	uxtb	r3, r3
 800efae:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800efb0:	88fa      	ldrh	r2, [r7, #6]
 800efb2:	8a79      	ldrh	r1, [r7, #18]
 800efb4:	8a3b      	ldrh	r3, [r7, #16]
 800efb6:	440b      	add	r3, r1
 800efb8:	429a      	cmp	r2, r3
 800efba:	da49      	bge.n	800f050 <ff_wtoupper+0xe8>
			switch (cmd) {
 800efbc:	89fb      	ldrh	r3, [r7, #14]
 800efbe:	2b08      	cmp	r3, #8
 800efc0:	d84f      	bhi.n	800f062 <ff_wtoupper+0xfa>
 800efc2:	a201      	add	r2, pc, #4	@ (adr r2, 800efc8 <ff_wtoupper+0x60>)
 800efc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efc8:	0800efed 	.word	0x0800efed
 800efcc:	0800efff 	.word	0x0800efff
 800efd0:	0800f015 	.word	0x0800f015
 800efd4:	0800f01d 	.word	0x0800f01d
 800efd8:	0800f025 	.word	0x0800f025
 800efdc:	0800f02d 	.word	0x0800f02d
 800efe0:	0800f035 	.word	0x0800f035
 800efe4:	0800f03d 	.word	0x0800f03d
 800efe8:	0800f045 	.word	0x0800f045
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800efec:	88fa      	ldrh	r2, [r7, #6]
 800efee:	8a7b      	ldrh	r3, [r7, #18]
 800eff0:	1ad3      	subs	r3, r2, r3
 800eff2:	005b      	lsls	r3, r3, #1
 800eff4:	697a      	ldr	r2, [r7, #20]
 800eff6:	4413      	add	r3, r2
 800eff8:	881b      	ldrh	r3, [r3, #0]
 800effa:	80fb      	strh	r3, [r7, #6]
 800effc:	e027      	b.n	800f04e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800effe:	88fa      	ldrh	r2, [r7, #6]
 800f000:	8a7b      	ldrh	r3, [r7, #18]
 800f002:	1ad3      	subs	r3, r2, r3
 800f004:	b29b      	uxth	r3, r3
 800f006:	f003 0301 	and.w	r3, r3, #1
 800f00a:	b29b      	uxth	r3, r3
 800f00c:	88fa      	ldrh	r2, [r7, #6]
 800f00e:	1ad3      	subs	r3, r2, r3
 800f010:	80fb      	strh	r3, [r7, #6]
 800f012:	e01c      	b.n	800f04e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f014:	88fb      	ldrh	r3, [r7, #6]
 800f016:	3b10      	subs	r3, #16
 800f018:	80fb      	strh	r3, [r7, #6]
 800f01a:	e018      	b.n	800f04e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f01c:	88fb      	ldrh	r3, [r7, #6]
 800f01e:	3b20      	subs	r3, #32
 800f020:	80fb      	strh	r3, [r7, #6]
 800f022:	e014      	b.n	800f04e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f024:	88fb      	ldrh	r3, [r7, #6]
 800f026:	3b30      	subs	r3, #48	@ 0x30
 800f028:	80fb      	strh	r3, [r7, #6]
 800f02a:	e010      	b.n	800f04e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f02c:	88fb      	ldrh	r3, [r7, #6]
 800f02e:	3b1a      	subs	r3, #26
 800f030:	80fb      	strh	r3, [r7, #6]
 800f032:	e00c      	b.n	800f04e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f034:	88fb      	ldrh	r3, [r7, #6]
 800f036:	3308      	adds	r3, #8
 800f038:	80fb      	strh	r3, [r7, #6]
 800f03a:	e008      	b.n	800f04e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f03c:	88fb      	ldrh	r3, [r7, #6]
 800f03e:	3b50      	subs	r3, #80	@ 0x50
 800f040:	80fb      	strh	r3, [r7, #6]
 800f042:	e004      	b.n	800f04e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f044:	88fb      	ldrh	r3, [r7, #6]
 800f046:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800f04a:	80fb      	strh	r3, [r7, #6]
 800f04c:	bf00      	nop
			}
			break;
 800f04e:	e008      	b.n	800f062 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f050:	89fb      	ldrh	r3, [r7, #14]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d195      	bne.n	800ef82 <ff_wtoupper+0x1a>
 800f056:	8a3b      	ldrh	r3, [r7, #16]
 800f058:	005b      	lsls	r3, r3, #1
 800f05a:	697a      	ldr	r2, [r7, #20]
 800f05c:	4413      	add	r3, r2
 800f05e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f060:	e78f      	b.n	800ef82 <ff_wtoupper+0x1a>
			break;
 800f062:	bf00      	nop
	}

	return chr;
 800f064:	88fb      	ldrh	r3, [r7, #6]
}
 800f066:	4618      	mov	r0, r3
 800f068:	371c      	adds	r7, #28
 800f06a:	46bd      	mov	sp, r7
 800f06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f070:	4770      	bx	lr
 800f072:	bf00      	nop
 800f074:	0801881c 	.word	0x0801881c
 800f078:	08018a10 	.word	0x08018a10

0800f07c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b084      	sub	sp, #16
 800f080:	af00      	add	r7, sp, #0
 800f082:	4603      	mov	r3, r0
 800f084:	6039      	str	r1, [r7, #0]
 800f086:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800f088:	2300      	movs	r3, #0
 800f08a:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800f08c:	f107 0308 	add.w	r3, r7, #8
 800f090:	2101      	movs	r1, #1
 800f092:	4618      	mov	r0, r3
 800f094:	f000 f865 	bl	800f162 <osSemaphoreCreate>
 800f098:	4602      	mov	r2, r0
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	bf14      	ite	ne
 800f0a6:	2301      	movne	r3, #1
 800f0a8:	2300      	moveq	r3, #0
 800f0aa:	b2db      	uxtb	r3, r3
 800f0ac:	60fb      	str	r3, [r7, #12]

    return ret;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3710      	adds	r7, #16
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}

0800f0b8 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b082      	sub	sp, #8
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800f0c0:	6878      	ldr	r0, [r7, #4]
 800f0c2:	f000 f8f1 	bl	800f2a8 <osSemaphoreDelete>
#endif
    return 1;
 800f0c6:	2301      	movs	r3, #1
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3708      	adds	r7, #8
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}

0800f0d0 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b084      	sub	sp, #16
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800f0dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f000 f85d 	bl	800f1a0 <osSemaphoreWait>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d101      	bne.n	800f0f0 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3710      	adds	r7, #16
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}

0800f0fa <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800f0fa:	b580      	push	{r7, lr}
 800f0fc:	b082      	sub	sp, #8
 800f0fe:	af00      	add	r7, sp, #0
 800f100:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f000 f89a 	bl	800f23c <osSemaphoreRelease>
#endif
}
 800f108:	bf00      	nop
 800f10a:	3708      	adds	r7, #8
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}

0800f110 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b082      	sub	sp, #8
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f002 f987 	bl	801142c <pvPortMalloc>
 800f11e:	4603      	mov	r3, r0
}
 800f120:	4618      	mov	r0, r3
 800f122:	3708      	adds	r7, #8
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}

0800f128 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b082      	sub	sp, #8
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f002 fa49 	bl	80115c8 <vPortFree>
}
 800f136:	bf00      	nop
 800f138:	3708      	adds	r7, #8
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}

0800f13e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f13e:	b480      	push	{r7}
 800f140:	b083      	sub	sp, #12
 800f142:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f144:	f3ef 8305 	mrs	r3, IPSR
 800f148:	607b      	str	r3, [r7, #4]
  return(result);
 800f14a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	bf14      	ite	ne
 800f150:	2301      	movne	r3, #1
 800f152:	2300      	moveq	r3, #0
 800f154:	b2db      	uxtb	r3, r3
}
 800f156:	4618      	mov	r0, r3
 800f158:	370c      	adds	r7, #12
 800f15a:	46bd      	mov	sp, r7
 800f15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f160:	4770      	bx	lr

0800f162 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800f162:	b580      	push	{r7, lr}
 800f164:	b084      	sub	sp, #16
 800f166:	af00      	add	r7, sp, #0
 800f168:	6078      	str	r0, [r7, #4]
 800f16a:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	2b01      	cmp	r3, #1
 800f170:	d110      	bne.n	800f194 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800f172:	2203      	movs	r2, #3
 800f174:	2100      	movs	r1, #0
 800f176:	2001      	movs	r0, #1
 800f178:	f000 f9c8 	bl	800f50c <xQueueGenericCreate>
 800f17c:	60f8      	str	r0, [r7, #12]
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d005      	beq.n	800f190 <osSemaphoreCreate+0x2e>
 800f184:	2300      	movs	r3, #0
 800f186:	2200      	movs	r2, #0
 800f188:	2100      	movs	r1, #0
 800f18a:	68f8      	ldr	r0, [r7, #12]
 800f18c:	f000 fa14 	bl	800f5b8 <xQueueGenericSend>
    return sema;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	e000      	b.n	800f196 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800f194:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800f196:	4618      	mov	r0, r3
 800f198:	3710      	adds	r7, #16
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
	...

0800f1a0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b084      	sub	sp, #16
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
 800f1a8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d101      	bne.n	800f1b8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800f1b4:	2380      	movs	r3, #128	@ 0x80
 800f1b6:	e03a      	b.n	800f22e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1c2:	d103      	bne.n	800f1cc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800f1c4:	f04f 33ff 	mov.w	r3, #4294967295
 800f1c8:	60fb      	str	r3, [r7, #12]
 800f1ca:	e009      	b.n	800f1e0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d006      	beq.n	800f1e0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d101      	bne.n	800f1e0 <osSemaphoreWait+0x40>
      ticks = 1;
 800f1dc:	2301      	movs	r3, #1
 800f1de:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f1e0:	f7ff ffad 	bl	800f13e <inHandlerMode>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d017      	beq.n	800f21a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f1ea:	f107 0308 	add.w	r3, r7, #8
 800f1ee:	461a      	mov	r2, r3
 800f1f0:	2100      	movs	r1, #0
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f000 fd64 	bl	800fcc0 <xQueueReceiveFromISR>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	2b01      	cmp	r3, #1
 800f1fc:	d001      	beq.n	800f202 <osSemaphoreWait+0x62>
      return osErrorOS;
 800f1fe:	23ff      	movs	r3, #255	@ 0xff
 800f200:	e015      	b.n	800f22e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d011      	beq.n	800f22c <osSemaphoreWait+0x8c>
 800f208:	4b0b      	ldr	r3, [pc, #44]	@ (800f238 <osSemaphoreWait+0x98>)
 800f20a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f20e:	601a      	str	r2, [r3, #0]
 800f210:	f3bf 8f4f 	dsb	sy
 800f214:	f3bf 8f6f 	isb	sy
 800f218:	e008      	b.n	800f22c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800f21a:	68f9      	ldr	r1, [r7, #12]
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f000 fc3f 	bl	800faa0 <xQueueSemaphoreTake>
 800f222:	4603      	mov	r3, r0
 800f224:	2b01      	cmp	r3, #1
 800f226:	d001      	beq.n	800f22c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800f228:	23ff      	movs	r3, #255	@ 0xff
 800f22a:	e000      	b.n	800f22e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800f22c:	2300      	movs	r3, #0
}
 800f22e:	4618      	mov	r0, r3
 800f230:	3710      	adds	r7, #16
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}
 800f236:	bf00      	nop
 800f238:	e000ed04 	.word	0xe000ed04

0800f23c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b084      	sub	sp, #16
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f244:	2300      	movs	r3, #0
 800f246:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800f248:	2300      	movs	r3, #0
 800f24a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800f24c:	f7ff ff77 	bl	800f13e <inHandlerMode>
 800f250:	4603      	mov	r3, r0
 800f252:	2b00      	cmp	r3, #0
 800f254:	d016      	beq.n	800f284 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f256:	f107 0308 	add.w	r3, r7, #8
 800f25a:	4619      	mov	r1, r3
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f000 faad 	bl	800f7bc <xQueueGiveFromISR>
 800f262:	4603      	mov	r3, r0
 800f264:	2b01      	cmp	r3, #1
 800f266:	d001      	beq.n	800f26c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800f268:	23ff      	movs	r3, #255	@ 0xff
 800f26a:	e017      	b.n	800f29c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d013      	beq.n	800f29a <osSemaphoreRelease+0x5e>
 800f272:	4b0c      	ldr	r3, [pc, #48]	@ (800f2a4 <osSemaphoreRelease+0x68>)
 800f274:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f278:	601a      	str	r2, [r3, #0]
 800f27a:	f3bf 8f4f 	dsb	sy
 800f27e:	f3bf 8f6f 	isb	sy
 800f282:	e00a      	b.n	800f29a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800f284:	2300      	movs	r3, #0
 800f286:	2200      	movs	r2, #0
 800f288:	2100      	movs	r1, #0
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f000 f994 	bl	800f5b8 <xQueueGenericSend>
 800f290:	4603      	mov	r3, r0
 800f292:	2b01      	cmp	r3, #1
 800f294:	d001      	beq.n	800f29a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800f296:	23ff      	movs	r3, #255	@ 0xff
 800f298:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800f29a:	68fb      	ldr	r3, [r7, #12]
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	3710      	adds	r7, #16
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}
 800f2a4:	e000ed04 	.word	0xe000ed04

0800f2a8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b082      	sub	sp, #8
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800f2b0:	f7ff ff45 	bl	800f13e <inHandlerMode>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d001      	beq.n	800f2be <osSemaphoreDelete+0x16>
    return osErrorISR;
 800f2ba:	2382      	movs	r3, #130	@ 0x82
 800f2bc:	e003      	b.n	800f2c6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f000 fd80 	bl	800fdc4 <vQueueDelete>

  return osOK; 
 800f2c4:	2300      	movs	r3, #0
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3708      	adds	r7, #8
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}

0800f2ce <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f2ce:	b480      	push	{r7}
 800f2d0:	b083      	sub	sp, #12
 800f2d2:	af00      	add	r7, sp, #0
 800f2d4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f103 0208 	add.w	r2, r3, #8
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f04f 32ff 	mov.w	r2, #4294967295
 800f2e6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f103 0208 	add.w	r2, r3, #8
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f103 0208 	add.w	r2, r3, #8
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2200      	movs	r2, #0
 800f300:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f302:	bf00      	nop
 800f304:	370c      	adds	r7, #12
 800f306:	46bd      	mov	sp, r7
 800f308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30c:	4770      	bx	lr

0800f30e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f30e:	b480      	push	{r7}
 800f310:	b083      	sub	sp, #12
 800f312:	af00      	add	r7, sp, #0
 800f314:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2200      	movs	r2, #0
 800f31a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f31c:	bf00      	nop
 800f31e:	370c      	adds	r7, #12
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr

0800f328 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f328:	b480      	push	{r7}
 800f32a:	b085      	sub	sp, #20
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	685b      	ldr	r3, [r3, #4]
 800f336:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	68fa      	ldr	r2, [r7, #12]
 800f33c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	689a      	ldr	r2, [r3, #8]
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	689b      	ldr	r3, [r3, #8]
 800f34a:	683a      	ldr	r2, [r7, #0]
 800f34c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	683a      	ldr	r2, [r7, #0]
 800f352:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	687a      	ldr	r2, [r7, #4]
 800f358:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	1c5a      	adds	r2, r3, #1
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	601a      	str	r2, [r3, #0]
}
 800f364:	bf00      	nop
 800f366:	3714      	adds	r7, #20
 800f368:	46bd      	mov	sp, r7
 800f36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36e:	4770      	bx	lr

0800f370 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f370:	b480      	push	{r7}
 800f372:	b085      	sub	sp, #20
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
 800f378:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f386:	d103      	bne.n	800f390 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	691b      	ldr	r3, [r3, #16]
 800f38c:	60fb      	str	r3, [r7, #12]
 800f38e:	e00c      	b.n	800f3aa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	3308      	adds	r3, #8
 800f394:	60fb      	str	r3, [r7, #12]
 800f396:	e002      	b.n	800f39e <vListInsert+0x2e>
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	685b      	ldr	r3, [r3, #4]
 800f39c:	60fb      	str	r3, [r7, #12]
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	685b      	ldr	r3, [r3, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	68ba      	ldr	r2, [r7, #8]
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	d2f6      	bcs.n	800f398 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	685a      	ldr	r2, [r3, #4]
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	685b      	ldr	r3, [r3, #4]
 800f3b6:	683a      	ldr	r2, [r7, #0]
 800f3b8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	68fa      	ldr	r2, [r7, #12]
 800f3be:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	683a      	ldr	r2, [r7, #0]
 800f3c4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	687a      	ldr	r2, [r7, #4]
 800f3ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	1c5a      	adds	r2, r3, #1
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	601a      	str	r2, [r3, #0]
}
 800f3d6:	bf00      	nop
 800f3d8:	3714      	adds	r7, #20
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e0:	4770      	bx	lr

0800f3e2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f3e2:	b480      	push	{r7}
 800f3e4:	b085      	sub	sp, #20
 800f3e6:	af00      	add	r7, sp, #0
 800f3e8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	691b      	ldr	r3, [r3, #16]
 800f3ee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	685b      	ldr	r3, [r3, #4]
 800f3f4:	687a      	ldr	r2, [r7, #4]
 800f3f6:	6892      	ldr	r2, [r2, #8]
 800f3f8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	689b      	ldr	r3, [r3, #8]
 800f3fe:	687a      	ldr	r2, [r7, #4]
 800f400:	6852      	ldr	r2, [r2, #4]
 800f402:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	685b      	ldr	r3, [r3, #4]
 800f408:	687a      	ldr	r2, [r7, #4]
 800f40a:	429a      	cmp	r2, r3
 800f40c:	d103      	bne.n	800f416 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	689a      	ldr	r2, [r3, #8]
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2200      	movs	r2, #0
 800f41a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	1e5a      	subs	r2, r3, #1
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	681b      	ldr	r3, [r3, #0]
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3714      	adds	r7, #20
 800f42e:	46bd      	mov	sp, r7
 800f430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f434:	4770      	bx	lr
	...

0800f438 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b084      	sub	sp, #16
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d10b      	bne.n	800f464 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f450:	f383 8811 	msr	BASEPRI, r3
 800f454:	f3bf 8f6f 	isb	sy
 800f458:	f3bf 8f4f 	dsb	sy
 800f45c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f45e:	bf00      	nop
 800f460:	bf00      	nop
 800f462:	e7fd      	b.n	800f460 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f464:	f001 fec0 	bl	80111e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	681a      	ldr	r2, [r3, #0]
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f470:	68f9      	ldr	r1, [r7, #12]
 800f472:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f474:	fb01 f303 	mul.w	r3, r1, r3
 800f478:	441a      	add	r2, r3
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	2200      	movs	r2, #0
 800f482:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	681a      	ldr	r2, [r3, #0]
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	681a      	ldr	r2, [r3, #0]
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f494:	3b01      	subs	r3, #1
 800f496:	68f9      	ldr	r1, [r7, #12]
 800f498:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f49a:	fb01 f303 	mul.w	r3, r1, r3
 800f49e:	441a      	add	r2, r3
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	22ff      	movs	r2, #255	@ 0xff
 800f4a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	22ff      	movs	r2, #255	@ 0xff
 800f4b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d114      	bne.n	800f4e4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	691b      	ldr	r3, [r3, #16]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d01a      	beq.n	800f4f8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	3310      	adds	r3, #16
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f001 f998 	bl	80107fc <xTaskRemoveFromEventList>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d012      	beq.n	800f4f8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800f508 <xQueueGenericReset+0xd0>)
 800f4d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4d8:	601a      	str	r2, [r3, #0]
 800f4da:	f3bf 8f4f 	dsb	sy
 800f4de:	f3bf 8f6f 	isb	sy
 800f4e2:	e009      	b.n	800f4f8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	3310      	adds	r3, #16
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f7ff fef0 	bl	800f2ce <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	3324      	adds	r3, #36	@ 0x24
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f7ff feeb 	bl	800f2ce <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f4f8:	f001 fea8 	bl	801124c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f4fc:	2301      	movs	r3, #1
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3710      	adds	r7, #16
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}
 800f506:	bf00      	nop
 800f508:	e000ed04 	.word	0xe000ed04

0800f50c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b08a      	sub	sp, #40	@ 0x28
 800f510:	af02      	add	r7, sp, #8
 800f512:	60f8      	str	r0, [r7, #12]
 800f514:	60b9      	str	r1, [r7, #8]
 800f516:	4613      	mov	r3, r2
 800f518:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d10b      	bne.n	800f538 <xQueueGenericCreate+0x2c>
	__asm volatile
 800f520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f524:	f383 8811 	msr	BASEPRI, r3
 800f528:	f3bf 8f6f 	isb	sy
 800f52c:	f3bf 8f4f 	dsb	sy
 800f530:	613b      	str	r3, [r7, #16]
}
 800f532:	bf00      	nop
 800f534:	bf00      	nop
 800f536:	e7fd      	b.n	800f534 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	68ba      	ldr	r2, [r7, #8]
 800f53c:	fb02 f303 	mul.w	r3, r2, r3
 800f540:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f542:	69fb      	ldr	r3, [r7, #28]
 800f544:	3348      	adds	r3, #72	@ 0x48
 800f546:	4618      	mov	r0, r3
 800f548:	f001 ff70 	bl	801142c <pvPortMalloc>
 800f54c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f54e:	69bb      	ldr	r3, [r7, #24]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d00d      	beq.n	800f570 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f554:	69bb      	ldr	r3, [r7, #24]
 800f556:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	3348      	adds	r3, #72	@ 0x48
 800f55c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f55e:	79fa      	ldrb	r2, [r7, #7]
 800f560:	69bb      	ldr	r3, [r7, #24]
 800f562:	9300      	str	r3, [sp, #0]
 800f564:	4613      	mov	r3, r2
 800f566:	697a      	ldr	r2, [r7, #20]
 800f568:	68b9      	ldr	r1, [r7, #8]
 800f56a:	68f8      	ldr	r0, [r7, #12]
 800f56c:	f000 f805 	bl	800f57a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f570:	69bb      	ldr	r3, [r7, #24]
	}
 800f572:	4618      	mov	r0, r3
 800f574:	3720      	adds	r7, #32
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}

0800f57a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f57a:	b580      	push	{r7, lr}
 800f57c:	b084      	sub	sp, #16
 800f57e:	af00      	add	r7, sp, #0
 800f580:	60f8      	str	r0, [r7, #12]
 800f582:	60b9      	str	r1, [r7, #8]
 800f584:	607a      	str	r2, [r7, #4]
 800f586:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d103      	bne.n	800f596 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f58e:	69bb      	ldr	r3, [r7, #24]
 800f590:	69ba      	ldr	r2, [r7, #24]
 800f592:	601a      	str	r2, [r3, #0]
 800f594:	e002      	b.n	800f59c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f596:	69bb      	ldr	r3, [r7, #24]
 800f598:	687a      	ldr	r2, [r7, #4]
 800f59a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f59c:	69bb      	ldr	r3, [r7, #24]
 800f59e:	68fa      	ldr	r2, [r7, #12]
 800f5a0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f5a2:	69bb      	ldr	r3, [r7, #24]
 800f5a4:	68ba      	ldr	r2, [r7, #8]
 800f5a6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f5a8:	2101      	movs	r1, #1
 800f5aa:	69b8      	ldr	r0, [r7, #24]
 800f5ac:	f7ff ff44 	bl	800f438 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f5b0:	bf00      	nop
 800f5b2:	3710      	adds	r7, #16
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}

0800f5b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b08e      	sub	sp, #56	@ 0x38
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	60f8      	str	r0, [r7, #12]
 800f5c0:	60b9      	str	r1, [r7, #8]
 800f5c2:	607a      	str	r2, [r7, #4]
 800f5c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d10b      	bne.n	800f5ec <xQueueGenericSend+0x34>
	__asm volatile
 800f5d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5d8:	f383 8811 	msr	BASEPRI, r3
 800f5dc:	f3bf 8f6f 	isb	sy
 800f5e0:	f3bf 8f4f 	dsb	sy
 800f5e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f5e6:	bf00      	nop
 800f5e8:	bf00      	nop
 800f5ea:	e7fd      	b.n	800f5e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d103      	bne.n	800f5fa <xQueueGenericSend+0x42>
 800f5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d101      	bne.n	800f5fe <xQueueGenericSend+0x46>
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	e000      	b.n	800f600 <xQueueGenericSend+0x48>
 800f5fe:	2300      	movs	r3, #0
 800f600:	2b00      	cmp	r3, #0
 800f602:	d10b      	bne.n	800f61c <xQueueGenericSend+0x64>
	__asm volatile
 800f604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f608:	f383 8811 	msr	BASEPRI, r3
 800f60c:	f3bf 8f6f 	isb	sy
 800f610:	f3bf 8f4f 	dsb	sy
 800f614:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f616:	bf00      	nop
 800f618:	bf00      	nop
 800f61a:	e7fd      	b.n	800f618 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	2b02      	cmp	r3, #2
 800f620:	d103      	bne.n	800f62a <xQueueGenericSend+0x72>
 800f622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f626:	2b01      	cmp	r3, #1
 800f628:	d101      	bne.n	800f62e <xQueueGenericSend+0x76>
 800f62a:	2301      	movs	r3, #1
 800f62c:	e000      	b.n	800f630 <xQueueGenericSend+0x78>
 800f62e:	2300      	movs	r3, #0
 800f630:	2b00      	cmp	r3, #0
 800f632:	d10b      	bne.n	800f64c <xQueueGenericSend+0x94>
	__asm volatile
 800f634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f638:	f383 8811 	msr	BASEPRI, r3
 800f63c:	f3bf 8f6f 	isb	sy
 800f640:	f3bf 8f4f 	dsb	sy
 800f644:	623b      	str	r3, [r7, #32]
}
 800f646:	bf00      	nop
 800f648:	bf00      	nop
 800f64a:	e7fd      	b.n	800f648 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f64c:	f001 fa76 	bl	8010b3c <xTaskGetSchedulerState>
 800f650:	4603      	mov	r3, r0
 800f652:	2b00      	cmp	r3, #0
 800f654:	d102      	bne.n	800f65c <xQueueGenericSend+0xa4>
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d101      	bne.n	800f660 <xQueueGenericSend+0xa8>
 800f65c:	2301      	movs	r3, #1
 800f65e:	e000      	b.n	800f662 <xQueueGenericSend+0xaa>
 800f660:	2300      	movs	r3, #0
 800f662:	2b00      	cmp	r3, #0
 800f664:	d10b      	bne.n	800f67e <xQueueGenericSend+0xc6>
	__asm volatile
 800f666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f66a:	f383 8811 	msr	BASEPRI, r3
 800f66e:	f3bf 8f6f 	isb	sy
 800f672:	f3bf 8f4f 	dsb	sy
 800f676:	61fb      	str	r3, [r7, #28]
}
 800f678:	bf00      	nop
 800f67a:	bf00      	nop
 800f67c:	e7fd      	b.n	800f67a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f67e:	f001 fdb3 	bl	80111e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f684:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d302      	bcc.n	800f694 <xQueueGenericSend+0xdc>
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	2b02      	cmp	r3, #2
 800f692:	d129      	bne.n	800f6e8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f694:	683a      	ldr	r2, [r7, #0]
 800f696:	68b9      	ldr	r1, [r7, #8]
 800f698:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f69a:	f000 fbca 	bl	800fe32 <prvCopyDataToQueue>
 800f69e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d010      	beq.n	800f6ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6aa:	3324      	adds	r3, #36	@ 0x24
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f001 f8a5 	bl	80107fc <xTaskRemoveFromEventList>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d013      	beq.n	800f6e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f6b8:	4b3f      	ldr	r3, [pc, #252]	@ (800f7b8 <xQueueGenericSend+0x200>)
 800f6ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f6be:	601a      	str	r2, [r3, #0]
 800f6c0:	f3bf 8f4f 	dsb	sy
 800f6c4:	f3bf 8f6f 	isb	sy
 800f6c8:	e00a      	b.n	800f6e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f6ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d007      	beq.n	800f6e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f6d0:	4b39      	ldr	r3, [pc, #228]	@ (800f7b8 <xQueueGenericSend+0x200>)
 800f6d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f6d6:	601a      	str	r2, [r3, #0]
 800f6d8:	f3bf 8f4f 	dsb	sy
 800f6dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f6e0:	f001 fdb4 	bl	801124c <vPortExitCritical>
				return pdPASS;
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	e063      	b.n	800f7b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d103      	bne.n	800f6f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f6ee:	f001 fdad 	bl	801124c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	e05c      	b.n	800f7b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f6f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d106      	bne.n	800f70a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f6fc:	f107 0314 	add.w	r3, r7, #20
 800f700:	4618      	mov	r0, r3
 800f702:	f001 f8df 	bl	80108c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f706:	2301      	movs	r3, #1
 800f708:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f70a:	f001 fd9f 	bl	801124c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f70e:	f000 fe7d 	bl	801040c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f712:	f001 fd69 	bl	80111e8 <vPortEnterCritical>
 800f716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f718:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f71c:	b25b      	sxtb	r3, r3
 800f71e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f722:	d103      	bne.n	800f72c <xQueueGenericSend+0x174>
 800f724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f726:	2200      	movs	r2, #0
 800f728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f72e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f732:	b25b      	sxtb	r3, r3
 800f734:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f738:	d103      	bne.n	800f742 <xQueueGenericSend+0x18a>
 800f73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f73c:	2200      	movs	r2, #0
 800f73e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f742:	f001 fd83 	bl	801124c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f746:	1d3a      	adds	r2, r7, #4
 800f748:	f107 0314 	add.w	r3, r7, #20
 800f74c:	4611      	mov	r1, r2
 800f74e:	4618      	mov	r0, r3
 800f750:	f001 f8ce 	bl	80108f0 <xTaskCheckForTimeOut>
 800f754:	4603      	mov	r3, r0
 800f756:	2b00      	cmp	r3, #0
 800f758:	d124      	bne.n	800f7a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f75a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f75c:	f000 fc61 	bl	8010022 <prvIsQueueFull>
 800f760:	4603      	mov	r3, r0
 800f762:	2b00      	cmp	r3, #0
 800f764:	d018      	beq.n	800f798 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f768:	3310      	adds	r3, #16
 800f76a:	687a      	ldr	r2, [r7, #4]
 800f76c:	4611      	mov	r1, r2
 800f76e:	4618      	mov	r0, r3
 800f770:	f001 f81e 	bl	80107b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f774:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f776:	f000 fbec 	bl	800ff52 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f77a:	f000 fe55 	bl	8010428 <xTaskResumeAll>
 800f77e:	4603      	mov	r3, r0
 800f780:	2b00      	cmp	r3, #0
 800f782:	f47f af7c 	bne.w	800f67e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800f786:	4b0c      	ldr	r3, [pc, #48]	@ (800f7b8 <xQueueGenericSend+0x200>)
 800f788:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f78c:	601a      	str	r2, [r3, #0]
 800f78e:	f3bf 8f4f 	dsb	sy
 800f792:	f3bf 8f6f 	isb	sy
 800f796:	e772      	b.n	800f67e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f798:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f79a:	f000 fbda 	bl	800ff52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f79e:	f000 fe43 	bl	8010428 <xTaskResumeAll>
 800f7a2:	e76c      	b.n	800f67e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f7a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f7a6:	f000 fbd4 	bl	800ff52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f7aa:	f000 fe3d 	bl	8010428 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f7ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	3738      	adds	r7, #56	@ 0x38
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}
 800f7b8:	e000ed04 	.word	0xe000ed04

0800f7bc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b08e      	sub	sp, #56	@ 0x38
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
 800f7c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d10b      	bne.n	800f7e8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800f7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7d4:	f383 8811 	msr	BASEPRI, r3
 800f7d8:	f3bf 8f6f 	isb	sy
 800f7dc:	f3bf 8f4f 	dsb	sy
 800f7e0:	623b      	str	r3, [r7, #32]
}
 800f7e2:	bf00      	nop
 800f7e4:	bf00      	nop
 800f7e6:	e7fd      	b.n	800f7e4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f7e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d00b      	beq.n	800f808 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800f7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7f4:	f383 8811 	msr	BASEPRI, r3
 800f7f8:	f3bf 8f6f 	isb	sy
 800f7fc:	f3bf 8f4f 	dsb	sy
 800f800:	61fb      	str	r3, [r7, #28]
}
 800f802:	bf00      	nop
 800f804:	bf00      	nop
 800f806:	e7fd      	b.n	800f804 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d103      	bne.n	800f818 <xQueueGiveFromISR+0x5c>
 800f810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f812:	689b      	ldr	r3, [r3, #8]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d101      	bne.n	800f81c <xQueueGiveFromISR+0x60>
 800f818:	2301      	movs	r3, #1
 800f81a:	e000      	b.n	800f81e <xQueueGiveFromISR+0x62>
 800f81c:	2300      	movs	r3, #0
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d10b      	bne.n	800f83a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800f822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f826:	f383 8811 	msr	BASEPRI, r3
 800f82a:	f3bf 8f6f 	isb	sy
 800f82e:	f3bf 8f4f 	dsb	sy
 800f832:	61bb      	str	r3, [r7, #24]
}
 800f834:	bf00      	nop
 800f836:	bf00      	nop
 800f838:	e7fd      	b.n	800f836 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f83a:	f001 fdb5 	bl	80113a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f83e:	f3ef 8211 	mrs	r2, BASEPRI
 800f842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f846:	f383 8811 	msr	BASEPRI, r3
 800f84a:	f3bf 8f6f 	isb	sy
 800f84e:	f3bf 8f4f 	dsb	sy
 800f852:	617a      	str	r2, [r7, #20]
 800f854:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f856:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f858:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f85c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f85e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f864:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f866:	429a      	cmp	r2, r3
 800f868:	d22b      	bcs.n	800f8c2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f86c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f870:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f876:	1c5a      	adds	r2, r3, #1
 800f878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f87a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f87c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f880:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f884:	d112      	bne.n	800f8ac <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d016      	beq.n	800f8bc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f890:	3324      	adds	r3, #36	@ 0x24
 800f892:	4618      	mov	r0, r3
 800f894:	f000 ffb2 	bl	80107fc <xTaskRemoveFromEventList>
 800f898:	4603      	mov	r3, r0
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d00e      	beq.n	800f8bc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d00b      	beq.n	800f8bc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	2201      	movs	r2, #1
 800f8a8:	601a      	str	r2, [r3, #0]
 800f8aa:	e007      	b.n	800f8bc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f8ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f8b0:	3301      	adds	r3, #1
 800f8b2:	b2db      	uxtb	r3, r3
 800f8b4:	b25a      	sxtb	r2, r3
 800f8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f8bc:	2301      	movs	r3, #1
 800f8be:	637b      	str	r3, [r7, #52]	@ 0x34
 800f8c0:	e001      	b.n	800f8c6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800f8c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8c8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f8d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f8d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3738      	adds	r7, #56	@ 0x38
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b08c      	sub	sp, #48	@ 0x30
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	60f8      	str	r0, [r7, #12]
 800f8e4:	60b9      	str	r1, [r7, #8]
 800f8e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d10b      	bne.n	800f90e <xQueueReceive+0x32>
	__asm volatile
 800f8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8fa:	f383 8811 	msr	BASEPRI, r3
 800f8fe:	f3bf 8f6f 	isb	sy
 800f902:	f3bf 8f4f 	dsb	sy
 800f906:	623b      	str	r3, [r7, #32]
}
 800f908:	bf00      	nop
 800f90a:	bf00      	nop
 800f90c:	e7fd      	b.n	800f90a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f90e:	68bb      	ldr	r3, [r7, #8]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d103      	bne.n	800f91c <xQueueReceive+0x40>
 800f914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d101      	bne.n	800f920 <xQueueReceive+0x44>
 800f91c:	2301      	movs	r3, #1
 800f91e:	e000      	b.n	800f922 <xQueueReceive+0x46>
 800f920:	2300      	movs	r3, #0
 800f922:	2b00      	cmp	r3, #0
 800f924:	d10b      	bne.n	800f93e <xQueueReceive+0x62>
	__asm volatile
 800f926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f92a:	f383 8811 	msr	BASEPRI, r3
 800f92e:	f3bf 8f6f 	isb	sy
 800f932:	f3bf 8f4f 	dsb	sy
 800f936:	61fb      	str	r3, [r7, #28]
}
 800f938:	bf00      	nop
 800f93a:	bf00      	nop
 800f93c:	e7fd      	b.n	800f93a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f93e:	f001 f8fd 	bl	8010b3c <xTaskGetSchedulerState>
 800f942:	4603      	mov	r3, r0
 800f944:	2b00      	cmp	r3, #0
 800f946:	d102      	bne.n	800f94e <xQueueReceive+0x72>
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d101      	bne.n	800f952 <xQueueReceive+0x76>
 800f94e:	2301      	movs	r3, #1
 800f950:	e000      	b.n	800f954 <xQueueReceive+0x78>
 800f952:	2300      	movs	r3, #0
 800f954:	2b00      	cmp	r3, #0
 800f956:	d10b      	bne.n	800f970 <xQueueReceive+0x94>
	__asm volatile
 800f958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f95c:	f383 8811 	msr	BASEPRI, r3
 800f960:	f3bf 8f6f 	isb	sy
 800f964:	f3bf 8f4f 	dsb	sy
 800f968:	61bb      	str	r3, [r7, #24]
}
 800f96a:	bf00      	nop
 800f96c:	bf00      	nop
 800f96e:	e7fd      	b.n	800f96c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f970:	f001 fc3a 	bl	80111e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f978:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d01f      	beq.n	800f9c0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f980:	68b9      	ldr	r1, [r7, #8]
 800f982:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f984:	f000 fabf 	bl	800ff06 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f98a:	1e5a      	subs	r2, r3, #1
 800f98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f98e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f992:	691b      	ldr	r3, [r3, #16]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d00f      	beq.n	800f9b8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f99a:	3310      	adds	r3, #16
 800f99c:	4618      	mov	r0, r3
 800f99e:	f000 ff2d 	bl	80107fc <xTaskRemoveFromEventList>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d007      	beq.n	800f9b8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f9a8:	4b3c      	ldr	r3, [pc, #240]	@ (800fa9c <xQueueReceive+0x1c0>)
 800f9aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f9ae:	601a      	str	r2, [r3, #0]
 800f9b0:	f3bf 8f4f 	dsb	sy
 800f9b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f9b8:	f001 fc48 	bl	801124c <vPortExitCritical>
				return pdPASS;
 800f9bc:	2301      	movs	r3, #1
 800f9be:	e069      	b.n	800fa94 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d103      	bne.n	800f9ce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f9c6:	f001 fc41 	bl	801124c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	e062      	b.n	800fa94 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f9ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d106      	bne.n	800f9e2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f9d4:	f107 0310 	add.w	r3, r7, #16
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f000 ff73 	bl	80108c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f9de:	2301      	movs	r3, #1
 800f9e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f9e2:	f001 fc33 	bl	801124c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f9e6:	f000 fd11 	bl	801040c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f9ea:	f001 fbfd 	bl	80111e8 <vPortEnterCritical>
 800f9ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f9f4:	b25b      	sxtb	r3, r3
 800f9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9fa:	d103      	bne.n	800fa04 <xQueueReceive+0x128>
 800f9fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9fe:	2200      	movs	r2, #0
 800fa00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fa04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fa0a:	b25b      	sxtb	r3, r3
 800fa0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa10:	d103      	bne.n	800fa1a <xQueueReceive+0x13e>
 800fa12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa14:	2200      	movs	r2, #0
 800fa16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fa1a:	f001 fc17 	bl	801124c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fa1e:	1d3a      	adds	r2, r7, #4
 800fa20:	f107 0310 	add.w	r3, r7, #16
 800fa24:	4611      	mov	r1, r2
 800fa26:	4618      	mov	r0, r3
 800fa28:	f000 ff62 	bl	80108f0 <xTaskCheckForTimeOut>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d123      	bne.n	800fa7a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fa32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa34:	f000 fadf 	bl	800fff6 <prvIsQueueEmpty>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d017      	beq.n	800fa6e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fa3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa40:	3324      	adds	r3, #36	@ 0x24
 800fa42:	687a      	ldr	r2, [r7, #4]
 800fa44:	4611      	mov	r1, r2
 800fa46:	4618      	mov	r0, r3
 800fa48:	f000 feb2 	bl	80107b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fa4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa4e:	f000 fa80 	bl	800ff52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fa52:	f000 fce9 	bl	8010428 <xTaskResumeAll>
 800fa56:	4603      	mov	r3, r0
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d189      	bne.n	800f970 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800fa5c:	4b0f      	ldr	r3, [pc, #60]	@ (800fa9c <xQueueReceive+0x1c0>)
 800fa5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa62:	601a      	str	r2, [r3, #0]
 800fa64:	f3bf 8f4f 	dsb	sy
 800fa68:	f3bf 8f6f 	isb	sy
 800fa6c:	e780      	b.n	800f970 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fa6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa70:	f000 fa6f 	bl	800ff52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fa74:	f000 fcd8 	bl	8010428 <xTaskResumeAll>
 800fa78:	e77a      	b.n	800f970 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fa7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa7c:	f000 fa69 	bl	800ff52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fa80:	f000 fcd2 	bl	8010428 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fa84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa86:	f000 fab6 	bl	800fff6 <prvIsQueueEmpty>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	f43f af6f 	beq.w	800f970 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fa92:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3730      	adds	r7, #48	@ 0x30
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}
 800fa9c:	e000ed04 	.word	0xe000ed04

0800faa0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b08e      	sub	sp, #56	@ 0x38
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800faaa:	2300      	movs	r3, #0
 800faac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fab2:	2300      	movs	r3, #0
 800fab4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d10b      	bne.n	800fad4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800fabc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fac0:	f383 8811 	msr	BASEPRI, r3
 800fac4:	f3bf 8f6f 	isb	sy
 800fac8:	f3bf 8f4f 	dsb	sy
 800facc:	623b      	str	r3, [r7, #32]
}
 800face:	bf00      	nop
 800fad0:	bf00      	nop
 800fad2:	e7fd      	b.n	800fad0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d00b      	beq.n	800faf4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800fadc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fae0:	f383 8811 	msr	BASEPRI, r3
 800fae4:	f3bf 8f6f 	isb	sy
 800fae8:	f3bf 8f4f 	dsb	sy
 800faec:	61fb      	str	r3, [r7, #28]
}
 800faee:	bf00      	nop
 800faf0:	bf00      	nop
 800faf2:	e7fd      	b.n	800faf0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800faf4:	f001 f822 	bl	8010b3c <xTaskGetSchedulerState>
 800faf8:	4603      	mov	r3, r0
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d102      	bne.n	800fb04 <xQueueSemaphoreTake+0x64>
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d101      	bne.n	800fb08 <xQueueSemaphoreTake+0x68>
 800fb04:	2301      	movs	r3, #1
 800fb06:	e000      	b.n	800fb0a <xQueueSemaphoreTake+0x6a>
 800fb08:	2300      	movs	r3, #0
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d10b      	bne.n	800fb26 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800fb0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb12:	f383 8811 	msr	BASEPRI, r3
 800fb16:	f3bf 8f6f 	isb	sy
 800fb1a:	f3bf 8f4f 	dsb	sy
 800fb1e:	61bb      	str	r3, [r7, #24]
}
 800fb20:	bf00      	nop
 800fb22:	bf00      	nop
 800fb24:	e7fd      	b.n	800fb22 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fb26:	f001 fb5f 	bl	80111e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fb2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb2e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fb30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d024      	beq.n	800fb80 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fb36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb38:	1e5a      	subs	r2, r3, #1
 800fb3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb3c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fb3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d104      	bne.n	800fb50 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fb46:	f001 f9a5 	bl	8010e94 <pvTaskIncrementMutexHeldCount>
 800fb4a:	4602      	mov	r2, r0
 800fb4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb4e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb52:	691b      	ldr	r3, [r3, #16]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d00f      	beq.n	800fb78 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb5a:	3310      	adds	r3, #16
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f000 fe4d 	bl	80107fc <xTaskRemoveFromEventList>
 800fb62:	4603      	mov	r3, r0
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d007      	beq.n	800fb78 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fb68:	4b54      	ldr	r3, [pc, #336]	@ (800fcbc <xQueueSemaphoreTake+0x21c>)
 800fb6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb6e:	601a      	str	r2, [r3, #0]
 800fb70:	f3bf 8f4f 	dsb	sy
 800fb74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fb78:	f001 fb68 	bl	801124c <vPortExitCritical>
				return pdPASS;
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	e098      	b.n	800fcb2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d112      	bne.n	800fbac <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d00b      	beq.n	800fba4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800fb8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb90:	f383 8811 	msr	BASEPRI, r3
 800fb94:	f3bf 8f6f 	isb	sy
 800fb98:	f3bf 8f4f 	dsb	sy
 800fb9c:	617b      	str	r3, [r7, #20]
}
 800fb9e:	bf00      	nop
 800fba0:	bf00      	nop
 800fba2:	e7fd      	b.n	800fba0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fba4:	f001 fb52 	bl	801124c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	e082      	b.n	800fcb2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fbac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d106      	bne.n	800fbc0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fbb2:	f107 030c 	add.w	r3, r7, #12
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f000 fe84 	bl	80108c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fbbc:	2301      	movs	r3, #1
 800fbbe:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fbc0:	f001 fb44 	bl	801124c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fbc4:	f000 fc22 	bl	801040c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fbc8:	f001 fb0e 	bl	80111e8 <vPortEnterCritical>
 800fbcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fbd2:	b25b      	sxtb	r3, r3
 800fbd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbd8:	d103      	bne.n	800fbe2 <xQueueSemaphoreTake+0x142>
 800fbda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbdc:	2200      	movs	r2, #0
 800fbde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fbe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbe4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fbe8:	b25b      	sxtb	r3, r3
 800fbea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbee:	d103      	bne.n	800fbf8 <xQueueSemaphoreTake+0x158>
 800fbf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fbf8:	f001 fb28 	bl	801124c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fbfc:	463a      	mov	r2, r7
 800fbfe:	f107 030c 	add.w	r3, r7, #12
 800fc02:	4611      	mov	r1, r2
 800fc04:	4618      	mov	r0, r3
 800fc06:	f000 fe73 	bl	80108f0 <xTaskCheckForTimeOut>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d132      	bne.n	800fc76 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fc10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc12:	f000 f9f0 	bl	800fff6 <prvIsQueueEmpty>
 800fc16:	4603      	mov	r3, r0
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d026      	beq.n	800fc6a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fc1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d109      	bne.n	800fc38 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800fc24:	f001 fae0 	bl	80111e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fc28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc2a:	689b      	ldr	r3, [r3, #8]
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f000 ffa3 	bl	8010b78 <xTaskPriorityInherit>
 800fc32:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800fc34:	f001 fb0a 	bl	801124c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fc38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc3a:	3324      	adds	r3, #36	@ 0x24
 800fc3c:	683a      	ldr	r2, [r7, #0]
 800fc3e:	4611      	mov	r1, r2
 800fc40:	4618      	mov	r0, r3
 800fc42:	f000 fdb5 	bl	80107b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fc46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc48:	f000 f983 	bl	800ff52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fc4c:	f000 fbec 	bl	8010428 <xTaskResumeAll>
 800fc50:	4603      	mov	r3, r0
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	f47f af67 	bne.w	800fb26 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800fc58:	4b18      	ldr	r3, [pc, #96]	@ (800fcbc <xQueueSemaphoreTake+0x21c>)
 800fc5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc5e:	601a      	str	r2, [r3, #0]
 800fc60:	f3bf 8f4f 	dsb	sy
 800fc64:	f3bf 8f6f 	isb	sy
 800fc68:	e75d      	b.n	800fb26 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fc6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc6c:	f000 f971 	bl	800ff52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fc70:	f000 fbda 	bl	8010428 <xTaskResumeAll>
 800fc74:	e757      	b.n	800fb26 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fc76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc78:	f000 f96b 	bl	800ff52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fc7c:	f000 fbd4 	bl	8010428 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fc80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc82:	f000 f9b8 	bl	800fff6 <prvIsQueueEmpty>
 800fc86:	4603      	mov	r3, r0
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	f43f af4c 	beq.w	800fb26 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d00d      	beq.n	800fcb0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800fc94:	f001 faa8 	bl	80111e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fc98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc9a:	f000 f8b2 	bl	800fe02 <prvGetDisinheritPriorityAfterTimeout>
 800fc9e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fca2:	689b      	ldr	r3, [r3, #8]
 800fca4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fca6:	4618      	mov	r0, r3
 800fca8:	f001 f864 	bl	8010d74 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fcac:	f001 face 	bl	801124c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fcb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3738      	adds	r7, #56	@ 0x38
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}
 800fcba:	bf00      	nop
 800fcbc:	e000ed04 	.word	0xe000ed04

0800fcc0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b08e      	sub	sp, #56	@ 0x38
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	60f8      	str	r0, [r7, #12]
 800fcc8:	60b9      	str	r1, [r7, #8]
 800fcca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fcd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d10b      	bne.n	800fcee <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800fcd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcda:	f383 8811 	msr	BASEPRI, r3
 800fcde:	f3bf 8f6f 	isb	sy
 800fce2:	f3bf 8f4f 	dsb	sy
 800fce6:	623b      	str	r3, [r7, #32]
}
 800fce8:	bf00      	nop
 800fcea:	bf00      	nop
 800fcec:	e7fd      	b.n	800fcea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d103      	bne.n	800fcfc <xQueueReceiveFromISR+0x3c>
 800fcf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d101      	bne.n	800fd00 <xQueueReceiveFromISR+0x40>
 800fcfc:	2301      	movs	r3, #1
 800fcfe:	e000      	b.n	800fd02 <xQueueReceiveFromISR+0x42>
 800fd00:	2300      	movs	r3, #0
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d10b      	bne.n	800fd1e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800fd06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd0a:	f383 8811 	msr	BASEPRI, r3
 800fd0e:	f3bf 8f6f 	isb	sy
 800fd12:	f3bf 8f4f 	dsb	sy
 800fd16:	61fb      	str	r3, [r7, #28]
}
 800fd18:	bf00      	nop
 800fd1a:	bf00      	nop
 800fd1c:	e7fd      	b.n	800fd1a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fd1e:	f001 fb43 	bl	80113a8 <vPortValidateInterruptPriority>
	__asm volatile
 800fd22:	f3ef 8211 	mrs	r2, BASEPRI
 800fd26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd2a:	f383 8811 	msr	BASEPRI, r3
 800fd2e:	f3bf 8f6f 	isb	sy
 800fd32:	f3bf 8f4f 	dsb	sy
 800fd36:	61ba      	str	r2, [r7, #24]
 800fd38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fd3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fd3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fd3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd42:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fd44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d02f      	beq.n	800fdaa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fd4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fd50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fd54:	68b9      	ldr	r1, [r7, #8]
 800fd56:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fd58:	f000 f8d5 	bl	800ff06 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fd5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd5e:	1e5a      	subs	r2, r3, #1
 800fd60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd62:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fd64:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fd68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd6c:	d112      	bne.n	800fd94 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd70:	691b      	ldr	r3, [r3, #16]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d016      	beq.n	800fda4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd78:	3310      	adds	r3, #16
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f000 fd3e 	bl	80107fc <xTaskRemoveFromEventList>
 800fd80:	4603      	mov	r3, r0
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d00e      	beq.n	800fda4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d00b      	beq.n	800fda4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2201      	movs	r2, #1
 800fd90:	601a      	str	r2, [r3, #0]
 800fd92:	e007      	b.n	800fda4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800fd94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd98:	3301      	adds	r3, #1
 800fd9a:	b2db      	uxtb	r3, r3
 800fd9c:	b25a      	sxtb	r2, r3
 800fd9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fda0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800fda4:	2301      	movs	r3, #1
 800fda6:	637b      	str	r3, [r7, #52]	@ 0x34
 800fda8:	e001      	b.n	800fdae <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	637b      	str	r3, [r7, #52]	@ 0x34
 800fdae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdb0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fdb2:	693b      	ldr	r3, [r7, #16]
 800fdb4:	f383 8811 	msr	BASEPRI, r3
}
 800fdb8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fdba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3738      	adds	r7, #56	@ 0x38
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}

0800fdc4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b084      	sub	sp, #16
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d10b      	bne.n	800fdee <vQueueDelete+0x2a>
	__asm volatile
 800fdd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdda:	f383 8811 	msr	BASEPRI, r3
 800fdde:	f3bf 8f6f 	isb	sy
 800fde2:	f3bf 8f4f 	dsb	sy
 800fde6:	60bb      	str	r3, [r7, #8]
}
 800fde8:	bf00      	nop
 800fdea:	bf00      	nop
 800fdec:	e7fd      	b.n	800fdea <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800fdee:	68f8      	ldr	r0, [r7, #12]
 800fdf0:	f000 f930 	bl	8010054 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800fdf4:	68f8      	ldr	r0, [r7, #12]
 800fdf6:	f001 fbe7 	bl	80115c8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800fdfa:	bf00      	nop
 800fdfc:	3710      	adds	r7, #16
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bd80      	pop	{r7, pc}

0800fe02 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fe02:	b480      	push	{r7}
 800fe04:	b085      	sub	sp, #20
 800fe06:	af00      	add	r7, sp, #0
 800fe08:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d006      	beq.n	800fe20 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	f1c3 0307 	rsb	r3, r3, #7
 800fe1c:	60fb      	str	r3, [r7, #12]
 800fe1e:	e001      	b.n	800fe24 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fe20:	2300      	movs	r3, #0
 800fe22:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800fe24:	68fb      	ldr	r3, [r7, #12]
	}
 800fe26:	4618      	mov	r0, r3
 800fe28:	3714      	adds	r7, #20
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe30:	4770      	bx	lr

0800fe32 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fe32:	b580      	push	{r7, lr}
 800fe34:	b086      	sub	sp, #24
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	60f8      	str	r0, [r7, #12]
 800fe3a:	60b9      	str	r1, [r7, #8]
 800fe3c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe46:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d10d      	bne.n	800fe6c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d14d      	bne.n	800fef4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	689b      	ldr	r3, [r3, #8]
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f000 ff01 	bl	8010c64 <xTaskPriorityDisinherit>
 800fe62:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	2200      	movs	r2, #0
 800fe68:	609a      	str	r2, [r3, #8]
 800fe6a:	e043      	b.n	800fef4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d119      	bne.n	800fea6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	6858      	ldr	r0, [r3, #4]
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe7a:	461a      	mov	r2, r3
 800fe7c:	68b9      	ldr	r1, [r7, #8]
 800fe7e:	f003 fc76 	bl	801376e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	685a      	ldr	r2, [r3, #4]
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe8a:	441a      	add	r2, r3
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	685a      	ldr	r2, [r3, #4]
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	689b      	ldr	r3, [r3, #8]
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	d32b      	bcc.n	800fef4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	681a      	ldr	r2, [r3, #0]
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	605a      	str	r2, [r3, #4]
 800fea4:	e026      	b.n	800fef4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	68d8      	ldr	r0, [r3, #12]
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800feae:	461a      	mov	r2, r3
 800feb0:	68b9      	ldr	r1, [r7, #8]
 800feb2:	f003 fc5c 	bl	801376e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	68da      	ldr	r2, [r3, #12]
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800febe:	425b      	negs	r3, r3
 800fec0:	441a      	add	r2, r3
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	68da      	ldr	r2, [r3, #12]
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	429a      	cmp	r2, r3
 800fed0:	d207      	bcs.n	800fee2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	689a      	ldr	r2, [r3, #8]
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800feda:	425b      	negs	r3, r3
 800fedc:	441a      	add	r2, r3
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2b02      	cmp	r3, #2
 800fee6:	d105      	bne.n	800fef4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fee8:	693b      	ldr	r3, [r7, #16]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d002      	beq.n	800fef4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800feee:	693b      	ldr	r3, [r7, #16]
 800fef0:	3b01      	subs	r3, #1
 800fef2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fef4:	693b      	ldr	r3, [r7, #16]
 800fef6:	1c5a      	adds	r2, r3, #1
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800fefc:	697b      	ldr	r3, [r7, #20]
}
 800fefe:	4618      	mov	r0, r3
 800ff00:	3718      	adds	r7, #24
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}

0800ff06 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ff06:	b580      	push	{r7, lr}
 800ff08:	b082      	sub	sp, #8
 800ff0a:	af00      	add	r7, sp, #0
 800ff0c:	6078      	str	r0, [r7, #4]
 800ff0e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d018      	beq.n	800ff4a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	68da      	ldr	r2, [r3, #12]
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff20:	441a      	add	r2, r3
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	68da      	ldr	r2, [r3, #12]
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	689b      	ldr	r3, [r3, #8]
 800ff2e:	429a      	cmp	r2, r3
 800ff30:	d303      	bcc.n	800ff3a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681a      	ldr	r2, [r3, #0]
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	68d9      	ldr	r1, [r3, #12]
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff42:	461a      	mov	r2, r3
 800ff44:	6838      	ldr	r0, [r7, #0]
 800ff46:	f003 fc12 	bl	801376e <memcpy>
	}
}
 800ff4a:	bf00      	nop
 800ff4c:	3708      	adds	r7, #8
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}

0800ff52 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ff52:	b580      	push	{r7, lr}
 800ff54:	b084      	sub	sp, #16
 800ff56:	af00      	add	r7, sp, #0
 800ff58:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ff5a:	f001 f945 	bl	80111e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ff64:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ff66:	e011      	b.n	800ff8c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d012      	beq.n	800ff96 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	3324      	adds	r3, #36	@ 0x24
 800ff74:	4618      	mov	r0, r3
 800ff76:	f000 fc41 	bl	80107fc <xTaskRemoveFromEventList>
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d001      	beq.n	800ff84 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ff80:	f000 fd1a 	bl	80109b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ff84:	7bfb      	ldrb	r3, [r7, #15]
 800ff86:	3b01      	subs	r3, #1
 800ff88:	b2db      	uxtb	r3, r3
 800ff8a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ff8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	dce9      	bgt.n	800ff68 <prvUnlockQueue+0x16>
 800ff94:	e000      	b.n	800ff98 <prvUnlockQueue+0x46>
					break;
 800ff96:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	22ff      	movs	r2, #255	@ 0xff
 800ff9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ffa0:	f001 f954 	bl	801124c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ffa4:	f001 f920 	bl	80111e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ffae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ffb0:	e011      	b.n	800ffd6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	691b      	ldr	r3, [r3, #16]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d012      	beq.n	800ffe0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	3310      	adds	r3, #16
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f000 fc1c 	bl	80107fc <xTaskRemoveFromEventList>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d001      	beq.n	800ffce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ffca:	f000 fcf5 	bl	80109b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ffce:	7bbb      	ldrb	r3, [r7, #14]
 800ffd0:	3b01      	subs	r3, #1
 800ffd2:	b2db      	uxtb	r3, r3
 800ffd4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ffd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	dce9      	bgt.n	800ffb2 <prvUnlockQueue+0x60>
 800ffde:	e000      	b.n	800ffe2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ffe0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	22ff      	movs	r2, #255	@ 0xff
 800ffe6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ffea:	f001 f92f 	bl	801124c <vPortExitCritical>
}
 800ffee:	bf00      	nop
 800fff0:	3710      	adds	r7, #16
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}

0800fff6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fff6:	b580      	push	{r7, lr}
 800fff8:	b084      	sub	sp, #16
 800fffa:	af00      	add	r7, sp, #0
 800fffc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fffe:	f001 f8f3 	bl	80111e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010006:	2b00      	cmp	r3, #0
 8010008:	d102      	bne.n	8010010 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801000a:	2301      	movs	r3, #1
 801000c:	60fb      	str	r3, [r7, #12]
 801000e:	e001      	b.n	8010014 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010010:	2300      	movs	r3, #0
 8010012:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010014:	f001 f91a 	bl	801124c <vPortExitCritical>

	return xReturn;
 8010018:	68fb      	ldr	r3, [r7, #12]
}
 801001a:	4618      	mov	r0, r3
 801001c:	3710      	adds	r7, #16
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}

08010022 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010022:	b580      	push	{r7, lr}
 8010024:	b084      	sub	sp, #16
 8010026:	af00      	add	r7, sp, #0
 8010028:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801002a:	f001 f8dd 	bl	80111e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010036:	429a      	cmp	r2, r3
 8010038:	d102      	bne.n	8010040 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801003a:	2301      	movs	r3, #1
 801003c:	60fb      	str	r3, [r7, #12]
 801003e:	e001      	b.n	8010044 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010040:	2300      	movs	r3, #0
 8010042:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010044:	f001 f902 	bl	801124c <vPortExitCritical>

	return xReturn;
 8010048:	68fb      	ldr	r3, [r7, #12]
}
 801004a:	4618      	mov	r0, r3
 801004c:	3710      	adds	r7, #16
 801004e:	46bd      	mov	sp, r7
 8010050:	bd80      	pop	{r7, pc}
	...

08010054 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010054:	b480      	push	{r7}
 8010056:	b085      	sub	sp, #20
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801005c:	2300      	movs	r3, #0
 801005e:	60fb      	str	r3, [r7, #12]
 8010060:	e016      	b.n	8010090 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010062:	4a10      	ldr	r2, [pc, #64]	@ (80100a4 <vQueueUnregisterQueue+0x50>)
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	00db      	lsls	r3, r3, #3
 8010068:	4413      	add	r3, r2
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	687a      	ldr	r2, [r7, #4]
 801006e:	429a      	cmp	r2, r3
 8010070:	d10b      	bne.n	801008a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010072:	4a0c      	ldr	r2, [pc, #48]	@ (80100a4 <vQueueUnregisterQueue+0x50>)
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	2100      	movs	r1, #0
 8010078:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801007c:	4a09      	ldr	r2, [pc, #36]	@ (80100a4 <vQueueUnregisterQueue+0x50>)
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	00db      	lsls	r3, r3, #3
 8010082:	4413      	add	r3, r2
 8010084:	2200      	movs	r2, #0
 8010086:	605a      	str	r2, [r3, #4]
				break;
 8010088:	e006      	b.n	8010098 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	3301      	adds	r3, #1
 801008e:	60fb      	str	r3, [r7, #12]
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	2b07      	cmp	r3, #7
 8010094:	d9e5      	bls.n	8010062 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010096:	bf00      	nop
 8010098:	bf00      	nop
 801009a:	3714      	adds	r7, #20
 801009c:	46bd      	mov	sp, r7
 801009e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a2:	4770      	bx	lr
 80100a4:	20002954 	.word	0x20002954

080100a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b08c      	sub	sp, #48	@ 0x30
 80100ac:	af04      	add	r7, sp, #16
 80100ae:	60f8      	str	r0, [r7, #12]
 80100b0:	60b9      	str	r1, [r7, #8]
 80100b2:	603b      	str	r3, [r7, #0]
 80100b4:	4613      	mov	r3, r2
 80100b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80100b8:	88fb      	ldrh	r3, [r7, #6]
 80100ba:	009b      	lsls	r3, r3, #2
 80100bc:	4618      	mov	r0, r3
 80100be:	f001 f9b5 	bl	801142c <pvPortMalloc>
 80100c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80100c4:	697b      	ldr	r3, [r7, #20]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d00e      	beq.n	80100e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80100ca:	2054      	movs	r0, #84	@ 0x54
 80100cc:	f001 f9ae 	bl	801142c <pvPortMalloc>
 80100d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80100d2:	69fb      	ldr	r3, [r7, #28]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d003      	beq.n	80100e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80100d8:	69fb      	ldr	r3, [r7, #28]
 80100da:	697a      	ldr	r2, [r7, #20]
 80100dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80100de:	e005      	b.n	80100ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80100e0:	6978      	ldr	r0, [r7, #20]
 80100e2:	f001 fa71 	bl	80115c8 <vPortFree>
 80100e6:	e001      	b.n	80100ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80100e8:	2300      	movs	r3, #0
 80100ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80100ec:	69fb      	ldr	r3, [r7, #28]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d013      	beq.n	801011a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80100f2:	88fa      	ldrh	r2, [r7, #6]
 80100f4:	2300      	movs	r3, #0
 80100f6:	9303      	str	r3, [sp, #12]
 80100f8:	69fb      	ldr	r3, [r7, #28]
 80100fa:	9302      	str	r3, [sp, #8]
 80100fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100fe:	9301      	str	r3, [sp, #4]
 8010100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010102:	9300      	str	r3, [sp, #0]
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	68b9      	ldr	r1, [r7, #8]
 8010108:	68f8      	ldr	r0, [r7, #12]
 801010a:	f000 f80e 	bl	801012a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801010e:	69f8      	ldr	r0, [r7, #28]
 8010110:	f000 f894 	bl	801023c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010114:	2301      	movs	r3, #1
 8010116:	61bb      	str	r3, [r7, #24]
 8010118:	e002      	b.n	8010120 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801011a:	f04f 33ff 	mov.w	r3, #4294967295
 801011e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010120:	69bb      	ldr	r3, [r7, #24]
	}
 8010122:	4618      	mov	r0, r3
 8010124:	3720      	adds	r7, #32
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}

0801012a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801012a:	b580      	push	{r7, lr}
 801012c:	b088      	sub	sp, #32
 801012e:	af00      	add	r7, sp, #0
 8010130:	60f8      	str	r0, [r7, #12]
 8010132:	60b9      	str	r1, [r7, #8]
 8010134:	607a      	str	r2, [r7, #4]
 8010136:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801013a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010142:	3b01      	subs	r3, #1
 8010144:	009b      	lsls	r3, r3, #2
 8010146:	4413      	add	r3, r2
 8010148:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801014a:	69bb      	ldr	r3, [r7, #24]
 801014c:	f023 0307 	bic.w	r3, r3, #7
 8010150:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010152:	69bb      	ldr	r3, [r7, #24]
 8010154:	f003 0307 	and.w	r3, r3, #7
 8010158:	2b00      	cmp	r3, #0
 801015a:	d00b      	beq.n	8010174 <prvInitialiseNewTask+0x4a>
	__asm volatile
 801015c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010160:	f383 8811 	msr	BASEPRI, r3
 8010164:	f3bf 8f6f 	isb	sy
 8010168:	f3bf 8f4f 	dsb	sy
 801016c:	617b      	str	r3, [r7, #20]
}
 801016e:	bf00      	nop
 8010170:	bf00      	nop
 8010172:	e7fd      	b.n	8010170 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010174:	68bb      	ldr	r3, [r7, #8]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d01f      	beq.n	80101ba <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801017a:	2300      	movs	r3, #0
 801017c:	61fb      	str	r3, [r7, #28]
 801017e:	e012      	b.n	80101a6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010180:	68ba      	ldr	r2, [r7, #8]
 8010182:	69fb      	ldr	r3, [r7, #28]
 8010184:	4413      	add	r3, r2
 8010186:	7819      	ldrb	r1, [r3, #0]
 8010188:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801018a:	69fb      	ldr	r3, [r7, #28]
 801018c:	4413      	add	r3, r2
 801018e:	3334      	adds	r3, #52	@ 0x34
 8010190:	460a      	mov	r2, r1
 8010192:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010194:	68ba      	ldr	r2, [r7, #8]
 8010196:	69fb      	ldr	r3, [r7, #28]
 8010198:	4413      	add	r3, r2
 801019a:	781b      	ldrb	r3, [r3, #0]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d006      	beq.n	80101ae <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80101a0:	69fb      	ldr	r3, [r7, #28]
 80101a2:	3301      	adds	r3, #1
 80101a4:	61fb      	str	r3, [r7, #28]
 80101a6:	69fb      	ldr	r3, [r7, #28]
 80101a8:	2b0f      	cmp	r3, #15
 80101aa:	d9e9      	bls.n	8010180 <prvInitialiseNewTask+0x56>
 80101ac:	e000      	b.n	80101b0 <prvInitialiseNewTask+0x86>
			{
				break;
 80101ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80101b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101b2:	2200      	movs	r2, #0
 80101b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80101b8:	e003      	b.n	80101c2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80101ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101bc:	2200      	movs	r2, #0
 80101be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80101c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101c4:	2b06      	cmp	r3, #6
 80101c6:	d901      	bls.n	80101cc <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80101c8:	2306      	movs	r3, #6
 80101ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80101cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80101d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80101d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80101d6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80101d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101da:	2200      	movs	r2, #0
 80101dc:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80101de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101e0:	3304      	adds	r3, #4
 80101e2:	4618      	mov	r0, r3
 80101e4:	f7ff f893 	bl	800f30e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80101e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101ea:	3318      	adds	r3, #24
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7ff f88e 	bl	800f30e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80101f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80101f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101fa:	f1c3 0207 	rsb	r2, r3, #7
 80101fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010200:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010204:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010206:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801020a:	2200      	movs	r2, #0
 801020c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801020e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010210:	2200      	movs	r2, #0
 8010212:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010216:	683a      	ldr	r2, [r7, #0]
 8010218:	68f9      	ldr	r1, [r7, #12]
 801021a:	69b8      	ldr	r0, [r7, #24]
 801021c:	f000 feb4 	bl	8010f88 <pxPortInitialiseStack>
 8010220:	4602      	mov	r2, r0
 8010222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010224:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010228:	2b00      	cmp	r3, #0
 801022a:	d002      	beq.n	8010232 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801022c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801022e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010230:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010232:	bf00      	nop
 8010234:	3720      	adds	r7, #32
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}
	...

0801023c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b082      	sub	sp, #8
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010244:	f000 ffd0 	bl	80111e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010248:	4b2a      	ldr	r3, [pc, #168]	@ (80102f4 <prvAddNewTaskToReadyList+0xb8>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	3301      	adds	r3, #1
 801024e:	4a29      	ldr	r2, [pc, #164]	@ (80102f4 <prvAddNewTaskToReadyList+0xb8>)
 8010250:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010252:	4b29      	ldr	r3, [pc, #164]	@ (80102f8 <prvAddNewTaskToReadyList+0xbc>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d109      	bne.n	801026e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801025a:	4a27      	ldr	r2, [pc, #156]	@ (80102f8 <prvAddNewTaskToReadyList+0xbc>)
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010260:	4b24      	ldr	r3, [pc, #144]	@ (80102f4 <prvAddNewTaskToReadyList+0xb8>)
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	2b01      	cmp	r3, #1
 8010266:	d110      	bne.n	801028a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010268:	f000 fbca 	bl	8010a00 <prvInitialiseTaskLists>
 801026c:	e00d      	b.n	801028a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801026e:	4b23      	ldr	r3, [pc, #140]	@ (80102fc <prvAddNewTaskToReadyList+0xc0>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d109      	bne.n	801028a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010276:	4b20      	ldr	r3, [pc, #128]	@ (80102f8 <prvAddNewTaskToReadyList+0xbc>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010280:	429a      	cmp	r2, r3
 8010282:	d802      	bhi.n	801028a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010284:	4a1c      	ldr	r2, [pc, #112]	@ (80102f8 <prvAddNewTaskToReadyList+0xbc>)
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801028a:	4b1d      	ldr	r3, [pc, #116]	@ (8010300 <prvAddNewTaskToReadyList+0xc4>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	3301      	adds	r3, #1
 8010290:	4a1b      	ldr	r2, [pc, #108]	@ (8010300 <prvAddNewTaskToReadyList+0xc4>)
 8010292:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010298:	2201      	movs	r2, #1
 801029a:	409a      	lsls	r2, r3
 801029c:	4b19      	ldr	r3, [pc, #100]	@ (8010304 <prvAddNewTaskToReadyList+0xc8>)
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	4313      	orrs	r3, r2
 80102a2:	4a18      	ldr	r2, [pc, #96]	@ (8010304 <prvAddNewTaskToReadyList+0xc8>)
 80102a4:	6013      	str	r3, [r2, #0]
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102aa:	4613      	mov	r3, r2
 80102ac:	009b      	lsls	r3, r3, #2
 80102ae:	4413      	add	r3, r2
 80102b0:	009b      	lsls	r3, r3, #2
 80102b2:	4a15      	ldr	r2, [pc, #84]	@ (8010308 <prvAddNewTaskToReadyList+0xcc>)
 80102b4:	441a      	add	r2, r3
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	3304      	adds	r3, #4
 80102ba:	4619      	mov	r1, r3
 80102bc:	4610      	mov	r0, r2
 80102be:	f7ff f833 	bl	800f328 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80102c2:	f000 ffc3 	bl	801124c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80102c6:	4b0d      	ldr	r3, [pc, #52]	@ (80102fc <prvAddNewTaskToReadyList+0xc0>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d00e      	beq.n	80102ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80102ce:	4b0a      	ldr	r3, [pc, #40]	@ (80102f8 <prvAddNewTaskToReadyList+0xbc>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102d8:	429a      	cmp	r2, r3
 80102da:	d207      	bcs.n	80102ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80102dc:	4b0b      	ldr	r3, [pc, #44]	@ (801030c <prvAddNewTaskToReadyList+0xd0>)
 80102de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80102e2:	601a      	str	r2, [r3, #0]
 80102e4:	f3bf 8f4f 	dsb	sy
 80102e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80102ec:	bf00      	nop
 80102ee:	3708      	adds	r7, #8
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}
 80102f4:	20002a94 	.word	0x20002a94
 80102f8:	20002994 	.word	0x20002994
 80102fc:	20002aa0 	.word	0x20002aa0
 8010300:	20002ab0 	.word	0x20002ab0
 8010304:	20002a9c 	.word	0x20002a9c
 8010308:	20002998 	.word	0x20002998
 801030c:	e000ed04 	.word	0xe000ed04

08010310 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010310:	b580      	push	{r7, lr}
 8010312:	b084      	sub	sp, #16
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010318:	2300      	movs	r3, #0
 801031a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d018      	beq.n	8010354 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010322:	4b14      	ldr	r3, [pc, #80]	@ (8010374 <vTaskDelay+0x64>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d00b      	beq.n	8010342 <vTaskDelay+0x32>
	__asm volatile
 801032a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801032e:	f383 8811 	msr	BASEPRI, r3
 8010332:	f3bf 8f6f 	isb	sy
 8010336:	f3bf 8f4f 	dsb	sy
 801033a:	60bb      	str	r3, [r7, #8]
}
 801033c:	bf00      	nop
 801033e:	bf00      	nop
 8010340:	e7fd      	b.n	801033e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010342:	f000 f863 	bl	801040c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010346:	2100      	movs	r1, #0
 8010348:	6878      	ldr	r0, [r7, #4]
 801034a:	f000 fdb7 	bl	8010ebc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801034e:	f000 f86b 	bl	8010428 <xTaskResumeAll>
 8010352:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d107      	bne.n	801036a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801035a:	4b07      	ldr	r3, [pc, #28]	@ (8010378 <vTaskDelay+0x68>)
 801035c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010360:	601a      	str	r2, [r3, #0]
 8010362:	f3bf 8f4f 	dsb	sy
 8010366:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801036a:	bf00      	nop
 801036c:	3710      	adds	r7, #16
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}
 8010372:	bf00      	nop
 8010374:	20002abc 	.word	0x20002abc
 8010378:	e000ed04 	.word	0xe000ed04

0801037c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b086      	sub	sp, #24
 8010380:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8010382:	4b1c      	ldr	r3, [pc, #112]	@ (80103f4 <vTaskStartScheduler+0x78>)
 8010384:	9301      	str	r3, [sp, #4]
 8010386:	2300      	movs	r3, #0
 8010388:	9300      	str	r3, [sp, #0]
 801038a:	2300      	movs	r3, #0
 801038c:	2280      	movs	r2, #128	@ 0x80
 801038e:	491a      	ldr	r1, [pc, #104]	@ (80103f8 <vTaskStartScheduler+0x7c>)
 8010390:	481a      	ldr	r0, [pc, #104]	@ (80103fc <vTaskStartScheduler+0x80>)
 8010392:	f7ff fe89 	bl	80100a8 <xTaskCreate>
 8010396:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	2b01      	cmp	r3, #1
 801039c:	d116      	bne.n	80103cc <vTaskStartScheduler+0x50>
	__asm volatile
 801039e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103a2:	f383 8811 	msr	BASEPRI, r3
 80103a6:	f3bf 8f6f 	isb	sy
 80103aa:	f3bf 8f4f 	dsb	sy
 80103ae:	60bb      	str	r3, [r7, #8]
}
 80103b0:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80103b2:	4b13      	ldr	r3, [pc, #76]	@ (8010400 <vTaskStartScheduler+0x84>)
 80103b4:	f04f 32ff 	mov.w	r2, #4294967295
 80103b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80103ba:	4b12      	ldr	r3, [pc, #72]	@ (8010404 <vTaskStartScheduler+0x88>)
 80103bc:	2201      	movs	r2, #1
 80103be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80103c0:	4b11      	ldr	r3, [pc, #68]	@ (8010408 <vTaskStartScheduler+0x8c>)
 80103c2:	2200      	movs	r2, #0
 80103c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80103c6:	f000 fe6b 	bl	80110a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80103ca:	e00f      	b.n	80103ec <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103d2:	d10b      	bne.n	80103ec <vTaskStartScheduler+0x70>
	__asm volatile
 80103d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103d8:	f383 8811 	msr	BASEPRI, r3
 80103dc:	f3bf 8f6f 	isb	sy
 80103e0:	f3bf 8f4f 	dsb	sy
 80103e4:	607b      	str	r3, [r7, #4]
}
 80103e6:	bf00      	nop
 80103e8:	bf00      	nop
 80103ea:	e7fd      	b.n	80103e8 <vTaskStartScheduler+0x6c>
}
 80103ec:	bf00      	nop
 80103ee:	3710      	adds	r7, #16
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}
 80103f4:	20002ab8 	.word	0x20002ab8
 80103f8:	08014ab0 	.word	0x08014ab0
 80103fc:	080109d1 	.word	0x080109d1
 8010400:	20002ab4 	.word	0x20002ab4
 8010404:	20002aa0 	.word	0x20002aa0
 8010408:	20002a98 	.word	0x20002a98

0801040c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801040c:	b480      	push	{r7}
 801040e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010410:	4b04      	ldr	r3, [pc, #16]	@ (8010424 <vTaskSuspendAll+0x18>)
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	3301      	adds	r3, #1
 8010416:	4a03      	ldr	r2, [pc, #12]	@ (8010424 <vTaskSuspendAll+0x18>)
 8010418:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801041a:	bf00      	nop
 801041c:	46bd      	mov	sp, r7
 801041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010422:	4770      	bx	lr
 8010424:	20002abc 	.word	0x20002abc

08010428 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b084      	sub	sp, #16
 801042c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801042e:	2300      	movs	r3, #0
 8010430:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010432:	2300      	movs	r3, #0
 8010434:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010436:	4b42      	ldr	r3, [pc, #264]	@ (8010540 <xTaskResumeAll+0x118>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d10b      	bne.n	8010456 <xTaskResumeAll+0x2e>
	__asm volatile
 801043e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010442:	f383 8811 	msr	BASEPRI, r3
 8010446:	f3bf 8f6f 	isb	sy
 801044a:	f3bf 8f4f 	dsb	sy
 801044e:	603b      	str	r3, [r7, #0]
}
 8010450:	bf00      	nop
 8010452:	bf00      	nop
 8010454:	e7fd      	b.n	8010452 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010456:	f000 fec7 	bl	80111e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801045a:	4b39      	ldr	r3, [pc, #228]	@ (8010540 <xTaskResumeAll+0x118>)
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	3b01      	subs	r3, #1
 8010460:	4a37      	ldr	r2, [pc, #220]	@ (8010540 <xTaskResumeAll+0x118>)
 8010462:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010464:	4b36      	ldr	r3, [pc, #216]	@ (8010540 <xTaskResumeAll+0x118>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d161      	bne.n	8010530 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801046c:	4b35      	ldr	r3, [pc, #212]	@ (8010544 <xTaskResumeAll+0x11c>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d05d      	beq.n	8010530 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010474:	e02e      	b.n	80104d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010476:	4b34      	ldr	r3, [pc, #208]	@ (8010548 <xTaskResumeAll+0x120>)
 8010478:	68db      	ldr	r3, [r3, #12]
 801047a:	68db      	ldr	r3, [r3, #12]
 801047c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	3318      	adds	r3, #24
 8010482:	4618      	mov	r0, r3
 8010484:	f7fe ffad 	bl	800f3e2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	3304      	adds	r3, #4
 801048c:	4618      	mov	r0, r3
 801048e:	f7fe ffa8 	bl	800f3e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010496:	2201      	movs	r2, #1
 8010498:	409a      	lsls	r2, r3
 801049a:	4b2c      	ldr	r3, [pc, #176]	@ (801054c <xTaskResumeAll+0x124>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	4313      	orrs	r3, r2
 80104a0:	4a2a      	ldr	r2, [pc, #168]	@ (801054c <xTaskResumeAll+0x124>)
 80104a2:	6013      	str	r3, [r2, #0]
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104a8:	4613      	mov	r3, r2
 80104aa:	009b      	lsls	r3, r3, #2
 80104ac:	4413      	add	r3, r2
 80104ae:	009b      	lsls	r3, r3, #2
 80104b0:	4a27      	ldr	r2, [pc, #156]	@ (8010550 <xTaskResumeAll+0x128>)
 80104b2:	441a      	add	r2, r3
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	3304      	adds	r3, #4
 80104b8:	4619      	mov	r1, r3
 80104ba:	4610      	mov	r0, r2
 80104bc:	f7fe ff34 	bl	800f328 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104c4:	4b23      	ldr	r3, [pc, #140]	@ (8010554 <xTaskResumeAll+0x12c>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d302      	bcc.n	80104d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80104ce:	4b22      	ldr	r3, [pc, #136]	@ (8010558 <xTaskResumeAll+0x130>)
 80104d0:	2201      	movs	r2, #1
 80104d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80104d4:	4b1c      	ldr	r3, [pc, #112]	@ (8010548 <xTaskResumeAll+0x120>)
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d1cc      	bne.n	8010476 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d001      	beq.n	80104e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80104e2:	f000 fb0b 	bl	8010afc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80104e6:	4b1d      	ldr	r3, [pc, #116]	@ (801055c <xTaskResumeAll+0x134>)
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d010      	beq.n	8010514 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80104f2:	f000 f847 	bl	8010584 <xTaskIncrementTick>
 80104f6:	4603      	mov	r3, r0
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d002      	beq.n	8010502 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80104fc:	4b16      	ldr	r3, [pc, #88]	@ (8010558 <xTaskResumeAll+0x130>)
 80104fe:	2201      	movs	r2, #1
 8010500:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	3b01      	subs	r3, #1
 8010506:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d1f1      	bne.n	80104f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801050e:	4b13      	ldr	r3, [pc, #76]	@ (801055c <xTaskResumeAll+0x134>)
 8010510:	2200      	movs	r2, #0
 8010512:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010514:	4b10      	ldr	r3, [pc, #64]	@ (8010558 <xTaskResumeAll+0x130>)
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d009      	beq.n	8010530 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801051c:	2301      	movs	r3, #1
 801051e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010520:	4b0f      	ldr	r3, [pc, #60]	@ (8010560 <xTaskResumeAll+0x138>)
 8010522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010526:	601a      	str	r2, [r3, #0]
 8010528:	f3bf 8f4f 	dsb	sy
 801052c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010530:	f000 fe8c 	bl	801124c <vPortExitCritical>

	return xAlreadyYielded;
 8010534:	68bb      	ldr	r3, [r7, #8]
}
 8010536:	4618      	mov	r0, r3
 8010538:	3710      	adds	r7, #16
 801053a:	46bd      	mov	sp, r7
 801053c:	bd80      	pop	{r7, pc}
 801053e:	bf00      	nop
 8010540:	20002abc 	.word	0x20002abc
 8010544:	20002a94 	.word	0x20002a94
 8010548:	20002a54 	.word	0x20002a54
 801054c:	20002a9c 	.word	0x20002a9c
 8010550:	20002998 	.word	0x20002998
 8010554:	20002994 	.word	0x20002994
 8010558:	20002aa8 	.word	0x20002aa8
 801055c:	20002aa4 	.word	0x20002aa4
 8010560:	e000ed04 	.word	0xe000ed04

08010564 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010564:	b480      	push	{r7}
 8010566:	b083      	sub	sp, #12
 8010568:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801056a:	4b05      	ldr	r3, [pc, #20]	@ (8010580 <xTaskGetTickCount+0x1c>)
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010570:	687b      	ldr	r3, [r7, #4]
}
 8010572:	4618      	mov	r0, r3
 8010574:	370c      	adds	r7, #12
 8010576:	46bd      	mov	sp, r7
 8010578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057c:	4770      	bx	lr
 801057e:	bf00      	nop
 8010580:	20002a98 	.word	0x20002a98

08010584 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b086      	sub	sp, #24
 8010588:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801058a:	2300      	movs	r3, #0
 801058c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801058e:	4b4f      	ldr	r3, [pc, #316]	@ (80106cc <xTaskIncrementTick+0x148>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	2b00      	cmp	r3, #0
 8010594:	f040 808f 	bne.w	80106b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010598:	4b4d      	ldr	r3, [pc, #308]	@ (80106d0 <xTaskIncrementTick+0x14c>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	3301      	adds	r3, #1
 801059e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80105a0:	4a4b      	ldr	r2, [pc, #300]	@ (80106d0 <xTaskIncrementTick+0x14c>)
 80105a2:	693b      	ldr	r3, [r7, #16]
 80105a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80105a6:	693b      	ldr	r3, [r7, #16]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d121      	bne.n	80105f0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80105ac:	4b49      	ldr	r3, [pc, #292]	@ (80106d4 <xTaskIncrementTick+0x150>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d00b      	beq.n	80105ce <xTaskIncrementTick+0x4a>
	__asm volatile
 80105b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105ba:	f383 8811 	msr	BASEPRI, r3
 80105be:	f3bf 8f6f 	isb	sy
 80105c2:	f3bf 8f4f 	dsb	sy
 80105c6:	603b      	str	r3, [r7, #0]
}
 80105c8:	bf00      	nop
 80105ca:	bf00      	nop
 80105cc:	e7fd      	b.n	80105ca <xTaskIncrementTick+0x46>
 80105ce:	4b41      	ldr	r3, [pc, #260]	@ (80106d4 <xTaskIncrementTick+0x150>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	60fb      	str	r3, [r7, #12]
 80105d4:	4b40      	ldr	r3, [pc, #256]	@ (80106d8 <xTaskIncrementTick+0x154>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	4a3e      	ldr	r2, [pc, #248]	@ (80106d4 <xTaskIncrementTick+0x150>)
 80105da:	6013      	str	r3, [r2, #0]
 80105dc:	4a3e      	ldr	r2, [pc, #248]	@ (80106d8 <xTaskIncrementTick+0x154>)
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	6013      	str	r3, [r2, #0]
 80105e2:	4b3e      	ldr	r3, [pc, #248]	@ (80106dc <xTaskIncrementTick+0x158>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	3301      	adds	r3, #1
 80105e8:	4a3c      	ldr	r2, [pc, #240]	@ (80106dc <xTaskIncrementTick+0x158>)
 80105ea:	6013      	str	r3, [r2, #0]
 80105ec:	f000 fa86 	bl	8010afc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80105f0:	4b3b      	ldr	r3, [pc, #236]	@ (80106e0 <xTaskIncrementTick+0x15c>)
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	693a      	ldr	r2, [r7, #16]
 80105f6:	429a      	cmp	r2, r3
 80105f8:	d348      	bcc.n	801068c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80105fa:	4b36      	ldr	r3, [pc, #216]	@ (80106d4 <xTaskIncrementTick+0x150>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d104      	bne.n	801060e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010604:	4b36      	ldr	r3, [pc, #216]	@ (80106e0 <xTaskIncrementTick+0x15c>)
 8010606:	f04f 32ff 	mov.w	r2, #4294967295
 801060a:	601a      	str	r2, [r3, #0]
					break;
 801060c:	e03e      	b.n	801068c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801060e:	4b31      	ldr	r3, [pc, #196]	@ (80106d4 <xTaskIncrementTick+0x150>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	68db      	ldr	r3, [r3, #12]
 8010614:	68db      	ldr	r3, [r3, #12]
 8010616:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010618:	68bb      	ldr	r3, [r7, #8]
 801061a:	685b      	ldr	r3, [r3, #4]
 801061c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801061e:	693a      	ldr	r2, [r7, #16]
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	429a      	cmp	r2, r3
 8010624:	d203      	bcs.n	801062e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010626:	4a2e      	ldr	r2, [pc, #184]	@ (80106e0 <xTaskIncrementTick+0x15c>)
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801062c:	e02e      	b.n	801068c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	3304      	adds	r3, #4
 8010632:	4618      	mov	r0, r3
 8010634:	f7fe fed5 	bl	800f3e2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010638:	68bb      	ldr	r3, [r7, #8]
 801063a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801063c:	2b00      	cmp	r3, #0
 801063e:	d004      	beq.n	801064a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	3318      	adds	r3, #24
 8010644:	4618      	mov	r0, r3
 8010646:	f7fe fecc 	bl	800f3e2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801064e:	2201      	movs	r2, #1
 8010650:	409a      	lsls	r2, r3
 8010652:	4b24      	ldr	r3, [pc, #144]	@ (80106e4 <xTaskIncrementTick+0x160>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	4313      	orrs	r3, r2
 8010658:	4a22      	ldr	r2, [pc, #136]	@ (80106e4 <xTaskIncrementTick+0x160>)
 801065a:	6013      	str	r3, [r2, #0]
 801065c:	68bb      	ldr	r3, [r7, #8]
 801065e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010660:	4613      	mov	r3, r2
 8010662:	009b      	lsls	r3, r3, #2
 8010664:	4413      	add	r3, r2
 8010666:	009b      	lsls	r3, r3, #2
 8010668:	4a1f      	ldr	r2, [pc, #124]	@ (80106e8 <xTaskIncrementTick+0x164>)
 801066a:	441a      	add	r2, r3
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	3304      	adds	r3, #4
 8010670:	4619      	mov	r1, r3
 8010672:	4610      	mov	r0, r2
 8010674:	f7fe fe58 	bl	800f328 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801067c:	4b1b      	ldr	r3, [pc, #108]	@ (80106ec <xTaskIncrementTick+0x168>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010682:	429a      	cmp	r2, r3
 8010684:	d3b9      	bcc.n	80105fa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8010686:	2301      	movs	r3, #1
 8010688:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801068a:	e7b6      	b.n	80105fa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801068c:	4b17      	ldr	r3, [pc, #92]	@ (80106ec <xTaskIncrementTick+0x168>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010692:	4915      	ldr	r1, [pc, #84]	@ (80106e8 <xTaskIncrementTick+0x164>)
 8010694:	4613      	mov	r3, r2
 8010696:	009b      	lsls	r3, r3, #2
 8010698:	4413      	add	r3, r2
 801069a:	009b      	lsls	r3, r3, #2
 801069c:	440b      	add	r3, r1
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	2b01      	cmp	r3, #1
 80106a2:	d901      	bls.n	80106a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80106a4:	2301      	movs	r3, #1
 80106a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80106a8:	4b11      	ldr	r3, [pc, #68]	@ (80106f0 <xTaskIncrementTick+0x16c>)
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d007      	beq.n	80106c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80106b0:	2301      	movs	r3, #1
 80106b2:	617b      	str	r3, [r7, #20]
 80106b4:	e004      	b.n	80106c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80106b6:	4b0f      	ldr	r3, [pc, #60]	@ (80106f4 <xTaskIncrementTick+0x170>)
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	3301      	adds	r3, #1
 80106bc:	4a0d      	ldr	r2, [pc, #52]	@ (80106f4 <xTaskIncrementTick+0x170>)
 80106be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80106c0:	697b      	ldr	r3, [r7, #20]
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	3718      	adds	r7, #24
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}
 80106ca:	bf00      	nop
 80106cc:	20002abc 	.word	0x20002abc
 80106d0:	20002a98 	.word	0x20002a98
 80106d4:	20002a4c 	.word	0x20002a4c
 80106d8:	20002a50 	.word	0x20002a50
 80106dc:	20002aac 	.word	0x20002aac
 80106e0:	20002ab4 	.word	0x20002ab4
 80106e4:	20002a9c 	.word	0x20002a9c
 80106e8:	20002998 	.word	0x20002998
 80106ec:	20002994 	.word	0x20002994
 80106f0:	20002aa8 	.word	0x20002aa8
 80106f4:	20002aa4 	.word	0x20002aa4

080106f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80106f8:	b480      	push	{r7}
 80106fa:	b087      	sub	sp, #28
 80106fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80106fe:	4b27      	ldr	r3, [pc, #156]	@ (801079c <vTaskSwitchContext+0xa4>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d003      	beq.n	801070e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010706:	4b26      	ldr	r3, [pc, #152]	@ (80107a0 <vTaskSwitchContext+0xa8>)
 8010708:	2201      	movs	r2, #1
 801070a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801070c:	e040      	b.n	8010790 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 801070e:	4b24      	ldr	r3, [pc, #144]	@ (80107a0 <vTaskSwitchContext+0xa8>)
 8010710:	2200      	movs	r2, #0
 8010712:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010714:	4b23      	ldr	r3, [pc, #140]	@ (80107a4 <vTaskSwitchContext+0xac>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	fab3 f383 	clz	r3, r3
 8010720:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010722:	7afb      	ldrb	r3, [r7, #11]
 8010724:	f1c3 031f 	rsb	r3, r3, #31
 8010728:	617b      	str	r3, [r7, #20]
 801072a:	491f      	ldr	r1, [pc, #124]	@ (80107a8 <vTaskSwitchContext+0xb0>)
 801072c:	697a      	ldr	r2, [r7, #20]
 801072e:	4613      	mov	r3, r2
 8010730:	009b      	lsls	r3, r3, #2
 8010732:	4413      	add	r3, r2
 8010734:	009b      	lsls	r3, r3, #2
 8010736:	440b      	add	r3, r1
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d10b      	bne.n	8010756 <vTaskSwitchContext+0x5e>
	__asm volatile
 801073e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010742:	f383 8811 	msr	BASEPRI, r3
 8010746:	f3bf 8f6f 	isb	sy
 801074a:	f3bf 8f4f 	dsb	sy
 801074e:	607b      	str	r3, [r7, #4]
}
 8010750:	bf00      	nop
 8010752:	bf00      	nop
 8010754:	e7fd      	b.n	8010752 <vTaskSwitchContext+0x5a>
 8010756:	697a      	ldr	r2, [r7, #20]
 8010758:	4613      	mov	r3, r2
 801075a:	009b      	lsls	r3, r3, #2
 801075c:	4413      	add	r3, r2
 801075e:	009b      	lsls	r3, r3, #2
 8010760:	4a11      	ldr	r2, [pc, #68]	@ (80107a8 <vTaskSwitchContext+0xb0>)
 8010762:	4413      	add	r3, r2
 8010764:	613b      	str	r3, [r7, #16]
 8010766:	693b      	ldr	r3, [r7, #16]
 8010768:	685b      	ldr	r3, [r3, #4]
 801076a:	685a      	ldr	r2, [r3, #4]
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	605a      	str	r2, [r3, #4]
 8010770:	693b      	ldr	r3, [r7, #16]
 8010772:	685a      	ldr	r2, [r3, #4]
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	3308      	adds	r3, #8
 8010778:	429a      	cmp	r2, r3
 801077a:	d104      	bne.n	8010786 <vTaskSwitchContext+0x8e>
 801077c:	693b      	ldr	r3, [r7, #16]
 801077e:	685b      	ldr	r3, [r3, #4]
 8010780:	685a      	ldr	r2, [r3, #4]
 8010782:	693b      	ldr	r3, [r7, #16]
 8010784:	605a      	str	r2, [r3, #4]
 8010786:	693b      	ldr	r3, [r7, #16]
 8010788:	685b      	ldr	r3, [r3, #4]
 801078a:	68db      	ldr	r3, [r3, #12]
 801078c:	4a07      	ldr	r2, [pc, #28]	@ (80107ac <vTaskSwitchContext+0xb4>)
 801078e:	6013      	str	r3, [r2, #0]
}
 8010790:	bf00      	nop
 8010792:	371c      	adds	r7, #28
 8010794:	46bd      	mov	sp, r7
 8010796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079a:	4770      	bx	lr
 801079c:	20002abc 	.word	0x20002abc
 80107a0:	20002aa8 	.word	0x20002aa8
 80107a4:	20002a9c 	.word	0x20002a9c
 80107a8:	20002998 	.word	0x20002998
 80107ac:	20002994 	.word	0x20002994

080107b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b084      	sub	sp, #16
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
 80107b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d10b      	bne.n	80107d8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80107c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107c4:	f383 8811 	msr	BASEPRI, r3
 80107c8:	f3bf 8f6f 	isb	sy
 80107cc:	f3bf 8f4f 	dsb	sy
 80107d0:	60fb      	str	r3, [r7, #12]
}
 80107d2:	bf00      	nop
 80107d4:	bf00      	nop
 80107d6:	e7fd      	b.n	80107d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80107d8:	4b07      	ldr	r3, [pc, #28]	@ (80107f8 <vTaskPlaceOnEventList+0x48>)
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	3318      	adds	r3, #24
 80107de:	4619      	mov	r1, r3
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f7fe fdc5 	bl	800f370 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80107e6:	2101      	movs	r1, #1
 80107e8:	6838      	ldr	r0, [r7, #0]
 80107ea:	f000 fb67 	bl	8010ebc <prvAddCurrentTaskToDelayedList>
}
 80107ee:	bf00      	nop
 80107f0:	3710      	adds	r7, #16
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}
 80107f6:	bf00      	nop
 80107f8:	20002994 	.word	0x20002994

080107fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b086      	sub	sp, #24
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	68db      	ldr	r3, [r3, #12]
 8010808:	68db      	ldr	r3, [r3, #12]
 801080a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801080c:	693b      	ldr	r3, [r7, #16]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d10b      	bne.n	801082a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8010812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010816:	f383 8811 	msr	BASEPRI, r3
 801081a:	f3bf 8f6f 	isb	sy
 801081e:	f3bf 8f4f 	dsb	sy
 8010822:	60fb      	str	r3, [r7, #12]
}
 8010824:	bf00      	nop
 8010826:	bf00      	nop
 8010828:	e7fd      	b.n	8010826 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801082a:	693b      	ldr	r3, [r7, #16]
 801082c:	3318      	adds	r3, #24
 801082e:	4618      	mov	r0, r3
 8010830:	f7fe fdd7 	bl	800f3e2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010834:	4b1d      	ldr	r3, [pc, #116]	@ (80108ac <xTaskRemoveFromEventList+0xb0>)
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d11c      	bne.n	8010876 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801083c:	693b      	ldr	r3, [r7, #16]
 801083e:	3304      	adds	r3, #4
 8010840:	4618      	mov	r0, r3
 8010842:	f7fe fdce 	bl	800f3e2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010846:	693b      	ldr	r3, [r7, #16]
 8010848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801084a:	2201      	movs	r2, #1
 801084c:	409a      	lsls	r2, r3
 801084e:	4b18      	ldr	r3, [pc, #96]	@ (80108b0 <xTaskRemoveFromEventList+0xb4>)
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	4313      	orrs	r3, r2
 8010854:	4a16      	ldr	r2, [pc, #88]	@ (80108b0 <xTaskRemoveFromEventList+0xb4>)
 8010856:	6013      	str	r3, [r2, #0]
 8010858:	693b      	ldr	r3, [r7, #16]
 801085a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801085c:	4613      	mov	r3, r2
 801085e:	009b      	lsls	r3, r3, #2
 8010860:	4413      	add	r3, r2
 8010862:	009b      	lsls	r3, r3, #2
 8010864:	4a13      	ldr	r2, [pc, #76]	@ (80108b4 <xTaskRemoveFromEventList+0xb8>)
 8010866:	441a      	add	r2, r3
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	3304      	adds	r3, #4
 801086c:	4619      	mov	r1, r3
 801086e:	4610      	mov	r0, r2
 8010870:	f7fe fd5a 	bl	800f328 <vListInsertEnd>
 8010874:	e005      	b.n	8010882 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010876:	693b      	ldr	r3, [r7, #16]
 8010878:	3318      	adds	r3, #24
 801087a:	4619      	mov	r1, r3
 801087c:	480e      	ldr	r0, [pc, #56]	@ (80108b8 <xTaskRemoveFromEventList+0xbc>)
 801087e:	f7fe fd53 	bl	800f328 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010882:	693b      	ldr	r3, [r7, #16]
 8010884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010886:	4b0d      	ldr	r3, [pc, #52]	@ (80108bc <xTaskRemoveFromEventList+0xc0>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801088c:	429a      	cmp	r2, r3
 801088e:	d905      	bls.n	801089c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010890:	2301      	movs	r3, #1
 8010892:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010894:	4b0a      	ldr	r3, [pc, #40]	@ (80108c0 <xTaskRemoveFromEventList+0xc4>)
 8010896:	2201      	movs	r2, #1
 8010898:	601a      	str	r2, [r3, #0]
 801089a:	e001      	b.n	80108a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801089c:	2300      	movs	r3, #0
 801089e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80108a0:	697b      	ldr	r3, [r7, #20]
}
 80108a2:	4618      	mov	r0, r3
 80108a4:	3718      	adds	r7, #24
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}
 80108aa:	bf00      	nop
 80108ac:	20002abc 	.word	0x20002abc
 80108b0:	20002a9c 	.word	0x20002a9c
 80108b4:	20002998 	.word	0x20002998
 80108b8:	20002a54 	.word	0x20002a54
 80108bc:	20002994 	.word	0x20002994
 80108c0:	20002aa8 	.word	0x20002aa8

080108c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80108c4:	b480      	push	{r7}
 80108c6:	b083      	sub	sp, #12
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80108cc:	4b06      	ldr	r3, [pc, #24]	@ (80108e8 <vTaskInternalSetTimeOutState+0x24>)
 80108ce:	681a      	ldr	r2, [r3, #0]
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80108d4:	4b05      	ldr	r3, [pc, #20]	@ (80108ec <vTaskInternalSetTimeOutState+0x28>)
 80108d6:	681a      	ldr	r2, [r3, #0]
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	605a      	str	r2, [r3, #4]
}
 80108dc:	bf00      	nop
 80108de:	370c      	adds	r7, #12
 80108e0:	46bd      	mov	sp, r7
 80108e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e6:	4770      	bx	lr
 80108e8:	20002aac 	.word	0x20002aac
 80108ec:	20002a98 	.word	0x20002a98

080108f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b088      	sub	sp, #32
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	6078      	str	r0, [r7, #4]
 80108f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d10b      	bne.n	8010918 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8010900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010904:	f383 8811 	msr	BASEPRI, r3
 8010908:	f3bf 8f6f 	isb	sy
 801090c:	f3bf 8f4f 	dsb	sy
 8010910:	613b      	str	r3, [r7, #16]
}
 8010912:	bf00      	nop
 8010914:	bf00      	nop
 8010916:	e7fd      	b.n	8010914 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d10b      	bne.n	8010936 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801091e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010922:	f383 8811 	msr	BASEPRI, r3
 8010926:	f3bf 8f6f 	isb	sy
 801092a:	f3bf 8f4f 	dsb	sy
 801092e:	60fb      	str	r3, [r7, #12]
}
 8010930:	bf00      	nop
 8010932:	bf00      	nop
 8010934:	e7fd      	b.n	8010932 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8010936:	f000 fc57 	bl	80111e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801093a:	4b1d      	ldr	r3, [pc, #116]	@ (80109b0 <xTaskCheckForTimeOut+0xc0>)
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	685b      	ldr	r3, [r3, #4]
 8010944:	69ba      	ldr	r2, [r7, #24]
 8010946:	1ad3      	subs	r3, r2, r3
 8010948:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010952:	d102      	bne.n	801095a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010954:	2300      	movs	r3, #0
 8010956:	61fb      	str	r3, [r7, #28]
 8010958:	e023      	b.n	80109a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681a      	ldr	r2, [r3, #0]
 801095e:	4b15      	ldr	r3, [pc, #84]	@ (80109b4 <xTaskCheckForTimeOut+0xc4>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	429a      	cmp	r2, r3
 8010964:	d007      	beq.n	8010976 <xTaskCheckForTimeOut+0x86>
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	685b      	ldr	r3, [r3, #4]
 801096a:	69ba      	ldr	r2, [r7, #24]
 801096c:	429a      	cmp	r2, r3
 801096e:	d302      	bcc.n	8010976 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010970:	2301      	movs	r3, #1
 8010972:	61fb      	str	r3, [r7, #28]
 8010974:	e015      	b.n	80109a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	697a      	ldr	r2, [r7, #20]
 801097c:	429a      	cmp	r2, r3
 801097e:	d20b      	bcs.n	8010998 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	681a      	ldr	r2, [r3, #0]
 8010984:	697b      	ldr	r3, [r7, #20]
 8010986:	1ad2      	subs	r2, r2, r3
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801098c:	6878      	ldr	r0, [r7, #4]
 801098e:	f7ff ff99 	bl	80108c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010992:	2300      	movs	r3, #0
 8010994:	61fb      	str	r3, [r7, #28]
 8010996:	e004      	b.n	80109a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8010998:	683b      	ldr	r3, [r7, #0]
 801099a:	2200      	movs	r2, #0
 801099c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801099e:	2301      	movs	r3, #1
 80109a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80109a2:	f000 fc53 	bl	801124c <vPortExitCritical>

	return xReturn;
 80109a6:	69fb      	ldr	r3, [r7, #28]
}
 80109a8:	4618      	mov	r0, r3
 80109aa:	3720      	adds	r7, #32
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}
 80109b0:	20002a98 	.word	0x20002a98
 80109b4:	20002aac 	.word	0x20002aac

080109b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80109b8:	b480      	push	{r7}
 80109ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80109bc:	4b03      	ldr	r3, [pc, #12]	@ (80109cc <vTaskMissedYield+0x14>)
 80109be:	2201      	movs	r2, #1
 80109c0:	601a      	str	r2, [r3, #0]
}
 80109c2:	bf00      	nop
 80109c4:	46bd      	mov	sp, r7
 80109c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ca:	4770      	bx	lr
 80109cc:	20002aa8 	.word	0x20002aa8

080109d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b082      	sub	sp, #8
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80109d8:	f000 f852 	bl	8010a80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80109dc:	4b06      	ldr	r3, [pc, #24]	@ (80109f8 <prvIdleTask+0x28>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	2b01      	cmp	r3, #1
 80109e2:	d9f9      	bls.n	80109d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80109e4:	4b05      	ldr	r3, [pc, #20]	@ (80109fc <prvIdleTask+0x2c>)
 80109e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80109ea:	601a      	str	r2, [r3, #0]
 80109ec:	f3bf 8f4f 	dsb	sy
 80109f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80109f4:	e7f0      	b.n	80109d8 <prvIdleTask+0x8>
 80109f6:	bf00      	nop
 80109f8:	20002998 	.word	0x20002998
 80109fc:	e000ed04 	.word	0xe000ed04

08010a00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b082      	sub	sp, #8
 8010a04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010a06:	2300      	movs	r3, #0
 8010a08:	607b      	str	r3, [r7, #4]
 8010a0a:	e00c      	b.n	8010a26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010a0c:	687a      	ldr	r2, [r7, #4]
 8010a0e:	4613      	mov	r3, r2
 8010a10:	009b      	lsls	r3, r3, #2
 8010a12:	4413      	add	r3, r2
 8010a14:	009b      	lsls	r3, r3, #2
 8010a16:	4a12      	ldr	r2, [pc, #72]	@ (8010a60 <prvInitialiseTaskLists+0x60>)
 8010a18:	4413      	add	r3, r2
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f7fe fc57 	bl	800f2ce <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	3301      	adds	r3, #1
 8010a24:	607b      	str	r3, [r7, #4]
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2b06      	cmp	r3, #6
 8010a2a:	d9ef      	bls.n	8010a0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010a2c:	480d      	ldr	r0, [pc, #52]	@ (8010a64 <prvInitialiseTaskLists+0x64>)
 8010a2e:	f7fe fc4e 	bl	800f2ce <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010a32:	480d      	ldr	r0, [pc, #52]	@ (8010a68 <prvInitialiseTaskLists+0x68>)
 8010a34:	f7fe fc4b 	bl	800f2ce <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010a38:	480c      	ldr	r0, [pc, #48]	@ (8010a6c <prvInitialiseTaskLists+0x6c>)
 8010a3a:	f7fe fc48 	bl	800f2ce <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010a3e:	480c      	ldr	r0, [pc, #48]	@ (8010a70 <prvInitialiseTaskLists+0x70>)
 8010a40:	f7fe fc45 	bl	800f2ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010a44:	480b      	ldr	r0, [pc, #44]	@ (8010a74 <prvInitialiseTaskLists+0x74>)
 8010a46:	f7fe fc42 	bl	800f2ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8010a78 <prvInitialiseTaskLists+0x78>)
 8010a4c:	4a05      	ldr	r2, [pc, #20]	@ (8010a64 <prvInitialiseTaskLists+0x64>)
 8010a4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010a50:	4b0a      	ldr	r3, [pc, #40]	@ (8010a7c <prvInitialiseTaskLists+0x7c>)
 8010a52:	4a05      	ldr	r2, [pc, #20]	@ (8010a68 <prvInitialiseTaskLists+0x68>)
 8010a54:	601a      	str	r2, [r3, #0]
}
 8010a56:	bf00      	nop
 8010a58:	3708      	adds	r7, #8
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}
 8010a5e:	bf00      	nop
 8010a60:	20002998 	.word	0x20002998
 8010a64:	20002a24 	.word	0x20002a24
 8010a68:	20002a38 	.word	0x20002a38
 8010a6c:	20002a54 	.word	0x20002a54
 8010a70:	20002a68 	.word	0x20002a68
 8010a74:	20002a80 	.word	0x20002a80
 8010a78:	20002a4c 	.word	0x20002a4c
 8010a7c:	20002a50 	.word	0x20002a50

08010a80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b082      	sub	sp, #8
 8010a84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010a86:	e019      	b.n	8010abc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010a88:	f000 fbae 	bl	80111e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a8c:	4b10      	ldr	r3, [pc, #64]	@ (8010ad0 <prvCheckTasksWaitingTermination+0x50>)
 8010a8e:	68db      	ldr	r3, [r3, #12]
 8010a90:	68db      	ldr	r3, [r3, #12]
 8010a92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	3304      	adds	r3, #4
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f7fe fca2 	bl	800f3e2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8010ad4 <prvCheckTasksWaitingTermination+0x54>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	3b01      	subs	r3, #1
 8010aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8010ad4 <prvCheckTasksWaitingTermination+0x54>)
 8010aa6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8010ad8 <prvCheckTasksWaitingTermination+0x58>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	3b01      	subs	r3, #1
 8010aae:	4a0a      	ldr	r2, [pc, #40]	@ (8010ad8 <prvCheckTasksWaitingTermination+0x58>)
 8010ab0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010ab2:	f000 fbcb 	bl	801124c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010ab6:	6878      	ldr	r0, [r7, #4]
 8010ab8:	f000 f810 	bl	8010adc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010abc:	4b06      	ldr	r3, [pc, #24]	@ (8010ad8 <prvCheckTasksWaitingTermination+0x58>)
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d1e1      	bne.n	8010a88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010ac4:	bf00      	nop
 8010ac6:	bf00      	nop
 8010ac8:	3708      	adds	r7, #8
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bd80      	pop	{r7, pc}
 8010ace:	bf00      	nop
 8010ad0:	20002a68 	.word	0x20002a68
 8010ad4:	20002a94 	.word	0x20002a94
 8010ad8:	20002a7c 	.word	0x20002a7c

08010adc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b082      	sub	sp, #8
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f000 fd6d 	bl	80115c8 <vPortFree>
			vPortFree( pxTCB );
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f000 fd6a 	bl	80115c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010af4:	bf00      	nop
 8010af6:	3708      	adds	r7, #8
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}

08010afc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010afc:	b480      	push	{r7}
 8010afe:	b083      	sub	sp, #12
 8010b00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010b02:	4b0c      	ldr	r3, [pc, #48]	@ (8010b34 <prvResetNextTaskUnblockTime+0x38>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d104      	bne.n	8010b16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8010b38 <prvResetNextTaskUnblockTime+0x3c>)
 8010b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8010b12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010b14:	e008      	b.n	8010b28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b16:	4b07      	ldr	r3, [pc, #28]	@ (8010b34 <prvResetNextTaskUnblockTime+0x38>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	68db      	ldr	r3, [r3, #12]
 8010b1c:	68db      	ldr	r3, [r3, #12]
 8010b1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	685b      	ldr	r3, [r3, #4]
 8010b24:	4a04      	ldr	r2, [pc, #16]	@ (8010b38 <prvResetNextTaskUnblockTime+0x3c>)
 8010b26:	6013      	str	r3, [r2, #0]
}
 8010b28:	bf00      	nop
 8010b2a:	370c      	adds	r7, #12
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b32:	4770      	bx	lr
 8010b34:	20002a4c 	.word	0x20002a4c
 8010b38:	20002ab4 	.word	0x20002ab4

08010b3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010b3c:	b480      	push	{r7}
 8010b3e:	b083      	sub	sp, #12
 8010b40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010b42:	4b0b      	ldr	r3, [pc, #44]	@ (8010b70 <xTaskGetSchedulerState+0x34>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d102      	bne.n	8010b50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010b4a:	2301      	movs	r3, #1
 8010b4c:	607b      	str	r3, [r7, #4]
 8010b4e:	e008      	b.n	8010b62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010b50:	4b08      	ldr	r3, [pc, #32]	@ (8010b74 <xTaskGetSchedulerState+0x38>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d102      	bne.n	8010b5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010b58:	2302      	movs	r3, #2
 8010b5a:	607b      	str	r3, [r7, #4]
 8010b5c:	e001      	b.n	8010b62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010b62:	687b      	ldr	r3, [r7, #4]
	}
 8010b64:	4618      	mov	r0, r3
 8010b66:	370c      	adds	r7, #12
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6e:	4770      	bx	lr
 8010b70:	20002aa0 	.word	0x20002aa0
 8010b74:	20002abc 	.word	0x20002abc

08010b78 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b084      	sub	sp, #16
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010b84:	2300      	movs	r3, #0
 8010b86:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d05e      	beq.n	8010c4c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b92:	4b31      	ldr	r3, [pc, #196]	@ (8010c58 <xTaskPriorityInherit+0xe0>)
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b98:	429a      	cmp	r2, r3
 8010b9a:	d24e      	bcs.n	8010c3a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	699b      	ldr	r3, [r3, #24]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	db06      	blt.n	8010bb2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ba4:	4b2c      	ldr	r3, [pc, #176]	@ (8010c58 <xTaskPriorityInherit+0xe0>)
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010baa:	f1c3 0207 	rsb	r2, r3, #7
 8010bae:	68bb      	ldr	r3, [r7, #8]
 8010bb0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010bb2:	68bb      	ldr	r3, [r7, #8]
 8010bb4:	6959      	ldr	r1, [r3, #20]
 8010bb6:	68bb      	ldr	r3, [r7, #8]
 8010bb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010bba:	4613      	mov	r3, r2
 8010bbc:	009b      	lsls	r3, r3, #2
 8010bbe:	4413      	add	r3, r2
 8010bc0:	009b      	lsls	r3, r3, #2
 8010bc2:	4a26      	ldr	r2, [pc, #152]	@ (8010c5c <xTaskPriorityInherit+0xe4>)
 8010bc4:	4413      	add	r3, r2
 8010bc6:	4299      	cmp	r1, r3
 8010bc8:	d12f      	bne.n	8010c2a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010bca:	68bb      	ldr	r3, [r7, #8]
 8010bcc:	3304      	adds	r3, #4
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f7fe fc07 	bl	800f3e2 <uxListRemove>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d10a      	bne.n	8010bf0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bde:	2201      	movs	r2, #1
 8010be0:	fa02 f303 	lsl.w	r3, r2, r3
 8010be4:	43da      	mvns	r2, r3
 8010be6:	4b1e      	ldr	r3, [pc, #120]	@ (8010c60 <xTaskPriorityInherit+0xe8>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	4013      	ands	r3, r2
 8010bec:	4a1c      	ldr	r2, [pc, #112]	@ (8010c60 <xTaskPriorityInherit+0xe8>)
 8010bee:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010bf0:	4b19      	ldr	r3, [pc, #100]	@ (8010c58 <xTaskPriorityInherit+0xe0>)
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010bf6:	68bb      	ldr	r3, [r7, #8]
 8010bf8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bfe:	2201      	movs	r2, #1
 8010c00:	409a      	lsls	r2, r3
 8010c02:	4b17      	ldr	r3, [pc, #92]	@ (8010c60 <xTaskPriorityInherit+0xe8>)
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	4313      	orrs	r3, r2
 8010c08:	4a15      	ldr	r2, [pc, #84]	@ (8010c60 <xTaskPriorityInherit+0xe8>)
 8010c0a:	6013      	str	r3, [r2, #0]
 8010c0c:	68bb      	ldr	r3, [r7, #8]
 8010c0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c10:	4613      	mov	r3, r2
 8010c12:	009b      	lsls	r3, r3, #2
 8010c14:	4413      	add	r3, r2
 8010c16:	009b      	lsls	r3, r3, #2
 8010c18:	4a10      	ldr	r2, [pc, #64]	@ (8010c5c <xTaskPriorityInherit+0xe4>)
 8010c1a:	441a      	add	r2, r3
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	3304      	adds	r3, #4
 8010c20:	4619      	mov	r1, r3
 8010c22:	4610      	mov	r0, r2
 8010c24:	f7fe fb80 	bl	800f328 <vListInsertEnd>
 8010c28:	e004      	b.n	8010c34 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8010c58 <xTaskPriorityInherit+0xe0>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c30:	68bb      	ldr	r3, [r7, #8]
 8010c32:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010c34:	2301      	movs	r3, #1
 8010c36:	60fb      	str	r3, [r7, #12]
 8010c38:	e008      	b.n	8010c4c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010c3a:	68bb      	ldr	r3, [r7, #8]
 8010c3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010c3e:	4b06      	ldr	r3, [pc, #24]	@ (8010c58 <xTaskPriorityInherit+0xe0>)
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c44:	429a      	cmp	r2, r3
 8010c46:	d201      	bcs.n	8010c4c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010c48:	2301      	movs	r3, #1
 8010c4a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010c4c:	68fb      	ldr	r3, [r7, #12]
	}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3710      	adds	r7, #16
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}
 8010c56:	bf00      	nop
 8010c58:	20002994 	.word	0x20002994
 8010c5c:	20002998 	.word	0x20002998
 8010c60:	20002a9c 	.word	0x20002a9c

08010c64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b086      	sub	sp, #24
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010c70:	2300      	movs	r3, #0
 8010c72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d070      	beq.n	8010d5c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010c7a:	4b3b      	ldr	r3, [pc, #236]	@ (8010d68 <xTaskPriorityDisinherit+0x104>)
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	693a      	ldr	r2, [r7, #16]
 8010c80:	429a      	cmp	r2, r3
 8010c82:	d00b      	beq.n	8010c9c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8010c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c88:	f383 8811 	msr	BASEPRI, r3
 8010c8c:	f3bf 8f6f 	isb	sy
 8010c90:	f3bf 8f4f 	dsb	sy
 8010c94:	60fb      	str	r3, [r7, #12]
}
 8010c96:	bf00      	nop
 8010c98:	bf00      	nop
 8010c9a:	e7fd      	b.n	8010c98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010c9c:	693b      	ldr	r3, [r7, #16]
 8010c9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d10b      	bne.n	8010cbc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8010ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ca8:	f383 8811 	msr	BASEPRI, r3
 8010cac:	f3bf 8f6f 	isb	sy
 8010cb0:	f3bf 8f4f 	dsb	sy
 8010cb4:	60bb      	str	r3, [r7, #8]
}
 8010cb6:	bf00      	nop
 8010cb8:	bf00      	nop
 8010cba:	e7fd      	b.n	8010cb8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8010cbc:	693b      	ldr	r3, [r7, #16]
 8010cbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010cc0:	1e5a      	subs	r2, r3, #1
 8010cc2:	693b      	ldr	r3, [r7, #16]
 8010cc4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010cc6:	693b      	ldr	r3, [r7, #16]
 8010cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cca:	693b      	ldr	r3, [r7, #16]
 8010ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010cce:	429a      	cmp	r2, r3
 8010cd0:	d044      	beq.n	8010d5c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010cd2:	693b      	ldr	r3, [r7, #16]
 8010cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d140      	bne.n	8010d5c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010cda:	693b      	ldr	r3, [r7, #16]
 8010cdc:	3304      	adds	r3, #4
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f7fe fb7f 	bl	800f3e2 <uxListRemove>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d115      	bne.n	8010d16 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010cea:	693b      	ldr	r3, [r7, #16]
 8010cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cee:	491f      	ldr	r1, [pc, #124]	@ (8010d6c <xTaskPriorityDisinherit+0x108>)
 8010cf0:	4613      	mov	r3, r2
 8010cf2:	009b      	lsls	r3, r3, #2
 8010cf4:	4413      	add	r3, r2
 8010cf6:	009b      	lsls	r3, r3, #2
 8010cf8:	440b      	add	r3, r1
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d10a      	bne.n	8010d16 <xTaskPriorityDisinherit+0xb2>
 8010d00:	693b      	ldr	r3, [r7, #16]
 8010d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d04:	2201      	movs	r2, #1
 8010d06:	fa02 f303 	lsl.w	r3, r2, r3
 8010d0a:	43da      	mvns	r2, r3
 8010d0c:	4b18      	ldr	r3, [pc, #96]	@ (8010d70 <xTaskPriorityDisinherit+0x10c>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	4013      	ands	r3, r2
 8010d12:	4a17      	ldr	r2, [pc, #92]	@ (8010d70 <xTaskPriorityDisinherit+0x10c>)
 8010d14:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010d16:	693b      	ldr	r3, [r7, #16]
 8010d18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d1e:	693b      	ldr	r3, [r7, #16]
 8010d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d22:	f1c3 0207 	rsb	r2, r3, #7
 8010d26:	693b      	ldr	r3, [r7, #16]
 8010d28:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010d2a:	693b      	ldr	r3, [r7, #16]
 8010d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d2e:	2201      	movs	r2, #1
 8010d30:	409a      	lsls	r2, r3
 8010d32:	4b0f      	ldr	r3, [pc, #60]	@ (8010d70 <xTaskPriorityDisinherit+0x10c>)
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	4313      	orrs	r3, r2
 8010d38:	4a0d      	ldr	r2, [pc, #52]	@ (8010d70 <xTaskPriorityDisinherit+0x10c>)
 8010d3a:	6013      	str	r3, [r2, #0]
 8010d3c:	693b      	ldr	r3, [r7, #16]
 8010d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d40:	4613      	mov	r3, r2
 8010d42:	009b      	lsls	r3, r3, #2
 8010d44:	4413      	add	r3, r2
 8010d46:	009b      	lsls	r3, r3, #2
 8010d48:	4a08      	ldr	r2, [pc, #32]	@ (8010d6c <xTaskPriorityDisinherit+0x108>)
 8010d4a:	441a      	add	r2, r3
 8010d4c:	693b      	ldr	r3, [r7, #16]
 8010d4e:	3304      	adds	r3, #4
 8010d50:	4619      	mov	r1, r3
 8010d52:	4610      	mov	r0, r2
 8010d54:	f7fe fae8 	bl	800f328 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010d58:	2301      	movs	r3, #1
 8010d5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010d5c:	697b      	ldr	r3, [r7, #20]
	}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	3718      	adds	r7, #24
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}
 8010d66:	bf00      	nop
 8010d68:	20002994 	.word	0x20002994
 8010d6c:	20002998 	.word	0x20002998
 8010d70:	20002a9c 	.word	0x20002a9c

08010d74 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b088      	sub	sp, #32
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
 8010d7c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010d82:	2301      	movs	r3, #1
 8010d84:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d079      	beq.n	8010e80 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010d8c:	69bb      	ldr	r3, [r7, #24]
 8010d8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d10b      	bne.n	8010dac <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8010d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d98:	f383 8811 	msr	BASEPRI, r3
 8010d9c:	f3bf 8f6f 	isb	sy
 8010da0:	f3bf 8f4f 	dsb	sy
 8010da4:	60fb      	str	r3, [r7, #12]
}
 8010da6:	bf00      	nop
 8010da8:	bf00      	nop
 8010daa:	e7fd      	b.n	8010da8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010dac:	69bb      	ldr	r3, [r7, #24]
 8010dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010db0:	683a      	ldr	r2, [r7, #0]
 8010db2:	429a      	cmp	r2, r3
 8010db4:	d902      	bls.n	8010dbc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	61fb      	str	r3, [r7, #28]
 8010dba:	e002      	b.n	8010dc2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010dbc:	69bb      	ldr	r3, [r7, #24]
 8010dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010dc0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010dc2:	69bb      	ldr	r3, [r7, #24]
 8010dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dc6:	69fa      	ldr	r2, [r7, #28]
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d059      	beq.n	8010e80 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010dcc:	69bb      	ldr	r3, [r7, #24]
 8010dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010dd0:	697a      	ldr	r2, [r7, #20]
 8010dd2:	429a      	cmp	r2, r3
 8010dd4:	d154      	bne.n	8010e80 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010dd6:	4b2c      	ldr	r3, [pc, #176]	@ (8010e88 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	69ba      	ldr	r2, [r7, #24]
 8010ddc:	429a      	cmp	r2, r3
 8010dde:	d10b      	bne.n	8010df8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8010de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010de4:	f383 8811 	msr	BASEPRI, r3
 8010de8:	f3bf 8f6f 	isb	sy
 8010dec:	f3bf 8f4f 	dsb	sy
 8010df0:	60bb      	str	r3, [r7, #8]
}
 8010df2:	bf00      	nop
 8010df4:	bf00      	nop
 8010df6:	e7fd      	b.n	8010df4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010df8:	69bb      	ldr	r3, [r7, #24]
 8010dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dfc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010dfe:	69bb      	ldr	r3, [r7, #24]
 8010e00:	69fa      	ldr	r2, [r7, #28]
 8010e02:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010e04:	69bb      	ldr	r3, [r7, #24]
 8010e06:	699b      	ldr	r3, [r3, #24]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	db04      	blt.n	8010e16 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e0c:	69fb      	ldr	r3, [r7, #28]
 8010e0e:	f1c3 0207 	rsb	r2, r3, #7
 8010e12:	69bb      	ldr	r3, [r7, #24]
 8010e14:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010e16:	69bb      	ldr	r3, [r7, #24]
 8010e18:	6959      	ldr	r1, [r3, #20]
 8010e1a:	693a      	ldr	r2, [r7, #16]
 8010e1c:	4613      	mov	r3, r2
 8010e1e:	009b      	lsls	r3, r3, #2
 8010e20:	4413      	add	r3, r2
 8010e22:	009b      	lsls	r3, r3, #2
 8010e24:	4a19      	ldr	r2, [pc, #100]	@ (8010e8c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010e26:	4413      	add	r3, r2
 8010e28:	4299      	cmp	r1, r3
 8010e2a:	d129      	bne.n	8010e80 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010e2c:	69bb      	ldr	r3, [r7, #24]
 8010e2e:	3304      	adds	r3, #4
 8010e30:	4618      	mov	r0, r3
 8010e32:	f7fe fad6 	bl	800f3e2 <uxListRemove>
 8010e36:	4603      	mov	r3, r0
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d10a      	bne.n	8010e52 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8010e3c:	69bb      	ldr	r3, [r7, #24]
 8010e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e40:	2201      	movs	r2, #1
 8010e42:	fa02 f303 	lsl.w	r3, r2, r3
 8010e46:	43da      	mvns	r2, r3
 8010e48:	4b11      	ldr	r3, [pc, #68]	@ (8010e90 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	4013      	ands	r3, r2
 8010e4e:	4a10      	ldr	r2, [pc, #64]	@ (8010e90 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8010e50:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010e52:	69bb      	ldr	r3, [r7, #24]
 8010e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e56:	2201      	movs	r2, #1
 8010e58:	409a      	lsls	r2, r3
 8010e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8010e90 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	4313      	orrs	r3, r2
 8010e60:	4a0b      	ldr	r2, [pc, #44]	@ (8010e90 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8010e62:	6013      	str	r3, [r2, #0]
 8010e64:	69bb      	ldr	r3, [r7, #24]
 8010e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e68:	4613      	mov	r3, r2
 8010e6a:	009b      	lsls	r3, r3, #2
 8010e6c:	4413      	add	r3, r2
 8010e6e:	009b      	lsls	r3, r3, #2
 8010e70:	4a06      	ldr	r2, [pc, #24]	@ (8010e8c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010e72:	441a      	add	r2, r3
 8010e74:	69bb      	ldr	r3, [r7, #24]
 8010e76:	3304      	adds	r3, #4
 8010e78:	4619      	mov	r1, r3
 8010e7a:	4610      	mov	r0, r2
 8010e7c:	f7fe fa54 	bl	800f328 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010e80:	bf00      	nop
 8010e82:	3720      	adds	r7, #32
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}
 8010e88:	20002994 	.word	0x20002994
 8010e8c:	20002998 	.word	0x20002998
 8010e90:	20002a9c 	.word	0x20002a9c

08010e94 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010e94:	b480      	push	{r7}
 8010e96:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010e98:	4b07      	ldr	r3, [pc, #28]	@ (8010eb8 <pvTaskIncrementMutexHeldCount+0x24>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d004      	beq.n	8010eaa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010ea0:	4b05      	ldr	r3, [pc, #20]	@ (8010eb8 <pvTaskIncrementMutexHeldCount+0x24>)
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010ea6:	3201      	adds	r2, #1
 8010ea8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8010eaa:	4b03      	ldr	r3, [pc, #12]	@ (8010eb8 <pvTaskIncrementMutexHeldCount+0x24>)
 8010eac:	681b      	ldr	r3, [r3, #0]
	}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb6:	4770      	bx	lr
 8010eb8:	20002994 	.word	0x20002994

08010ebc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b084      	sub	sp, #16
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]
 8010ec4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010ec6:	4b29      	ldr	r3, [pc, #164]	@ (8010f6c <prvAddCurrentTaskToDelayedList+0xb0>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010ecc:	4b28      	ldr	r3, [pc, #160]	@ (8010f70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	3304      	adds	r3, #4
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f7fe fa85 	bl	800f3e2 <uxListRemove>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d10b      	bne.n	8010ef6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010ede:	4b24      	ldr	r3, [pc, #144]	@ (8010f70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ee4:	2201      	movs	r2, #1
 8010ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8010eea:	43da      	mvns	r2, r3
 8010eec:	4b21      	ldr	r3, [pc, #132]	@ (8010f74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	4013      	ands	r3, r2
 8010ef2:	4a20      	ldr	r2, [pc, #128]	@ (8010f74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010ef4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010efc:	d10a      	bne.n	8010f14 <prvAddCurrentTaskToDelayedList+0x58>
 8010efe:	683b      	ldr	r3, [r7, #0]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d007      	beq.n	8010f14 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010f04:	4b1a      	ldr	r3, [pc, #104]	@ (8010f70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	3304      	adds	r3, #4
 8010f0a:	4619      	mov	r1, r3
 8010f0c:	481a      	ldr	r0, [pc, #104]	@ (8010f78 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010f0e:	f7fe fa0b 	bl	800f328 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010f12:	e026      	b.n	8010f62 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010f14:	68fa      	ldr	r2, [r7, #12]
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	4413      	add	r3, r2
 8010f1a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010f1c:	4b14      	ldr	r3, [pc, #80]	@ (8010f70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	68ba      	ldr	r2, [r7, #8]
 8010f22:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010f24:	68ba      	ldr	r2, [r7, #8]
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	d209      	bcs.n	8010f40 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010f2c:	4b13      	ldr	r3, [pc, #76]	@ (8010f7c <prvAddCurrentTaskToDelayedList+0xc0>)
 8010f2e:	681a      	ldr	r2, [r3, #0]
 8010f30:	4b0f      	ldr	r3, [pc, #60]	@ (8010f70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	3304      	adds	r3, #4
 8010f36:	4619      	mov	r1, r3
 8010f38:	4610      	mov	r0, r2
 8010f3a:	f7fe fa19 	bl	800f370 <vListInsert>
}
 8010f3e:	e010      	b.n	8010f62 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010f40:	4b0f      	ldr	r3, [pc, #60]	@ (8010f80 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010f42:	681a      	ldr	r2, [r3, #0]
 8010f44:	4b0a      	ldr	r3, [pc, #40]	@ (8010f70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	3304      	adds	r3, #4
 8010f4a:	4619      	mov	r1, r3
 8010f4c:	4610      	mov	r0, r2
 8010f4e:	f7fe fa0f 	bl	800f370 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010f52:	4b0c      	ldr	r3, [pc, #48]	@ (8010f84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	68ba      	ldr	r2, [r7, #8]
 8010f58:	429a      	cmp	r2, r3
 8010f5a:	d202      	bcs.n	8010f62 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010f5c:	4a09      	ldr	r2, [pc, #36]	@ (8010f84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010f5e:	68bb      	ldr	r3, [r7, #8]
 8010f60:	6013      	str	r3, [r2, #0]
}
 8010f62:	bf00      	nop
 8010f64:	3710      	adds	r7, #16
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bd80      	pop	{r7, pc}
 8010f6a:	bf00      	nop
 8010f6c:	20002a98 	.word	0x20002a98
 8010f70:	20002994 	.word	0x20002994
 8010f74:	20002a9c 	.word	0x20002a9c
 8010f78:	20002a80 	.word	0x20002a80
 8010f7c:	20002a50 	.word	0x20002a50
 8010f80:	20002a4c 	.word	0x20002a4c
 8010f84:	20002ab4 	.word	0x20002ab4

08010f88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010f88:	b480      	push	{r7}
 8010f8a:	b085      	sub	sp, #20
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	60f8      	str	r0, [r7, #12]
 8010f90:	60b9      	str	r1, [r7, #8]
 8010f92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	3b04      	subs	r3, #4
 8010f98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010fa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	3b04      	subs	r3, #4
 8010fa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	f023 0201 	bic.w	r2, r3, #1
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	3b04      	subs	r3, #4
 8010fb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010fb8:	4a0c      	ldr	r2, [pc, #48]	@ (8010fec <pxPortInitialiseStack+0x64>)
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	3b14      	subs	r3, #20
 8010fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010fc4:	687a      	ldr	r2, [r7, #4]
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	3b04      	subs	r3, #4
 8010fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	f06f 0202 	mvn.w	r2, #2
 8010fd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	3b20      	subs	r3, #32
 8010fdc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010fde:	68fb      	ldr	r3, [r7, #12]
}
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	3714      	adds	r7, #20
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fea:	4770      	bx	lr
 8010fec:	08010ff1 	.word	0x08010ff1

08010ff0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010ff0:	b480      	push	{r7}
 8010ff2:	b085      	sub	sp, #20
 8010ff4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010ffa:	4b13      	ldr	r3, [pc, #76]	@ (8011048 <prvTaskExitError+0x58>)
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011002:	d00b      	beq.n	801101c <prvTaskExitError+0x2c>
	__asm volatile
 8011004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011008:	f383 8811 	msr	BASEPRI, r3
 801100c:	f3bf 8f6f 	isb	sy
 8011010:	f3bf 8f4f 	dsb	sy
 8011014:	60fb      	str	r3, [r7, #12]
}
 8011016:	bf00      	nop
 8011018:	bf00      	nop
 801101a:	e7fd      	b.n	8011018 <prvTaskExitError+0x28>
	__asm volatile
 801101c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011020:	f383 8811 	msr	BASEPRI, r3
 8011024:	f3bf 8f6f 	isb	sy
 8011028:	f3bf 8f4f 	dsb	sy
 801102c:	60bb      	str	r3, [r7, #8]
}
 801102e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011030:	bf00      	nop
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d0fc      	beq.n	8011032 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011038:	bf00      	nop
 801103a:	bf00      	nop
 801103c:	3714      	adds	r7, #20
 801103e:	46bd      	mov	sp, r7
 8011040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011044:	4770      	bx	lr
 8011046:	bf00      	nop
 8011048:	20000030 	.word	0x20000030
 801104c:	00000000 	.word	0x00000000

08011050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011050:	4b07      	ldr	r3, [pc, #28]	@ (8011070 <pxCurrentTCBConst2>)
 8011052:	6819      	ldr	r1, [r3, #0]
 8011054:	6808      	ldr	r0, [r1, #0]
 8011056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801105a:	f380 8809 	msr	PSP, r0
 801105e:	f3bf 8f6f 	isb	sy
 8011062:	f04f 0000 	mov.w	r0, #0
 8011066:	f380 8811 	msr	BASEPRI, r0
 801106a:	4770      	bx	lr
 801106c:	f3af 8000 	nop.w

08011070 <pxCurrentTCBConst2>:
 8011070:	20002994 	.word	0x20002994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011074:	bf00      	nop
 8011076:	bf00      	nop

08011078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011078:	4808      	ldr	r0, [pc, #32]	@ (801109c <prvPortStartFirstTask+0x24>)
 801107a:	6800      	ldr	r0, [r0, #0]
 801107c:	6800      	ldr	r0, [r0, #0]
 801107e:	f380 8808 	msr	MSP, r0
 8011082:	f04f 0000 	mov.w	r0, #0
 8011086:	f380 8814 	msr	CONTROL, r0
 801108a:	b662      	cpsie	i
 801108c:	b661      	cpsie	f
 801108e:	f3bf 8f4f 	dsb	sy
 8011092:	f3bf 8f6f 	isb	sy
 8011096:	df00      	svc	0
 8011098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801109a:	bf00      	nop
 801109c:	e000ed08 	.word	0xe000ed08

080110a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b086      	sub	sp, #24
 80110a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80110a6:	4b47      	ldr	r3, [pc, #284]	@ (80111c4 <xPortStartScheduler+0x124>)
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	4a47      	ldr	r2, [pc, #284]	@ (80111c8 <xPortStartScheduler+0x128>)
 80110ac:	4293      	cmp	r3, r2
 80110ae:	d10b      	bne.n	80110c8 <xPortStartScheduler+0x28>
	__asm volatile
 80110b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110b4:	f383 8811 	msr	BASEPRI, r3
 80110b8:	f3bf 8f6f 	isb	sy
 80110bc:	f3bf 8f4f 	dsb	sy
 80110c0:	613b      	str	r3, [r7, #16]
}
 80110c2:	bf00      	nop
 80110c4:	bf00      	nop
 80110c6:	e7fd      	b.n	80110c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80110c8:	4b3e      	ldr	r3, [pc, #248]	@ (80111c4 <xPortStartScheduler+0x124>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	4a3f      	ldr	r2, [pc, #252]	@ (80111cc <xPortStartScheduler+0x12c>)
 80110ce:	4293      	cmp	r3, r2
 80110d0:	d10b      	bne.n	80110ea <xPortStartScheduler+0x4a>
	__asm volatile
 80110d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110d6:	f383 8811 	msr	BASEPRI, r3
 80110da:	f3bf 8f6f 	isb	sy
 80110de:	f3bf 8f4f 	dsb	sy
 80110e2:	60fb      	str	r3, [r7, #12]
}
 80110e4:	bf00      	nop
 80110e6:	bf00      	nop
 80110e8:	e7fd      	b.n	80110e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80110ea:	4b39      	ldr	r3, [pc, #228]	@ (80111d0 <xPortStartScheduler+0x130>)
 80110ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80110ee:	697b      	ldr	r3, [r7, #20]
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	b2db      	uxtb	r3, r3
 80110f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80110f6:	697b      	ldr	r3, [r7, #20]
 80110f8:	22ff      	movs	r2, #255	@ 0xff
 80110fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	b2db      	uxtb	r3, r3
 8011102:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011104:	78fb      	ldrb	r3, [r7, #3]
 8011106:	b2db      	uxtb	r3, r3
 8011108:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801110c:	b2da      	uxtb	r2, r3
 801110e:	4b31      	ldr	r3, [pc, #196]	@ (80111d4 <xPortStartScheduler+0x134>)
 8011110:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011112:	4b31      	ldr	r3, [pc, #196]	@ (80111d8 <xPortStartScheduler+0x138>)
 8011114:	2207      	movs	r2, #7
 8011116:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011118:	e009      	b.n	801112e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801111a:	4b2f      	ldr	r3, [pc, #188]	@ (80111d8 <xPortStartScheduler+0x138>)
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	3b01      	subs	r3, #1
 8011120:	4a2d      	ldr	r2, [pc, #180]	@ (80111d8 <xPortStartScheduler+0x138>)
 8011122:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011124:	78fb      	ldrb	r3, [r7, #3]
 8011126:	b2db      	uxtb	r3, r3
 8011128:	005b      	lsls	r3, r3, #1
 801112a:	b2db      	uxtb	r3, r3
 801112c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801112e:	78fb      	ldrb	r3, [r7, #3]
 8011130:	b2db      	uxtb	r3, r3
 8011132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011136:	2b80      	cmp	r3, #128	@ 0x80
 8011138:	d0ef      	beq.n	801111a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801113a:	4b27      	ldr	r3, [pc, #156]	@ (80111d8 <xPortStartScheduler+0x138>)
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	f1c3 0307 	rsb	r3, r3, #7
 8011142:	2b04      	cmp	r3, #4
 8011144:	d00b      	beq.n	801115e <xPortStartScheduler+0xbe>
	__asm volatile
 8011146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801114a:	f383 8811 	msr	BASEPRI, r3
 801114e:	f3bf 8f6f 	isb	sy
 8011152:	f3bf 8f4f 	dsb	sy
 8011156:	60bb      	str	r3, [r7, #8]
}
 8011158:	bf00      	nop
 801115a:	bf00      	nop
 801115c:	e7fd      	b.n	801115a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801115e:	4b1e      	ldr	r3, [pc, #120]	@ (80111d8 <xPortStartScheduler+0x138>)
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	021b      	lsls	r3, r3, #8
 8011164:	4a1c      	ldr	r2, [pc, #112]	@ (80111d8 <xPortStartScheduler+0x138>)
 8011166:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011168:	4b1b      	ldr	r3, [pc, #108]	@ (80111d8 <xPortStartScheduler+0x138>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011170:	4a19      	ldr	r2, [pc, #100]	@ (80111d8 <xPortStartScheduler+0x138>)
 8011172:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	b2da      	uxtb	r2, r3
 8011178:	697b      	ldr	r3, [r7, #20]
 801117a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801117c:	4b17      	ldr	r3, [pc, #92]	@ (80111dc <xPortStartScheduler+0x13c>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	4a16      	ldr	r2, [pc, #88]	@ (80111dc <xPortStartScheduler+0x13c>)
 8011182:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011186:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011188:	4b14      	ldr	r3, [pc, #80]	@ (80111dc <xPortStartScheduler+0x13c>)
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	4a13      	ldr	r2, [pc, #76]	@ (80111dc <xPortStartScheduler+0x13c>)
 801118e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011192:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011194:	f000 f8da 	bl	801134c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011198:	4b11      	ldr	r3, [pc, #68]	@ (80111e0 <xPortStartScheduler+0x140>)
 801119a:	2200      	movs	r2, #0
 801119c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801119e:	f000 f8f9 	bl	8011394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80111a2:	4b10      	ldr	r3, [pc, #64]	@ (80111e4 <xPortStartScheduler+0x144>)
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	4a0f      	ldr	r2, [pc, #60]	@ (80111e4 <xPortStartScheduler+0x144>)
 80111a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80111ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80111ae:	f7ff ff63 	bl	8011078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80111b2:	f7ff faa1 	bl	80106f8 <vTaskSwitchContext>
	prvTaskExitError();
 80111b6:	f7ff ff1b 	bl	8010ff0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80111ba:	2300      	movs	r3, #0
}
 80111bc:	4618      	mov	r0, r3
 80111be:	3718      	adds	r7, #24
 80111c0:	46bd      	mov	sp, r7
 80111c2:	bd80      	pop	{r7, pc}
 80111c4:	e000ed00 	.word	0xe000ed00
 80111c8:	410fc271 	.word	0x410fc271
 80111cc:	410fc270 	.word	0x410fc270
 80111d0:	e000e400 	.word	0xe000e400
 80111d4:	20002ac0 	.word	0x20002ac0
 80111d8:	20002ac4 	.word	0x20002ac4
 80111dc:	e000ed20 	.word	0xe000ed20
 80111e0:	20000030 	.word	0x20000030
 80111e4:	e000ef34 	.word	0xe000ef34

080111e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80111e8:	b480      	push	{r7}
 80111ea:	b083      	sub	sp, #12
 80111ec:	af00      	add	r7, sp, #0
	__asm volatile
 80111ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111f2:	f383 8811 	msr	BASEPRI, r3
 80111f6:	f3bf 8f6f 	isb	sy
 80111fa:	f3bf 8f4f 	dsb	sy
 80111fe:	607b      	str	r3, [r7, #4]
}
 8011200:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011202:	4b10      	ldr	r3, [pc, #64]	@ (8011244 <vPortEnterCritical+0x5c>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	3301      	adds	r3, #1
 8011208:	4a0e      	ldr	r2, [pc, #56]	@ (8011244 <vPortEnterCritical+0x5c>)
 801120a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801120c:	4b0d      	ldr	r3, [pc, #52]	@ (8011244 <vPortEnterCritical+0x5c>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	2b01      	cmp	r3, #1
 8011212:	d110      	bne.n	8011236 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011214:	4b0c      	ldr	r3, [pc, #48]	@ (8011248 <vPortEnterCritical+0x60>)
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	b2db      	uxtb	r3, r3
 801121a:	2b00      	cmp	r3, #0
 801121c:	d00b      	beq.n	8011236 <vPortEnterCritical+0x4e>
	__asm volatile
 801121e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011222:	f383 8811 	msr	BASEPRI, r3
 8011226:	f3bf 8f6f 	isb	sy
 801122a:	f3bf 8f4f 	dsb	sy
 801122e:	603b      	str	r3, [r7, #0]
}
 8011230:	bf00      	nop
 8011232:	bf00      	nop
 8011234:	e7fd      	b.n	8011232 <vPortEnterCritical+0x4a>
	}
}
 8011236:	bf00      	nop
 8011238:	370c      	adds	r7, #12
 801123a:	46bd      	mov	sp, r7
 801123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011240:	4770      	bx	lr
 8011242:	bf00      	nop
 8011244:	20000030 	.word	0x20000030
 8011248:	e000ed04 	.word	0xe000ed04

0801124c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801124c:	b480      	push	{r7}
 801124e:	b083      	sub	sp, #12
 8011250:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011252:	4b12      	ldr	r3, [pc, #72]	@ (801129c <vPortExitCritical+0x50>)
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d10b      	bne.n	8011272 <vPortExitCritical+0x26>
	__asm volatile
 801125a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801125e:	f383 8811 	msr	BASEPRI, r3
 8011262:	f3bf 8f6f 	isb	sy
 8011266:	f3bf 8f4f 	dsb	sy
 801126a:	607b      	str	r3, [r7, #4]
}
 801126c:	bf00      	nop
 801126e:	bf00      	nop
 8011270:	e7fd      	b.n	801126e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011272:	4b0a      	ldr	r3, [pc, #40]	@ (801129c <vPortExitCritical+0x50>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	3b01      	subs	r3, #1
 8011278:	4a08      	ldr	r2, [pc, #32]	@ (801129c <vPortExitCritical+0x50>)
 801127a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801127c:	4b07      	ldr	r3, [pc, #28]	@ (801129c <vPortExitCritical+0x50>)
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d105      	bne.n	8011290 <vPortExitCritical+0x44>
 8011284:	2300      	movs	r3, #0
 8011286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	f383 8811 	msr	BASEPRI, r3
}
 801128e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011290:	bf00      	nop
 8011292:	370c      	adds	r7, #12
 8011294:	46bd      	mov	sp, r7
 8011296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129a:	4770      	bx	lr
 801129c:	20000030 	.word	0x20000030

080112a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80112a0:	f3ef 8009 	mrs	r0, PSP
 80112a4:	f3bf 8f6f 	isb	sy
 80112a8:	4b15      	ldr	r3, [pc, #84]	@ (8011300 <pxCurrentTCBConst>)
 80112aa:	681a      	ldr	r2, [r3, #0]
 80112ac:	f01e 0f10 	tst.w	lr, #16
 80112b0:	bf08      	it	eq
 80112b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80112b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112ba:	6010      	str	r0, [r2, #0]
 80112bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80112c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80112c4:	f380 8811 	msr	BASEPRI, r0
 80112c8:	f3bf 8f4f 	dsb	sy
 80112cc:	f3bf 8f6f 	isb	sy
 80112d0:	f7ff fa12 	bl	80106f8 <vTaskSwitchContext>
 80112d4:	f04f 0000 	mov.w	r0, #0
 80112d8:	f380 8811 	msr	BASEPRI, r0
 80112dc:	bc09      	pop	{r0, r3}
 80112de:	6819      	ldr	r1, [r3, #0]
 80112e0:	6808      	ldr	r0, [r1, #0]
 80112e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112e6:	f01e 0f10 	tst.w	lr, #16
 80112ea:	bf08      	it	eq
 80112ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80112f0:	f380 8809 	msr	PSP, r0
 80112f4:	f3bf 8f6f 	isb	sy
 80112f8:	4770      	bx	lr
 80112fa:	bf00      	nop
 80112fc:	f3af 8000 	nop.w

08011300 <pxCurrentTCBConst>:
 8011300:	20002994 	.word	0x20002994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011304:	bf00      	nop
 8011306:	bf00      	nop

08011308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b082      	sub	sp, #8
 801130c:	af00      	add	r7, sp, #0
	__asm volatile
 801130e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011312:	f383 8811 	msr	BASEPRI, r3
 8011316:	f3bf 8f6f 	isb	sy
 801131a:	f3bf 8f4f 	dsb	sy
 801131e:	607b      	str	r3, [r7, #4]
}
 8011320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011322:	f7ff f92f 	bl	8010584 <xTaskIncrementTick>
 8011326:	4603      	mov	r3, r0
 8011328:	2b00      	cmp	r3, #0
 801132a:	d003      	beq.n	8011334 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801132c:	4b06      	ldr	r3, [pc, #24]	@ (8011348 <SysTick_Handler+0x40>)
 801132e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011332:	601a      	str	r2, [r3, #0]
 8011334:	2300      	movs	r3, #0
 8011336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011338:	683b      	ldr	r3, [r7, #0]
 801133a:	f383 8811 	msr	BASEPRI, r3
}
 801133e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011340:	bf00      	nop
 8011342:	3708      	adds	r7, #8
 8011344:	46bd      	mov	sp, r7
 8011346:	bd80      	pop	{r7, pc}
 8011348:	e000ed04 	.word	0xe000ed04

0801134c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801134c:	b480      	push	{r7}
 801134e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011350:	4b0b      	ldr	r3, [pc, #44]	@ (8011380 <vPortSetupTimerInterrupt+0x34>)
 8011352:	2200      	movs	r2, #0
 8011354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011356:	4b0b      	ldr	r3, [pc, #44]	@ (8011384 <vPortSetupTimerInterrupt+0x38>)
 8011358:	2200      	movs	r2, #0
 801135a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801135c:	4b0a      	ldr	r3, [pc, #40]	@ (8011388 <vPortSetupTimerInterrupt+0x3c>)
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	4a0a      	ldr	r2, [pc, #40]	@ (801138c <vPortSetupTimerInterrupt+0x40>)
 8011362:	fba2 2303 	umull	r2, r3, r2, r3
 8011366:	099b      	lsrs	r3, r3, #6
 8011368:	4a09      	ldr	r2, [pc, #36]	@ (8011390 <vPortSetupTimerInterrupt+0x44>)
 801136a:	3b01      	subs	r3, #1
 801136c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801136e:	4b04      	ldr	r3, [pc, #16]	@ (8011380 <vPortSetupTimerInterrupt+0x34>)
 8011370:	2207      	movs	r2, #7
 8011372:	601a      	str	r2, [r3, #0]
}
 8011374:	bf00      	nop
 8011376:	46bd      	mov	sp, r7
 8011378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137c:	4770      	bx	lr
 801137e:	bf00      	nop
 8011380:	e000e010 	.word	0xe000e010
 8011384:	e000e018 	.word	0xe000e018
 8011388:	20000004 	.word	0x20000004
 801138c:	10624dd3 	.word	0x10624dd3
 8011390:	e000e014 	.word	0xe000e014

08011394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011394:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80113a4 <vPortEnableVFP+0x10>
 8011398:	6801      	ldr	r1, [r0, #0]
 801139a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801139e:	6001      	str	r1, [r0, #0]
 80113a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80113a2:	bf00      	nop
 80113a4:	e000ed88 	.word	0xe000ed88

080113a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80113a8:	b480      	push	{r7}
 80113aa:	b085      	sub	sp, #20
 80113ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80113ae:	f3ef 8305 	mrs	r3, IPSR
 80113b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	2b0f      	cmp	r3, #15
 80113b8:	d915      	bls.n	80113e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80113ba:	4a18      	ldr	r2, [pc, #96]	@ (801141c <vPortValidateInterruptPriority+0x74>)
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	4413      	add	r3, r2
 80113c0:	781b      	ldrb	r3, [r3, #0]
 80113c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80113c4:	4b16      	ldr	r3, [pc, #88]	@ (8011420 <vPortValidateInterruptPriority+0x78>)
 80113c6:	781b      	ldrb	r3, [r3, #0]
 80113c8:	7afa      	ldrb	r2, [r7, #11]
 80113ca:	429a      	cmp	r2, r3
 80113cc:	d20b      	bcs.n	80113e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80113ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113d2:	f383 8811 	msr	BASEPRI, r3
 80113d6:	f3bf 8f6f 	isb	sy
 80113da:	f3bf 8f4f 	dsb	sy
 80113de:	607b      	str	r3, [r7, #4]
}
 80113e0:	bf00      	nop
 80113e2:	bf00      	nop
 80113e4:	e7fd      	b.n	80113e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80113e6:	4b0f      	ldr	r3, [pc, #60]	@ (8011424 <vPortValidateInterruptPriority+0x7c>)
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80113ee:	4b0e      	ldr	r3, [pc, #56]	@ (8011428 <vPortValidateInterruptPriority+0x80>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	429a      	cmp	r2, r3
 80113f4:	d90b      	bls.n	801140e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80113f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113fa:	f383 8811 	msr	BASEPRI, r3
 80113fe:	f3bf 8f6f 	isb	sy
 8011402:	f3bf 8f4f 	dsb	sy
 8011406:	603b      	str	r3, [r7, #0]
}
 8011408:	bf00      	nop
 801140a:	bf00      	nop
 801140c:	e7fd      	b.n	801140a <vPortValidateInterruptPriority+0x62>
	}
 801140e:	bf00      	nop
 8011410:	3714      	adds	r7, #20
 8011412:	46bd      	mov	sp, r7
 8011414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011418:	4770      	bx	lr
 801141a:	bf00      	nop
 801141c:	e000e3f0 	.word	0xe000e3f0
 8011420:	20002ac0 	.word	0x20002ac0
 8011424:	e000ed0c 	.word	0xe000ed0c
 8011428:	20002ac4 	.word	0x20002ac4

0801142c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b08a      	sub	sp, #40	@ 0x28
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011434:	2300      	movs	r3, #0
 8011436:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011438:	f7fe ffe8 	bl	801040c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801143c:	4b5c      	ldr	r3, [pc, #368]	@ (80115b0 <pvPortMalloc+0x184>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d101      	bne.n	8011448 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011444:	f000 f930 	bl	80116a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011448:	4b5a      	ldr	r3, [pc, #360]	@ (80115b4 <pvPortMalloc+0x188>)
 801144a:	681a      	ldr	r2, [r3, #0]
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	4013      	ands	r3, r2
 8011450:	2b00      	cmp	r3, #0
 8011452:	f040 8095 	bne.w	8011580 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d01e      	beq.n	801149a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801145c:	2208      	movs	r2, #8
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	4413      	add	r3, r2
 8011462:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f003 0307 	and.w	r3, r3, #7
 801146a:	2b00      	cmp	r3, #0
 801146c:	d015      	beq.n	801149a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	f023 0307 	bic.w	r3, r3, #7
 8011474:	3308      	adds	r3, #8
 8011476:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	f003 0307 	and.w	r3, r3, #7
 801147e:	2b00      	cmp	r3, #0
 8011480:	d00b      	beq.n	801149a <pvPortMalloc+0x6e>
	__asm volatile
 8011482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011486:	f383 8811 	msr	BASEPRI, r3
 801148a:	f3bf 8f6f 	isb	sy
 801148e:	f3bf 8f4f 	dsb	sy
 8011492:	617b      	str	r3, [r7, #20]
}
 8011494:	bf00      	nop
 8011496:	bf00      	nop
 8011498:	e7fd      	b.n	8011496 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d06f      	beq.n	8011580 <pvPortMalloc+0x154>
 80114a0:	4b45      	ldr	r3, [pc, #276]	@ (80115b8 <pvPortMalloc+0x18c>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	687a      	ldr	r2, [r7, #4]
 80114a6:	429a      	cmp	r2, r3
 80114a8:	d86a      	bhi.n	8011580 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80114aa:	4b44      	ldr	r3, [pc, #272]	@ (80115bc <pvPortMalloc+0x190>)
 80114ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80114ae:	4b43      	ldr	r3, [pc, #268]	@ (80115bc <pvPortMalloc+0x190>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80114b4:	e004      	b.n	80114c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80114b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80114ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80114c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114c2:	685b      	ldr	r3, [r3, #4]
 80114c4:	687a      	ldr	r2, [r7, #4]
 80114c6:	429a      	cmp	r2, r3
 80114c8:	d903      	bls.n	80114d2 <pvPortMalloc+0xa6>
 80114ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d1f1      	bne.n	80114b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80114d2:	4b37      	ldr	r3, [pc, #220]	@ (80115b0 <pvPortMalloc+0x184>)
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80114d8:	429a      	cmp	r2, r3
 80114da:	d051      	beq.n	8011580 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80114dc:	6a3b      	ldr	r3, [r7, #32]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	2208      	movs	r2, #8
 80114e2:	4413      	add	r3, r2
 80114e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80114e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114e8:	681a      	ldr	r2, [r3, #0]
 80114ea:	6a3b      	ldr	r3, [r7, #32]
 80114ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80114ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114f0:	685a      	ldr	r2, [r3, #4]
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	1ad2      	subs	r2, r2, r3
 80114f6:	2308      	movs	r3, #8
 80114f8:	005b      	lsls	r3, r3, #1
 80114fa:	429a      	cmp	r2, r3
 80114fc:	d920      	bls.n	8011540 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80114fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	4413      	add	r3, r2
 8011504:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011506:	69bb      	ldr	r3, [r7, #24]
 8011508:	f003 0307 	and.w	r3, r3, #7
 801150c:	2b00      	cmp	r3, #0
 801150e:	d00b      	beq.n	8011528 <pvPortMalloc+0xfc>
	__asm volatile
 8011510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011514:	f383 8811 	msr	BASEPRI, r3
 8011518:	f3bf 8f6f 	isb	sy
 801151c:	f3bf 8f4f 	dsb	sy
 8011520:	613b      	str	r3, [r7, #16]
}
 8011522:	bf00      	nop
 8011524:	bf00      	nop
 8011526:	e7fd      	b.n	8011524 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801152a:	685a      	ldr	r2, [r3, #4]
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	1ad2      	subs	r2, r2, r3
 8011530:	69bb      	ldr	r3, [r7, #24]
 8011532:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011536:	687a      	ldr	r2, [r7, #4]
 8011538:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801153a:	69b8      	ldr	r0, [r7, #24]
 801153c:	f000 f918 	bl	8011770 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011540:	4b1d      	ldr	r3, [pc, #116]	@ (80115b8 <pvPortMalloc+0x18c>)
 8011542:	681a      	ldr	r2, [r3, #0]
 8011544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011546:	685b      	ldr	r3, [r3, #4]
 8011548:	1ad3      	subs	r3, r2, r3
 801154a:	4a1b      	ldr	r2, [pc, #108]	@ (80115b8 <pvPortMalloc+0x18c>)
 801154c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801154e:	4b1a      	ldr	r3, [pc, #104]	@ (80115b8 <pvPortMalloc+0x18c>)
 8011550:	681a      	ldr	r2, [r3, #0]
 8011552:	4b1b      	ldr	r3, [pc, #108]	@ (80115c0 <pvPortMalloc+0x194>)
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	429a      	cmp	r2, r3
 8011558:	d203      	bcs.n	8011562 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801155a:	4b17      	ldr	r3, [pc, #92]	@ (80115b8 <pvPortMalloc+0x18c>)
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	4a18      	ldr	r2, [pc, #96]	@ (80115c0 <pvPortMalloc+0x194>)
 8011560:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011564:	685a      	ldr	r2, [r3, #4]
 8011566:	4b13      	ldr	r3, [pc, #76]	@ (80115b4 <pvPortMalloc+0x188>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	431a      	orrs	r2, r3
 801156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801156e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011572:	2200      	movs	r2, #0
 8011574:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011576:	4b13      	ldr	r3, [pc, #76]	@ (80115c4 <pvPortMalloc+0x198>)
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	3301      	adds	r3, #1
 801157c:	4a11      	ldr	r2, [pc, #68]	@ (80115c4 <pvPortMalloc+0x198>)
 801157e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011580:	f7fe ff52 	bl	8010428 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011584:	69fb      	ldr	r3, [r7, #28]
 8011586:	f003 0307 	and.w	r3, r3, #7
 801158a:	2b00      	cmp	r3, #0
 801158c:	d00b      	beq.n	80115a6 <pvPortMalloc+0x17a>
	__asm volatile
 801158e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011592:	f383 8811 	msr	BASEPRI, r3
 8011596:	f3bf 8f6f 	isb	sy
 801159a:	f3bf 8f4f 	dsb	sy
 801159e:	60fb      	str	r3, [r7, #12]
}
 80115a0:	bf00      	nop
 80115a2:	bf00      	nop
 80115a4:	e7fd      	b.n	80115a2 <pvPortMalloc+0x176>
	return pvReturn;
 80115a6:	69fb      	ldr	r3, [r7, #28]
}
 80115a8:	4618      	mov	r0, r3
 80115aa:	3728      	adds	r7, #40	@ 0x28
 80115ac:	46bd      	mov	sp, r7
 80115ae:	bd80      	pop	{r7, pc}
 80115b0:	20016350 	.word	0x20016350
 80115b4:	20016364 	.word	0x20016364
 80115b8:	20016354 	.word	0x20016354
 80115bc:	20016348 	.word	0x20016348
 80115c0:	20016358 	.word	0x20016358
 80115c4:	2001635c 	.word	0x2001635c

080115c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b086      	sub	sp, #24
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d04f      	beq.n	801167a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80115da:	2308      	movs	r3, #8
 80115dc:	425b      	negs	r3, r3
 80115de:	697a      	ldr	r2, [r7, #20]
 80115e0:	4413      	add	r3, r2
 80115e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80115e4:	697b      	ldr	r3, [r7, #20]
 80115e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80115e8:	693b      	ldr	r3, [r7, #16]
 80115ea:	685a      	ldr	r2, [r3, #4]
 80115ec:	4b25      	ldr	r3, [pc, #148]	@ (8011684 <vPortFree+0xbc>)
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	4013      	ands	r3, r2
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d10b      	bne.n	801160e <vPortFree+0x46>
	__asm volatile
 80115f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115fa:	f383 8811 	msr	BASEPRI, r3
 80115fe:	f3bf 8f6f 	isb	sy
 8011602:	f3bf 8f4f 	dsb	sy
 8011606:	60fb      	str	r3, [r7, #12]
}
 8011608:	bf00      	nop
 801160a:	bf00      	nop
 801160c:	e7fd      	b.n	801160a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801160e:	693b      	ldr	r3, [r7, #16]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d00b      	beq.n	801162e <vPortFree+0x66>
	__asm volatile
 8011616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801161a:	f383 8811 	msr	BASEPRI, r3
 801161e:	f3bf 8f6f 	isb	sy
 8011622:	f3bf 8f4f 	dsb	sy
 8011626:	60bb      	str	r3, [r7, #8]
}
 8011628:	bf00      	nop
 801162a:	bf00      	nop
 801162c:	e7fd      	b.n	801162a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801162e:	693b      	ldr	r3, [r7, #16]
 8011630:	685a      	ldr	r2, [r3, #4]
 8011632:	4b14      	ldr	r3, [pc, #80]	@ (8011684 <vPortFree+0xbc>)
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	4013      	ands	r3, r2
 8011638:	2b00      	cmp	r3, #0
 801163a:	d01e      	beq.n	801167a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801163c:	693b      	ldr	r3, [r7, #16]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d11a      	bne.n	801167a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011644:	693b      	ldr	r3, [r7, #16]
 8011646:	685a      	ldr	r2, [r3, #4]
 8011648:	4b0e      	ldr	r3, [pc, #56]	@ (8011684 <vPortFree+0xbc>)
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	43db      	mvns	r3, r3
 801164e:	401a      	ands	r2, r3
 8011650:	693b      	ldr	r3, [r7, #16]
 8011652:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011654:	f7fe feda 	bl	801040c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011658:	693b      	ldr	r3, [r7, #16]
 801165a:	685a      	ldr	r2, [r3, #4]
 801165c:	4b0a      	ldr	r3, [pc, #40]	@ (8011688 <vPortFree+0xc0>)
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	4413      	add	r3, r2
 8011662:	4a09      	ldr	r2, [pc, #36]	@ (8011688 <vPortFree+0xc0>)
 8011664:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011666:	6938      	ldr	r0, [r7, #16]
 8011668:	f000 f882 	bl	8011770 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801166c:	4b07      	ldr	r3, [pc, #28]	@ (801168c <vPortFree+0xc4>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	3301      	adds	r3, #1
 8011672:	4a06      	ldr	r2, [pc, #24]	@ (801168c <vPortFree+0xc4>)
 8011674:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011676:	f7fe fed7 	bl	8010428 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801167a:	bf00      	nop
 801167c:	3718      	adds	r7, #24
 801167e:	46bd      	mov	sp, r7
 8011680:	bd80      	pop	{r7, pc}
 8011682:	bf00      	nop
 8011684:	20016364 	.word	0x20016364
 8011688:	20016354 	.word	0x20016354
 801168c:	20016360 	.word	0x20016360

08011690 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8011690:	b480      	push	{r7}
 8011692:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8011694:	4b03      	ldr	r3, [pc, #12]	@ (80116a4 <xPortGetFreeHeapSize+0x14>)
 8011696:	681b      	ldr	r3, [r3, #0]
}
 8011698:	4618      	mov	r0, r3
 801169a:	46bd      	mov	sp, r7
 801169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a0:	4770      	bx	lr
 80116a2:	bf00      	nop
 80116a4:	20016354 	.word	0x20016354

080116a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80116a8:	b480      	push	{r7}
 80116aa:	b085      	sub	sp, #20
 80116ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80116ae:	4b29      	ldr	r3, [pc, #164]	@ (8011754 <prvHeapInit+0xac>)
 80116b0:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80116b2:	4b29      	ldr	r3, [pc, #164]	@ (8011758 <prvHeapInit+0xb0>)
 80116b4:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	f003 0307 	and.w	r3, r3, #7
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d00c      	beq.n	80116da <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	3307      	adds	r3, #7
 80116c4:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	f023 0307 	bic.w	r3, r3, #7
 80116cc:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80116ce:	68ba      	ldr	r2, [r7, #8]
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	1ad3      	subs	r3, r2, r3
 80116d4:	4a20      	ldr	r2, [pc, #128]	@ (8011758 <prvHeapInit+0xb0>)
 80116d6:	4413      	add	r3, r2
 80116d8:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80116de:	4a1f      	ldr	r2, [pc, #124]	@ (801175c <prvHeapInit+0xb4>)
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80116e4:	4b1d      	ldr	r3, [pc, #116]	@ (801175c <prvHeapInit+0xb4>)
 80116e6:	2200      	movs	r2, #0
 80116e8:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	68ba      	ldr	r2, [r7, #8]
 80116ee:	4413      	add	r3, r2
 80116f0:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80116f2:	2208      	movs	r2, #8
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	1a9b      	subs	r3, r3, r2
 80116f8:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	f023 0307 	bic.w	r3, r3, #7
 8011700:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	4a16      	ldr	r2, [pc, #88]	@ (8011760 <prvHeapInit+0xb8>)
 8011706:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011708:	4b15      	ldr	r3, [pc, #84]	@ (8011760 <prvHeapInit+0xb8>)
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	2200      	movs	r2, #0
 801170e:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011710:	4b13      	ldr	r3, [pc, #76]	@ (8011760 <prvHeapInit+0xb8>)
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	2200      	movs	r2, #0
 8011716:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801171c:	683b      	ldr	r3, [r7, #0]
 801171e:	68fa      	ldr	r2, [r7, #12]
 8011720:	1ad2      	subs	r2, r2, r3
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011726:	4b0e      	ldr	r3, [pc, #56]	@ (8011760 <prvHeapInit+0xb8>)
 8011728:	681a      	ldr	r2, [r3, #0]
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801172e:	683b      	ldr	r3, [r7, #0]
 8011730:	685b      	ldr	r3, [r3, #4]
 8011732:	4a0c      	ldr	r2, [pc, #48]	@ (8011764 <prvHeapInit+0xbc>)
 8011734:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011736:	683b      	ldr	r3, [r7, #0]
 8011738:	685b      	ldr	r3, [r3, #4]
 801173a:	4a0b      	ldr	r2, [pc, #44]	@ (8011768 <prvHeapInit+0xc0>)
 801173c:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801173e:	4b0b      	ldr	r3, [pc, #44]	@ (801176c <prvHeapInit+0xc4>)
 8011740:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8011744:	601a      	str	r2, [r3, #0]
}
 8011746:	bf00      	nop
 8011748:	3714      	adds	r7, #20
 801174a:	46bd      	mov	sp, r7
 801174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011750:	4770      	bx	lr
 8011752:	bf00      	nop
 8011754:	00013880 	.word	0x00013880
 8011758:	20002ac8 	.word	0x20002ac8
 801175c:	20016348 	.word	0x20016348
 8011760:	20016350 	.word	0x20016350
 8011764:	20016358 	.word	0x20016358
 8011768:	20016354 	.word	0x20016354
 801176c:	20016364 	.word	0x20016364

08011770 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011770:	b480      	push	{r7}
 8011772:	b085      	sub	sp, #20
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011778:	4b28      	ldr	r3, [pc, #160]	@ (801181c <prvInsertBlockIntoFreeList+0xac>)
 801177a:	60fb      	str	r3, [r7, #12]
 801177c:	e002      	b.n	8011784 <prvInsertBlockIntoFreeList+0x14>
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	60fb      	str	r3, [r7, #12]
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	687a      	ldr	r2, [r7, #4]
 801178a:	429a      	cmp	r2, r3
 801178c:	d8f7      	bhi.n	801177e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	685b      	ldr	r3, [r3, #4]
 8011796:	68ba      	ldr	r2, [r7, #8]
 8011798:	4413      	add	r3, r2
 801179a:	687a      	ldr	r2, [r7, #4]
 801179c:	429a      	cmp	r2, r3
 801179e:	d108      	bne.n	80117b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	685a      	ldr	r2, [r3, #4]
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	685b      	ldr	r3, [r3, #4]
 80117a8:	441a      	add	r2, r3
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	685b      	ldr	r3, [r3, #4]
 80117ba:	68ba      	ldr	r2, [r7, #8]
 80117bc:	441a      	add	r2, r3
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	429a      	cmp	r2, r3
 80117c4:	d118      	bne.n	80117f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	681a      	ldr	r2, [r3, #0]
 80117ca:	4b15      	ldr	r3, [pc, #84]	@ (8011820 <prvInsertBlockIntoFreeList+0xb0>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	429a      	cmp	r2, r3
 80117d0:	d00d      	beq.n	80117ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	685a      	ldr	r2, [r3, #4]
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	685b      	ldr	r3, [r3, #4]
 80117dc:	441a      	add	r2, r3
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	681a      	ldr	r2, [r3, #0]
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	601a      	str	r2, [r3, #0]
 80117ec:	e008      	b.n	8011800 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80117ee:	4b0c      	ldr	r3, [pc, #48]	@ (8011820 <prvInsertBlockIntoFreeList+0xb0>)
 80117f0:	681a      	ldr	r2, [r3, #0]
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	601a      	str	r2, [r3, #0]
 80117f6:	e003      	b.n	8011800 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	681a      	ldr	r2, [r3, #0]
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011800:	68fa      	ldr	r2, [r7, #12]
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	429a      	cmp	r2, r3
 8011806:	d002      	beq.n	801180e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	687a      	ldr	r2, [r7, #4]
 801180c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801180e:	bf00      	nop
 8011810:	3714      	adds	r7, #20
 8011812:	46bd      	mov	sp, r7
 8011814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011818:	4770      	bx	lr
 801181a:	bf00      	nop
 801181c:	20016348 	.word	0x20016348
 8011820:	20016350 	.word	0x20016350

08011824 <arm_fill_f32>:
 8011824:	b410      	push	{r4}
 8011826:	088c      	lsrs	r4, r1, #2
 8011828:	d010      	beq.n	801184c <arm_fill_f32+0x28>
 801182a:	f100 0310 	add.w	r3, r0, #16
 801182e:	4622      	mov	r2, r4
 8011830:	3a01      	subs	r2, #1
 8011832:	ed03 0a04 	vstr	s0, [r3, #-16]
 8011836:	ed03 0a03 	vstr	s0, [r3, #-12]
 801183a:	ed03 0a02 	vstr	s0, [r3, #-8]
 801183e:	ed03 0a01 	vstr	s0, [r3, #-4]
 8011842:	f103 0310 	add.w	r3, r3, #16
 8011846:	d1f3      	bne.n	8011830 <arm_fill_f32+0xc>
 8011848:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801184c:	f011 0103 	ands.w	r1, r1, #3
 8011850:	d003      	beq.n	801185a <arm_fill_f32+0x36>
 8011852:	3901      	subs	r1, #1
 8011854:	eca0 0a01 	vstmia	r0!, {s0}
 8011858:	d1fb      	bne.n	8011852 <arm_fill_f32+0x2e>
 801185a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801185e:	4770      	bx	lr

08011860 <arm_min_f32>:
 8011860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011864:	1e4f      	subs	r7, r1, #1
 8011866:	ea5f 0897 	movs.w	r8, r7, lsr #2
 801186a:	f100 0e04 	add.w	lr, r0, #4
 801186e:	edd0 7a00 	vldr	s15, [r0]
 8011872:	d058      	beq.n	8011926 <arm_min_f32+0xc6>
 8011874:	3014      	adds	r0, #20
 8011876:	46c4      	mov	ip, r8
 8011878:	2604      	movs	r6, #4
 801187a:	2400      	movs	r4, #0
 801187c:	ed10 6a04 	vldr	s12, [r0, #-16]
 8011880:	ed50 6a03 	vldr	s13, [r0, #-12]
 8011884:	ed10 7a02 	vldr	s14, [r0, #-8]
 8011888:	ed50 5a01 	vldr	s11, [r0, #-4]
 801188c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8011890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011894:	bf48      	it	mi
 8011896:	eef0 7a46 	vmovmi.f32	s15, s12
 801189a:	f1a6 0503 	sub.w	r5, r6, #3
 801189e:	eef4 7ae6 	vcmpe.f32	s15, s13
 80118a2:	bf48      	it	mi
 80118a4:	462c      	movmi	r4, r5
 80118a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118aa:	bfc8      	it	gt
 80118ac:	eef0 7a66 	vmovgt.f32	s15, s13
 80118b0:	f1a6 0502 	sub.w	r5, r6, #2
 80118b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80118b8:	bfc8      	it	gt
 80118ba:	462c      	movgt	r4, r5
 80118bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118c0:	bfc8      	it	gt
 80118c2:	eef0 7a47 	vmovgt.f32	s15, s14
 80118c6:	f106 35ff 	add.w	r5, r6, #4294967295
 80118ca:	eef4 7ae5 	vcmpe.f32	s15, s11
 80118ce:	bfc8      	it	gt
 80118d0:	462c      	movgt	r4, r5
 80118d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118d6:	bfc8      	it	gt
 80118d8:	4634      	movgt	r4, r6
 80118da:	bfc8      	it	gt
 80118dc:	eef0 7a65 	vmovgt.f32	s15, s11
 80118e0:	f1bc 0c01 	subs.w	ip, ip, #1
 80118e4:	f106 0604 	add.w	r6, r6, #4
 80118e8:	f100 0010 	add.w	r0, r0, #16
 80118ec:	d1c6      	bne.n	801187c <arm_min_f32+0x1c>
 80118ee:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 80118f2:	f017 0003 	ands.w	r0, r7, #3
 80118f6:	d018      	beq.n	801192a <arm_min_f32+0xca>
 80118f8:	1a08      	subs	r0, r1, r0
 80118fa:	ecbe 7a01 	vldmia	lr!, {s14}
 80118fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011906:	bf48      	it	mi
 8011908:	4604      	movmi	r4, r0
 801190a:	f100 0001 	add.w	r0, r0, #1
 801190e:	bf58      	it	pl
 8011910:	eeb0 7a67 	vmovpl.f32	s14, s15
 8011914:	4288      	cmp	r0, r1
 8011916:	eef0 7a47 	vmov.f32	s15, s14
 801191a:	d1ee      	bne.n	80118fa <arm_min_f32+0x9a>
 801191c:	ed82 7a00 	vstr	s14, [r2]
 8011920:	601c      	str	r4, [r3, #0]
 8011922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011926:	4644      	mov	r4, r8
 8011928:	e7e3      	b.n	80118f2 <arm_min_f32+0x92>
 801192a:	eeb0 7a67 	vmov.f32	s14, s15
 801192e:	e7f5      	b.n	801191c <arm_min_f32+0xbc>

08011930 <arm_max_f32>:
 8011930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011934:	1e4f      	subs	r7, r1, #1
 8011936:	ea5f 0897 	movs.w	r8, r7, lsr #2
 801193a:	f100 0e04 	add.w	lr, r0, #4
 801193e:	edd0 7a00 	vldr	s15, [r0]
 8011942:	d058      	beq.n	80119f6 <arm_max_f32+0xc6>
 8011944:	3014      	adds	r0, #20
 8011946:	46c4      	mov	ip, r8
 8011948:	2604      	movs	r6, #4
 801194a:	2400      	movs	r4, #0
 801194c:	ed10 6a04 	vldr	s12, [r0, #-16]
 8011950:	ed50 6a03 	vldr	s13, [r0, #-12]
 8011954:	ed10 7a02 	vldr	s14, [r0, #-8]
 8011958:	ed50 5a01 	vldr	s11, [r0, #-4]
 801195c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8011960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011964:	bfc8      	it	gt
 8011966:	eef0 7a46 	vmovgt.f32	s15, s12
 801196a:	f1a6 0503 	sub.w	r5, r6, #3
 801196e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011972:	bfc8      	it	gt
 8011974:	462c      	movgt	r4, r5
 8011976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801197a:	bf48      	it	mi
 801197c:	eef0 7a66 	vmovmi.f32	s15, s13
 8011980:	f1a6 0502 	sub.w	r5, r6, #2
 8011984:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011988:	bf48      	it	mi
 801198a:	462c      	movmi	r4, r5
 801198c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011990:	bf48      	it	mi
 8011992:	eef0 7a47 	vmovmi.f32	s15, s14
 8011996:	f106 35ff 	add.w	r5, r6, #4294967295
 801199a:	eef4 7ae5 	vcmpe.f32	s15, s11
 801199e:	bf48      	it	mi
 80119a0:	462c      	movmi	r4, r5
 80119a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119a6:	bf48      	it	mi
 80119a8:	4634      	movmi	r4, r6
 80119aa:	bf48      	it	mi
 80119ac:	eef0 7a65 	vmovmi.f32	s15, s11
 80119b0:	f1bc 0c01 	subs.w	ip, ip, #1
 80119b4:	f106 0604 	add.w	r6, r6, #4
 80119b8:	f100 0010 	add.w	r0, r0, #16
 80119bc:	d1c6      	bne.n	801194c <arm_max_f32+0x1c>
 80119be:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 80119c2:	f017 0003 	ands.w	r0, r7, #3
 80119c6:	d018      	beq.n	80119fa <arm_max_f32+0xca>
 80119c8:	1a08      	subs	r0, r1, r0
 80119ca:	ecbe 7a01 	vldmia	lr!, {s14}
 80119ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80119d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119d6:	bfc8      	it	gt
 80119d8:	4604      	movgt	r4, r0
 80119da:	f100 0001 	add.w	r0, r0, #1
 80119de:	bfd8      	it	le
 80119e0:	eeb0 7a67 	vmovle.f32	s14, s15
 80119e4:	4288      	cmp	r0, r1
 80119e6:	eef0 7a47 	vmov.f32	s15, s14
 80119ea:	d1ee      	bne.n	80119ca <arm_max_f32+0x9a>
 80119ec:	ed82 7a00 	vstr	s14, [r2]
 80119f0:	601c      	str	r4, [r3, #0]
 80119f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119f6:	4644      	mov	r4, r8
 80119f8:	e7e3      	b.n	80119c2 <arm_max_f32+0x92>
 80119fa:	eeb0 7a67 	vmov.f32	s14, s15
 80119fe:	e7f5      	b.n	80119ec <arm_max_f32+0xbc>

08011a00 <arm_rfft_fast_init_f32>:
 8011a00:	084b      	lsrs	r3, r1, #1
 8011a02:	2b80      	cmp	r3, #128	@ 0x80
 8011a04:	b410      	push	{r4}
 8011a06:	8201      	strh	r1, [r0, #16]
 8011a08:	8003      	strh	r3, [r0, #0]
 8011a0a:	d047      	beq.n	8011a9c <arm_rfft_fast_init_f32+0x9c>
 8011a0c:	d917      	bls.n	8011a3e <arm_rfft_fast_init_f32+0x3e>
 8011a0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011a12:	d03d      	beq.n	8011a90 <arm_rfft_fast_init_f32+0x90>
 8011a14:	d929      	bls.n	8011a6a <arm_rfft_fast_init_f32+0x6a>
 8011a16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011a1a:	d020      	beq.n	8011a5e <arm_rfft_fast_init_f32+0x5e>
 8011a1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011a20:	d113      	bne.n	8011a4a <arm_rfft_fast_init_f32+0x4a>
 8011a22:	4921      	ldr	r1, [pc, #132]	@ (8011aa8 <arm_rfft_fast_init_f32+0xa8>)
 8011a24:	4a21      	ldr	r2, [pc, #132]	@ (8011aac <arm_rfft_fast_init_f32+0xac>)
 8011a26:	4b22      	ldr	r3, [pc, #136]	@ (8011ab0 <arm_rfft_fast_init_f32+0xb0>)
 8011a28:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 8011a2c:	8184      	strh	r4, [r0, #12]
 8011a2e:	6081      	str	r1, [r0, #8]
 8011a30:	6042      	str	r2, [r0, #4]
 8011a32:	6143      	str	r3, [r0, #20]
 8011a34:	2000      	movs	r0, #0
 8011a36:	b240      	sxtb	r0, r0
 8011a38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a3c:	4770      	bx	lr
 8011a3e:	2b20      	cmp	r3, #32
 8011a40:	d01c      	beq.n	8011a7c <arm_rfft_fast_init_f32+0x7c>
 8011a42:	2b40      	cmp	r3, #64	@ 0x40
 8011a44:	d006      	beq.n	8011a54 <arm_rfft_fast_init_f32+0x54>
 8011a46:	2b10      	cmp	r3, #16
 8011a48:	d01d      	beq.n	8011a86 <arm_rfft_fast_init_f32+0x86>
 8011a4a:	20ff      	movs	r0, #255	@ 0xff
 8011a4c:	b240      	sxtb	r0, r0
 8011a4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a52:	4770      	bx	lr
 8011a54:	2438      	movs	r4, #56	@ 0x38
 8011a56:	4917      	ldr	r1, [pc, #92]	@ (8011ab4 <arm_rfft_fast_init_f32+0xb4>)
 8011a58:	4a17      	ldr	r2, [pc, #92]	@ (8011ab8 <arm_rfft_fast_init_f32+0xb8>)
 8011a5a:	4b18      	ldr	r3, [pc, #96]	@ (8011abc <arm_rfft_fast_init_f32+0xbc>)
 8011a5c:	e7e6      	b.n	8011a2c <arm_rfft_fast_init_f32+0x2c>
 8011a5e:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 8011a62:	4917      	ldr	r1, [pc, #92]	@ (8011ac0 <arm_rfft_fast_init_f32+0xc0>)
 8011a64:	4a17      	ldr	r2, [pc, #92]	@ (8011ac4 <arm_rfft_fast_init_f32+0xc4>)
 8011a66:	4b18      	ldr	r3, [pc, #96]	@ (8011ac8 <arm_rfft_fast_init_f32+0xc8>)
 8011a68:	e7e0      	b.n	8011a2c <arm_rfft_fast_init_f32+0x2c>
 8011a6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011a6e:	d1ec      	bne.n	8011a4a <arm_rfft_fast_init_f32+0x4a>
 8011a70:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 8011a74:	4915      	ldr	r1, [pc, #84]	@ (8011acc <arm_rfft_fast_init_f32+0xcc>)
 8011a76:	4a16      	ldr	r2, [pc, #88]	@ (8011ad0 <arm_rfft_fast_init_f32+0xd0>)
 8011a78:	4b16      	ldr	r3, [pc, #88]	@ (8011ad4 <arm_rfft_fast_init_f32+0xd4>)
 8011a7a:	e7d7      	b.n	8011a2c <arm_rfft_fast_init_f32+0x2c>
 8011a7c:	2430      	movs	r4, #48	@ 0x30
 8011a7e:	4916      	ldr	r1, [pc, #88]	@ (8011ad8 <arm_rfft_fast_init_f32+0xd8>)
 8011a80:	4a16      	ldr	r2, [pc, #88]	@ (8011adc <arm_rfft_fast_init_f32+0xdc>)
 8011a82:	4b17      	ldr	r3, [pc, #92]	@ (8011ae0 <arm_rfft_fast_init_f32+0xe0>)
 8011a84:	e7d2      	b.n	8011a2c <arm_rfft_fast_init_f32+0x2c>
 8011a86:	2414      	movs	r4, #20
 8011a88:	4916      	ldr	r1, [pc, #88]	@ (8011ae4 <arm_rfft_fast_init_f32+0xe4>)
 8011a8a:	4a17      	ldr	r2, [pc, #92]	@ (8011ae8 <arm_rfft_fast_init_f32+0xe8>)
 8011a8c:	4b17      	ldr	r3, [pc, #92]	@ (8011aec <arm_rfft_fast_init_f32+0xec>)
 8011a8e:	e7cd      	b.n	8011a2c <arm_rfft_fast_init_f32+0x2c>
 8011a90:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 8011a94:	4916      	ldr	r1, [pc, #88]	@ (8011af0 <arm_rfft_fast_init_f32+0xf0>)
 8011a96:	4a17      	ldr	r2, [pc, #92]	@ (8011af4 <arm_rfft_fast_init_f32+0xf4>)
 8011a98:	4b17      	ldr	r3, [pc, #92]	@ (8011af8 <arm_rfft_fast_init_f32+0xf8>)
 8011a9a:	e7c7      	b.n	8011a2c <arm_rfft_fast_init_f32+0x2c>
 8011a9c:	24d0      	movs	r4, #208	@ 0xd0
 8011a9e:	4917      	ldr	r1, [pc, #92]	@ (8011afc <arm_rfft_fast_init_f32+0xfc>)
 8011aa0:	4a17      	ldr	r2, [pc, #92]	@ (8011b00 <arm_rfft_fast_init_f32+0x100>)
 8011aa2:	4b18      	ldr	r3, [pc, #96]	@ (8011b04 <arm_rfft_fast_init_f32+0x104>)
 8011aa4:	e7c2      	b.n	8011a2c <arm_rfft_fast_init_f32+0x2c>
 8011aa6:	bf00      	nop
 8011aa8:	080280d8 	.word	0x080280d8
 8011aac:	08018acc 	.word	0x08018acc
 8011ab0:	0801ec3c 	.word	0x0801ec3c
 8011ab4:	0801cbcc 	.word	0x0801cbcc
 8011ab8:	08029e98 	.word	0x08029e98
 8011abc:	0802c388 	.word	0x0802c388
 8011ac0:	080255bc 	.word	0x080255bc
 8011ac4:	080234bc 	.word	0x080234bc
 8011ac8:	0801cc3c 	.word	0x0801cc3c
 8011acc:	0802c018 	.word	0x0802c018
 8011ad0:	08022c3c 	.word	0x08022c3c
 8011ad4:	0802a098 	.word	0x0802a098
 8011ad8:	08026474 	.word	0x08026474
 8011adc:	080254bc 	.word	0x080254bc
 8011ae0:	0801cacc 	.word	0x0801cacc
 8011ae4:	080263cc 	.word	0x080263cc
 8011ae8:	0802343c 	.word	0x0802343c
 8011aec:	080263f4 	.word	0x080263f4
 8011af0:	0802a898 	.word	0x0802a898
 8011af4:	080270d8 	.word	0x080270d8
 8011af8:	0802ac18 	.word	0x0802ac18
 8011afc:	0802c588 	.word	0x0802c588
 8011b00:	08026cd8 	.word	0x08026cd8
 8011b04:	0802bc18 	.word	0x0802bc18

08011b08 <arm_rfft_fast_f32>:
 8011b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b0c:	8a06      	ldrh	r6, [r0, #16]
 8011b0e:	0876      	lsrs	r6, r6, #1
 8011b10:	4607      	mov	r7, r0
 8011b12:	4615      	mov	r5, r2
 8011b14:	8006      	strh	r6, [r0, #0]
 8011b16:	460c      	mov	r4, r1
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d15c      	bne.n	8011bd6 <arm_rfft_fast_f32+0xce>
 8011b1c:	461a      	mov	r2, r3
 8011b1e:	2301      	movs	r3, #1
 8011b20:	f000 fbe6 	bl	80122f0 <arm_cfft_f32>
 8011b24:	edd4 7a00 	vldr	s15, [r4]
 8011b28:	ed94 7a01 	vldr	s14, [r4, #4]
 8011b2c:	883e      	ldrh	r6, [r7, #0]
 8011b2e:	6978      	ldr	r0, [r7, #20]
 8011b30:	ee37 7a07 	vadd.f32	s14, s14, s14
 8011b34:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011b38:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8011b3c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8011b40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011b44:	3e01      	subs	r6, #1
 8011b46:	ee26 7aa3 	vmul.f32	s14, s13, s7
 8011b4a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8011b4e:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8011b52:	ed85 7a00 	vstr	s14, [r5]
 8011b56:	edc5 7a01 	vstr	s15, [r5, #4]
 8011b5a:	3010      	adds	r0, #16
 8011b5c:	f105 0210 	add.w	r2, r5, #16
 8011b60:	3b08      	subs	r3, #8
 8011b62:	f104 0110 	add.w	r1, r4, #16
 8011b66:	ed51 4a02 	vldr	s9, [r1, #-8]
 8011b6a:	ed93 5a02 	vldr	s10, [r3, #8]
 8011b6e:	ed11 7a01 	vldr	s14, [r1, #-4]
 8011b72:	ed10 6a02 	vldr	s12, [r0, #-8]
 8011b76:	edd3 5a03 	vldr	s11, [r3, #12]
 8011b7a:	ed50 6a01 	vldr	s13, [r0, #-4]
 8011b7e:	ee75 7a64 	vsub.f32	s15, s10, s9
 8011b82:	ee35 4a87 	vadd.f32	s8, s11, s14
 8011b86:	ee35 5a24 	vadd.f32	s10, s10, s9
 8011b8a:	ee77 5a65 	vsub.f32	s11, s14, s11
 8011b8e:	ee66 4a27 	vmul.f32	s9, s12, s15
 8011b92:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8011b96:	ee34 5a85 	vadd.f32	s10, s9, s10
 8011b9a:	ee26 6a04 	vmul.f32	s12, s12, s8
 8011b9e:	ee66 6a84 	vmul.f32	s13, s13, s8
 8011ba2:	ee77 7a25 	vadd.f32	s15, s14, s11
 8011ba6:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011baa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011bae:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8011bb2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8011bb6:	3e01      	subs	r6, #1
 8011bb8:	ed42 6a02 	vstr	s13, [r2, #-8]
 8011bbc:	ed42 7a01 	vstr	s15, [r2, #-4]
 8011bc0:	f1a3 0308 	sub.w	r3, r3, #8
 8011bc4:	f101 0108 	add.w	r1, r1, #8
 8011bc8:	f100 0008 	add.w	r0, r0, #8
 8011bcc:	f102 0208 	add.w	r2, r2, #8
 8011bd0:	d1c9      	bne.n	8011b66 <arm_rfft_fast_f32+0x5e>
 8011bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bd6:	edd1 7a00 	vldr	s15, [r1]
 8011bda:	edd1 6a01 	vldr	s13, [r1, #4]
 8011bde:	6941      	ldr	r1, [r0, #20]
 8011be0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011be4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011be8:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8011bec:	ee27 7a23 	vmul.f32	s14, s14, s7
 8011bf0:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8011bf4:	3e01      	subs	r6, #1
 8011bf6:	ed82 7a00 	vstr	s14, [r2]
 8011bfa:	edc2 7a01 	vstr	s15, [r2, #4]
 8011bfe:	00f0      	lsls	r0, r6, #3
 8011c00:	b3ee      	cbz	r6, 8011c7e <arm_rfft_fast_f32+0x176>
 8011c02:	3808      	subs	r0, #8
 8011c04:	f101 0e10 	add.w	lr, r1, #16
 8011c08:	4420      	add	r0, r4
 8011c0a:	f104 0110 	add.w	r1, r4, #16
 8011c0e:	f102 0c10 	add.w	ip, r2, #16
 8011c12:	ed90 7a02 	vldr	s14, [r0, #8]
 8011c16:	ed51 6a02 	vldr	s13, [r1, #-8]
 8011c1a:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8011c1e:	ed90 4a03 	vldr	s8, [r0, #12]
 8011c22:	ed11 5a01 	vldr	s10, [r1, #-4]
 8011c26:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8011c2a:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8011c2e:	ee74 4a05 	vadd.f32	s9, s8, s10
 8011c32:	ee26 3a27 	vmul.f32	s6, s12, s15
 8011c36:	ee77 6a26 	vadd.f32	s13, s14, s13
 8011c3a:	ee35 5a44 	vsub.f32	s10, s10, s8
 8011c3e:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8011c42:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8011c46:	ee77 7a05 	vadd.f32	s15, s14, s10
 8011c4a:	ee26 6a24 	vmul.f32	s12, s12, s9
 8011c4e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8011c52:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011c56:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8011c5a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8011c5e:	ee27 7a23 	vmul.f32	s14, s14, s7
 8011c62:	3e01      	subs	r6, #1
 8011c64:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8011c68:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8011c6c:	f1a0 0008 	sub.w	r0, r0, #8
 8011c70:	f101 0108 	add.w	r1, r1, #8
 8011c74:	f10e 0e08 	add.w	lr, lr, #8
 8011c78:	f10c 0c08 	add.w	ip, ip, #8
 8011c7c:	d1c9      	bne.n	8011c12 <arm_rfft_fast_f32+0x10a>
 8011c7e:	4638      	mov	r0, r7
 8011c80:	4629      	mov	r1, r5
 8011c82:	461a      	mov	r2, r3
 8011c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c88:	2301      	movs	r3, #1
 8011c8a:	f000 bb31 	b.w	80122f0 <arm_cfft_f32>
 8011c8e:	bf00      	nop

08011c90 <arm_cfft_radix8by2_f32>:
 8011c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c94:	ed2d 8b08 	vpush	{d8-d11}
 8011c98:	f8b0 e000 	ldrh.w	lr, [r0]
 8011c9c:	6842      	ldr	r2, [r0, #4]
 8011c9e:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8011ca2:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8011ca6:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8011caa:	4607      	mov	r7, r0
 8011cac:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8011cb0:	f000 80af 	beq.w	8011e12 <arm_cfft_radix8by2_f32+0x182>
 8011cb4:	3310      	adds	r3, #16
 8011cb6:	18ce      	adds	r6, r1, r3
 8011cb8:	3210      	adds	r2, #16
 8011cba:	4443      	add	r3, r8
 8011cbc:	f101 0510 	add.w	r5, r1, #16
 8011cc0:	f108 0410 	add.w	r4, r8, #16
 8011cc4:	ed54 1a04 	vldr	s3, [r4, #-16]
 8011cc8:	ed13 4a04 	vldr	s8, [r3, #-16]
 8011ccc:	ed53 3a03 	vldr	s7, [r3, #-12]
 8011cd0:	ed53 5a02 	vldr	s11, [r3, #-8]
 8011cd4:	ed13 5a01 	vldr	s10, [r3, #-4]
 8011cd8:	ed54 6a03 	vldr	s13, [r4, #-12]
 8011cdc:	ed14 0a02 	vldr	s0, [r4, #-8]
 8011ce0:	ed16 2a04 	vldr	s4, [r6, #-16]
 8011ce4:	ed56 2a03 	vldr	s5, [r6, #-12]
 8011ce8:	ed15 6a03 	vldr	s12, [r5, #-12]
 8011cec:	ed15 7a01 	vldr	s14, [r5, #-4]
 8011cf0:	ed15 3a04 	vldr	s6, [r5, #-16]
 8011cf4:	ed54 7a01 	vldr	s15, [r4, #-4]
 8011cf8:	ed56 0a02 	vldr	s1, [r6, #-8]
 8011cfc:	ed16 1a01 	vldr	s2, [r6, #-4]
 8011d00:	ed55 4a02 	vldr	s9, [r5, #-8]
 8011d04:	ee73 ba21 	vadd.f32	s23, s6, s3
 8011d08:	ee36 ba26 	vadd.f32	s22, s12, s13
 8011d0c:	ee37 aa27 	vadd.f32	s20, s14, s15
 8011d10:	ee72 9a04 	vadd.f32	s19, s4, s8
 8011d14:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8011d18:	ee31 8a05 	vadd.f32	s16, s2, s10
 8011d1c:	ee74 aa80 	vadd.f32	s21, s9, s0
 8011d20:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8011d24:	ed45 ba04 	vstr	s23, [r5, #-16]
 8011d28:	ed05 ba03 	vstr	s22, [r5, #-12]
 8011d2c:	ed45 aa02 	vstr	s21, [r5, #-8]
 8011d30:	ed05 aa01 	vstr	s20, [r5, #-4]
 8011d34:	ed06 8a01 	vstr	s16, [r6, #-4]
 8011d38:	ed46 9a04 	vstr	s19, [r6, #-16]
 8011d3c:	ed06 9a03 	vstr	s18, [r6, #-12]
 8011d40:	ed46 8a02 	vstr	s17, [r6, #-8]
 8011d44:	ee76 6a66 	vsub.f32	s13, s12, s13
 8011d48:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8011d4c:	ed12 6a03 	vldr	s12, [r2, #-12]
 8011d50:	ed52 2a04 	vldr	s5, [r2, #-16]
 8011d54:	ee33 3a61 	vsub.f32	s6, s6, s3
 8011d58:	ee34 4a42 	vsub.f32	s8, s8, s4
 8011d5c:	ee26 8a86 	vmul.f32	s16, s13, s12
 8011d60:	ee24 2a06 	vmul.f32	s4, s8, s12
 8011d64:	ee63 1a22 	vmul.f32	s3, s6, s5
 8011d68:	ee24 4a22 	vmul.f32	s8, s8, s5
 8011d6c:	ee23 3a06 	vmul.f32	s6, s6, s12
 8011d70:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8011d74:	ee23 6a86 	vmul.f32	s12, s7, s12
 8011d78:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8011d7c:	ee36 6a04 	vadd.f32	s12, s12, s8
 8011d80:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8011d84:	ee72 3a63 	vsub.f32	s7, s4, s7
 8011d88:	ee71 2a88 	vadd.f32	s5, s3, s16
 8011d8c:	ed44 6a03 	vstr	s13, [r4, #-12]
 8011d90:	ed44 2a04 	vstr	s5, [r4, #-16]
 8011d94:	ed43 3a04 	vstr	s7, [r3, #-16]
 8011d98:	ed03 6a03 	vstr	s12, [r3, #-12]
 8011d9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011da0:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8011da4:	ed12 7a01 	vldr	s14, [r2, #-4]
 8011da8:	ed52 5a02 	vldr	s11, [r2, #-8]
 8011dac:	ee35 6a41 	vsub.f32	s12, s10, s2
 8011db0:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8011db4:	ee67 3a87 	vmul.f32	s7, s15, s14
 8011db8:	ee26 5a87 	vmul.f32	s10, s13, s14
 8011dbc:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8011dc0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011dc4:	ee64 4a87 	vmul.f32	s9, s9, s14
 8011dc8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8011dcc:	ee26 7a07 	vmul.f32	s14, s12, s14
 8011dd0:	ee26 6a25 	vmul.f32	s12, s12, s11
 8011dd4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8011dd8:	ee74 5a23 	vadd.f32	s11, s8, s7
 8011ddc:	ee35 6a46 	vsub.f32	s12, s10, s12
 8011de0:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011de4:	f1be 0e01 	subs.w	lr, lr, #1
 8011de8:	ed44 5a02 	vstr	s11, [r4, #-8]
 8011dec:	f105 0510 	add.w	r5, r5, #16
 8011df0:	ed44 7a01 	vstr	s15, [r4, #-4]
 8011df4:	f106 0610 	add.w	r6, r6, #16
 8011df8:	ed03 6a02 	vstr	s12, [r3, #-8]
 8011dfc:	ed03 7a01 	vstr	s14, [r3, #-4]
 8011e00:	f102 0210 	add.w	r2, r2, #16
 8011e04:	f104 0410 	add.w	r4, r4, #16
 8011e08:	f103 0310 	add.w	r3, r3, #16
 8011e0c:	f47f af5a 	bne.w	8011cc4 <arm_cfft_radix8by2_f32+0x34>
 8011e10:	687a      	ldr	r2, [r7, #4]
 8011e12:	fa1f f48c 	uxth.w	r4, ip
 8011e16:	4608      	mov	r0, r1
 8011e18:	2302      	movs	r3, #2
 8011e1a:	4621      	mov	r1, r4
 8011e1c:	f000 ff78 	bl	8012d10 <arm_radix8_butterfly_f32>
 8011e20:	ecbd 8b08 	vpop	{d8-d11}
 8011e24:	4640      	mov	r0, r8
 8011e26:	4621      	mov	r1, r4
 8011e28:	687a      	ldr	r2, [r7, #4]
 8011e2a:	2302      	movs	r3, #2
 8011e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e30:	f000 bf6e 	b.w	8012d10 <arm_radix8_butterfly_f32>

08011e34 <arm_cfft_radix8by4_f32>:
 8011e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e38:	ed2d 8b0a 	vpush	{d8-d12}
 8011e3c:	8802      	ldrh	r2, [r0, #0]
 8011e3e:	ed91 6a00 	vldr	s12, [r1]
 8011e42:	b08f      	sub	sp, #60	@ 0x3c
 8011e44:	460f      	mov	r7, r1
 8011e46:	0852      	lsrs	r2, r2, #1
 8011e48:	0093      	lsls	r3, r2, #2
 8011e4a:	900c      	str	r0, [sp, #48]	@ 0x30
 8011e4c:	9103      	str	r1, [sp, #12]
 8011e4e:	6841      	ldr	r1, [r0, #4]
 8011e50:	ed97 7a01 	vldr	s14, [r7, #4]
 8011e54:	4638      	mov	r0, r7
 8011e56:	4418      	add	r0, r3
 8011e58:	4606      	mov	r6, r0
 8011e5a:	9009      	str	r0, [sp, #36]	@ 0x24
 8011e5c:	4418      	add	r0, r3
 8011e5e:	edd0 6a00 	vldr	s13, [r0]
 8011e62:	edd6 3a00 	vldr	s7, [r6]
 8011e66:	edd6 2a01 	vldr	s5, [r6, #4]
 8011e6a:	edd0 7a01 	vldr	s15, [r0, #4]
 8011e6e:	900a      	str	r0, [sp, #40]	@ 0x28
 8011e70:	ee76 5a26 	vadd.f32	s11, s12, s13
 8011e74:	4604      	mov	r4, r0
 8011e76:	4625      	mov	r5, r4
 8011e78:	441c      	add	r4, r3
 8011e7a:	ed94 4a00 	vldr	s8, [r4]
 8011e7e:	ed94 5a01 	vldr	s10, [r4, #4]
 8011e82:	9401      	str	r4, [sp, #4]
 8011e84:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8011e88:	4630      	mov	r0, r6
 8011e8a:	ee74 4a24 	vadd.f32	s9, s8, s9
 8011e8e:	463e      	mov	r6, r7
 8011e90:	ee14 ea90 	vmov	lr, s9
 8011e94:	ee76 6a66 	vsub.f32	s13, s12, s13
 8011e98:	f846 eb08 	str.w	lr, [r6], #8
 8011e9c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8011ea0:	edd0 4a01 	vldr	s9, [r0, #4]
 8011ea4:	9604      	str	r6, [sp, #16]
 8011ea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011eaa:	9e01      	ldr	r6, [sp, #4]
 8011eac:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8011eb0:	ed96 2a01 	vldr	s4, [r6, #4]
 8011eb4:	ee36 7a24 	vadd.f32	s14, s12, s9
 8011eb8:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8011ebc:	ee77 4ae3 	vsub.f32	s9, s15, s7
 8011ec0:	ee36 6a62 	vsub.f32	s12, s12, s5
 8011ec4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011ec8:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8011ecc:	ee73 3a45 	vsub.f32	s7, s6, s10
 8011ed0:	4604      	mov	r4, r0
 8011ed2:	ee36 6a45 	vsub.f32	s12, s12, s10
 8011ed6:	ee75 6a26 	vadd.f32	s13, s10, s13
 8011eda:	46a3      	mov	fp, r4
 8011edc:	ee37 7a02 	vadd.f32	s14, s14, s4
 8011ee0:	ee34 5a84 	vadd.f32	s10, s9, s8
 8011ee4:	ee13 8a90 	vmov	r8, s7
 8011ee8:	46a4      	mov	ip, r4
 8011eea:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8011eee:	ed87 7a01 	vstr	s14, [r7, #4]
 8011ef2:	f84b 8b08 	str.w	r8, [fp], #8
 8011ef6:	f1ac 0704 	sub.w	r7, ip, #4
 8011efa:	ed8c 5a01 	vstr	s10, [ip, #4]
 8011efe:	f101 0c08 	add.w	ip, r1, #8
 8011f02:	462c      	mov	r4, r5
 8011f04:	f8cd c014 	str.w	ip, [sp, #20]
 8011f08:	ee15 ca90 	vmov	ip, s11
 8011f0c:	f844 cb08 	str.w	ip, [r4], #8
 8011f10:	9407      	str	r4, [sp, #28]
 8011f12:	f101 0410 	add.w	r4, r1, #16
 8011f16:	ed85 6a01 	vstr	s12, [r5, #4]
 8011f1a:	0852      	lsrs	r2, r2, #1
 8011f1c:	9402      	str	r4, [sp, #8]
 8011f1e:	462c      	mov	r4, r5
 8011f20:	f101 0518 	add.w	r5, r1, #24
 8011f24:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011f26:	46b2      	mov	sl, r6
 8011f28:	9506      	str	r5, [sp, #24]
 8011f2a:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8011f2e:	3a02      	subs	r2, #2
 8011f30:	ee16 5a90 	vmov	r5, s13
 8011f34:	46b6      	mov	lr, r6
 8011f36:	4630      	mov	r0, r6
 8011f38:	0852      	lsrs	r2, r2, #1
 8011f3a:	f84a 5b08 	str.w	r5, [sl], #8
 8011f3e:	f1a0 0604 	sub.w	r6, r0, #4
 8011f42:	edce 7a01 	vstr	s15, [lr, #4]
 8011f46:	9208      	str	r2, [sp, #32]
 8011f48:	f000 8130 	beq.w	80121ac <arm_cfft_radix8by4_f32+0x378>
 8011f4c:	4691      	mov	r9, r2
 8011f4e:	9a03      	ldr	r2, [sp, #12]
 8011f50:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011f54:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8011f58:	3b08      	subs	r3, #8
 8011f5a:	f102 0510 	add.w	r5, r2, #16
 8011f5e:	f101 0c20 	add.w	ip, r1, #32
 8011f62:	f1a4 020c 	sub.w	r2, r4, #12
 8011f66:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8011f6a:	4433      	add	r3, r6
 8011f6c:	3410      	adds	r4, #16
 8011f6e:	4650      	mov	r0, sl
 8011f70:	4659      	mov	r1, fp
 8011f72:	ed55 3a02 	vldr	s7, [r5, #-8]
 8011f76:	ed14 5a02 	vldr	s10, [r4, #-8]
 8011f7a:	ed91 7a00 	vldr	s14, [r1]
 8011f7e:	edd0 7a00 	vldr	s15, [r0]
 8011f82:	ed15 4a01 	vldr	s8, [r5, #-4]
 8011f86:	ed54 5a01 	vldr	s11, [r4, #-4]
 8011f8a:	edd0 6a01 	vldr	s13, [r0, #4]
 8011f8e:	ed91 6a01 	vldr	s12, [r1, #4]
 8011f92:	ee33 8a85 	vadd.f32	s16, s7, s10
 8011f96:	ee34 0a25 	vadd.f32	s0, s8, s11
 8011f9a:	ee78 4a07 	vadd.f32	s9, s16, s14
 8011f9e:	ee74 5a65 	vsub.f32	s11, s8, s11
 8011fa2:	ee77 4aa4 	vadd.f32	s9, s15, s9
 8011fa6:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8011faa:	ed45 4a02 	vstr	s9, [r5, #-8]
 8011fae:	edd1 4a01 	vldr	s9, [r1, #4]
 8011fb2:	ed90 4a01 	vldr	s8, [r0, #4]
 8011fb6:	ee70 4a24 	vadd.f32	s9, s0, s9
 8011fba:	ee76 aa05 	vadd.f32	s21, s12, s10
 8011fbe:	ee74 4a84 	vadd.f32	s9, s9, s8
 8011fc2:	ee35 aac7 	vsub.f32	s20, s11, s14
 8011fc6:	ed45 4a01 	vstr	s9, [r5, #-4]
 8011fca:	edd6 1a00 	vldr	s3, [r6]
 8011fce:	edd7 0a00 	vldr	s1, [r7]
 8011fd2:	ed92 4a02 	vldr	s8, [r2, #8]
 8011fd6:	edd3 3a02 	vldr	s7, [r3, #8]
 8011fda:	ed93 2a01 	vldr	s4, [r3, #4]
 8011fde:	ed16 1a01 	vldr	s2, [r6, #-4]
 8011fe2:	edd2 2a01 	vldr	s5, [r2, #4]
 8011fe6:	ed57 9a01 	vldr	s19, [r7, #-4]
 8011fea:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8011fee:	ee39 3a81 	vadd.f32	s6, s19, s2
 8011ff2:	ee74 8a84 	vadd.f32	s17, s9, s8
 8011ff6:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8011ffa:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8011ffe:	ee7a aae6 	vsub.f32	s21, s21, s13
 8012002:	ee18 aa90 	vmov	sl, s17
 8012006:	f847 a908 	str.w	sl, [r7], #-8
 801200a:	edd2 8a01 	vldr	s17, [r2, #4]
 801200e:	ed93 9a01 	vldr	s18, [r3, #4]
 8012012:	ee73 8a28 	vadd.f32	s17, s6, s17
 8012016:	ee3a aa27 	vadd.f32	s20, s20, s15
 801201a:	ee78 8a89 	vadd.f32	s17, s17, s18
 801201e:	ee74 0a63 	vsub.f32	s1, s8, s7
 8012022:	edc7 8a01 	vstr	s17, [r7, #4]
 8012026:	ed18 ba02 	vldr	s22, [r8, #-8]
 801202a:	ed58 8a01 	vldr	s17, [r8, #-4]
 801202e:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8012032:	ee6a ba28 	vmul.f32	s23, s20, s17
 8012036:	ee2a ca8b 	vmul.f32	s24, s21, s22
 801203a:	ee71 9ae2 	vsub.f32	s19, s3, s5
 801203e:	ee30 9a81 	vadd.f32	s18, s1, s2
 8012042:	ee79 9a82 	vadd.f32	s19, s19, s4
 8012046:	ee3c ca2b 	vadd.f32	s24, s24, s23
 801204a:	ee6a aaa8 	vmul.f32	s21, s21, s17
 801204e:	ee69 baa8 	vmul.f32	s23, s19, s17
 8012052:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8012056:	ee69 9a8b 	vmul.f32	s19, s19, s22
 801205a:	ee69 8a28 	vmul.f32	s17, s18, s17
 801205e:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8012062:	ee1c aa10 	vmov	sl, s24
 8012066:	ee78 8aa9 	vadd.f32	s17, s17, s19
 801206a:	f841 ab08 	str.w	sl, [r1], #8
 801206e:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8012072:	ee3b bacb 	vsub.f32	s22, s23, s22
 8012076:	ee34 4ac4 	vsub.f32	s8, s9, s8
 801207a:	ee33 3a62 	vsub.f32	s6, s6, s5
 801207e:	ed01 aa01 	vstr	s20, [r1, #-4]
 8012082:	edc2 8a01 	vstr	s17, [r2, #4]
 8012086:	ed82 ba02 	vstr	s22, [r2, #8]
 801208a:	ed5c 4a04 	vldr	s9, [ip, #-16]
 801208e:	ee74 3a63 	vsub.f32	s7, s8, s7
 8012092:	ee38 8a47 	vsub.f32	s16, s16, s14
 8012096:	ed1c 4a03 	vldr	s8, [ip, #-12]
 801209a:	ee30 0a46 	vsub.f32	s0, s0, s12
 801209e:	ee33 3a42 	vsub.f32	s6, s6, s4
 80120a2:	ee38 8a67 	vsub.f32	s16, s16, s15
 80120a6:	ee30 0a66 	vsub.f32	s0, s0, s13
 80120aa:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80120ae:	ee63 8a04 	vmul.f32	s17, s6, s8
 80120b2:	ee28 aa24 	vmul.f32	s20, s16, s9
 80120b6:	ee60 9a04 	vmul.f32	s19, s0, s8
 80120ba:	ee28 8a04 	vmul.f32	s16, s16, s8
 80120be:	ee20 0a24 	vmul.f32	s0, s0, s9
 80120c2:	ee63 3a84 	vmul.f32	s7, s7, s8
 80120c6:	ee39 4a68 	vsub.f32	s8, s18, s17
 80120ca:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80120ce:	ee14 aa10 	vmov	sl, s8
 80120d2:	ee30 0a48 	vsub.f32	s0, s0, s16
 80120d6:	ee63 4a24 	vmul.f32	s9, s6, s9
 80120da:	ed44 9a02 	vstr	s19, [r4, #-8]
 80120de:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80120e2:	ed04 0a01 	vstr	s0, [r4, #-4]
 80120e6:	f846 a908 	str.w	sl, [r6], #-8
 80120ea:	ee35 6a46 	vsub.f32	s12, s10, s12
 80120ee:	ee35 7a87 	vadd.f32	s14, s11, s14
 80120f2:	edc6 3a01 	vstr	s7, [r6, #4]
 80120f6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80120fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80120fe:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 8012102:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 8012106:	ee67 5a86 	vmul.f32	s11, s15, s12
 801210a:	ee26 5a87 	vmul.f32	s10, s13, s14
 801210e:	ee72 2a62 	vsub.f32	s5, s4, s5
 8012112:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8012116:	ee72 2ae1 	vsub.f32	s5, s5, s3
 801211a:	ee75 5a25 	vadd.f32	s11, s10, s11
 801211e:	ee62 0a86 	vmul.f32	s1, s5, s12
 8012122:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012126:	ee67 7a87 	vmul.f32	s15, s15, s14
 801212a:	ee21 6a06 	vmul.f32	s12, s2, s12
 801212e:	ee62 2a87 	vmul.f32	s5, s5, s14
 8012132:	ee21 1a07 	vmul.f32	s2, s2, s14
 8012136:	ee15 aa90 	vmov	sl, s11
 801213a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801213e:	f840 ab08 	str.w	sl, [r0], #8
 8012142:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8012146:	ee76 2a22 	vadd.f32	s5, s12, s5
 801214a:	f1b9 0901 	subs.w	r9, r9, #1
 801214e:	ed40 7a01 	vstr	s15, [r0, #-4]
 8012152:	f105 0508 	add.w	r5, r5, #8
 8012156:	ed83 1a02 	vstr	s2, [r3, #8]
 801215a:	edc3 2a01 	vstr	s5, [r3, #4]
 801215e:	f108 0808 	add.w	r8, r8, #8
 8012162:	f1a2 0208 	sub.w	r2, r2, #8
 8012166:	f10c 0c10 	add.w	ip, ip, #16
 801216a:	f104 0408 	add.w	r4, r4, #8
 801216e:	f10e 0e18 	add.w	lr, lr, #24
 8012172:	f1a3 0308 	sub.w	r3, r3, #8
 8012176:	f47f aefc 	bne.w	8011f72 <arm_cfft_radix8by4_f32+0x13e>
 801217a:	9908      	ldr	r1, [sp, #32]
 801217c:	9802      	ldr	r0, [sp, #8]
 801217e:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8012182:	00cb      	lsls	r3, r1, #3
 8012184:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8012188:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 801218c:	9102      	str	r1, [sp, #8]
 801218e:	9904      	ldr	r1, [sp, #16]
 8012190:	4419      	add	r1, r3
 8012192:	9104      	str	r1, [sp, #16]
 8012194:	9905      	ldr	r1, [sp, #20]
 8012196:	4419      	add	r1, r3
 8012198:	9105      	str	r1, [sp, #20]
 801219a:	9907      	ldr	r1, [sp, #28]
 801219c:	449b      	add	fp, r3
 801219e:	4419      	add	r1, r3
 80121a0:	449a      	add	sl, r3
 80121a2:	9b06      	ldr	r3, [sp, #24]
 80121a4:	9107      	str	r1, [sp, #28]
 80121a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80121aa:	9306      	str	r3, [sp, #24]
 80121ac:	9a04      	ldr	r2, [sp, #16]
 80121ae:	9807      	ldr	r0, [sp, #28]
 80121b0:	edd2 3a00 	vldr	s7, [r2]
 80121b4:	ed90 4a00 	vldr	s8, [r0]
 80121b8:	eddb 7a00 	vldr	s15, [fp]
 80121bc:	ed9a 3a00 	vldr	s6, [sl]
 80121c0:	edd2 4a01 	vldr	s9, [r2, #4]
 80121c4:	ed90 7a01 	vldr	s14, [r0, #4]
 80121c8:	ed9b 2a01 	vldr	s4, [fp, #4]
 80121cc:	edda 5a01 	vldr	s11, [sl, #4]
 80121d0:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80121d4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80121d6:	ee73 6a84 	vadd.f32	s13, s7, s8
 80121da:	ee34 6a87 	vadd.f32	s12, s9, s14
 80121de:	ee36 5aa7 	vadd.f32	s10, s13, s15
 80121e2:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80121e6:	ee33 5a05 	vadd.f32	s10, s6, s10
 80121ea:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80121ee:	ed82 5a00 	vstr	s10, [r2]
 80121f2:	ed9b 5a01 	vldr	s10, [fp, #4]
 80121f6:	edda 4a01 	vldr	s9, [sl, #4]
 80121fa:	ee36 5a05 	vadd.f32	s10, s12, s10
 80121fe:	ee72 3a04 	vadd.f32	s7, s4, s8
 8012202:	ee35 5a24 	vadd.f32	s10, s10, s9
 8012206:	ee77 4a67 	vsub.f32	s9, s14, s15
 801220a:	ed82 5a01 	vstr	s10, [r2, #4]
 801220e:	9a05      	ldr	r2, [sp, #20]
 8012210:	ee34 5a83 	vadd.f32	s10, s9, s6
 8012214:	edd2 1a00 	vldr	s3, [r2]
 8012218:	edd2 2a01 	vldr	s5, [r2, #4]
 801221c:	9a02      	ldr	r2, [sp, #8]
 801221e:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8012222:	ee36 6a42 	vsub.f32	s12, s12, s4
 8012226:	ee63 4aa1 	vmul.f32	s9, s7, s3
 801222a:	ee63 3aa2 	vmul.f32	s7, s7, s5
 801222e:	ee65 2a22 	vmul.f32	s5, s10, s5
 8012232:	ee25 5a21 	vmul.f32	s10, s10, s3
 8012236:	ee74 2aa2 	vadd.f32	s5, s9, s5
 801223a:	ee35 5a63 	vsub.f32	s10, s10, s7
 801223e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8012242:	edcb 2a00 	vstr	s5, [fp]
 8012246:	ed8b 5a01 	vstr	s10, [fp, #4]
 801224a:	edd2 3a01 	vldr	s7, [r2, #4]
 801224e:	ed92 5a00 	vldr	s10, [r2]
 8012252:	9a06      	ldr	r2, [sp, #24]
 8012254:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8012258:	ee36 6a65 	vsub.f32	s12, s12, s11
 801225c:	ee66 4a85 	vmul.f32	s9, s13, s10
 8012260:	ee26 5a05 	vmul.f32	s10, s12, s10
 8012264:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8012268:	ee26 6a23 	vmul.f32	s12, s12, s7
 801226c:	ee75 6a66 	vsub.f32	s13, s10, s13
 8012270:	ee34 6a86 	vadd.f32	s12, s9, s12
 8012274:	ee34 4a42 	vsub.f32	s8, s8, s4
 8012278:	ee37 7a27 	vadd.f32	s14, s14, s15
 801227c:	edc0 6a01 	vstr	s13, [r0, #4]
 8012280:	ed80 6a00 	vstr	s12, [r0]
 8012284:	ed92 6a01 	vldr	s12, [r2, #4]
 8012288:	9803      	ldr	r0, [sp, #12]
 801228a:	ee77 7a43 	vsub.f32	s15, s14, s6
 801228e:	ee75 5a84 	vadd.f32	s11, s11, s8
 8012292:	ed92 7a00 	vldr	s14, [r2]
 8012296:	ee65 6a87 	vmul.f32	s13, s11, s14
 801229a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801229e:	ee65 5a86 	vmul.f32	s11, s11, s12
 80122a2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80122a6:	ee77 5a65 	vsub.f32	s11, s14, s11
 80122aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80122ae:	edca 5a01 	vstr	s11, [sl, #4]
 80122b2:	edca 7a00 	vstr	s15, [sl]
 80122b6:	6872      	ldr	r2, [r6, #4]
 80122b8:	4621      	mov	r1, r4
 80122ba:	2304      	movs	r3, #4
 80122bc:	f000 fd28 	bl	8012d10 <arm_radix8_butterfly_f32>
 80122c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80122c2:	6872      	ldr	r2, [r6, #4]
 80122c4:	4621      	mov	r1, r4
 80122c6:	2304      	movs	r3, #4
 80122c8:	f000 fd22 	bl	8012d10 <arm_radix8_butterfly_f32>
 80122cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80122ce:	6872      	ldr	r2, [r6, #4]
 80122d0:	4621      	mov	r1, r4
 80122d2:	2304      	movs	r3, #4
 80122d4:	f000 fd1c 	bl	8012d10 <arm_radix8_butterfly_f32>
 80122d8:	9801      	ldr	r0, [sp, #4]
 80122da:	6872      	ldr	r2, [r6, #4]
 80122dc:	4621      	mov	r1, r4
 80122de:	2304      	movs	r3, #4
 80122e0:	b00f      	add	sp, #60	@ 0x3c
 80122e2:	ecbd 8b0a 	vpop	{d8-d12}
 80122e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122ea:	f000 bd11 	b.w	8012d10 <arm_radix8_butterfly_f32>
 80122ee:	bf00      	nop

080122f0 <arm_cfft_f32>:
 80122f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122f4:	2a01      	cmp	r2, #1
 80122f6:	4606      	mov	r6, r0
 80122f8:	4617      	mov	r7, r2
 80122fa:	460c      	mov	r4, r1
 80122fc:	4698      	mov	r8, r3
 80122fe:	8805      	ldrh	r5, [r0, #0]
 8012300:	d054      	beq.n	80123ac <arm_cfft_f32+0xbc>
 8012302:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8012306:	d04c      	beq.n	80123a2 <arm_cfft_f32+0xb2>
 8012308:	d916      	bls.n	8012338 <arm_cfft_f32+0x48>
 801230a:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 801230e:	d01a      	beq.n	8012346 <arm_cfft_f32+0x56>
 8012310:	d95c      	bls.n	80123cc <arm_cfft_f32+0xdc>
 8012312:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8012316:	d044      	beq.n	80123a2 <arm_cfft_f32+0xb2>
 8012318:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 801231c:	d105      	bne.n	801232a <arm_cfft_f32+0x3a>
 801231e:	4620      	mov	r0, r4
 8012320:	4629      	mov	r1, r5
 8012322:	6872      	ldr	r2, [r6, #4]
 8012324:	2301      	movs	r3, #1
 8012326:	f000 fcf3 	bl	8012d10 <arm_radix8_butterfly_f32>
 801232a:	f1b8 0f00 	cmp.w	r8, #0
 801232e:	d111      	bne.n	8012354 <arm_cfft_f32+0x64>
 8012330:	2f01      	cmp	r7, #1
 8012332:	d016      	beq.n	8012362 <arm_cfft_f32+0x72>
 8012334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012338:	2d20      	cmp	r5, #32
 801233a:	d032      	beq.n	80123a2 <arm_cfft_f32+0xb2>
 801233c:	d94a      	bls.n	80123d4 <arm_cfft_f32+0xe4>
 801233e:	2d40      	cmp	r5, #64	@ 0x40
 8012340:	d0ed      	beq.n	801231e <arm_cfft_f32+0x2e>
 8012342:	2d80      	cmp	r5, #128	@ 0x80
 8012344:	d1f1      	bne.n	801232a <arm_cfft_f32+0x3a>
 8012346:	4630      	mov	r0, r6
 8012348:	4621      	mov	r1, r4
 801234a:	f7ff fca1 	bl	8011c90 <arm_cfft_radix8by2_f32>
 801234e:	f1b8 0f00 	cmp.w	r8, #0
 8012352:	d0ed      	beq.n	8012330 <arm_cfft_f32+0x40>
 8012354:	4620      	mov	r0, r4
 8012356:	89b1      	ldrh	r1, [r6, #12]
 8012358:	68b2      	ldr	r2, [r6, #8]
 801235a:	f7ed ff41 	bl	80001e0 <arm_bitreversal_32>
 801235e:	2f01      	cmp	r7, #1
 8012360:	d1e8      	bne.n	8012334 <arm_cfft_f32+0x44>
 8012362:	ee07 5a90 	vmov	s15, r5
 8012366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801236a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801236e:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8012372:	2d00      	cmp	r5, #0
 8012374:	d0de      	beq.n	8012334 <arm_cfft_f32+0x44>
 8012376:	f104 0108 	add.w	r1, r4, #8
 801237a:	2300      	movs	r3, #0
 801237c:	3301      	adds	r3, #1
 801237e:	429d      	cmp	r5, r3
 8012380:	f101 0108 	add.w	r1, r1, #8
 8012384:	ed11 7a04 	vldr	s14, [r1, #-16]
 8012388:	ed51 7a03 	vldr	s15, [r1, #-12]
 801238c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012390:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8012394:	ed01 7a04 	vstr	s14, [r1, #-16]
 8012398:	ed41 7a03 	vstr	s15, [r1, #-12]
 801239c:	d1ee      	bne.n	801237c <arm_cfft_f32+0x8c>
 801239e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123a2:	4630      	mov	r0, r6
 80123a4:	4621      	mov	r1, r4
 80123a6:	f7ff fd45 	bl	8011e34 <arm_cfft_radix8by4_f32>
 80123aa:	e7be      	b.n	801232a <arm_cfft_f32+0x3a>
 80123ac:	b1ad      	cbz	r5, 80123da <arm_cfft_f32+0xea>
 80123ae:	f101 030c 	add.w	r3, r1, #12
 80123b2:	2200      	movs	r2, #0
 80123b4:	ed53 7a02 	vldr	s15, [r3, #-8]
 80123b8:	3201      	adds	r2, #1
 80123ba:	eef1 7a67 	vneg.f32	s15, s15
 80123be:	4295      	cmp	r5, r2
 80123c0:	ed43 7a02 	vstr	s15, [r3, #-8]
 80123c4:	f103 0308 	add.w	r3, r3, #8
 80123c8:	d1f4      	bne.n	80123b4 <arm_cfft_f32+0xc4>
 80123ca:	e79a      	b.n	8012302 <arm_cfft_f32+0x12>
 80123cc:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80123d0:	d0a5      	beq.n	801231e <arm_cfft_f32+0x2e>
 80123d2:	e7aa      	b.n	801232a <arm_cfft_f32+0x3a>
 80123d4:	2d10      	cmp	r5, #16
 80123d6:	d0b6      	beq.n	8012346 <arm_cfft_f32+0x56>
 80123d8:	e7a7      	b.n	801232a <arm_cfft_f32+0x3a>
 80123da:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80123de:	d894      	bhi.n	801230a <arm_cfft_f32+0x1a>
 80123e0:	e7aa      	b.n	8012338 <arm_cfft_f32+0x48>
 80123e2:	bf00      	nop

080123e4 <arm_fir_init_f32>:
 80123e4:	b570      	push	{r4, r5, r6, lr}
 80123e6:	9c04      	ldr	r4, [sp, #16]
 80123e8:	6082      	str	r2, [r0, #8]
 80123ea:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 80123ee:	3c01      	subs	r4, #1
 80123f0:	4605      	mov	r5, r0
 80123f2:	440c      	add	r4, r1
 80123f4:	8001      	strh	r1, [r0, #0]
 80123f6:	461e      	mov	r6, r3
 80123f8:	00a2      	lsls	r2, r4, #2
 80123fa:	4618      	mov	r0, r3
 80123fc:	2100      	movs	r1, #0
 80123fe:	f001 f8bc 	bl	801357a <memset>
 8012402:	606e      	str	r6, [r5, #4]
 8012404:	bd70      	pop	{r4, r5, r6, pc}
 8012406:	bf00      	nop

08012408 <arm_fir_f32>:
 8012408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801240c:	ed2d 8b10 	vpush	{d8-d15}
 8012410:	b089      	sub	sp, #36	@ 0x24
 8012412:	4605      	mov	r5, r0
 8012414:	9003      	str	r0, [sp, #12]
 8012416:	8800      	ldrh	r0, [r0, #0]
 8012418:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801241c:	9304      	str	r3, [sp, #16]
 801241e:	461e      	mov	r6, r3
 8012420:	f100 4380 	add.w	r3, r0, #1073741824	@ 0x40000000
 8012424:	3b01      	subs	r3, #1
 8012426:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 801242a:	08f3      	lsrs	r3, r6, #3
 801242c:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8012430:	9001      	str	r0, [sp, #4]
 8012432:	4625      	mov	r5, r4
 8012434:	9400      	str	r4, [sp, #0]
 8012436:	9302      	str	r3, [sp, #8]
 8012438:	f000 81ee 	beq.w	8012818 <arm_fir_f32+0x410>
 801243c:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 8012440:	469e      	mov	lr, r3
 8012442:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8012446:	1f1e      	subs	r6, r3, #4
 8012448:	4604      	mov	r4, r0
 801244a:	9605      	str	r6, [sp, #20]
 801244c:	eb08 0003 	add.w	r0, r8, r3
 8012450:	f004 0a07 	and.w	sl, r4, #7
 8012454:	4613      	mov	r3, r2
 8012456:	f10c 0420 	add.w	r4, ip, #32
 801245a:	f8cd c018 	str.w	ip, [sp, #24]
 801245e:	4684      	mov	ip, r0
 8012460:	4648      	mov	r0, r9
 8012462:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8012466:	9107      	str	r1, [sp, #28]
 8012468:	f105 0720 	add.w	r7, r5, #32
 801246c:	f101 0620 	add.w	r6, r1, #32
 8012470:	f102 0520 	add.w	r5, r2, #32
 8012474:	4652      	mov	r2, sl
 8012476:	469a      	mov	sl, r3
 8012478:	f856 3c20 	ldr.w	r3, [r6, #-32]
 801247c:	f847 3c20 	str.w	r3, [r7, #-32]
 8012480:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8012484:	f847 3c1c 	str.w	r3, [r7, #-28]
 8012488:	f856 3c18 	ldr.w	r3, [r6, #-24]
 801248c:	f847 3c18 	str.w	r3, [r7, #-24]
 8012490:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8012494:	f847 3c14 	str.w	r3, [r7, #-20]
 8012498:	f856 3c10 	ldr.w	r3, [r6, #-16]
 801249c:	f847 3c10 	str.w	r3, [r7, #-16]
 80124a0:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 80124a4:	f847 3c0c 	str.w	r3, [r7, #-12]
 80124a8:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80124ac:	f847 3c08 	str.w	r3, [r7, #-8]
 80124b0:	eddf 3af1 	vldr	s7, [pc, #964]	@ 8012878 <arm_fir_f32+0x470>
 80124b4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80124b8:	f847 3c04 	str.w	r3, [r7, #-4]
 80124bc:	ed14 3a08 	vldr	s6, [r4, #-32]	@ 0xffffffe0
 80124c0:	ed54 2a07 	vldr	s5, [r4, #-28]	@ 0xffffffe4
 80124c4:	ed14 2a06 	vldr	s4, [r4, #-24]	@ 0xffffffe8
 80124c8:	ed54 1a05 	vldr	s3, [r4, #-20]	@ 0xffffffec
 80124cc:	ed14 1a04 	vldr	s2, [r4, #-16]
 80124d0:	ed54 0a03 	vldr	s1, [r4, #-12]
 80124d4:	ed14 0a02 	vldr	s0, [r4, #-8]
 80124d8:	1f21      	subs	r1, r4, #4
 80124da:	eef0 8a63 	vmov.f32	s17, s7
 80124de:	eef0 9a63 	vmov.f32	s19, s7
 80124e2:	eef0 aa63 	vmov.f32	s21, s7
 80124e6:	eef0 ba63 	vmov.f32	s23, s7
 80124ea:	eeb0 ca63 	vmov.f32	s24, s7
 80124ee:	eef0 ca63 	vmov.f32	s25, s7
 80124f2:	eeb0 da63 	vmov.f32	s26, s7
 80124f6:	2800      	cmp	r0, #0
 80124f8:	f000 81e8 	beq.w	80128cc <arm_fir_f32+0x4c4>
 80124fc:	f108 0120 	add.w	r1, r8, #32
 8012500:	f104 031c 	add.w	r3, r4, #28
 8012504:	4683      	mov	fp, r0
 8012506:	ed13 8a08 	vldr	s16, [r3, #-32]	@ 0xffffffe0
 801250a:	ed11 4a08 	vldr	s8, [r1, #-32]	@ 0xffffffe0
 801250e:	ed51 4a07 	vldr	s9, [r1, #-28]	@ 0xffffffe4
 8012512:	ed11 5a06 	vldr	s10, [r1, #-24]	@ 0xffffffe8
 8012516:	ed51 5a05 	vldr	s11, [r1, #-20]	@ 0xffffffec
 801251a:	ed11 6a04 	vldr	s12, [r1, #-16]
 801251e:	ed51 6a03 	vldr	s13, [r1, #-12]
 8012522:	ed11 7a02 	vldr	s14, [r1, #-8]
 8012526:	ed51 7a01 	vldr	s15, [r1, #-4]
 801252a:	ee23 fa04 	vmul.f32	s30, s6, s8
 801252e:	ee62 ea84 	vmul.f32	s29, s5, s8
 8012532:	ed13 3a07 	vldr	s6, [r3, #-28]	@ 0xffffffe4
 8012536:	ee22 ea04 	vmul.f32	s28, s4, s8
 801253a:	ee61 da84 	vmul.f32	s27, s3, s8
 801253e:	ee21 ba04 	vmul.f32	s22, s2, s8
 8012542:	ee20 aa84 	vmul.f32	s20, s1, s8
 8012546:	ee20 9a04 	vmul.f32	s18, s0, s8
 801254a:	ee28 4a04 	vmul.f32	s8, s16, s8
 801254e:	ee62 fa24 	vmul.f32	s31, s4, s9
 8012552:	ee3c ca0e 	vadd.f32	s24, s24, s28
 8012556:	ee7b baad 	vadd.f32	s23, s23, s27
 801255a:	ee21 eaa4 	vmul.f32	s28, s3, s9
 801255e:	ee61 da24 	vmul.f32	s27, s2, s9
 8012562:	ee7a aa8b 	vadd.f32	s21, s21, s22
 8012566:	ee79 9a8a 	vadd.f32	s19, s19, s20
 801256a:	ee20 baa4 	vmul.f32	s22, s1, s9
 801256e:	ee20 aa24 	vmul.f32	s20, s0, s9
 8012572:	ee3d da0f 	vadd.f32	s26, s26, s30
 8012576:	ee7c caae 	vadd.f32	s25, s25, s29
 801257a:	ee22 faa4 	vmul.f32	s30, s5, s9
 801257e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8012582:	ed53 2a06 	vldr	s5, [r3, #-24]	@ 0xffffffe8
 8012586:	ee28 9a24 	vmul.f32	s18, s16, s9
 801258a:	ee73 3a84 	vadd.f32	s7, s7, s8
 801258e:	ee63 4a24 	vmul.f32	s9, s6, s9
 8012592:	ee22 4a05 	vmul.f32	s8, s4, s10
 8012596:	ee61 ea05 	vmul.f32	s29, s2, s10
 801259a:	ed13 2a05 	vldr	s4, [r3, #-20]	@ 0xffffffec
 801259e:	ee3d da0f 	vadd.f32	s26, s26, s30
 80125a2:	ee7c caaf 	vadd.f32	s25, s25, s31
 80125a6:	ee20 fa85 	vmul.f32	s30, s1, s10
 80125aa:	ee61 fa85 	vmul.f32	s31, s3, s10
 80125ae:	ee3c ea0e 	vadd.f32	s28, s24, s28
 80125b2:	ee7b daad 	vadd.f32	s27, s23, s27
 80125b6:	ee3a ba8b 	vadd.f32	s22, s21, s22
 80125ba:	ee60 ba05 	vmul.f32	s23, s0, s10
 80125be:	ee68 aa05 	vmul.f32	s21, s16, s10
 80125c2:	ee39 aa8a 	vadd.f32	s20, s19, s20
 80125c6:	ee78 8a89 	vadd.f32	s17, s17, s18
 80125ca:	ee73 3aa4 	vadd.f32	s7, s7, s9
 80125ce:	ee63 4a05 	vmul.f32	s9, s6, s10
 80125d2:	ee22 5a85 	vmul.f32	s10, s5, s10
 80125d6:	ee21 9a25 	vmul.f32	s18, s2, s11
 80125da:	ee20 ca25 	vmul.f32	s24, s0, s11
 80125de:	ee3d da04 	vadd.f32	s26, s26, s8
 80125e2:	ee7c caaf 	vadd.f32	s25, s25, s31
 80125e6:	ee21 4aa5 	vmul.f32	s8, s3, s11
 80125ea:	ee3e ea2e 	vadd.f32	s28, s28, s29
 80125ee:	ed53 1a04 	vldr	s3, [r3, #-16]
 80125f2:	ee60 eaa5 	vmul.f32	s29, s1, s11
 80125f6:	ee7d da8f 	vadd.f32	s27, s27, s30
 80125fa:	ee3b ba2b 	vadd.f32	s22, s22, s23
 80125fe:	ee3a aa2a 	vadd.f32	s20, s20, s21
 8012602:	ee68 ba25 	vmul.f32	s23, s16, s11
 8012606:	ee63 aa25 	vmul.f32	s21, s6, s11
 801260a:	ee78 8aa4 	vadd.f32	s17, s17, s9
 801260e:	ee73 3a85 	vadd.f32	s7, s7, s10
 8012612:	ee22 5aa5 	vmul.f32	s10, s5, s11
 8012616:	ee62 5a25 	vmul.f32	s11, s4, s11
 801261a:	ee61 4a06 	vmul.f32	s9, s2, s12
 801261e:	ee60 9a86 	vmul.f32	s19, s1, s12
 8012622:	ee60 fa06 	vmul.f32	s31, s0, s12
 8012626:	ed13 1a03 	vldr	s2, [r3, #-12]
 801262a:	ee23 fa06 	vmul.f32	s30, s6, s12
 801262e:	ee3d da04 	vadd.f32	s26, s26, s8
 8012632:	ee7c ca89 	vadd.f32	s25, s25, s18
 8012636:	ee3e ea2e 	vadd.f32	s28, s28, s29
 801263a:	ee28 9a06 	vmul.f32	s18, s16, s12
 801263e:	ee7d da8c 	vadd.f32	s27, s27, s24
 8012642:	ee3b ba2b 	vadd.f32	s22, s22, s23
 8012646:	ee22 ca86 	vmul.f32	s24, s5, s12
 801264a:	ee3a aa2a 	vadd.f32	s20, s20, s21
 801264e:	ee78 8a85 	vadd.f32	s17, s17, s10
 8012652:	ee73 3aa5 	vadd.f32	s7, s7, s11
 8012656:	ee62 5a06 	vmul.f32	s11, s4, s12
 801265a:	ee21 6a86 	vmul.f32	s12, s3, s12
 801265e:	ee20 4a26 	vmul.f32	s8, s0, s13
 8012662:	ee63 ea26 	vmul.f32	s29, s6, s13
 8012666:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801266a:	ee22 5a26 	vmul.f32	s10, s4, s13
 801266e:	ee3d da24 	vadd.f32	s26, s26, s9
 8012672:	ee7c caa9 	vadd.f32	s25, s25, s19
 8012676:	ee60 4aa6 	vmul.f32	s9, s1, s13
 801267a:	ee3e ea2f 	vadd.f32	s28, s28, s31
 801267e:	ed53 0a02 	vldr	s1, [r3, #-8]
 8012682:	ee68 fa26 	vmul.f32	s31, s16, s13
 8012686:	ee7d da89 	vadd.f32	s27, s27, s18
 801268a:	ee3b ba0f 	vadd.f32	s22, s22, s30
 801268e:	ee78 8aa5 	vadd.f32	s17, s17, s11
 8012692:	ee22 faa6 	vmul.f32	s30, s5, s13
 8012696:	ee73 3a86 	vadd.f32	s7, s7, s12
 801269a:	ee21 6aa6 	vmul.f32	s12, s3, s13
 801269e:	ee61 6a26 	vmul.f32	s13, s2, s13
 80126a2:	ee60 aa07 	vmul.f32	s21, s0, s14
 80126a6:	ee28 ca07 	vmul.f32	s24, s16, s14
 80126aa:	ee63 ba07 	vmul.f32	s23, s6, s14
 80126ae:	ee7a 9a05 	vadd.f32	s19, s20, s10
 80126b2:	ee78 8a86 	vadd.f32	s17, s17, s12
 80126b6:	ee3d da24 	vadd.f32	s26, s26, s9
 80126ba:	ee7c ca84 	vadd.f32	s25, s25, s8
 80126be:	ee7d daae 	vadd.f32	s27, s27, s29
 80126c2:	ee22 9a07 	vmul.f32	s18, s4, s14
 80126c6:	ee62 ea87 	vmul.f32	s29, s5, s14
 80126ca:	ee61 5a87 	vmul.f32	s11, s3, s14
 80126ce:	ee73 3aa6 	vadd.f32	s7, s7, s13
 80126d2:	ed13 0a01 	vldr	s0, [r3, #-4]
 80126d6:	ee61 6a07 	vmul.f32	s13, s2, s14
 80126da:	ee3e ea2f 	vadd.f32	s28, s28, s31
 80126de:	ee3b ba0f 	vadd.f32	s22, s22, s30
 80126e2:	ee20 7a87 	vmul.f32	s14, s1, s14
 80126e6:	ee68 4a27 	vmul.f32	s9, s16, s15
 80126ea:	ee3d da2a 	vadd.f32	s26, s26, s21
 80126ee:	ee7c ca8c 	vadd.f32	s25, s25, s24
 80126f2:	ee23 8a27 	vmul.f32	s16, s6, s15
 80126f6:	ee3e ea2b 	vadd.f32	s28, s28, s23
 80126fa:	ee22 4aa7 	vmul.f32	s8, s5, s15
 80126fe:	ee22 aa27 	vmul.f32	s20, s4, s15
 8012702:	ee21 5aa7 	vmul.f32	s10, s3, s15
 8012706:	ee21 6a27 	vmul.f32	s12, s2, s15
 801270a:	ee78 6aa6 	vadd.f32	s13, s17, s13
 801270e:	ee7d daae 	vadd.f32	s27, s27, s29
 8012712:	ee60 8aa7 	vmul.f32	s17, s1, s15
 8012716:	ee3b ba09 	vadd.f32	s22, s22, s18
 801271a:	ee79 9aa5 	vadd.f32	s19, s19, s11
 801271e:	ee73 3a87 	vadd.f32	s7, s7, s14
 8012722:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012726:	f1bb 0b01 	subs.w	fp, fp, #1
 801272a:	f101 0120 	add.w	r1, r1, #32
 801272e:	ee3d da24 	vadd.f32	s26, s26, s9
 8012732:	ee7c ca88 	vadd.f32	s25, s25, s16
 8012736:	ee3e ca04 	vadd.f32	s24, s28, s8
 801273a:	ee7d ba8a 	vadd.f32	s23, s27, s20
 801273e:	ee7b aa05 	vadd.f32	s21, s22, s10
 8012742:	ee79 9a86 	vadd.f32	s19, s19, s12
 8012746:	ee76 8aa8 	vadd.f32	s17, s13, s17
 801274a:	ee73 3aa7 	vadd.f32	s7, s7, s15
 801274e:	f103 0320 	add.w	r3, r3, #32
 8012752:	f47f aed8 	bne.w	8012506 <arm_fir_f32+0xfe>
 8012756:	eb09 0104 	add.w	r1, r9, r4
 801275a:	46e3      	mov	fp, ip
 801275c:	b3a2      	cbz	r2, 80127c8 <arm_fir_f32+0x3c0>
 801275e:	4613      	mov	r3, r2
 8012760:	ecbb 6a01 	vldmia	fp!, {s12}
 8012764:	ecf1 7a01 	vldmia	r1!, {s15}
 8012768:	ee23 3a06 	vmul.f32	s6, s6, s12
 801276c:	ee22 4a86 	vmul.f32	s8, s5, s12
 8012770:	ee62 4a06 	vmul.f32	s9, s4, s12
 8012774:	ee21 5a86 	vmul.f32	s10, s3, s12
 8012778:	ee61 5a06 	vmul.f32	s11, s2, s12
 801277c:	ee60 6a86 	vmul.f32	s13, s1, s12
 8012780:	ee20 7a06 	vmul.f32	s14, s0, s12
 8012784:	ee27 6a86 	vmul.f32	s12, s15, s12
 8012788:	3b01      	subs	r3, #1
 801278a:	ee3d da03 	vadd.f32	s26, s26, s6
 801278e:	ee7c ca84 	vadd.f32	s25, s25, s8
 8012792:	eeb0 3a62 	vmov.f32	s6, s5
 8012796:	ee3c ca24 	vadd.f32	s24, s24, s9
 801279a:	eef0 2a42 	vmov.f32	s5, s4
 801279e:	ee7b ba85 	vadd.f32	s23, s23, s10
 80127a2:	eeb0 2a61 	vmov.f32	s4, s3
 80127a6:	ee7a aaa5 	vadd.f32	s21, s21, s11
 80127aa:	eef0 1a41 	vmov.f32	s3, s2
 80127ae:	ee79 9aa6 	vadd.f32	s19, s19, s13
 80127b2:	eeb0 1a60 	vmov.f32	s2, s1
 80127b6:	ee78 8a87 	vadd.f32	s17, s17, s14
 80127ba:	eef0 0a40 	vmov.f32	s1, s0
 80127be:	ee73 3a86 	vadd.f32	s7, s7, s12
 80127c2:	eeb0 0a67 	vmov.f32	s0, s15
 80127c6:	d1cb      	bne.n	8012760 <arm_fir_f32+0x358>
 80127c8:	f1be 0e01 	subs.w	lr, lr, #1
 80127cc:	ed05 da08 	vstr	s26, [r5, #-32]	@ 0xffffffe0
 80127d0:	ed45 ca07 	vstr	s25, [r5, #-28]	@ 0xffffffe4
 80127d4:	ed05 ca06 	vstr	s24, [r5, #-24]	@ 0xffffffe8
 80127d8:	ed45 ba05 	vstr	s23, [r5, #-20]	@ 0xffffffec
 80127dc:	ed45 aa04 	vstr	s21, [r5, #-16]
 80127e0:	ed45 9a03 	vstr	s19, [r5, #-12]
 80127e4:	ed45 8a02 	vstr	s17, [r5, #-8]
 80127e8:	ed45 3a01 	vstr	s7, [r5, #-4]
 80127ec:	f107 0720 	add.w	r7, r7, #32
 80127f0:	f106 0620 	add.w	r6, r6, #32
 80127f4:	f104 0420 	add.w	r4, r4, #32
 80127f8:	f105 0520 	add.w	r5, r5, #32
 80127fc:	f47f ae3c 	bne.w	8012478 <arm_fir_f32+0x70>
 8012800:	9b02      	ldr	r3, [sp, #8]
 8012802:	9800      	ldr	r0, [sp, #0]
 8012804:	f8dd c018 	ldr.w	ip, [sp, #24]
 8012808:	9907      	ldr	r1, [sp, #28]
 801280a:	015b      	lsls	r3, r3, #5
 801280c:	4652      	mov	r2, sl
 801280e:	4418      	add	r0, r3
 8012810:	9000      	str	r0, [sp, #0]
 8012812:	4419      	add	r1, r3
 8012814:	449c      	add	ip, r3
 8012816:	441a      	add	r2, r3
 8012818:	9b04      	ldr	r3, [sp, #16]
 801281a:	f013 0e07 	ands.w	lr, r3, #7
 801281e:	d01f      	beq.n	8012860 <arm_fir_f32+0x458>
 8012820:	9f00      	ldr	r7, [sp, #0]
 8012822:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012826:	4676      	mov	r6, lr
 8012828:	4665      	mov	r5, ip
 801282a:	f851 3b04 	ldr.w	r3, [r1], #4
 801282e:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8012878 <arm_fir_f32+0x470>
 8012832:	f847 3b04 	str.w	r3, [r7], #4
 8012836:	4644      	mov	r4, r8
 8012838:	464b      	mov	r3, r9
 801283a:	4628      	mov	r0, r5
 801283c:	ecb0 7a01 	vldmia	r0!, {s14}
 8012840:	ecf4 7a01 	vldmia	r4!, {s15}
 8012844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012848:	3b01      	subs	r3, #1
 801284a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801284e:	d1f5      	bne.n	801283c <arm_fir_f32+0x434>
 8012850:	3e01      	subs	r6, #1
 8012852:	ece2 6a01 	vstmia	r2!, {s13}
 8012856:	f105 0504 	add.w	r5, r5, #4
 801285a:	d1e6      	bne.n	801282a <arm_fir_f32+0x422>
 801285c:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 8012860:	9b01      	ldr	r3, [sp, #4]
 8012862:	1e59      	subs	r1, r3, #1
 8012864:	9b03      	ldr	r3, [sp, #12]
 8012866:	088e      	lsrs	r6, r1, #2
 8012868:	685c      	ldr	r4, [r3, #4]
 801286a:	d020      	beq.n	80128ae <arm_fir_f32+0x4a6>
 801286c:	f104 0210 	add.w	r2, r4, #16
 8012870:	f10c 0310 	add.w	r3, ip, #16
 8012874:	4630      	mov	r0, r6
 8012876:	e001      	b.n	801287c <arm_fir_f32+0x474>
 8012878:	00000000 	.word	0x00000000
 801287c:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8012880:	f842 5c10 	str.w	r5, [r2, #-16]
 8012884:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8012888:	f842 5c0c 	str.w	r5, [r2, #-12]
 801288c:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8012890:	f842 5c08 	str.w	r5, [r2, #-8]
 8012894:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8012898:	f842 5c04 	str.w	r5, [r2, #-4]
 801289c:	3801      	subs	r0, #1
 801289e:	f103 0310 	add.w	r3, r3, #16
 80128a2:	f102 0210 	add.w	r2, r2, #16
 80128a6:	d1e9      	bne.n	801287c <arm_fir_f32+0x474>
 80128a8:	0133      	lsls	r3, r6, #4
 80128aa:	441c      	add	r4, r3
 80128ac:	449c      	add	ip, r3
 80128ae:	f011 0303 	ands.w	r3, r1, #3
 80128b2:	d006      	beq.n	80128c2 <arm_fir_f32+0x4ba>
 80128b4:	4622      	mov	r2, r4
 80128b6:	f85c 1b04 	ldr.w	r1, [ip], #4
 80128ba:	f842 1b04 	str.w	r1, [r2], #4
 80128be:	3b01      	subs	r3, #1
 80128c0:	d1f9      	bne.n	80128b6 <arm_fir_f32+0x4ae>
 80128c2:	b009      	add	sp, #36	@ 0x24
 80128c4:	ecbd 8b10 	vpop	{d8-d15}
 80128c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128cc:	46c3      	mov	fp, r8
 80128ce:	e745      	b.n	801275c <arm_fir_f32+0x354>

080128d0 <arm_cmplx_mag_f32>:
 80128d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128d4:	ea5f 0892 	movs.w	r8, r2, lsr #2
 80128d8:	b084      	sub	sp, #16
 80128da:	d07f      	beq.n	80129dc <arm_cmplx_mag_f32+0x10c>
 80128dc:	2700      	movs	r7, #0
 80128de:	f100 0420 	add.w	r4, r0, #32
 80128e2:	f101 0510 	add.w	r5, r1, #16
 80128e6:	4646      	mov	r6, r8
 80128e8:	e05a      	b.n	80129a0 <arm_cmplx_mag_f32+0xd0>
 80128ea:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80128ee:	eeb4 0a40 	vcmp.f32	s0, s0
 80128f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128f6:	f040 80a4 	bne.w	8012a42 <arm_cmplx_mag_f32+0x172>
 80128fa:	ed05 0a04 	vstr	s0, [r5, #-16]
 80128fe:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 8012902:	ed14 0a05 	vldr	s0, [r4, #-20]	@ 0xffffffec
 8012906:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801290a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801290e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012912:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801291a:	f2c0 808f 	blt.w	8012a3c <arm_cmplx_mag_f32+0x16c>
 801291e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8012922:	eeb4 0a40 	vcmp.f32	s0, s0
 8012926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801292a:	f040 80af 	bne.w	8012a8c <arm_cmplx_mag_f32+0x1bc>
 801292e:	ed05 0a03 	vstr	s0, [r5, #-12]
 8012932:	ed54 7a04 	vldr	s15, [r4, #-16]
 8012936:	ed14 0a03 	vldr	s0, [r4, #-12]
 801293a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801293e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012942:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012946:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801294a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801294e:	db72      	blt.n	8012a36 <arm_cmplx_mag_f32+0x166>
 8012950:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8012954:	eeb4 0a40 	vcmp.f32	s0, s0
 8012958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801295c:	f040 808c 	bne.w	8012a78 <arm_cmplx_mag_f32+0x1a8>
 8012960:	ed05 0a02 	vstr	s0, [r5, #-8]
 8012964:	ed54 7a02 	vldr	s15, [r4, #-8]
 8012968:	ed14 0a01 	vldr	s0, [r4, #-4]
 801296c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012970:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012974:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012978:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801297c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012980:	db20      	blt.n	80129c4 <arm_cmplx_mag_f32+0xf4>
 8012982:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8012986:	eeb4 0a40 	vcmp.f32	s0, s0
 801298a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801298e:	d169      	bne.n	8012a64 <arm_cmplx_mag_f32+0x194>
 8012990:	3e01      	subs	r6, #1
 8012992:	ed05 0a01 	vstr	s0, [r5, #-4]
 8012996:	f104 0420 	add.w	r4, r4, #32
 801299a:	f105 0510 	add.w	r5, r5, #16
 801299e:	d019      	beq.n	80129d4 <arm_cmplx_mag_f32+0x104>
 80129a0:	ed54 7a08 	vldr	s15, [r4, #-32]	@ 0xffffffe0
 80129a4:	ed14 0a07 	vldr	s0, [r4, #-28]	@ 0xffffffe4
 80129a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80129ac:	ee20 0a00 	vmul.f32	s0, s0, s0
 80129b0:	ee77 7a80 	vadd.f32	s15, s15, s0
 80129b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80129b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129bc:	da95      	bge.n	80128ea <arm_cmplx_mag_f32+0x1a>
 80129be:	f845 7c10 	str.w	r7, [r5, #-16]
 80129c2:	e79c      	b.n	80128fe <arm_cmplx_mag_f32+0x2e>
 80129c4:	3e01      	subs	r6, #1
 80129c6:	f845 7c04 	str.w	r7, [r5, #-4]
 80129ca:	f104 0420 	add.w	r4, r4, #32
 80129ce:	f105 0510 	add.w	r5, r5, #16
 80129d2:	d1e5      	bne.n	80129a0 <arm_cmplx_mag_f32+0xd0>
 80129d4:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 80129d8:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 80129dc:	f012 0503 	ands.w	r5, r2, #3
 80129e0:	d026      	beq.n	8012a30 <arm_cmplx_mag_f32+0x160>
 80129e2:	2600      	movs	r6, #0
 80129e4:	f100 0408 	add.w	r4, r0, #8
 80129e8:	e00c      	b.n	8012a04 <arm_cmplx_mag_f32+0x134>
 80129ea:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80129ee:	eeb4 0a40 	vcmp.f32	s0, s0
 80129f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129f6:	d12e      	bne.n	8012a56 <arm_cmplx_mag_f32+0x186>
 80129f8:	3d01      	subs	r5, #1
 80129fa:	ed01 0a01 	vstr	s0, [r1, #-4]
 80129fe:	f104 0408 	add.w	r4, r4, #8
 8012a02:	d015      	beq.n	8012a30 <arm_cmplx_mag_f32+0x160>
 8012a04:	ed54 7a02 	vldr	s15, [r4, #-8]
 8012a08:	ed14 0a01 	vldr	s0, [r4, #-4]
 8012a0c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012a10:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012a14:	3104      	adds	r1, #4
 8012a16:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012a1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a22:	dae2      	bge.n	80129ea <arm_cmplx_mag_f32+0x11a>
 8012a24:	3d01      	subs	r5, #1
 8012a26:	f841 6c04 	str.w	r6, [r1, #-4]
 8012a2a:	f104 0408 	add.w	r4, r4, #8
 8012a2e:	d1e9      	bne.n	8012a04 <arm_cmplx_mag_f32+0x134>
 8012a30:	b004      	add	sp, #16
 8012a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a36:	f845 7c08 	str.w	r7, [r5, #-8]
 8012a3a:	e793      	b.n	8012964 <arm_cmplx_mag_f32+0x94>
 8012a3c:	f845 7c0c 	str.w	r7, [r5, #-12]
 8012a40:	e777      	b.n	8012932 <arm_cmplx_mag_f32+0x62>
 8012a42:	eeb0 0a67 	vmov.f32	s0, s15
 8012a46:	9203      	str	r2, [sp, #12]
 8012a48:	9102      	str	r1, [sp, #8]
 8012a4a:	9001      	str	r0, [sp, #4]
 8012a4c:	f001 fe4a 	bl	80146e4 <sqrtf>
 8012a50:	a801      	add	r0, sp, #4
 8012a52:	c807      	ldmia	r0, {r0, r1, r2}
 8012a54:	e751      	b.n	80128fa <arm_cmplx_mag_f32+0x2a>
 8012a56:	eeb0 0a67 	vmov.f32	s0, s15
 8012a5a:	9101      	str	r1, [sp, #4]
 8012a5c:	f001 fe42 	bl	80146e4 <sqrtf>
 8012a60:	9901      	ldr	r1, [sp, #4]
 8012a62:	e7c9      	b.n	80129f8 <arm_cmplx_mag_f32+0x128>
 8012a64:	eeb0 0a67 	vmov.f32	s0, s15
 8012a68:	9203      	str	r2, [sp, #12]
 8012a6a:	9102      	str	r1, [sp, #8]
 8012a6c:	9001      	str	r0, [sp, #4]
 8012a6e:	f001 fe39 	bl	80146e4 <sqrtf>
 8012a72:	a801      	add	r0, sp, #4
 8012a74:	c807      	ldmia	r0, {r0, r1, r2}
 8012a76:	e78b      	b.n	8012990 <arm_cmplx_mag_f32+0xc0>
 8012a78:	eeb0 0a67 	vmov.f32	s0, s15
 8012a7c:	9203      	str	r2, [sp, #12]
 8012a7e:	9102      	str	r1, [sp, #8]
 8012a80:	9001      	str	r0, [sp, #4]
 8012a82:	f001 fe2f 	bl	80146e4 <sqrtf>
 8012a86:	a801      	add	r0, sp, #4
 8012a88:	c807      	ldmia	r0, {r0, r1, r2}
 8012a8a:	e769      	b.n	8012960 <arm_cmplx_mag_f32+0x90>
 8012a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8012a90:	9203      	str	r2, [sp, #12]
 8012a92:	9102      	str	r1, [sp, #8]
 8012a94:	9001      	str	r0, [sp, #4]
 8012a96:	f001 fe25 	bl	80146e4 <sqrtf>
 8012a9a:	a801      	add	r0, sp, #4
 8012a9c:	c807      	ldmia	r0, {r0, r1, r2}
 8012a9e:	e746      	b.n	801292e <arm_cmplx_mag_f32+0x5e>

08012aa0 <arm_cos_f32>:
 8012aa0:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8012b14 <arm_cos_f32+0x74>
 8012aa4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012aa8:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8012aac:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012ab0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ab8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012abc:	d504      	bpl.n	8012ac8 <arm_cos_f32+0x28>
 8012abe:	ee17 3a90 	vmov	r3, s15
 8012ac2:	3b01      	subs	r3, #1
 8012ac4:	ee07 3a90 	vmov	s15, r3
 8012ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012acc:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8012b18 <arm_cos_f32+0x78>
 8012ad0:	4a12      	ldr	r2, [pc, #72]	@ (8012b1c <arm_cos_f32+0x7c>)
 8012ad2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012ad6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012ada:	ee20 0a26 	vmul.f32	s0, s0, s13
 8012ade:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012ae2:	ee17 3a90 	vmov	r3, s15
 8012ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012aea:	ee07 3a90 	vmov	s15, r3
 8012aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012af2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8012af6:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012afa:	edd1 6a01 	vldr	s13, [r1, #4]
 8012afe:	ed91 0a00 	vldr	s0, [r1]
 8012b02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012b06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012b0a:	ee27 0a00 	vmul.f32	s0, s14, s0
 8012b0e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012b12:	4770      	bx	lr
 8012b14:	3e22f983 	.word	0x3e22f983
 8012b18:	44000000 	.word	0x44000000
 8012b1c:	080264d4 	.word	0x080264d4

08012b20 <arm_sub_f32>:
 8012b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b22:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8012b26:	d033      	beq.n	8012b90 <arm_sub_f32+0x70>
 8012b28:	f100 0610 	add.w	r6, r0, #16
 8012b2c:	f101 0510 	add.w	r5, r1, #16
 8012b30:	f102 0410 	add.w	r4, r2, #16
 8012b34:	4677      	mov	r7, lr
 8012b36:	ed16 6a03 	vldr	s12, [r6, #-12]
 8012b3a:	ed15 4a03 	vldr	s8, [r5, #-12]
 8012b3e:	ed56 6a02 	vldr	s13, [r6, #-8]
 8012b42:	ed55 4a02 	vldr	s9, [r5, #-8]
 8012b46:	ed16 7a01 	vldr	s14, [r6, #-4]
 8012b4a:	ed15 5a01 	vldr	s10, [r5, #-4]
 8012b4e:	ed56 7a04 	vldr	s15, [r6, #-16]
 8012b52:	ed55 5a04 	vldr	s11, [r5, #-16]
 8012b56:	ee36 6a44 	vsub.f32	s12, s12, s8
 8012b5a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8012b5e:	ee37 7a45 	vsub.f32	s14, s14, s10
 8012b62:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8012b66:	3f01      	subs	r7, #1
 8012b68:	ed04 6a03 	vstr	s12, [r4, #-12]
 8012b6c:	ed44 6a02 	vstr	s13, [r4, #-8]
 8012b70:	ed04 7a01 	vstr	s14, [r4, #-4]
 8012b74:	ed44 7a04 	vstr	s15, [r4, #-16]
 8012b78:	f106 0610 	add.w	r6, r6, #16
 8012b7c:	f105 0510 	add.w	r5, r5, #16
 8012b80:	f104 0410 	add.w	r4, r4, #16
 8012b84:	d1d7      	bne.n	8012b36 <arm_sub_f32+0x16>
 8012b86:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8012b8a:	4420      	add	r0, r4
 8012b8c:	4421      	add	r1, r4
 8012b8e:	4422      	add	r2, r4
 8012b90:	f013 0303 	ands.w	r3, r3, #3
 8012b94:	d009      	beq.n	8012baa <arm_sub_f32+0x8a>
 8012b96:	ecf0 7a01 	vldmia	r0!, {s15}
 8012b9a:	ecb1 7a01 	vldmia	r1!, {s14}
 8012b9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012ba2:	3b01      	subs	r3, #1
 8012ba4:	ece2 7a01 	vstmia	r2!, {s15}
 8012ba8:	d1f5      	bne.n	8012b96 <arm_sub_f32+0x76>
 8012baa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012bac <arm_scale_f32>:
 8012bac:	b470      	push	{r4, r5, r6}
 8012bae:	0896      	lsrs	r6, r2, #2
 8012bb0:	d025      	beq.n	8012bfe <arm_scale_f32+0x52>
 8012bb2:	f100 0410 	add.w	r4, r0, #16
 8012bb6:	f101 0310 	add.w	r3, r1, #16
 8012bba:	4635      	mov	r5, r6
 8012bbc:	ed14 6a04 	vldr	s12, [r4, #-16]
 8012bc0:	ed54 6a03 	vldr	s13, [r4, #-12]
 8012bc4:	ed14 7a02 	vldr	s14, [r4, #-8]
 8012bc8:	ed54 7a01 	vldr	s15, [r4, #-4]
 8012bcc:	ee26 6a00 	vmul.f32	s12, s12, s0
 8012bd0:	ee66 6a80 	vmul.f32	s13, s13, s0
 8012bd4:	ee27 7a00 	vmul.f32	s14, s14, s0
 8012bd8:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012bdc:	3d01      	subs	r5, #1
 8012bde:	ed03 6a04 	vstr	s12, [r3, #-16]
 8012be2:	ed43 6a03 	vstr	s13, [r3, #-12]
 8012be6:	ed03 7a02 	vstr	s14, [r3, #-8]
 8012bea:	ed43 7a01 	vstr	s15, [r3, #-4]
 8012bee:	f104 0410 	add.w	r4, r4, #16
 8012bf2:	f103 0310 	add.w	r3, r3, #16
 8012bf6:	d1e1      	bne.n	8012bbc <arm_scale_f32+0x10>
 8012bf8:	0136      	lsls	r6, r6, #4
 8012bfa:	4430      	add	r0, r6
 8012bfc:	4431      	add	r1, r6
 8012bfe:	f012 0203 	ands.w	r2, r2, #3
 8012c02:	d007      	beq.n	8012c14 <arm_scale_f32+0x68>
 8012c04:	ecf0 7a01 	vldmia	r0!, {s15}
 8012c08:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012c0c:	3a01      	subs	r2, #1
 8012c0e:	ece1 7a01 	vstmia	r1!, {s15}
 8012c12:	d1f7      	bne.n	8012c04 <arm_scale_f32+0x58>
 8012c14:	bc70      	pop	{r4, r5, r6}
 8012c16:	4770      	bx	lr

08012c18 <arm_add_f32>:
 8012c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c1a:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8012c1e:	d033      	beq.n	8012c88 <arm_add_f32+0x70>
 8012c20:	f100 0610 	add.w	r6, r0, #16
 8012c24:	f101 0510 	add.w	r5, r1, #16
 8012c28:	f102 0410 	add.w	r4, r2, #16
 8012c2c:	4677      	mov	r7, lr
 8012c2e:	ed16 6a03 	vldr	s12, [r6, #-12]
 8012c32:	ed15 4a03 	vldr	s8, [r5, #-12]
 8012c36:	ed56 6a02 	vldr	s13, [r6, #-8]
 8012c3a:	ed55 4a02 	vldr	s9, [r5, #-8]
 8012c3e:	ed16 7a01 	vldr	s14, [r6, #-4]
 8012c42:	ed15 5a01 	vldr	s10, [r5, #-4]
 8012c46:	ed56 7a04 	vldr	s15, [r6, #-16]
 8012c4a:	ed55 5a04 	vldr	s11, [r5, #-16]
 8012c4e:	ee36 6a04 	vadd.f32	s12, s12, s8
 8012c52:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8012c56:	ee37 7a05 	vadd.f32	s14, s14, s10
 8012c5a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8012c5e:	3f01      	subs	r7, #1
 8012c60:	ed04 6a03 	vstr	s12, [r4, #-12]
 8012c64:	ed44 6a02 	vstr	s13, [r4, #-8]
 8012c68:	ed04 7a01 	vstr	s14, [r4, #-4]
 8012c6c:	ed44 7a04 	vstr	s15, [r4, #-16]
 8012c70:	f106 0610 	add.w	r6, r6, #16
 8012c74:	f105 0510 	add.w	r5, r5, #16
 8012c78:	f104 0410 	add.w	r4, r4, #16
 8012c7c:	d1d7      	bne.n	8012c2e <arm_add_f32+0x16>
 8012c7e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8012c82:	4420      	add	r0, r4
 8012c84:	4421      	add	r1, r4
 8012c86:	4422      	add	r2, r4
 8012c88:	f013 0303 	ands.w	r3, r3, #3
 8012c8c:	d009      	beq.n	8012ca2 <arm_add_f32+0x8a>
 8012c8e:	ecf0 7a01 	vldmia	r0!, {s15}
 8012c92:	ecb1 7a01 	vldmia	r1!, {s14}
 8012c96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012c9a:	3b01      	subs	r3, #1
 8012c9c:	ece2 7a01 	vstmia	r2!, {s15}
 8012ca0:	d1f5      	bne.n	8012c8e <arm_add_f32+0x76>
 8012ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012ca4 <arm_abs_f32>:
 8012ca4:	b470      	push	{r4, r5, r6}
 8012ca6:	0896      	lsrs	r6, r2, #2
 8012ca8:	d025      	beq.n	8012cf6 <arm_abs_f32+0x52>
 8012caa:	f100 0410 	add.w	r4, r0, #16
 8012cae:	f101 0310 	add.w	r3, r1, #16
 8012cb2:	4635      	mov	r5, r6
 8012cb4:	ed14 6a04 	vldr	s12, [r4, #-16]
 8012cb8:	ed54 6a03 	vldr	s13, [r4, #-12]
 8012cbc:	ed14 7a02 	vldr	s14, [r4, #-8]
 8012cc0:	ed54 7a01 	vldr	s15, [r4, #-4]
 8012cc4:	eeb0 6ac6 	vabs.f32	s12, s12
 8012cc8:	eef0 6ae6 	vabs.f32	s13, s13
 8012ccc:	eeb0 7ac7 	vabs.f32	s14, s14
 8012cd0:	eef0 7ae7 	vabs.f32	s15, s15
 8012cd4:	3d01      	subs	r5, #1
 8012cd6:	ed03 6a04 	vstr	s12, [r3, #-16]
 8012cda:	ed43 6a03 	vstr	s13, [r3, #-12]
 8012cde:	ed03 7a02 	vstr	s14, [r3, #-8]
 8012ce2:	ed43 7a01 	vstr	s15, [r3, #-4]
 8012ce6:	f104 0410 	add.w	r4, r4, #16
 8012cea:	f103 0310 	add.w	r3, r3, #16
 8012cee:	d1e1      	bne.n	8012cb4 <arm_abs_f32+0x10>
 8012cf0:	0136      	lsls	r6, r6, #4
 8012cf2:	4430      	add	r0, r6
 8012cf4:	4431      	add	r1, r6
 8012cf6:	f012 0203 	ands.w	r2, r2, #3
 8012cfa:	d007      	beq.n	8012d0c <arm_abs_f32+0x68>
 8012cfc:	ecf0 7a01 	vldmia	r0!, {s15}
 8012d00:	3a01      	subs	r2, #1
 8012d02:	eef0 7ae7 	vabs.f32	s15, s15
 8012d06:	ece1 7a01 	vstmia	r1!, {s15}
 8012d0a:	d1f7      	bne.n	8012cfc <arm_abs_f32+0x58>
 8012d0c:	bc70      	pop	{r4, r5, r6}
 8012d0e:	4770      	bx	lr

08012d10 <arm_radix8_butterfly_f32>:
 8012d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d14:	ed2d 8b10 	vpush	{d8-d15}
 8012d18:	b09d      	sub	sp, #116	@ 0x74
 8012d1a:	461c      	mov	r4, r3
 8012d1c:	ed9f bac8 	vldr	s22, [pc, #800]	@ 8013040 <arm_radix8_butterfly_f32+0x330>
 8012d20:	921a      	str	r2, [sp, #104]	@ 0x68
 8012d22:	1d03      	adds	r3, r0, #4
 8012d24:	4682      	mov	sl, r0
 8012d26:	4689      	mov	r9, r1
 8012d28:	468b      	mov	fp, r1
 8012d2a:	931b      	str	r3, [sp, #108]	@ 0x6c
 8012d2c:	9400      	str	r4, [sp, #0]
 8012d2e:	469e      	mov	lr, r3
 8012d30:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8012d34:	005a      	lsls	r2, r3, #1
 8012d36:	18d6      	adds	r6, r2, r3
 8012d38:	18f5      	adds	r5, r6, r3
 8012d3a:	9203      	str	r2, [sp, #12]
 8012d3c:	195a      	adds	r2, r3, r5
 8012d3e:	18d0      	adds	r0, r2, r3
 8012d40:	00df      	lsls	r7, r3, #3
 8012d42:	1819      	adds	r1, r3, r0
 8012d44:	463c      	mov	r4, r7
 8012d46:	9701      	str	r7, [sp, #4]
 8012d48:	4457      	add	r7, sl
 8012d4a:	930c      	str	r3, [sp, #48]	@ 0x30
 8012d4c:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8012d50:	011b      	lsls	r3, r3, #4
 8012d52:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8012d56:	eb07 0c04 	add.w	ip, r7, r4
 8012d5a:	9c00      	ldr	r4, [sp, #0]
 8012d5c:	9302      	str	r3, [sp, #8]
 8012d5e:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8012d62:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8012d66:	3204      	adds	r2, #4
 8012d68:	3104      	adds	r1, #4
 8012d6a:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8012d6e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8012d72:	f04f 0800 	mov.w	r8, #0
 8012d76:	eddc 7a00 	vldr	s15, [ip]
 8012d7a:	edd7 6a00 	vldr	s13, [r7]
 8012d7e:	edd6 3a00 	vldr	s7, [r6]
 8012d82:	ed5e aa01 	vldr	s21, [lr, #-4]
 8012d86:	edd5 4a00 	vldr	s9, [r5]
 8012d8a:	ed90 2a00 	vldr	s4, [r0]
 8012d8e:	ed12 7a01 	vldr	s14, [r2, #-4]
 8012d92:	ed51 0a01 	vldr	s1, [r1, #-4]
 8012d96:	ee77 8a82 	vadd.f32	s17, s15, s4
 8012d9a:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8012d9e:	ee76 1a87 	vadd.f32	s3, s13, s14
 8012da2:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8012da6:	ee31 6a84 	vadd.f32	s12, s3, s8
 8012daa:	ee33 5a28 	vadd.f32	s10, s6, s17
 8012dae:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8012db2:	ee75 6a06 	vadd.f32	s13, s10, s12
 8012db6:	ee35 5a46 	vsub.f32	s10, s10, s12
 8012dba:	ed4e 6a01 	vstr	s13, [lr, #-4]
 8012dbe:	ed85 5a00 	vstr	s10, [r5]
 8012dc2:	ed96 1a01 	vldr	s2, [r6, #4]
 8012dc6:	edd7 5a01 	vldr	s11, [r7, #4]
 8012dca:	ed92 aa00 	vldr	s20, [r2]
 8012dce:	ed91 6a00 	vldr	s12, [r1]
 8012dd2:	ed9e 9a00 	vldr	s18, [lr]
 8012dd6:	ed95 5a01 	vldr	s10, [r5, #4]
 8012dda:	eddc 6a01 	vldr	s13, [ip, #4]
 8012dde:	edd0 9a01 	vldr	s19, [r0, #4]
 8012de2:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8012de6:	ee71 2a46 	vsub.f32	s5, s2, s12
 8012dea:	ee75 3aca 	vsub.f32	s7, s11, s20
 8012dee:	ee37 0a60 	vsub.f32	s0, s14, s1
 8012df2:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8012df6:	ee37 7a20 	vadd.f32	s14, s14, s1
 8012dfa:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8012dfe:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8012e02:	ee79 3a05 	vadd.f32	s7, s18, s10
 8012e06:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8012e0a:	ee39 5a45 	vsub.f32	s10, s18, s10
 8012e0e:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8012e12:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8012e16:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8012e1a:	ee31 6a06 	vadd.f32	s12, s2, s12
 8012e1e:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8012e22:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8012e26:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8012e2a:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8012e2e:	ee33 3a68 	vsub.f32	s6, s6, s17
 8012e32:	ee36 0a88 	vadd.f32	s0, s13, s16
 8012e36:	ee75 8a86 	vadd.f32	s17, s11, s12
 8012e3a:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8012e3e:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8012e42:	ee75 6a62 	vsub.f32	s13, s10, s5
 8012e46:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8012e4a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8012e4e:	ee33 1a89 	vadd.f32	s2, s7, s18
 8012e52:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8012e56:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8012e5a:	ee75 4a22 	vadd.f32	s9, s10, s5
 8012e5e:	ee32 5a27 	vadd.f32	s10, s4, s15
 8012e62:	ee72 7a67 	vsub.f32	s15, s4, s15
 8012e66:	ee33 8a06 	vadd.f32	s16, s6, s12
 8012e6a:	ee75 2a87 	vadd.f32	s5, s11, s14
 8012e6e:	ee31 9a28 	vadd.f32	s18, s2, s17
 8012e72:	ee33 6a46 	vsub.f32	s12, s6, s12
 8012e76:	ee74 0a61 	vsub.f32	s1, s8, s3
 8012e7a:	ee33 2a80 	vadd.f32	s4, s7, s0
 8012e7e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8012e82:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8012e86:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8012e8a:	ee31 1a68 	vsub.f32	s2, s2, s17
 8012e8e:	ee34 4a21 	vadd.f32	s8, s8, s3
 8012e92:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8012e96:	ee74 4a85 	vadd.f32	s9, s9, s10
 8012e9a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8012e9e:	44d8      	add	r8, fp
 8012ea0:	45c1      	cmp	r9, r8
 8012ea2:	ed8e 9a00 	vstr	s18, [lr]
 8012ea6:	ed85 1a01 	vstr	s2, [r5, #4]
 8012eaa:	449e      	add	lr, r3
 8012eac:	ed8c 8a00 	vstr	s16, [ip]
 8012eb0:	441d      	add	r5, r3
 8012eb2:	ed80 6a00 	vstr	s12, [r0]
 8012eb6:	edcc 0a01 	vstr	s1, [ip, #4]
 8012eba:	ed80 4a01 	vstr	s8, [r0, #4]
 8012ebe:	449c      	add	ip, r3
 8012ec0:	ed87 2a00 	vstr	s4, [r7]
 8012ec4:	4418      	add	r0, r3
 8012ec6:	ed41 3a01 	vstr	s7, [r1, #-4]
 8012eca:	ed42 2a01 	vstr	s5, [r2, #-4]
 8012ece:	ed86 7a00 	vstr	s14, [r6]
 8012ed2:	ed87 3a01 	vstr	s6, [r7, #4]
 8012ed6:	edc1 4a00 	vstr	s9, [r1]
 8012eda:	441f      	add	r7, r3
 8012edc:	edc2 5a00 	vstr	s11, [r2]
 8012ee0:	4419      	add	r1, r3
 8012ee2:	edc6 6a01 	vstr	s13, [r6, #4]
 8012ee6:	441a      	add	r2, r3
 8012ee8:	441e      	add	r6, r3
 8012eea:	f63f af44 	bhi.w	8012d76 <arm_radix8_butterfly_f32+0x66>
 8012eee:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012ef0:	2907      	cmp	r1, #7
 8012ef2:	4620      	mov	r0, r4
 8012ef4:	f240 81e9 	bls.w	80132ca <arm_radix8_butterfly_f32+0x5ba>
 8012ef8:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8012efc:	193e      	adds	r6, r7, r4
 8012efe:	1935      	adds	r5, r6, r4
 8012f00:	9c03      	ldr	r4, [sp, #12]
 8012f02:	9000      	str	r0, [sp, #0]
 8012f04:	4622      	mov	r2, r4
 8012f06:	3201      	adds	r2, #1
 8012f08:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012f0c:	9900      	ldr	r1, [sp, #0]
 8012f0e:	1828      	adds	r0, r5, r0
 8012f10:	eb00 0e01 	add.w	lr, r0, r1
 8012f14:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012f16:	440a      	add	r2, r1
 8012f18:	eb04 0c01 	add.w	ip, r4, r1
 8012f1c:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8012f20:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8012f24:	9a00      	ldr	r2, [sp, #0]
 8012f26:	940f      	str	r4, [sp, #60]	@ 0x3c
 8012f28:	00ed      	lsls	r5, r5, #3
 8012f2a:	9511      	str	r5, [sp, #68]	@ 0x44
 8012f2c:	00d5      	lsls	r5, r2, #3
 8012f2e:	950d      	str	r5, [sp, #52]	@ 0x34
 8012f30:	9d01      	ldr	r5, [sp, #4]
 8012f32:	3508      	adds	r5, #8
 8012f34:	9516      	str	r5, [sp, #88]	@ 0x58
 8012f36:	9d02      	ldr	r5, [sp, #8]
 8012f38:	3508      	adds	r5, #8
 8012f3a:	0114      	lsls	r4, r2, #4
 8012f3c:	9517      	str	r5, [sp, #92]	@ 0x5c
 8012f3e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012f40:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8012f42:	940e      	str	r4, [sp, #56]	@ 0x38
 8012f44:	00c0      	lsls	r0, r0, #3
 8012f46:	9010      	str	r0, [sp, #64]	@ 0x40
 8012f48:	18aa      	adds	r2, r5, r2
 8012f4a:	9207      	str	r2, [sp, #28]
 8012f4c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8012f4e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8012f50:	18aa      	adds	r2, r5, r2
 8012f52:	9208      	str	r2, [sp, #32]
 8012f54:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012f56:	18aa      	adds	r2, r5, r2
 8012f58:	9209      	str	r2, [sp, #36]	@ 0x24
 8012f5a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8012f5e:	f10e 0204 	add.w	r2, lr, #4
 8012f62:	920a      	str	r2, [sp, #40]	@ 0x28
 8012f64:	00c9      	lsls	r1, r1, #3
 8012f66:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012f68:	310c      	adds	r1, #12
 8012f6a:	00f6      	lsls	r6, r6, #3
 8012f6c:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8012f70:	9114      	str	r1, [sp, #80]	@ 0x50
 8012f72:	18a9      	adds	r1, r5, r2
 8012f74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012f76:	9612      	str	r6, [sp, #72]	@ 0x48
 8012f78:	00ff      	lsls	r7, r7, #3
 8012f7a:	19ae      	adds	r6, r5, r6
 8012f7c:	3008      	adds	r0, #8
 8012f7e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8012f82:	9606      	str	r6, [sp, #24]
 8012f84:	9019      	str	r0, [sp, #100]	@ 0x64
 8012f86:	18aa      	adds	r2, r5, r2
 8012f88:	0164      	lsls	r4, r4, #5
 8012f8a:	19ee      	adds	r6, r5, r7
 8012f8c:	f10c 000c 	add.w	r0, ip, #12
 8012f90:	9713      	str	r7, [sp, #76]	@ 0x4c
 8012f92:	9604      	str	r6, [sp, #16]
 8012f94:	9015      	str	r0, [sp, #84]	@ 0x54
 8012f96:	9103      	str	r1, [sp, #12]
 8012f98:	9205      	str	r2, [sp, #20]
 8012f9a:	f104 0208 	add.w	r2, r4, #8
 8012f9e:	9218      	str	r2, [sp, #96]	@ 0x60
 8012fa0:	f04f 0801 	mov.w	r8, #1
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	f102 0108 	add.w	r1, r2, #8
 8012faa:	460f      	mov	r7, r1
 8012fac:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012fae:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8012fb0:	188e      	adds	r6, r1, r2
 8012fb2:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8012fb4:	188d      	adds	r5, r1, r2
 8012fb6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8012fb8:	188c      	adds	r4, r1, r2
 8012fba:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8012fbc:	1888      	adds	r0, r1, r2
 8012fbe:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8012fc0:	eb01 0c02 	add.w	ip, r1, r2
 8012fc4:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8012fc6:	440a      	add	r2, r1
 8012fc8:	9903      	ldr	r1, [sp, #12]
 8012fca:	edd1 fa00 	vldr	s31, [r1]
 8012fce:	9905      	ldr	r1, [sp, #20]
 8012fd0:	ed91 fa00 	vldr	s30, [r1]
 8012fd4:	9904      	ldr	r1, [sp, #16]
 8012fd6:	edd1 ea00 	vldr	s29, [r1]
 8012fda:	9906      	ldr	r1, [sp, #24]
 8012fdc:	ed91 ea00 	vldr	s28, [r1]
 8012fe0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012fe2:	edd1 da00 	vldr	s27, [r1]
 8012fe6:	9908      	ldr	r1, [sp, #32]
 8012fe8:	ed91 da00 	vldr	s26, [r1]
 8012fec:	9907      	ldr	r1, [sp, #28]
 8012fee:	edd1 ca00 	vldr	s25, [r1]
 8012ff2:	9903      	ldr	r1, [sp, #12]
 8012ff4:	ed91 ca01 	vldr	s24, [r1, #4]
 8012ff8:	9905      	ldr	r1, [sp, #20]
 8012ffa:	edd1 ba01 	vldr	s23, [r1, #4]
 8012ffe:	9904      	ldr	r1, [sp, #16]
 8013000:	edd1 aa01 	vldr	s21, [r1, #4]
 8013004:	9906      	ldr	r1, [sp, #24]
 8013006:	ed91 aa01 	vldr	s20, [r1, #4]
 801300a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801300c:	edd1 7a01 	vldr	s15, [r1, #4]
 8013010:	9908      	ldr	r1, [sp, #32]
 8013012:	edcd 7a00 	vstr	s15, [sp]
 8013016:	edd1 7a01 	vldr	s15, [r1, #4]
 801301a:	9907      	ldr	r1, [sp, #28]
 801301c:	edcd 7a01 	vstr	s15, [sp, #4]
 8013020:	edd1 7a01 	vldr	s15, [r1, #4]
 8013024:	eb0a 0e07 	add.w	lr, sl, r7
 8013028:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801302a:	edcd 7a02 	vstr	s15, [sp, #8]
 801302e:	eb0c 010a 	add.w	r1, ip, sl
 8013032:	4456      	add	r6, sl
 8013034:	4455      	add	r5, sl
 8013036:	4454      	add	r4, sl
 8013038:	4450      	add	r0, sl
 801303a:	4452      	add	r2, sl
 801303c:	46c4      	mov	ip, r8
 801303e:	e001      	b.n	8013044 <arm_radix8_butterfly_f32+0x334>
 8013040:	3f3504f3 	.word	0x3f3504f3
 8013044:	ed96 5a00 	vldr	s10, [r6]
 8013048:	ed52 9a01 	vldr	s19, [r2, #-4]
 801304c:	ed11 6a01 	vldr	s12, [r1, #-4]
 8013050:	edd0 7a00 	vldr	s15, [r0]
 8013054:	ed17 7a01 	vldr	s14, [r7, #-4]
 8013058:	edde 3a00 	vldr	s7, [lr]
 801305c:	ed94 3a00 	vldr	s6, [r4]
 8013060:	ed95 2a00 	vldr	s4, [r5]
 8013064:	ed9e 0a01 	vldr	s0, [lr, #4]
 8013068:	ee33 8a85 	vadd.f32	s16, s7, s10
 801306c:	ee32 1a06 	vadd.f32	s2, s4, s12
 8013070:	ee33 4a29 	vadd.f32	s8, s6, s19
 8013074:	ee77 4a87 	vadd.f32	s9, s15, s14
 8013078:	ee78 1a04 	vadd.f32	s3, s16, s8
 801307c:	ee71 6a24 	vadd.f32	s13, s2, s9
 8013080:	ee32 2a46 	vsub.f32	s4, s4, s12
 8013084:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8013088:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801308c:	ed8e 6a00 	vstr	s12, [lr]
 8013090:	edd0 8a01 	vldr	s17, [r0, #4]
 8013094:	ed95 9a01 	vldr	s18, [r5, #4]
 8013098:	edd1 2a00 	vldr	s5, [r1]
 801309c:	ed97 7a00 	vldr	s14, [r7]
 80130a0:	edd4 0a01 	vldr	s1, [r4, #4]
 80130a4:	ed96 6a01 	vldr	s12, [r6, #4]
 80130a8:	edd2 5a00 	vldr	s11, [r2]
 80130ac:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80130b0:	ee33 3a69 	vsub.f32	s6, s6, s19
 80130b4:	ee39 5a62 	vsub.f32	s10, s18, s5
 80130b8:	ee78 9ac7 	vsub.f32	s19, s17, s14
 80130bc:	ee38 4a44 	vsub.f32	s8, s16, s8
 80130c0:	ee38 7a87 	vadd.f32	s14, s17, s14
 80130c4:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80130c8:	ee79 2a22 	vadd.f32	s5, s18, s5
 80130cc:	ee75 8a69 	vsub.f32	s17, s10, s19
 80130d0:	ee32 9a27 	vadd.f32	s18, s4, s15
 80130d4:	ee35 5a29 	vadd.f32	s10, s10, s19
 80130d8:	ee72 7a67 	vsub.f32	s15, s4, s15
 80130dc:	ee30 2a06 	vadd.f32	s4, s0, s12
 80130e0:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80130e4:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80130e8:	ee32 9a08 	vadd.f32	s18, s4, s16
 80130ec:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80130f0:	ee32 2a48 	vsub.f32	s4, s4, s16
 80130f4:	ee71 4a64 	vsub.f32	s9, s2, s9
 80130f8:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80130fc:	ee32 1a87 	vadd.f32	s2, s5, s14
 8013100:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8013104:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8013108:	ee30 6a46 	vsub.f32	s12, s0, s12
 801310c:	ee73 0a29 	vadd.f32	s1, s6, s19
 8013110:	ee36 0a28 	vadd.f32	s0, s12, s17
 8013114:	ee33 3a69 	vsub.f32	s6, s6, s19
 8013118:	ee32 7a64 	vsub.f32	s14, s4, s9
 801311c:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8013120:	ee36 6a68 	vsub.f32	s12, s12, s17
 8013124:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8013128:	ee75 8a85 	vadd.f32	s17, s11, s10
 801312c:	ee74 3a22 	vadd.f32	s7, s8, s5
 8013130:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8013134:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8013138:	ee79 1a41 	vsub.f32	s3, s18, s2
 801313c:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8013140:	ee76 5a43 	vsub.f32	s11, s12, s6
 8013144:	ee74 2a62 	vsub.f32	s5, s8, s5
 8013148:	ee72 4a24 	vadd.f32	s9, s4, s9
 801314c:	ee30 4a60 	vsub.f32	s8, s0, s1
 8013150:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8013154:	ee30 0a20 	vadd.f32	s0, s0, s1
 8013158:	ee77 9a85 	vadd.f32	s19, s15, s10
 801315c:	ee36 6a03 	vadd.f32	s12, s12, s6
 8013160:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8013164:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8013168:	ee2e 5a26 	vmul.f32	s10, s28, s13
 801316c:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8013170:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8013174:	ee39 1a01 	vadd.f32	s2, s18, s2
 8013178:	ee6a 6a26 	vmul.f32	s13, s20, s13
 801317c:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8013180:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8013184:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8013188:	ee6f 1a84 	vmul.f32	s3, s31, s8
 801318c:	ee35 3a03 	vadd.f32	s6, s10, s6
 8013190:	ee72 6a66 	vsub.f32	s13, s4, s13
 8013194:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8013198:	ee2f 2a88 	vmul.f32	s4, s31, s16
 801319c:	ed9d 4a02 	vldr	s8, [sp, #8]
 80131a0:	ed8e 1a01 	vstr	s2, [lr, #4]
 80131a4:	ee77 3a63 	vsub.f32	s7, s14, s7
 80131a8:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80131ac:	ed9d 7a01 	vldr	s14, [sp, #4]
 80131b0:	ed86 3a00 	vstr	s6, [r6]
 80131b4:	ee30 9a89 	vadd.f32	s18, s1, s18
 80131b8:	ee32 2a05 	vadd.f32	s4, s4, s10
 80131bc:	ee6d 0a22 	vmul.f32	s1, s26, s5
 80131c0:	ee31 8ac8 	vsub.f32	s16, s3, s16
 80131c4:	ee67 2a22 	vmul.f32	s5, s14, s5
 80131c8:	ee64 1a00 	vmul.f32	s3, s8, s0
 80131cc:	ee27 7a24 	vmul.f32	s14, s14, s9
 80131d0:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 80131d4:	ee6d 4a24 	vmul.f32	s9, s26, s9
 80131d8:	ee64 8a28 	vmul.f32	s17, s8, s17
 80131dc:	ed9d 4a00 	vldr	s8, [sp]
 80131e0:	edc6 6a01 	vstr	s13, [r6, #4]
 80131e4:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80131e8:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 80131ec:	ee64 9a29 	vmul.f32	s19, s8, s19
 80131f0:	ee24 4a25 	vmul.f32	s8, s8, s11
 80131f4:	ee30 7a87 	vadd.f32	s14, s1, s14
 80131f8:	ee74 4a84 	vadd.f32	s9, s9, s8
 80131fc:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8013200:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8013204:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8013208:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 801320c:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8013210:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8013214:	ee75 1a21 	vadd.f32	s3, s10, s3
 8013218:	ee30 0a68 	vsub.f32	s0, s0, s17
 801321c:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8013220:	ee70 0a84 	vadd.f32	s1, s1, s8
 8013224:	ee36 6a67 	vsub.f32	s12, s12, s15
 8013228:	44dc      	add	ip, fp
 801322a:	45e1      	cmp	r9, ip
 801322c:	ed84 9a00 	vstr	s18, [r4]
 8013230:	edc4 3a01 	vstr	s7, [r4, #4]
 8013234:	449e      	add	lr, r3
 8013236:	ed02 7a01 	vstr	s14, [r2, #-4]
 801323a:	edc2 2a00 	vstr	s5, [r2]
 801323e:	441e      	add	r6, r3
 8013240:	ed85 2a00 	vstr	s4, [r5]
 8013244:	ed85 8a01 	vstr	s16, [r5, #4]
 8013248:	441c      	add	r4, r3
 801324a:	ed47 1a01 	vstr	s3, [r7, #-4]
 801324e:	ed87 0a00 	vstr	s0, [r7]
 8013252:	441a      	add	r2, r3
 8013254:	ed41 4a01 	vstr	s9, [r1, #-4]
 8013258:	edc1 9a00 	vstr	s19, [r1]
 801325c:	441d      	add	r5, r3
 801325e:	edc0 0a00 	vstr	s1, [r0]
 8013262:	441f      	add	r7, r3
 8013264:	ed80 6a01 	vstr	s12, [r0, #4]
 8013268:	4419      	add	r1, r3
 801326a:	4418      	add	r0, r3
 801326c:	f63f aeea 	bhi.w	8013044 <arm_radix8_butterfly_f32+0x334>
 8013270:	9a03      	ldr	r2, [sp, #12]
 8013272:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8013274:	440a      	add	r2, r1
 8013276:	9203      	str	r2, [sp, #12]
 8013278:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801327a:	9a05      	ldr	r2, [sp, #20]
 801327c:	440a      	add	r2, r1
 801327e:	9205      	str	r2, [sp, #20]
 8013280:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8013282:	9a04      	ldr	r2, [sp, #16]
 8013284:	440a      	add	r2, r1
 8013286:	9204      	str	r2, [sp, #16]
 8013288:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801328a:	9a06      	ldr	r2, [sp, #24]
 801328c:	440a      	add	r2, r1
 801328e:	9206      	str	r2, [sp, #24]
 8013290:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8013292:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013294:	440a      	add	r2, r1
 8013296:	9209      	str	r2, [sp, #36]	@ 0x24
 8013298:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801329a:	9a08      	ldr	r2, [sp, #32]
 801329c:	440a      	add	r2, r1
 801329e:	9208      	str	r2, [sp, #32]
 80132a0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80132a2:	9a07      	ldr	r2, [sp, #28]
 80132a4:	440a      	add	r2, r1
 80132a6:	9207      	str	r2, [sp, #28]
 80132a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80132aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80132ac:	f108 0801 	add.w	r8, r8, #1
 80132b0:	3208      	adds	r2, #8
 80132b2:	4588      	cmp	r8, r1
 80132b4:	920a      	str	r2, [sp, #40]	@ 0x28
 80132b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80132b8:	f47f ae75 	bne.w	8012fa6 <arm_radix8_butterfly_f32+0x296>
 80132bc:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 80132c0:	9300      	str	r3, [sp, #0]
 80132c2:	46c3      	mov	fp, r8
 80132c4:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 80132c8:	e532      	b.n	8012d30 <arm_radix8_butterfly_f32+0x20>
 80132ca:	b01d      	add	sp, #116	@ 0x74
 80132cc:	ecbd 8b10 	vpop	{d8-d15}
 80132d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080132d4 <std>:
 80132d4:	2300      	movs	r3, #0
 80132d6:	b510      	push	{r4, lr}
 80132d8:	4604      	mov	r4, r0
 80132da:	e9c0 3300 	strd	r3, r3, [r0]
 80132de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80132e2:	6083      	str	r3, [r0, #8]
 80132e4:	8181      	strh	r1, [r0, #12]
 80132e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80132e8:	81c2      	strh	r2, [r0, #14]
 80132ea:	6183      	str	r3, [r0, #24]
 80132ec:	4619      	mov	r1, r3
 80132ee:	2208      	movs	r2, #8
 80132f0:	305c      	adds	r0, #92	@ 0x5c
 80132f2:	f000 f942 	bl	801357a <memset>
 80132f6:	4b0d      	ldr	r3, [pc, #52]	@ (801332c <std+0x58>)
 80132f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80132fa:	4b0d      	ldr	r3, [pc, #52]	@ (8013330 <std+0x5c>)
 80132fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80132fe:	4b0d      	ldr	r3, [pc, #52]	@ (8013334 <std+0x60>)
 8013300:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013302:	4b0d      	ldr	r3, [pc, #52]	@ (8013338 <std+0x64>)
 8013304:	6323      	str	r3, [r4, #48]	@ 0x30
 8013306:	4b0d      	ldr	r3, [pc, #52]	@ (801333c <std+0x68>)
 8013308:	6224      	str	r4, [r4, #32]
 801330a:	429c      	cmp	r4, r3
 801330c:	d006      	beq.n	801331c <std+0x48>
 801330e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013312:	4294      	cmp	r4, r2
 8013314:	d002      	beq.n	801331c <std+0x48>
 8013316:	33d0      	adds	r3, #208	@ 0xd0
 8013318:	429c      	cmp	r4, r3
 801331a:	d105      	bne.n	8013328 <std+0x54>
 801331c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013324:	f000 ba20 	b.w	8013768 <__retarget_lock_init_recursive>
 8013328:	bd10      	pop	{r4, pc}
 801332a:	bf00      	nop
 801332c:	080134c1 	.word	0x080134c1
 8013330:	080134e3 	.word	0x080134e3
 8013334:	0801351b 	.word	0x0801351b
 8013338:	0801353f 	.word	0x0801353f
 801333c:	20016368 	.word	0x20016368

08013340 <stdio_exit_handler>:
 8013340:	4a02      	ldr	r2, [pc, #8]	@ (801334c <stdio_exit_handler+0xc>)
 8013342:	4903      	ldr	r1, [pc, #12]	@ (8013350 <stdio_exit_handler+0x10>)
 8013344:	4803      	ldr	r0, [pc, #12]	@ (8013354 <stdio_exit_handler+0x14>)
 8013346:	f000 b869 	b.w	801341c <_fwalk_sglue>
 801334a:	bf00      	nop
 801334c:	20000034 	.word	0x20000034
 8013350:	0801409d 	.word	0x0801409d
 8013354:	20000044 	.word	0x20000044

08013358 <cleanup_stdio>:
 8013358:	6841      	ldr	r1, [r0, #4]
 801335a:	4b0c      	ldr	r3, [pc, #48]	@ (801338c <cleanup_stdio+0x34>)
 801335c:	4299      	cmp	r1, r3
 801335e:	b510      	push	{r4, lr}
 8013360:	4604      	mov	r4, r0
 8013362:	d001      	beq.n	8013368 <cleanup_stdio+0x10>
 8013364:	f000 fe9a 	bl	801409c <_fflush_r>
 8013368:	68a1      	ldr	r1, [r4, #8]
 801336a:	4b09      	ldr	r3, [pc, #36]	@ (8013390 <cleanup_stdio+0x38>)
 801336c:	4299      	cmp	r1, r3
 801336e:	d002      	beq.n	8013376 <cleanup_stdio+0x1e>
 8013370:	4620      	mov	r0, r4
 8013372:	f000 fe93 	bl	801409c <_fflush_r>
 8013376:	68e1      	ldr	r1, [r4, #12]
 8013378:	4b06      	ldr	r3, [pc, #24]	@ (8013394 <cleanup_stdio+0x3c>)
 801337a:	4299      	cmp	r1, r3
 801337c:	d004      	beq.n	8013388 <cleanup_stdio+0x30>
 801337e:	4620      	mov	r0, r4
 8013380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013384:	f000 be8a 	b.w	801409c <_fflush_r>
 8013388:	bd10      	pop	{r4, pc}
 801338a:	bf00      	nop
 801338c:	20016368 	.word	0x20016368
 8013390:	200163d0 	.word	0x200163d0
 8013394:	20016438 	.word	0x20016438

08013398 <global_stdio_init.part.0>:
 8013398:	b510      	push	{r4, lr}
 801339a:	4b0b      	ldr	r3, [pc, #44]	@ (80133c8 <global_stdio_init.part.0+0x30>)
 801339c:	4c0b      	ldr	r4, [pc, #44]	@ (80133cc <global_stdio_init.part.0+0x34>)
 801339e:	4a0c      	ldr	r2, [pc, #48]	@ (80133d0 <global_stdio_init.part.0+0x38>)
 80133a0:	601a      	str	r2, [r3, #0]
 80133a2:	4620      	mov	r0, r4
 80133a4:	2200      	movs	r2, #0
 80133a6:	2104      	movs	r1, #4
 80133a8:	f7ff ff94 	bl	80132d4 <std>
 80133ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80133b0:	2201      	movs	r2, #1
 80133b2:	2109      	movs	r1, #9
 80133b4:	f7ff ff8e 	bl	80132d4 <std>
 80133b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80133bc:	2202      	movs	r2, #2
 80133be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133c2:	2112      	movs	r1, #18
 80133c4:	f7ff bf86 	b.w	80132d4 <std>
 80133c8:	200164a0 	.word	0x200164a0
 80133cc:	20016368 	.word	0x20016368
 80133d0:	08013341 	.word	0x08013341

080133d4 <__sfp_lock_acquire>:
 80133d4:	4801      	ldr	r0, [pc, #4]	@ (80133dc <__sfp_lock_acquire+0x8>)
 80133d6:	f000 b9c8 	b.w	801376a <__retarget_lock_acquire_recursive>
 80133da:	bf00      	nop
 80133dc:	200164a9 	.word	0x200164a9

080133e0 <__sfp_lock_release>:
 80133e0:	4801      	ldr	r0, [pc, #4]	@ (80133e8 <__sfp_lock_release+0x8>)
 80133e2:	f000 b9c3 	b.w	801376c <__retarget_lock_release_recursive>
 80133e6:	bf00      	nop
 80133e8:	200164a9 	.word	0x200164a9

080133ec <__sinit>:
 80133ec:	b510      	push	{r4, lr}
 80133ee:	4604      	mov	r4, r0
 80133f0:	f7ff fff0 	bl	80133d4 <__sfp_lock_acquire>
 80133f4:	6a23      	ldr	r3, [r4, #32]
 80133f6:	b11b      	cbz	r3, 8013400 <__sinit+0x14>
 80133f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133fc:	f7ff bff0 	b.w	80133e0 <__sfp_lock_release>
 8013400:	4b04      	ldr	r3, [pc, #16]	@ (8013414 <__sinit+0x28>)
 8013402:	6223      	str	r3, [r4, #32]
 8013404:	4b04      	ldr	r3, [pc, #16]	@ (8013418 <__sinit+0x2c>)
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d1f5      	bne.n	80133f8 <__sinit+0xc>
 801340c:	f7ff ffc4 	bl	8013398 <global_stdio_init.part.0>
 8013410:	e7f2      	b.n	80133f8 <__sinit+0xc>
 8013412:	bf00      	nop
 8013414:	08013359 	.word	0x08013359
 8013418:	200164a0 	.word	0x200164a0

0801341c <_fwalk_sglue>:
 801341c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013420:	4607      	mov	r7, r0
 8013422:	4688      	mov	r8, r1
 8013424:	4614      	mov	r4, r2
 8013426:	2600      	movs	r6, #0
 8013428:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801342c:	f1b9 0901 	subs.w	r9, r9, #1
 8013430:	d505      	bpl.n	801343e <_fwalk_sglue+0x22>
 8013432:	6824      	ldr	r4, [r4, #0]
 8013434:	2c00      	cmp	r4, #0
 8013436:	d1f7      	bne.n	8013428 <_fwalk_sglue+0xc>
 8013438:	4630      	mov	r0, r6
 801343a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801343e:	89ab      	ldrh	r3, [r5, #12]
 8013440:	2b01      	cmp	r3, #1
 8013442:	d907      	bls.n	8013454 <_fwalk_sglue+0x38>
 8013444:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013448:	3301      	adds	r3, #1
 801344a:	d003      	beq.n	8013454 <_fwalk_sglue+0x38>
 801344c:	4629      	mov	r1, r5
 801344e:	4638      	mov	r0, r7
 8013450:	47c0      	blx	r8
 8013452:	4306      	orrs	r6, r0
 8013454:	3568      	adds	r5, #104	@ 0x68
 8013456:	e7e9      	b.n	801342c <_fwalk_sglue+0x10>

08013458 <sniprintf>:
 8013458:	b40c      	push	{r2, r3}
 801345a:	b530      	push	{r4, r5, lr}
 801345c:	4b17      	ldr	r3, [pc, #92]	@ (80134bc <sniprintf+0x64>)
 801345e:	1e0c      	subs	r4, r1, #0
 8013460:	681d      	ldr	r5, [r3, #0]
 8013462:	b09d      	sub	sp, #116	@ 0x74
 8013464:	da08      	bge.n	8013478 <sniprintf+0x20>
 8013466:	238b      	movs	r3, #139	@ 0x8b
 8013468:	602b      	str	r3, [r5, #0]
 801346a:	f04f 30ff 	mov.w	r0, #4294967295
 801346e:	b01d      	add	sp, #116	@ 0x74
 8013470:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013474:	b002      	add	sp, #8
 8013476:	4770      	bx	lr
 8013478:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801347c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013480:	bf14      	ite	ne
 8013482:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013486:	4623      	moveq	r3, r4
 8013488:	9304      	str	r3, [sp, #16]
 801348a:	9307      	str	r3, [sp, #28]
 801348c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013490:	9002      	str	r0, [sp, #8]
 8013492:	9006      	str	r0, [sp, #24]
 8013494:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013498:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801349a:	ab21      	add	r3, sp, #132	@ 0x84
 801349c:	a902      	add	r1, sp, #8
 801349e:	4628      	mov	r0, r5
 80134a0:	9301      	str	r3, [sp, #4]
 80134a2:	f000 faed 	bl	8013a80 <_svfiprintf_r>
 80134a6:	1c43      	adds	r3, r0, #1
 80134a8:	bfbc      	itt	lt
 80134aa:	238b      	movlt	r3, #139	@ 0x8b
 80134ac:	602b      	strlt	r3, [r5, #0]
 80134ae:	2c00      	cmp	r4, #0
 80134b0:	d0dd      	beq.n	801346e <sniprintf+0x16>
 80134b2:	9b02      	ldr	r3, [sp, #8]
 80134b4:	2200      	movs	r2, #0
 80134b6:	701a      	strb	r2, [r3, #0]
 80134b8:	e7d9      	b.n	801346e <sniprintf+0x16>
 80134ba:	bf00      	nop
 80134bc:	20000040 	.word	0x20000040

080134c0 <__sread>:
 80134c0:	b510      	push	{r4, lr}
 80134c2:	460c      	mov	r4, r1
 80134c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134c8:	f000 f900 	bl	80136cc <_read_r>
 80134cc:	2800      	cmp	r0, #0
 80134ce:	bfab      	itete	ge
 80134d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80134d2:	89a3      	ldrhlt	r3, [r4, #12]
 80134d4:	181b      	addge	r3, r3, r0
 80134d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80134da:	bfac      	ite	ge
 80134dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80134de:	81a3      	strhlt	r3, [r4, #12]
 80134e0:	bd10      	pop	{r4, pc}

080134e2 <__swrite>:
 80134e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134e6:	461f      	mov	r7, r3
 80134e8:	898b      	ldrh	r3, [r1, #12]
 80134ea:	05db      	lsls	r3, r3, #23
 80134ec:	4605      	mov	r5, r0
 80134ee:	460c      	mov	r4, r1
 80134f0:	4616      	mov	r6, r2
 80134f2:	d505      	bpl.n	8013500 <__swrite+0x1e>
 80134f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134f8:	2302      	movs	r3, #2
 80134fa:	2200      	movs	r2, #0
 80134fc:	f000 f8d4 	bl	80136a8 <_lseek_r>
 8013500:	89a3      	ldrh	r3, [r4, #12]
 8013502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013506:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801350a:	81a3      	strh	r3, [r4, #12]
 801350c:	4632      	mov	r2, r6
 801350e:	463b      	mov	r3, r7
 8013510:	4628      	mov	r0, r5
 8013512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013516:	f000 b8eb 	b.w	80136f0 <_write_r>

0801351a <__sseek>:
 801351a:	b510      	push	{r4, lr}
 801351c:	460c      	mov	r4, r1
 801351e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013522:	f000 f8c1 	bl	80136a8 <_lseek_r>
 8013526:	1c43      	adds	r3, r0, #1
 8013528:	89a3      	ldrh	r3, [r4, #12]
 801352a:	bf15      	itete	ne
 801352c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801352e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013532:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013536:	81a3      	strheq	r3, [r4, #12]
 8013538:	bf18      	it	ne
 801353a:	81a3      	strhne	r3, [r4, #12]
 801353c:	bd10      	pop	{r4, pc}

0801353e <__sclose>:
 801353e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013542:	f000 b8a1 	b.w	8013688 <_close_r>

08013546 <memmove>:
 8013546:	4288      	cmp	r0, r1
 8013548:	b510      	push	{r4, lr}
 801354a:	eb01 0402 	add.w	r4, r1, r2
 801354e:	d902      	bls.n	8013556 <memmove+0x10>
 8013550:	4284      	cmp	r4, r0
 8013552:	4623      	mov	r3, r4
 8013554:	d807      	bhi.n	8013566 <memmove+0x20>
 8013556:	1e43      	subs	r3, r0, #1
 8013558:	42a1      	cmp	r1, r4
 801355a:	d008      	beq.n	801356e <memmove+0x28>
 801355c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013560:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013564:	e7f8      	b.n	8013558 <memmove+0x12>
 8013566:	4402      	add	r2, r0
 8013568:	4601      	mov	r1, r0
 801356a:	428a      	cmp	r2, r1
 801356c:	d100      	bne.n	8013570 <memmove+0x2a>
 801356e:	bd10      	pop	{r4, pc}
 8013570:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013574:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013578:	e7f7      	b.n	801356a <memmove+0x24>

0801357a <memset>:
 801357a:	4402      	add	r2, r0
 801357c:	4603      	mov	r3, r0
 801357e:	4293      	cmp	r3, r2
 8013580:	d100      	bne.n	8013584 <memset+0xa>
 8013582:	4770      	bx	lr
 8013584:	f803 1b01 	strb.w	r1, [r3], #1
 8013588:	e7f9      	b.n	801357e <memset+0x4>

0801358a <strcat>:
 801358a:	b510      	push	{r4, lr}
 801358c:	4602      	mov	r2, r0
 801358e:	7814      	ldrb	r4, [r2, #0]
 8013590:	4613      	mov	r3, r2
 8013592:	3201      	adds	r2, #1
 8013594:	2c00      	cmp	r4, #0
 8013596:	d1fa      	bne.n	801358e <strcat+0x4>
 8013598:	3b01      	subs	r3, #1
 801359a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801359e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80135a2:	2a00      	cmp	r2, #0
 80135a4:	d1f9      	bne.n	801359a <strcat+0x10>
 80135a6:	bd10      	pop	{r4, pc}

080135a8 <strncpy>:
 80135a8:	b510      	push	{r4, lr}
 80135aa:	3901      	subs	r1, #1
 80135ac:	4603      	mov	r3, r0
 80135ae:	b132      	cbz	r2, 80135be <strncpy+0x16>
 80135b0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80135b4:	f803 4b01 	strb.w	r4, [r3], #1
 80135b8:	3a01      	subs	r2, #1
 80135ba:	2c00      	cmp	r4, #0
 80135bc:	d1f7      	bne.n	80135ae <strncpy+0x6>
 80135be:	441a      	add	r2, r3
 80135c0:	2100      	movs	r1, #0
 80135c2:	4293      	cmp	r3, r2
 80135c4:	d100      	bne.n	80135c8 <strncpy+0x20>
 80135c6:	bd10      	pop	{r4, pc}
 80135c8:	f803 1b01 	strb.w	r1, [r3], #1
 80135cc:	e7f9      	b.n	80135c2 <strncpy+0x1a>
	...

080135d0 <strtok>:
 80135d0:	4b16      	ldr	r3, [pc, #88]	@ (801362c <strtok+0x5c>)
 80135d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135d6:	681f      	ldr	r7, [r3, #0]
 80135d8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80135da:	4605      	mov	r5, r0
 80135dc:	460e      	mov	r6, r1
 80135de:	b9ec      	cbnz	r4, 801361c <strtok+0x4c>
 80135e0:	2050      	movs	r0, #80	@ 0x50
 80135e2:	f000 f93b 	bl	801385c <malloc>
 80135e6:	4602      	mov	r2, r0
 80135e8:	6478      	str	r0, [r7, #68]	@ 0x44
 80135ea:	b920      	cbnz	r0, 80135f6 <strtok+0x26>
 80135ec:	4b10      	ldr	r3, [pc, #64]	@ (8013630 <strtok+0x60>)
 80135ee:	4811      	ldr	r0, [pc, #68]	@ (8013634 <strtok+0x64>)
 80135f0:	215b      	movs	r1, #91	@ 0x5b
 80135f2:	f000 f8cb 	bl	801378c <__assert_func>
 80135f6:	e9c0 4400 	strd	r4, r4, [r0]
 80135fa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80135fe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8013602:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8013606:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801360a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801360e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8013612:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8013616:	6184      	str	r4, [r0, #24]
 8013618:	7704      	strb	r4, [r0, #28]
 801361a:	6244      	str	r4, [r0, #36]	@ 0x24
 801361c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801361e:	4631      	mov	r1, r6
 8013620:	4628      	mov	r0, r5
 8013622:	2301      	movs	r3, #1
 8013624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013628:	f000 b806 	b.w	8013638 <__strtok_r>
 801362c:	20000040 	.word	0x20000040
 8013630:	0802c728 	.word	0x0802c728
 8013634:	0802c73f 	.word	0x0802c73f

08013638 <__strtok_r>:
 8013638:	b5f0      	push	{r4, r5, r6, r7, lr}
 801363a:	4604      	mov	r4, r0
 801363c:	b908      	cbnz	r0, 8013642 <__strtok_r+0xa>
 801363e:	6814      	ldr	r4, [r2, #0]
 8013640:	b144      	cbz	r4, 8013654 <__strtok_r+0x1c>
 8013642:	4620      	mov	r0, r4
 8013644:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013648:	460f      	mov	r7, r1
 801364a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801364e:	b91e      	cbnz	r6, 8013658 <__strtok_r+0x20>
 8013650:	b965      	cbnz	r5, 801366c <__strtok_r+0x34>
 8013652:	6015      	str	r5, [r2, #0]
 8013654:	2000      	movs	r0, #0
 8013656:	e005      	b.n	8013664 <__strtok_r+0x2c>
 8013658:	42b5      	cmp	r5, r6
 801365a:	d1f6      	bne.n	801364a <__strtok_r+0x12>
 801365c:	2b00      	cmp	r3, #0
 801365e:	d1f0      	bne.n	8013642 <__strtok_r+0xa>
 8013660:	6014      	str	r4, [r2, #0]
 8013662:	7003      	strb	r3, [r0, #0]
 8013664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013666:	461c      	mov	r4, r3
 8013668:	e00c      	b.n	8013684 <__strtok_r+0x4c>
 801366a:	b915      	cbnz	r5, 8013672 <__strtok_r+0x3a>
 801366c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013670:	460e      	mov	r6, r1
 8013672:	f816 5b01 	ldrb.w	r5, [r6], #1
 8013676:	42ab      	cmp	r3, r5
 8013678:	d1f7      	bne.n	801366a <__strtok_r+0x32>
 801367a:	2b00      	cmp	r3, #0
 801367c:	d0f3      	beq.n	8013666 <__strtok_r+0x2e>
 801367e:	2300      	movs	r3, #0
 8013680:	f804 3c01 	strb.w	r3, [r4, #-1]
 8013684:	6014      	str	r4, [r2, #0]
 8013686:	e7ed      	b.n	8013664 <__strtok_r+0x2c>

08013688 <_close_r>:
 8013688:	b538      	push	{r3, r4, r5, lr}
 801368a:	4d06      	ldr	r5, [pc, #24]	@ (80136a4 <_close_r+0x1c>)
 801368c:	2300      	movs	r3, #0
 801368e:	4604      	mov	r4, r0
 8013690:	4608      	mov	r0, r1
 8013692:	602b      	str	r3, [r5, #0]
 8013694:	f7ee ff80 	bl	8002598 <_close>
 8013698:	1c43      	adds	r3, r0, #1
 801369a:	d102      	bne.n	80136a2 <_close_r+0x1a>
 801369c:	682b      	ldr	r3, [r5, #0]
 801369e:	b103      	cbz	r3, 80136a2 <_close_r+0x1a>
 80136a0:	6023      	str	r3, [r4, #0]
 80136a2:	bd38      	pop	{r3, r4, r5, pc}
 80136a4:	200164a4 	.word	0x200164a4

080136a8 <_lseek_r>:
 80136a8:	b538      	push	{r3, r4, r5, lr}
 80136aa:	4d07      	ldr	r5, [pc, #28]	@ (80136c8 <_lseek_r+0x20>)
 80136ac:	4604      	mov	r4, r0
 80136ae:	4608      	mov	r0, r1
 80136b0:	4611      	mov	r1, r2
 80136b2:	2200      	movs	r2, #0
 80136b4:	602a      	str	r2, [r5, #0]
 80136b6:	461a      	mov	r2, r3
 80136b8:	f7ee ff95 	bl	80025e6 <_lseek>
 80136bc:	1c43      	adds	r3, r0, #1
 80136be:	d102      	bne.n	80136c6 <_lseek_r+0x1e>
 80136c0:	682b      	ldr	r3, [r5, #0]
 80136c2:	b103      	cbz	r3, 80136c6 <_lseek_r+0x1e>
 80136c4:	6023      	str	r3, [r4, #0]
 80136c6:	bd38      	pop	{r3, r4, r5, pc}
 80136c8:	200164a4 	.word	0x200164a4

080136cc <_read_r>:
 80136cc:	b538      	push	{r3, r4, r5, lr}
 80136ce:	4d07      	ldr	r5, [pc, #28]	@ (80136ec <_read_r+0x20>)
 80136d0:	4604      	mov	r4, r0
 80136d2:	4608      	mov	r0, r1
 80136d4:	4611      	mov	r1, r2
 80136d6:	2200      	movs	r2, #0
 80136d8:	602a      	str	r2, [r5, #0]
 80136da:	461a      	mov	r2, r3
 80136dc:	f7ee ff23 	bl	8002526 <_read>
 80136e0:	1c43      	adds	r3, r0, #1
 80136e2:	d102      	bne.n	80136ea <_read_r+0x1e>
 80136e4:	682b      	ldr	r3, [r5, #0]
 80136e6:	b103      	cbz	r3, 80136ea <_read_r+0x1e>
 80136e8:	6023      	str	r3, [r4, #0]
 80136ea:	bd38      	pop	{r3, r4, r5, pc}
 80136ec:	200164a4 	.word	0x200164a4

080136f0 <_write_r>:
 80136f0:	b538      	push	{r3, r4, r5, lr}
 80136f2:	4d07      	ldr	r5, [pc, #28]	@ (8013710 <_write_r+0x20>)
 80136f4:	4604      	mov	r4, r0
 80136f6:	4608      	mov	r0, r1
 80136f8:	4611      	mov	r1, r2
 80136fa:	2200      	movs	r2, #0
 80136fc:	602a      	str	r2, [r5, #0]
 80136fe:	461a      	mov	r2, r3
 8013700:	f7ee ff2e 	bl	8002560 <_write>
 8013704:	1c43      	adds	r3, r0, #1
 8013706:	d102      	bne.n	801370e <_write_r+0x1e>
 8013708:	682b      	ldr	r3, [r5, #0]
 801370a:	b103      	cbz	r3, 801370e <_write_r+0x1e>
 801370c:	6023      	str	r3, [r4, #0]
 801370e:	bd38      	pop	{r3, r4, r5, pc}
 8013710:	200164a4 	.word	0x200164a4

08013714 <__errno>:
 8013714:	4b01      	ldr	r3, [pc, #4]	@ (801371c <__errno+0x8>)
 8013716:	6818      	ldr	r0, [r3, #0]
 8013718:	4770      	bx	lr
 801371a:	bf00      	nop
 801371c:	20000040 	.word	0x20000040

08013720 <__libc_init_array>:
 8013720:	b570      	push	{r4, r5, r6, lr}
 8013722:	4d0d      	ldr	r5, [pc, #52]	@ (8013758 <__libc_init_array+0x38>)
 8013724:	4c0d      	ldr	r4, [pc, #52]	@ (801375c <__libc_init_array+0x3c>)
 8013726:	1b64      	subs	r4, r4, r5
 8013728:	10a4      	asrs	r4, r4, #2
 801372a:	2600      	movs	r6, #0
 801372c:	42a6      	cmp	r6, r4
 801372e:	d109      	bne.n	8013744 <__libc_init_array+0x24>
 8013730:	4d0b      	ldr	r5, [pc, #44]	@ (8013760 <__libc_init_array+0x40>)
 8013732:	4c0c      	ldr	r4, [pc, #48]	@ (8013764 <__libc_init_array+0x44>)
 8013734:	f000 fff8 	bl	8014728 <_init>
 8013738:	1b64      	subs	r4, r4, r5
 801373a:	10a4      	asrs	r4, r4, #2
 801373c:	2600      	movs	r6, #0
 801373e:	42a6      	cmp	r6, r4
 8013740:	d105      	bne.n	801374e <__libc_init_array+0x2e>
 8013742:	bd70      	pop	{r4, r5, r6, pc}
 8013744:	f855 3b04 	ldr.w	r3, [r5], #4
 8013748:	4798      	blx	r3
 801374a:	3601      	adds	r6, #1
 801374c:	e7ee      	b.n	801372c <__libc_init_array+0xc>
 801374e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013752:	4798      	blx	r3
 8013754:	3601      	adds	r6, #1
 8013756:	e7f2      	b.n	801373e <__libc_init_array+0x1e>
 8013758:	0802c810 	.word	0x0802c810
 801375c:	0802c810 	.word	0x0802c810
 8013760:	0802c810 	.word	0x0802c810
 8013764:	0802c814 	.word	0x0802c814

08013768 <__retarget_lock_init_recursive>:
 8013768:	4770      	bx	lr

0801376a <__retarget_lock_acquire_recursive>:
 801376a:	4770      	bx	lr

0801376c <__retarget_lock_release_recursive>:
 801376c:	4770      	bx	lr

0801376e <memcpy>:
 801376e:	440a      	add	r2, r1
 8013770:	4291      	cmp	r1, r2
 8013772:	f100 33ff 	add.w	r3, r0, #4294967295
 8013776:	d100      	bne.n	801377a <memcpy+0xc>
 8013778:	4770      	bx	lr
 801377a:	b510      	push	{r4, lr}
 801377c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013780:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013784:	4291      	cmp	r1, r2
 8013786:	d1f9      	bne.n	801377c <memcpy+0xe>
 8013788:	bd10      	pop	{r4, pc}
	...

0801378c <__assert_func>:
 801378c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801378e:	4614      	mov	r4, r2
 8013790:	461a      	mov	r2, r3
 8013792:	4b09      	ldr	r3, [pc, #36]	@ (80137b8 <__assert_func+0x2c>)
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	4605      	mov	r5, r0
 8013798:	68d8      	ldr	r0, [r3, #12]
 801379a:	b954      	cbnz	r4, 80137b2 <__assert_func+0x26>
 801379c:	4b07      	ldr	r3, [pc, #28]	@ (80137bc <__assert_func+0x30>)
 801379e:	461c      	mov	r4, r3
 80137a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80137a4:	9100      	str	r1, [sp, #0]
 80137a6:	462b      	mov	r3, r5
 80137a8:	4905      	ldr	r1, [pc, #20]	@ (80137c0 <__assert_func+0x34>)
 80137aa:	f000 fc9f 	bl	80140ec <fiprintf>
 80137ae:	f000 fcbf 	bl	8014130 <abort>
 80137b2:	4b04      	ldr	r3, [pc, #16]	@ (80137c4 <__assert_func+0x38>)
 80137b4:	e7f4      	b.n	80137a0 <__assert_func+0x14>
 80137b6:	bf00      	nop
 80137b8:	20000040 	.word	0x20000040
 80137bc:	0802c7d4 	.word	0x0802c7d4
 80137c0:	0802c7a6 	.word	0x0802c7a6
 80137c4:	0802c799 	.word	0x0802c799

080137c8 <_free_r>:
 80137c8:	b538      	push	{r3, r4, r5, lr}
 80137ca:	4605      	mov	r5, r0
 80137cc:	2900      	cmp	r1, #0
 80137ce:	d041      	beq.n	8013854 <_free_r+0x8c>
 80137d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80137d4:	1f0c      	subs	r4, r1, #4
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	bfb8      	it	lt
 80137da:	18e4      	addlt	r4, r4, r3
 80137dc:	f000 f8e8 	bl	80139b0 <__malloc_lock>
 80137e0:	4a1d      	ldr	r2, [pc, #116]	@ (8013858 <_free_r+0x90>)
 80137e2:	6813      	ldr	r3, [r2, #0]
 80137e4:	b933      	cbnz	r3, 80137f4 <_free_r+0x2c>
 80137e6:	6063      	str	r3, [r4, #4]
 80137e8:	6014      	str	r4, [r2, #0]
 80137ea:	4628      	mov	r0, r5
 80137ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80137f0:	f000 b8e4 	b.w	80139bc <__malloc_unlock>
 80137f4:	42a3      	cmp	r3, r4
 80137f6:	d908      	bls.n	801380a <_free_r+0x42>
 80137f8:	6820      	ldr	r0, [r4, #0]
 80137fa:	1821      	adds	r1, r4, r0
 80137fc:	428b      	cmp	r3, r1
 80137fe:	bf01      	itttt	eq
 8013800:	6819      	ldreq	r1, [r3, #0]
 8013802:	685b      	ldreq	r3, [r3, #4]
 8013804:	1809      	addeq	r1, r1, r0
 8013806:	6021      	streq	r1, [r4, #0]
 8013808:	e7ed      	b.n	80137e6 <_free_r+0x1e>
 801380a:	461a      	mov	r2, r3
 801380c:	685b      	ldr	r3, [r3, #4]
 801380e:	b10b      	cbz	r3, 8013814 <_free_r+0x4c>
 8013810:	42a3      	cmp	r3, r4
 8013812:	d9fa      	bls.n	801380a <_free_r+0x42>
 8013814:	6811      	ldr	r1, [r2, #0]
 8013816:	1850      	adds	r0, r2, r1
 8013818:	42a0      	cmp	r0, r4
 801381a:	d10b      	bne.n	8013834 <_free_r+0x6c>
 801381c:	6820      	ldr	r0, [r4, #0]
 801381e:	4401      	add	r1, r0
 8013820:	1850      	adds	r0, r2, r1
 8013822:	4283      	cmp	r3, r0
 8013824:	6011      	str	r1, [r2, #0]
 8013826:	d1e0      	bne.n	80137ea <_free_r+0x22>
 8013828:	6818      	ldr	r0, [r3, #0]
 801382a:	685b      	ldr	r3, [r3, #4]
 801382c:	6053      	str	r3, [r2, #4]
 801382e:	4408      	add	r0, r1
 8013830:	6010      	str	r0, [r2, #0]
 8013832:	e7da      	b.n	80137ea <_free_r+0x22>
 8013834:	d902      	bls.n	801383c <_free_r+0x74>
 8013836:	230c      	movs	r3, #12
 8013838:	602b      	str	r3, [r5, #0]
 801383a:	e7d6      	b.n	80137ea <_free_r+0x22>
 801383c:	6820      	ldr	r0, [r4, #0]
 801383e:	1821      	adds	r1, r4, r0
 8013840:	428b      	cmp	r3, r1
 8013842:	bf04      	itt	eq
 8013844:	6819      	ldreq	r1, [r3, #0]
 8013846:	685b      	ldreq	r3, [r3, #4]
 8013848:	6063      	str	r3, [r4, #4]
 801384a:	bf04      	itt	eq
 801384c:	1809      	addeq	r1, r1, r0
 801384e:	6021      	streq	r1, [r4, #0]
 8013850:	6054      	str	r4, [r2, #4]
 8013852:	e7ca      	b.n	80137ea <_free_r+0x22>
 8013854:	bd38      	pop	{r3, r4, r5, pc}
 8013856:	bf00      	nop
 8013858:	200164b0 	.word	0x200164b0

0801385c <malloc>:
 801385c:	4b02      	ldr	r3, [pc, #8]	@ (8013868 <malloc+0xc>)
 801385e:	4601      	mov	r1, r0
 8013860:	6818      	ldr	r0, [r3, #0]
 8013862:	f000 b825 	b.w	80138b0 <_malloc_r>
 8013866:	bf00      	nop
 8013868:	20000040 	.word	0x20000040

0801386c <sbrk_aligned>:
 801386c:	b570      	push	{r4, r5, r6, lr}
 801386e:	4e0f      	ldr	r6, [pc, #60]	@ (80138ac <sbrk_aligned+0x40>)
 8013870:	460c      	mov	r4, r1
 8013872:	6831      	ldr	r1, [r6, #0]
 8013874:	4605      	mov	r5, r0
 8013876:	b911      	cbnz	r1, 801387e <sbrk_aligned+0x12>
 8013878:	f000 fc4a 	bl	8014110 <_sbrk_r>
 801387c:	6030      	str	r0, [r6, #0]
 801387e:	4621      	mov	r1, r4
 8013880:	4628      	mov	r0, r5
 8013882:	f000 fc45 	bl	8014110 <_sbrk_r>
 8013886:	1c43      	adds	r3, r0, #1
 8013888:	d103      	bne.n	8013892 <sbrk_aligned+0x26>
 801388a:	f04f 34ff 	mov.w	r4, #4294967295
 801388e:	4620      	mov	r0, r4
 8013890:	bd70      	pop	{r4, r5, r6, pc}
 8013892:	1cc4      	adds	r4, r0, #3
 8013894:	f024 0403 	bic.w	r4, r4, #3
 8013898:	42a0      	cmp	r0, r4
 801389a:	d0f8      	beq.n	801388e <sbrk_aligned+0x22>
 801389c:	1a21      	subs	r1, r4, r0
 801389e:	4628      	mov	r0, r5
 80138a0:	f000 fc36 	bl	8014110 <_sbrk_r>
 80138a4:	3001      	adds	r0, #1
 80138a6:	d1f2      	bne.n	801388e <sbrk_aligned+0x22>
 80138a8:	e7ef      	b.n	801388a <sbrk_aligned+0x1e>
 80138aa:	bf00      	nop
 80138ac:	200164ac 	.word	0x200164ac

080138b0 <_malloc_r>:
 80138b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138b4:	1ccd      	adds	r5, r1, #3
 80138b6:	f025 0503 	bic.w	r5, r5, #3
 80138ba:	3508      	adds	r5, #8
 80138bc:	2d0c      	cmp	r5, #12
 80138be:	bf38      	it	cc
 80138c0:	250c      	movcc	r5, #12
 80138c2:	2d00      	cmp	r5, #0
 80138c4:	4606      	mov	r6, r0
 80138c6:	db01      	blt.n	80138cc <_malloc_r+0x1c>
 80138c8:	42a9      	cmp	r1, r5
 80138ca:	d904      	bls.n	80138d6 <_malloc_r+0x26>
 80138cc:	230c      	movs	r3, #12
 80138ce:	6033      	str	r3, [r6, #0]
 80138d0:	2000      	movs	r0, #0
 80138d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80139ac <_malloc_r+0xfc>
 80138da:	f000 f869 	bl	80139b0 <__malloc_lock>
 80138de:	f8d8 3000 	ldr.w	r3, [r8]
 80138e2:	461c      	mov	r4, r3
 80138e4:	bb44      	cbnz	r4, 8013938 <_malloc_r+0x88>
 80138e6:	4629      	mov	r1, r5
 80138e8:	4630      	mov	r0, r6
 80138ea:	f7ff ffbf 	bl	801386c <sbrk_aligned>
 80138ee:	1c43      	adds	r3, r0, #1
 80138f0:	4604      	mov	r4, r0
 80138f2:	d158      	bne.n	80139a6 <_malloc_r+0xf6>
 80138f4:	f8d8 4000 	ldr.w	r4, [r8]
 80138f8:	4627      	mov	r7, r4
 80138fa:	2f00      	cmp	r7, #0
 80138fc:	d143      	bne.n	8013986 <_malloc_r+0xd6>
 80138fe:	2c00      	cmp	r4, #0
 8013900:	d04b      	beq.n	801399a <_malloc_r+0xea>
 8013902:	6823      	ldr	r3, [r4, #0]
 8013904:	4639      	mov	r1, r7
 8013906:	4630      	mov	r0, r6
 8013908:	eb04 0903 	add.w	r9, r4, r3
 801390c:	f000 fc00 	bl	8014110 <_sbrk_r>
 8013910:	4581      	cmp	r9, r0
 8013912:	d142      	bne.n	801399a <_malloc_r+0xea>
 8013914:	6821      	ldr	r1, [r4, #0]
 8013916:	1a6d      	subs	r5, r5, r1
 8013918:	4629      	mov	r1, r5
 801391a:	4630      	mov	r0, r6
 801391c:	f7ff ffa6 	bl	801386c <sbrk_aligned>
 8013920:	3001      	adds	r0, #1
 8013922:	d03a      	beq.n	801399a <_malloc_r+0xea>
 8013924:	6823      	ldr	r3, [r4, #0]
 8013926:	442b      	add	r3, r5
 8013928:	6023      	str	r3, [r4, #0]
 801392a:	f8d8 3000 	ldr.w	r3, [r8]
 801392e:	685a      	ldr	r2, [r3, #4]
 8013930:	bb62      	cbnz	r2, 801398c <_malloc_r+0xdc>
 8013932:	f8c8 7000 	str.w	r7, [r8]
 8013936:	e00f      	b.n	8013958 <_malloc_r+0xa8>
 8013938:	6822      	ldr	r2, [r4, #0]
 801393a:	1b52      	subs	r2, r2, r5
 801393c:	d420      	bmi.n	8013980 <_malloc_r+0xd0>
 801393e:	2a0b      	cmp	r2, #11
 8013940:	d917      	bls.n	8013972 <_malloc_r+0xc2>
 8013942:	1961      	adds	r1, r4, r5
 8013944:	42a3      	cmp	r3, r4
 8013946:	6025      	str	r5, [r4, #0]
 8013948:	bf18      	it	ne
 801394a:	6059      	strne	r1, [r3, #4]
 801394c:	6863      	ldr	r3, [r4, #4]
 801394e:	bf08      	it	eq
 8013950:	f8c8 1000 	streq.w	r1, [r8]
 8013954:	5162      	str	r2, [r4, r5]
 8013956:	604b      	str	r3, [r1, #4]
 8013958:	4630      	mov	r0, r6
 801395a:	f000 f82f 	bl	80139bc <__malloc_unlock>
 801395e:	f104 000b 	add.w	r0, r4, #11
 8013962:	1d23      	adds	r3, r4, #4
 8013964:	f020 0007 	bic.w	r0, r0, #7
 8013968:	1ac2      	subs	r2, r0, r3
 801396a:	bf1c      	itt	ne
 801396c:	1a1b      	subne	r3, r3, r0
 801396e:	50a3      	strne	r3, [r4, r2]
 8013970:	e7af      	b.n	80138d2 <_malloc_r+0x22>
 8013972:	6862      	ldr	r2, [r4, #4]
 8013974:	42a3      	cmp	r3, r4
 8013976:	bf0c      	ite	eq
 8013978:	f8c8 2000 	streq.w	r2, [r8]
 801397c:	605a      	strne	r2, [r3, #4]
 801397e:	e7eb      	b.n	8013958 <_malloc_r+0xa8>
 8013980:	4623      	mov	r3, r4
 8013982:	6864      	ldr	r4, [r4, #4]
 8013984:	e7ae      	b.n	80138e4 <_malloc_r+0x34>
 8013986:	463c      	mov	r4, r7
 8013988:	687f      	ldr	r7, [r7, #4]
 801398a:	e7b6      	b.n	80138fa <_malloc_r+0x4a>
 801398c:	461a      	mov	r2, r3
 801398e:	685b      	ldr	r3, [r3, #4]
 8013990:	42a3      	cmp	r3, r4
 8013992:	d1fb      	bne.n	801398c <_malloc_r+0xdc>
 8013994:	2300      	movs	r3, #0
 8013996:	6053      	str	r3, [r2, #4]
 8013998:	e7de      	b.n	8013958 <_malloc_r+0xa8>
 801399a:	230c      	movs	r3, #12
 801399c:	6033      	str	r3, [r6, #0]
 801399e:	4630      	mov	r0, r6
 80139a0:	f000 f80c 	bl	80139bc <__malloc_unlock>
 80139a4:	e794      	b.n	80138d0 <_malloc_r+0x20>
 80139a6:	6005      	str	r5, [r0, #0]
 80139a8:	e7d6      	b.n	8013958 <_malloc_r+0xa8>
 80139aa:	bf00      	nop
 80139ac:	200164b0 	.word	0x200164b0

080139b0 <__malloc_lock>:
 80139b0:	4801      	ldr	r0, [pc, #4]	@ (80139b8 <__malloc_lock+0x8>)
 80139b2:	f7ff beda 	b.w	801376a <__retarget_lock_acquire_recursive>
 80139b6:	bf00      	nop
 80139b8:	200164a8 	.word	0x200164a8

080139bc <__malloc_unlock>:
 80139bc:	4801      	ldr	r0, [pc, #4]	@ (80139c4 <__malloc_unlock+0x8>)
 80139be:	f7ff bed5 	b.w	801376c <__retarget_lock_release_recursive>
 80139c2:	bf00      	nop
 80139c4:	200164a8 	.word	0x200164a8

080139c8 <__ssputs_r>:
 80139c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139cc:	688e      	ldr	r6, [r1, #8]
 80139ce:	461f      	mov	r7, r3
 80139d0:	42be      	cmp	r6, r7
 80139d2:	680b      	ldr	r3, [r1, #0]
 80139d4:	4682      	mov	sl, r0
 80139d6:	460c      	mov	r4, r1
 80139d8:	4690      	mov	r8, r2
 80139da:	d82d      	bhi.n	8013a38 <__ssputs_r+0x70>
 80139dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80139e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80139e4:	d026      	beq.n	8013a34 <__ssputs_r+0x6c>
 80139e6:	6965      	ldr	r5, [r4, #20]
 80139e8:	6909      	ldr	r1, [r1, #16]
 80139ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80139ee:	eba3 0901 	sub.w	r9, r3, r1
 80139f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80139f6:	1c7b      	adds	r3, r7, #1
 80139f8:	444b      	add	r3, r9
 80139fa:	106d      	asrs	r5, r5, #1
 80139fc:	429d      	cmp	r5, r3
 80139fe:	bf38      	it	cc
 8013a00:	461d      	movcc	r5, r3
 8013a02:	0553      	lsls	r3, r2, #21
 8013a04:	d527      	bpl.n	8013a56 <__ssputs_r+0x8e>
 8013a06:	4629      	mov	r1, r5
 8013a08:	f7ff ff52 	bl	80138b0 <_malloc_r>
 8013a0c:	4606      	mov	r6, r0
 8013a0e:	b360      	cbz	r0, 8013a6a <__ssputs_r+0xa2>
 8013a10:	6921      	ldr	r1, [r4, #16]
 8013a12:	464a      	mov	r2, r9
 8013a14:	f7ff feab 	bl	801376e <memcpy>
 8013a18:	89a3      	ldrh	r3, [r4, #12]
 8013a1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013a1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013a22:	81a3      	strh	r3, [r4, #12]
 8013a24:	6126      	str	r6, [r4, #16]
 8013a26:	6165      	str	r5, [r4, #20]
 8013a28:	444e      	add	r6, r9
 8013a2a:	eba5 0509 	sub.w	r5, r5, r9
 8013a2e:	6026      	str	r6, [r4, #0]
 8013a30:	60a5      	str	r5, [r4, #8]
 8013a32:	463e      	mov	r6, r7
 8013a34:	42be      	cmp	r6, r7
 8013a36:	d900      	bls.n	8013a3a <__ssputs_r+0x72>
 8013a38:	463e      	mov	r6, r7
 8013a3a:	6820      	ldr	r0, [r4, #0]
 8013a3c:	4632      	mov	r2, r6
 8013a3e:	4641      	mov	r1, r8
 8013a40:	f7ff fd81 	bl	8013546 <memmove>
 8013a44:	68a3      	ldr	r3, [r4, #8]
 8013a46:	1b9b      	subs	r3, r3, r6
 8013a48:	60a3      	str	r3, [r4, #8]
 8013a4a:	6823      	ldr	r3, [r4, #0]
 8013a4c:	4433      	add	r3, r6
 8013a4e:	6023      	str	r3, [r4, #0]
 8013a50:	2000      	movs	r0, #0
 8013a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a56:	462a      	mov	r2, r5
 8013a58:	f000 fb71 	bl	801413e <_realloc_r>
 8013a5c:	4606      	mov	r6, r0
 8013a5e:	2800      	cmp	r0, #0
 8013a60:	d1e0      	bne.n	8013a24 <__ssputs_r+0x5c>
 8013a62:	6921      	ldr	r1, [r4, #16]
 8013a64:	4650      	mov	r0, sl
 8013a66:	f7ff feaf 	bl	80137c8 <_free_r>
 8013a6a:	230c      	movs	r3, #12
 8013a6c:	f8ca 3000 	str.w	r3, [sl]
 8013a70:	89a3      	ldrh	r3, [r4, #12]
 8013a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013a76:	81a3      	strh	r3, [r4, #12]
 8013a78:	f04f 30ff 	mov.w	r0, #4294967295
 8013a7c:	e7e9      	b.n	8013a52 <__ssputs_r+0x8a>
	...

08013a80 <_svfiprintf_r>:
 8013a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a84:	4698      	mov	r8, r3
 8013a86:	898b      	ldrh	r3, [r1, #12]
 8013a88:	061b      	lsls	r3, r3, #24
 8013a8a:	b09d      	sub	sp, #116	@ 0x74
 8013a8c:	4607      	mov	r7, r0
 8013a8e:	460d      	mov	r5, r1
 8013a90:	4614      	mov	r4, r2
 8013a92:	d510      	bpl.n	8013ab6 <_svfiprintf_r+0x36>
 8013a94:	690b      	ldr	r3, [r1, #16]
 8013a96:	b973      	cbnz	r3, 8013ab6 <_svfiprintf_r+0x36>
 8013a98:	2140      	movs	r1, #64	@ 0x40
 8013a9a:	f7ff ff09 	bl	80138b0 <_malloc_r>
 8013a9e:	6028      	str	r0, [r5, #0]
 8013aa0:	6128      	str	r0, [r5, #16]
 8013aa2:	b930      	cbnz	r0, 8013ab2 <_svfiprintf_r+0x32>
 8013aa4:	230c      	movs	r3, #12
 8013aa6:	603b      	str	r3, [r7, #0]
 8013aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8013aac:	b01d      	add	sp, #116	@ 0x74
 8013aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ab2:	2340      	movs	r3, #64	@ 0x40
 8013ab4:	616b      	str	r3, [r5, #20]
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	9309      	str	r3, [sp, #36]	@ 0x24
 8013aba:	2320      	movs	r3, #32
 8013abc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013ac0:	f8cd 800c 	str.w	r8, [sp, #12]
 8013ac4:	2330      	movs	r3, #48	@ 0x30
 8013ac6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013c64 <_svfiprintf_r+0x1e4>
 8013aca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013ace:	f04f 0901 	mov.w	r9, #1
 8013ad2:	4623      	mov	r3, r4
 8013ad4:	469a      	mov	sl, r3
 8013ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ada:	b10a      	cbz	r2, 8013ae0 <_svfiprintf_r+0x60>
 8013adc:	2a25      	cmp	r2, #37	@ 0x25
 8013ade:	d1f9      	bne.n	8013ad4 <_svfiprintf_r+0x54>
 8013ae0:	ebba 0b04 	subs.w	fp, sl, r4
 8013ae4:	d00b      	beq.n	8013afe <_svfiprintf_r+0x7e>
 8013ae6:	465b      	mov	r3, fp
 8013ae8:	4622      	mov	r2, r4
 8013aea:	4629      	mov	r1, r5
 8013aec:	4638      	mov	r0, r7
 8013aee:	f7ff ff6b 	bl	80139c8 <__ssputs_r>
 8013af2:	3001      	adds	r0, #1
 8013af4:	f000 80a7 	beq.w	8013c46 <_svfiprintf_r+0x1c6>
 8013af8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013afa:	445a      	add	r2, fp
 8013afc:	9209      	str	r2, [sp, #36]	@ 0x24
 8013afe:	f89a 3000 	ldrb.w	r3, [sl]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	f000 809f 	beq.w	8013c46 <_svfiprintf_r+0x1c6>
 8013b08:	2300      	movs	r3, #0
 8013b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8013b0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b12:	f10a 0a01 	add.w	sl, sl, #1
 8013b16:	9304      	str	r3, [sp, #16]
 8013b18:	9307      	str	r3, [sp, #28]
 8013b1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013b1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8013b20:	4654      	mov	r4, sl
 8013b22:	2205      	movs	r2, #5
 8013b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b28:	484e      	ldr	r0, [pc, #312]	@ (8013c64 <_svfiprintf_r+0x1e4>)
 8013b2a:	f7ec fbd1 	bl	80002d0 <memchr>
 8013b2e:	9a04      	ldr	r2, [sp, #16]
 8013b30:	b9d8      	cbnz	r0, 8013b6a <_svfiprintf_r+0xea>
 8013b32:	06d0      	lsls	r0, r2, #27
 8013b34:	bf44      	itt	mi
 8013b36:	2320      	movmi	r3, #32
 8013b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013b3c:	0711      	lsls	r1, r2, #28
 8013b3e:	bf44      	itt	mi
 8013b40:	232b      	movmi	r3, #43	@ 0x2b
 8013b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013b46:	f89a 3000 	ldrb.w	r3, [sl]
 8013b4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8013b4c:	d015      	beq.n	8013b7a <_svfiprintf_r+0xfa>
 8013b4e:	9a07      	ldr	r2, [sp, #28]
 8013b50:	4654      	mov	r4, sl
 8013b52:	2000      	movs	r0, #0
 8013b54:	f04f 0c0a 	mov.w	ip, #10
 8013b58:	4621      	mov	r1, r4
 8013b5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013b5e:	3b30      	subs	r3, #48	@ 0x30
 8013b60:	2b09      	cmp	r3, #9
 8013b62:	d94b      	bls.n	8013bfc <_svfiprintf_r+0x17c>
 8013b64:	b1b0      	cbz	r0, 8013b94 <_svfiprintf_r+0x114>
 8013b66:	9207      	str	r2, [sp, #28]
 8013b68:	e014      	b.n	8013b94 <_svfiprintf_r+0x114>
 8013b6a:	eba0 0308 	sub.w	r3, r0, r8
 8013b6e:	fa09 f303 	lsl.w	r3, r9, r3
 8013b72:	4313      	orrs	r3, r2
 8013b74:	9304      	str	r3, [sp, #16]
 8013b76:	46a2      	mov	sl, r4
 8013b78:	e7d2      	b.n	8013b20 <_svfiprintf_r+0xa0>
 8013b7a:	9b03      	ldr	r3, [sp, #12]
 8013b7c:	1d19      	adds	r1, r3, #4
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	9103      	str	r1, [sp, #12]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	bfbb      	ittet	lt
 8013b86:	425b      	neglt	r3, r3
 8013b88:	f042 0202 	orrlt.w	r2, r2, #2
 8013b8c:	9307      	strge	r3, [sp, #28]
 8013b8e:	9307      	strlt	r3, [sp, #28]
 8013b90:	bfb8      	it	lt
 8013b92:	9204      	strlt	r2, [sp, #16]
 8013b94:	7823      	ldrb	r3, [r4, #0]
 8013b96:	2b2e      	cmp	r3, #46	@ 0x2e
 8013b98:	d10a      	bne.n	8013bb0 <_svfiprintf_r+0x130>
 8013b9a:	7863      	ldrb	r3, [r4, #1]
 8013b9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8013b9e:	d132      	bne.n	8013c06 <_svfiprintf_r+0x186>
 8013ba0:	9b03      	ldr	r3, [sp, #12]
 8013ba2:	1d1a      	adds	r2, r3, #4
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	9203      	str	r2, [sp, #12]
 8013ba8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013bac:	3402      	adds	r4, #2
 8013bae:	9305      	str	r3, [sp, #20]
 8013bb0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013c74 <_svfiprintf_r+0x1f4>
 8013bb4:	7821      	ldrb	r1, [r4, #0]
 8013bb6:	2203      	movs	r2, #3
 8013bb8:	4650      	mov	r0, sl
 8013bba:	f7ec fb89 	bl	80002d0 <memchr>
 8013bbe:	b138      	cbz	r0, 8013bd0 <_svfiprintf_r+0x150>
 8013bc0:	9b04      	ldr	r3, [sp, #16]
 8013bc2:	eba0 000a 	sub.w	r0, r0, sl
 8013bc6:	2240      	movs	r2, #64	@ 0x40
 8013bc8:	4082      	lsls	r2, r0
 8013bca:	4313      	orrs	r3, r2
 8013bcc:	3401      	adds	r4, #1
 8013bce:	9304      	str	r3, [sp, #16]
 8013bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bd4:	4824      	ldr	r0, [pc, #144]	@ (8013c68 <_svfiprintf_r+0x1e8>)
 8013bd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013bda:	2206      	movs	r2, #6
 8013bdc:	f7ec fb78 	bl	80002d0 <memchr>
 8013be0:	2800      	cmp	r0, #0
 8013be2:	d036      	beq.n	8013c52 <_svfiprintf_r+0x1d2>
 8013be4:	4b21      	ldr	r3, [pc, #132]	@ (8013c6c <_svfiprintf_r+0x1ec>)
 8013be6:	bb1b      	cbnz	r3, 8013c30 <_svfiprintf_r+0x1b0>
 8013be8:	9b03      	ldr	r3, [sp, #12]
 8013bea:	3307      	adds	r3, #7
 8013bec:	f023 0307 	bic.w	r3, r3, #7
 8013bf0:	3308      	adds	r3, #8
 8013bf2:	9303      	str	r3, [sp, #12]
 8013bf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013bf6:	4433      	add	r3, r6
 8013bf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8013bfa:	e76a      	b.n	8013ad2 <_svfiprintf_r+0x52>
 8013bfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c00:	460c      	mov	r4, r1
 8013c02:	2001      	movs	r0, #1
 8013c04:	e7a8      	b.n	8013b58 <_svfiprintf_r+0xd8>
 8013c06:	2300      	movs	r3, #0
 8013c08:	3401      	adds	r4, #1
 8013c0a:	9305      	str	r3, [sp, #20]
 8013c0c:	4619      	mov	r1, r3
 8013c0e:	f04f 0c0a 	mov.w	ip, #10
 8013c12:	4620      	mov	r0, r4
 8013c14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c18:	3a30      	subs	r2, #48	@ 0x30
 8013c1a:	2a09      	cmp	r2, #9
 8013c1c:	d903      	bls.n	8013c26 <_svfiprintf_r+0x1a6>
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d0c6      	beq.n	8013bb0 <_svfiprintf_r+0x130>
 8013c22:	9105      	str	r1, [sp, #20]
 8013c24:	e7c4      	b.n	8013bb0 <_svfiprintf_r+0x130>
 8013c26:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c2a:	4604      	mov	r4, r0
 8013c2c:	2301      	movs	r3, #1
 8013c2e:	e7f0      	b.n	8013c12 <_svfiprintf_r+0x192>
 8013c30:	ab03      	add	r3, sp, #12
 8013c32:	9300      	str	r3, [sp, #0]
 8013c34:	462a      	mov	r2, r5
 8013c36:	4b0e      	ldr	r3, [pc, #56]	@ (8013c70 <_svfiprintf_r+0x1f0>)
 8013c38:	a904      	add	r1, sp, #16
 8013c3a:	4638      	mov	r0, r7
 8013c3c:	f3af 8000 	nop.w
 8013c40:	1c42      	adds	r2, r0, #1
 8013c42:	4606      	mov	r6, r0
 8013c44:	d1d6      	bne.n	8013bf4 <_svfiprintf_r+0x174>
 8013c46:	89ab      	ldrh	r3, [r5, #12]
 8013c48:	065b      	lsls	r3, r3, #25
 8013c4a:	f53f af2d 	bmi.w	8013aa8 <_svfiprintf_r+0x28>
 8013c4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013c50:	e72c      	b.n	8013aac <_svfiprintf_r+0x2c>
 8013c52:	ab03      	add	r3, sp, #12
 8013c54:	9300      	str	r3, [sp, #0]
 8013c56:	462a      	mov	r2, r5
 8013c58:	4b05      	ldr	r3, [pc, #20]	@ (8013c70 <_svfiprintf_r+0x1f0>)
 8013c5a:	a904      	add	r1, sp, #16
 8013c5c:	4638      	mov	r0, r7
 8013c5e:	f000 f879 	bl	8013d54 <_printf_i>
 8013c62:	e7ed      	b.n	8013c40 <_svfiprintf_r+0x1c0>
 8013c64:	0802c7d5 	.word	0x0802c7d5
 8013c68:	0802c7df 	.word	0x0802c7df
 8013c6c:	00000000 	.word	0x00000000
 8013c70:	080139c9 	.word	0x080139c9
 8013c74:	0802c7db 	.word	0x0802c7db

08013c78 <_printf_common>:
 8013c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c7c:	4616      	mov	r6, r2
 8013c7e:	4698      	mov	r8, r3
 8013c80:	688a      	ldr	r2, [r1, #8]
 8013c82:	690b      	ldr	r3, [r1, #16]
 8013c84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013c88:	4293      	cmp	r3, r2
 8013c8a:	bfb8      	it	lt
 8013c8c:	4613      	movlt	r3, r2
 8013c8e:	6033      	str	r3, [r6, #0]
 8013c90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013c94:	4607      	mov	r7, r0
 8013c96:	460c      	mov	r4, r1
 8013c98:	b10a      	cbz	r2, 8013c9e <_printf_common+0x26>
 8013c9a:	3301      	adds	r3, #1
 8013c9c:	6033      	str	r3, [r6, #0]
 8013c9e:	6823      	ldr	r3, [r4, #0]
 8013ca0:	0699      	lsls	r1, r3, #26
 8013ca2:	bf42      	ittt	mi
 8013ca4:	6833      	ldrmi	r3, [r6, #0]
 8013ca6:	3302      	addmi	r3, #2
 8013ca8:	6033      	strmi	r3, [r6, #0]
 8013caa:	6825      	ldr	r5, [r4, #0]
 8013cac:	f015 0506 	ands.w	r5, r5, #6
 8013cb0:	d106      	bne.n	8013cc0 <_printf_common+0x48>
 8013cb2:	f104 0a19 	add.w	sl, r4, #25
 8013cb6:	68e3      	ldr	r3, [r4, #12]
 8013cb8:	6832      	ldr	r2, [r6, #0]
 8013cba:	1a9b      	subs	r3, r3, r2
 8013cbc:	42ab      	cmp	r3, r5
 8013cbe:	dc26      	bgt.n	8013d0e <_printf_common+0x96>
 8013cc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013cc4:	6822      	ldr	r2, [r4, #0]
 8013cc6:	3b00      	subs	r3, #0
 8013cc8:	bf18      	it	ne
 8013cca:	2301      	movne	r3, #1
 8013ccc:	0692      	lsls	r2, r2, #26
 8013cce:	d42b      	bmi.n	8013d28 <_printf_common+0xb0>
 8013cd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013cd4:	4641      	mov	r1, r8
 8013cd6:	4638      	mov	r0, r7
 8013cd8:	47c8      	blx	r9
 8013cda:	3001      	adds	r0, #1
 8013cdc:	d01e      	beq.n	8013d1c <_printf_common+0xa4>
 8013cde:	6823      	ldr	r3, [r4, #0]
 8013ce0:	6922      	ldr	r2, [r4, #16]
 8013ce2:	f003 0306 	and.w	r3, r3, #6
 8013ce6:	2b04      	cmp	r3, #4
 8013ce8:	bf02      	ittt	eq
 8013cea:	68e5      	ldreq	r5, [r4, #12]
 8013cec:	6833      	ldreq	r3, [r6, #0]
 8013cee:	1aed      	subeq	r5, r5, r3
 8013cf0:	68a3      	ldr	r3, [r4, #8]
 8013cf2:	bf0c      	ite	eq
 8013cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013cf8:	2500      	movne	r5, #0
 8013cfa:	4293      	cmp	r3, r2
 8013cfc:	bfc4      	itt	gt
 8013cfe:	1a9b      	subgt	r3, r3, r2
 8013d00:	18ed      	addgt	r5, r5, r3
 8013d02:	2600      	movs	r6, #0
 8013d04:	341a      	adds	r4, #26
 8013d06:	42b5      	cmp	r5, r6
 8013d08:	d11a      	bne.n	8013d40 <_printf_common+0xc8>
 8013d0a:	2000      	movs	r0, #0
 8013d0c:	e008      	b.n	8013d20 <_printf_common+0xa8>
 8013d0e:	2301      	movs	r3, #1
 8013d10:	4652      	mov	r2, sl
 8013d12:	4641      	mov	r1, r8
 8013d14:	4638      	mov	r0, r7
 8013d16:	47c8      	blx	r9
 8013d18:	3001      	adds	r0, #1
 8013d1a:	d103      	bne.n	8013d24 <_printf_common+0xac>
 8013d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8013d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d24:	3501      	adds	r5, #1
 8013d26:	e7c6      	b.n	8013cb6 <_printf_common+0x3e>
 8013d28:	18e1      	adds	r1, r4, r3
 8013d2a:	1c5a      	adds	r2, r3, #1
 8013d2c:	2030      	movs	r0, #48	@ 0x30
 8013d2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013d32:	4422      	add	r2, r4
 8013d34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013d38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013d3c:	3302      	adds	r3, #2
 8013d3e:	e7c7      	b.n	8013cd0 <_printf_common+0x58>
 8013d40:	2301      	movs	r3, #1
 8013d42:	4622      	mov	r2, r4
 8013d44:	4641      	mov	r1, r8
 8013d46:	4638      	mov	r0, r7
 8013d48:	47c8      	blx	r9
 8013d4a:	3001      	adds	r0, #1
 8013d4c:	d0e6      	beq.n	8013d1c <_printf_common+0xa4>
 8013d4e:	3601      	adds	r6, #1
 8013d50:	e7d9      	b.n	8013d06 <_printf_common+0x8e>
	...

08013d54 <_printf_i>:
 8013d54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013d58:	7e0f      	ldrb	r7, [r1, #24]
 8013d5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013d5c:	2f78      	cmp	r7, #120	@ 0x78
 8013d5e:	4691      	mov	r9, r2
 8013d60:	4680      	mov	r8, r0
 8013d62:	460c      	mov	r4, r1
 8013d64:	469a      	mov	sl, r3
 8013d66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013d6a:	d807      	bhi.n	8013d7c <_printf_i+0x28>
 8013d6c:	2f62      	cmp	r7, #98	@ 0x62
 8013d6e:	d80a      	bhi.n	8013d86 <_printf_i+0x32>
 8013d70:	2f00      	cmp	r7, #0
 8013d72:	f000 80d2 	beq.w	8013f1a <_printf_i+0x1c6>
 8013d76:	2f58      	cmp	r7, #88	@ 0x58
 8013d78:	f000 80b9 	beq.w	8013eee <_printf_i+0x19a>
 8013d7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013d80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013d84:	e03a      	b.n	8013dfc <_printf_i+0xa8>
 8013d86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013d8a:	2b15      	cmp	r3, #21
 8013d8c:	d8f6      	bhi.n	8013d7c <_printf_i+0x28>
 8013d8e:	a101      	add	r1, pc, #4	@ (adr r1, 8013d94 <_printf_i+0x40>)
 8013d90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013d94:	08013ded 	.word	0x08013ded
 8013d98:	08013e01 	.word	0x08013e01
 8013d9c:	08013d7d 	.word	0x08013d7d
 8013da0:	08013d7d 	.word	0x08013d7d
 8013da4:	08013d7d 	.word	0x08013d7d
 8013da8:	08013d7d 	.word	0x08013d7d
 8013dac:	08013e01 	.word	0x08013e01
 8013db0:	08013d7d 	.word	0x08013d7d
 8013db4:	08013d7d 	.word	0x08013d7d
 8013db8:	08013d7d 	.word	0x08013d7d
 8013dbc:	08013d7d 	.word	0x08013d7d
 8013dc0:	08013f01 	.word	0x08013f01
 8013dc4:	08013e2b 	.word	0x08013e2b
 8013dc8:	08013ebb 	.word	0x08013ebb
 8013dcc:	08013d7d 	.word	0x08013d7d
 8013dd0:	08013d7d 	.word	0x08013d7d
 8013dd4:	08013f23 	.word	0x08013f23
 8013dd8:	08013d7d 	.word	0x08013d7d
 8013ddc:	08013e2b 	.word	0x08013e2b
 8013de0:	08013d7d 	.word	0x08013d7d
 8013de4:	08013d7d 	.word	0x08013d7d
 8013de8:	08013ec3 	.word	0x08013ec3
 8013dec:	6833      	ldr	r3, [r6, #0]
 8013dee:	1d1a      	adds	r2, r3, #4
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	6032      	str	r2, [r6, #0]
 8013df4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013df8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013dfc:	2301      	movs	r3, #1
 8013dfe:	e09d      	b.n	8013f3c <_printf_i+0x1e8>
 8013e00:	6833      	ldr	r3, [r6, #0]
 8013e02:	6820      	ldr	r0, [r4, #0]
 8013e04:	1d19      	adds	r1, r3, #4
 8013e06:	6031      	str	r1, [r6, #0]
 8013e08:	0606      	lsls	r6, r0, #24
 8013e0a:	d501      	bpl.n	8013e10 <_printf_i+0xbc>
 8013e0c:	681d      	ldr	r5, [r3, #0]
 8013e0e:	e003      	b.n	8013e18 <_printf_i+0xc4>
 8013e10:	0645      	lsls	r5, r0, #25
 8013e12:	d5fb      	bpl.n	8013e0c <_printf_i+0xb8>
 8013e14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013e18:	2d00      	cmp	r5, #0
 8013e1a:	da03      	bge.n	8013e24 <_printf_i+0xd0>
 8013e1c:	232d      	movs	r3, #45	@ 0x2d
 8013e1e:	426d      	negs	r5, r5
 8013e20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013e24:	4859      	ldr	r0, [pc, #356]	@ (8013f8c <_printf_i+0x238>)
 8013e26:	230a      	movs	r3, #10
 8013e28:	e011      	b.n	8013e4e <_printf_i+0xfa>
 8013e2a:	6821      	ldr	r1, [r4, #0]
 8013e2c:	6833      	ldr	r3, [r6, #0]
 8013e2e:	0608      	lsls	r0, r1, #24
 8013e30:	f853 5b04 	ldr.w	r5, [r3], #4
 8013e34:	d402      	bmi.n	8013e3c <_printf_i+0xe8>
 8013e36:	0649      	lsls	r1, r1, #25
 8013e38:	bf48      	it	mi
 8013e3a:	b2ad      	uxthmi	r5, r5
 8013e3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8013e3e:	4853      	ldr	r0, [pc, #332]	@ (8013f8c <_printf_i+0x238>)
 8013e40:	6033      	str	r3, [r6, #0]
 8013e42:	bf14      	ite	ne
 8013e44:	230a      	movne	r3, #10
 8013e46:	2308      	moveq	r3, #8
 8013e48:	2100      	movs	r1, #0
 8013e4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013e4e:	6866      	ldr	r6, [r4, #4]
 8013e50:	60a6      	str	r6, [r4, #8]
 8013e52:	2e00      	cmp	r6, #0
 8013e54:	bfa2      	ittt	ge
 8013e56:	6821      	ldrge	r1, [r4, #0]
 8013e58:	f021 0104 	bicge.w	r1, r1, #4
 8013e5c:	6021      	strge	r1, [r4, #0]
 8013e5e:	b90d      	cbnz	r5, 8013e64 <_printf_i+0x110>
 8013e60:	2e00      	cmp	r6, #0
 8013e62:	d04b      	beq.n	8013efc <_printf_i+0x1a8>
 8013e64:	4616      	mov	r6, r2
 8013e66:	fbb5 f1f3 	udiv	r1, r5, r3
 8013e6a:	fb03 5711 	mls	r7, r3, r1, r5
 8013e6e:	5dc7      	ldrb	r7, [r0, r7]
 8013e70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013e74:	462f      	mov	r7, r5
 8013e76:	42bb      	cmp	r3, r7
 8013e78:	460d      	mov	r5, r1
 8013e7a:	d9f4      	bls.n	8013e66 <_printf_i+0x112>
 8013e7c:	2b08      	cmp	r3, #8
 8013e7e:	d10b      	bne.n	8013e98 <_printf_i+0x144>
 8013e80:	6823      	ldr	r3, [r4, #0]
 8013e82:	07df      	lsls	r7, r3, #31
 8013e84:	d508      	bpl.n	8013e98 <_printf_i+0x144>
 8013e86:	6923      	ldr	r3, [r4, #16]
 8013e88:	6861      	ldr	r1, [r4, #4]
 8013e8a:	4299      	cmp	r1, r3
 8013e8c:	bfde      	ittt	le
 8013e8e:	2330      	movle	r3, #48	@ 0x30
 8013e90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013e94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013e98:	1b92      	subs	r2, r2, r6
 8013e9a:	6122      	str	r2, [r4, #16]
 8013e9c:	f8cd a000 	str.w	sl, [sp]
 8013ea0:	464b      	mov	r3, r9
 8013ea2:	aa03      	add	r2, sp, #12
 8013ea4:	4621      	mov	r1, r4
 8013ea6:	4640      	mov	r0, r8
 8013ea8:	f7ff fee6 	bl	8013c78 <_printf_common>
 8013eac:	3001      	adds	r0, #1
 8013eae:	d14a      	bne.n	8013f46 <_printf_i+0x1f2>
 8013eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8013eb4:	b004      	add	sp, #16
 8013eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013eba:	6823      	ldr	r3, [r4, #0]
 8013ebc:	f043 0320 	orr.w	r3, r3, #32
 8013ec0:	6023      	str	r3, [r4, #0]
 8013ec2:	4833      	ldr	r0, [pc, #204]	@ (8013f90 <_printf_i+0x23c>)
 8013ec4:	2778      	movs	r7, #120	@ 0x78
 8013ec6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013eca:	6823      	ldr	r3, [r4, #0]
 8013ecc:	6831      	ldr	r1, [r6, #0]
 8013ece:	061f      	lsls	r7, r3, #24
 8013ed0:	f851 5b04 	ldr.w	r5, [r1], #4
 8013ed4:	d402      	bmi.n	8013edc <_printf_i+0x188>
 8013ed6:	065f      	lsls	r7, r3, #25
 8013ed8:	bf48      	it	mi
 8013eda:	b2ad      	uxthmi	r5, r5
 8013edc:	6031      	str	r1, [r6, #0]
 8013ede:	07d9      	lsls	r1, r3, #31
 8013ee0:	bf44      	itt	mi
 8013ee2:	f043 0320 	orrmi.w	r3, r3, #32
 8013ee6:	6023      	strmi	r3, [r4, #0]
 8013ee8:	b11d      	cbz	r5, 8013ef2 <_printf_i+0x19e>
 8013eea:	2310      	movs	r3, #16
 8013eec:	e7ac      	b.n	8013e48 <_printf_i+0xf4>
 8013eee:	4827      	ldr	r0, [pc, #156]	@ (8013f8c <_printf_i+0x238>)
 8013ef0:	e7e9      	b.n	8013ec6 <_printf_i+0x172>
 8013ef2:	6823      	ldr	r3, [r4, #0]
 8013ef4:	f023 0320 	bic.w	r3, r3, #32
 8013ef8:	6023      	str	r3, [r4, #0]
 8013efa:	e7f6      	b.n	8013eea <_printf_i+0x196>
 8013efc:	4616      	mov	r6, r2
 8013efe:	e7bd      	b.n	8013e7c <_printf_i+0x128>
 8013f00:	6833      	ldr	r3, [r6, #0]
 8013f02:	6825      	ldr	r5, [r4, #0]
 8013f04:	6961      	ldr	r1, [r4, #20]
 8013f06:	1d18      	adds	r0, r3, #4
 8013f08:	6030      	str	r0, [r6, #0]
 8013f0a:	062e      	lsls	r6, r5, #24
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	d501      	bpl.n	8013f14 <_printf_i+0x1c0>
 8013f10:	6019      	str	r1, [r3, #0]
 8013f12:	e002      	b.n	8013f1a <_printf_i+0x1c6>
 8013f14:	0668      	lsls	r0, r5, #25
 8013f16:	d5fb      	bpl.n	8013f10 <_printf_i+0x1bc>
 8013f18:	8019      	strh	r1, [r3, #0]
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	6123      	str	r3, [r4, #16]
 8013f1e:	4616      	mov	r6, r2
 8013f20:	e7bc      	b.n	8013e9c <_printf_i+0x148>
 8013f22:	6833      	ldr	r3, [r6, #0]
 8013f24:	1d1a      	adds	r2, r3, #4
 8013f26:	6032      	str	r2, [r6, #0]
 8013f28:	681e      	ldr	r6, [r3, #0]
 8013f2a:	6862      	ldr	r2, [r4, #4]
 8013f2c:	2100      	movs	r1, #0
 8013f2e:	4630      	mov	r0, r6
 8013f30:	f7ec f9ce 	bl	80002d0 <memchr>
 8013f34:	b108      	cbz	r0, 8013f3a <_printf_i+0x1e6>
 8013f36:	1b80      	subs	r0, r0, r6
 8013f38:	6060      	str	r0, [r4, #4]
 8013f3a:	6863      	ldr	r3, [r4, #4]
 8013f3c:	6123      	str	r3, [r4, #16]
 8013f3e:	2300      	movs	r3, #0
 8013f40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013f44:	e7aa      	b.n	8013e9c <_printf_i+0x148>
 8013f46:	6923      	ldr	r3, [r4, #16]
 8013f48:	4632      	mov	r2, r6
 8013f4a:	4649      	mov	r1, r9
 8013f4c:	4640      	mov	r0, r8
 8013f4e:	47d0      	blx	sl
 8013f50:	3001      	adds	r0, #1
 8013f52:	d0ad      	beq.n	8013eb0 <_printf_i+0x15c>
 8013f54:	6823      	ldr	r3, [r4, #0]
 8013f56:	079b      	lsls	r3, r3, #30
 8013f58:	d413      	bmi.n	8013f82 <_printf_i+0x22e>
 8013f5a:	68e0      	ldr	r0, [r4, #12]
 8013f5c:	9b03      	ldr	r3, [sp, #12]
 8013f5e:	4298      	cmp	r0, r3
 8013f60:	bfb8      	it	lt
 8013f62:	4618      	movlt	r0, r3
 8013f64:	e7a6      	b.n	8013eb4 <_printf_i+0x160>
 8013f66:	2301      	movs	r3, #1
 8013f68:	4632      	mov	r2, r6
 8013f6a:	4649      	mov	r1, r9
 8013f6c:	4640      	mov	r0, r8
 8013f6e:	47d0      	blx	sl
 8013f70:	3001      	adds	r0, #1
 8013f72:	d09d      	beq.n	8013eb0 <_printf_i+0x15c>
 8013f74:	3501      	adds	r5, #1
 8013f76:	68e3      	ldr	r3, [r4, #12]
 8013f78:	9903      	ldr	r1, [sp, #12]
 8013f7a:	1a5b      	subs	r3, r3, r1
 8013f7c:	42ab      	cmp	r3, r5
 8013f7e:	dcf2      	bgt.n	8013f66 <_printf_i+0x212>
 8013f80:	e7eb      	b.n	8013f5a <_printf_i+0x206>
 8013f82:	2500      	movs	r5, #0
 8013f84:	f104 0619 	add.w	r6, r4, #25
 8013f88:	e7f5      	b.n	8013f76 <_printf_i+0x222>
 8013f8a:	bf00      	nop
 8013f8c:	0802c7e6 	.word	0x0802c7e6
 8013f90:	0802c7f7 	.word	0x0802c7f7

08013f94 <__sflush_r>:
 8013f94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f9c:	0716      	lsls	r6, r2, #28
 8013f9e:	4605      	mov	r5, r0
 8013fa0:	460c      	mov	r4, r1
 8013fa2:	d454      	bmi.n	801404e <__sflush_r+0xba>
 8013fa4:	684b      	ldr	r3, [r1, #4]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	dc02      	bgt.n	8013fb0 <__sflush_r+0x1c>
 8013faa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	dd48      	ble.n	8014042 <__sflush_r+0xae>
 8013fb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013fb2:	2e00      	cmp	r6, #0
 8013fb4:	d045      	beq.n	8014042 <__sflush_r+0xae>
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013fbc:	682f      	ldr	r7, [r5, #0]
 8013fbe:	6a21      	ldr	r1, [r4, #32]
 8013fc0:	602b      	str	r3, [r5, #0]
 8013fc2:	d030      	beq.n	8014026 <__sflush_r+0x92>
 8013fc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013fc6:	89a3      	ldrh	r3, [r4, #12]
 8013fc8:	0759      	lsls	r1, r3, #29
 8013fca:	d505      	bpl.n	8013fd8 <__sflush_r+0x44>
 8013fcc:	6863      	ldr	r3, [r4, #4]
 8013fce:	1ad2      	subs	r2, r2, r3
 8013fd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013fd2:	b10b      	cbz	r3, 8013fd8 <__sflush_r+0x44>
 8013fd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013fd6:	1ad2      	subs	r2, r2, r3
 8013fd8:	2300      	movs	r3, #0
 8013fda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013fdc:	6a21      	ldr	r1, [r4, #32]
 8013fde:	4628      	mov	r0, r5
 8013fe0:	47b0      	blx	r6
 8013fe2:	1c43      	adds	r3, r0, #1
 8013fe4:	89a3      	ldrh	r3, [r4, #12]
 8013fe6:	d106      	bne.n	8013ff6 <__sflush_r+0x62>
 8013fe8:	6829      	ldr	r1, [r5, #0]
 8013fea:	291d      	cmp	r1, #29
 8013fec:	d82b      	bhi.n	8014046 <__sflush_r+0xb2>
 8013fee:	4a2a      	ldr	r2, [pc, #168]	@ (8014098 <__sflush_r+0x104>)
 8013ff0:	410a      	asrs	r2, r1
 8013ff2:	07d6      	lsls	r6, r2, #31
 8013ff4:	d427      	bmi.n	8014046 <__sflush_r+0xb2>
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	6062      	str	r2, [r4, #4]
 8013ffa:	04d9      	lsls	r1, r3, #19
 8013ffc:	6922      	ldr	r2, [r4, #16]
 8013ffe:	6022      	str	r2, [r4, #0]
 8014000:	d504      	bpl.n	801400c <__sflush_r+0x78>
 8014002:	1c42      	adds	r2, r0, #1
 8014004:	d101      	bne.n	801400a <__sflush_r+0x76>
 8014006:	682b      	ldr	r3, [r5, #0]
 8014008:	b903      	cbnz	r3, 801400c <__sflush_r+0x78>
 801400a:	6560      	str	r0, [r4, #84]	@ 0x54
 801400c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801400e:	602f      	str	r7, [r5, #0]
 8014010:	b1b9      	cbz	r1, 8014042 <__sflush_r+0xae>
 8014012:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014016:	4299      	cmp	r1, r3
 8014018:	d002      	beq.n	8014020 <__sflush_r+0x8c>
 801401a:	4628      	mov	r0, r5
 801401c:	f7ff fbd4 	bl	80137c8 <_free_r>
 8014020:	2300      	movs	r3, #0
 8014022:	6363      	str	r3, [r4, #52]	@ 0x34
 8014024:	e00d      	b.n	8014042 <__sflush_r+0xae>
 8014026:	2301      	movs	r3, #1
 8014028:	4628      	mov	r0, r5
 801402a:	47b0      	blx	r6
 801402c:	4602      	mov	r2, r0
 801402e:	1c50      	adds	r0, r2, #1
 8014030:	d1c9      	bne.n	8013fc6 <__sflush_r+0x32>
 8014032:	682b      	ldr	r3, [r5, #0]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d0c6      	beq.n	8013fc6 <__sflush_r+0x32>
 8014038:	2b1d      	cmp	r3, #29
 801403a:	d001      	beq.n	8014040 <__sflush_r+0xac>
 801403c:	2b16      	cmp	r3, #22
 801403e:	d11e      	bne.n	801407e <__sflush_r+0xea>
 8014040:	602f      	str	r7, [r5, #0]
 8014042:	2000      	movs	r0, #0
 8014044:	e022      	b.n	801408c <__sflush_r+0xf8>
 8014046:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801404a:	b21b      	sxth	r3, r3
 801404c:	e01b      	b.n	8014086 <__sflush_r+0xf2>
 801404e:	690f      	ldr	r7, [r1, #16]
 8014050:	2f00      	cmp	r7, #0
 8014052:	d0f6      	beq.n	8014042 <__sflush_r+0xae>
 8014054:	0793      	lsls	r3, r2, #30
 8014056:	680e      	ldr	r6, [r1, #0]
 8014058:	bf08      	it	eq
 801405a:	694b      	ldreq	r3, [r1, #20]
 801405c:	600f      	str	r7, [r1, #0]
 801405e:	bf18      	it	ne
 8014060:	2300      	movne	r3, #0
 8014062:	eba6 0807 	sub.w	r8, r6, r7
 8014066:	608b      	str	r3, [r1, #8]
 8014068:	f1b8 0f00 	cmp.w	r8, #0
 801406c:	dde9      	ble.n	8014042 <__sflush_r+0xae>
 801406e:	6a21      	ldr	r1, [r4, #32]
 8014070:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014072:	4643      	mov	r3, r8
 8014074:	463a      	mov	r2, r7
 8014076:	4628      	mov	r0, r5
 8014078:	47b0      	blx	r6
 801407a:	2800      	cmp	r0, #0
 801407c:	dc08      	bgt.n	8014090 <__sflush_r+0xfc>
 801407e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014086:	81a3      	strh	r3, [r4, #12]
 8014088:	f04f 30ff 	mov.w	r0, #4294967295
 801408c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014090:	4407      	add	r7, r0
 8014092:	eba8 0800 	sub.w	r8, r8, r0
 8014096:	e7e7      	b.n	8014068 <__sflush_r+0xd4>
 8014098:	dfbffffe 	.word	0xdfbffffe

0801409c <_fflush_r>:
 801409c:	b538      	push	{r3, r4, r5, lr}
 801409e:	690b      	ldr	r3, [r1, #16]
 80140a0:	4605      	mov	r5, r0
 80140a2:	460c      	mov	r4, r1
 80140a4:	b913      	cbnz	r3, 80140ac <_fflush_r+0x10>
 80140a6:	2500      	movs	r5, #0
 80140a8:	4628      	mov	r0, r5
 80140aa:	bd38      	pop	{r3, r4, r5, pc}
 80140ac:	b118      	cbz	r0, 80140b6 <_fflush_r+0x1a>
 80140ae:	6a03      	ldr	r3, [r0, #32]
 80140b0:	b90b      	cbnz	r3, 80140b6 <_fflush_r+0x1a>
 80140b2:	f7ff f99b 	bl	80133ec <__sinit>
 80140b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d0f3      	beq.n	80140a6 <_fflush_r+0xa>
 80140be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80140c0:	07d0      	lsls	r0, r2, #31
 80140c2:	d404      	bmi.n	80140ce <_fflush_r+0x32>
 80140c4:	0599      	lsls	r1, r3, #22
 80140c6:	d402      	bmi.n	80140ce <_fflush_r+0x32>
 80140c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80140ca:	f7ff fb4e 	bl	801376a <__retarget_lock_acquire_recursive>
 80140ce:	4628      	mov	r0, r5
 80140d0:	4621      	mov	r1, r4
 80140d2:	f7ff ff5f 	bl	8013f94 <__sflush_r>
 80140d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80140d8:	07da      	lsls	r2, r3, #31
 80140da:	4605      	mov	r5, r0
 80140dc:	d4e4      	bmi.n	80140a8 <_fflush_r+0xc>
 80140de:	89a3      	ldrh	r3, [r4, #12]
 80140e0:	059b      	lsls	r3, r3, #22
 80140e2:	d4e1      	bmi.n	80140a8 <_fflush_r+0xc>
 80140e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80140e6:	f7ff fb41 	bl	801376c <__retarget_lock_release_recursive>
 80140ea:	e7dd      	b.n	80140a8 <_fflush_r+0xc>

080140ec <fiprintf>:
 80140ec:	b40e      	push	{r1, r2, r3}
 80140ee:	b503      	push	{r0, r1, lr}
 80140f0:	4601      	mov	r1, r0
 80140f2:	ab03      	add	r3, sp, #12
 80140f4:	4805      	ldr	r0, [pc, #20]	@ (801410c <fiprintf+0x20>)
 80140f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80140fa:	6800      	ldr	r0, [r0, #0]
 80140fc:	9301      	str	r3, [sp, #4]
 80140fe:	f000 f875 	bl	80141ec <_vfiprintf_r>
 8014102:	b002      	add	sp, #8
 8014104:	f85d eb04 	ldr.w	lr, [sp], #4
 8014108:	b003      	add	sp, #12
 801410a:	4770      	bx	lr
 801410c:	20000040 	.word	0x20000040

08014110 <_sbrk_r>:
 8014110:	b538      	push	{r3, r4, r5, lr}
 8014112:	4d06      	ldr	r5, [pc, #24]	@ (801412c <_sbrk_r+0x1c>)
 8014114:	2300      	movs	r3, #0
 8014116:	4604      	mov	r4, r0
 8014118:	4608      	mov	r0, r1
 801411a:	602b      	str	r3, [r5, #0]
 801411c:	f7ee fa70 	bl	8002600 <_sbrk>
 8014120:	1c43      	adds	r3, r0, #1
 8014122:	d102      	bne.n	801412a <_sbrk_r+0x1a>
 8014124:	682b      	ldr	r3, [r5, #0]
 8014126:	b103      	cbz	r3, 801412a <_sbrk_r+0x1a>
 8014128:	6023      	str	r3, [r4, #0]
 801412a:	bd38      	pop	{r3, r4, r5, pc}
 801412c:	200164a4 	.word	0x200164a4

08014130 <abort>:
 8014130:	b508      	push	{r3, lr}
 8014132:	2006      	movs	r0, #6
 8014134:	f000 fa2e 	bl	8014594 <raise>
 8014138:	2001      	movs	r0, #1
 801413a:	f7ee f9e9 	bl	8002510 <_exit>

0801413e <_realloc_r>:
 801413e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014142:	4680      	mov	r8, r0
 8014144:	4615      	mov	r5, r2
 8014146:	460c      	mov	r4, r1
 8014148:	b921      	cbnz	r1, 8014154 <_realloc_r+0x16>
 801414a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801414e:	4611      	mov	r1, r2
 8014150:	f7ff bbae 	b.w	80138b0 <_malloc_r>
 8014154:	b92a      	cbnz	r2, 8014162 <_realloc_r+0x24>
 8014156:	f7ff fb37 	bl	80137c8 <_free_r>
 801415a:	2400      	movs	r4, #0
 801415c:	4620      	mov	r0, r4
 801415e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014162:	f000 fa33 	bl	80145cc <_malloc_usable_size_r>
 8014166:	4285      	cmp	r5, r0
 8014168:	4606      	mov	r6, r0
 801416a:	d802      	bhi.n	8014172 <_realloc_r+0x34>
 801416c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014170:	d8f4      	bhi.n	801415c <_realloc_r+0x1e>
 8014172:	4629      	mov	r1, r5
 8014174:	4640      	mov	r0, r8
 8014176:	f7ff fb9b 	bl	80138b0 <_malloc_r>
 801417a:	4607      	mov	r7, r0
 801417c:	2800      	cmp	r0, #0
 801417e:	d0ec      	beq.n	801415a <_realloc_r+0x1c>
 8014180:	42b5      	cmp	r5, r6
 8014182:	462a      	mov	r2, r5
 8014184:	4621      	mov	r1, r4
 8014186:	bf28      	it	cs
 8014188:	4632      	movcs	r2, r6
 801418a:	f7ff faf0 	bl	801376e <memcpy>
 801418e:	4621      	mov	r1, r4
 8014190:	4640      	mov	r0, r8
 8014192:	f7ff fb19 	bl	80137c8 <_free_r>
 8014196:	463c      	mov	r4, r7
 8014198:	e7e0      	b.n	801415c <_realloc_r+0x1e>

0801419a <__sfputc_r>:
 801419a:	6893      	ldr	r3, [r2, #8]
 801419c:	3b01      	subs	r3, #1
 801419e:	2b00      	cmp	r3, #0
 80141a0:	b410      	push	{r4}
 80141a2:	6093      	str	r3, [r2, #8]
 80141a4:	da08      	bge.n	80141b8 <__sfputc_r+0x1e>
 80141a6:	6994      	ldr	r4, [r2, #24]
 80141a8:	42a3      	cmp	r3, r4
 80141aa:	db01      	blt.n	80141b0 <__sfputc_r+0x16>
 80141ac:	290a      	cmp	r1, #10
 80141ae:	d103      	bne.n	80141b8 <__sfputc_r+0x1e>
 80141b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141b4:	f000 b932 	b.w	801441c <__swbuf_r>
 80141b8:	6813      	ldr	r3, [r2, #0]
 80141ba:	1c58      	adds	r0, r3, #1
 80141bc:	6010      	str	r0, [r2, #0]
 80141be:	7019      	strb	r1, [r3, #0]
 80141c0:	4608      	mov	r0, r1
 80141c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141c6:	4770      	bx	lr

080141c8 <__sfputs_r>:
 80141c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141ca:	4606      	mov	r6, r0
 80141cc:	460f      	mov	r7, r1
 80141ce:	4614      	mov	r4, r2
 80141d0:	18d5      	adds	r5, r2, r3
 80141d2:	42ac      	cmp	r4, r5
 80141d4:	d101      	bne.n	80141da <__sfputs_r+0x12>
 80141d6:	2000      	movs	r0, #0
 80141d8:	e007      	b.n	80141ea <__sfputs_r+0x22>
 80141da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141de:	463a      	mov	r2, r7
 80141e0:	4630      	mov	r0, r6
 80141e2:	f7ff ffda 	bl	801419a <__sfputc_r>
 80141e6:	1c43      	adds	r3, r0, #1
 80141e8:	d1f3      	bne.n	80141d2 <__sfputs_r+0xa>
 80141ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080141ec <_vfiprintf_r>:
 80141ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141f0:	460d      	mov	r5, r1
 80141f2:	b09d      	sub	sp, #116	@ 0x74
 80141f4:	4614      	mov	r4, r2
 80141f6:	4698      	mov	r8, r3
 80141f8:	4606      	mov	r6, r0
 80141fa:	b118      	cbz	r0, 8014204 <_vfiprintf_r+0x18>
 80141fc:	6a03      	ldr	r3, [r0, #32]
 80141fe:	b90b      	cbnz	r3, 8014204 <_vfiprintf_r+0x18>
 8014200:	f7ff f8f4 	bl	80133ec <__sinit>
 8014204:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014206:	07d9      	lsls	r1, r3, #31
 8014208:	d405      	bmi.n	8014216 <_vfiprintf_r+0x2a>
 801420a:	89ab      	ldrh	r3, [r5, #12]
 801420c:	059a      	lsls	r2, r3, #22
 801420e:	d402      	bmi.n	8014216 <_vfiprintf_r+0x2a>
 8014210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014212:	f7ff faaa 	bl	801376a <__retarget_lock_acquire_recursive>
 8014216:	89ab      	ldrh	r3, [r5, #12]
 8014218:	071b      	lsls	r3, r3, #28
 801421a:	d501      	bpl.n	8014220 <_vfiprintf_r+0x34>
 801421c:	692b      	ldr	r3, [r5, #16]
 801421e:	b99b      	cbnz	r3, 8014248 <_vfiprintf_r+0x5c>
 8014220:	4629      	mov	r1, r5
 8014222:	4630      	mov	r0, r6
 8014224:	f000 f938 	bl	8014498 <__swsetup_r>
 8014228:	b170      	cbz	r0, 8014248 <_vfiprintf_r+0x5c>
 801422a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801422c:	07dc      	lsls	r4, r3, #31
 801422e:	d504      	bpl.n	801423a <_vfiprintf_r+0x4e>
 8014230:	f04f 30ff 	mov.w	r0, #4294967295
 8014234:	b01d      	add	sp, #116	@ 0x74
 8014236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801423a:	89ab      	ldrh	r3, [r5, #12]
 801423c:	0598      	lsls	r0, r3, #22
 801423e:	d4f7      	bmi.n	8014230 <_vfiprintf_r+0x44>
 8014240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014242:	f7ff fa93 	bl	801376c <__retarget_lock_release_recursive>
 8014246:	e7f3      	b.n	8014230 <_vfiprintf_r+0x44>
 8014248:	2300      	movs	r3, #0
 801424a:	9309      	str	r3, [sp, #36]	@ 0x24
 801424c:	2320      	movs	r3, #32
 801424e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014252:	f8cd 800c 	str.w	r8, [sp, #12]
 8014256:	2330      	movs	r3, #48	@ 0x30
 8014258:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014408 <_vfiprintf_r+0x21c>
 801425c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014260:	f04f 0901 	mov.w	r9, #1
 8014264:	4623      	mov	r3, r4
 8014266:	469a      	mov	sl, r3
 8014268:	f813 2b01 	ldrb.w	r2, [r3], #1
 801426c:	b10a      	cbz	r2, 8014272 <_vfiprintf_r+0x86>
 801426e:	2a25      	cmp	r2, #37	@ 0x25
 8014270:	d1f9      	bne.n	8014266 <_vfiprintf_r+0x7a>
 8014272:	ebba 0b04 	subs.w	fp, sl, r4
 8014276:	d00b      	beq.n	8014290 <_vfiprintf_r+0xa4>
 8014278:	465b      	mov	r3, fp
 801427a:	4622      	mov	r2, r4
 801427c:	4629      	mov	r1, r5
 801427e:	4630      	mov	r0, r6
 8014280:	f7ff ffa2 	bl	80141c8 <__sfputs_r>
 8014284:	3001      	adds	r0, #1
 8014286:	f000 80a7 	beq.w	80143d8 <_vfiprintf_r+0x1ec>
 801428a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801428c:	445a      	add	r2, fp
 801428e:	9209      	str	r2, [sp, #36]	@ 0x24
 8014290:	f89a 3000 	ldrb.w	r3, [sl]
 8014294:	2b00      	cmp	r3, #0
 8014296:	f000 809f 	beq.w	80143d8 <_vfiprintf_r+0x1ec>
 801429a:	2300      	movs	r3, #0
 801429c:	f04f 32ff 	mov.w	r2, #4294967295
 80142a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80142a4:	f10a 0a01 	add.w	sl, sl, #1
 80142a8:	9304      	str	r3, [sp, #16]
 80142aa:	9307      	str	r3, [sp, #28]
 80142ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80142b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80142b2:	4654      	mov	r4, sl
 80142b4:	2205      	movs	r2, #5
 80142b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142ba:	4853      	ldr	r0, [pc, #332]	@ (8014408 <_vfiprintf_r+0x21c>)
 80142bc:	f7ec f808 	bl	80002d0 <memchr>
 80142c0:	9a04      	ldr	r2, [sp, #16]
 80142c2:	b9d8      	cbnz	r0, 80142fc <_vfiprintf_r+0x110>
 80142c4:	06d1      	lsls	r1, r2, #27
 80142c6:	bf44      	itt	mi
 80142c8:	2320      	movmi	r3, #32
 80142ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80142ce:	0713      	lsls	r3, r2, #28
 80142d0:	bf44      	itt	mi
 80142d2:	232b      	movmi	r3, #43	@ 0x2b
 80142d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80142d8:	f89a 3000 	ldrb.w	r3, [sl]
 80142dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80142de:	d015      	beq.n	801430c <_vfiprintf_r+0x120>
 80142e0:	9a07      	ldr	r2, [sp, #28]
 80142e2:	4654      	mov	r4, sl
 80142e4:	2000      	movs	r0, #0
 80142e6:	f04f 0c0a 	mov.w	ip, #10
 80142ea:	4621      	mov	r1, r4
 80142ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80142f0:	3b30      	subs	r3, #48	@ 0x30
 80142f2:	2b09      	cmp	r3, #9
 80142f4:	d94b      	bls.n	801438e <_vfiprintf_r+0x1a2>
 80142f6:	b1b0      	cbz	r0, 8014326 <_vfiprintf_r+0x13a>
 80142f8:	9207      	str	r2, [sp, #28]
 80142fa:	e014      	b.n	8014326 <_vfiprintf_r+0x13a>
 80142fc:	eba0 0308 	sub.w	r3, r0, r8
 8014300:	fa09 f303 	lsl.w	r3, r9, r3
 8014304:	4313      	orrs	r3, r2
 8014306:	9304      	str	r3, [sp, #16]
 8014308:	46a2      	mov	sl, r4
 801430a:	e7d2      	b.n	80142b2 <_vfiprintf_r+0xc6>
 801430c:	9b03      	ldr	r3, [sp, #12]
 801430e:	1d19      	adds	r1, r3, #4
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	9103      	str	r1, [sp, #12]
 8014314:	2b00      	cmp	r3, #0
 8014316:	bfbb      	ittet	lt
 8014318:	425b      	neglt	r3, r3
 801431a:	f042 0202 	orrlt.w	r2, r2, #2
 801431e:	9307      	strge	r3, [sp, #28]
 8014320:	9307      	strlt	r3, [sp, #28]
 8014322:	bfb8      	it	lt
 8014324:	9204      	strlt	r2, [sp, #16]
 8014326:	7823      	ldrb	r3, [r4, #0]
 8014328:	2b2e      	cmp	r3, #46	@ 0x2e
 801432a:	d10a      	bne.n	8014342 <_vfiprintf_r+0x156>
 801432c:	7863      	ldrb	r3, [r4, #1]
 801432e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014330:	d132      	bne.n	8014398 <_vfiprintf_r+0x1ac>
 8014332:	9b03      	ldr	r3, [sp, #12]
 8014334:	1d1a      	adds	r2, r3, #4
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	9203      	str	r2, [sp, #12]
 801433a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801433e:	3402      	adds	r4, #2
 8014340:	9305      	str	r3, [sp, #20]
 8014342:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014418 <_vfiprintf_r+0x22c>
 8014346:	7821      	ldrb	r1, [r4, #0]
 8014348:	2203      	movs	r2, #3
 801434a:	4650      	mov	r0, sl
 801434c:	f7eb ffc0 	bl	80002d0 <memchr>
 8014350:	b138      	cbz	r0, 8014362 <_vfiprintf_r+0x176>
 8014352:	9b04      	ldr	r3, [sp, #16]
 8014354:	eba0 000a 	sub.w	r0, r0, sl
 8014358:	2240      	movs	r2, #64	@ 0x40
 801435a:	4082      	lsls	r2, r0
 801435c:	4313      	orrs	r3, r2
 801435e:	3401      	adds	r4, #1
 8014360:	9304      	str	r3, [sp, #16]
 8014362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014366:	4829      	ldr	r0, [pc, #164]	@ (801440c <_vfiprintf_r+0x220>)
 8014368:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801436c:	2206      	movs	r2, #6
 801436e:	f7eb ffaf 	bl	80002d0 <memchr>
 8014372:	2800      	cmp	r0, #0
 8014374:	d03f      	beq.n	80143f6 <_vfiprintf_r+0x20a>
 8014376:	4b26      	ldr	r3, [pc, #152]	@ (8014410 <_vfiprintf_r+0x224>)
 8014378:	bb1b      	cbnz	r3, 80143c2 <_vfiprintf_r+0x1d6>
 801437a:	9b03      	ldr	r3, [sp, #12]
 801437c:	3307      	adds	r3, #7
 801437e:	f023 0307 	bic.w	r3, r3, #7
 8014382:	3308      	adds	r3, #8
 8014384:	9303      	str	r3, [sp, #12]
 8014386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014388:	443b      	add	r3, r7
 801438a:	9309      	str	r3, [sp, #36]	@ 0x24
 801438c:	e76a      	b.n	8014264 <_vfiprintf_r+0x78>
 801438e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014392:	460c      	mov	r4, r1
 8014394:	2001      	movs	r0, #1
 8014396:	e7a8      	b.n	80142ea <_vfiprintf_r+0xfe>
 8014398:	2300      	movs	r3, #0
 801439a:	3401      	adds	r4, #1
 801439c:	9305      	str	r3, [sp, #20]
 801439e:	4619      	mov	r1, r3
 80143a0:	f04f 0c0a 	mov.w	ip, #10
 80143a4:	4620      	mov	r0, r4
 80143a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80143aa:	3a30      	subs	r2, #48	@ 0x30
 80143ac:	2a09      	cmp	r2, #9
 80143ae:	d903      	bls.n	80143b8 <_vfiprintf_r+0x1cc>
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d0c6      	beq.n	8014342 <_vfiprintf_r+0x156>
 80143b4:	9105      	str	r1, [sp, #20]
 80143b6:	e7c4      	b.n	8014342 <_vfiprintf_r+0x156>
 80143b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80143bc:	4604      	mov	r4, r0
 80143be:	2301      	movs	r3, #1
 80143c0:	e7f0      	b.n	80143a4 <_vfiprintf_r+0x1b8>
 80143c2:	ab03      	add	r3, sp, #12
 80143c4:	9300      	str	r3, [sp, #0]
 80143c6:	462a      	mov	r2, r5
 80143c8:	4b12      	ldr	r3, [pc, #72]	@ (8014414 <_vfiprintf_r+0x228>)
 80143ca:	a904      	add	r1, sp, #16
 80143cc:	4630      	mov	r0, r6
 80143ce:	f3af 8000 	nop.w
 80143d2:	4607      	mov	r7, r0
 80143d4:	1c78      	adds	r0, r7, #1
 80143d6:	d1d6      	bne.n	8014386 <_vfiprintf_r+0x19a>
 80143d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80143da:	07d9      	lsls	r1, r3, #31
 80143dc:	d405      	bmi.n	80143ea <_vfiprintf_r+0x1fe>
 80143de:	89ab      	ldrh	r3, [r5, #12]
 80143e0:	059a      	lsls	r2, r3, #22
 80143e2:	d402      	bmi.n	80143ea <_vfiprintf_r+0x1fe>
 80143e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80143e6:	f7ff f9c1 	bl	801376c <__retarget_lock_release_recursive>
 80143ea:	89ab      	ldrh	r3, [r5, #12]
 80143ec:	065b      	lsls	r3, r3, #25
 80143ee:	f53f af1f 	bmi.w	8014230 <_vfiprintf_r+0x44>
 80143f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80143f4:	e71e      	b.n	8014234 <_vfiprintf_r+0x48>
 80143f6:	ab03      	add	r3, sp, #12
 80143f8:	9300      	str	r3, [sp, #0]
 80143fa:	462a      	mov	r2, r5
 80143fc:	4b05      	ldr	r3, [pc, #20]	@ (8014414 <_vfiprintf_r+0x228>)
 80143fe:	a904      	add	r1, sp, #16
 8014400:	4630      	mov	r0, r6
 8014402:	f7ff fca7 	bl	8013d54 <_printf_i>
 8014406:	e7e4      	b.n	80143d2 <_vfiprintf_r+0x1e6>
 8014408:	0802c7d5 	.word	0x0802c7d5
 801440c:	0802c7df 	.word	0x0802c7df
 8014410:	00000000 	.word	0x00000000
 8014414:	080141c9 	.word	0x080141c9
 8014418:	0802c7db 	.word	0x0802c7db

0801441c <__swbuf_r>:
 801441c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801441e:	460e      	mov	r6, r1
 8014420:	4614      	mov	r4, r2
 8014422:	4605      	mov	r5, r0
 8014424:	b118      	cbz	r0, 801442e <__swbuf_r+0x12>
 8014426:	6a03      	ldr	r3, [r0, #32]
 8014428:	b90b      	cbnz	r3, 801442e <__swbuf_r+0x12>
 801442a:	f7fe ffdf 	bl	80133ec <__sinit>
 801442e:	69a3      	ldr	r3, [r4, #24]
 8014430:	60a3      	str	r3, [r4, #8]
 8014432:	89a3      	ldrh	r3, [r4, #12]
 8014434:	071a      	lsls	r2, r3, #28
 8014436:	d501      	bpl.n	801443c <__swbuf_r+0x20>
 8014438:	6923      	ldr	r3, [r4, #16]
 801443a:	b943      	cbnz	r3, 801444e <__swbuf_r+0x32>
 801443c:	4621      	mov	r1, r4
 801443e:	4628      	mov	r0, r5
 8014440:	f000 f82a 	bl	8014498 <__swsetup_r>
 8014444:	b118      	cbz	r0, 801444e <__swbuf_r+0x32>
 8014446:	f04f 37ff 	mov.w	r7, #4294967295
 801444a:	4638      	mov	r0, r7
 801444c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801444e:	6823      	ldr	r3, [r4, #0]
 8014450:	6922      	ldr	r2, [r4, #16]
 8014452:	1a98      	subs	r0, r3, r2
 8014454:	6963      	ldr	r3, [r4, #20]
 8014456:	b2f6      	uxtb	r6, r6
 8014458:	4283      	cmp	r3, r0
 801445a:	4637      	mov	r7, r6
 801445c:	dc05      	bgt.n	801446a <__swbuf_r+0x4e>
 801445e:	4621      	mov	r1, r4
 8014460:	4628      	mov	r0, r5
 8014462:	f7ff fe1b 	bl	801409c <_fflush_r>
 8014466:	2800      	cmp	r0, #0
 8014468:	d1ed      	bne.n	8014446 <__swbuf_r+0x2a>
 801446a:	68a3      	ldr	r3, [r4, #8]
 801446c:	3b01      	subs	r3, #1
 801446e:	60a3      	str	r3, [r4, #8]
 8014470:	6823      	ldr	r3, [r4, #0]
 8014472:	1c5a      	adds	r2, r3, #1
 8014474:	6022      	str	r2, [r4, #0]
 8014476:	701e      	strb	r6, [r3, #0]
 8014478:	6962      	ldr	r2, [r4, #20]
 801447a:	1c43      	adds	r3, r0, #1
 801447c:	429a      	cmp	r2, r3
 801447e:	d004      	beq.n	801448a <__swbuf_r+0x6e>
 8014480:	89a3      	ldrh	r3, [r4, #12]
 8014482:	07db      	lsls	r3, r3, #31
 8014484:	d5e1      	bpl.n	801444a <__swbuf_r+0x2e>
 8014486:	2e0a      	cmp	r6, #10
 8014488:	d1df      	bne.n	801444a <__swbuf_r+0x2e>
 801448a:	4621      	mov	r1, r4
 801448c:	4628      	mov	r0, r5
 801448e:	f7ff fe05 	bl	801409c <_fflush_r>
 8014492:	2800      	cmp	r0, #0
 8014494:	d0d9      	beq.n	801444a <__swbuf_r+0x2e>
 8014496:	e7d6      	b.n	8014446 <__swbuf_r+0x2a>

08014498 <__swsetup_r>:
 8014498:	b538      	push	{r3, r4, r5, lr}
 801449a:	4b29      	ldr	r3, [pc, #164]	@ (8014540 <__swsetup_r+0xa8>)
 801449c:	4605      	mov	r5, r0
 801449e:	6818      	ldr	r0, [r3, #0]
 80144a0:	460c      	mov	r4, r1
 80144a2:	b118      	cbz	r0, 80144ac <__swsetup_r+0x14>
 80144a4:	6a03      	ldr	r3, [r0, #32]
 80144a6:	b90b      	cbnz	r3, 80144ac <__swsetup_r+0x14>
 80144a8:	f7fe ffa0 	bl	80133ec <__sinit>
 80144ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80144b0:	0719      	lsls	r1, r3, #28
 80144b2:	d422      	bmi.n	80144fa <__swsetup_r+0x62>
 80144b4:	06da      	lsls	r2, r3, #27
 80144b6:	d407      	bmi.n	80144c8 <__swsetup_r+0x30>
 80144b8:	2209      	movs	r2, #9
 80144ba:	602a      	str	r2, [r5, #0]
 80144bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80144c0:	81a3      	strh	r3, [r4, #12]
 80144c2:	f04f 30ff 	mov.w	r0, #4294967295
 80144c6:	e033      	b.n	8014530 <__swsetup_r+0x98>
 80144c8:	0758      	lsls	r0, r3, #29
 80144ca:	d512      	bpl.n	80144f2 <__swsetup_r+0x5a>
 80144cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80144ce:	b141      	cbz	r1, 80144e2 <__swsetup_r+0x4a>
 80144d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80144d4:	4299      	cmp	r1, r3
 80144d6:	d002      	beq.n	80144de <__swsetup_r+0x46>
 80144d8:	4628      	mov	r0, r5
 80144da:	f7ff f975 	bl	80137c8 <_free_r>
 80144de:	2300      	movs	r3, #0
 80144e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80144e2:	89a3      	ldrh	r3, [r4, #12]
 80144e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80144e8:	81a3      	strh	r3, [r4, #12]
 80144ea:	2300      	movs	r3, #0
 80144ec:	6063      	str	r3, [r4, #4]
 80144ee:	6923      	ldr	r3, [r4, #16]
 80144f0:	6023      	str	r3, [r4, #0]
 80144f2:	89a3      	ldrh	r3, [r4, #12]
 80144f4:	f043 0308 	orr.w	r3, r3, #8
 80144f8:	81a3      	strh	r3, [r4, #12]
 80144fa:	6923      	ldr	r3, [r4, #16]
 80144fc:	b94b      	cbnz	r3, 8014512 <__swsetup_r+0x7a>
 80144fe:	89a3      	ldrh	r3, [r4, #12]
 8014500:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014508:	d003      	beq.n	8014512 <__swsetup_r+0x7a>
 801450a:	4621      	mov	r1, r4
 801450c:	4628      	mov	r0, r5
 801450e:	f000 f88b 	bl	8014628 <__smakebuf_r>
 8014512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014516:	f013 0201 	ands.w	r2, r3, #1
 801451a:	d00a      	beq.n	8014532 <__swsetup_r+0x9a>
 801451c:	2200      	movs	r2, #0
 801451e:	60a2      	str	r2, [r4, #8]
 8014520:	6962      	ldr	r2, [r4, #20]
 8014522:	4252      	negs	r2, r2
 8014524:	61a2      	str	r2, [r4, #24]
 8014526:	6922      	ldr	r2, [r4, #16]
 8014528:	b942      	cbnz	r2, 801453c <__swsetup_r+0xa4>
 801452a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801452e:	d1c5      	bne.n	80144bc <__swsetup_r+0x24>
 8014530:	bd38      	pop	{r3, r4, r5, pc}
 8014532:	0799      	lsls	r1, r3, #30
 8014534:	bf58      	it	pl
 8014536:	6962      	ldrpl	r2, [r4, #20]
 8014538:	60a2      	str	r2, [r4, #8]
 801453a:	e7f4      	b.n	8014526 <__swsetup_r+0x8e>
 801453c:	2000      	movs	r0, #0
 801453e:	e7f7      	b.n	8014530 <__swsetup_r+0x98>
 8014540:	20000040 	.word	0x20000040

08014544 <_raise_r>:
 8014544:	291f      	cmp	r1, #31
 8014546:	b538      	push	{r3, r4, r5, lr}
 8014548:	4605      	mov	r5, r0
 801454a:	460c      	mov	r4, r1
 801454c:	d904      	bls.n	8014558 <_raise_r+0x14>
 801454e:	2316      	movs	r3, #22
 8014550:	6003      	str	r3, [r0, #0]
 8014552:	f04f 30ff 	mov.w	r0, #4294967295
 8014556:	bd38      	pop	{r3, r4, r5, pc}
 8014558:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801455a:	b112      	cbz	r2, 8014562 <_raise_r+0x1e>
 801455c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014560:	b94b      	cbnz	r3, 8014576 <_raise_r+0x32>
 8014562:	4628      	mov	r0, r5
 8014564:	f000 f830 	bl	80145c8 <_getpid_r>
 8014568:	4622      	mov	r2, r4
 801456a:	4601      	mov	r1, r0
 801456c:	4628      	mov	r0, r5
 801456e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014572:	f000 b817 	b.w	80145a4 <_kill_r>
 8014576:	2b01      	cmp	r3, #1
 8014578:	d00a      	beq.n	8014590 <_raise_r+0x4c>
 801457a:	1c59      	adds	r1, r3, #1
 801457c:	d103      	bne.n	8014586 <_raise_r+0x42>
 801457e:	2316      	movs	r3, #22
 8014580:	6003      	str	r3, [r0, #0]
 8014582:	2001      	movs	r0, #1
 8014584:	e7e7      	b.n	8014556 <_raise_r+0x12>
 8014586:	2100      	movs	r1, #0
 8014588:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801458c:	4620      	mov	r0, r4
 801458e:	4798      	blx	r3
 8014590:	2000      	movs	r0, #0
 8014592:	e7e0      	b.n	8014556 <_raise_r+0x12>

08014594 <raise>:
 8014594:	4b02      	ldr	r3, [pc, #8]	@ (80145a0 <raise+0xc>)
 8014596:	4601      	mov	r1, r0
 8014598:	6818      	ldr	r0, [r3, #0]
 801459a:	f7ff bfd3 	b.w	8014544 <_raise_r>
 801459e:	bf00      	nop
 80145a0:	20000040 	.word	0x20000040

080145a4 <_kill_r>:
 80145a4:	b538      	push	{r3, r4, r5, lr}
 80145a6:	4d07      	ldr	r5, [pc, #28]	@ (80145c4 <_kill_r+0x20>)
 80145a8:	2300      	movs	r3, #0
 80145aa:	4604      	mov	r4, r0
 80145ac:	4608      	mov	r0, r1
 80145ae:	4611      	mov	r1, r2
 80145b0:	602b      	str	r3, [r5, #0]
 80145b2:	f7ed ff9d 	bl	80024f0 <_kill>
 80145b6:	1c43      	adds	r3, r0, #1
 80145b8:	d102      	bne.n	80145c0 <_kill_r+0x1c>
 80145ba:	682b      	ldr	r3, [r5, #0]
 80145bc:	b103      	cbz	r3, 80145c0 <_kill_r+0x1c>
 80145be:	6023      	str	r3, [r4, #0]
 80145c0:	bd38      	pop	{r3, r4, r5, pc}
 80145c2:	bf00      	nop
 80145c4:	200164a4 	.word	0x200164a4

080145c8 <_getpid_r>:
 80145c8:	f7ed bf8a 	b.w	80024e0 <_getpid>

080145cc <_malloc_usable_size_r>:
 80145cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80145d0:	1f18      	subs	r0, r3, #4
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	bfbc      	itt	lt
 80145d6:	580b      	ldrlt	r3, [r1, r0]
 80145d8:	18c0      	addlt	r0, r0, r3
 80145da:	4770      	bx	lr

080145dc <__swhatbuf_r>:
 80145dc:	b570      	push	{r4, r5, r6, lr}
 80145de:	460c      	mov	r4, r1
 80145e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145e4:	2900      	cmp	r1, #0
 80145e6:	b096      	sub	sp, #88	@ 0x58
 80145e8:	4615      	mov	r5, r2
 80145ea:	461e      	mov	r6, r3
 80145ec:	da0d      	bge.n	801460a <__swhatbuf_r+0x2e>
 80145ee:	89a3      	ldrh	r3, [r4, #12]
 80145f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80145f4:	f04f 0100 	mov.w	r1, #0
 80145f8:	bf14      	ite	ne
 80145fa:	2340      	movne	r3, #64	@ 0x40
 80145fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014600:	2000      	movs	r0, #0
 8014602:	6031      	str	r1, [r6, #0]
 8014604:	602b      	str	r3, [r5, #0]
 8014606:	b016      	add	sp, #88	@ 0x58
 8014608:	bd70      	pop	{r4, r5, r6, pc}
 801460a:	466a      	mov	r2, sp
 801460c:	f000 f848 	bl	80146a0 <_fstat_r>
 8014610:	2800      	cmp	r0, #0
 8014612:	dbec      	blt.n	80145ee <__swhatbuf_r+0x12>
 8014614:	9901      	ldr	r1, [sp, #4]
 8014616:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801461a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801461e:	4259      	negs	r1, r3
 8014620:	4159      	adcs	r1, r3
 8014622:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014626:	e7eb      	b.n	8014600 <__swhatbuf_r+0x24>

08014628 <__smakebuf_r>:
 8014628:	898b      	ldrh	r3, [r1, #12]
 801462a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801462c:	079d      	lsls	r5, r3, #30
 801462e:	4606      	mov	r6, r0
 8014630:	460c      	mov	r4, r1
 8014632:	d507      	bpl.n	8014644 <__smakebuf_r+0x1c>
 8014634:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014638:	6023      	str	r3, [r4, #0]
 801463a:	6123      	str	r3, [r4, #16]
 801463c:	2301      	movs	r3, #1
 801463e:	6163      	str	r3, [r4, #20]
 8014640:	b003      	add	sp, #12
 8014642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014644:	ab01      	add	r3, sp, #4
 8014646:	466a      	mov	r2, sp
 8014648:	f7ff ffc8 	bl	80145dc <__swhatbuf_r>
 801464c:	9f00      	ldr	r7, [sp, #0]
 801464e:	4605      	mov	r5, r0
 8014650:	4639      	mov	r1, r7
 8014652:	4630      	mov	r0, r6
 8014654:	f7ff f92c 	bl	80138b0 <_malloc_r>
 8014658:	b948      	cbnz	r0, 801466e <__smakebuf_r+0x46>
 801465a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801465e:	059a      	lsls	r2, r3, #22
 8014660:	d4ee      	bmi.n	8014640 <__smakebuf_r+0x18>
 8014662:	f023 0303 	bic.w	r3, r3, #3
 8014666:	f043 0302 	orr.w	r3, r3, #2
 801466a:	81a3      	strh	r3, [r4, #12]
 801466c:	e7e2      	b.n	8014634 <__smakebuf_r+0xc>
 801466e:	89a3      	ldrh	r3, [r4, #12]
 8014670:	6020      	str	r0, [r4, #0]
 8014672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014676:	81a3      	strh	r3, [r4, #12]
 8014678:	9b01      	ldr	r3, [sp, #4]
 801467a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801467e:	b15b      	cbz	r3, 8014698 <__smakebuf_r+0x70>
 8014680:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014684:	4630      	mov	r0, r6
 8014686:	f000 f81d 	bl	80146c4 <_isatty_r>
 801468a:	b128      	cbz	r0, 8014698 <__smakebuf_r+0x70>
 801468c:	89a3      	ldrh	r3, [r4, #12]
 801468e:	f023 0303 	bic.w	r3, r3, #3
 8014692:	f043 0301 	orr.w	r3, r3, #1
 8014696:	81a3      	strh	r3, [r4, #12]
 8014698:	89a3      	ldrh	r3, [r4, #12]
 801469a:	431d      	orrs	r5, r3
 801469c:	81a5      	strh	r5, [r4, #12]
 801469e:	e7cf      	b.n	8014640 <__smakebuf_r+0x18>

080146a0 <_fstat_r>:
 80146a0:	b538      	push	{r3, r4, r5, lr}
 80146a2:	4d07      	ldr	r5, [pc, #28]	@ (80146c0 <_fstat_r+0x20>)
 80146a4:	2300      	movs	r3, #0
 80146a6:	4604      	mov	r4, r0
 80146a8:	4608      	mov	r0, r1
 80146aa:	4611      	mov	r1, r2
 80146ac:	602b      	str	r3, [r5, #0]
 80146ae:	f7ed ff7f 	bl	80025b0 <_fstat>
 80146b2:	1c43      	adds	r3, r0, #1
 80146b4:	d102      	bne.n	80146bc <_fstat_r+0x1c>
 80146b6:	682b      	ldr	r3, [r5, #0]
 80146b8:	b103      	cbz	r3, 80146bc <_fstat_r+0x1c>
 80146ba:	6023      	str	r3, [r4, #0]
 80146bc:	bd38      	pop	{r3, r4, r5, pc}
 80146be:	bf00      	nop
 80146c0:	200164a4 	.word	0x200164a4

080146c4 <_isatty_r>:
 80146c4:	b538      	push	{r3, r4, r5, lr}
 80146c6:	4d06      	ldr	r5, [pc, #24]	@ (80146e0 <_isatty_r+0x1c>)
 80146c8:	2300      	movs	r3, #0
 80146ca:	4604      	mov	r4, r0
 80146cc:	4608      	mov	r0, r1
 80146ce:	602b      	str	r3, [r5, #0]
 80146d0:	f7ed ff7e 	bl	80025d0 <_isatty>
 80146d4:	1c43      	adds	r3, r0, #1
 80146d6:	d102      	bne.n	80146de <_isatty_r+0x1a>
 80146d8:	682b      	ldr	r3, [r5, #0]
 80146da:	b103      	cbz	r3, 80146de <_isatty_r+0x1a>
 80146dc:	6023      	str	r3, [r4, #0]
 80146de:	bd38      	pop	{r3, r4, r5, pc}
 80146e0:	200164a4 	.word	0x200164a4

080146e4 <sqrtf>:
 80146e4:	b508      	push	{r3, lr}
 80146e6:	ed2d 8b02 	vpush	{d8}
 80146ea:	eeb0 8a40 	vmov.f32	s16, s0
 80146ee:	f000 f817 	bl	8014720 <__ieee754_sqrtf>
 80146f2:	eeb4 8a48 	vcmp.f32	s16, s16
 80146f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146fa:	d60c      	bvs.n	8014716 <sqrtf+0x32>
 80146fc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801471c <sqrtf+0x38>
 8014700:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014708:	d505      	bpl.n	8014716 <sqrtf+0x32>
 801470a:	f7ff f803 	bl	8013714 <__errno>
 801470e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8014712:	2321      	movs	r3, #33	@ 0x21
 8014714:	6003      	str	r3, [r0, #0]
 8014716:	ecbd 8b02 	vpop	{d8}
 801471a:	bd08      	pop	{r3, pc}
 801471c:	00000000 	.word	0x00000000

08014720 <__ieee754_sqrtf>:
 8014720:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014724:	4770      	bx	lr
	...

08014728 <_init>:
 8014728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801472a:	bf00      	nop
 801472c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801472e:	bc08      	pop	{r3}
 8014730:	469e      	mov	lr, r3
 8014732:	4770      	bx	lr

08014734 <_fini>:
 8014734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014736:	bf00      	nop
 8014738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801473a:	bc08      	pop	{r3}
 801473c:	469e      	mov	lr, r3
 801473e:	4770      	bx	lr
