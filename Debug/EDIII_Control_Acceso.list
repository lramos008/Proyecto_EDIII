
EDIII_Control_Acceso.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ed0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021e0  08009070  08009070  0000a070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b250  0800b250  0000d044  2**0
                  CONTENTS
  4 .ARM          00000008  0800b250  0800b250  0000c250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b258  0800b258  0000d044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b258  0800b258  0000c258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b25c  0800b25c  0000c25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000044  20000000  0800b260  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e134  20000044  0800b2a4  0000d044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000e178  0800b2a4  0000d178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dc44  00000000  00000000  0000d074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d00  00000000  00000000  0002acb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b88  00000000  00000000  0002f9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001556  00000000  00000000  00031540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e4b1  00000000  00000000  00032a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028241  00000000  00000000  00050f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae640  00000000  00000000  00079188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001277c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000716c  00000000  00000000  0012780c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0012e978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000044 	.word	0x20000044
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009058 	.word	0x08009058

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000048 	.word	0x20000048
 80001dc:	08009058 	.word	0x08009058

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b96a 	b.w	80004e0 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9d08      	ldr	r5, [sp, #32]
 800022a:	460c      	mov	r4, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14e      	bne.n	80002ce <__udivmoddi4+0xaa>
 8000230:	4694      	mov	ip, r2
 8000232:	458c      	cmp	ip, r1
 8000234:	4686      	mov	lr, r0
 8000236:	fab2 f282 	clz	r2, r2
 800023a:	d962      	bls.n	8000302 <__udivmoddi4+0xde>
 800023c:	b14a      	cbz	r2, 8000252 <__udivmoddi4+0x2e>
 800023e:	f1c2 0320 	rsb	r3, r2, #32
 8000242:	4091      	lsls	r1, r2
 8000244:	fa20 f303 	lsr.w	r3, r0, r3
 8000248:	fa0c fc02 	lsl.w	ip, ip, r2
 800024c:	4319      	orrs	r1, r3
 800024e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000252:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000256:	fa1f f68c 	uxth.w	r6, ip
 800025a:	fbb1 f4f7 	udiv	r4, r1, r7
 800025e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000262:	fb07 1114 	mls	r1, r7, r4, r1
 8000266:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026a:	fb04 f106 	mul.w	r1, r4, r6
 800026e:	4299      	cmp	r1, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x64>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f104 30ff 	add.w	r0, r4, #4294967295
 800027a:	f080 8112 	bcs.w	80004a2 <__udivmoddi4+0x27e>
 800027e:	4299      	cmp	r1, r3
 8000280:	f240 810f 	bls.w	80004a2 <__udivmoddi4+0x27e>
 8000284:	3c02      	subs	r4, #2
 8000286:	4463      	add	r3, ip
 8000288:	1a59      	subs	r1, r3, r1
 800028a:	fa1f f38e 	uxth.w	r3, lr
 800028e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000292:	fb07 1110 	mls	r1, r7, r0, r1
 8000296:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029a:	fb00 f606 	mul.w	r6, r0, r6
 800029e:	429e      	cmp	r6, r3
 80002a0:	d90a      	bls.n	80002b8 <__udivmoddi4+0x94>
 80002a2:	eb1c 0303 	adds.w	r3, ip, r3
 80002a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002aa:	f080 80fc 	bcs.w	80004a6 <__udivmoddi4+0x282>
 80002ae:	429e      	cmp	r6, r3
 80002b0:	f240 80f9 	bls.w	80004a6 <__udivmoddi4+0x282>
 80002b4:	4463      	add	r3, ip
 80002b6:	3802      	subs	r0, #2
 80002b8:	1b9b      	subs	r3, r3, r6
 80002ba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002be:	2100      	movs	r1, #0
 80002c0:	b11d      	cbz	r5, 80002ca <__udivmoddi4+0xa6>
 80002c2:	40d3      	lsrs	r3, r2
 80002c4:	2200      	movs	r2, #0
 80002c6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d905      	bls.n	80002de <__udivmoddi4+0xba>
 80002d2:	b10d      	cbz	r5, 80002d8 <__udivmoddi4+0xb4>
 80002d4:	e9c5 0100 	strd	r0, r1, [r5]
 80002d8:	2100      	movs	r1, #0
 80002da:	4608      	mov	r0, r1
 80002dc:	e7f5      	b.n	80002ca <__udivmoddi4+0xa6>
 80002de:	fab3 f183 	clz	r1, r3
 80002e2:	2900      	cmp	r1, #0
 80002e4:	d146      	bne.n	8000374 <__udivmoddi4+0x150>
 80002e6:	42a3      	cmp	r3, r4
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xcc>
 80002ea:	4290      	cmp	r0, r2
 80002ec:	f0c0 80f0 	bcc.w	80004d0 <__udivmoddi4+0x2ac>
 80002f0:	1a86      	subs	r6, r0, r2
 80002f2:	eb64 0303 	sbc.w	r3, r4, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	d0e6      	beq.n	80002ca <__udivmoddi4+0xa6>
 80002fc:	e9c5 6300 	strd	r6, r3, [r5]
 8000300:	e7e3      	b.n	80002ca <__udivmoddi4+0xa6>
 8000302:	2a00      	cmp	r2, #0
 8000304:	f040 8090 	bne.w	8000428 <__udivmoddi4+0x204>
 8000308:	eba1 040c 	sub.w	r4, r1, ip
 800030c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000310:	fa1f f78c 	uxth.w	r7, ip
 8000314:	2101      	movs	r1, #1
 8000316:	fbb4 f6f8 	udiv	r6, r4, r8
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb08 4416 	mls	r4, r8, r6, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb07 f006 	mul.w	r0, r7, r6
 800032a:	4298      	cmp	r0, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x11c>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 34ff 	add.w	r4, r6, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x11a>
 8000338:	4298      	cmp	r0, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2b4>
 800033e:	4626      	mov	r6, r4
 8000340:	1a1c      	subs	r4, r3, r0
 8000342:	fa1f f38e 	uxth.w	r3, lr
 8000346:	fbb4 f0f8 	udiv	r0, r4, r8
 800034a:	fb08 4410 	mls	r4, r8, r0, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb00 f707 	mul.w	r7, r0, r7
 8000356:	429f      	cmp	r7, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x148>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x146>
 8000364:	429f      	cmp	r7, r3
 8000366:	f200 80b0 	bhi.w	80004ca <__udivmoddi4+0x2a6>
 800036a:	4620      	mov	r0, r4
 800036c:	1bdb      	subs	r3, r3, r7
 800036e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000372:	e7a5      	b.n	80002c0 <__udivmoddi4+0x9c>
 8000374:	f1c1 0620 	rsb	r6, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 f706 	lsr.w	r7, r2, r6
 800037e:	431f      	orrs	r7, r3
 8000380:	fa20 fc06 	lsr.w	ip, r0, r6
 8000384:	fa04 f301 	lsl.w	r3, r4, r1
 8000388:	ea43 030c 	orr.w	r3, r3, ip
 800038c:	40f4      	lsrs	r4, r6
 800038e:	fa00 f801 	lsl.w	r8, r0, r1
 8000392:	0c38      	lsrs	r0, r7, #16
 8000394:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000398:	fbb4 fef0 	udiv	lr, r4, r0
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	fb00 441e 	mls	r4, r0, lr, r4
 80003a4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a8:	fb0e f90c 	mul.w	r9, lr, ip
 80003ac:	45a1      	cmp	r9, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	d90a      	bls.n	80003ca <__udivmoddi4+0x1a6>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ba:	f080 8084 	bcs.w	80004c6 <__udivmoddi4+0x2a2>
 80003be:	45a1      	cmp	r9, r4
 80003c0:	f240 8081 	bls.w	80004c6 <__udivmoddi4+0x2a2>
 80003c4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	eba4 0409 	sub.w	r4, r4, r9
 80003ce:	fa1f f983 	uxth.w	r9, r3
 80003d2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d6:	fb00 4413 	mls	r4, r0, r3, r4
 80003da:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003de:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x1d2>
 80003e6:	193c      	adds	r4, r7, r4
 80003e8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003ec:	d267      	bcs.n	80004be <__udivmoddi4+0x29a>
 80003ee:	45a4      	cmp	ip, r4
 80003f0:	d965      	bls.n	80004be <__udivmoddi4+0x29a>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003fa:	fba0 9302 	umull	r9, r3, r0, r2
 80003fe:	eba4 040c 	sub.w	r4, r4, ip
 8000402:	429c      	cmp	r4, r3
 8000404:	46ce      	mov	lr, r9
 8000406:	469c      	mov	ip, r3
 8000408:	d351      	bcc.n	80004ae <__udivmoddi4+0x28a>
 800040a:	d04e      	beq.n	80004aa <__udivmoddi4+0x286>
 800040c:	b155      	cbz	r5, 8000424 <__udivmoddi4+0x200>
 800040e:	ebb8 030e 	subs.w	r3, r8, lr
 8000412:	eb64 040c 	sbc.w	r4, r4, ip
 8000416:	fa04 f606 	lsl.w	r6, r4, r6
 800041a:	40cb      	lsrs	r3, r1
 800041c:	431e      	orrs	r6, r3
 800041e:	40cc      	lsrs	r4, r1
 8000420:	e9c5 6400 	strd	r6, r4, [r5]
 8000424:	2100      	movs	r1, #0
 8000426:	e750      	b.n	80002ca <__udivmoddi4+0xa6>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f103 	lsr.w	r1, r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa24 f303 	lsr.w	r3, r4, r3
 8000438:	4094      	lsls	r4, r2
 800043a:	430c      	orrs	r4, r1
 800043c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000440:	fa00 fe02 	lsl.w	lr, r0, r2
 8000444:	fa1f f78c 	uxth.w	r7, ip
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3110 	mls	r1, r8, r0, r3
 8000450:	0c23      	lsrs	r3, r4, #16
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f107 	mul.w	r1, r0, r7
 800045a:	4299      	cmp	r1, r3
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x24c>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 36ff 	add.w	r6, r0, #4294967295
 8000466:	d22c      	bcs.n	80004c2 <__udivmoddi4+0x29e>
 8000468:	4299      	cmp	r1, r3
 800046a:	d92a      	bls.n	80004c2 <__udivmoddi4+0x29e>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1a5b      	subs	r3, r3, r1
 8000472:	b2a4      	uxth	r4, r4
 8000474:	fbb3 f1f8 	udiv	r1, r3, r8
 8000478:	fb08 3311 	mls	r3, r8, r1, r3
 800047c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000480:	fb01 f307 	mul.w	r3, r1, r7
 8000484:	42a3      	cmp	r3, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x276>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000490:	d213      	bcs.n	80004ba <__udivmoddi4+0x296>
 8000492:	42a3      	cmp	r3, r4
 8000494:	d911      	bls.n	80004ba <__udivmoddi4+0x296>
 8000496:	3902      	subs	r1, #2
 8000498:	4464      	add	r4, ip
 800049a:	1ae4      	subs	r4, r4, r3
 800049c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a0:	e739      	b.n	8000316 <__udivmoddi4+0xf2>
 80004a2:	4604      	mov	r4, r0
 80004a4:	e6f0      	b.n	8000288 <__udivmoddi4+0x64>
 80004a6:	4608      	mov	r0, r1
 80004a8:	e706      	b.n	80002b8 <__udivmoddi4+0x94>
 80004aa:	45c8      	cmp	r8, r9
 80004ac:	d2ae      	bcs.n	800040c <__udivmoddi4+0x1e8>
 80004ae:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7a8      	b.n	800040c <__udivmoddi4+0x1e8>
 80004ba:	4631      	mov	r1, r6
 80004bc:	e7ed      	b.n	800049a <__udivmoddi4+0x276>
 80004be:	4603      	mov	r3, r0
 80004c0:	e799      	b.n	80003f6 <__udivmoddi4+0x1d2>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e7d4      	b.n	8000470 <__udivmoddi4+0x24c>
 80004c6:	46d6      	mov	lr, sl
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1a6>
 80004ca:	4463      	add	r3, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e74d      	b.n	800036c <__udivmoddi4+0x148>
 80004d0:	4606      	mov	r6, r0
 80004d2:	4623      	mov	r3, r4
 80004d4:	4608      	mov	r0, r1
 80004d6:	e70f      	b.n	80002f8 <__udivmoddi4+0xd4>
 80004d8:	3e02      	subs	r6, #2
 80004da:	4463      	add	r3, ip
 80004dc:	e730      	b.n	8000340 <__udivmoddi4+0x11c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4a07      	ldr	r2, [pc, #28]	@ (8000510 <vApplicationGetIdleTaskMemory+0x2c>)
 80004f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	4a06      	ldr	r2, [pc, #24]	@ (8000514 <vApplicationGetIdleTaskMemory+0x30>)
 80004fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2280      	movs	r2, #128	@ 0x80
 8000500:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000060 	.word	0x20000060
 8000514:	200000b4 	.word	0x200000b4

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f002 facf 	bl	8002ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f863 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 fa75 	bl	8000a14 <MX_GPIO_Init>
  MX_DMA_Init();
 800052a:	f000 fa53 	bl	80009d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800052e:	f000 fa27 	bl	8000980 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000532:	f000 f919 	bl	8000768 <MX_I2C1_Init>
  MX_SPI3_Init();
 8000536:	f000 f99f 	bl	8000878 <MX_SPI3_Init>
  MX_FATFS_Init();
 800053a:	f006 fd2f 	bl	8006f9c <MX_FATFS_Init>
  MX_RTC_Init();
 800053e:	f000 f941 	bl	80007c4 <MX_RTC_Init>
  MX_ADC1_Init();
 8000542:	f000 f8bf 	bl	80006c4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000546:	f000 f9cd 	bl	80008e4 <MX_TIM3_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  display_queue = xQueueCreate(1, sizeof(uint8_t));
 800054a:	2200      	movs	r2, #0
 800054c:	2101      	movs	r1, #1
 800054e:	2001      	movs	r0, #1
 8000550:	f006 ff06 	bl	8007360 <xQueueGenericCreate>
 8000554:	4603      	mov	r3, r0
 8000556:	4a1b      	ldr	r2, [pc, #108]	@ (80005c4 <main+0xac>)
 8000558:	6013      	str	r3, [r2, #0]
  sequence_queue = xQueueCreate(1, sizeof(char));
 800055a:	2200      	movs	r2, #0
 800055c:	2101      	movs	r1, #1
 800055e:	2001      	movs	r0, #1
 8000560:	f006 fefe 	bl	8007360 <xQueueGenericCreate>
 8000564:	4603      	mov	r3, r0
 8000566:	4a18      	ldr	r2, [pc, #96]	@ (80005c8 <main+0xb0>)
 8000568:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(display_task, "Tarea display", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 4, NULL);
 800056a:	2300      	movs	r3, #0
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	2304      	movs	r3, #4
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	2300      	movs	r3, #0
 8000574:	2280      	movs	r2, #128	@ 0x80
 8000576:	4915      	ldr	r1, [pc, #84]	@ (80005cc <main+0xb4>)
 8000578:	4815      	ldr	r0, [pc, #84]	@ (80005d0 <main+0xb8>)
 800057a:	f007 fa9f 	bl	8007abc <xTaskCreate>
  //xTaskCreate(LockControl, "Tarea 04", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL);
  //xTaskCreate(VoiceProcessing, "Tarea 03", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
  xTaskCreate(sd_task, "Tarea SD", 5 * configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
 800057e:	2300      	movs	r3, #0
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	2302      	movs	r3, #2
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2300      	movs	r3, #0
 8000588:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800058c:	4911      	ldr	r1, [pc, #68]	@ (80005d4 <main+0xbc>)
 800058e:	4812      	ldr	r0, [pc, #72]	@ (80005d8 <main+0xc0>)
 8000590:	f007 fa94 	bl	8007abc <xTaskCreate>
  xTaskCreate(keypad_task, "Tarea keypad", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 8000594:	2300      	movs	r3, #0
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	2301      	movs	r3, #1
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2300      	movs	r3, #0
 800059e:	2280      	movs	r2, #128	@ 0x80
 80005a0:	490e      	ldr	r1, [pc, #56]	@ (80005dc <main+0xc4>)
 80005a2:	480f      	ldr	r0, [pc, #60]	@ (80005e0 <main+0xc8>)
 80005a4:	f007 fa8a 	bl	8007abc <xTaskCreate>
  xTaskCreate(idle_task, "Tarea Idle", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 80005a8:	2300      	movs	r3, #0
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	2300      	movs	r3, #0
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2300      	movs	r3, #0
 80005b2:	2280      	movs	r2, #128	@ 0x80
 80005b4:	490b      	ldr	r1, [pc, #44]	@ (80005e4 <main+0xcc>)
 80005b6:	480c      	ldr	r0, [pc, #48]	@ (80005e8 <main+0xd0>)
 80005b8:	f007 fa80 	bl	8007abc <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 80005bc:	f007 fbec 	bl	8007d98 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <main+0xa8>
 80005c4:	200004bc 	.word	0x200004bc
 80005c8:	200004b8 	.word	0x200004b8
 80005cc:	08009070 	.word	0x08009070
 80005d0:	080028dd 	.word	0x080028dd
 80005d4:	08009080 	.word	0x08009080
 80005d8:	08002a89 	.word	0x08002a89
 80005dc:	0800908c 	.word	0x0800908c
 80005e0:	08002a0d 	.word	0x08002a0d
 80005e4:	0800909c 	.word	0x0800909c
 80005e8:	08000b5d 	.word	0x08000b5d

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	@ 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	@ 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f008 fcf2 	bl	8008fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b29      	ldr	r3, [pc, #164]	@ (80006bc <SystemClock_Config+0xd0>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	4a28      	ldr	r2, [pc, #160]	@ (80006bc <SystemClock_Config+0xd0>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000620:	4b26      	ldr	r3, [pc, #152]	@ (80006bc <SystemClock_Config+0xd0>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b23      	ldr	r3, [pc, #140]	@ (80006c0 <SystemClock_Config+0xd4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000638:	4a21      	ldr	r2, [pc, #132]	@ (80006c0 <SystemClock_Config+0xd4>)
 800063a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <SystemClock_Config+0xd4>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800064c:	2309      	movs	r3, #9
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000650:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000654:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000656:	2301      	movs	r3, #1
 8000658:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000664:	2304      	movs	r3, #4
 8000666:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000668:	2340      	movs	r3, #64	@ 0x40
 800066a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000670:	2307      	movs	r3, #7
 8000672:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0320 	add.w	r3, r7, #32
 8000678:	4618      	mov	r0, r3
 800067a:	f004 f911 	bl	80048a0 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000684:	f000 fa97 	bl	8000bb6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000698:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	2102      	movs	r1, #2
 80006a4:	4618      	mov	r0, r3
 80006a6:	f004 fb73 	bl	8004d90 <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006b0:	f000 fa81 	bl	8000bb6 <Error_Handler>
  }
}
 80006b4:	bf00      	nop
 80006b6:	3750      	adds	r7, #80	@ 0x50
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ca:	463b      	mov	r3, r7
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006d6:	4b22      	ldr	r3, [pc, #136]	@ (8000760 <MX_ADC1_Init+0x9c>)
 80006d8:	4a22      	ldr	r2, [pc, #136]	@ (8000764 <MX_ADC1_Init+0xa0>)
 80006da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006dc:	4b20      	ldr	r3, [pc, #128]	@ (8000760 <MX_ADC1_Init+0x9c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000760 <MX_ADC1_Init+0x9c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000760 <MX_ADC1_Init+0x9c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000760 <MX_ADC1_Init+0x9c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000760 <MX_ADC1_Init+0x9c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006fc:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <MX_ADC1_Init+0x9c>)
 80006fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000704:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <MX_ADC1_Init+0x9c>)
 8000706:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800070a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800070c:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_ADC1_Init+0x9c>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000712:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <MX_ADC1_Init+0x9c>)
 8000714:	2201      	movs	r2, #1
 8000716:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000718:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_ADC1_Init+0x9c>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000720:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <MX_ADC1_Init+0x9c>)
 8000722:	2201      	movs	r2, #1
 8000724:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000726:	480e      	ldr	r0, [pc, #56]	@ (8000760 <MX_ADC1_Init+0x9c>)
 8000728:	f002 fa30 	bl	8002b8c <HAL_ADC_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000732:	f000 fa40 	bl	8000bb6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800073a:	2301      	movs	r3, #1
 800073c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800073e:	2302      	movs	r3, #2
 8000740:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000742:	463b      	mov	r3, r7
 8000744:	4619      	mov	r1, r3
 8000746:	4806      	ldr	r0, [pc, #24]	@ (8000760 <MX_ADC1_Init+0x9c>)
 8000748:	f002 fbe2 	bl	8002f10 <HAL_ADC_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000752:	f000 fa30 	bl	8000bb6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200002b4 	.word	0x200002b4
 8000764:	40012000 	.word	0x40012000

08000768 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800076c:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <MX_I2C1_Init+0x50>)
 800076e:	4a13      	ldr	r2, [pc, #76]	@ (80007bc <MX_I2C1_Init+0x54>)
 8000770:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000772:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <MX_I2C1_Init+0x50>)
 8000774:	4a12      	ldr	r2, [pc, #72]	@ (80007c0 <MX_I2C1_Init+0x58>)
 8000776:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000778:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <MX_I2C1_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800077e:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_I2C1_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000784:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <MX_I2C1_Init+0x50>)
 8000786:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800078a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800078c:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <MX_I2C1_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000792:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <MX_I2C1_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000798:	4b07      	ldr	r3, [pc, #28]	@ (80007b8 <MX_I2C1_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800079e:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <MX_I2C1_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	@ (80007b8 <MX_I2C1_Init+0x50>)
 80007a6:	f003 fbcd 	bl	8003f44 <HAL_I2C_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007b0:	f000 fa01 	bl	8000bb6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	2000035c 	.word	0x2000035c
 80007bc:	40005400 	.word	0x40005400
 80007c0:	00061a80 	.word	0x00061a80

080007c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80007d8:	2300      	movs	r3, #0
 80007da:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007dc:	4b24      	ldr	r3, [pc, #144]	@ (8000870 <MX_RTC_Init+0xac>)
 80007de:	4a25      	ldr	r2, [pc, #148]	@ (8000874 <MX_RTC_Init+0xb0>)
 80007e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007e2:	4b23      	ldr	r3, [pc, #140]	@ (8000870 <MX_RTC_Init+0xac>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007e8:	4b21      	ldr	r3, [pc, #132]	@ (8000870 <MX_RTC_Init+0xac>)
 80007ea:	227f      	movs	r2, #127	@ 0x7f
 80007ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007ee:	4b20      	ldr	r3, [pc, #128]	@ (8000870 <MX_RTC_Init+0xac>)
 80007f0:	22ff      	movs	r2, #255	@ 0xff
 80007f2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000870 <MX_RTC_Init+0xac>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000870 <MX_RTC_Init+0xac>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000800:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <MX_RTC_Init+0xac>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000806:	481a      	ldr	r0, [pc, #104]	@ (8000870 <MX_RTC_Init+0xac>)
 8000808:	f004 fe02 	bl	8005410 <HAL_RTC_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000812:	f000 f9d0 	bl	8000bb6 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 15;
 8000816:	230f      	movs	r3, #15
 8000818:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2200      	movs	r2, #0
 800082e:	4619      	mov	r1, r3
 8000830:	480f      	ldr	r0, [pc, #60]	@ (8000870 <MX_RTC_Init+0xac>)
 8000832:	f004 fe70 	bl	8005516 <HAL_RTC_SetTime>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800083c:	f000 f9bb 	bl	8000bb6 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8000840:	2306      	movs	r3, #6
 8000842:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8000844:	2307      	movs	r3, #7
 8000846:	707b      	strb	r3, [r7, #1]
  sDate.Date = 6;
 8000848:	2306      	movs	r3, #6
 800084a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 800084c:	2318      	movs	r3, #24
 800084e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000850:	463b      	mov	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	4619      	mov	r1, r3
 8000856:	4806      	ldr	r0, [pc, #24]	@ (8000870 <MX_RTC_Init+0xac>)
 8000858:	f004 fef7 	bl	800564a <HAL_RTC_SetDate>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000862:	f000 f9a8 	bl	8000bb6 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200003b0 	.word	0x200003b0
 8000874:	40002800 	.word	0x40002800

08000878 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800087c:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <MX_SPI3_Init+0x64>)
 800087e:	4a18      	ldr	r2, [pc, #96]	@ (80008e0 <MX_SPI3_Init+0x68>)
 8000880:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000882:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <MX_SPI3_Init+0x64>)
 8000884:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000888:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800088a:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_SPI3_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_SPI3_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_SPI3_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800089c:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_SPI3_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_SPI3_Init+0x64>)
 80008a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008a8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008aa:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_SPI3_Init+0x64>)
 80008ac:	2210      	movs	r2, #16
 80008ae:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <MX_SPI3_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_SPI3_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008bc:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <MX_SPI3_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80008c2:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_SPI3_Init+0x64>)
 80008c4:	220a      	movs	r2, #10
 80008c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008c8:	4804      	ldr	r0, [pc, #16]	@ (80008dc <MX_SPI3_Init+0x64>)
 80008ca:	f004 ffe3 	bl	8005894 <HAL_SPI_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80008d4:	f000 f96f 	bl	8000bb6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200003d0 	.word	0x200003d0
 80008e0:	40003c00 	.word	0x40003c00

080008e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f8:	463b      	mov	r3, r7
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000900:	4b1d      	ldr	r3, [pc, #116]	@ (8000978 <MX_TIM3_Init+0x94>)
 8000902:	4a1e      	ldr	r2, [pc, #120]	@ (800097c <MX_TIM3_Init+0x98>)
 8000904:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000906:	4b1c      	ldr	r3, [pc, #112]	@ (8000978 <MX_TIM3_Init+0x94>)
 8000908:	2200      	movs	r2, #0
 800090a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090c:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <MX_TIM3_Init+0x94>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4000 - 1;
 8000912:	4b19      	ldr	r3, [pc, #100]	@ (8000978 <MX_TIM3_Init+0x94>)
 8000914:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000918:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091a:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <MX_TIM3_Init+0x94>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000920:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <MX_TIM3_Init+0x94>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000926:	4814      	ldr	r0, [pc, #80]	@ (8000978 <MX_TIM3_Init+0x94>)
 8000928:	f005 fc0c 	bl	8006144 <HAL_TIM_Base_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000932:	f000 f940 	bl	8000bb6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000936:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800093a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800093c:	f107 0308 	add.w	r3, r7, #8
 8000940:	4619      	mov	r1, r3
 8000942:	480d      	ldr	r0, [pc, #52]	@ (8000978 <MX_TIM3_Init+0x94>)
 8000944:	f005 fdcf 	bl	80064e6 <HAL_TIM_ConfigClockSource>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800094e:	f000 f932 	bl	8000bb6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000952:	2320      	movs	r3, #32
 8000954:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800095a:	463b      	mov	r3, r7
 800095c:	4619      	mov	r1, r3
 800095e:	4806      	ldr	r0, [pc, #24]	@ (8000978 <MX_TIM3_Init+0x94>)
 8000960:	f005 ffd6 	bl	8006910 <HAL_TIMEx_MasterConfigSynchronization>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800096a:	f000 f924 	bl	8000bb6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000428 	.word	0x20000428
 800097c:	40000400 	.word	0x40000400

08000980 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000984:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 8000986:	4a12      	ldr	r2, [pc, #72]	@ (80009d0 <MX_USART2_UART_Init+0x50>)
 8000988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800098a:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 80009b8:	f006 f82c 	bl	8006a14 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009c2:	f000 f8f8 	bl	8000bb6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000470 	.word	0x20000470
 80009d0:	40004400 	.word	0x40004400

080009d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <MX_DMA_Init+0x3c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000a10 <MX_DMA_Init+0x3c>)
 80009e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <MX_DMA_Init+0x3c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2105      	movs	r1, #5
 80009fa:	2038      	movs	r0, #56	@ 0x38
 80009fc:	f002 fd68 	bl	80034d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a00:	2038      	movs	r0, #56	@ 0x38
 8000a02:	f002 fd81 	bl	8003508 <HAL_NVIC_EnableIRQ>

}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800

08000a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	@ 0x28
 8000a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	4b47      	ldr	r3, [pc, #284]	@ (8000b4c <MX_GPIO_Init+0x138>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	4a46      	ldr	r2, [pc, #280]	@ (8000b4c <MX_GPIO_Init+0x138>)
 8000a34:	f043 0304 	orr.w	r3, r3, #4
 8000a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3a:	4b44      	ldr	r3, [pc, #272]	@ (8000b4c <MX_GPIO_Init+0x138>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	f003 0304 	and.w	r3, r3, #4
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b40      	ldr	r3, [pc, #256]	@ (8000b4c <MX_GPIO_Init+0x138>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a3f      	ldr	r2, [pc, #252]	@ (8000b4c <MX_GPIO_Init+0x138>)
 8000a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a56:	4b3d      	ldr	r3, [pc, #244]	@ (8000b4c <MX_GPIO_Init+0x138>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	4b39      	ldr	r3, [pc, #228]	@ (8000b4c <MX_GPIO_Init+0x138>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	4a38      	ldr	r2, [pc, #224]	@ (8000b4c <MX_GPIO_Init+0x138>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a72:	4b36      	ldr	r3, [pc, #216]	@ (8000b4c <MX_GPIO_Init+0x138>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b32      	ldr	r3, [pc, #200]	@ (8000b4c <MX_GPIO_Init+0x138>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	4a31      	ldr	r2, [pc, #196]	@ (8000b4c <MX_GPIO_Init+0x138>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b4c <MX_GPIO_Init+0x138>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2120      	movs	r1, #32
 8000a9e:	482c      	ldr	r0, [pc, #176]	@ (8000b50 <MX_GPIO_Init+0x13c>)
 8000aa0:	f003 fa36 	bl	8003f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 8000aaa:	482a      	ldr	r0, [pc, #168]	@ (8000b54 <MX_GPIO_Init+0x140>)
 8000aac:	f003 fa30 	bl	8003f10 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(cs_GPIO_Port, cs_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	4828      	ldr	r0, [pc, #160]	@ (8000b58 <MX_GPIO_Init+0x144>)
 8000ab6:	f003 fa2b 	bl	8003f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ac0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4820      	ldr	r0, [pc, #128]	@ (8000b54 <MX_GPIO_Init+0x140>)
 8000ad2:	f003 f881 	bl	8003bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000ad6:	230f      	movs	r3, #15
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	481a      	ldr	r0, [pc, #104]	@ (8000b54 <MX_GPIO_Init+0x140>)
 8000aea:	f003 f875 	bl	8003bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000aee:	2320      	movs	r3, #32
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4812      	ldr	r0, [pc, #72]	@ (8000b50 <MX_GPIO_Init+0x13c>)
 8000b06:	f003 f867 	bl	8003bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Lock_Pin PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000b0a:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8000b0e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	480c      	ldr	r0, [pc, #48]	@ (8000b54 <MX_GPIO_Init+0x140>)
 8000b24:	f003 f858 	bl	8003bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : cs_Pin */
  GPIO_InitStruct.Pin = cs_Pin;
 8000b28:	2310      	movs	r3, #16
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(cs_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4806      	ldr	r0, [pc, #24]	@ (8000b58 <MX_GPIO_Init+0x144>)
 8000b40:	f003 f84a 	bl	8003bd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b44:	bf00      	nop
 8000b46:	3728      	adds	r7, #40	@ 0x28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020000 	.word	0x40020000
 8000b54:	40020800 	.word	0x40020800
 8000b58:	40020400 	.word	0x40020400

08000b5c <idle_task>:

/* USER CODE BEGIN 4 */
void idle_task(void *pvParameters){
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	while(1);
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <idle_task+0x8>

08000b68 <HAL_ADC_ConvCpltCallback>:
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim3);
 8000b70:	4806      	ldr	r0, [pc, #24]	@ (8000b8c <HAL_ADC_ConvCpltCallback+0x24>)
 8000b72:	f005 fb99 	bl	80062a8 <HAL_TIM_Base_Stop_IT>
	HAL_ADC_Stop_DMA(&hadc1);
 8000b76:	4806      	ldr	r0, [pc, #24]	@ (8000b90 <HAL_ADC_ConvCpltCallback+0x28>)
 8000b78:	f002 f95b 	bl	8002e32 <HAL_ADC_Stop_DMA>
	conv_cplt_flag = 1;
 8000b7c:	4b05      	ldr	r3, [pc, #20]	@ (8000b94 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000428 	.word	0x20000428
 8000b90:	200002b4 	.word	0x200002b4
 8000b94:	200004c0 	.word	0x200004c0

08000b98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ba8:	d101      	bne.n	8000bae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000baa:	f001 ffab 	bl	8002b04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bba:	b672      	cpsid	i
}
 8000bbc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bbe:	bf00      	nop
 8000bc0:	e7fd      	b.n	8000bbe <Error_Handler+0x8>
	...

08000bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b12      	ldr	r3, [pc, #72]	@ (8000c18 <HAL_MspInit+0x54>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd2:	4a11      	ldr	r2, [pc, #68]	@ (8000c18 <HAL_MspInit+0x54>)
 8000bd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bda:	4b0f      	ldr	r3, [pc, #60]	@ (8000c18 <HAL_MspInit+0x54>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <HAL_MspInit+0x54>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bee:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <HAL_MspInit+0x54>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf6:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <HAL_MspInit+0x54>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	210f      	movs	r1, #15
 8000c06:	f06f 0001 	mvn.w	r0, #1
 8000c0a:	f002 fc61 	bl	80034d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800

08000c1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	@ 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a32      	ldr	r2, [pc, #200]	@ (8000d04 <HAL_ADC_MspInit+0xe8>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d15e      	bne.n	8000cfc <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b31      	ldr	r3, [pc, #196]	@ (8000d08 <HAL_ADC_MspInit+0xec>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c46:	4a30      	ldr	r2, [pc, #192]	@ (8000d08 <HAL_ADC_MspInit+0xec>)
 8000c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000d08 <HAL_ADC_MspInit+0xec>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d08 <HAL_ADC_MspInit+0xec>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	4a29      	ldr	r2, [pc, #164]	@ (8000d08 <HAL_ADC_MspInit+0xec>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6a:	4b27      	ldr	r3, [pc, #156]	@ (8000d08 <HAL_ADC_MspInit+0xec>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c76:	2301      	movs	r3, #1
 8000c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	4820      	ldr	r0, [pc, #128]	@ (8000d0c <HAL_ADC_MspInit+0xf0>)
 8000c8a:	f002 ffa5 	bl	8003bd8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c8e:	4b20      	ldr	r3, [pc, #128]	@ (8000d10 <HAL_ADC_MspInit+0xf4>)
 8000c90:	4a20      	ldr	r2, [pc, #128]	@ (8000d14 <HAL_ADC_MspInit+0xf8>)
 8000c92:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c94:	4b1e      	ldr	r3, [pc, #120]	@ (8000d10 <HAL_ADC_MspInit+0xf4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d10 <HAL_ADC_MspInit+0xf4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <HAL_ADC_MspInit+0xf4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <HAL_ADC_MspInit+0xf4>)
 8000ca8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cae:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <HAL_ADC_MspInit+0xf4>)
 8000cb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cb4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cb6:	4b16      	ldr	r3, [pc, #88]	@ (8000d10 <HAL_ADC_MspInit+0xf4>)
 8000cb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cbc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000cbe:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <HAL_ADC_MspInit+0xf4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <HAL_ADC_MspInit+0xf4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <HAL_ADC_MspInit+0xf4>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cd0:	480f      	ldr	r0, [pc, #60]	@ (8000d10 <HAL_ADC_MspInit+0xf4>)
 8000cd2:	f002 fc27 	bl	8003524 <HAL_DMA_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000cdc:	f7ff ff6b 	bl	8000bb6 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	@ (8000d10 <HAL_ADC_MspInit+0xf4>)
 8000ce4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d10 <HAL_ADC_MspInit+0xf4>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2105      	movs	r1, #5
 8000cf0:	2012      	movs	r0, #18
 8000cf2:	f002 fbed 	bl	80034d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000cf6:	2012      	movs	r0, #18
 8000cf8:	f002 fc06 	bl	8003508 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cfc:	bf00      	nop
 8000cfe:	3728      	adds	r7, #40	@ 0x28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40012000 	.word	0x40012000
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020000 	.word	0x40020000
 8000d10:	200002fc 	.word	0x200002fc
 8000d14:	40026410 	.word	0x40026410

08000d18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	@ 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a19      	ldr	r2, [pc, #100]	@ (8000d9c <HAL_I2C_MspInit+0x84>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d12b      	bne.n	8000d92 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	4b18      	ldr	r3, [pc, #96]	@ (8000da0 <HAL_I2C_MspInit+0x88>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	4a17      	ldr	r2, [pc, #92]	@ (8000da0 <HAL_I2C_MspInit+0x88>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4a:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <HAL_I2C_MspInit+0x88>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d56:	23c0      	movs	r3, #192	@ 0xc0
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5a:	2312      	movs	r3, #18
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d66:	2304      	movs	r3, #4
 8000d68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480c      	ldr	r0, [pc, #48]	@ (8000da4 <HAL_I2C_MspInit+0x8c>)
 8000d72:	f002 ff31 	bl	8003bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <HAL_I2C_MspInit+0x88>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	4a08      	ldr	r2, [pc, #32]	@ (8000da0 <HAL_I2C_MspInit+0x88>)
 8000d80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d86:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_I2C_MspInit+0x88>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	@ 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40005400 	.word	0x40005400
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020400 	.word	0x40020400

08000da8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8000df8 <HAL_RTC_MspInit+0x50>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d111      	bne.n	8000dee <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000dce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dd2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f004 fa2b 	bl	8005234 <HAL_RCCEx_PeriphCLKConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000de4:	f7ff fee7 	bl	8000bb6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000de8:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <HAL_RTC_MspInit+0x54>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000dee:	bf00      	nop
 8000df0:	3720      	adds	r7, #32
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40002800 	.word	0x40002800
 8000dfc:	42470e3c 	.word	0x42470e3c

08000e00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	@ 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a19      	ldr	r2, [pc, #100]	@ (8000e84 <HAL_SPI_MspInit+0x84>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d12c      	bne.n	8000e7c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b18      	ldr	r3, [pc, #96]	@ (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2a:	4a17      	ldr	r2, [pc, #92]	@ (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e32:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a10      	ldr	r2, [pc, #64]	@ (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000e5a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e6c:	2306      	movs	r3, #6
 8000e6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4619      	mov	r1, r3
 8000e76:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <HAL_SPI_MspInit+0x8c>)
 8000e78:	f002 feae 	bl	8003bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	@ 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40003c00 	.word	0x40003c00
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020800 	.word	0x40020800

08000e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0e      	ldr	r2, [pc, #56]	@ (8000ed8 <HAL_TIM_Base_MspInit+0x48>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d115      	bne.n	8000ece <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8000edc <HAL_TIM_Base_MspInit+0x4c>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eaa:	4a0c      	ldr	r2, [pc, #48]	@ (8000edc <HAL_TIM_Base_MspInit+0x4c>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <HAL_TIM_Base_MspInit+0x4c>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2105      	movs	r1, #5
 8000ec2:	201d      	movs	r0, #29
 8000ec4:	f002 fb04 	bl	80034d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ec8:	201d      	movs	r0, #29
 8000eca:	f002 fb1d 	bl	8003508 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40000400 	.word	0x40000400
 8000edc:	40023800 	.word	0x40023800

08000ee0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	@ 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a19      	ldr	r2, [pc, #100]	@ (8000f64 <HAL_UART_MspInit+0x84>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d12b      	bne.n	8000f5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b18      	ldr	r3, [pc, #96]	@ (8000f68 <HAL_UART_MspInit+0x88>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0a:	4a17      	ldr	r2, [pc, #92]	@ (8000f68 <HAL_UART_MspInit+0x88>)
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f12:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <HAL_UART_MspInit+0x88>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <HAL_UART_MspInit+0x88>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	4a10      	ldr	r2, [pc, #64]	@ (8000f68 <HAL_UART_MspInit+0x88>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <HAL_UART_MspInit+0x88>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f3a:	230c      	movs	r3, #12
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4805      	ldr	r0, [pc, #20]	@ (8000f6c <HAL_UART_MspInit+0x8c>)
 8000f56:	f002 fe3f 	bl	8003bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	@ 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40004400 	.word	0x40004400
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020000 	.word	0x40020000

08000f70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08e      	sub	sp, #56	@ 0x38
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	4b34      	ldr	r3, [pc, #208]	@ (8001058 <HAL_InitTick+0xe8>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f88:	4a33      	ldr	r2, [pc, #204]	@ (8001058 <HAL_InitTick+0xe8>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f90:	4b31      	ldr	r3, [pc, #196]	@ (8001058 <HAL_InitTick+0xe8>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f9c:	f107 0210 	add.w	r2, r7, #16
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f004 f912 	bl	80051d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d103      	bne.n	8000fbe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fb6:	f004 f8e3 	bl	8005180 <HAL_RCC_GetPCLK1Freq>
 8000fba:	6378      	str	r0, [r7, #52]	@ 0x34
 8000fbc:	e004      	b.n	8000fc8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fbe:	f004 f8df 	bl	8005180 <HAL_RCC_GetPCLK1Freq>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fca:	4a24      	ldr	r2, [pc, #144]	@ (800105c <HAL_InitTick+0xec>)
 8000fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd0:	0c9b      	lsrs	r3, r3, #18
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000fd6:	4b22      	ldr	r3, [pc, #136]	@ (8001060 <HAL_InitTick+0xf0>)
 8000fd8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fdc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000fde:	4b20      	ldr	r3, [pc, #128]	@ (8001060 <HAL_InitTick+0xf0>)
 8000fe0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fe4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000fe6:	4a1e      	ldr	r2, [pc, #120]	@ (8001060 <HAL_InitTick+0xf0>)
 8000fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fea:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000fec:	4b1c      	ldr	r3, [pc, #112]	@ (8001060 <HAL_InitTick+0xf0>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8001060 <HAL_InitTick+0xf0>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff8:	4b19      	ldr	r3, [pc, #100]	@ (8001060 <HAL_InitTick+0xf0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000ffe:	4818      	ldr	r0, [pc, #96]	@ (8001060 <HAL_InitTick+0xf0>)
 8001000:	f005 f8a0 	bl	8006144 <HAL_TIM_Base_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800100a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800100e:	2b00      	cmp	r3, #0
 8001010:	d11b      	bne.n	800104a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001012:	4813      	ldr	r0, [pc, #76]	@ (8001060 <HAL_InitTick+0xf0>)
 8001014:	f005 f8e6 	bl	80061e4 <HAL_TIM_Base_Start_IT>
 8001018:	4603      	mov	r3, r0
 800101a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800101e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001022:	2b00      	cmp	r3, #0
 8001024:	d111      	bne.n	800104a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001026:	201c      	movs	r0, #28
 8001028:	f002 fa6e 	bl	8003508 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b0f      	cmp	r3, #15
 8001030:	d808      	bhi.n	8001044 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001032:	2200      	movs	r2, #0
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	201c      	movs	r0, #28
 8001038:	f002 fa4a 	bl	80034d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800103c:	4a09      	ldr	r2, [pc, #36]	@ (8001064 <HAL_InitTick+0xf4>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	e002      	b.n	800104a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800104a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800104e:	4618      	mov	r0, r3
 8001050:	3738      	adds	r7, #56	@ 0x38
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	431bde83 	.word	0x431bde83
 8001060:	200004c4 	.word	0x200004c4
 8001064:	20000024 	.word	0x20000024

08001068 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800106c:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <SDTimer_Handler+0x40>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d006      	beq.n	8001084 <SDTimer_Handler+0x1c>
    Timer1--;
 8001076:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <SDTimer_Handler+0x40>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	3b01      	subs	r3, #1
 800107e:	b2da      	uxtb	r2, r3
 8001080:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <SDTimer_Handler+0x40>)
 8001082:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001084:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <SDTimer_Handler+0x44>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d006      	beq.n	800109c <SDTimer_Handler+0x34>
    Timer2--;
 800108e:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <SDTimer_Handler+0x44>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	3b01      	subs	r3, #1
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b04      	ldr	r3, [pc, #16]	@ (80010ac <SDTimer_Handler+0x44>)
 800109a:	701a      	strb	r2, [r3, #0]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	2000050d 	.word	0x2000050d
 80010ac:	2000050e 	.word	0x2000050e

080010b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <NMI_Handler+0x4>

080010b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <HardFault_Handler+0x4>

080010c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <MemManage_Handler+0x4>

080010c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <BusFault_Handler+0x4>

080010d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <UsageFault_Handler+0x4>

080010d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80010ec:	4802      	ldr	r0, [pc, #8]	@ (80010f8 <ADC_IRQHandler+0x10>)
 80010ee:	f001 fd90 	bl	8002c12 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200002b4 	.word	0x200002b4

080010fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  FatFsCnt++;
 8001100:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <TIM2_IRQHandler+0x30>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	3301      	adds	r3, #1
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4b08      	ldr	r3, [pc, #32]	@ (800112c <TIM2_IRQHandler+0x30>)
 800110c:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10){
 800110e:	4b07      	ldr	r3, [pc, #28]	@ (800112c <TIM2_IRQHandler+0x30>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b09      	cmp	r3, #9
 8001116:	d904      	bls.n	8001122 <TIM2_IRQHandler+0x26>
	  FatFsCnt = 0;
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <TIM2_IRQHandler+0x30>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 800111e:	f7ff ffa3 	bl	8001068 <SDTimer_Handler>
  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001122:	4803      	ldr	r0, [pc, #12]	@ (8001130 <TIM2_IRQHandler+0x34>)
 8001124:	f005 f8ef 	bl	8006306 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	2000050c 	.word	0x2000050c
 8001130:	200004c4 	.word	0x200004c4

08001134 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001138:	4802      	ldr	r0, [pc, #8]	@ (8001144 <TIM3_IRQHandler+0x10>)
 800113a:	f005 f8e4 	bl	8006306 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000428 	.word	0x20000428

08001148 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800114c:	4802      	ldr	r0, [pc, #8]	@ (8001158 <DMA2_Stream0_IRQHandler+0x10>)
 800114e:	f002 fb07 	bl	8003760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200002fc 	.word	0x200002fc

0800115c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <SystemInit+0x20>)
 8001162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001166:	4a05      	ldr	r2, [pc, #20]	@ (800117c <SystemInit+0x20>)
 8001168:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800116c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8001180:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001184:	f7ff ffea 	bl	800115c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001188:	480c      	ldr	r0, [pc, #48]	@ (80011bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800118a:	490d      	ldr	r1, [pc, #52]	@ (80011c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800118c:	4a0d      	ldr	r2, [pc, #52]	@ (80011c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001190:	e002      	b.n	8001198 <LoopCopyDataInit>

08001192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001196:	3304      	adds	r3, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800119c:	d3f9      	bcc.n	8001192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119e:	4a0a      	ldr	r2, [pc, #40]	@ (80011c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011a0:	4c0a      	ldr	r4, [pc, #40]	@ (80011cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a4:	e001      	b.n	80011aa <LoopFillZerobss>

080011a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a8:	3204      	adds	r2, #4

080011aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ac:	d3fb      	bcc.n	80011a6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80011ae:	f007 ff21 	bl	8008ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011b2:	f7ff f9b1 	bl	8000518 <main>
  bx  lr    
 80011b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c0:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 80011c4:	0800b260 	.word	0x0800b260
  ldr r2, =_sbss
 80011c8:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 80011cc:	2000e178 	.word	0x2000e178

080011d0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d0:	e7fe      	b.n	80011d0 <DMA1_Stream0_IRQHandler>

080011d2 <display_init>:
#include "ssd1306.h"
#include "ssd1306_fonts.h"
#include "ssd1306_tests.h"
#include "utils.h"
/*================[Public functions]=====================*/
void display_init(void){
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0
	/*Wrapper de la función que inicializa el display*/
	ssd1306_Init();
 80011d6:	f000 fb15 	bl	8001804 <ssd1306_Init>
	return;
 80011da:	bf00      	nop
}
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <display_start_msg>:

void display_start_msg(void){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af02      	add	r7, sp, #8
	/*Muestra mensaje de insertar clave*/
	uint8_t x = 5;
 80011e6:	2305      	movs	r3, #5
 80011e8:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 80011ee:	2000      	movs	r0, #0
 80011f0:	f000 fb72 	bl	80018d8 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80011f4:	79ba      	ldrb	r2, [r7, #6]
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	4611      	mov	r1, r2
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 fcb6 	bl	8001b6c <ssd1306_SetCursor>
	ssd1306_WriteString("Ingrese", Font_16x26, White);
 8001200:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <display_start_msg+0x60>)
 8001202:	2201      	movs	r2, #1
 8001204:	9200      	str	r2, [sp, #0]
 8001206:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001208:	480e      	ldr	r0, [pc, #56]	@ (8001244 <display_start_msg+0x64>)
 800120a:	f000 fc89 	bl	8001b20 <ssd1306_WriteString>
	x += 15;
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	330f      	adds	r3, #15
 8001212:	71fb      	strb	r3, [r7, #7]
	y += 26;
 8001214:	79bb      	ldrb	r3, [r7, #6]
 8001216:	331a      	adds	r3, #26
 8001218:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 800121a:	79ba      	ldrb	r2, [r7, #6]
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f000 fca3 	bl	8001b6c <ssd1306_SetCursor>
	ssd1306_WriteString("clave", Font_16x26, White);
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <display_start_msg+0x60>)
 8001228:	2201      	movs	r2, #1
 800122a:	9200      	str	r2, [sp, #0]
 800122c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800122e:	4806      	ldr	r0, [pc, #24]	@ (8001248 <display_start_msg+0x68>)
 8001230:	f000 fc76 	bl	8001b20 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001234:	f000 fb68 	bl	8001908 <ssd1306_UpdateScreen>
	return;
 8001238:	bf00      	nop
}
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	0800b23c 	.word	0x0800b23c
 8001244:	080090a8 	.word	0x080090a8
 8001248:	080090b0 	.word	0x080090b0

0800124c <display_sequence_entry_msg>:

void display_sequence_entry_msg(uint8_t input_cont){
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af02      	add	r7, sp, #8
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
	/*Maneja el ingreso de digitos en el display*/
	char message[MAX_DIGITS + 1] = {0};
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	f107 0310 	add.w	r3, r7, #16
 800125e:	2100      	movs	r1, #0
 8001260:	460a      	mov	r2, r1
 8001262:	801a      	strh	r2, [r3, #0]
 8001264:	460a      	mov	r2, r1
 8001266:	709a      	strb	r2, [r3, #2]
	uint8_t x = 10;														//x e y definen coordenadas en pantalla
 8001268:	230a      	movs	r3, #10
 800126a:	75bb      	strb	r3, [r7, #22]
	uint8_t y = 26;
 800126c:	231a      	movs	r3, #26
 800126e:	757b      	strb	r3, [r7, #21]
	//Chequeo que counter no supere el numero maximo de digitos
	if(input_cont <= MAX_DIGITS){
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	2b06      	cmp	r3, #6
 8001274:	d823      	bhi.n	80012be <display_sequence_entry_msg+0x72>
		//Armo el string a mostrar en el display
		for(uint8_t i = 0; i < input_cont; i++){
 8001276:	2300      	movs	r3, #0
 8001278:	75fb      	strb	r3, [r7, #23]
 800127a:	e008      	b.n	800128e <display_sequence_entry_msg+0x42>
			message[i] = '*';
 800127c:	7dfb      	ldrb	r3, [r7, #23]
 800127e:	3318      	adds	r3, #24
 8001280:	443b      	add	r3, r7
 8001282:	222a      	movs	r2, #42	@ 0x2a
 8001284:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t i = 0; i < input_cont; i++){
 8001288:	7dfb      	ldrb	r3, [r7, #23]
 800128a:	3301      	adds	r3, #1
 800128c:	75fb      	strb	r3, [r7, #23]
 800128e:	7dfa      	ldrb	r2, [r7, #23]
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	429a      	cmp	r2, r3
 8001294:	d3f2      	bcc.n	800127c <display_sequence_entry_msg+0x30>
		}
		//Muestro el string
		ssd1306_Fill(Black);
 8001296:	2000      	movs	r0, #0
 8001298:	f000 fb1e 	bl	80018d8 <ssd1306_Fill>
		ssd1306_SetCursor(x, y);
 800129c:	7d7a      	ldrb	r2, [r7, #21]
 800129e:	7dbb      	ldrb	r3, [r7, #22]
 80012a0:	4611      	mov	r1, r2
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 fc62 	bl	8001b6c <ssd1306_SetCursor>
		ssd1306_WriteString(message, Font_16x26, White);
 80012a8:	4b07      	ldr	r3, [pc, #28]	@ (80012c8 <display_sequence_entry_msg+0x7c>)
 80012aa:	f107 000c 	add.w	r0, r7, #12
 80012ae:	2201      	movs	r2, #1
 80012b0:	9200      	str	r2, [sp, #0]
 80012b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012b4:	f000 fc34 	bl	8001b20 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80012b8:	f000 fb26 	bl	8001908 <ssd1306_UpdateScreen>
	}
	return;
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
}
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	0800b23c 	.word	0x0800b23c

080012cc <display_timeout_msg>:


void display_timeout_msg(void){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af02      	add	r7, sp, #8
	/*Muestra mensaje de timeout en display*/
	uint8_t x = 5;
 80012d2:	2305      	movs	r3, #5
 80012d4:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 18;
 80012d6:	2312      	movs	r3, #18
 80012d8:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 80012da:	2000      	movs	r0, #0
 80012dc:	f000 fafc 	bl	80018d8 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80012e0:	79ba      	ldrb	r2, [r7, #6]
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 fc40 	bl	8001b6c <ssd1306_SetCursor>
	ssd1306_WriteString("Timeout!!!", Font_11x18, White);
 80012ec:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <display_timeout_msg+0x3c>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	9200      	str	r2, [sp, #0]
 80012f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012f4:	4805      	ldr	r0, [pc, #20]	@ (800130c <display_timeout_msg+0x40>)
 80012f6:	f000 fc13 	bl	8001b20 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80012fa:	f000 fb05 	bl	8001908 <ssd1306_UpdateScreen>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	0800b230 	.word	0x0800b230
 800130c:	080090b8 	.word	0x080090b8

08001310 <display_incomplete_entry_msg>:

void display_incomplete_entry_msg(void){
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af02      	add	r7, sp, #8
	/*Muestra mensaje de secuencia incompleta en display*/
	uint8_t x = 20;
 8001316:	2314      	movs	r3, #20
 8001318:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 800131e:	2000      	movs	r0, #0
 8001320:	f000 fada 	bl	80018d8 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001324:	79ba      	ldrb	r2, [r7, #6]
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	4611      	mov	r1, r2
 800132a:	4618      	mov	r0, r3
 800132c:	f000 fc1e 	bl	8001b6c <ssd1306_SetCursor>
	ssd1306_WriteString("Ingrese", Font_11x18, White);
 8001330:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <display_incomplete_entry_msg+0x84>)
 8001332:	2201      	movs	r2, #1
 8001334:	9200      	str	r2, [sp, #0]
 8001336:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001338:	4817      	ldr	r0, [pc, #92]	@ (8001398 <display_incomplete_entry_msg+0x88>)
 800133a:	f000 fbf1 	bl	8001b20 <ssd1306_WriteString>
	x = 10;
 800133e:	230a      	movs	r3, #10
 8001340:	71fb      	strb	r3, [r7, #7]
	y += 18;
 8001342:	79bb      	ldrb	r3, [r7, #6]
 8001344:	3312      	adds	r3, #18
 8001346:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8001348:	79ba      	ldrb	r2, [r7, #6]
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	4611      	mov	r1, r2
 800134e:	4618      	mov	r0, r3
 8001350:	f000 fc0c 	bl	8001b6c <ssd1306_SetCursor>
	ssd1306_WriteString("secuencia", Font_11x18, White);
 8001354:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <display_incomplete_entry_msg+0x84>)
 8001356:	2201      	movs	r2, #1
 8001358:	9200      	str	r2, [sp, #0]
 800135a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800135c:	480f      	ldr	r0, [pc, #60]	@ (800139c <display_incomplete_entry_msg+0x8c>)
 800135e:	f000 fbdf 	bl	8001b20 <ssd1306_WriteString>
	x = 20;
 8001362:	2314      	movs	r3, #20
 8001364:	71fb      	strb	r3, [r7, #7]
	y += 18;
 8001366:	79bb      	ldrb	r3, [r7, #6]
 8001368:	3312      	adds	r3, #18
 800136a:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 800136c:	79ba      	ldrb	r2, [r7, #6]
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f000 fbfa 	bl	8001b6c <ssd1306_SetCursor>
	ssd1306_WriteString("valida", Font_11x18, White);
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <display_incomplete_entry_msg+0x84>)
 800137a:	2201      	movs	r2, #1
 800137c:	9200      	str	r2, [sp, #0]
 800137e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001380:	4807      	ldr	r0, [pc, #28]	@ (80013a0 <display_incomplete_entry_msg+0x90>)
 8001382:	f000 fbcd 	bl	8001b20 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001386:	f000 fabf 	bl	8001908 <ssd1306_UpdateScreen>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	0800b230 	.word	0x0800b230
 8001398:	080090a8 	.word	0x080090a8
 800139c:	080090c4 	.word	0x080090c4
 80013a0:	080090d0 	.word	0x080090d0

080013a4 <display_access_granted_msg>:

void display_access_granted_msg(void){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af02      	add	r7, sp, #8
	/*Muestra mensaje de acceso concedido*/
	uint8_t x = 5;
 80013aa:	2305      	movs	r3, #5
 80013ac:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f000 fa90 	bl	80018d8 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80013b8:	79ba      	ldrb	r2, [r7, #6]
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 fbd4 	bl	8001b6c <ssd1306_SetCursor>
	ssd1306_WriteString("Acceso", Font_11x18, White);
 80013c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <display_access_granted_msg+0x5c>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	9200      	str	r2, [sp, #0]
 80013ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013cc:	480d      	ldr	r0, [pc, #52]	@ (8001404 <display_access_granted_msg+0x60>)
 80013ce:	f000 fba7 	bl	8001b20 <ssd1306_WriteString>
	y += 18;
 80013d2:	79bb      	ldrb	r3, [r7, #6]
 80013d4:	3312      	adds	r3, #18
 80013d6:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 80013d8:	79ba      	ldrb	r2, [r7, #6]
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	4611      	mov	r1, r2
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 fbc4 	bl	8001b6c <ssd1306_SetCursor>
	ssd1306_WriteString("concedido", Font_11x18, White);
 80013e4:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <display_access_granted_msg+0x5c>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	9200      	str	r2, [sp, #0]
 80013ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ec:	4806      	ldr	r0, [pc, #24]	@ (8001408 <display_access_granted_msg+0x64>)
 80013ee:	f000 fb97 	bl	8001b20 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80013f2:	f000 fa89 	bl	8001908 <ssd1306_UpdateScreen>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	0800b230 	.word	0x0800b230
 8001404:	080090d8 	.word	0x080090d8
 8001408:	080090e0 	.word	0x080090e0

0800140c <display_user_found_msg>:

void display_user_found_msg(void){
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af02      	add	r7, sp, #8
	/*Muestra mensaje de usuario encontrado*/
	uint8_t x = 20;
 8001412:	2314      	movs	r3, #20
 8001414:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 800141a:	2000      	movs	r0, #0
 800141c:	f000 fa5c 	bl	80018d8 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001420:	79ba      	ldrb	r2, [r7, #6]
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	4611      	mov	r1, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f000 fba0 	bl	8001b6c <ssd1306_SetCursor>
	ssd1306_WriteString("Usuario", Font_11x18, White);
 800142c:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <display_user_found_msg+0x60>)
 800142e:	2201      	movs	r2, #1
 8001430:	9200      	str	r2, [sp, #0]
 8001432:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001434:	480e      	ldr	r0, [pc, #56]	@ (8001470 <display_user_found_msg+0x64>)
 8001436:	f000 fb73 	bl	8001b20 <ssd1306_WriteString>
	x = 20;
 800143a:	2314      	movs	r3, #20
 800143c:	71fb      	strb	r3, [r7, #7]
	y += 18;
 800143e:	79bb      	ldrb	r3, [r7, #6]
 8001440:	3312      	adds	r3, #18
 8001442:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8001444:	79ba      	ldrb	r2, [r7, #6]
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	4611      	mov	r1, r2
 800144a:	4618      	mov	r0, r3
 800144c:	f000 fb8e 	bl	8001b6c <ssd1306_SetCursor>
	ssd1306_WriteString("hallado", Font_11x18, White);
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <display_user_found_msg+0x60>)
 8001452:	2201      	movs	r2, #1
 8001454:	9200      	str	r2, [sp, #0]
 8001456:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001458:	4806      	ldr	r0, [pc, #24]	@ (8001474 <display_user_found_msg+0x68>)
 800145a:	f000 fb61 	bl	8001b20 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800145e:	f000 fa53 	bl	8001908 <ssd1306_UpdateScreen>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	0800b230 	.word	0x0800b230
 8001470:	080090ec 	.word	0x080090ec
 8001474:	080090f4 	.word	0x080090f4

08001478 <display_user_not_found_msg>:

void display_user_not_found_msg(void){
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af02      	add	r7, sp, #8
	/*Muestra mensaje de usuario no encontrado*/
	uint8_t x = 20;
 800147e:	2314      	movs	r3, #20
 8001480:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8001486:	2000      	movs	r0, #0
 8001488:	f000 fa26 	bl	80018d8 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 800148c:	79ba      	ldrb	r2, [r7, #6]
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	4611      	mov	r1, r2
 8001492:	4618      	mov	r0, r3
 8001494:	f000 fb6a 	bl	8001b6c <ssd1306_SetCursor>
	ssd1306_WriteString("Usuario", Font_11x18, White);
 8001498:	4b18      	ldr	r3, [pc, #96]	@ (80014fc <display_user_not_found_msg+0x84>)
 800149a:	2201      	movs	r2, #1
 800149c:	9200      	str	r2, [sp, #0]
 800149e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014a0:	4817      	ldr	r0, [pc, #92]	@ (8001500 <display_user_not_found_msg+0x88>)
 80014a2:	f000 fb3d 	bl	8001b20 <ssd1306_WriteString>
	x = 20;
 80014a6:	2314      	movs	r3, #20
 80014a8:	71fb      	strb	r3, [r7, #7]
	y += 18;
 80014aa:	79bb      	ldrb	r3, [r7, #6]
 80014ac:	3312      	adds	r3, #18
 80014ae:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 80014b0:	79ba      	ldrb	r2, [r7, #6]
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	4611      	mov	r1, r2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 fb58 	bl	8001b6c <ssd1306_SetCursor>
	ssd1306_WriteString("no", Font_11x18, White);
 80014bc:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <display_user_not_found_msg+0x84>)
 80014be:	2201      	movs	r2, #1
 80014c0:	9200      	str	r2, [sp, #0]
 80014c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c4:	480f      	ldr	r0, [pc, #60]	@ (8001504 <display_user_not_found_msg+0x8c>)
 80014c6:	f000 fb2b 	bl	8001b20 <ssd1306_WriteString>
	x = 20;
 80014ca:	2314      	movs	r3, #20
 80014cc:	71fb      	strb	r3, [r7, #7]
	y += 18;
 80014ce:	79bb      	ldrb	r3, [r7, #6]
 80014d0:	3312      	adds	r3, #18
 80014d2:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 80014d4:	79ba      	ldrb	r2, [r7, #6]
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	4611      	mov	r1, r2
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 fb46 	bl	8001b6c <ssd1306_SetCursor>
	ssd1306_WriteString("existente", Font_11x18, White);
 80014e0:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <display_user_not_found_msg+0x84>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	9200      	str	r2, [sp, #0]
 80014e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014e8:	4807      	ldr	r0, [pc, #28]	@ (8001508 <display_user_not_found_msg+0x90>)
 80014ea:	f000 fb19 	bl	8001b20 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80014ee:	f000 fa0b 	bl	8001908 <ssd1306_UpdateScreen>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	0800b230 	.word	0x0800b230
 8001500:	080090ec 	.word	0x080090ec
 8001504:	080090fc 	.word	0x080090fc
 8001508:	08009100 	.word	0x08009100

0800150c <display_start_voice_recognition_msg>:

void display_start_voice_recognition_msg(void){
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af02      	add	r7, sp, #8
	/*Muestra mensaje que indica el inicio de reconocimiento de voz*/
	uint8_t x = 20;
 8001512:	2314      	movs	r3, #20
 8001514:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 800151a:	2000      	movs	r0, #0
 800151c:	f000 f9dc 	bl	80018d8 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001520:	79ba      	ldrb	r2, [r7, #6]
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	4611      	mov	r1, r2
 8001526:	4618      	mov	r0, r3
 8001528:	f000 fb20 	bl	8001b6c <ssd1306_SetCursor>
	ssd1306_WriteString("Comienza", Font_11x18, White);
 800152c:	4b18      	ldr	r3, [pc, #96]	@ (8001590 <display_start_voice_recognition_msg+0x84>)
 800152e:	2201      	movs	r2, #1
 8001530:	9200      	str	r2, [sp, #0]
 8001532:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001534:	4817      	ldr	r0, [pc, #92]	@ (8001594 <display_start_voice_recognition_msg+0x88>)
 8001536:	f000 faf3 	bl	8001b20 <ssd1306_WriteString>
	x = 20;
 800153a:	2314      	movs	r3, #20
 800153c:	71fb      	strb	r3, [r7, #7]
	y += 18;
 800153e:	79bb      	ldrb	r3, [r7, #6]
 8001540:	3312      	adds	r3, #18
 8001542:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8001544:	79ba      	ldrb	r2, [r7, #6]
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f000 fb0e 	bl	8001b6c <ssd1306_SetCursor>
	ssd1306_WriteString("captura ", Font_11x18, White);
 8001550:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <display_start_voice_recognition_msg+0x84>)
 8001552:	2201      	movs	r2, #1
 8001554:	9200      	str	r2, [sp, #0]
 8001556:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001558:	480f      	ldr	r0, [pc, #60]	@ (8001598 <display_start_voice_recognition_msg+0x8c>)
 800155a:	f000 fae1 	bl	8001b20 <ssd1306_WriteString>
	x = 20;
 800155e:	2314      	movs	r3, #20
 8001560:	71fb      	strb	r3, [r7, #7]
	y += 18;
 8001562:	79bb      	ldrb	r3, [r7, #6]
 8001564:	3312      	adds	r3, #18
 8001566:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8001568:	79ba      	ldrb	r2, [r7, #6]
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f000 fafc 	bl	8001b6c <ssd1306_SetCursor>
	ssd1306_WriteString("de voz", Font_11x18, White);
 8001574:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <display_start_voice_recognition_msg+0x84>)
 8001576:	2201      	movs	r2, #1
 8001578:	9200      	str	r2, [sp, #0]
 800157a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800157c:	4807      	ldr	r0, [pc, #28]	@ (800159c <display_start_voice_recognition_msg+0x90>)
 800157e:	f000 facf 	bl	8001b20 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001582:	f000 f9c1 	bl	8001908 <ssd1306_UpdateScreen>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	0800b230 	.word	0x0800b230
 8001594:	0800910c 	.word	0x0800910c
 8001598:	08009118 	.word	0x08009118
 800159c:	08009124 	.word	0x08009124

080015a0 <countdown_msg>:

void countdown_msg(void){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af02      	add	r7, sp, #8
	/*Muestra mensaje de cuenta regresiva en pantalla*/
	uint8_t x = 50;
 80015a6:	2332      	movs	r3, #50	@ 0x32
 80015a8:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 26;
 80015aa:	231a      	movs	r3, #26
 80015ac:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 80015ae:	2000      	movs	r0, #0
 80015b0:	f000 f992 	bl	80018d8 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80015b4:	79ba      	ldrb	r2, [r7, #6]
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	4611      	mov	r1, r2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fad6 	bl	8001b6c <ssd1306_SetCursor>
	ssd1306_WriteString("3", Font_16x26, White);
 80015c0:	4b1e      	ldr	r3, [pc, #120]	@ (800163c <countdown_msg+0x9c>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	9200      	str	r2, [sp, #0]
 80015c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015c8:	481d      	ldr	r0, [pc, #116]	@ (8001640 <countdown_msg+0xa0>)
 80015ca:	f000 faa9 	bl	8001b20 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80015ce:	f000 f99b 	bl	8001908 <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 80015d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015d6:	f006 fba9 	bl	8007d2c <vTaskDelay>
	ssd1306_Fill(Black);
 80015da:	2000      	movs	r0, #0
 80015dc:	f000 f97c 	bl	80018d8 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80015e0:	79ba      	ldrb	r2, [r7, #6]
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	4611      	mov	r1, r2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 fac0 	bl	8001b6c <ssd1306_SetCursor>
	ssd1306_WriteString("2", Font_16x26, White);
 80015ec:	4b13      	ldr	r3, [pc, #76]	@ (800163c <countdown_msg+0x9c>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	9200      	str	r2, [sp, #0]
 80015f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f4:	4813      	ldr	r0, [pc, #76]	@ (8001644 <countdown_msg+0xa4>)
 80015f6:	f000 fa93 	bl	8001b20 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80015fa:	f000 f985 	bl	8001908 <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 80015fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001602:	f006 fb93 	bl	8007d2c <vTaskDelay>
	ssd1306_Fill(Black);
 8001606:	2000      	movs	r0, #0
 8001608:	f000 f966 	bl	80018d8 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 800160c:	79ba      	ldrb	r2, [r7, #6]
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f000 faaa 	bl	8001b6c <ssd1306_SetCursor>
	ssd1306_WriteString("1", Font_16x26, White);
 8001618:	4b08      	ldr	r3, [pc, #32]	@ (800163c <countdown_msg+0x9c>)
 800161a:	2201      	movs	r2, #1
 800161c:	9200      	str	r2, [sp, #0]
 800161e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001620:	4809      	ldr	r0, [pc, #36]	@ (8001648 <countdown_msg+0xa8>)
 8001622:	f000 fa7d 	bl	8001b20 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001626:	f000 f96f 	bl	8001908 <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 800162a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800162e:	f006 fb7d 	bl	8007d2c <vTaskDelay>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	0800b23c 	.word	0x0800b23c
 8001640:	0800912c 	.word	0x0800912c
 8001644:	08009130 	.word	0x08009130
 8001648:	08009134 	.word	0x08009134

0800164c <display_capturing_voice_msg>:

void display_capturing_voice_msg(void){
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af02      	add	r7, sp, #8
	/*Muestra mensaje que indica que se esta capturando voz*/
	uint8_t x = 10;
 8001652:	230a      	movs	r3, #10
 8001654:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 800165a:	2000      	movs	r0, #0
 800165c:	f000 f93c 	bl	80018d8 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001660:	79ba      	ldrb	r2, [r7, #6]
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	4611      	mov	r1, r2
 8001666:	4618      	mov	r0, r3
 8001668:	f000 fa80 	bl	8001b6c <ssd1306_SetCursor>
	ssd1306_WriteString("Capturando", Font_11x18, White);
 800166c:	4b0f      	ldr	r3, [pc, #60]	@ (80016ac <display_capturing_voice_msg+0x60>)
 800166e:	2201      	movs	r2, #1
 8001670:	9200      	str	r2, [sp, #0]
 8001672:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001674:	480e      	ldr	r0, [pc, #56]	@ (80016b0 <display_capturing_voice_msg+0x64>)
 8001676:	f000 fa53 	bl	8001b20 <ssd1306_WriteString>
	x = 50;
 800167a:	2332      	movs	r3, #50	@ 0x32
 800167c:	71fb      	strb	r3, [r7, #7]
	y += 18;
 800167e:	79bb      	ldrb	r3, [r7, #6]
 8001680:	3312      	adds	r3, #18
 8001682:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8001684:	79ba      	ldrb	r2, [r7, #6]
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	4611      	mov	r1, r2
 800168a:	4618      	mov	r0, r3
 800168c:	f000 fa6e 	bl	8001b6c <ssd1306_SetCursor>
	ssd1306_WriteString("...", Font_11x18, White);
 8001690:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <display_capturing_voice_msg+0x60>)
 8001692:	2201      	movs	r2, #1
 8001694:	9200      	str	r2, [sp, #0]
 8001696:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001698:	4806      	ldr	r0, [pc, #24]	@ (80016b4 <display_capturing_voice_msg+0x68>)
 800169a:	f000 fa41 	bl	8001b20 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800169e:	f000 f933 	bl	8001908 <ssd1306_UpdateScreen>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	0800b230 	.word	0x0800b230
 80016b0:	08009138 	.word	0x08009138
 80016b4:	08009144 	.word	0x08009144

080016b8 <display_recognized_voice_msg>:

void display_recognized_voice_msg(void){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af02      	add	r7, sp, #8
	/*Muestra mensaje de voz reconocida*/
	uint8_t x = 40;
 80016be:	2328      	movs	r3, #40	@ 0x28
 80016c0:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 80016c6:	2000      	movs	r0, #0
 80016c8:	f000 f906 	bl	80018d8 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80016cc:	79ba      	ldrb	r2, [r7, #6]
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	4611      	mov	r1, r2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 fa4a 	bl	8001b6c <ssd1306_SetCursor>
	ssd1306_WriteString("Voz", Font_11x18, White);
 80016d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <display_recognized_voice_msg+0x60>)
 80016da:	2201      	movs	r2, #1
 80016dc:	9200      	str	r2, [sp, #0]
 80016de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016e0:	480e      	ldr	r0, [pc, #56]	@ (800171c <display_recognized_voice_msg+0x64>)
 80016e2:	f000 fa1d 	bl	8001b20 <ssd1306_WriteString>
	x = 10;
 80016e6:	230a      	movs	r3, #10
 80016e8:	71fb      	strb	r3, [r7, #7]
	y += 18;
 80016ea:	79bb      	ldrb	r3, [r7, #6]
 80016ec:	3312      	adds	r3, #18
 80016ee:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 80016f0:	79ba      	ldrb	r2, [r7, #6]
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 fa38 	bl	8001b6c <ssd1306_SetCursor>
	ssd1306_WriteString("reconocida", Font_11x18, White);
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <display_recognized_voice_msg+0x60>)
 80016fe:	2201      	movs	r2, #1
 8001700:	9200      	str	r2, [sp, #0]
 8001702:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001704:	4806      	ldr	r0, [pc, #24]	@ (8001720 <display_recognized_voice_msg+0x68>)
 8001706:	f000 fa0b 	bl	8001b20 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800170a:	f000 f8fd 	bl	8001908 <ssd1306_UpdateScreen>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	0800b230 	.word	0x0800b230
 800171c:	08009148 	.word	0x08009148
 8001720:	0800914c 	.word	0x0800914c

08001724 <display_not_recognized_voice_msg>:


void display_not_recognized_voice_msg(void){
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af02      	add	r7, sp, #8
	/*Muestra mensaje de voz no reconocida*/
	uint8_t x = 20;
 800172a:	2314      	movs	r3, #20
 800172c:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8001732:	2000      	movs	r0, #0
 8001734:	f000 f8d0 	bl	80018d8 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001738:	79ba      	ldrb	r2, [r7, #6]
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	4611      	mov	r1, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f000 fa14 	bl	8001b6c <ssd1306_SetCursor>
	ssd1306_WriteString("Voz no", Font_11x18, White);
 8001744:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <display_not_recognized_voice_msg+0x60>)
 8001746:	2201      	movs	r2, #1
 8001748:	9200      	str	r2, [sp, #0]
 800174a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800174c:	480e      	ldr	r0, [pc, #56]	@ (8001788 <display_not_recognized_voice_msg+0x64>)
 800174e:	f000 f9e7 	bl	8001b20 <ssd1306_WriteString>
	x = 10;
 8001752:	230a      	movs	r3, #10
 8001754:	71fb      	strb	r3, [r7, #7]
	y += 18;
 8001756:	79bb      	ldrb	r3, [r7, #6]
 8001758:	3312      	adds	r3, #18
 800175a:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 800175c:	79ba      	ldrb	r2, [r7, #6]
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f000 fa02 	bl	8001b6c <ssd1306_SetCursor>
	ssd1306_WriteString("reconocida", Font_11x18, White);
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <display_not_recognized_voice_msg+0x60>)
 800176a:	2201      	movs	r2, #1
 800176c:	9200      	str	r2, [sp, #0]
 800176e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001770:	4806      	ldr	r0, [pc, #24]	@ (800178c <display_not_recognized_voice_msg+0x68>)
 8001772:	f000 f9d5 	bl	8001b20 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001776:	f000 f8c7 	bl	8001908 <ssd1306_UpdateScreen>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	0800b230 	.word	0x0800b230
 8001788:	08009158 	.word	0x08009158
 800178c:	0800914c 	.word	0x0800914c

08001790 <ssd1306_Reset>:
#include "main.h"
#include "cmsis_os.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af04      	add	r7, sp, #16
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	9302      	str	r3, [sp, #8]
 80017b0:	2301      	movs	r3, #1
 80017b2:	9301      	str	r3, [sp, #4]
 80017b4:	1dfb      	adds	r3, r7, #7
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	2301      	movs	r3, #1
 80017ba:	2200      	movs	r2, #0
 80017bc:	2178      	movs	r1, #120	@ 0x78
 80017be:	4803      	ldr	r0, [pc, #12]	@ (80017cc <ssd1306_WriteCommand+0x2c>)
 80017c0:	f002 fd04 	bl	80041cc <HAL_I2C_Mem_Write>
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	2000035c 	.word	0x2000035c

080017d0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af04      	add	r7, sp, #16
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	b29b      	uxth	r3, r3
 80017de:	f04f 32ff 	mov.w	r2, #4294967295
 80017e2:	9202      	str	r2, [sp, #8]
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	2301      	movs	r3, #1
 80017ec:	2240      	movs	r2, #64	@ 0x40
 80017ee:	2178      	movs	r1, #120	@ 0x78
 80017f0:	4803      	ldr	r0, [pc, #12]	@ (8001800 <ssd1306_WriteData+0x30>)
 80017f2:	f002 fceb 	bl	80041cc <HAL_I2C_Mem_Write>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000035c 	.word	0x2000035c

08001804 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001808:	f7ff ffc2 	bl	8001790 <ssd1306_Reset>

    // Wait for the screen to boot
    vTaskDelay(100 / portTICK_RATE_MS);
 800180c:	2064      	movs	r0, #100	@ 0x64
 800180e:	f006 fa8d 	bl	8007d2c <vTaskDelay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001812:	2000      	movs	r0, #0
 8001814:	f000 f9d6 	bl	8001bc4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001818:	2020      	movs	r0, #32
 800181a:	f7ff ffc1 	bl	80017a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800181e:	2000      	movs	r0, #0
 8001820:	f7ff ffbe 	bl	80017a0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001824:	20b0      	movs	r0, #176	@ 0xb0
 8001826:	f7ff ffbb 	bl	80017a0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800182a:	20c8      	movs	r0, #200	@ 0xc8
 800182c:	f7ff ffb8 	bl	80017a0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001830:	2000      	movs	r0, #0
 8001832:	f7ff ffb5 	bl	80017a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001836:	2010      	movs	r0, #16
 8001838:	f7ff ffb2 	bl	80017a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800183c:	2040      	movs	r0, #64	@ 0x40
 800183e:	f7ff ffaf 	bl	80017a0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001842:	20ff      	movs	r0, #255	@ 0xff
 8001844:	f000 f9aa 	bl	8001b9c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001848:	20a1      	movs	r0, #161	@ 0xa1
 800184a:	f7ff ffa9 	bl	80017a0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800184e:	20a6      	movs	r0, #166	@ 0xa6
 8001850:	f7ff ffa6 	bl	80017a0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001854:	20a8      	movs	r0, #168	@ 0xa8
 8001856:	f7ff ffa3 	bl	80017a0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800185a:	203f      	movs	r0, #63	@ 0x3f
 800185c:	f7ff ffa0 	bl	80017a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001860:	20a4      	movs	r0, #164	@ 0xa4
 8001862:	f7ff ff9d 	bl	80017a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001866:	20d3      	movs	r0, #211	@ 0xd3
 8001868:	f7ff ff9a 	bl	80017a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800186c:	2000      	movs	r0, #0
 800186e:	f7ff ff97 	bl	80017a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001872:	20d5      	movs	r0, #213	@ 0xd5
 8001874:	f7ff ff94 	bl	80017a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001878:	20f0      	movs	r0, #240	@ 0xf0
 800187a:	f7ff ff91 	bl	80017a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800187e:	20d9      	movs	r0, #217	@ 0xd9
 8001880:	f7ff ff8e 	bl	80017a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001884:	2022      	movs	r0, #34	@ 0x22
 8001886:	f7ff ff8b 	bl	80017a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800188a:	20da      	movs	r0, #218	@ 0xda
 800188c:	f7ff ff88 	bl	80017a0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001890:	2012      	movs	r0, #18
 8001892:	f7ff ff85 	bl	80017a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001896:	20db      	movs	r0, #219	@ 0xdb
 8001898:	f7ff ff82 	bl	80017a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800189c:	2020      	movs	r0, #32
 800189e:	f7ff ff7f 	bl	80017a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80018a2:	208d      	movs	r0, #141	@ 0x8d
 80018a4:	f7ff ff7c 	bl	80017a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80018a8:	2014      	movs	r0, #20
 80018aa:	f7ff ff79 	bl	80017a0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80018ae:	2001      	movs	r0, #1
 80018b0:	f000 f988 	bl	8001bc4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80018b4:	2000      	movs	r0, #0
 80018b6:	f000 f80f 	bl	80018d8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80018ba:	f000 f825 	bl	8001908 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80018be:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <ssd1306_Init+0xd0>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80018c4:	4b03      	ldr	r3, [pc, #12]	@ (80018d4 <ssd1306_Init+0xd0>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80018ca:	4b02      	ldr	r3, [pc, #8]	@ (80018d4 <ssd1306_Init+0xd0>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	711a      	strb	r2, [r3, #4]
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000910 	.word	0x20000910

080018d8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <ssd1306_Fill+0x14>
 80018e8:	2300      	movs	r3, #0
 80018ea:	e000      	b.n	80018ee <ssd1306_Fill+0x16>
 80018ec:	23ff      	movs	r3, #255	@ 0xff
 80018ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018f2:	4619      	mov	r1, r3
 80018f4:	4803      	ldr	r0, [pc, #12]	@ (8001904 <ssd1306_Fill+0x2c>)
 80018f6:	f007 fb75 	bl	8008fe4 <memset>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000510 	.word	0x20000510

08001908 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800190e:	2300      	movs	r3, #0
 8001910:	71fb      	strb	r3, [r7, #7]
 8001912:	e016      	b.n	8001942 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	3b50      	subs	r3, #80	@ 0x50
 8001918:	b2db      	uxtb	r3, r3
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ff40 	bl	80017a0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001920:	2000      	movs	r0, #0
 8001922:	f7ff ff3d 	bl	80017a0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001926:	2010      	movs	r0, #16
 8001928:	f7ff ff3a 	bl	80017a0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	01db      	lsls	r3, r3, #7
 8001930:	4a08      	ldr	r2, [pc, #32]	@ (8001954 <ssd1306_UpdateScreen+0x4c>)
 8001932:	4413      	add	r3, r2
 8001934:	2180      	movs	r1, #128	@ 0x80
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff ff4a 	bl	80017d0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	3301      	adds	r3, #1
 8001940:	71fb      	strb	r3, [r7, #7]
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	2b07      	cmp	r3, #7
 8001946:	d9e5      	bls.n	8001914 <ssd1306_UpdateScreen+0xc>
    }
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000510 	.word	0x20000510

08001958 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
 8001962:	460b      	mov	r3, r1
 8001964:	71bb      	strb	r3, [r7, #6]
 8001966:	4613      	mov	r3, r2
 8001968:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	2b00      	cmp	r3, #0
 8001970:	db3d      	blt.n	80019ee <ssd1306_DrawPixel+0x96>
 8001972:	79bb      	ldrb	r3, [r7, #6]
 8001974:	2b3f      	cmp	r3, #63	@ 0x3f
 8001976:	d83a      	bhi.n	80019ee <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001978:	797b      	ldrb	r3, [r7, #5]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d11a      	bne.n	80019b4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800197e:	79fa      	ldrb	r2, [r7, #7]
 8001980:	79bb      	ldrb	r3, [r7, #6]
 8001982:	08db      	lsrs	r3, r3, #3
 8001984:	b2d8      	uxtb	r0, r3
 8001986:	4603      	mov	r3, r0
 8001988:	01db      	lsls	r3, r3, #7
 800198a:	4413      	add	r3, r2
 800198c:	4a1b      	ldr	r2, [pc, #108]	@ (80019fc <ssd1306_DrawPixel+0xa4>)
 800198e:	5cd3      	ldrb	r3, [r2, r3]
 8001990:	b25a      	sxtb	r2, r3
 8001992:	79bb      	ldrb	r3, [r7, #6]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	2101      	movs	r1, #1
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	b25b      	sxtb	r3, r3
 80019a0:	4313      	orrs	r3, r2
 80019a2:	b259      	sxtb	r1, r3
 80019a4:	79fa      	ldrb	r2, [r7, #7]
 80019a6:	4603      	mov	r3, r0
 80019a8:	01db      	lsls	r3, r3, #7
 80019aa:	4413      	add	r3, r2
 80019ac:	b2c9      	uxtb	r1, r1
 80019ae:	4a13      	ldr	r2, [pc, #76]	@ (80019fc <ssd1306_DrawPixel+0xa4>)
 80019b0:	54d1      	strb	r1, [r2, r3]
 80019b2:	e01d      	b.n	80019f0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80019b4:	79fa      	ldrb	r2, [r7, #7]
 80019b6:	79bb      	ldrb	r3, [r7, #6]
 80019b8:	08db      	lsrs	r3, r3, #3
 80019ba:	b2d8      	uxtb	r0, r3
 80019bc:	4603      	mov	r3, r0
 80019be:	01db      	lsls	r3, r3, #7
 80019c0:	4413      	add	r3, r2
 80019c2:	4a0e      	ldr	r2, [pc, #56]	@ (80019fc <ssd1306_DrawPixel+0xa4>)
 80019c4:	5cd3      	ldrb	r3, [r2, r3]
 80019c6:	b25a      	sxtb	r2, r3
 80019c8:	79bb      	ldrb	r3, [r7, #6]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	2101      	movs	r1, #1
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	b25b      	sxtb	r3, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	4013      	ands	r3, r2
 80019dc:	b259      	sxtb	r1, r3
 80019de:	79fa      	ldrb	r2, [r7, #7]
 80019e0:	4603      	mov	r3, r0
 80019e2:	01db      	lsls	r3, r3, #7
 80019e4:	4413      	add	r3, r2
 80019e6:	b2c9      	uxtb	r1, r1
 80019e8:	4a04      	ldr	r2, [pc, #16]	@ (80019fc <ssd1306_DrawPixel+0xa4>)
 80019ea:	54d1      	strb	r1, [r2, r3]
 80019ec:	e000      	b.n	80019f0 <ssd1306_DrawPixel+0x98>
        return;
 80019ee:	bf00      	nop
    }
}
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	20000510 	.word	0x20000510

08001a00 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001a00:	b590      	push	{r4, r7, lr}
 8001a02:	b089      	sub	sp, #36	@ 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4604      	mov	r4, r0
 8001a08:	4638      	mov	r0, r7
 8001a0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001a0e:	4623      	mov	r3, r4
 8001a10:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	2b1f      	cmp	r3, #31
 8001a16:	d902      	bls.n	8001a1e <ssd1306_WriteChar+0x1e>
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	2b7e      	cmp	r3, #126	@ 0x7e
 8001a1c:	d901      	bls.n	8001a22 <ssd1306_WriteChar+0x22>
        return 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e077      	b.n	8001b12 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001a22:	4b3e      	ldr	r3, [pc, #248]	@ (8001b1c <ssd1306_WriteChar+0x11c>)
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	783b      	ldrb	r3, [r7, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	2b80      	cmp	r3, #128	@ 0x80
 8001a2e:	dc06      	bgt.n	8001a3e <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001a30:	4b3a      	ldr	r3, [pc, #232]	@ (8001b1c <ssd1306_WriteChar+0x11c>)
 8001a32:	885b      	ldrh	r3, [r3, #2]
 8001a34:	461a      	mov	r2, r3
 8001a36:	787b      	ldrb	r3, [r7, #1]
 8001a38:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001a3a:	2b40      	cmp	r3, #64	@ 0x40
 8001a3c:	dd01      	ble.n	8001a42 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e067      	b.n	8001b12 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
 8001a46:	e04e      	b.n	8001ae6 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	3b20      	subs	r3, #32
 8001a4e:	7879      	ldrb	r1, [r7, #1]
 8001a50:	fb01 f303 	mul.w	r3, r1, r3
 8001a54:	4619      	mov	r1, r3
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	440b      	add	r3, r1
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4413      	add	r3, r2
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
 8001a66:	e036      	b.n	8001ad6 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d013      	beq.n	8001aa0 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001a78:	4b28      	ldr	r3, [pc, #160]	@ (8001b1c <ssd1306_WriteChar+0x11c>)
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	b2d8      	uxtb	r0, r3
 8001a86:	4b25      	ldr	r3, [pc, #148]	@ (8001b1c <ssd1306_WriteChar+0x11c>)
 8001a88:	885b      	ldrh	r3, [r3, #2]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	4413      	add	r3, r2
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f7ff ff5d 	bl	8001958 <ssd1306_DrawPixel>
 8001a9e:	e017      	b.n	8001ad0 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b1c <ssd1306_WriteChar+0x11c>)
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	4413      	add	r3, r2
 8001aac:	b2d8      	uxtb	r0, r3
 8001aae:	4b1b      	ldr	r3, [pc, #108]	@ (8001b1c <ssd1306_WriteChar+0x11c>)
 8001ab0:	885b      	ldrh	r3, [r3, #2]
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	b2d9      	uxtb	r1, r3
 8001abc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	bf0c      	ite	eq
 8001ac4:	2301      	moveq	r3, #1
 8001ac6:	2300      	movne	r3, #0
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	461a      	mov	r2, r3
 8001acc:	f7ff ff44 	bl	8001958 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	61bb      	str	r3, [r7, #24]
 8001ad6:	783b      	ldrb	r3, [r7, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d3c3      	bcc.n	8001a68 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	61fb      	str	r3, [r7, #28]
 8001ae6:	787b      	ldrb	r3, [r7, #1]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d3ab      	bcc.n	8001a48 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001af0:	4b0a      	ldr	r3, [pc, #40]	@ (8001b1c <ssd1306_WriteChar+0x11c>)
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	2a00      	cmp	r2, #0
 8001af8:	d005      	beq.n	8001b06 <ssd1306_WriteChar+0x106>
 8001afa:	68b9      	ldr	r1, [r7, #8]
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	3a20      	subs	r2, #32
 8001b00:	440a      	add	r2, r1
 8001b02:	7812      	ldrb	r2, [r2, #0]
 8001b04:	e000      	b.n	8001b08 <ssd1306_WriteChar+0x108>
 8001b06:	783a      	ldrb	r2, [r7, #0]
 8001b08:	4413      	add	r3, r2
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	4b03      	ldr	r3, [pc, #12]	@ (8001b1c <ssd1306_WriteChar+0x11c>)
 8001b0e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3724      	adds	r7, #36	@ 0x24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd90      	pop	{r4, r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000910 	.word	0x20000910

08001b20 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	4638      	mov	r0, r7
 8001b2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001b2e:	e013      	b.n	8001b58 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	7818      	ldrb	r0, [r3, #0]
 8001b34:	7e3b      	ldrb	r3, [r7, #24]
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	463b      	mov	r3, r7
 8001b3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b3c:	f7ff ff60 	bl	8001a00 <ssd1306_WriteChar>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d002      	beq.n	8001b52 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	e008      	b.n	8001b64 <ssd1306_WriteString+0x44>
        }
        str++;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	3301      	adds	r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1e7      	bne.n	8001b30 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	781b      	ldrb	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	460a      	mov	r2, r1
 8001b76:	71fb      	strb	r3, [r7, #7]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	4b05      	ldr	r3, [pc, #20]	@ (8001b98 <ssd1306_SetCursor+0x2c>)
 8001b82:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001b84:	79bb      	ldrb	r3, [r7, #6]
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	4b03      	ldr	r3, [pc, #12]	@ (8001b98 <ssd1306_SetCursor+0x2c>)
 8001b8a:	805a      	strh	r2, [r3, #2]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	20000910 	.word	0x20000910

08001b9c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001ba6:	2381      	movs	r3, #129	@ 0x81
 8001ba8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fdf7 	bl	80017a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fdf3 	bl	80017a0 <ssd1306_WriteCommand>
}
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001bd4:	23af      	movs	r3, #175	@ 0xaf
 8001bd6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001bd8:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <ssd1306_SetDisplayOn+0x38>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	715a      	strb	r2, [r3, #5]
 8001bde:	e004      	b.n	8001bea <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001be0:	23ae      	movs	r3, #174	@ 0xae
 8001be2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001be4:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <ssd1306_SetDisplayOn+0x38>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fdd7 	bl	80017a0 <ssd1306_WriteCommand>
}
 8001bf2:	bf00      	nop
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000910 	.word	0x20000910

08001c00 <handle_keypad_input>:
	TickType_t start_time;
	char buffer[SEQUENCE_LENGTH + 1];
}keypad_context_t;


indicatorMessage handle_keypad_input(char input, char *buffer, uint8_t *send_flag){
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
 8001c0c:	73fb      	strb	r3, [r7, #15]
	char comp_buffer[7] = "123456";
 8001c0e:	4a6e      	ldr	r2, [pc, #440]	@ (8001dc8 <handle_keypad_input+0x1c8>)
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c18:	6018      	str	r0, [r3, #0]
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	8019      	strh	r1, [r3, #0]
 8001c1e:	3302      	adds	r3, #2
 8001c20:	0c0a      	lsrs	r2, r1, #16
 8001c22:	701a      	strb	r2, [r3, #0]
	static keypad_context_t context = { .current_state = ESPERANDO_DIGITO_1,
										.current_index = 0,
										.start_time = 0,					};
	indicatorMessage current_message = PANTALLA_IDLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	75fb      	strb	r3, [r7, #23]
	switch(context.current_state){
 8001c28:	4b68      	ldr	r3, [pc, #416]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b07      	cmp	r3, #7
 8001c2e:	f000 80a2 	beq.w	8001d76 <handle_keypad_input+0x176>
 8001c32:	2b07      	cmp	r3, #7
 8001c34:	f300 80b4 	bgt.w	8001da0 <handle_keypad_input+0x1a0>
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d007      	beq.n	8001c4c <handle_keypad_input+0x4c>
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f2c0 80af 	blt.w	8001da0 <handle_keypad_input+0x1a0>
 8001c42:	3b01      	subs	r3, #1
 8001c44:	2b05      	cmp	r3, #5
 8001c46:	f200 80ab 	bhi.w	8001da0 <handle_keypad_input+0x1a0>
 8001c4a:	e01c      	b.n	8001c86 <handle_keypad_input+0x86>
	case ESPERANDO_DIGITO_1:
		if(input != 0 && input != BORRAR_DIGITO && input != ENTER){
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d016      	beq.n	8001c80 <handle_keypad_input+0x80>
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	2b23      	cmp	r3, #35	@ 0x23
 8001c56:	d013      	beq.n	8001c80 <handle_keypad_input+0x80>
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c5c:	d010      	beq.n	8001c80 <handle_keypad_input+0x80>
			buffer[0] = input;													//Guardo digito en el buffer
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	7bfa      	ldrb	r2, [r7, #15]
 8001c62:	701a      	strb	r2, [r3, #0]
			context.current_index = 1;
 8001c64:	4b59      	ldr	r3, [pc, #356]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	705a      	strb	r2, [r3, #1]
			context.start_time = xTaskGetTickCount();							//Reinicio el timeout
 8001c6a:	f006 f9a3 	bl	8007fb4 <xTaskGetTickCount>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	4a56      	ldr	r2, [pc, #344]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001c72:	6053      	str	r3, [r2, #4]
			context.current_state = ESPERANDO_DIGITO_2;							//Avanzo al siguiente estado
 8001c74:	4b55      	ldr	r3, [pc, #340]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	701a      	strb	r2, [r3, #0]
			current_message = PANTALLA_INGRESO_KEYPAD;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	75fb      	strb	r3, [r7, #23]
		}
		else{
			current_message = PANTALLA_DE_INICIO;
		}
		break;
 8001c7e:	e09d      	b.n	8001dbc <handle_keypad_input+0x1bc>
			current_message = PANTALLA_DE_INICIO;
 8001c80:	2301      	movs	r3, #1
 8001c82:	75fb      	strb	r3, [r7, #23]
		break;
 8001c84:	e09a      	b.n	8001dbc <handle_keypad_input+0x1bc>
	case ESPERANDO_DIGITO_3:
	case ESPERANDO_DIGITO_4:
	case ESPERANDO_DIGITO_5:
	case ESPERANDO_DIGITO_6:
	case ESPERANDO_CONFIRMACION:
		if((xTaskGetTickCount() - context.start_time) < pdMS_TO_TICKS(KEYPAD_TIMEOUT)){
 8001c86:	f006 f995 	bl	8007fb4 <xTaskGetTickCount>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	4b4f      	ldr	r3, [pc, #316]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d867      	bhi.n	8001d6a <handle_keypad_input+0x16a>
			if(input != 0){
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d061      	beq.n	8001d64 <handle_keypad_input+0x164>
				if(input == BORRAR_DIGITO){
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	2b23      	cmp	r3, #35	@ 0x23
 8001ca4:	d125      	bne.n	8001cf2 <handle_keypad_input+0xf2>
					if(context.current_index > 0){
 8001ca6:	4b49      	ldr	r3, [pc, #292]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001ca8:	785b      	ldrb	r3, [r3, #1]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 8085 	beq.w	8001dba <handle_keypad_input+0x1ba>
						context.current_index--;
 8001cb0:	4b46      	ldr	r3, [pc, #280]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001cb2:	785b      	ldrb	r3, [r3, #1]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	4b44      	ldr	r3, [pc, #272]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001cba:	705a      	strb	r2, [r3, #1]
						buffer[context.current_index] = '\0';					//Borro el contenido previo
 8001cbc:	4b43      	ldr	r3, [pc, #268]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001cbe:	785b      	ldrb	r3, [r3, #1]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
						context.start_time = xTaskGetTickCount();				//Reinicio el timeout
 8001cca:	f006 f973 	bl	8007fb4 <xTaskGetTickCount>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4a3e      	ldr	r2, [pc, #248]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001cd2:	6053      	str	r3, [r2, #4]
						current_message = PANTALLA_BORRAR_KEYPAD;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	75fb      	strb	r3, [r7, #23]
						context.current_state = (context.current_state > ESPERANDO_DIGITO_1) ? context.current_state - 1 : ESPERANDO_DIGITO_1;
 8001cd8:	4b3c      	ldr	r3, [pc, #240]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d004      	beq.n	8001cea <handle_keypad_input+0xea>
 8001ce0:	4b3a      	ldr	r3, [pc, #232]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	e000      	b.n	8001cec <handle_keypad_input+0xec>
 8001cea:	2300      	movs	r3, #0
 8001cec:	4a37      	ldr	r2, [pc, #220]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001cee:	7013      	strb	r3, [r2, #0]
		}
		else{
			context.current_state = TIMEOUT;
			current_message = PANTALLA_TIMEOUT;
		}
		break;
 8001cf0:	e063      	b.n	8001dba <handle_keypad_input+0x1ba>
				else if(input == ENTER){
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8001cf6:	d10d      	bne.n	8001d14 <handle_keypad_input+0x114>
					if(context.current_state == ESPERANDO_CONFIRMACION){
 8001cf8:	4b34      	ldr	r3, [pc, #208]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b06      	cmp	r3, #6
 8001cfe:	d103      	bne.n	8001d08 <handle_keypad_input+0x108>
						context.current_state = BUSQUEDA_DE_USUARIO;
 8001d00:	4b32      	ldr	r3, [pc, #200]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001d02:	2207      	movs	r2, #7
 8001d04:	701a      	strb	r2, [r3, #0]
		break;
 8001d06:	e058      	b.n	8001dba <handle_keypad_input+0x1ba>
						context.current_state = SECUENCIA_INCOMPLETA;
 8001d08:	4b30      	ldr	r3, [pc, #192]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001d0a:	2208      	movs	r2, #8
 8001d0c:	701a      	strb	r2, [r3, #0]
						current_message = PANTALLA_SECUENCIA_INCOMPLETA;
 8001d0e:	230b      	movs	r3, #11
 8001d10:	75fb      	strb	r3, [r7, #23]
		break;
 8001d12:	e052      	b.n	8001dba <handle_keypad_input+0x1ba>
					if(context.current_index < SEQUENCE_LENGTH){
 8001d14:	4b2d      	ldr	r3, [pc, #180]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001d16:	785b      	ldrb	r3, [r3, #1]
 8001d18:	2b05      	cmp	r3, #5
 8001d1a:	d84e      	bhi.n	8001dba <handle_keypad_input+0x1ba>
						buffer[context.current_index++] = input;				//Agrego el digito al buffer
 8001d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001d1e:	785b      	ldrb	r3, [r3, #1]
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	b2d1      	uxtb	r1, r2
 8001d24:	4a29      	ldr	r2, [pc, #164]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001d26:	7051      	strb	r1, [r2, #1]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	7bfa      	ldrb	r2, [r7, #15]
 8001d30:	701a      	strb	r2, [r3, #0]
						buffer[context.current_index] = '\0';					//Aseguro que el buffer siempre termine en caracter nulo
 8001d32:	4b26      	ldr	r3, [pc, #152]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001d34:	785b      	ldrb	r3, [r3, #1]
 8001d36:	461a      	mov	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
						context.start_time = xTaskGetTickCount();				//Reinicio el timeout
 8001d40:	f006 f938 	bl	8007fb4 <xTaskGetTickCount>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4a21      	ldr	r2, [pc, #132]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001d48:	6053      	str	r3, [r2, #4]
						current_message = PANTALLA_INGRESO_KEYPAD;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	75fb      	strb	r3, [r7, #23]
						if(context.current_state != ESPERANDO_CONFIRMACION){
 8001d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d031      	beq.n	8001dba <handle_keypad_input+0x1ba>
							context.current_state++;
 8001d56:	4b1d      	ldr	r3, [pc, #116]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001d60:	701a      	strb	r2, [r3, #0]
		break;
 8001d62:	e02a      	b.n	8001dba <handle_keypad_input+0x1ba>
				current_message = PANTALLA_IDLE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	75fb      	strb	r3, [r7, #23]
		break;
 8001d68:	e027      	b.n	8001dba <handle_keypad_input+0x1ba>
			context.current_state = TIMEOUT;
 8001d6a:	4b18      	ldr	r3, [pc, #96]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001d6c:	2209      	movs	r2, #9
 8001d6e:	701a      	strb	r2, [r3, #0]
			current_message = PANTALLA_TIMEOUT;
 8001d70:	230a      	movs	r3, #10
 8001d72:	75fb      	strb	r3, [r7, #23]
		break;
 8001d74:	e021      	b.n	8001dba <handle_keypad_input+0x1ba>
	case BUSQUEDA_DE_USUARIO:
		//*send_flag = 1;															//Habilito flag para enviar el string
		if(strcmp(buffer, comp_buffer) == 0){
 8001d76:	f107 0310 	add.w	r3, r7, #16
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	68b8      	ldr	r0, [r7, #8]
 8001d7e:	f7fe fa2f 	bl	80001e0 <strcmp>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d102      	bne.n	8001d8e <handle_keypad_input+0x18e>
			current_message = PANTALLA_USUARIO_ENCONTRADO;
 8001d88:	2304      	movs	r3, #4
 8001d8a:	75fb      	strb	r3, [r7, #23]
 8001d8c:	e001      	b.n	8001d92 <handle_keypad_input+0x192>
		}
		else{
			current_message = PANTALLA_USUARIO_NO_EXISTE;
 8001d8e:	2305      	movs	r3, #5
 8001d90:	75fb      	strb	r3, [r7, #23]
		}
		context.current_state = ESPERANDO_DIGITO_1;
 8001d92:	4b0e      	ldr	r3, [pc, #56]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]
		context.current_index = 0;
 8001d98:	4b0c      	ldr	r3, [pc, #48]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	705a      	strb	r2, [r3, #1]
		//current_message = PANTALLA_DE_INICIO;									//Luego del procesamiento se vuelve al estado inicial
		break;
 8001d9e:	e00d      	b.n	8001dbc <handle_keypad_input+0x1bc>
	case SECUENCIA_INCOMPLETA:
	case TIMEOUT:
	default:
		clear_buffer(buffer, SEQUENCE_LENGTH + 1);
 8001da0:	2107      	movs	r1, #7
 8001da2:	68b8      	ldr	r0, [r7, #8]
 8001da4:	f000 fd7c 	bl	80028a0 <clear_buffer>
		context.current_state = ESPERANDO_DIGITO_1;								//Vuelvo al estado inicial
 8001da8:	4b08      	ldr	r3, [pc, #32]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
		context.current_index = 0;
 8001dae:	4b07      	ldr	r3, [pc, #28]	@ (8001dcc <handle_keypad_input+0x1cc>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	705a      	strb	r2, [r3, #1]
		current_message = PANTALLA_DE_INICIO;
 8001db4:	2301      	movs	r3, #1
 8001db6:	75fb      	strb	r3, [r7, #23]
		break;
 8001db8:	e000      	b.n	8001dbc <handle_keypad_input+0x1bc>
		break;
 8001dba:	bf00      	nop
	}
	return current_message;
 8001dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	08009160 	.word	0x08009160
 8001dcc:	20000918 	.word	0x20000918

08001dd0 <set_row>:
	      	  	  	  	  		  	  	  	  {'4', '5', '6', 'B'},
											  {'7', '8', '9', 'C'},
											  {'*', '0', '#', 'D'} };

/*================[Private functions]====================*/
static void set_row(row_t row){
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIO_ROW, row, GPIO_PIN_SET);
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	4619      	mov	r1, r3
 8001de0:	4803      	ldr	r0, [pc, #12]	@ (8001df0 <set_row+0x20>)
 8001de2:	f002 f895 	bl	8003f10 <HAL_GPIO_WritePin>
	return;
 8001de6:	bf00      	nop
}
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40020800 	.word	0x40020800

08001df4 <reset_row>:

static void reset_row(row_t row){
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIO_ROW, row, GPIO_PIN_RESET);
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	2200      	movs	r2, #0
 8001e02:	4619      	mov	r1, r3
 8001e04:	4803      	ldr	r0, [pc, #12]	@ (8001e14 <reset_row+0x20>)
 8001e06:	f002 f883 	bl	8003f10 <HAL_GPIO_WritePin>
	return;
 8001e0a:	bf00      	nop
}
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40020800 	.word	0x40020800

08001e18 <read_col>:

static GPIO_PinState read_col(col_t col){
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
	return HAL_GPIO_ReadPin(GPIO_COL, col);
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	4619      	mov	r1, r3
 8001e28:	4803      	ldr	r0, [pc, #12]	@ (8001e38 <read_col+0x20>)
 8001e2a:	f002 f859 	bl	8003ee0 <HAL_GPIO_ReadPin>
 8001e2e:	4603      	mov	r3, r0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40020800 	.word	0x40020800

08001e3c <read_keypad>:

/*================[Public functions]=====================*/
char read_keypad(void){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
	/* La funcion barre las filas del keypad, activando una por una individualmente y leyendo la columna asociada,
	 * para así poder triangular la tecla presionada. Se realiza doble confirmacion de tecla presionada.
	 */
	char key_pressed;
	for(uint8_t i = 0; i < ROW_LENGTH; i++){
 8001e42:	2300      	movs	r3, #0
 8001e44:	71fb      	strb	r3, [r7, #7]
 8001e46:	e04c      	b.n	8001ee2 <read_keypad+0xa6>
		set_row(keypad_rows[i]);
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8001ef4 <read_keypad+0xb8>)
 8001e4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ffbd 	bl	8001dd0 <set_row>
		for(uint8_t j = 0; j < COL_LENGTH; j++){
 8001e56:	2300      	movs	r3, #0
 8001e58:	71bb      	strb	r3, [r7, #6]
 8001e5a:	e035      	b.n	8001ec8 <read_keypad+0x8c>
			if(read_col(keypad_cols[j]) == GPIO_PIN_SET){					//Verifico si alguna columna esta en alto (tecla presionada)
 8001e5c:	79bb      	ldrb	r3, [r7, #6]
 8001e5e:	4a26      	ldr	r2, [pc, #152]	@ (8001ef8 <read_keypad+0xbc>)
 8001e60:	5cd3      	ldrb	r3, [r2, r3]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff ffd8 	bl	8001e18 <read_col>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d129      	bne.n	8001ec2 <read_keypad+0x86>
				vTaskDelay(20 / portTICK_RATE_MS);							//Si una de las columnas dio alto, espero 20ms y verifico que siga en alto para confirmar
 8001e6e:	2014      	movs	r0, #20
 8001e70:	f005 ff5c 	bl	8007d2c <vTaskDelay>
				if(read_col(keypad_cols[j]) == GPIO_PIN_SET){
 8001e74:	79bb      	ldrb	r3, [r7, #6]
 8001e76:	4a20      	ldr	r2, [pc, #128]	@ (8001ef8 <read_keypad+0xbc>)
 8001e78:	5cd3      	ldrb	r3, [r2, r3]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ffcc 	bl	8001e18 <read_col>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d11d      	bne.n	8001ec2 <read_keypad+0x86>
					key_pressed = keypad_chars[i][j];						//Guardo la tecla presionada
 8001e86:	79fa      	ldrb	r2, [r7, #7]
 8001e88:	79bb      	ldrb	r3, [r7, #6]
 8001e8a:	491c      	ldr	r1, [pc, #112]	@ (8001efc <read_keypad+0xc0>)
 8001e8c:	0092      	lsls	r2, r2, #2
 8001e8e:	440a      	add	r2, r1
 8001e90:	4413      	add	r3, r2
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	717b      	strb	r3, [r7, #5]
					while(read_col(keypad_cols[j]) == GPIO_PIN_SET);		//Espero a que se deje de apretar la tecla
 8001e96:	bf00      	nop
 8001e98:	79bb      	ldrb	r3, [r7, #6]
 8001e9a:	4a17      	ldr	r2, [pc, #92]	@ (8001ef8 <read_keypad+0xbc>)
 8001e9c:	5cd3      	ldrb	r3, [r2, r3]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff ffba 	bl	8001e18 <read_col>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d0f6      	beq.n	8001e98 <read_keypad+0x5c>
					reset_row(keypad_rows[i]);								//Reseteo la fila en alto antes de salir de la funcion
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	4a11      	ldr	r2, [pc, #68]	@ (8001ef4 <read_keypad+0xb8>)
 8001eae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff ff9e 	bl	8001df4 <reset_row>
					vTaskDelay(10/portTICK_RATE_MS);						//Pequeño delay para asegurar que el boton fue liberado completamente
 8001eb8:	200a      	movs	r0, #10
 8001eba:	f005 ff37 	bl	8007d2c <vTaskDelay>
					return key_pressed;
 8001ebe:	797b      	ldrb	r3, [r7, #5]
 8001ec0:	e013      	b.n	8001eea <read_keypad+0xae>
		for(uint8_t j = 0; j < COL_LENGTH; j++){
 8001ec2:	79bb      	ldrb	r3, [r7, #6]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	71bb      	strb	r3, [r7, #6]
 8001ec8:	79bb      	ldrb	r3, [r7, #6]
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d9c6      	bls.n	8001e5c <read_keypad+0x20>
				}
			}
		}
		reset_row(keypad_rows[i]);
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	4a08      	ldr	r2, [pc, #32]	@ (8001ef4 <read_keypad+0xb8>)
 8001ed2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff ff8c 	bl	8001df4 <reset_row>
	for(uint8_t i = 0; i < ROW_LENGTH; i++){
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	71fb      	strb	r3, [r7, #7]
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d9af      	bls.n	8001e48 <read_keypad+0xc>
	}
	return 0;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000004 	.word	0x20000004
 8001ef8:	2000000c 	.word	0x2000000c
 8001efc:	20000010 	.word	0x20000010

08001f00 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001f04:	2200      	movs	r2, #0
 8001f06:	2110      	movs	r1, #16
 8001f08:	4803      	ldr	r0, [pc, #12]	@ (8001f18 <SELECT+0x18>)
 8001f0a:	f002 f801 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001f0e:	2001      	movs	r0, #1
 8001f10:	f000 fe18 	bl	8002b44 <HAL_Delay>
}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40020400 	.word	0x40020400

08001f1c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001f20:	2201      	movs	r2, #1
 8001f22:	2110      	movs	r1, #16
 8001f24:	4803      	ldr	r0, [pc, #12]	@ (8001f34 <DESELECT+0x18>)
 8001f26:	f001 fff3 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	f000 fe0a 	bl	8002b44 <HAL_Delay>
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40020400 	.word	0x40020400

08001f38 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001f42:	bf00      	nop
 8001f44:	4b08      	ldr	r3, [pc, #32]	@ (8001f68 <SPI_TxByte+0x30>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d1f8      	bne.n	8001f44 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001f52:	1df9      	adds	r1, r7, #7
 8001f54:	2364      	movs	r3, #100	@ 0x64
 8001f56:	2201      	movs	r2, #1
 8001f58:	4803      	ldr	r0, [pc, #12]	@ (8001f68 <SPI_TxByte+0x30>)
 8001f5a:	f003 fd24 	bl	80059a6 <HAL_SPI_Transmit>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200003d0 	.word	0x200003d0

08001f6c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001f78:	bf00      	nop
 8001f7a:	4b08      	ldr	r3, [pc, #32]	@ (8001f9c <SPI_TxBuffer+0x30>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d1f8      	bne.n	8001f7a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001f88:	887a      	ldrh	r2, [r7, #2]
 8001f8a:	2364      	movs	r3, #100	@ 0x64
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	4803      	ldr	r0, [pc, #12]	@ (8001f9c <SPI_TxBuffer+0x30>)
 8001f90:	f003 fd09 	bl	80059a6 <HAL_SPI_Transmit>
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	200003d0 	.word	0x200003d0

08001fa0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001fa6:	23ff      	movs	r3, #255	@ 0xff
 8001fa8:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001faa:	bf00      	nop
 8001fac:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <SPI_RxByte+0x34>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d1f8      	bne.n	8001fac <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001fba:	1dba      	adds	r2, r7, #6
 8001fbc:	1df9      	adds	r1, r7, #7
 8001fbe:	2364      	movs	r3, #100	@ 0x64
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	4803      	ldr	r0, [pc, #12]	@ (8001fd4 <SPI_RxByte+0x34>)
 8001fc6:	f003 fe31 	bl	8005c2c <HAL_SPI_TransmitReceive>

	return data;
 8001fca:	79bb      	ldrb	r3, [r7, #6]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	200003d0 	.word	0x200003d0

08001fd8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001fe0:	f7ff ffde 	bl	8001fa0 <SPI_RxByte>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	701a      	strb	r2, [r3, #0]
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8002024 <SD_ReadyWait+0x30>)
 8001ffc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002000:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8002002:	f7ff ffcd 	bl	8001fa0 <SPI_RxByte>
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	2bff      	cmp	r3, #255	@ 0xff
 800200e:	d004      	beq.n	800201a <SD_ReadyWait+0x26>
 8002010:	4b04      	ldr	r3, [pc, #16]	@ (8002024 <SD_ReadyWait+0x30>)
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	b29b      	uxth	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f3      	bne.n	8002002 <SD_ReadyWait+0xe>

	return res;
 800201a:	79fb      	ldrb	r3, [r7, #7]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	2000050e 	.word	0x2000050e

08002028 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800202e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8002032:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8002034:	f7ff ff72 	bl	8001f1c <DESELECT>
	for(int i = 0; i < 10; i++)
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	e005      	b.n	800204a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800203e:	20ff      	movs	r0, #255	@ 0xff
 8002040:	f7ff ff7a 	bl	8001f38 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	3301      	adds	r3, #1
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	2b09      	cmp	r3, #9
 800204e:	ddf6      	ble.n	800203e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8002050:	f7ff ff56 	bl	8001f00 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8002054:	2340      	movs	r3, #64	@ 0x40
 8002056:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8002068:	2395      	movs	r3, #149	@ 0x95
 800206a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800206c:	463b      	mov	r3, r7
 800206e:	2106      	movs	r1, #6
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff7b 	bl	8001f6c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8002076:	e002      	b.n	800207e <SD_PowerOn+0x56>
	{
		cnt--;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	3b01      	subs	r3, #1
 800207c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800207e:	f7ff ff8f 	bl	8001fa0 <SPI_RxByte>
 8002082:	4603      	mov	r3, r0
 8002084:	2b01      	cmp	r3, #1
 8002086:	d002      	beq.n	800208e <SD_PowerOn+0x66>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f4      	bne.n	8002078 <SD_PowerOn+0x50>
	}

	DESELECT();
 800208e:	f7ff ff45 	bl	8001f1c <DESELECT>
	SPI_TxByte(0XFF);
 8002092:	20ff      	movs	r0, #255	@ 0xff
 8002094:	f7ff ff50 	bl	8001f38 <SPI_TxByte>

	PowerFlag = 1;
 8002098:	4b03      	ldr	r3, [pc, #12]	@ (80020a8 <SD_PowerOn+0x80>)
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]
}
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000929 	.word	0x20000929

080020ac <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80020b0:	4b03      	ldr	r3, [pc, #12]	@ (80020c0 <SD_PowerOff+0x14>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	20000929 	.word	0x20000929

080020c4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
	return PowerFlag;
 80020c8:	4b03      	ldr	r3, [pc, #12]	@ (80020d8 <SD_CheckPower+0x14>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000929 	.word	0x20000929

080020dc <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80020e6:	4b14      	ldr	r3, [pc, #80]	@ (8002138 <SD_RxDataBlock+0x5c>)
 80020e8:	22c8      	movs	r2, #200	@ 0xc8
 80020ea:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80020ec:	f7ff ff58 	bl	8001fa0 <SPI_RxByte>
 80020f0:	4603      	mov	r3, r0
 80020f2:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	2bff      	cmp	r3, #255	@ 0xff
 80020f8:	d104      	bne.n	8002104 <SD_RxDataBlock+0x28>
 80020fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002138 <SD_RxDataBlock+0x5c>)
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	b29b      	uxth	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f3      	bne.n	80020ec <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	2bfe      	cmp	r3, #254	@ 0xfe
 8002108:	d001      	beq.n	800210e <SD_RxDataBlock+0x32>
 800210a:	2300      	movs	r3, #0
 800210c:	e00f      	b.n	800212e <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff5f 	bl	8001fd8 <SPI_RxBytePtr>
	} while(len--);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	1e5a      	subs	r2, r3, #1
 800211e:	603a      	str	r2, [r7, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f4      	bne.n	800210e <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8002124:	f7ff ff3c 	bl	8001fa0 <SPI_RxByte>
	SPI_RxByte();
 8002128:	f7ff ff3a 	bl	8001fa0 <SPI_RxByte>

	return TRUE;
 800212c:	2301      	movs	r3, #1
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	2000050d 	.word	0x2000050d

0800213c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800214c:	f7ff ff52 	bl	8001ff4 <SD_ReadyWait>
 8002150:	4603      	mov	r3, r0
 8002152:	2bff      	cmp	r3, #255	@ 0xff
 8002154:	d001      	beq.n	800215a <SD_TxDataBlock+0x1e>
 8002156:	2300      	movs	r3, #0
 8002158:	e02f      	b.n	80021ba <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff feeb 	bl	8001f38 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	2bfd      	cmp	r3, #253	@ 0xfd
 8002166:	d020      	beq.n	80021aa <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8002168:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff fefd 	bl	8001f6c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8002172:	f7ff ff15 	bl	8001fa0 <SPI_RxByte>
		SPI_RxByte();
 8002176:	f7ff ff13 	bl	8001fa0 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800217a:	e00b      	b.n	8002194 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800217c:	f7ff ff10 	bl	8001fa0 <SPI_RxByte>
 8002180:	4603      	mov	r3, r0
 8002182:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	f003 031f 	and.w	r3, r3, #31
 800218a:	2b05      	cmp	r3, #5
 800218c:	d006      	beq.n	800219c <SD_TxDataBlock+0x60>
			i++;
 800218e:	7bbb      	ldrb	r3, [r7, #14]
 8002190:	3301      	adds	r3, #1
 8002192:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8002194:	7bbb      	ldrb	r3, [r7, #14]
 8002196:	2b40      	cmp	r3, #64	@ 0x40
 8002198:	d9f0      	bls.n	800217c <SD_TxDataBlock+0x40>
 800219a:	e000      	b.n	800219e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800219c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800219e:	bf00      	nop
 80021a0:	f7ff fefe 	bl	8001fa0 <SPI_RxByte>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0fa      	beq.n	80021a0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	f003 031f 	and.w	r3, r3, #31
 80021b0:	2b05      	cmp	r3, #5
 80021b2:	d101      	bne.n	80021b8 <SD_TxDataBlock+0x7c>
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <SD_TxDataBlock+0x7e>

	return FALSE;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b084      	sub	sp, #16
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	6039      	str	r1, [r7, #0]
 80021cc:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80021ce:	f7ff ff11 	bl	8001ff4 <SD_ReadyWait>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2bff      	cmp	r3, #255	@ 0xff
 80021d6:	d001      	beq.n	80021dc <SD_SendCmd+0x1a>
 80021d8:	23ff      	movs	r3, #255	@ 0xff
 80021da:	e042      	b.n	8002262 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff feaa 	bl	8001f38 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	0e1b      	lsrs	r3, r3, #24
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fea4 	bl	8001f38 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	0c1b      	lsrs	r3, r3, #16
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fe9e 	bl	8001f38 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	b2db      	uxtb	r3, r3
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fe98 	bl	8001f38 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fe93 	bl	8001f38 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	2b40      	cmp	r3, #64	@ 0x40
 8002216:	d102      	bne.n	800221e <SD_SendCmd+0x5c>
 8002218:	2395      	movs	r3, #149	@ 0x95
 800221a:	73fb      	strb	r3, [r7, #15]
 800221c:	e007      	b.n	800222e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	2b48      	cmp	r3, #72	@ 0x48
 8002222:	d102      	bne.n	800222a <SD_SendCmd+0x68>
 8002224:	2387      	movs	r3, #135	@ 0x87
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	e001      	b.n	800222e <SD_SendCmd+0x6c>
	else crc = 1;
 800222a:	2301      	movs	r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fe81 	bl	8001f38 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	2b4c      	cmp	r3, #76	@ 0x4c
 800223a:	d101      	bne.n	8002240 <SD_SendCmd+0x7e>
 800223c:	f7ff feb0 	bl	8001fa0 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8002240:	230a      	movs	r3, #10
 8002242:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8002244:	f7ff feac 	bl	8001fa0 <SPI_RxByte>
 8002248:	4603      	mov	r3, r0
 800224a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800224c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002250:	2b00      	cmp	r3, #0
 8002252:	da05      	bge.n	8002260 <SD_SendCmd+0x9e>
 8002254:	7bbb      	ldrb	r3, [r7, #14]
 8002256:	3b01      	subs	r3, #1
 8002258:	73bb      	strb	r3, [r7, #14]
 800225a:	7bbb      	ldrb	r3, [r7, #14]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f1      	bne.n	8002244 <SD_SendCmd+0x82>

	return res;
 8002260:	7b7b      	ldrb	r3, [r7, #13]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800226c:	b590      	push	{r4, r7, lr}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <SD_disk_initialize+0x14>
 800227c:	2301      	movs	r3, #1
 800227e:	e0d6      	b.n	800242e <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8002280:	4b6d      	ldr	r3, [pc, #436]	@ (8002438 <SD_disk_initialize+0x1cc>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <SD_disk_initialize+0x2a>
 800228e:	4b6a      	ldr	r3, [pc, #424]	@ (8002438 <SD_disk_initialize+0x1cc>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	e0cb      	b.n	800242e <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8002296:	f7ff fec7 	bl	8002028 <SD_PowerOn>

	/* slave select */
	SELECT();
 800229a:	f7ff fe31 	bl	8001f00 <SELECT>

	/* check disk type */
	type = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80022a2:	2100      	movs	r1, #0
 80022a4:	2040      	movs	r0, #64	@ 0x40
 80022a6:	f7ff ff8c 	bl	80021c2 <SD_SendCmd>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	f040 80a6 	bne.w	80023fe <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80022b2:	4b62      	ldr	r3, [pc, #392]	@ (800243c <SD_disk_initialize+0x1d0>)
 80022b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80022b8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80022ba:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80022be:	2048      	movs	r0, #72	@ 0x48
 80022c0:	f7ff ff7f 	bl	80021c2 <SD_SendCmd>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d158      	bne.n	800237c <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	73fb      	strb	r3, [r7, #15]
 80022ce:	e00c      	b.n	80022ea <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80022d0:	7bfc      	ldrb	r4, [r7, #15]
 80022d2:	f7ff fe65 	bl	8001fa0 <SPI_RxByte>
 80022d6:	4603      	mov	r3, r0
 80022d8:	461a      	mov	r2, r3
 80022da:	f104 0310 	add.w	r3, r4, #16
 80022de:	443b      	add	r3, r7
 80022e0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	3301      	adds	r3, #1
 80022e8:	73fb      	strb	r3, [r7, #15]
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d9ef      	bls.n	80022d0 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80022f0:	7abb      	ldrb	r3, [r7, #10]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	f040 8083 	bne.w	80023fe <SD_disk_initialize+0x192>
 80022f8:	7afb      	ldrb	r3, [r7, #11]
 80022fa:	2baa      	cmp	r3, #170	@ 0xaa
 80022fc:	d17f      	bne.n	80023fe <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80022fe:	2100      	movs	r1, #0
 8002300:	2077      	movs	r0, #119	@ 0x77
 8002302:	f7ff ff5e 	bl	80021c2 <SD_SendCmd>
 8002306:	4603      	mov	r3, r0
 8002308:	2b01      	cmp	r3, #1
 800230a:	d807      	bhi.n	800231c <SD_disk_initialize+0xb0>
 800230c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002310:	2069      	movs	r0, #105	@ 0x69
 8002312:	f7ff ff56 	bl	80021c2 <SD_SendCmd>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <SD_disk_initialize+0xbc>
				} while (Timer1);
 800231c:	4b47      	ldr	r3, [pc, #284]	@ (800243c <SD_disk_initialize+0x1d0>)
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	b29b      	uxth	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1eb      	bne.n	80022fe <SD_disk_initialize+0x92>
 8002326:	e000      	b.n	800232a <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002328:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800232a:	4b44      	ldr	r3, [pc, #272]	@ (800243c <SD_disk_initialize+0x1d0>)
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d064      	beq.n	80023fe <SD_disk_initialize+0x192>
 8002334:	2100      	movs	r1, #0
 8002336:	207a      	movs	r0, #122	@ 0x7a
 8002338:	f7ff ff43 	bl	80021c2 <SD_SendCmd>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d15d      	bne.n	80023fe <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8002342:	2300      	movs	r3, #0
 8002344:	73fb      	strb	r3, [r7, #15]
 8002346:	e00c      	b.n	8002362 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8002348:	7bfc      	ldrb	r4, [r7, #15]
 800234a:	f7ff fe29 	bl	8001fa0 <SPI_RxByte>
 800234e:	4603      	mov	r3, r0
 8002350:	461a      	mov	r2, r3
 8002352:	f104 0310 	add.w	r3, r4, #16
 8002356:	443b      	add	r3, r7
 8002358:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800235c:	7bfb      	ldrb	r3, [r7, #15]
 800235e:	3301      	adds	r3, #1
 8002360:	73fb      	strb	r3, [r7, #15]
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d9ef      	bls.n	8002348 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8002368:	7a3b      	ldrb	r3, [r7, #8]
 800236a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <SD_disk_initialize+0x10a>
 8002372:	230c      	movs	r3, #12
 8002374:	e000      	b.n	8002378 <SD_disk_initialize+0x10c>
 8002376:	2304      	movs	r3, #4
 8002378:	73bb      	strb	r3, [r7, #14]
 800237a:	e040      	b.n	80023fe <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800237c:	2100      	movs	r1, #0
 800237e:	2077      	movs	r0, #119	@ 0x77
 8002380:	f7ff ff1f 	bl	80021c2 <SD_SendCmd>
 8002384:	4603      	mov	r3, r0
 8002386:	2b01      	cmp	r3, #1
 8002388:	d808      	bhi.n	800239c <SD_disk_initialize+0x130>
 800238a:	2100      	movs	r1, #0
 800238c:	2069      	movs	r0, #105	@ 0x69
 800238e:	f7ff ff18 	bl	80021c2 <SD_SendCmd>
 8002392:	4603      	mov	r3, r0
 8002394:	2b01      	cmp	r3, #1
 8002396:	d801      	bhi.n	800239c <SD_disk_initialize+0x130>
 8002398:	2302      	movs	r3, #2
 800239a:	e000      	b.n	800239e <SD_disk_initialize+0x132>
 800239c:	2301      	movs	r3, #1
 800239e:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80023a0:	7bbb      	ldrb	r3, [r7, #14]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d10e      	bne.n	80023c4 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80023a6:	2100      	movs	r1, #0
 80023a8:	2077      	movs	r0, #119	@ 0x77
 80023aa:	f7ff ff0a 	bl	80021c2 <SD_SendCmd>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d80e      	bhi.n	80023d2 <SD_disk_initialize+0x166>
 80023b4:	2100      	movs	r1, #0
 80023b6:	2069      	movs	r0, #105	@ 0x69
 80023b8:	f7ff ff03 	bl	80021c2 <SD_SendCmd>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d107      	bne.n	80023d2 <SD_disk_initialize+0x166>
 80023c2:	e00d      	b.n	80023e0 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80023c4:	2100      	movs	r1, #0
 80023c6:	2041      	movs	r0, #65	@ 0x41
 80023c8:	f7ff fefb 	bl	80021c2 <SD_SendCmd>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d005      	beq.n	80023de <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80023d2:	4b1a      	ldr	r3, [pc, #104]	@ (800243c <SD_disk_initialize+0x1d0>)
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1e1      	bne.n	80023a0 <SD_disk_initialize+0x134>
 80023dc:	e000      	b.n	80023e0 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80023de:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80023e0:	4b16      	ldr	r3, [pc, #88]	@ (800243c <SD_disk_initialize+0x1d0>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d007      	beq.n	80023fa <SD_disk_initialize+0x18e>
 80023ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023ee:	2050      	movs	r0, #80	@ 0x50
 80023f0:	f7ff fee7 	bl	80021c2 <SD_SendCmd>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <SD_disk_initialize+0x192>
 80023fa:	2300      	movs	r3, #0
 80023fc:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80023fe:	4a10      	ldr	r2, [pc, #64]	@ (8002440 <SD_disk_initialize+0x1d4>)
 8002400:	7bbb      	ldrb	r3, [r7, #14]
 8002402:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8002404:	f7ff fd8a 	bl	8001f1c <DESELECT>
	SPI_RxByte();
 8002408:	f7ff fdca 	bl	8001fa0 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800240c:	7bbb      	ldrb	r3, [r7, #14]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d008      	beq.n	8002424 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8002412:	4b09      	ldr	r3, [pc, #36]	@ (8002438 <SD_disk_initialize+0x1cc>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <SD_disk_initialize+0x1cc>)
 8002420:	701a      	strb	r2, [r3, #0]
 8002422:	e001      	b.n	8002428 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8002424:	f7ff fe42 	bl	80020ac <SD_PowerOff>
	}

	return Stat;
 8002428:	4b03      	ldr	r3, [pc, #12]	@ (8002438 <SD_disk_initialize+0x1cc>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	b2db      	uxtb	r3, r3
}
 800242e:	4618      	mov	r0, r3
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	bd90      	pop	{r4, r7, pc}
 8002436:	bf00      	nop
 8002438:	20000020 	.word	0x20000020
 800243c:	2000050d 	.word	0x2000050d
 8002440:	20000928 	.word	0x20000928

08002444 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <SD_disk_status+0x14>
 8002454:	2301      	movs	r3, #1
 8002456:	e002      	b.n	800245e <SD_disk_status+0x1a>
	return Stat;
 8002458:	4b04      	ldr	r3, [pc, #16]	@ (800246c <SD_disk_status+0x28>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	b2db      	uxtb	r3, r3
}
 800245e:	4618      	mov	r0, r3
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	20000020 	.word	0x20000020

08002470 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	607a      	str	r2, [r7, #4]
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	4603      	mov	r3, r0
 800247e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d102      	bne.n	800248c <SD_disk_read+0x1c>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <SD_disk_read+0x20>
 800248c:	2304      	movs	r3, #4
 800248e:	e051      	b.n	8002534 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002490:	4b2a      	ldr	r3, [pc, #168]	@ (800253c <SD_disk_read+0xcc>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <SD_disk_read+0x32>
 800249e:	2303      	movs	r3, #3
 80024a0:	e048      	b.n	8002534 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80024a2:	4b27      	ldr	r3, [pc, #156]	@ (8002540 <SD_disk_read+0xd0>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <SD_disk_read+0x44>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	025b      	lsls	r3, r3, #9
 80024b2:	607b      	str	r3, [r7, #4]

	SELECT();
 80024b4:	f7ff fd24 	bl	8001f00 <SELECT>

	if (count == 1)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d111      	bne.n	80024e2 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	2051      	movs	r0, #81	@ 0x51
 80024c2:	f7ff fe7e 	bl	80021c2 <SD_SendCmd>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d129      	bne.n	8002520 <SD_disk_read+0xb0>
 80024cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024d0:	68b8      	ldr	r0, [r7, #8]
 80024d2:	f7ff fe03 	bl	80020dc <SD_RxDataBlock>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d021      	beq.n	8002520 <SD_disk_read+0xb0>
 80024dc:	2300      	movs	r3, #0
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	e01e      	b.n	8002520 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	2052      	movs	r0, #82	@ 0x52
 80024e6:	f7ff fe6c 	bl	80021c2 <SD_SendCmd>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d117      	bne.n	8002520 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80024f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024f4:	68b8      	ldr	r0, [r7, #8]
 80024f6:	f7ff fdf1 	bl	80020dc <SD_RxDataBlock>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <SD_disk_read+0xa6>
				buff += 512;
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002506:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	3b01      	subs	r3, #1
 800250c:	603b      	str	r3, [r7, #0]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1ed      	bne.n	80024f0 <SD_disk_read+0x80>
 8002514:	e000      	b.n	8002518 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8002516:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8002518:	2100      	movs	r1, #0
 800251a:	204c      	movs	r0, #76	@ 0x4c
 800251c:	f7ff fe51 	bl	80021c2 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8002520:	f7ff fcfc 	bl	8001f1c <DESELECT>
	SPI_RxByte();
 8002524:	f7ff fd3c 	bl	8001fa0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	bf14      	ite	ne
 800252e:	2301      	movne	r3, #1
 8002530:	2300      	moveq	r3, #0
 8002532:	b2db      	uxtb	r3, r3
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000020 	.word	0x20000020
 8002540:	20000928 	.word	0x20000928

08002544 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	4603      	mov	r3, r0
 8002552:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d102      	bne.n	8002560 <SD_disk_write+0x1c>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <SD_disk_write+0x20>
 8002560:	2304      	movs	r3, #4
 8002562:	e06b      	b.n	800263c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002564:	4b37      	ldr	r3, [pc, #220]	@ (8002644 <SD_disk_write+0x100>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <SD_disk_write+0x32>
 8002572:	2303      	movs	r3, #3
 8002574:	e062      	b.n	800263c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8002576:	4b33      	ldr	r3, [pc, #204]	@ (8002644 <SD_disk_write+0x100>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <SD_disk_write+0x44>
 8002584:	2302      	movs	r3, #2
 8002586:	e059      	b.n	800263c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002588:	4b2f      	ldr	r3, [pc, #188]	@ (8002648 <SD_disk_write+0x104>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <SD_disk_write+0x56>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	025b      	lsls	r3, r3, #9
 8002598:	607b      	str	r3, [r7, #4]

	SELECT();
 800259a:	f7ff fcb1 	bl	8001f00 <SELECT>

	if (count == 1)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d110      	bne.n	80025c6 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	2058      	movs	r0, #88	@ 0x58
 80025a8:	f7ff fe0b 	bl	80021c2 <SD_SendCmd>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d13a      	bne.n	8002628 <SD_disk_write+0xe4>
 80025b2:	21fe      	movs	r1, #254	@ 0xfe
 80025b4:	68b8      	ldr	r0, [r7, #8]
 80025b6:	f7ff fdc1 	bl	800213c <SD_TxDataBlock>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d033      	beq.n	8002628 <SD_disk_write+0xe4>
			count = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	e030      	b.n	8002628 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80025c6:	4b20      	ldr	r3, [pc, #128]	@ (8002648 <SD_disk_write+0x104>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d007      	beq.n	80025e2 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80025d2:	2100      	movs	r1, #0
 80025d4:	2077      	movs	r0, #119	@ 0x77
 80025d6:	f7ff fdf4 	bl	80021c2 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80025da:	6839      	ldr	r1, [r7, #0]
 80025dc:	2057      	movs	r0, #87	@ 0x57
 80025de:	f7ff fdf0 	bl	80021c2 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	2059      	movs	r0, #89	@ 0x59
 80025e6:	f7ff fdec 	bl	80021c2 <SD_SendCmd>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d11b      	bne.n	8002628 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80025f0:	21fc      	movs	r1, #252	@ 0xfc
 80025f2:	68b8      	ldr	r0, [r7, #8]
 80025f4:	f7ff fda2 	bl	800213c <SD_TxDataBlock>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <SD_disk_write+0xd0>
				buff += 512;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002604:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	3b01      	subs	r3, #1
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1ee      	bne.n	80025f0 <SD_disk_write+0xac>
 8002612:	e000      	b.n	8002616 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002614:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8002616:	21fd      	movs	r1, #253	@ 0xfd
 8002618:	2000      	movs	r0, #0
 800261a:	f7ff fd8f 	bl	800213c <SD_TxDataBlock>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <SD_disk_write+0xe4>
			{
				count = 1;
 8002624:	2301      	movs	r3, #1
 8002626:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8002628:	f7ff fc78 	bl	8001f1c <DESELECT>
	SPI_RxByte();
 800262c:	f7ff fcb8 	bl	8001fa0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	bf14      	ite	ne
 8002636:	2301      	movne	r3, #1
 8002638:	2300      	moveq	r3, #0
 800263a:	b2db      	uxtb	r3, r3
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20000020 	.word	0x20000020
 8002648:	20000928 	.word	0x20000928

0800264c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800264c:	b590      	push	{r4, r7, lr}
 800264e:	b08b      	sub	sp, #44	@ 0x2c
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	603a      	str	r2, [r7, #0]
 8002656:	71fb      	strb	r3, [r7, #7]
 8002658:	460b      	mov	r3, r1
 800265a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <SD_disk_ioctl+0x1e>
 8002666:	2304      	movs	r3, #4
 8002668:	e113      	b.n	8002892 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8002670:	79bb      	ldrb	r3, [r7, #6]
 8002672:	2b05      	cmp	r3, #5
 8002674:	d124      	bne.n	80026c0 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d012      	beq.n	80026a4 <SD_disk_ioctl+0x58>
 800267e:	2b02      	cmp	r3, #2
 8002680:	dc1a      	bgt.n	80026b8 <SD_disk_ioctl+0x6c>
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <SD_disk_ioctl+0x40>
 8002686:	2b01      	cmp	r3, #1
 8002688:	d006      	beq.n	8002698 <SD_disk_ioctl+0x4c>
 800268a:	e015      	b.n	80026b8 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800268c:	f7ff fd0e 	bl	80020ac <SD_PowerOff>
			res = RES_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002696:	e0fa      	b.n	800288e <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8002698:	f7ff fcc6 	bl	8002028 <SD_PowerOn>
			res = RES_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80026a2:	e0f4      	b.n	800288e <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	1c5c      	adds	r4, r3, #1
 80026a8:	f7ff fd0c 	bl	80020c4 <SD_CheckPower>
 80026ac:	4603      	mov	r3, r0
 80026ae:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80026b0:	2300      	movs	r3, #0
 80026b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80026b6:	e0ea      	b.n	800288e <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80026b8:	2304      	movs	r3, #4
 80026ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80026be:	e0e6      	b.n	800288e <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80026c0:	4b76      	ldr	r3, [pc, #472]	@ (800289c <SD_disk_ioctl+0x250>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <SD_disk_ioctl+0x86>
 80026ce:	2303      	movs	r3, #3
 80026d0:	e0df      	b.n	8002892 <SD_disk_ioctl+0x246>

		SELECT();
 80026d2:	f7ff fc15 	bl	8001f00 <SELECT>

		switch (ctrl)
 80026d6:	79bb      	ldrb	r3, [r7, #6]
 80026d8:	2b0d      	cmp	r3, #13
 80026da:	f200 80c9 	bhi.w	8002870 <SD_disk_ioctl+0x224>
 80026de:	a201      	add	r2, pc, #4	@ (adr r2, 80026e4 <SD_disk_ioctl+0x98>)
 80026e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e4:	080027db 	.word	0x080027db
 80026e8:	0800271d 	.word	0x0800271d
 80026ec:	080027cb 	.word	0x080027cb
 80026f0:	08002871 	.word	0x08002871
 80026f4:	08002871 	.word	0x08002871
 80026f8:	08002871 	.word	0x08002871
 80026fc:	08002871 	.word	0x08002871
 8002700:	08002871 	.word	0x08002871
 8002704:	08002871 	.word	0x08002871
 8002708:	08002871 	.word	0x08002871
 800270c:	08002871 	.word	0x08002871
 8002710:	080027ed 	.word	0x080027ed
 8002714:	08002811 	.word	0x08002811
 8002718:	08002835 	.word	0x08002835
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800271c:	2100      	movs	r1, #0
 800271e:	2049      	movs	r0, #73	@ 0x49
 8002720:	f7ff fd4f 	bl	80021c2 <SD_SendCmd>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	f040 80a6 	bne.w	8002878 <SD_disk_ioctl+0x22c>
 800272c:	f107 030c 	add.w	r3, r7, #12
 8002730:	2110      	movs	r1, #16
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fcd2 	bl	80020dc <SD_RxDataBlock>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 809c 	beq.w	8002878 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8002740:	7b3b      	ldrb	r3, [r7, #12]
 8002742:	099b      	lsrs	r3, r3, #6
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b01      	cmp	r3, #1
 8002748:	d10d      	bne.n	8002766 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800274a:	7d7b      	ldrb	r3, [r7, #21]
 800274c:	461a      	mov	r2, r3
 800274e:	7d3b      	ldrb	r3, [r7, #20]
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	b29b      	uxth	r3, r3
 8002754:	4413      	add	r3, r2
 8002756:	b29b      	uxth	r3, r3
 8002758:	3301      	adds	r3, #1
 800275a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800275c:	8bfb      	ldrh	r3, [r7, #30]
 800275e:	029a      	lsls	r2, r3, #10
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	e02d      	b.n	80027c2 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002766:	7c7b      	ldrb	r3, [r7, #17]
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	b2da      	uxtb	r2, r3
 800276e:	7dbb      	ldrb	r3, [r7, #22]
 8002770:	09db      	lsrs	r3, r3, #7
 8002772:	b2db      	uxtb	r3, r3
 8002774:	4413      	add	r3, r2
 8002776:	b2da      	uxtb	r2, r3
 8002778:	7d7b      	ldrb	r3, [r7, #21]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	b2db      	uxtb	r3, r3
 800277e:	f003 0306 	and.w	r3, r3, #6
 8002782:	b2db      	uxtb	r3, r3
 8002784:	4413      	add	r3, r2
 8002786:	b2db      	uxtb	r3, r3
 8002788:	3302      	adds	r3, #2
 800278a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800278e:	7d3b      	ldrb	r3, [r7, #20]
 8002790:	099b      	lsrs	r3, r3, #6
 8002792:	b2db      	uxtb	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	7cfb      	ldrb	r3, [r7, #19]
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	b29b      	uxth	r3, r3
 800279c:	4413      	add	r3, r2
 800279e:	b29a      	uxth	r2, r3
 80027a0:	7cbb      	ldrb	r3, [r7, #18]
 80027a2:	029b      	lsls	r3, r3, #10
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3301      	adds	r3, #1
 80027b2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80027b4:	8bfa      	ldrh	r2, [r7, #30]
 80027b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80027ba:	3b09      	subs	r3, #9
 80027bc:	409a      	lsls	r2, r3
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 80027c8:	e056      	b.n	8002878 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027d0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80027d8:	e055      	b.n	8002886 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80027da:	f7ff fc0b 	bl	8001ff4 <SD_ReadyWait>
 80027de:	4603      	mov	r3, r0
 80027e0:	2bff      	cmp	r3, #255	@ 0xff
 80027e2:	d14b      	bne.n	800287c <SD_disk_ioctl+0x230>
 80027e4:	2300      	movs	r3, #0
 80027e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80027ea:	e047      	b.n	800287c <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80027ec:	2100      	movs	r1, #0
 80027ee:	2049      	movs	r0, #73	@ 0x49
 80027f0:	f7ff fce7 	bl	80021c2 <SD_SendCmd>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d142      	bne.n	8002880 <SD_disk_ioctl+0x234>
 80027fa:	2110      	movs	r1, #16
 80027fc:	6a38      	ldr	r0, [r7, #32]
 80027fe:	f7ff fc6d 	bl	80020dc <SD_RxDataBlock>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d03b      	beq.n	8002880 <SD_disk_ioctl+0x234>
 8002808:	2300      	movs	r3, #0
 800280a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800280e:	e037      	b.n	8002880 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002810:	2100      	movs	r1, #0
 8002812:	204a      	movs	r0, #74	@ 0x4a
 8002814:	f7ff fcd5 	bl	80021c2 <SD_SendCmd>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d132      	bne.n	8002884 <SD_disk_ioctl+0x238>
 800281e:	2110      	movs	r1, #16
 8002820:	6a38      	ldr	r0, [r7, #32]
 8002822:	f7ff fc5b 	bl	80020dc <SD_RxDataBlock>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d02b      	beq.n	8002884 <SD_disk_ioctl+0x238>
 800282c:	2300      	movs	r3, #0
 800282e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002832:	e027      	b.n	8002884 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002834:	2100      	movs	r1, #0
 8002836:	207a      	movs	r0, #122	@ 0x7a
 8002838:	f7ff fcc3 	bl	80021c2 <SD_SendCmd>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d116      	bne.n	8002870 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8002842:	2300      	movs	r3, #0
 8002844:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002848:	e00b      	b.n	8002862 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 800284a:	6a3c      	ldr	r4, [r7, #32]
 800284c:	1c63      	adds	r3, r4, #1
 800284e:	623b      	str	r3, [r7, #32]
 8002850:	f7ff fba6 	bl	8001fa0 <SPI_RxByte>
 8002854:	4603      	mov	r3, r0
 8002856:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002858:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800285c:	3301      	adds	r3, #1
 800285e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002862:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002866:	2b03      	cmp	r3, #3
 8002868:	d9ef      	bls.n	800284a <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8002870:	2304      	movs	r3, #4
 8002872:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002876:	e006      	b.n	8002886 <SD_disk_ioctl+0x23a>
			break;
 8002878:	bf00      	nop
 800287a:	e004      	b.n	8002886 <SD_disk_ioctl+0x23a>
			break;
 800287c:	bf00      	nop
 800287e:	e002      	b.n	8002886 <SD_disk_ioctl+0x23a>
			break;
 8002880:	bf00      	nop
 8002882:	e000      	b.n	8002886 <SD_disk_ioctl+0x23a>
			break;
 8002884:	bf00      	nop
		}

		DESELECT();
 8002886:	f7ff fb49 	bl	8001f1c <DESELECT>
		SPI_RxByte();
 800288a:	f7ff fb89 	bl	8001fa0 <SPI_RxByte>
	}

	return res;
 800288e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002892:	4618      	mov	r0, r3
 8002894:	372c      	adds	r7, #44	@ 0x2c
 8002896:	46bd      	mov	sp, r7
 8002898:	bd90      	pop	{r4, r7, pc}
 800289a:	bf00      	nop
 800289c:	20000020 	.word	0x20000020

080028a0 <clear_buffer>:
#include "utils.h"
//Funciones utiles
void clear_buffer(char *buffer, size_t length) {
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
    if (buffer == NULL) {
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00f      	beq.n	80028d0 <clear_buffer+0x30>
        return; // Verifica que el puntero no sea nulo
    }
    for (size_t i = 0; i < length; i++) {
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	e007      	b.n	80028c6 <clear_buffer+0x26>
        buffer[i] = '\0'; // Llena el buffer con caracteres nulos
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4413      	add	r3, r2
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < length; i++) {
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	3301      	adds	r3, #1
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d3f3      	bcc.n	80028b6 <clear_buffer+0x16>
 80028ce:	e000      	b.n	80028d2 <clear_buffer+0x32>
        return; // Verifica que el puntero no sea nulo
 80028d0:	bf00      	nop
    }
}
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <display_task>:
	}
}

#elif DISPLAY_FUNCTION == 1
//Version funcional que utiliza el control de acceso
void display_task(void *pvParameters){
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
	indicatorMessage display_message;
	uint8_t counter = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	73fb      	strb	r3, [r7, #15]
	display_init();						//Inicializo el display
 80028e8:	f7fe fc73 	bl	80011d2 <display_init>
	display_start_msg();				//Muestro mensaje inicial
 80028ec:	f7fe fc78 	bl	80011e0 <display_start_msg>
	while(1){
		xQueueReceive(display_queue, &display_message, portMAX_DELAY);
 80028f0:	4b45      	ldr	r3, [pc, #276]	@ (8002a08 <display_task+0x12c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f107 010e 	add.w	r1, r7, #14
 80028f8:	f04f 32ff 	mov.w	r2, #4294967295
 80028fc:	4618      	mov	r0, r3
 80028fe:	f004 fe8b 	bl	8007618 <xQueueReceive>
		switch(display_message){
 8002902:	7bbb      	ldrb	r3, [r7, #14]
 8002904:	3b01      	subs	r3, #1
 8002906:	2b0a      	cmp	r3, #10
 8002908:	d8f2      	bhi.n	80028f0 <display_task+0x14>
 800290a:	a201      	add	r2, pc, #4	@ (adr r2, 8002910 <display_task+0x34>)
 800290c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002910:	0800293d 	.word	0x0800293d
 8002914:	08002943 	.word	0x08002943
 8002918:	08002959 	.word	0x08002959
 800291c:	0800296f 	.word	0x0800296f
 8002920:	08002981 	.word	0x08002981
 8002924:	08002993 	.word	0x08002993
 8002928:	080029b1 	.word	0x080029b1
 800292c:	080029bf 	.word	0x080029bf
 8002930:	080029cd 	.word	0x080029cd
 8002934:	080029db 	.word	0x080029db
 8002938:	080029ed 	.word	0x080029ed
		case PANTALLA_DE_INICIO:
			display_start_msg();
 800293c:	f7fe fc50 	bl	80011e0 <display_start_msg>
			break;
 8002940:	e061      	b.n	8002a06 <display_task+0x12a>
		case PANTALLA_INGRESO_KEYPAD:
			if(counter < MAX_DIGITS){
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	2b05      	cmp	r3, #5
 8002946:	d85a      	bhi.n	80029fe <display_task+0x122>
				counter++;
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	3301      	adds	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
				display_sequence_entry_msg(counter);
 800294e:	7bfb      	ldrb	r3, [r7, #15]
 8002950:	4618      	mov	r0, r3
 8002952:	f7fe fc7b 	bl	800124c <display_sequence_entry_msg>
			}
			break;
 8002956:	e052      	b.n	80029fe <display_task+0x122>
		case PANTALLA_BORRAR_KEYPAD:
			if(counter > 0){
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d051      	beq.n	8002a02 <display_task+0x126>
				counter--;
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	3b01      	subs	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
				display_sequence_entry_msg(counter);
 8002964:	7bfb      	ldrb	r3, [r7, #15]
 8002966:	4618      	mov	r0, r3
 8002968:	f7fe fc70 	bl	800124c <display_sequence_entry_msg>
			}
			break;
 800296c:	e049      	b.n	8002a02 <display_task+0x126>
		case PANTALLA_USUARIO_ENCONTRADO:
			display_user_found_msg();
 800296e:	f7fe fd4d 	bl	800140c <display_user_found_msg>
			counter = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8002976:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800297a:	f005 f9d7 	bl	8007d2c <vTaskDelay>
			break;
 800297e:	e042      	b.n	8002a06 <display_task+0x12a>
		case PANTALLA_USUARIO_NO_EXISTE:
			display_user_not_found_msg();
 8002980:	f7fe fd7a 	bl	8001478 <display_user_not_found_msg>
			counter = 0;							//Reinicio el contador
 8002984:	2300      	movs	r3, #0
 8002986:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8002988:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800298c:	f005 f9ce 	bl	8007d2c <vTaskDelay>
			break;
 8002990:	e039      	b.n	8002a06 <display_task+0x12a>
		case PANTALLA_RECONOCIMIENTO_DE_VOZ:
			display_start_voice_recognition_msg();
 8002992:	f7fe fdbb 	bl	800150c <display_start_voice_recognition_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8002996:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800299a:	f005 f9c7 	bl	8007d2c <vTaskDelay>
			countdown_msg();
 800299e:	f7fe fdff 	bl	80015a0 <countdown_msg>
			display_capturing_voice_msg();
 80029a2:	f7fe fe53 	bl	800164c <display_capturing_voice_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 80029a6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80029aa:	f005 f9bf 	bl	8007d2c <vTaskDelay>
			break;
 80029ae:	e02a      	b.n	8002a06 <display_task+0x12a>
		case PANTALLA_VOZ_RECONOCIDA:
			display_recognized_voice_msg();
 80029b0:	f7fe fe82 	bl	80016b8 <display_recognized_voice_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 80029b4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80029b8:	f005 f9b8 	bl	8007d2c <vTaskDelay>
			break;
 80029bc:	e023      	b.n	8002a06 <display_task+0x12a>
		case PANTALLA_VOZ_NO_RECONOCIDA:
			display_not_recognized_voice_msg();
 80029be:	f7fe feb1 	bl	8001724 <display_not_recognized_voice_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 80029c2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80029c6:	f005 f9b1 	bl	8007d2c <vTaskDelay>
			break;
 80029ca:	e01c      	b.n	8002a06 <display_task+0x12a>
		case PANTALLA_ACCESO_CONCEDIDO:
			display_access_granted_msg();
 80029cc:	f7fe fcea 	bl	80013a4 <display_access_granted_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 80029d0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80029d4:	f005 f9aa 	bl	8007d2c <vTaskDelay>
			break;
 80029d8:	e015      	b.n	8002a06 <display_task+0x12a>
		case PANTALLA_TIMEOUT:
			display_timeout_msg();
 80029da:	f7fe fc77 	bl	80012cc <display_timeout_msg>
			counter = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 80029e2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80029e6:	f005 f9a1 	bl	8007d2c <vTaskDelay>
			break;
 80029ea:	e00c      	b.n	8002a06 <display_task+0x12a>
		case PANTALLA_SECUENCIA_INCOMPLETA:
			display_incomplete_entry_msg();
 80029ec:	f7fe fc90 	bl	8001310 <display_incomplete_entry_msg>
			counter = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 80029f4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80029f8:	f005 f998 	bl	8007d2c <vTaskDelay>
			break;
 80029fc:	e003      	b.n	8002a06 <display_task+0x12a>
			break;
 80029fe:	bf00      	nop
 8002a00:	e776      	b.n	80028f0 <display_task+0x14>
			break;
 8002a02:	bf00      	nop
 8002a04:	e774      	b.n	80028f0 <display_task+0x14>
		xQueueReceive(display_queue, &display_message, portMAX_DELAY);
 8002a06:	e773      	b.n	80028f0 <display_task+0x14>
 8002a08:	200004bc 	.word	0x200004bc

08002a0c <keypad_task>:
#include "input_sequence_handle.h"
#include "display_functions.h"

char kp_buffer[SEQUENCE_LENGTH + 1] = {0};
/*================[Public Task]=====================*/
void keypad_task(void *pvParameters){
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
	char input;
	uint8_t send_flag = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	737b      	strb	r3, [r7, #13]
	indicatorMessage display_message;
	while(1){
		input = read_keypad();
 8002a18:	f7ff fa10 	bl	8001e3c <read_keypad>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	73bb      	strb	r3, [r7, #14]
		display_message = handle_keypad_input(input, kp_buffer, &send_flag);
 8002a20:	f107 020d 	add.w	r2, r7, #13
 8002a24:	7bbb      	ldrb	r3, [r7, #14]
 8002a26:	4915      	ldr	r1, [pc, #84]	@ (8002a7c <keypad_task+0x70>)
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff f8e9 	bl	8001c00 <handle_keypad_input>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	733b      	strb	r3, [r7, #12]
		if(send_flag){
 8002a32:	7b7b      	ldrb	r3, [r7, #13]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d014      	beq.n	8002a62 <keypad_task+0x56>
			//Envio uno por uno los datos del buffer
			for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 8002a38:	2300      	movs	r3, #0
 8002a3a:	73fb      	strb	r3, [r7, #15]
 8002a3c:	e00c      	b.n	8002a58 <keypad_task+0x4c>
				xQueueSend(sequence_queue, &kp_buffer[i], portMAX_DELAY);
 8002a3e:	4b10      	ldr	r3, [pc, #64]	@ (8002a80 <keypad_task+0x74>)
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	4a0d      	ldr	r2, [pc, #52]	@ (8002a7c <keypad_task+0x70>)
 8002a46:	1899      	adds	r1, r3, r2
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a4e:	f004 fce1 	bl	8007414 <xQueueGenericSend>
			for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	3301      	adds	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
 8002a5a:	2b06      	cmp	r3, #6
 8002a5c:	d9ef      	bls.n	8002a3e <keypad_task+0x32>
			}
			//Reinicio el flag de envio
			send_flag = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	737b      	strb	r3, [r7, #13]
		}
		//Envio el mensaje a la tarea display si no hay pantalla idle
		if(display_message != PANTALLA_IDLE){
 8002a62:	7b3b      	ldrb	r3, [r7, #12]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0d7      	beq.n	8002a18 <keypad_task+0xc>
			xQueueSend(display_queue, &display_message, portMAX_DELAY);
 8002a68:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <keypad_task+0x78>)
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	f107 010c 	add.w	r1, r7, #12
 8002a70:	2300      	movs	r3, #0
 8002a72:	f04f 32ff 	mov.w	r2, #4294967295
 8002a76:	f004 fccd 	bl	8007414 <xQueueGenericSend>
		input = read_keypad();
 8002a7a:	e7cd      	b.n	8002a18 <keypad_task+0xc>
 8002a7c:	2000092c 	.word	0x2000092c
 8002a80:	200004b8 	.word	0x200004b8
 8002a84:	200004bc 	.word	0x200004bc

08002a88 <sd_task>:
	}
}

#elif CODE_VERSION == 3
/*Comprobacion de voz simple*/
void sd_task(void *pvParameters){
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
	char user_key_retrieved[SEQUENCE_LENGTH + 1];							//Buffer asociado a la clave obtenida con el keypad
	while(1){
		//Espero a que llegue la clave de usuario obtenida con el keypad
		for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 8002a90:	2300      	movs	r3, #0
 8002a92:	73fb      	strb	r3, [r7, #15]
 8002a94:	e00d      	b.n	8002ab2 <sd_task+0x2a>
			xQueueReceive(sequence_queue, &user_key_retrieved[i], portMAX_DELAY);
 8002a96:	4b09      	ldr	r3, [pc, #36]	@ (8002abc <sd_task+0x34>)
 8002a98:	6818      	ldr	r0, [r3, #0]
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	f107 0208 	add.w	r2, r7, #8
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	f004 fdb6 	bl	8007618 <xQueueReceive>
		for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
 8002ab4:	2b06      	cmp	r3, #6
 8002ab6:	d9ee      	bls.n	8002a96 <sd_task+0xe>
 8002ab8:	e7ea      	b.n	8002a90 <sd_task+0x8>
 8002aba:	bf00      	nop
 8002abc:	200004b8 	.word	0x200004b8

08002ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b00 <HAL_Init+0x40>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b00 <HAL_Init+0x40>)
 8002aca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ace:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b00 <HAL_Init+0x40>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8002b00 <HAL_Init+0x40>)
 8002ad6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ada:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002adc:	4b08      	ldr	r3, [pc, #32]	@ (8002b00 <HAL_Init+0x40>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a07      	ldr	r2, [pc, #28]	@ (8002b00 <HAL_Init+0x40>)
 8002ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ae6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ae8:	2003      	movs	r0, #3
 8002aea:	f000 fce6 	bl	80034ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aee:	200f      	movs	r0, #15
 8002af0:	f7fe fa3e 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002af4:	f7fe f866 	bl	8000bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40023c00 	.word	0x40023c00

08002b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b08:	4b06      	ldr	r3, [pc, #24]	@ (8002b24 <HAL_IncTick+0x20>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <HAL_IncTick+0x24>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4413      	add	r3, r2
 8002b14:	4a04      	ldr	r2, [pc, #16]	@ (8002b28 <HAL_IncTick+0x24>)
 8002b16:	6013      	str	r3, [r2, #0]
}
 8002b18:	bf00      	nop
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	20000028 	.word	0x20000028
 8002b28:	20000934 	.word	0x20000934

08002b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b30:	4b03      	ldr	r3, [pc, #12]	@ (8002b40 <HAL_GetTick+0x14>)
 8002b32:	681b      	ldr	r3, [r3, #0]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	20000934 	.word	0x20000934

08002b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b4c:	f7ff ffee 	bl	8002b2c <HAL_GetTick>
 8002b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5c:	d005      	beq.n	8002b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b88 <HAL_Delay+0x44>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4413      	add	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b6a:	bf00      	nop
 8002b6c:	f7ff ffde 	bl	8002b2c <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d8f7      	bhi.n	8002b6c <HAL_Delay+0x28>
  {
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	bf00      	nop
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000028 	.word	0x20000028

08002b8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e033      	b.n	8002c0a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d109      	bne.n	8002bbe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7fe f836 	bl	8000c1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	f003 0310 	and.w	r3, r3, #16
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d118      	bne.n	8002bfc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002bd2:	f023 0302 	bic.w	r3, r3, #2
 8002bd6:	f043 0202 	orr.w	r2, r3, #2
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fab8 	bl	8003154 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	f023 0303 	bic.w	r3, r3, #3
 8002bf2:	f043 0201 	orr.w	r2, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bfa:	e001      	b.n	8002c00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b086      	sub	sp, #24
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f003 0320 	and.w	r3, r3, #32
 8002c40:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d049      	beq.n	8002cdc <HAL_ADC_IRQHandler+0xca>
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d046      	beq.n	8002cdc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d105      	bne.n	8002c66 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d12b      	bne.n	8002ccc <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d127      	bne.n	8002ccc <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c82:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d006      	beq.n	8002c98 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d119      	bne.n	8002ccc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0220 	bic.w	r2, r2, #32
 8002ca6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d105      	bne.n	8002ccc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc4:	f043 0201 	orr.w	r2, r3, #1
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7fd ff4b 	bl	8000b68 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f06f 0212 	mvn.w	r2, #18
 8002cda:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cea:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d057      	beq.n	8002da2 <HAL_ADC_IRQHandler+0x190>
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d054      	beq.n	8002da2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d105      	bne.n	8002d10 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d08:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d139      	bne.n	8002d92 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d24:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d006      	beq.n	8002d3a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d12b      	bne.n	8002d92 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d124      	bne.n	8002d92 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d11d      	bne.n	8002d92 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d119      	bne.n	8002d92 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d6c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d105      	bne.n	8002d92 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	f043 0201 	orr.w	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fada 	bl	800334c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f06f 020c 	mvn.w	r2, #12
 8002da0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d017      	beq.n	8002de8 <HAL_ADC_IRQHandler+0x1d6>
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d014      	beq.n	8002de8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d10d      	bne.n	8002de8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f884 	bl	8002ee6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f06f 0201 	mvn.w	r2, #1
 8002de6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002df6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d015      	beq.n	8002e2a <HAL_ADC_IRQHandler+0x218>
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d012      	beq.n	8002e2a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e08:	f043 0202 	orr.w	r2, r3, #2
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0220 	mvn.w	r2, #32
 8002e18:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f86d 	bl	8002efa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0220 	mvn.w	r2, #32
 8002e28:	601a      	str	r2, [r3, #0]
  }
}
 8002e2a:	bf00      	nop
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_ADC_Stop_DMA+0x1a>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e048      	b.n	8002ede <HAL_ADC_Stop_DMA+0xac>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0201 	bic.w	r2, r2, #1
 8002e62:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d130      	bne.n	8002ed4 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e80:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d10f      	bne.n	8002eb0 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fbf3 	bl	8003680 <HAL_DMA_Abort>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8002ebe:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	f043 0201 	orr.w	r2, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
	...

08002f10 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x1c>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e105      	b.n	8003138 <HAL_ADC_ConfigChannel+0x228>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b09      	cmp	r3, #9
 8002f3a:	d925      	bls.n	8002f88 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68d9      	ldr	r1, [r3, #12]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	4413      	add	r3, r2
 8002f50:	3b1e      	subs	r3, #30
 8002f52:	2207      	movs	r2, #7
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43da      	mvns	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	400a      	ands	r2, r1
 8002f60:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68d9      	ldr	r1, [r3, #12]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	4618      	mov	r0, r3
 8002f74:	4603      	mov	r3, r0
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	4403      	add	r3, r0
 8002f7a:	3b1e      	subs	r3, #30
 8002f7c:	409a      	lsls	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	e022      	b.n	8002fce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6919      	ldr	r1, [r3, #16]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	461a      	mov	r2, r3
 8002f96:	4613      	mov	r3, r2
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	4413      	add	r3, r2
 8002f9c:	2207      	movs	r2, #7
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43da      	mvns	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	400a      	ands	r2, r1
 8002faa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6919      	ldr	r1, [r3, #16]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	4403      	add	r3, r0
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b06      	cmp	r3, #6
 8002fd4:	d824      	bhi.n	8003020 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3b05      	subs	r3, #5
 8002fe8:	221f      	movs	r2, #31
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	400a      	ands	r2, r1
 8002ff6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	b29b      	uxth	r3, r3
 8003004:	4618      	mov	r0, r3
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	3b05      	subs	r3, #5
 8003012:	fa00 f203 	lsl.w	r2, r0, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	635a      	str	r2, [r3, #52]	@ 0x34
 800301e:	e04c      	b.n	80030ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b0c      	cmp	r3, #12
 8003026:	d824      	bhi.n	8003072 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	3b23      	subs	r3, #35	@ 0x23
 800303a:	221f      	movs	r2, #31
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43da      	mvns	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	400a      	ands	r2, r1
 8003048:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	b29b      	uxth	r3, r3
 8003056:	4618      	mov	r0, r3
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	3b23      	subs	r3, #35	@ 0x23
 8003064:	fa00 f203 	lsl.w	r2, r0, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003070:	e023      	b.n	80030ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	3b41      	subs	r3, #65	@ 0x41
 8003084:	221f      	movs	r2, #31
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43da      	mvns	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	400a      	ands	r2, r1
 8003092:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	4618      	mov	r0, r3
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	3b41      	subs	r3, #65	@ 0x41
 80030ae:	fa00 f203 	lsl.w	r2, r0, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030ba:	4b22      	ldr	r3, [pc, #136]	@ (8003144 <HAL_ADC_ConfigChannel+0x234>)
 80030bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a21      	ldr	r2, [pc, #132]	@ (8003148 <HAL_ADC_ConfigChannel+0x238>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d109      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x1cc>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b12      	cmp	r3, #18
 80030ce:	d105      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a19      	ldr	r2, [pc, #100]	@ (8003148 <HAL_ADC_ConfigChannel+0x238>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d123      	bne.n	800312e <HAL_ADC_ConfigChannel+0x21e>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b10      	cmp	r3, #16
 80030ec:	d003      	beq.n	80030f6 <HAL_ADC_ConfigChannel+0x1e6>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b11      	cmp	r3, #17
 80030f4:	d11b      	bne.n	800312e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b10      	cmp	r3, #16
 8003108:	d111      	bne.n	800312e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800310a:	4b10      	ldr	r3, [pc, #64]	@ (800314c <HAL_ADC_ConfigChannel+0x23c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a10      	ldr	r2, [pc, #64]	@ (8003150 <HAL_ADC_ConfigChannel+0x240>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	0c9a      	lsrs	r2, r3, #18
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003120:	e002      	b.n	8003128 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	3b01      	subs	r3, #1
 8003126:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f9      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	40012300 	.word	0x40012300
 8003148:	40012000 	.word	0x40012000
 800314c:	20000000 	.word	0x20000000
 8003150:	431bde83 	.word	0x431bde83

08003154 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800315c:	4b79      	ldr	r3, [pc, #484]	@ (8003344 <ADC_Init+0x1f0>)
 800315e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	431a      	orrs	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003188:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6859      	ldr	r1, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	021a      	lsls	r2, r3, #8
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80031ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6859      	ldr	r1, [r3, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6899      	ldr	r1, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e6:	4a58      	ldr	r2, [pc, #352]	@ (8003348 <ADC_Init+0x1f4>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d022      	beq.n	8003232 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6899      	ldr	r1, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800321c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6899      	ldr	r1, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	e00f      	b.n	8003252 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003240:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003250:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0202 	bic.w	r2, r2, #2
 8003260:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6899      	ldr	r1, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	7e1b      	ldrb	r3, [r3, #24]
 800326c:	005a      	lsls	r2, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3020 	ldrb.w	r3, [r3, #32]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d01b      	beq.n	80032b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800328e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800329e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6859      	ldr	r1, [r3, #4]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032aa:	3b01      	subs	r3, #1
 80032ac:	035a      	lsls	r2, r3, #13
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	e007      	b.n	80032c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032c6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80032d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	051a      	lsls	r2, r3, #20
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80032fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6899      	ldr	r1, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800330a:	025a      	lsls	r2, r3, #9
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003322:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6899      	ldr	r1, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	029a      	lsls	r2, r3, #10
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	609a      	str	r2, [r3, #8]
}
 8003338:	bf00      	nop
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	40012300 	.word	0x40012300
 8003348:	0f000001 	.word	0x0f000001

0800334c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003370:	4b0c      	ldr	r3, [pc, #48]	@ (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800337c:	4013      	ands	r3, r2
 800337e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003388:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800338c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003392:	4a04      	ldr	r2, [pc, #16]	@ (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	60d3      	str	r3, [r2, #12]
}
 8003398:	bf00      	nop
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033ac:	4b04      	ldr	r3, [pc, #16]	@ (80033c0 <__NVIC_GetPriorityGrouping+0x18>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	0a1b      	lsrs	r3, r3, #8
 80033b2:	f003 0307 	and.w	r3, r3, #7
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	db0b      	blt.n	80033ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	f003 021f 	and.w	r2, r3, #31
 80033dc:	4907      	ldr	r1, [pc, #28]	@ (80033fc <__NVIC_EnableIRQ+0x38>)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	2001      	movs	r0, #1
 80033e6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	e000e100 	.word	0xe000e100

08003400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	6039      	str	r1, [r7, #0]
 800340a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800340c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003410:	2b00      	cmp	r3, #0
 8003412:	db0a      	blt.n	800342a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	b2da      	uxtb	r2, r3
 8003418:	490c      	ldr	r1, [pc, #48]	@ (800344c <__NVIC_SetPriority+0x4c>)
 800341a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341e:	0112      	lsls	r2, r2, #4
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	440b      	add	r3, r1
 8003424:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003428:	e00a      	b.n	8003440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	4908      	ldr	r1, [pc, #32]	@ (8003450 <__NVIC_SetPriority+0x50>)
 8003430:	79fb      	ldrb	r3, [r7, #7]
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	3b04      	subs	r3, #4
 8003438:	0112      	lsls	r2, r2, #4
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	440b      	add	r3, r1
 800343e:	761a      	strb	r2, [r3, #24]
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	e000e100 	.word	0xe000e100
 8003450:	e000ed00 	.word	0xe000ed00

08003454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003454:	b480      	push	{r7}
 8003456:	b089      	sub	sp, #36	@ 0x24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f1c3 0307 	rsb	r3, r3, #7
 800346e:	2b04      	cmp	r3, #4
 8003470:	bf28      	it	cs
 8003472:	2304      	movcs	r3, #4
 8003474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	3304      	adds	r3, #4
 800347a:	2b06      	cmp	r3, #6
 800347c:	d902      	bls.n	8003484 <NVIC_EncodePriority+0x30>
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	3b03      	subs	r3, #3
 8003482:	e000      	b.n	8003486 <NVIC_EncodePriority+0x32>
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003488:	f04f 32ff 	mov.w	r2, #4294967295
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43da      	mvns	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	401a      	ands	r2, r3
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800349c:	f04f 31ff 	mov.w	r1, #4294967295
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	fa01 f303 	lsl.w	r3, r1, r3
 80034a6:	43d9      	mvns	r1, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ac:	4313      	orrs	r3, r2
         );
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3724      	adds	r7, #36	@ 0x24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff ff4c 	bl	8003360 <__NVIC_SetPriorityGrouping>
}
 80034c8:	bf00      	nop
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
 80034dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034e2:	f7ff ff61 	bl	80033a8 <__NVIC_GetPriorityGrouping>
 80034e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	68b9      	ldr	r1, [r7, #8]
 80034ec:	6978      	ldr	r0, [r7, #20]
 80034ee:	f7ff ffb1 	bl	8003454 <NVIC_EncodePriority>
 80034f2:	4602      	mov	r2, r0
 80034f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034f8:	4611      	mov	r1, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff ff80 	bl	8003400 <__NVIC_SetPriority>
}
 8003500:	bf00      	nop
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff ff54 	bl	80033c4 <__NVIC_EnableIRQ>
}
 800351c:	bf00      	nop
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003530:	f7ff fafc 	bl	8002b2c <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e099      	b.n	8003674 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003560:	e00f      	b.n	8003582 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003562:	f7ff fae3 	bl	8002b2c <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b05      	cmp	r3, #5
 800356e:	d908      	bls.n	8003582 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2203      	movs	r2, #3
 800357a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e078      	b.n	8003674 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1e8      	bne.n	8003562 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	4b38      	ldr	r3, [pc, #224]	@ (800367c <HAL_DMA_Init+0x158>)
 800359c:	4013      	ands	r3, r2
 800359e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d107      	bne.n	80035ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e4:	4313      	orrs	r3, r2
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f023 0307 	bic.w	r3, r3, #7
 8003602:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4313      	orrs	r3, r2
 800360c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003612:	2b04      	cmp	r3, #4
 8003614:	d117      	bne.n	8003646 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	4313      	orrs	r3, r2
 800361e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00e      	beq.n	8003646 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 fa59 	bl	8003ae0 <DMA_CheckFifoParam>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2240      	movs	r2, #64	@ 0x40
 8003638:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003642:	2301      	movs	r3, #1
 8003644:	e016      	b.n	8003674 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fa10 	bl	8003a74 <DMA_CalcBaseAndBitshift>
 8003654:	4603      	mov	r3, r0
 8003656:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800365c:	223f      	movs	r2, #63	@ 0x3f
 800365e:	409a      	lsls	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	f010803f 	.word	0xf010803f

08003680 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800368e:	f7ff fa4d 	bl	8002b2c <HAL_GetTick>
 8003692:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d008      	beq.n	80036b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2280      	movs	r2, #128	@ 0x80
 80036a4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e052      	b.n	8003758 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0216 	bic.w	r2, r2, #22
 80036c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695a      	ldr	r2, [r3, #20]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d103      	bne.n	80036e2 <HAL_DMA_Abort+0x62>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0208 	bic.w	r2, r2, #8
 80036f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0201 	bic.w	r2, r2, #1
 8003700:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003702:	e013      	b.n	800372c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003704:	f7ff fa12 	bl	8002b2c <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b05      	cmp	r3, #5
 8003710:	d90c      	bls.n	800372c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2220      	movs	r2, #32
 8003716:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2203      	movs	r2, #3
 800371c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e015      	b.n	8003758 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1e4      	bne.n	8003704 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800373e:	223f      	movs	r2, #63	@ 0x3f
 8003740:	409a      	lsls	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800376c:	4b8e      	ldr	r3, [pc, #568]	@ (80039a8 <HAL_DMA_IRQHandler+0x248>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a8e      	ldr	r2, [pc, #568]	@ (80039ac <HAL_DMA_IRQHandler+0x24c>)
 8003772:	fba2 2303 	umull	r2, r3, r2, r3
 8003776:	0a9b      	lsrs	r3, r3, #10
 8003778:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800377e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800378a:	2208      	movs	r2, #8
 800378c:	409a      	lsls	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4013      	ands	r3, r2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d01a      	beq.n	80037cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d013      	beq.n	80037cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0204 	bic.w	r2, r2, #4
 80037b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b8:	2208      	movs	r2, #8
 80037ba:	409a      	lsls	r2, r3
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c4:	f043 0201 	orr.w	r2, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d0:	2201      	movs	r2, #1
 80037d2:	409a      	lsls	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d012      	beq.n	8003802 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00b      	beq.n	8003802 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ee:	2201      	movs	r2, #1
 80037f0:	409a      	lsls	r2, r3
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037fa:	f043 0202 	orr.w	r2, r3, #2
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003806:	2204      	movs	r2, #4
 8003808:	409a      	lsls	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d012      	beq.n	8003838 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00b      	beq.n	8003838 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003824:	2204      	movs	r2, #4
 8003826:	409a      	lsls	r2, r3
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003830:	f043 0204 	orr.w	r2, r3, #4
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800383c:	2210      	movs	r2, #16
 800383e:	409a      	lsls	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4013      	ands	r3, r2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d043      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d03c      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385a:	2210      	movs	r2, #16
 800385c:	409a      	lsls	r2, r3
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d018      	beq.n	80038a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d108      	bne.n	8003890 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003882:	2b00      	cmp	r3, #0
 8003884:	d024      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	4798      	blx	r3
 800388e:	e01f      	b.n	80038d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003894:	2b00      	cmp	r3, #0
 8003896:	d01b      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	4798      	blx	r3
 80038a0:	e016      	b.n	80038d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d107      	bne.n	80038c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0208 	bic.w	r2, r2, #8
 80038be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d4:	2220      	movs	r2, #32
 80038d6:	409a      	lsls	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4013      	ands	r3, r2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 808f 	beq.w	8003a00 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 8087 	beq.w	8003a00 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f6:	2220      	movs	r2, #32
 80038f8:	409a      	lsls	r2, r3
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b05      	cmp	r3, #5
 8003908:	d136      	bne.n	8003978 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0216 	bic.w	r2, r2, #22
 8003918:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695a      	ldr	r2, [r3, #20]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003928:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	d103      	bne.n	800393a <HAL_DMA_IRQHandler+0x1da>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003936:	2b00      	cmp	r3, #0
 8003938:	d007      	beq.n	800394a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0208 	bic.w	r2, r2, #8
 8003948:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394e:	223f      	movs	r2, #63	@ 0x3f
 8003950:	409a      	lsls	r2, r3
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800396a:	2b00      	cmp	r3, #0
 800396c:	d07e      	beq.n	8003a6c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	4798      	blx	r3
        }
        return;
 8003976:	e079      	b.n	8003a6c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d01d      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10d      	bne.n	80039b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003998:	2b00      	cmp	r3, #0
 800399a:	d031      	beq.n	8003a00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	4798      	blx	r3
 80039a4:	e02c      	b.n	8003a00 <HAL_DMA_IRQHandler+0x2a0>
 80039a6:	bf00      	nop
 80039a8:	20000000 	.word	0x20000000
 80039ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d023      	beq.n	8003a00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	4798      	blx	r3
 80039c0:	e01e      	b.n	8003a00 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10f      	bne.n	80039f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0210 	bic.w	r2, r2, #16
 80039de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d032      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d022      	beq.n	8003a5a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2205      	movs	r2, #5
 8003a18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0201 	bic.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d307      	bcc.n	8003a48 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f2      	bne.n	8003a2c <HAL_DMA_IRQHandler+0x2cc>
 8003a46:	e000      	b.n	8003a4a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a48:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	4798      	blx	r3
 8003a6a:	e000      	b.n	8003a6e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a6c:	bf00      	nop
    }
  }
}
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	3b10      	subs	r3, #16
 8003a84:	4a14      	ldr	r2, [pc, #80]	@ (8003ad8 <DMA_CalcBaseAndBitshift+0x64>)
 8003a86:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8a:	091b      	lsrs	r3, r3, #4
 8003a8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a8e:	4a13      	ldr	r2, [pc, #76]	@ (8003adc <DMA_CalcBaseAndBitshift+0x68>)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4413      	add	r3, r2
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d909      	bls.n	8003ab6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003aaa:	f023 0303 	bic.w	r3, r3, #3
 8003aae:	1d1a      	adds	r2, r3, #4
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ab4:	e007      	b.n	8003ac6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003abe:	f023 0303 	bic.w	r3, r3, #3
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	aaaaaaab 	.word	0xaaaaaaab
 8003adc:	0800b248 	.word	0x0800b248

08003ae0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d11f      	bne.n	8003b3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d856      	bhi.n	8003bae <DMA_CheckFifoParam+0xce>
 8003b00:	a201      	add	r2, pc, #4	@ (adr r2, 8003b08 <DMA_CheckFifoParam+0x28>)
 8003b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b06:	bf00      	nop
 8003b08:	08003b19 	.word	0x08003b19
 8003b0c:	08003b2b 	.word	0x08003b2b
 8003b10:	08003b19 	.word	0x08003b19
 8003b14:	08003baf 	.word	0x08003baf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d046      	beq.n	8003bb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b28:	e043      	b.n	8003bb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b32:	d140      	bne.n	8003bb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b38:	e03d      	b.n	8003bb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b42:	d121      	bne.n	8003b88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d837      	bhi.n	8003bba <DMA_CheckFifoParam+0xda>
 8003b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b50 <DMA_CheckFifoParam+0x70>)
 8003b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b50:	08003b61 	.word	0x08003b61
 8003b54:	08003b67 	.word	0x08003b67
 8003b58:	08003b61 	.word	0x08003b61
 8003b5c:	08003b79 	.word	0x08003b79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
      break;
 8003b64:	e030      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d025      	beq.n	8003bbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b76:	e022      	b.n	8003bbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b80:	d11f      	bne.n	8003bc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b86:	e01c      	b.n	8003bc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d903      	bls.n	8003b96 <DMA_CheckFifoParam+0xb6>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d003      	beq.n	8003b9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b94:	e018      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
      break;
 8003b9a:	e015      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00e      	beq.n	8003bc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
      break;
 8003bac:	e00b      	b.n	8003bc6 <DMA_CheckFifoParam+0xe6>
      break;
 8003bae:	bf00      	nop
 8003bb0:	e00a      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bb2:	bf00      	nop
 8003bb4:	e008      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bb6:	bf00      	nop
 8003bb8:	e006      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bba:	bf00      	nop
 8003bbc:	e004      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bbe:	bf00      	nop
 8003bc0:	e002      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003bc2:	bf00      	nop
 8003bc4:	e000      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bc6:	bf00      	nop
    }
  } 
  
  return status; 
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop

08003bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b089      	sub	sp, #36	@ 0x24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61fb      	str	r3, [r7, #28]
 8003bf2:	e159      	b.n	8003ea8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4013      	ands	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	f040 8148 	bne.w	8003ea2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d005      	beq.n	8003c2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d130      	bne.n	8003c8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	2203      	movs	r2, #3
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c60:	2201      	movs	r2, #1
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	091b      	lsrs	r3, r3, #4
 8003c76:	f003 0201 	and.w	r2, r3, #1
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d017      	beq.n	8003cc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4013      	ands	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d123      	bne.n	8003d1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	08da      	lsrs	r2, r3, #3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3208      	adds	r2, #8
 8003cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	220f      	movs	r2, #15
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	08da      	lsrs	r2, r3, #3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3208      	adds	r2, #8
 8003d16:	69b9      	ldr	r1, [r7, #24]
 8003d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	2203      	movs	r2, #3
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f003 0203 	and.w	r2, r3, #3
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80a2 	beq.w	8003ea2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	4b57      	ldr	r3, [pc, #348]	@ (8003ec0 <HAL_GPIO_Init+0x2e8>)
 8003d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d66:	4a56      	ldr	r2, [pc, #344]	@ (8003ec0 <HAL_GPIO_Init+0x2e8>)
 8003d68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d6e:	4b54      	ldr	r3, [pc, #336]	@ (8003ec0 <HAL_GPIO_Init+0x2e8>)
 8003d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d7a:	4a52      	ldr	r2, [pc, #328]	@ (8003ec4 <HAL_GPIO_Init+0x2ec>)
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	089b      	lsrs	r3, r3, #2
 8003d80:	3302      	adds	r3, #2
 8003d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	220f      	movs	r2, #15
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	43db      	mvns	r3, r3
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a49      	ldr	r2, [pc, #292]	@ (8003ec8 <HAL_GPIO_Init+0x2f0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d019      	beq.n	8003dda <HAL_GPIO_Init+0x202>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a48      	ldr	r2, [pc, #288]	@ (8003ecc <HAL_GPIO_Init+0x2f4>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d013      	beq.n	8003dd6 <HAL_GPIO_Init+0x1fe>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a47      	ldr	r2, [pc, #284]	@ (8003ed0 <HAL_GPIO_Init+0x2f8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00d      	beq.n	8003dd2 <HAL_GPIO_Init+0x1fa>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a46      	ldr	r2, [pc, #280]	@ (8003ed4 <HAL_GPIO_Init+0x2fc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d007      	beq.n	8003dce <HAL_GPIO_Init+0x1f6>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a45      	ldr	r2, [pc, #276]	@ (8003ed8 <HAL_GPIO_Init+0x300>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d101      	bne.n	8003dca <HAL_GPIO_Init+0x1f2>
 8003dc6:	2304      	movs	r3, #4
 8003dc8:	e008      	b.n	8003ddc <HAL_GPIO_Init+0x204>
 8003dca:	2307      	movs	r3, #7
 8003dcc:	e006      	b.n	8003ddc <HAL_GPIO_Init+0x204>
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e004      	b.n	8003ddc <HAL_GPIO_Init+0x204>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e002      	b.n	8003ddc <HAL_GPIO_Init+0x204>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <HAL_GPIO_Init+0x204>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	69fa      	ldr	r2, [r7, #28]
 8003dde:	f002 0203 	and.w	r2, r2, #3
 8003de2:	0092      	lsls	r2, r2, #2
 8003de4:	4093      	lsls	r3, r2
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dec:	4935      	ldr	r1, [pc, #212]	@ (8003ec4 <HAL_GPIO_Init+0x2ec>)
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	089b      	lsrs	r3, r3, #2
 8003df2:	3302      	adds	r3, #2
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dfa:	4b38      	ldr	r3, [pc, #224]	@ (8003edc <HAL_GPIO_Init+0x304>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	43db      	mvns	r3, r3
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	4013      	ands	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e1e:	4a2f      	ldr	r2, [pc, #188]	@ (8003edc <HAL_GPIO_Init+0x304>)
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e24:	4b2d      	ldr	r3, [pc, #180]	@ (8003edc <HAL_GPIO_Init+0x304>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4013      	ands	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e48:	4a24      	ldr	r2, [pc, #144]	@ (8003edc <HAL_GPIO_Init+0x304>)
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e4e:	4b23      	ldr	r3, [pc, #140]	@ (8003edc <HAL_GPIO_Init+0x304>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	43db      	mvns	r3, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e72:	4a1a      	ldr	r2, [pc, #104]	@ (8003edc <HAL_GPIO_Init+0x304>)
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e78:	4b18      	ldr	r3, [pc, #96]	@ (8003edc <HAL_GPIO_Init+0x304>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	43db      	mvns	r3, r3
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4013      	ands	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e9c:	4a0f      	ldr	r2, [pc, #60]	@ (8003edc <HAL_GPIO_Init+0x304>)
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	61fb      	str	r3, [r7, #28]
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	2b0f      	cmp	r3, #15
 8003eac:	f67f aea2 	bls.w	8003bf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003eb0:	bf00      	nop
 8003eb2:	bf00      	nop
 8003eb4:	3724      	adds	r7, #36	@ 0x24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	40013800 	.word	0x40013800
 8003ec8:	40020000 	.word	0x40020000
 8003ecc:	40020400 	.word	0x40020400
 8003ed0:	40020800 	.word	0x40020800
 8003ed4:	40020c00 	.word	0x40020c00
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	40013c00 	.word	0x40013c00

08003ee0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	887b      	ldrh	r3, [r7, #2]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	73fb      	strb	r3, [r7, #15]
 8003efc:	e001      	b.n	8003f02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003efe:	2300      	movs	r3, #0
 8003f00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	807b      	strh	r3, [r7, #2]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f20:	787b      	ldrb	r3, [r7, #1]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f26:	887a      	ldrh	r2, [r7, #2]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f2c:	e003      	b.n	8003f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f2e:	887b      	ldrh	r3, [r7, #2]
 8003f30:	041a      	lsls	r2, r3, #16
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	619a      	str	r2, [r3, #24]
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
	...

08003f44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e12b      	b.n	80041ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fc fed4 	bl	8000d18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2224      	movs	r2, #36	@ 0x24
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0201 	bic.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fa6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fa8:	f001 f8ea 	bl	8005180 <HAL_RCC_GetPCLK1Freq>
 8003fac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	4a81      	ldr	r2, [pc, #516]	@ (80041b8 <HAL_I2C_Init+0x274>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d807      	bhi.n	8003fc8 <HAL_I2C_Init+0x84>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4a80      	ldr	r2, [pc, #512]	@ (80041bc <HAL_I2C_Init+0x278>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	bf94      	ite	ls
 8003fc0:	2301      	movls	r3, #1
 8003fc2:	2300      	movhi	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	e006      	b.n	8003fd6 <HAL_I2C_Init+0x92>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4a7d      	ldr	r2, [pc, #500]	@ (80041c0 <HAL_I2C_Init+0x27c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	bf94      	ite	ls
 8003fd0:	2301      	movls	r3, #1
 8003fd2:	2300      	movhi	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e0e7      	b.n	80041ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4a78      	ldr	r2, [pc, #480]	@ (80041c4 <HAL_I2C_Init+0x280>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	0c9b      	lsrs	r3, r3, #18
 8003fe8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	4a6a      	ldr	r2, [pc, #424]	@ (80041b8 <HAL_I2C_Init+0x274>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d802      	bhi.n	8004018 <HAL_I2C_Init+0xd4>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	3301      	adds	r3, #1
 8004016:	e009      	b.n	800402c <HAL_I2C_Init+0xe8>
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800401e:	fb02 f303 	mul.w	r3, r2, r3
 8004022:	4a69      	ldr	r2, [pc, #420]	@ (80041c8 <HAL_I2C_Init+0x284>)
 8004024:	fba2 2303 	umull	r2, r3, r2, r3
 8004028:	099b      	lsrs	r3, r3, #6
 800402a:	3301      	adds	r3, #1
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	430b      	orrs	r3, r1
 8004032:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800403e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	495c      	ldr	r1, [pc, #368]	@ (80041b8 <HAL_I2C_Init+0x274>)
 8004048:	428b      	cmp	r3, r1
 800404a:	d819      	bhi.n	8004080 <HAL_I2C_Init+0x13c>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	1e59      	subs	r1, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	fbb1 f3f3 	udiv	r3, r1, r3
 800405a:	1c59      	adds	r1, r3, #1
 800405c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004060:	400b      	ands	r3, r1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_I2C_Init+0x138>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1e59      	subs	r1, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	fbb1 f3f3 	udiv	r3, r1, r3
 8004074:	3301      	adds	r3, #1
 8004076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800407a:	e051      	b.n	8004120 <HAL_I2C_Init+0x1dc>
 800407c:	2304      	movs	r3, #4
 800407e:	e04f      	b.n	8004120 <HAL_I2C_Init+0x1dc>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d111      	bne.n	80040ac <HAL_I2C_Init+0x168>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	1e58      	subs	r0, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6859      	ldr	r1, [r3, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	440b      	add	r3, r1
 8004096:	fbb0 f3f3 	udiv	r3, r0, r3
 800409a:	3301      	adds	r3, #1
 800409c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bf0c      	ite	eq
 80040a4:	2301      	moveq	r3, #1
 80040a6:	2300      	movne	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	e012      	b.n	80040d2 <HAL_I2C_Init+0x18e>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	1e58      	subs	r0, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6859      	ldr	r1, [r3, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	0099      	lsls	r1, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	fbb0 f3f3 	udiv	r3, r0, r3
 80040c2:	3301      	adds	r3, #1
 80040c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bf0c      	ite	eq
 80040cc:	2301      	moveq	r3, #1
 80040ce:	2300      	movne	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <HAL_I2C_Init+0x196>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e022      	b.n	8004120 <HAL_I2C_Init+0x1dc>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10e      	bne.n	8004100 <HAL_I2C_Init+0x1bc>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1e58      	subs	r0, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6859      	ldr	r1, [r3, #4]
 80040ea:	460b      	mov	r3, r1
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	440b      	add	r3, r1
 80040f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80040f4:	3301      	adds	r3, #1
 80040f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040fe:	e00f      	b.n	8004120 <HAL_I2C_Init+0x1dc>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1e58      	subs	r0, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6859      	ldr	r1, [r3, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	0099      	lsls	r1, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	fbb0 f3f3 	udiv	r3, r0, r3
 8004116:	3301      	adds	r3, #1
 8004118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	6809      	ldr	r1, [r1, #0]
 8004124:	4313      	orrs	r3, r2
 8004126:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	69da      	ldr	r2, [r3, #28]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800414e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6911      	ldr	r1, [r2, #16]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68d2      	ldr	r2, [r2, #12]
 800415a:	4311      	orrs	r1, r2
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	430b      	orrs	r3, r1
 8004162:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695a      	ldr	r2, [r3, #20]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2220      	movs	r2, #32
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	000186a0 	.word	0x000186a0
 80041bc:	001e847f 	.word	0x001e847f
 80041c0:	003d08ff 	.word	0x003d08ff
 80041c4:	431bde83 	.word	0x431bde83
 80041c8:	10624dd3 	.word	0x10624dd3

080041cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	4608      	mov	r0, r1
 80041d6:	4611      	mov	r1, r2
 80041d8:	461a      	mov	r2, r3
 80041da:	4603      	mov	r3, r0
 80041dc:	817b      	strh	r3, [r7, #10]
 80041de:	460b      	mov	r3, r1
 80041e0:	813b      	strh	r3, [r7, #8]
 80041e2:	4613      	mov	r3, r2
 80041e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041e6:	f7fe fca1 	bl	8002b2c <HAL_GetTick>
 80041ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	f040 80d9 	bne.w	80043ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	2319      	movs	r3, #25
 8004200:	2201      	movs	r2, #1
 8004202:	496d      	ldr	r1, [pc, #436]	@ (80043b8 <HAL_I2C_Mem_Write+0x1ec>)
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f971 	bl	80044ec <I2C_WaitOnFlagUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004210:	2302      	movs	r3, #2
 8004212:	e0cc      	b.n	80043ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_I2C_Mem_Write+0x56>
 800421e:	2302      	movs	r3, #2
 8004220:	e0c5      	b.n	80043ae <HAL_I2C_Mem_Write+0x1e2>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b01      	cmp	r3, #1
 8004236:	d007      	beq.n	8004248 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004256:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2221      	movs	r2, #33	@ 0x21
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2240      	movs	r2, #64	@ 0x40
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a3a      	ldr	r2, [r7, #32]
 8004272:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004278:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4a4d      	ldr	r2, [pc, #308]	@ (80043bc <HAL_I2C_Mem_Write+0x1f0>)
 8004288:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800428a:	88f8      	ldrh	r0, [r7, #6]
 800428c:	893a      	ldrh	r2, [r7, #8]
 800428e:	8979      	ldrh	r1, [r7, #10]
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	9301      	str	r3, [sp, #4]
 8004294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	4603      	mov	r3, r0
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f890 	bl	80043c0 <I2C_RequestMemoryWrite>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d052      	beq.n	800434c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e081      	b.n	80043ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 fa36 	bl	8004720 <I2C_WaitOnTXEFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00d      	beq.n	80042d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d107      	bne.n	80042d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e06b      	b.n	80043ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042da:	781a      	ldrb	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b04      	cmp	r3, #4
 8004312:	d11b      	bne.n	800434c <HAL_I2C_Mem_Write+0x180>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004318:	2b00      	cmp	r3, #0
 800431a:	d017      	beq.n	800434c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004320:	781a      	ldrb	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004336:	3b01      	subs	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1aa      	bne.n	80042aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 fa29 	bl	80047b0 <I2C_WaitOnBTFFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00d      	beq.n	8004380 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004368:	2b04      	cmp	r3, #4
 800436a:	d107      	bne.n	800437c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800437a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e016      	b.n	80043ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800438e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	e000      	b.n	80043ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80043ac:	2302      	movs	r3, #2
  }
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	00100002 	.word	0x00100002
 80043bc:	ffff0000 	.word	0xffff0000

080043c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af02      	add	r7, sp, #8
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	4608      	mov	r0, r1
 80043ca:	4611      	mov	r1, r2
 80043cc:	461a      	mov	r2, r3
 80043ce:	4603      	mov	r3, r0
 80043d0:	817b      	strh	r3, [r7, #10]
 80043d2:	460b      	mov	r3, r1
 80043d4:	813b      	strh	r3, [r7, #8]
 80043d6:	4613      	mov	r3, r2
 80043d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f878 	bl	80044ec <I2C_WaitOnFlagUntilTimeout>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00d      	beq.n	800441e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800440c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004410:	d103      	bne.n	800441a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004418:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e05f      	b.n	80044de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800441e:	897b      	ldrh	r3, [r7, #10]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	461a      	mov	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800442c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800442e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004430:	6a3a      	ldr	r2, [r7, #32]
 8004432:	492d      	ldr	r1, [pc, #180]	@ (80044e8 <I2C_RequestMemoryWrite+0x128>)
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f8d3 	bl	80045e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e04c      	b.n	80044de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800445a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800445c:	6a39      	ldr	r1, [r7, #32]
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 f95e 	bl	8004720 <I2C_WaitOnTXEFlagUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00d      	beq.n	8004486 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446e:	2b04      	cmp	r3, #4
 8004470:	d107      	bne.n	8004482 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004480:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e02b      	b.n	80044de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d105      	bne.n	8004498 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800448c:	893b      	ldrh	r3, [r7, #8]
 800448e:	b2da      	uxtb	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	611a      	str	r2, [r3, #16]
 8004496:	e021      	b.n	80044dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004498:	893b      	ldrh	r3, [r7, #8]
 800449a:	0a1b      	lsrs	r3, r3, #8
 800449c:	b29b      	uxth	r3, r3
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a8:	6a39      	ldr	r1, [r7, #32]
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 f938 	bl	8004720 <I2C_WaitOnTXEFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00d      	beq.n	80044d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d107      	bne.n	80044ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e005      	b.n	80044de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044d2:	893b      	ldrh	r3, [r7, #8]
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	00010002 	.word	0x00010002

080044ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	603b      	str	r3, [r7, #0]
 80044f8:	4613      	mov	r3, r2
 80044fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044fc:	e048      	b.n	8004590 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004504:	d044      	beq.n	8004590 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004506:	f7fe fb11 	bl	8002b2c <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d302      	bcc.n	800451c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d139      	bne.n	8004590 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	0c1b      	lsrs	r3, r3, #16
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b01      	cmp	r3, #1
 8004524:	d10d      	bne.n	8004542 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	43da      	mvns	r2, r3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	4013      	ands	r3, r2
 8004532:	b29b      	uxth	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	bf0c      	ite	eq
 8004538:	2301      	moveq	r3, #1
 800453a:	2300      	movne	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	461a      	mov	r2, r3
 8004540:	e00c      	b.n	800455c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	43da      	mvns	r2, r3
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	4013      	ands	r3, r2
 800454e:	b29b      	uxth	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	bf0c      	ite	eq
 8004554:	2301      	moveq	r3, #1
 8004556:	2300      	movne	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	461a      	mov	r2, r3
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	429a      	cmp	r2, r3
 8004560:	d116      	bne.n	8004590 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457c:	f043 0220 	orr.w	r2, r3, #32
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e023      	b.n	80045d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	0c1b      	lsrs	r3, r3, #16
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b01      	cmp	r3, #1
 8004598:	d10d      	bne.n	80045b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	43da      	mvns	r2, r3
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	4013      	ands	r3, r2
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	bf0c      	ite	eq
 80045ac:	2301      	moveq	r3, #1
 80045ae:	2300      	movne	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	461a      	mov	r2, r3
 80045b4:	e00c      	b.n	80045d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	43da      	mvns	r2, r3
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	4013      	ands	r3, r2
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	bf0c      	ite	eq
 80045c8:	2301      	moveq	r3, #1
 80045ca:	2300      	movne	r3, #0
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	461a      	mov	r2, r3
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d093      	beq.n	80044fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
 80045ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045ee:	e071      	b.n	80046d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045fe:	d123      	bne.n	8004648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800460e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004618:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004634:	f043 0204 	orr.w	r2, r3, #4
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e067      	b.n	8004718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464e:	d041      	beq.n	80046d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004650:	f7fe fa6c 	bl	8002b2c <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	429a      	cmp	r2, r3
 800465e:	d302      	bcc.n	8004666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d136      	bne.n	80046d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	0c1b      	lsrs	r3, r3, #16
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b01      	cmp	r3, #1
 800466e:	d10c      	bne.n	800468a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	43da      	mvns	r2, r3
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	4013      	ands	r3, r2
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	bf14      	ite	ne
 8004682:	2301      	movne	r3, #1
 8004684:	2300      	moveq	r3, #0
 8004686:	b2db      	uxtb	r3, r3
 8004688:	e00b      	b.n	80046a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	43da      	mvns	r2, r3
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	4013      	ands	r3, r2
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	bf14      	ite	ne
 800469c:	2301      	movne	r3, #1
 800469e:	2300      	moveq	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d016      	beq.n	80046d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c0:	f043 0220 	orr.w	r2, r3, #32
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e021      	b.n	8004718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	0c1b      	lsrs	r3, r3, #16
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d10c      	bne.n	80046f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	43da      	mvns	r2, r3
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	4013      	ands	r3, r2
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bf14      	ite	ne
 80046f0:	2301      	movne	r3, #1
 80046f2:	2300      	moveq	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	e00b      	b.n	8004710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	43da      	mvns	r2, r3
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4013      	ands	r3, r2
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	bf14      	ite	ne
 800470a:	2301      	movne	r3, #1
 800470c:	2300      	moveq	r3, #0
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	f47f af6d 	bne.w	80045f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800472c:	e034      	b.n	8004798 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 f886 	bl	8004840 <I2C_IsAcknowledgeFailed>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e034      	b.n	80047a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004744:	d028      	beq.n	8004798 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004746:	f7fe f9f1 	bl	8002b2c <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	429a      	cmp	r2, r3
 8004754:	d302      	bcc.n	800475c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d11d      	bne.n	8004798 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004766:	2b80      	cmp	r3, #128	@ 0x80
 8004768:	d016      	beq.n	8004798 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004784:	f043 0220 	orr.w	r2, r3, #32
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e007      	b.n	80047a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a2:	2b80      	cmp	r3, #128	@ 0x80
 80047a4:	d1c3      	bne.n	800472e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047bc:	e034      	b.n	8004828 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 f83e 	bl	8004840 <I2C_IsAcknowledgeFailed>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e034      	b.n	8004838 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d4:	d028      	beq.n	8004828 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d6:	f7fe f9a9 	bl	8002b2c <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d302      	bcc.n	80047ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d11d      	bne.n	8004828 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	f003 0304 	and.w	r3, r3, #4
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d016      	beq.n	8004828 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004814:	f043 0220 	orr.w	r2, r3, #32
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e007      	b.n	8004838 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	f003 0304 	and.w	r3, r3, #4
 8004832:	2b04      	cmp	r3, #4
 8004834:	d1c3      	bne.n	80047be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004856:	d11b      	bne.n	8004890 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004860:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2220      	movs	r2, #32
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487c:	f043 0204 	orr.w	r2, r3, #4
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e000      	b.n	8004892 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
	...

080048a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e267      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d075      	beq.n	80049aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048be:	4b88      	ldr	r3, [pc, #544]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 030c 	and.w	r3, r3, #12
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d00c      	beq.n	80048e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ca:	4b85      	ldr	r3, [pc, #532]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d112      	bne.n	80048fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048d6:	4b82      	ldr	r3, [pc, #520]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048e2:	d10b      	bne.n	80048fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e4:	4b7e      	ldr	r3, [pc, #504]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d05b      	beq.n	80049a8 <HAL_RCC_OscConfig+0x108>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d157      	bne.n	80049a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e242      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004904:	d106      	bne.n	8004914 <HAL_RCC_OscConfig+0x74>
 8004906:	4b76      	ldr	r3, [pc, #472]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a75      	ldr	r2, [pc, #468]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 800490c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	e01d      	b.n	8004950 <HAL_RCC_OscConfig+0xb0>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800491c:	d10c      	bne.n	8004938 <HAL_RCC_OscConfig+0x98>
 800491e:	4b70      	ldr	r3, [pc, #448]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a6f      	ldr	r2, [pc, #444]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 8004924:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004928:	6013      	str	r3, [r2, #0]
 800492a:	4b6d      	ldr	r3, [pc, #436]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a6c      	ldr	r2, [pc, #432]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 8004930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	e00b      	b.n	8004950 <HAL_RCC_OscConfig+0xb0>
 8004938:	4b69      	ldr	r3, [pc, #420]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a68      	ldr	r2, [pc, #416]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 800493e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	4b66      	ldr	r3, [pc, #408]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a65      	ldr	r2, [pc, #404]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 800494a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800494e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d013      	beq.n	8004980 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004958:	f7fe f8e8 	bl	8002b2c <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004960:	f7fe f8e4 	bl	8002b2c <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b64      	cmp	r3, #100	@ 0x64
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e207      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004972:	4b5b      	ldr	r3, [pc, #364]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f0      	beq.n	8004960 <HAL_RCC_OscConfig+0xc0>
 800497e:	e014      	b.n	80049aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004980:	f7fe f8d4 	bl	8002b2c <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004988:	f7fe f8d0 	bl	8002b2c <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b64      	cmp	r3, #100	@ 0x64
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e1f3      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800499a:	4b51      	ldr	r3, [pc, #324]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f0      	bne.n	8004988 <HAL_RCC_OscConfig+0xe8>
 80049a6:	e000      	b.n	80049aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d063      	beq.n	8004a7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049b6:	4b4a      	ldr	r3, [pc, #296]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 030c 	and.w	r3, r3, #12
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00b      	beq.n	80049da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049c2:	4b47      	ldr	r3, [pc, #284]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d11c      	bne.n	8004a08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ce:	4b44      	ldr	r3, [pc, #272]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d116      	bne.n	8004a08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049da:	4b41      	ldr	r3, [pc, #260]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d005      	beq.n	80049f2 <HAL_RCC_OscConfig+0x152>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d001      	beq.n	80049f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e1c7      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049f2:	4b3b      	ldr	r3, [pc, #236]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	4937      	ldr	r1, [pc, #220]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a06:	e03a      	b.n	8004a7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d020      	beq.n	8004a52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a10:	4b34      	ldr	r3, [pc, #208]	@ (8004ae4 <HAL_RCC_OscConfig+0x244>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a16:	f7fe f889 	bl	8002b2c <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a1e:	f7fe f885 	bl	8002b2c <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e1a8      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a30:	4b2b      	ldr	r3, [pc, #172]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0f0      	beq.n	8004a1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a3c:	4b28      	ldr	r3, [pc, #160]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	4925      	ldr	r1, [pc, #148]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	600b      	str	r3, [r1, #0]
 8004a50:	e015      	b.n	8004a7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a52:	4b24      	ldr	r3, [pc, #144]	@ (8004ae4 <HAL_RCC_OscConfig+0x244>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a58:	f7fe f868 	bl	8002b2c <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a60:	f7fe f864 	bl	8002b2c <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e187      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a72:	4b1b      	ldr	r3, [pc, #108]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f0      	bne.n	8004a60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d036      	beq.n	8004af8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d016      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a92:	4b15      	ldr	r3, [pc, #84]	@ (8004ae8 <HAL_RCC_OscConfig+0x248>)
 8004a94:	2201      	movs	r2, #1
 8004a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a98:	f7fe f848 	bl	8002b2c <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aa0:	f7fe f844 	bl	8002b2c <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e167      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae0 <HAL_RCC_OscConfig+0x240>)
 8004ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x200>
 8004abe:	e01b      	b.n	8004af8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ac0:	4b09      	ldr	r3, [pc, #36]	@ (8004ae8 <HAL_RCC_OscConfig+0x248>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac6:	f7fe f831 	bl	8002b2c <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004acc:	e00e      	b.n	8004aec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ace:	f7fe f82d 	bl	8002b2c <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d907      	bls.n	8004aec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e150      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	42470000 	.word	0x42470000
 8004ae8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aec:	4b88      	ldr	r3, [pc, #544]	@ (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004aee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1ea      	bne.n	8004ace <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 8097 	beq.w	8004c34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b06:	2300      	movs	r3, #0
 8004b08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b0a:	4b81      	ldr	r3, [pc, #516]	@ (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10f      	bne.n	8004b36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b16:	2300      	movs	r3, #0
 8004b18:	60bb      	str	r3, [r7, #8]
 8004b1a:	4b7d      	ldr	r3, [pc, #500]	@ (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1e:	4a7c      	ldr	r2, [pc, #496]	@ (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b26:	4b7a      	ldr	r3, [pc, #488]	@ (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b2e:	60bb      	str	r3, [r7, #8]
 8004b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b32:	2301      	movs	r3, #1
 8004b34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b36:	4b77      	ldr	r3, [pc, #476]	@ (8004d14 <HAL_RCC_OscConfig+0x474>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d118      	bne.n	8004b74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b42:	4b74      	ldr	r3, [pc, #464]	@ (8004d14 <HAL_RCC_OscConfig+0x474>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a73      	ldr	r2, [pc, #460]	@ (8004d14 <HAL_RCC_OscConfig+0x474>)
 8004b48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b4e:	f7fd ffed 	bl	8002b2c <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b54:	e008      	b.n	8004b68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b56:	f7fd ffe9 	bl	8002b2c <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e10c      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b68:	4b6a      	ldr	r3, [pc, #424]	@ (8004d14 <HAL_RCC_OscConfig+0x474>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0f0      	beq.n	8004b56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d106      	bne.n	8004b8a <HAL_RCC_OscConfig+0x2ea>
 8004b7c:	4b64      	ldr	r3, [pc, #400]	@ (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b80:	4a63      	ldr	r2, [pc, #396]	@ (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004b82:	f043 0301 	orr.w	r3, r3, #1
 8004b86:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b88:	e01c      	b.n	8004bc4 <HAL_RCC_OscConfig+0x324>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	2b05      	cmp	r3, #5
 8004b90:	d10c      	bne.n	8004bac <HAL_RCC_OscConfig+0x30c>
 8004b92:	4b5f      	ldr	r3, [pc, #380]	@ (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b96:	4a5e      	ldr	r2, [pc, #376]	@ (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004b98:	f043 0304 	orr.w	r3, r3, #4
 8004b9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b9e:	4b5c      	ldr	r3, [pc, #368]	@ (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba2:	4a5b      	ldr	r2, [pc, #364]	@ (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004ba4:	f043 0301 	orr.w	r3, r3, #1
 8004ba8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004baa:	e00b      	b.n	8004bc4 <HAL_RCC_OscConfig+0x324>
 8004bac:	4b58      	ldr	r3, [pc, #352]	@ (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb0:	4a57      	ldr	r2, [pc, #348]	@ (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004bb2:	f023 0301 	bic.w	r3, r3, #1
 8004bb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bb8:	4b55      	ldr	r3, [pc, #340]	@ (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bbc:	4a54      	ldr	r2, [pc, #336]	@ (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004bbe:	f023 0304 	bic.w	r3, r3, #4
 8004bc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d015      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bcc:	f7fd ffae 	bl	8002b2c <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd2:	e00a      	b.n	8004bea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bd4:	f7fd ffaa 	bl	8002b2c <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e0cb      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bea:	4b49      	ldr	r3, [pc, #292]	@ (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0ee      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x334>
 8004bf6:	e014      	b.n	8004c22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf8:	f7fd ff98 	bl	8002b2c <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bfe:	e00a      	b.n	8004c16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c00:	f7fd ff94 	bl	8002b2c <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e0b5      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c16:	4b3e      	ldr	r3, [pc, #248]	@ (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1ee      	bne.n	8004c00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c22:	7dfb      	ldrb	r3, [r7, #23]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d105      	bne.n	8004c34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c28:	4b39      	ldr	r3, [pc, #228]	@ (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2c:	4a38      	ldr	r2, [pc, #224]	@ (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004c2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 80a1 	beq.w	8004d80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c3e:	4b34      	ldr	r3, [pc, #208]	@ (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 030c 	and.w	r3, r3, #12
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d05c      	beq.n	8004d04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d141      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c52:	4b31      	ldr	r3, [pc, #196]	@ (8004d18 <HAL_RCC_OscConfig+0x478>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c58:	f7fd ff68 	bl	8002b2c <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c60:	f7fd ff64 	bl	8002b2c <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e087      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c72:	4b27      	ldr	r3, [pc, #156]	@ (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1f0      	bne.n	8004c60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69da      	ldr	r2, [r3, #28]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8c:	019b      	lsls	r3, r3, #6
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c94:	085b      	lsrs	r3, r3, #1
 8004c96:	3b01      	subs	r3, #1
 8004c98:	041b      	lsls	r3, r3, #16
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca0:	061b      	lsls	r3, r3, #24
 8004ca2:	491b      	ldr	r1, [pc, #108]	@ (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d18 <HAL_RCC_OscConfig+0x478>)
 8004caa:	2201      	movs	r2, #1
 8004cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cae:	f7fd ff3d 	bl	8002b2c <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cb6:	f7fd ff39 	bl	8002b2c <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e05c      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc8:	4b11      	ldr	r3, [pc, #68]	@ (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0f0      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x416>
 8004cd4:	e054      	b.n	8004d80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd6:	4b10      	ldr	r3, [pc, #64]	@ (8004d18 <HAL_RCC_OscConfig+0x478>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cdc:	f7fd ff26 	bl	8002b2c <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce4:	f7fd ff22 	bl	8002b2c <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e045      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf6:	4b06      	ldr	r3, [pc, #24]	@ (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f0      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x444>
 8004d02:	e03d      	b.n	8004d80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d107      	bne.n	8004d1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e038      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
 8004d10:	40023800 	.word	0x40023800
 8004d14:	40007000 	.word	0x40007000
 8004d18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8004d8c <HAL_RCC_OscConfig+0x4ec>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d028      	beq.n	8004d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d121      	bne.n	8004d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d11a      	bne.n	8004d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d111      	bne.n	8004d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d62:	085b      	lsrs	r3, r3, #1
 8004d64:	3b01      	subs	r3, #1
 8004d66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d107      	bne.n	8004d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d001      	beq.n	8004d80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e000      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	40023800 	.word	0x40023800

08004d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e0cc      	b.n	8004f3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004da4:	4b68      	ldr	r3, [pc, #416]	@ (8004f48 <HAL_RCC_ClockConfig+0x1b8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d90c      	bls.n	8004dcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db2:	4b65      	ldr	r3, [pc, #404]	@ (8004f48 <HAL_RCC_ClockConfig+0x1b8>)
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dba:	4b63      	ldr	r3, [pc, #396]	@ (8004f48 <HAL_RCC_ClockConfig+0x1b8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d001      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e0b8      	b.n	8004f3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d020      	beq.n	8004e1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d005      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004de4:	4b59      	ldr	r3, [pc, #356]	@ (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	4a58      	ldr	r2, [pc, #352]	@ (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004dea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004dee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0308 	and.w	r3, r3, #8
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d005      	beq.n	8004e08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dfc:	4b53      	ldr	r3, [pc, #332]	@ (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	4a52      	ldr	r2, [pc, #328]	@ (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004e02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e08:	4b50      	ldr	r3, [pc, #320]	@ (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	494d      	ldr	r1, [pc, #308]	@ (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d044      	beq.n	8004eb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d107      	bne.n	8004e3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e2e:	4b47      	ldr	r3, [pc, #284]	@ (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d119      	bne.n	8004e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e07f      	b.n	8004f3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d003      	beq.n	8004e4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e4a:	2b03      	cmp	r3, #3
 8004e4c:	d107      	bne.n	8004e5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e4e:	4b3f      	ldr	r3, [pc, #252]	@ (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d109      	bne.n	8004e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e06f      	b.n	8004f3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e5e:	4b3b      	ldr	r3, [pc, #236]	@ (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e067      	b.n	8004f3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e6e:	4b37      	ldr	r3, [pc, #220]	@ (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f023 0203 	bic.w	r2, r3, #3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	4934      	ldr	r1, [pc, #208]	@ (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e80:	f7fd fe54 	bl	8002b2c <HAL_GetTick>
 8004e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e86:	e00a      	b.n	8004e9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e88:	f7fd fe50 	bl	8002b2c <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e04f      	b.n	8004f3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9e:	4b2b      	ldr	r3, [pc, #172]	@ (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 020c 	and.w	r2, r3, #12
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d1eb      	bne.n	8004e88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004eb0:	4b25      	ldr	r3, [pc, #148]	@ (8004f48 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d20c      	bcs.n	8004ed8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ebe:	4b22      	ldr	r3, [pc, #136]	@ (8004f48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec6:	4b20      	ldr	r3, [pc, #128]	@ (8004f48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d001      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e032      	b.n	8004f3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ee4:	4b19      	ldr	r3, [pc, #100]	@ (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	4916      	ldr	r1, [pc, #88]	@ (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d009      	beq.n	8004f16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f02:	4b12      	ldr	r3, [pc, #72]	@ (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	490e      	ldr	r1, [pc, #56]	@ (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f16:	f000 f821 	bl	8004f5c <HAL_RCC_GetSysClockFreq>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	091b      	lsrs	r3, r3, #4
 8004f22:	f003 030f 	and.w	r3, r3, #15
 8004f26:	490a      	ldr	r1, [pc, #40]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c0>)
 8004f28:	5ccb      	ldrb	r3, [r1, r3]
 8004f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f2e:	4a09      	ldr	r2, [pc, #36]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c4>)
 8004f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f32:	4b09      	ldr	r3, [pc, #36]	@ (8004f58 <HAL_RCC_ClockConfig+0x1c8>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fc f81a 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	40023c00 	.word	0x40023c00
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	08009170 	.word	0x08009170
 8004f54:	20000000 	.word	0x20000000
 8004f58:	20000024 	.word	0x20000024

08004f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f60:	b094      	sub	sp, #80	@ 0x50
 8004f62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f68:	2300      	movs	r3, #0
 8004f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f74:	4b79      	ldr	r3, [pc, #484]	@ (800515c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f003 030c 	and.w	r3, r3, #12
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d00d      	beq.n	8004f9c <HAL_RCC_GetSysClockFreq+0x40>
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	f200 80e1 	bhi.w	8005148 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <HAL_RCC_GetSysClockFreq+0x34>
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	d003      	beq.n	8004f96 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f8e:	e0db      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f90:	4b73      	ldr	r3, [pc, #460]	@ (8005160 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f92:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004f94:	e0db      	b.n	800514e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f96:	4b73      	ldr	r3, [pc, #460]	@ (8005164 <HAL_RCC_GetSysClockFreq+0x208>)
 8004f98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f9a:	e0d8      	b.n	800514e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f9c:	4b6f      	ldr	r3, [pc, #444]	@ (800515c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fa4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fa6:	4b6d      	ldr	r3, [pc, #436]	@ (800515c <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d063      	beq.n	800507a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fb2:	4b6a      	ldr	r3, [pc, #424]	@ (800515c <HAL_RCC_GetSysClockFreq+0x200>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	099b      	lsrs	r3, r3, #6
 8004fb8:	2200      	movs	r2, #0
 8004fba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fbc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004fce:	4622      	mov	r2, r4
 8004fd0:	462b      	mov	r3, r5
 8004fd2:	f04f 0000 	mov.w	r0, #0
 8004fd6:	f04f 0100 	mov.w	r1, #0
 8004fda:	0159      	lsls	r1, r3, #5
 8004fdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fe0:	0150      	lsls	r0, r2, #5
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	1a51      	subs	r1, r2, r1
 8004fea:	6139      	str	r1, [r7, #16]
 8004fec:	4629      	mov	r1, r5
 8004fee:	eb63 0301 	sbc.w	r3, r3, r1
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	f04f 0200 	mov.w	r2, #0
 8004ff8:	f04f 0300 	mov.w	r3, #0
 8004ffc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005000:	4659      	mov	r1, fp
 8005002:	018b      	lsls	r3, r1, #6
 8005004:	4651      	mov	r1, sl
 8005006:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800500a:	4651      	mov	r1, sl
 800500c:	018a      	lsls	r2, r1, #6
 800500e:	4651      	mov	r1, sl
 8005010:	ebb2 0801 	subs.w	r8, r2, r1
 8005014:	4659      	mov	r1, fp
 8005016:	eb63 0901 	sbc.w	r9, r3, r1
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005026:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800502a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800502e:	4690      	mov	r8, r2
 8005030:	4699      	mov	r9, r3
 8005032:	4623      	mov	r3, r4
 8005034:	eb18 0303 	adds.w	r3, r8, r3
 8005038:	60bb      	str	r3, [r7, #8]
 800503a:	462b      	mov	r3, r5
 800503c:	eb49 0303 	adc.w	r3, r9, r3
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	f04f 0200 	mov.w	r2, #0
 8005046:	f04f 0300 	mov.w	r3, #0
 800504a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800504e:	4629      	mov	r1, r5
 8005050:	024b      	lsls	r3, r1, #9
 8005052:	4621      	mov	r1, r4
 8005054:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005058:	4621      	mov	r1, r4
 800505a:	024a      	lsls	r2, r1, #9
 800505c:	4610      	mov	r0, r2
 800505e:	4619      	mov	r1, r3
 8005060:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005062:	2200      	movs	r2, #0
 8005064:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005066:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005068:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800506c:	f7fb f8c2 	bl	80001f4 <__aeabi_uldivmod>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4613      	mov	r3, r2
 8005076:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005078:	e058      	b.n	800512c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800507a:	4b38      	ldr	r3, [pc, #224]	@ (800515c <HAL_RCC_GetSysClockFreq+0x200>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	099b      	lsrs	r3, r3, #6
 8005080:	2200      	movs	r2, #0
 8005082:	4618      	mov	r0, r3
 8005084:	4611      	mov	r1, r2
 8005086:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800508a:	623b      	str	r3, [r7, #32]
 800508c:	2300      	movs	r3, #0
 800508e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005090:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005094:	4642      	mov	r2, r8
 8005096:	464b      	mov	r3, r9
 8005098:	f04f 0000 	mov.w	r0, #0
 800509c:	f04f 0100 	mov.w	r1, #0
 80050a0:	0159      	lsls	r1, r3, #5
 80050a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050a6:	0150      	lsls	r0, r2, #5
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4641      	mov	r1, r8
 80050ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80050b2:	4649      	mov	r1, r9
 80050b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050cc:	ebb2 040a 	subs.w	r4, r2, sl
 80050d0:	eb63 050b 	sbc.w	r5, r3, fp
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	00eb      	lsls	r3, r5, #3
 80050de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050e2:	00e2      	lsls	r2, r4, #3
 80050e4:	4614      	mov	r4, r2
 80050e6:	461d      	mov	r5, r3
 80050e8:	4643      	mov	r3, r8
 80050ea:	18e3      	adds	r3, r4, r3
 80050ec:	603b      	str	r3, [r7, #0]
 80050ee:	464b      	mov	r3, r9
 80050f0:	eb45 0303 	adc.w	r3, r5, r3
 80050f4:	607b      	str	r3, [r7, #4]
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	f04f 0300 	mov.w	r3, #0
 80050fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005102:	4629      	mov	r1, r5
 8005104:	028b      	lsls	r3, r1, #10
 8005106:	4621      	mov	r1, r4
 8005108:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800510c:	4621      	mov	r1, r4
 800510e:	028a      	lsls	r2, r1, #10
 8005110:	4610      	mov	r0, r2
 8005112:	4619      	mov	r1, r3
 8005114:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005116:	2200      	movs	r2, #0
 8005118:	61bb      	str	r3, [r7, #24]
 800511a:	61fa      	str	r2, [r7, #28]
 800511c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005120:	f7fb f868 	bl	80001f4 <__aeabi_uldivmod>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4613      	mov	r3, r2
 800512a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800512c:	4b0b      	ldr	r3, [pc, #44]	@ (800515c <HAL_RCC_GetSysClockFreq+0x200>)
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	0c1b      	lsrs	r3, r3, #16
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	3301      	adds	r3, #1
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800513c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800513e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005140:	fbb2 f3f3 	udiv	r3, r2, r3
 8005144:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005146:	e002      	b.n	800514e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005148:	4b05      	ldr	r3, [pc, #20]	@ (8005160 <HAL_RCC_GetSysClockFreq+0x204>)
 800514a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800514c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800514e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005150:	4618      	mov	r0, r3
 8005152:	3750      	adds	r7, #80	@ 0x50
 8005154:	46bd      	mov	sp, r7
 8005156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800515a:	bf00      	nop
 800515c:	40023800 	.word	0x40023800
 8005160:	00f42400 	.word	0x00f42400
 8005164:	007a1200 	.word	0x007a1200

08005168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800516c:	4b03      	ldr	r3, [pc, #12]	@ (800517c <HAL_RCC_GetHCLKFreq+0x14>)
 800516e:	681b      	ldr	r3, [r3, #0]
}
 8005170:	4618      	mov	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	20000000 	.word	0x20000000

08005180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005184:	f7ff fff0 	bl	8005168 <HAL_RCC_GetHCLKFreq>
 8005188:	4602      	mov	r2, r0
 800518a:	4b05      	ldr	r3, [pc, #20]	@ (80051a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	0a9b      	lsrs	r3, r3, #10
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	4903      	ldr	r1, [pc, #12]	@ (80051a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005196:	5ccb      	ldrb	r3, [r1, r3]
 8005198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800519c:	4618      	mov	r0, r3
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40023800 	.word	0x40023800
 80051a4:	08009180 	.word	0x08009180

080051a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051ac:	f7ff ffdc 	bl	8005168 <HAL_RCC_GetHCLKFreq>
 80051b0:	4602      	mov	r2, r0
 80051b2:	4b05      	ldr	r3, [pc, #20]	@ (80051c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	0b5b      	lsrs	r3, r3, #13
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	4903      	ldr	r1, [pc, #12]	@ (80051cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80051be:	5ccb      	ldrb	r3, [r1, r3]
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40023800 	.word	0x40023800
 80051cc:	08009180 	.word	0x08009180

080051d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	220f      	movs	r2, #15
 80051de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80051e0:	4b12      	ldr	r3, [pc, #72]	@ (800522c <HAL_RCC_GetClockConfig+0x5c>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f003 0203 	and.w	r2, r3, #3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80051ec:	4b0f      	ldr	r3, [pc, #60]	@ (800522c <HAL_RCC_GetClockConfig+0x5c>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80051f8:	4b0c      	ldr	r3, [pc, #48]	@ (800522c <HAL_RCC_GetClockConfig+0x5c>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005204:	4b09      	ldr	r3, [pc, #36]	@ (800522c <HAL_RCC_GetClockConfig+0x5c>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	08db      	lsrs	r3, r3, #3
 800520a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005212:	4b07      	ldr	r3, [pc, #28]	@ (8005230 <HAL_RCC_GetClockConfig+0x60>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0207 	and.w	r2, r3, #7
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	601a      	str	r2, [r3, #0]
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	40023800 	.word	0x40023800
 8005230:	40023c00 	.word	0x40023c00

08005234 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800523c:	2300      	movs	r3, #0
 800523e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b00      	cmp	r3, #0
 800524e:	d105      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005258:	2b00      	cmp	r3, #0
 800525a:	d035      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800525c:	4b67      	ldr	r3, [pc, #412]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005262:	f7fd fc63 	bl	8002b2c <HAL_GetTick>
 8005266:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005268:	e008      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800526a:	f7fd fc5f 	bl	8002b2c <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d901      	bls.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e0ba      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800527c:	4b60      	ldr	r3, [pc, #384]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1f0      	bne.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	019a      	lsls	r2, r3, #6
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	071b      	lsls	r3, r3, #28
 8005294:	495a      	ldr	r1, [pc, #360]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005296:	4313      	orrs	r3, r2
 8005298:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800529c:	4b57      	ldr	r3, [pc, #348]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800529e:	2201      	movs	r2, #1
 80052a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052a2:	f7fd fc43 	bl	8002b2c <HAL_GetTick>
 80052a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052a8:	e008      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052aa:	f7fd fc3f 	bl	8002b2c <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e09a      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052bc:	4b50      	ldr	r3, [pc, #320]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0f0      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 8083 	beq.w	80053dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	4b49      	ldr	r3, [pc, #292]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80052dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052de:	4a48      	ldr	r2, [pc, #288]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80052e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80052e6:	4b46      	ldr	r3, [pc, #280]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80052e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80052f2:	4b44      	ldr	r3, [pc, #272]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a43      	ldr	r2, [pc, #268]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052fe:	f7fd fc15 	bl	8002b2c <HAL_GetTick>
 8005302:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005304:	e008      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005306:	f7fd fc11 	bl	8002b2c <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d901      	bls.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e06c      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005318:	4b3a      	ldr	r3, [pc, #232]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0f0      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005324:	4b36      	ldr	r3, [pc, #216]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005328:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800532c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d02f      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	429a      	cmp	r2, r3
 8005340:	d028      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005342:	4b2f      	ldr	r3, [pc, #188]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005346:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800534a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800534c:	4b2e      	ldr	r3, [pc, #184]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800534e:	2201      	movs	r2, #1
 8005350:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005352:	4b2d      	ldr	r3, [pc, #180]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005358:	4a29      	ldr	r2, [pc, #164]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800535e:	4b28      	ldr	r3, [pc, #160]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b01      	cmp	r3, #1
 8005368:	d114      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800536a:	f7fd fbdf 	bl	8002b2c <HAL_GetTick>
 800536e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005370:	e00a      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005372:	f7fd fbdb 	bl	8002b2c <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005380:	4293      	cmp	r3, r2
 8005382:	d901      	bls.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e034      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005388:	4b1d      	ldr	r3, [pc, #116]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800538a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0ee      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800539c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053a0:	d10d      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80053a2:	4b17      	ldr	r3, [pc, #92]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80053b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053b6:	4912      	ldr	r1, [pc, #72]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	608b      	str	r3, [r1, #8]
 80053bc:	e005      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 80053be:	4b10      	ldr	r3, [pc, #64]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	4a0f      	ldr	r2, [pc, #60]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80053c4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80053c8:	6093      	str	r3, [r2, #8]
 80053ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80053cc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053d6:	490a      	ldr	r1, [pc, #40]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0308 	and.w	r3, r3, #8
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	7c1a      	ldrb	r2, [r3, #16]
 80053ec:	4b07      	ldr	r3, [pc, #28]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80053ee:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	42470068 	.word	0x42470068
 8005400:	40023800 	.word	0x40023800
 8005404:	40007000 	.word	0x40007000
 8005408:	42470e40 	.word	0x42470e40
 800540c:	424711e0 	.word	0x424711e0

08005410 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e073      	b.n	800550e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	7f5b      	ldrb	r3, [r3, #29]
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d105      	bne.n	800543c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7fb fcb6 	bl	8000da8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f003 0310 	and.w	r3, r3, #16
 800544c:	2b10      	cmp	r3, #16
 800544e:	d055      	beq.n	80054fc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	22ca      	movs	r2, #202	@ 0xca
 8005456:	625a      	str	r2, [r3, #36]	@ 0x24
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2253      	movs	r2, #83	@ 0x53
 800545e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f99d 	bl	80057a0 <RTC_EnterInitMode>
 8005466:	4603      	mov	r3, r0
 8005468:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800546a:	7bfb      	ldrb	r3, [r7, #15]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d12c      	bne.n	80054ca <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	6812      	ldr	r2, [r2, #0]
 800547a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800547e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005482:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6899      	ldr	r1, [r3, #8]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	431a      	orrs	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	431a      	orrs	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	68d2      	ldr	r2, [r2, #12]
 80054aa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6919      	ldr	r1, [r3, #16]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	041a      	lsls	r2, r3, #16
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f9a4 	bl	800580e <RTC_ExitInitMode>
 80054c6:	4603      	mov	r3, r0
 80054c8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d110      	bne.n	80054f2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80054de:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	699a      	ldr	r2, [r3, #24]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	22ff      	movs	r2, #255	@ 0xff
 80054f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80054fa:	e001      	b.n	8005500 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80054fc:	2300      	movs	r3, #0
 80054fe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005500:	7bfb      	ldrb	r3, [r7, #15]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d102      	bne.n	800550c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800550c:	7bfb      	ldrb	r3, [r7, #15]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005516:	b590      	push	{r4, r7, lr}
 8005518:	b087      	sub	sp, #28
 800551a:	af00      	add	r7, sp, #0
 800551c:	60f8      	str	r0, [r7, #12]
 800551e:	60b9      	str	r1, [r7, #8]
 8005520:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	7f1b      	ldrb	r3, [r3, #28]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d101      	bne.n	8005532 <HAL_RTC_SetTime+0x1c>
 800552e:	2302      	movs	r3, #2
 8005530:	e087      	b.n	8005642 <HAL_RTC_SetTime+0x12c>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2201      	movs	r2, #1
 8005536:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2202      	movs	r2, #2
 800553c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d126      	bne.n	8005592 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800554e:	2b00      	cmp	r3, #0
 8005550:	d102      	bne.n	8005558 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2200      	movs	r2, #0
 8005556:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	4618      	mov	r0, r3
 800555e:	f000 f97b 	bl	8005858 <RTC_ByteToBcd2>
 8005562:	4603      	mov	r3, r0
 8005564:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	785b      	ldrb	r3, [r3, #1]
 800556a:	4618      	mov	r0, r3
 800556c:	f000 f974 	bl	8005858 <RTC_ByteToBcd2>
 8005570:	4603      	mov	r3, r0
 8005572:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005574:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	789b      	ldrb	r3, [r3, #2]
 800557a:	4618      	mov	r0, r3
 800557c:	f000 f96c 	bl	8005858 <RTC_ByteToBcd2>
 8005580:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005582:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	78db      	ldrb	r3, [r3, #3]
 800558a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800558c:	4313      	orrs	r3, r2
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	e018      	b.n	80055c4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800559c:	2b00      	cmp	r3, #0
 800559e:	d102      	bne.n	80055a6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2200      	movs	r2, #0
 80055a4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	785b      	ldrb	r3, [r3, #1]
 80055b0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80055b2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80055b8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	78db      	ldrb	r3, [r3, #3]
 80055be:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80055c0:	4313      	orrs	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	22ca      	movs	r2, #202	@ 0xca
 80055ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2253      	movs	r2, #83	@ 0x53
 80055d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 f8e3 	bl	80057a0 <RTC_EnterInitMode>
 80055da:	4603      	mov	r3, r0
 80055dc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80055de:	7cfb      	ldrb	r3, [r7, #19]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d120      	bne.n	8005626 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80055ee:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80055f2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689a      	ldr	r2, [r3, #8]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005602:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6899      	ldr	r1, [r3, #8]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	431a      	orrs	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 f8f6 	bl	800580e <RTC_ExitInitMode>
 8005622:	4603      	mov	r3, r0
 8005624:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005626:	7cfb      	ldrb	r3, [r7, #19]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d102      	bne.n	8005632 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2201      	movs	r2, #1
 8005630:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	22ff      	movs	r2, #255	@ 0xff
 8005638:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	771a      	strb	r2, [r3, #28]

  return status;
 8005640:	7cfb      	ldrb	r3, [r7, #19]
}
 8005642:	4618      	mov	r0, r3
 8005644:	371c      	adds	r7, #28
 8005646:	46bd      	mov	sp, r7
 8005648:	bd90      	pop	{r4, r7, pc}

0800564a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800564a:	b590      	push	{r4, r7, lr}
 800564c:	b087      	sub	sp, #28
 800564e:	af00      	add	r7, sp, #0
 8005650:	60f8      	str	r0, [r7, #12]
 8005652:	60b9      	str	r1, [r7, #8]
 8005654:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	7f1b      	ldrb	r3, [r3, #28]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d101      	bne.n	8005666 <HAL_RTC_SetDate+0x1c>
 8005662:	2302      	movs	r3, #2
 8005664:	e071      	b.n	800574a <HAL_RTC_SetDate+0x100>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2201      	movs	r2, #1
 800566a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2202      	movs	r2, #2
 8005670:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10e      	bne.n	8005696 <HAL_RTC_SetDate+0x4c>
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	785b      	ldrb	r3, [r3, #1]
 800567c:	f003 0310 	and.w	r3, r3, #16
 8005680:	2b00      	cmp	r3, #0
 8005682:	d008      	beq.n	8005696 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	785b      	ldrb	r3, [r3, #1]
 8005688:	f023 0310 	bic.w	r3, r3, #16
 800568c:	b2db      	uxtb	r3, r3
 800568e:	330a      	adds	r3, #10
 8005690:	b2da      	uxtb	r2, r3
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d11c      	bne.n	80056d6 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	78db      	ldrb	r3, [r3, #3]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 f8d9 	bl	8005858 <RTC_ByteToBcd2>
 80056a6:	4603      	mov	r3, r0
 80056a8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	785b      	ldrb	r3, [r3, #1]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 f8d2 	bl	8005858 <RTC_ByteToBcd2>
 80056b4:	4603      	mov	r3, r0
 80056b6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80056b8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	789b      	ldrb	r3, [r3, #2]
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 f8ca 	bl	8005858 <RTC_ByteToBcd2>
 80056c4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80056c6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80056d0:	4313      	orrs	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	e00e      	b.n	80056f4 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	78db      	ldrb	r3, [r3, #3]
 80056da:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	785b      	ldrb	r3, [r3, #1]
 80056e0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80056e2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80056e8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80056f0:	4313      	orrs	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	22ca      	movs	r2, #202	@ 0xca
 80056fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2253      	movs	r2, #83	@ 0x53
 8005702:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 f84b 	bl	80057a0 <RTC_EnterInitMode>
 800570a:	4603      	mov	r3, r0
 800570c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800570e:	7cfb      	ldrb	r3, [r7, #19]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10c      	bne.n	800572e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800571e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005722:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 f872 	bl	800580e <RTC_ExitInitMode>
 800572a:	4603      	mov	r3, r0
 800572c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800572e:	7cfb      	ldrb	r3, [r7, #19]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d102      	bne.n	800573a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2201      	movs	r2, #1
 8005738:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	22ff      	movs	r2, #255	@ 0xff
 8005740:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	771a      	strb	r2, [r3, #28]

  return status;
 8005748:	7cfb      	ldrb	r3, [r7, #19]
}
 800574a:	4618      	mov	r0, r3
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	bd90      	pop	{r4, r7, pc}
	...

08005754 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a0d      	ldr	r2, [pc, #52]	@ (800579c <HAL_RTC_WaitForSynchro+0x48>)
 8005766:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005768:	f7fd f9e0 	bl	8002b2c <HAL_GetTick>
 800576c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800576e:	e009      	b.n	8005784 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005770:	f7fd f9dc 	bl	8002b2c <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800577e:	d901      	bls.n	8005784 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e007      	b.n	8005794 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f003 0320 	and.w	r3, r3, #32
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0ee      	beq.n	8005770 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	00013f5f 	.word	0x00013f5f

080057a0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057a8:	2300      	movs	r3, #0
 80057aa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80057ac:	2300      	movs	r3, #0
 80057ae:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d122      	bne.n	8005804 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80057cc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057ce:	f7fd f9ad 	bl	8002b2c <HAL_GetTick>
 80057d2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80057d4:	e00c      	b.n	80057f0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80057d6:	f7fd f9a9 	bl	8002b2c <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80057e4:	d904      	bls.n	80057f0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2204      	movs	r2, #4
 80057ea:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d102      	bne.n	8005804 <RTC_EnterInitMode+0x64>
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d1e8      	bne.n	80057d6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005804:	7bfb      	ldrb	r3, [r7, #15]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68da      	ldr	r2, [r3, #12]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005828:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f003 0320 	and.w	r3, r3, #32
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10a      	bne.n	800584e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7ff ff8b 	bl	8005754 <HAL_RTC_WaitForSynchro>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d004      	beq.n	800584e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2204      	movs	r2, #4
 8005848:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800584e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	4603      	mov	r3, r0
 8005860:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005862:	2300      	movs	r3, #0
 8005864:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005866:	e005      	b.n	8005874 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	3301      	adds	r3, #1
 800586c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800586e:	79fb      	ldrb	r3, [r7, #7]
 8005870:	3b0a      	subs	r3, #10
 8005872:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005874:	79fb      	ldrb	r3, [r7, #7]
 8005876:	2b09      	cmp	r3, #9
 8005878:	d8f6      	bhi.n	8005868 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	b2db      	uxtb	r3, r3
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	b2da      	uxtb	r2, r3
 8005882:	79fb      	ldrb	r3, [r7, #7]
 8005884:	4313      	orrs	r3, r2
 8005886:	b2db      	uxtb	r3, r3
}
 8005888:	4618      	mov	r0, r3
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e07b      	b.n	800599e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d108      	bne.n	80058c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058b6:	d009      	beq.n	80058cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	61da      	str	r2, [r3, #28]
 80058be:	e005      	b.n	80058cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d106      	bne.n	80058ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7fb fa8a 	bl	8000e00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005902:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005914:	431a      	orrs	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	f003 0302 	and.w	r3, r3, #2
 8005928:	431a      	orrs	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	431a      	orrs	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800593c:	431a      	orrs	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005950:	ea42 0103 	orr.w	r1, r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005958:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	0c1b      	lsrs	r3, r3, #16
 800596a:	f003 0104 	and.w	r1, r3, #4
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005972:	f003 0210 	and.w	r2, r3, #16
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	430a      	orrs	r2, r1
 800597c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69da      	ldr	r2, [r3, #28]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800598c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b088      	sub	sp, #32
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	60b9      	str	r1, [r7, #8]
 80059b0:	603b      	str	r3, [r7, #0]
 80059b2:	4613      	mov	r3, r2
 80059b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d101      	bne.n	80059c8 <HAL_SPI_Transmit+0x22>
 80059c4:	2302      	movs	r3, #2
 80059c6:	e12d      	b.n	8005c24 <HAL_SPI_Transmit+0x27e>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059d0:	f7fd f8ac 	bl	8002b2c <HAL_GetTick>
 80059d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80059d6:	88fb      	ldrh	r3, [r7, #6]
 80059d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d002      	beq.n	80059ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80059e6:	2302      	movs	r3, #2
 80059e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059ea:	e116      	b.n	8005c1a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d002      	beq.n	80059f8 <HAL_SPI_Transmit+0x52>
 80059f2:	88fb      	ldrh	r3, [r7, #6]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d102      	bne.n	80059fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059fc:	e10d      	b.n	8005c1a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2203      	movs	r2, #3
 8005a02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	88fa      	ldrh	r2, [r7, #6]
 8005a16:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	88fa      	ldrh	r2, [r7, #6]
 8005a1c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a44:	d10f      	bne.n	8005a66 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a70:	2b40      	cmp	r3, #64	@ 0x40
 8005a72:	d007      	beq.n	8005a84 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a8c:	d14f      	bne.n	8005b2e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d002      	beq.n	8005a9c <HAL_SPI_Transmit+0xf6>
 8005a96:	8afb      	ldrh	r3, [r7, #22]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d142      	bne.n	8005b22 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa0:	881a      	ldrh	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aac:	1c9a      	adds	r2, r3, #2
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ac0:	e02f      	b.n	8005b22 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d112      	bne.n	8005af6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad4:	881a      	ldrh	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae0:	1c9a      	adds	r2, r3, #2
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	3b01      	subs	r3, #1
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005af4:	e015      	b.n	8005b22 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005af6:	f7fd f819 	bl	8002b2c <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d803      	bhi.n	8005b0e <HAL_SPI_Transmit+0x168>
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0c:	d102      	bne.n	8005b14 <HAL_SPI_Transmit+0x16e>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d106      	bne.n	8005b22 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005b20:	e07b      	b.n	8005c1a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1ca      	bne.n	8005ac2 <HAL_SPI_Transmit+0x11c>
 8005b2c:	e050      	b.n	8005bd0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <HAL_SPI_Transmit+0x196>
 8005b36:	8afb      	ldrh	r3, [r7, #22]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d144      	bne.n	8005bc6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	330c      	adds	r3, #12
 8005b46:	7812      	ldrb	r2, [r2, #0]
 8005b48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b62:	e030      	b.n	8005bc6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d113      	bne.n	8005b9a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	330c      	adds	r3, #12
 8005b7c:	7812      	ldrb	r2, [r2, #0]
 8005b7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b84:	1c5a      	adds	r2, r3, #1
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	3b01      	subs	r3, #1
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005b98:	e015      	b.n	8005bc6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b9a:	f7fc ffc7 	bl	8002b2c <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d803      	bhi.n	8005bb2 <HAL_SPI_Transmit+0x20c>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb0:	d102      	bne.n	8005bb8 <HAL_SPI_Transmit+0x212>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d106      	bne.n	8005bc6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005bc4:	e029      	b.n	8005c1a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1c9      	bne.n	8005b64 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	6839      	ldr	r1, [r7, #0]
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 fa61 	bl	800609c <SPI_EndRxTxTransaction>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2220      	movs	r2, #32
 8005be4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10a      	bne.n	8005c04 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bee:	2300      	movs	r3, #0
 8005bf0:	613b      	str	r3, [r7, #16]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	613b      	str	r3, [r7, #16]
 8005c02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	77fb      	strb	r3, [r7, #31]
 8005c10:	e003      	b.n	8005c1a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005c22:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3720      	adds	r7, #32
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b08c      	sub	sp, #48	@ 0x30
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d101      	bne.n	8005c52 <HAL_SPI_TransmitReceive+0x26>
 8005c4e:	2302      	movs	r3, #2
 8005c50:	e198      	b.n	8005f84 <HAL_SPI_TransmitReceive+0x358>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c5a:	f7fc ff67 	bl	8002b2c <HAL_GetTick>
 8005c5e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005c70:	887b      	ldrh	r3, [r7, #2]
 8005c72:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d00f      	beq.n	8005c9c <HAL_SPI_TransmitReceive+0x70>
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c82:	d107      	bne.n	8005c94 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d103      	bne.n	8005c94 <HAL_SPI_TransmitReceive+0x68>
 8005c8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c90:	2b04      	cmp	r3, #4
 8005c92:	d003      	beq.n	8005c9c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005c94:	2302      	movs	r3, #2
 8005c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005c9a:	e16d      	b.n	8005f78 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d005      	beq.n	8005cae <HAL_SPI_TransmitReceive+0x82>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d002      	beq.n	8005cae <HAL_SPI_TransmitReceive+0x82>
 8005ca8:	887b      	ldrh	r3, [r7, #2]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d103      	bne.n	8005cb6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005cb4:	e160      	b.n	8005f78 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	d003      	beq.n	8005cca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2205      	movs	r2, #5
 8005cc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	887a      	ldrh	r2, [r7, #2]
 8005cda:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	887a      	ldrh	r2, [r7, #2]
 8005ce0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	887a      	ldrh	r2, [r7, #2]
 8005cec:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	887a      	ldrh	r2, [r7, #2]
 8005cf2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d0a:	2b40      	cmp	r3, #64	@ 0x40
 8005d0c:	d007      	beq.n	8005d1e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d26:	d17c      	bne.n	8005e22 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <HAL_SPI_TransmitReceive+0x10a>
 8005d30:	8b7b      	ldrh	r3, [r7, #26]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d16a      	bne.n	8005e0c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d3a:	881a      	ldrh	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d46:	1c9a      	adds	r2, r3, #2
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d5a:	e057      	b.n	8005e0c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d11b      	bne.n	8005da2 <HAL_SPI_TransmitReceive+0x176>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d016      	beq.n	8005da2 <HAL_SPI_TransmitReceive+0x176>
 8005d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d113      	bne.n	8005da2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d7e:	881a      	ldrh	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d8a:	1c9a      	adds	r2, r3, #2
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	3b01      	subs	r3, #1
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d119      	bne.n	8005de4 <HAL_SPI_TransmitReceive+0x1b8>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d014      	beq.n	8005de4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68da      	ldr	r2, [r3, #12]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc4:	b292      	uxth	r2, r2
 8005dc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dcc:	1c9a      	adds	r2, r3, #2
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005de0:	2301      	movs	r3, #1
 8005de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005de4:	f7fc fea2 	bl	8002b2c <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d80b      	bhi.n	8005e0c <HAL_SPI_TransmitReceive+0x1e0>
 8005df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfa:	d007      	beq.n	8005e0c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005e0a:	e0b5      	b.n	8005f78 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1a2      	bne.n	8005d5c <HAL_SPI_TransmitReceive+0x130>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d19d      	bne.n	8005d5c <HAL_SPI_TransmitReceive+0x130>
 8005e20:	e080      	b.n	8005f24 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <HAL_SPI_TransmitReceive+0x204>
 8005e2a:	8b7b      	ldrh	r3, [r7, #26]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d16f      	bne.n	8005f10 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	330c      	adds	r3, #12
 8005e3a:	7812      	ldrb	r2, [r2, #0]
 8005e3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e56:	e05b      	b.n	8005f10 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d11c      	bne.n	8005ea0 <HAL_SPI_TransmitReceive+0x274>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d017      	beq.n	8005ea0 <HAL_SPI_TransmitReceive+0x274>
 8005e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d114      	bne.n	8005ea0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	330c      	adds	r3, #12
 8005e80:	7812      	ldrb	r2, [r2, #0]
 8005e82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d119      	bne.n	8005ee2 <HAL_SPI_TransmitReceive+0x2b6>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d014      	beq.n	8005ee2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec2:	b2d2      	uxtb	r2, r2
 8005ec4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ee2:	f7fc fe23 	bl	8002b2c <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d803      	bhi.n	8005efa <HAL_SPI_TransmitReceive+0x2ce>
 8005ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef8:	d102      	bne.n	8005f00 <HAL_SPI_TransmitReceive+0x2d4>
 8005efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d107      	bne.n	8005f10 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005f0e:	e033      	b.n	8005f78 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d19e      	bne.n	8005e58 <HAL_SPI_TransmitReceive+0x22c>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d199      	bne.n	8005e58 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f26:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 f8b7 	bl	800609c <SPI_EndRxTxTransaction>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d006      	beq.n	8005f42 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005f40:	e01a      	b.n	8005f78 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10a      	bne.n	8005f60 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	617b      	str	r3, [r7, #20]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	617b      	str	r3, [r7, #20]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	617b      	str	r3, [r7, #20]
 8005f5e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d003      	beq.n	8005f70 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f6e:	e003      	b.n	8005f78 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005f80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3730      	adds	r7, #48	@ 0x30
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f9c:	f7fc fdc6 	bl	8002b2c <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa4:	1a9b      	subs	r3, r3, r2
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	4413      	add	r3, r2
 8005faa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fac:	f7fc fdbe 	bl	8002b2c <HAL_GetTick>
 8005fb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fb2:	4b39      	ldr	r3, [pc, #228]	@ (8006098 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	015b      	lsls	r3, r3, #5
 8005fb8:	0d1b      	lsrs	r3, r3, #20
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	fb02 f303 	mul.w	r3, r2, r3
 8005fc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fc2:	e054      	b.n	800606e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fca:	d050      	beq.n	800606e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fcc:	f7fc fdae 	bl	8002b2c <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	69fa      	ldr	r2, [r7, #28]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d902      	bls.n	8005fe2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d13d      	bne.n	800605e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ff0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ffa:	d111      	bne.n	8006020 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006004:	d004      	beq.n	8006010 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800600e:	d107      	bne.n	8006020 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800601e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006028:	d10f      	bne.n	800604a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006048:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e017      	b.n	800608e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	3b01      	subs	r3, #1
 800606c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	4013      	ands	r3, r2
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	429a      	cmp	r2, r3
 800607c:	bf0c      	ite	eq
 800607e:	2301      	moveq	r3, #1
 8006080:	2300      	movne	r3, #0
 8006082:	b2db      	uxtb	r3, r3
 8006084:	461a      	mov	r2, r3
 8006086:	79fb      	ldrb	r3, [r7, #7]
 8006088:	429a      	cmp	r2, r3
 800608a:	d19b      	bne.n	8005fc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3720      	adds	r7, #32
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20000000 	.word	0x20000000

0800609c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b088      	sub	sp, #32
 80060a0:	af02      	add	r7, sp, #8
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2201      	movs	r2, #1
 80060b0:	2102      	movs	r1, #2
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f7ff ff6a 	bl	8005f8c <SPI_WaitFlagStateUntilTimeout>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d007      	beq.n	80060ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060c2:	f043 0220 	orr.w	r2, r3, #32
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e032      	b.n	8006134 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80060ce:	4b1b      	ldr	r3, [pc, #108]	@ (800613c <SPI_EndRxTxTransaction+0xa0>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a1b      	ldr	r2, [pc, #108]	@ (8006140 <SPI_EndRxTxTransaction+0xa4>)
 80060d4:	fba2 2303 	umull	r2, r3, r2, r3
 80060d8:	0d5b      	lsrs	r3, r3, #21
 80060da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80060de:	fb02 f303 	mul.w	r3, r2, r3
 80060e2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060ec:	d112      	bne.n	8006114 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2200      	movs	r2, #0
 80060f6:	2180      	movs	r1, #128	@ 0x80
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f7ff ff47 	bl	8005f8c <SPI_WaitFlagStateUntilTimeout>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d016      	beq.n	8006132 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006108:	f043 0220 	orr.w	r2, r3, #32
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e00f      	b.n	8006134 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00a      	beq.n	8006130 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	3b01      	subs	r3, #1
 800611e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800612a:	2b80      	cmp	r3, #128	@ 0x80
 800612c:	d0f2      	beq.n	8006114 <SPI_EndRxTxTransaction+0x78>
 800612e:	e000      	b.n	8006132 <SPI_EndRxTxTransaction+0x96>
        break;
 8006130:	bf00      	nop
  }

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3718      	adds	r7, #24
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	20000000 	.word	0x20000000
 8006140:	165e9f81 	.word	0x165e9f81

08006144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e041      	b.n	80061da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d106      	bne.n	8006170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7fa fe90 	bl	8000e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3304      	adds	r3, #4
 8006180:	4619      	mov	r1, r3
 8006182:	4610      	mov	r0, r2
 8006184:	f000 fa9e 	bl	80066c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
	...

080061e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d001      	beq.n	80061fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e044      	b.n	8006286 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68da      	ldr	r2, [r3, #12]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0201 	orr.w	r2, r2, #1
 8006212:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1e      	ldr	r2, [pc, #120]	@ (8006294 <HAL_TIM_Base_Start_IT+0xb0>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d018      	beq.n	8006250 <HAL_TIM_Base_Start_IT+0x6c>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006226:	d013      	beq.n	8006250 <HAL_TIM_Base_Start_IT+0x6c>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a1a      	ldr	r2, [pc, #104]	@ (8006298 <HAL_TIM_Base_Start_IT+0xb4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d00e      	beq.n	8006250 <HAL_TIM_Base_Start_IT+0x6c>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a19      	ldr	r2, [pc, #100]	@ (800629c <HAL_TIM_Base_Start_IT+0xb8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d009      	beq.n	8006250 <HAL_TIM_Base_Start_IT+0x6c>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a17      	ldr	r2, [pc, #92]	@ (80062a0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d004      	beq.n	8006250 <HAL_TIM_Base_Start_IT+0x6c>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a16      	ldr	r2, [pc, #88]	@ (80062a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d111      	bne.n	8006274 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2b06      	cmp	r3, #6
 8006260:	d010      	beq.n	8006284 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f042 0201 	orr.w	r2, r2, #1
 8006270:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006272:	e007      	b.n	8006284 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0201 	orr.w	r2, r2, #1
 8006282:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	40010000 	.word	0x40010000
 8006298:	40000400 	.word	0x40000400
 800629c:	40000800 	.word	0x40000800
 80062a0:	40000c00 	.word	0x40000c00
 80062a4:	40014000 	.word	0x40014000

080062a8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68da      	ldr	r2, [r3, #12]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 0201 	bic.w	r2, r2, #1
 80062be:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6a1a      	ldr	r2, [r3, #32]
 80062c6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80062ca:	4013      	ands	r3, r2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10f      	bne.n	80062f0 <HAL_TIM_Base_Stop_IT+0x48>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6a1a      	ldr	r2, [r3, #32]
 80062d6:	f240 4344 	movw	r3, #1092	@ 0x444
 80062da:	4013      	ands	r3, r2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d107      	bne.n	80062f0 <HAL_TIM_Base_Stop_IT+0x48>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 0201 	bic.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b084      	sub	sp, #16
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b00      	cmp	r3, #0
 8006326:	d020      	beq.n	800636a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d01b      	beq.n	800636a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f06f 0202 	mvn.w	r2, #2
 800633a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	f003 0303 	and.w	r3, r3, #3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d003      	beq.n	8006358 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f999 	bl	8006688 <HAL_TIM_IC_CaptureCallback>
 8006356:	e005      	b.n	8006364 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f98b 	bl	8006674 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f99c 	bl	800669c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b00      	cmp	r3, #0
 8006372:	d020      	beq.n	80063b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f003 0304 	and.w	r3, r3, #4
 800637a:	2b00      	cmp	r3, #0
 800637c:	d01b      	beq.n	80063b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f06f 0204 	mvn.w	r2, #4
 8006386:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2202      	movs	r2, #2
 800638c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006398:	2b00      	cmp	r3, #0
 800639a:	d003      	beq.n	80063a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f973 	bl	8006688 <HAL_TIM_IC_CaptureCallback>
 80063a2:	e005      	b.n	80063b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f965 	bl	8006674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f976 	bl	800669c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	f003 0308 	and.w	r3, r3, #8
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d020      	beq.n	8006402 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f003 0308 	and.w	r3, r3, #8
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d01b      	beq.n	8006402 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f06f 0208 	mvn.w	r2, #8
 80063d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2204      	movs	r2, #4
 80063d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	f003 0303 	and.w	r3, r3, #3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d003      	beq.n	80063f0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 f94d 	bl	8006688 <HAL_TIM_IC_CaptureCallback>
 80063ee:	e005      	b.n	80063fc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f93f 	bl	8006674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f950 	bl	800669c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	f003 0310 	and.w	r3, r3, #16
 8006408:	2b00      	cmp	r3, #0
 800640a:	d020      	beq.n	800644e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f003 0310 	and.w	r3, r3, #16
 8006412:	2b00      	cmp	r3, #0
 8006414:	d01b      	beq.n	800644e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f06f 0210 	mvn.w	r2, #16
 800641e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2208      	movs	r2, #8
 8006424:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 f927 	bl	8006688 <HAL_TIM_IC_CaptureCallback>
 800643a:	e005      	b.n	8006448 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f919 	bl	8006674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f92a 	bl	800669c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00c      	beq.n	8006472 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	d007      	beq.n	8006472 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f06f 0201 	mvn.w	r2, #1
 800646a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7fa fb93 	bl	8000b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00c      	beq.n	8006496 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006482:	2b00      	cmp	r3, #0
 8006484:	d007      	beq.n	8006496 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800648e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fab5 	bl	8006a00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00c      	beq.n	80064ba <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d007      	beq.n	80064ba <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80064b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f8fb 	bl	80066b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	f003 0320 	and.w	r3, r3, #32
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00c      	beq.n	80064de <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f003 0320 	and.w	r3, r3, #32
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d007      	beq.n	80064de <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f06f 0220 	mvn.w	r2, #32
 80064d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fa87 	bl	80069ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064de:	bf00      	nop
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b084      	sub	sp, #16
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
 80064ee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d101      	bne.n	8006502 <HAL_TIM_ConfigClockSource+0x1c>
 80064fe:	2302      	movs	r3, #2
 8006500:	e0b4      	b.n	800666c <HAL_TIM_ConfigClockSource+0x186>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2202      	movs	r2, #2
 800650e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006520:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006528:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800653a:	d03e      	beq.n	80065ba <HAL_TIM_ConfigClockSource+0xd4>
 800653c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006540:	f200 8087 	bhi.w	8006652 <HAL_TIM_ConfigClockSource+0x16c>
 8006544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006548:	f000 8086 	beq.w	8006658 <HAL_TIM_ConfigClockSource+0x172>
 800654c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006550:	d87f      	bhi.n	8006652 <HAL_TIM_ConfigClockSource+0x16c>
 8006552:	2b70      	cmp	r3, #112	@ 0x70
 8006554:	d01a      	beq.n	800658c <HAL_TIM_ConfigClockSource+0xa6>
 8006556:	2b70      	cmp	r3, #112	@ 0x70
 8006558:	d87b      	bhi.n	8006652 <HAL_TIM_ConfigClockSource+0x16c>
 800655a:	2b60      	cmp	r3, #96	@ 0x60
 800655c:	d050      	beq.n	8006600 <HAL_TIM_ConfigClockSource+0x11a>
 800655e:	2b60      	cmp	r3, #96	@ 0x60
 8006560:	d877      	bhi.n	8006652 <HAL_TIM_ConfigClockSource+0x16c>
 8006562:	2b50      	cmp	r3, #80	@ 0x50
 8006564:	d03c      	beq.n	80065e0 <HAL_TIM_ConfigClockSource+0xfa>
 8006566:	2b50      	cmp	r3, #80	@ 0x50
 8006568:	d873      	bhi.n	8006652 <HAL_TIM_ConfigClockSource+0x16c>
 800656a:	2b40      	cmp	r3, #64	@ 0x40
 800656c:	d058      	beq.n	8006620 <HAL_TIM_ConfigClockSource+0x13a>
 800656e:	2b40      	cmp	r3, #64	@ 0x40
 8006570:	d86f      	bhi.n	8006652 <HAL_TIM_ConfigClockSource+0x16c>
 8006572:	2b30      	cmp	r3, #48	@ 0x30
 8006574:	d064      	beq.n	8006640 <HAL_TIM_ConfigClockSource+0x15a>
 8006576:	2b30      	cmp	r3, #48	@ 0x30
 8006578:	d86b      	bhi.n	8006652 <HAL_TIM_ConfigClockSource+0x16c>
 800657a:	2b20      	cmp	r3, #32
 800657c:	d060      	beq.n	8006640 <HAL_TIM_ConfigClockSource+0x15a>
 800657e:	2b20      	cmp	r3, #32
 8006580:	d867      	bhi.n	8006652 <HAL_TIM_ConfigClockSource+0x16c>
 8006582:	2b00      	cmp	r3, #0
 8006584:	d05c      	beq.n	8006640 <HAL_TIM_ConfigClockSource+0x15a>
 8006586:	2b10      	cmp	r3, #16
 8006588:	d05a      	beq.n	8006640 <HAL_TIM_ConfigClockSource+0x15a>
 800658a:	e062      	b.n	8006652 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800659c:	f000 f998 	bl	80068d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80065ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	609a      	str	r2, [r3, #8]
      break;
 80065b8:	e04f      	b.n	800665a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065ca:	f000 f981 	bl	80068d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065dc:	609a      	str	r2, [r3, #8]
      break;
 80065de:	e03c      	b.n	800665a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ec:	461a      	mov	r2, r3
 80065ee:	f000 f8f5 	bl	80067dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2150      	movs	r1, #80	@ 0x50
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 f94e 	bl	800689a <TIM_ITRx_SetConfig>
      break;
 80065fe:	e02c      	b.n	800665a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800660c:	461a      	mov	r2, r3
 800660e:	f000 f914 	bl	800683a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2160      	movs	r1, #96	@ 0x60
 8006618:	4618      	mov	r0, r3
 800661a:	f000 f93e 	bl	800689a <TIM_ITRx_SetConfig>
      break;
 800661e:	e01c      	b.n	800665a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800662c:	461a      	mov	r2, r3
 800662e:	f000 f8d5 	bl	80067dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2140      	movs	r1, #64	@ 0x40
 8006638:	4618      	mov	r0, r3
 800663a:	f000 f92e 	bl	800689a <TIM_ITRx_SetConfig>
      break;
 800663e:	e00c      	b.n	800665a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4619      	mov	r1, r3
 800664a:	4610      	mov	r0, r2
 800664c:	f000 f925 	bl	800689a <TIM_ITRx_SetConfig>
      break;
 8006650:	e003      	b.n	800665a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	73fb      	strb	r3, [r7, #15]
      break;
 8006656:	e000      	b.n	800665a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006658:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800666a:	7bfb      	ldrb	r3, [r7, #15]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a3a      	ldr	r2, [pc, #232]	@ (80067c0 <TIM_Base_SetConfig+0xfc>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d00f      	beq.n	80066fc <TIM_Base_SetConfig+0x38>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066e2:	d00b      	beq.n	80066fc <TIM_Base_SetConfig+0x38>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a37      	ldr	r2, [pc, #220]	@ (80067c4 <TIM_Base_SetConfig+0x100>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d007      	beq.n	80066fc <TIM_Base_SetConfig+0x38>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a36      	ldr	r2, [pc, #216]	@ (80067c8 <TIM_Base_SetConfig+0x104>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d003      	beq.n	80066fc <TIM_Base_SetConfig+0x38>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a35      	ldr	r2, [pc, #212]	@ (80067cc <TIM_Base_SetConfig+0x108>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d108      	bne.n	800670e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	4313      	orrs	r3, r2
 800670c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a2b      	ldr	r2, [pc, #172]	@ (80067c0 <TIM_Base_SetConfig+0xfc>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d01b      	beq.n	800674e <TIM_Base_SetConfig+0x8a>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800671c:	d017      	beq.n	800674e <TIM_Base_SetConfig+0x8a>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a28      	ldr	r2, [pc, #160]	@ (80067c4 <TIM_Base_SetConfig+0x100>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d013      	beq.n	800674e <TIM_Base_SetConfig+0x8a>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a27      	ldr	r2, [pc, #156]	@ (80067c8 <TIM_Base_SetConfig+0x104>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d00f      	beq.n	800674e <TIM_Base_SetConfig+0x8a>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a26      	ldr	r2, [pc, #152]	@ (80067cc <TIM_Base_SetConfig+0x108>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d00b      	beq.n	800674e <TIM_Base_SetConfig+0x8a>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a25      	ldr	r2, [pc, #148]	@ (80067d0 <TIM_Base_SetConfig+0x10c>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d007      	beq.n	800674e <TIM_Base_SetConfig+0x8a>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a24      	ldr	r2, [pc, #144]	@ (80067d4 <TIM_Base_SetConfig+0x110>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d003      	beq.n	800674e <TIM_Base_SetConfig+0x8a>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a23      	ldr	r2, [pc, #140]	@ (80067d8 <TIM_Base_SetConfig+0x114>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d108      	bne.n	8006760 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	4313      	orrs	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	689a      	ldr	r2, [r3, #8]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a0e      	ldr	r2, [pc, #56]	@ (80067c0 <TIM_Base_SetConfig+0xfc>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d103      	bne.n	8006794 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	691a      	ldr	r2, [r3, #16]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d105      	bne.n	80067b2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	f023 0201 	bic.w	r2, r3, #1
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	611a      	str	r2, [r3, #16]
  }
}
 80067b2:	bf00      	nop
 80067b4:	3714      	adds	r7, #20
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	40010000 	.word	0x40010000
 80067c4:	40000400 	.word	0x40000400
 80067c8:	40000800 	.word	0x40000800
 80067cc:	40000c00 	.word	0x40000c00
 80067d0:	40014000 	.word	0x40014000
 80067d4:	40014400 	.word	0x40014400
 80067d8:	40014800 	.word	0x40014800

080067dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067dc:	b480      	push	{r7}
 80067de:	b087      	sub	sp, #28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	f023 0201 	bic.w	r2, r3, #1
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	011b      	lsls	r3, r3, #4
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4313      	orrs	r3, r2
 8006810:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f023 030a 	bic.w	r3, r3, #10
 8006818:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	4313      	orrs	r3, r2
 8006820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	621a      	str	r2, [r3, #32]
}
 800682e:	bf00      	nop
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800683a:	b480      	push	{r7}
 800683c:	b087      	sub	sp, #28
 800683e:	af00      	add	r7, sp, #0
 8006840:	60f8      	str	r0, [r7, #12]
 8006842:	60b9      	str	r1, [r7, #8]
 8006844:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	f023 0210 	bic.w	r2, r3, #16
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006864:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	031b      	lsls	r3, r3, #12
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	4313      	orrs	r3, r2
 800686e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006876:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	011b      	lsls	r3, r3, #4
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	4313      	orrs	r3, r2
 8006880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	621a      	str	r2, [r3, #32]
}
 800688e:	bf00      	nop
 8006890:	371c      	adds	r7, #28
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800689a:	b480      	push	{r7}
 800689c:	b085      	sub	sp, #20
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	f043 0307 	orr.w	r3, r3, #7
 80068bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	609a      	str	r2, [r3, #8]
}
 80068c4:	bf00      	nop
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	021a      	lsls	r2, r3, #8
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	431a      	orrs	r2, r3
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	609a      	str	r2, [r3, #8]
}
 8006904:	bf00      	nop
 8006906:	371c      	adds	r7, #28
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006920:	2b01      	cmp	r3, #1
 8006922:	d101      	bne.n	8006928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006924:	2302      	movs	r3, #2
 8006926:	e050      	b.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800694e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	4313      	orrs	r3, r2
 8006958:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a1c      	ldr	r2, [pc, #112]	@ (80069d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d018      	beq.n	800699e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006974:	d013      	beq.n	800699e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a18      	ldr	r2, [pc, #96]	@ (80069dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d00e      	beq.n	800699e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a16      	ldr	r2, [pc, #88]	@ (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d009      	beq.n	800699e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a15      	ldr	r2, [pc, #84]	@ (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d004      	beq.n	800699e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a13      	ldr	r2, [pc, #76]	@ (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d10c      	bne.n	80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	40010000 	.word	0x40010000
 80069dc:	40000400 	.word	0x40000400
 80069e0:	40000800 	.word	0x40000800
 80069e4:	40000c00 	.word	0x40000c00
 80069e8:	40014000 	.word	0x40014000

080069ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e042      	b.n	8006aac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d106      	bne.n	8006a40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7fa fa50 	bl	8000ee0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2224      	movs	r2, #36	@ 0x24
 8006a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f82b 	bl	8006ab4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	691a      	ldr	r2, [r3, #16]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	695a      	ldr	r2, [r3, #20]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68da      	ldr	r2, [r3, #12]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2220      	movs	r2, #32
 8006a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ab8:	b0c0      	sub	sp, #256	@ 0x100
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ad0:	68d9      	ldr	r1, [r3, #12]
 8006ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	ea40 0301 	orr.w	r3, r0, r1
 8006adc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ae2:	689a      	ldr	r2, [r3, #8]
 8006ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	431a      	orrs	r2, r3
 8006aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	431a      	orrs	r2, r3
 8006af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006b0c:	f021 010c 	bic.w	r1, r1, #12
 8006b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b1a:	430b      	orrs	r3, r1
 8006b1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b2e:	6999      	ldr	r1, [r3, #24]
 8006b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	ea40 0301 	orr.w	r3, r0, r1
 8006b3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	4b8f      	ldr	r3, [pc, #572]	@ (8006d80 <UART_SetConfig+0x2cc>)
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d005      	beq.n	8006b54 <UART_SetConfig+0xa0>
 8006b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	4b8d      	ldr	r3, [pc, #564]	@ (8006d84 <UART_SetConfig+0x2d0>)
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d104      	bne.n	8006b5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b54:	f7fe fb28 	bl	80051a8 <HAL_RCC_GetPCLK2Freq>
 8006b58:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006b5c:	e003      	b.n	8006b66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b5e:	f7fe fb0f 	bl	8005180 <HAL_RCC_GetPCLK1Freq>
 8006b62:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b70:	f040 810c 	bne.w	8006d8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006b7e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006b82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006b86:	4622      	mov	r2, r4
 8006b88:	462b      	mov	r3, r5
 8006b8a:	1891      	adds	r1, r2, r2
 8006b8c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006b8e:	415b      	adcs	r3, r3
 8006b90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006b96:	4621      	mov	r1, r4
 8006b98:	eb12 0801 	adds.w	r8, r2, r1
 8006b9c:	4629      	mov	r1, r5
 8006b9e:	eb43 0901 	adc.w	r9, r3, r1
 8006ba2:	f04f 0200 	mov.w	r2, #0
 8006ba6:	f04f 0300 	mov.w	r3, #0
 8006baa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bb6:	4690      	mov	r8, r2
 8006bb8:	4699      	mov	r9, r3
 8006bba:	4623      	mov	r3, r4
 8006bbc:	eb18 0303 	adds.w	r3, r8, r3
 8006bc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006bc4:	462b      	mov	r3, r5
 8006bc6:	eb49 0303 	adc.w	r3, r9, r3
 8006bca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006bda:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006bde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006be2:	460b      	mov	r3, r1
 8006be4:	18db      	adds	r3, r3, r3
 8006be6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006be8:	4613      	mov	r3, r2
 8006bea:	eb42 0303 	adc.w	r3, r2, r3
 8006bee:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bf0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006bf4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006bf8:	f7f9 fafc 	bl	80001f4 <__aeabi_uldivmod>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4b61      	ldr	r3, [pc, #388]	@ (8006d88 <UART_SetConfig+0x2d4>)
 8006c02:	fba3 2302 	umull	r2, r3, r3, r2
 8006c06:	095b      	lsrs	r3, r3, #5
 8006c08:	011c      	lsls	r4, r3, #4
 8006c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c14:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006c18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006c1c:	4642      	mov	r2, r8
 8006c1e:	464b      	mov	r3, r9
 8006c20:	1891      	adds	r1, r2, r2
 8006c22:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006c24:	415b      	adcs	r3, r3
 8006c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006c2c:	4641      	mov	r1, r8
 8006c2e:	eb12 0a01 	adds.w	sl, r2, r1
 8006c32:	4649      	mov	r1, r9
 8006c34:	eb43 0b01 	adc.w	fp, r3, r1
 8006c38:	f04f 0200 	mov.w	r2, #0
 8006c3c:	f04f 0300 	mov.w	r3, #0
 8006c40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c4c:	4692      	mov	sl, r2
 8006c4e:	469b      	mov	fp, r3
 8006c50:	4643      	mov	r3, r8
 8006c52:	eb1a 0303 	adds.w	r3, sl, r3
 8006c56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c5a:	464b      	mov	r3, r9
 8006c5c:	eb4b 0303 	adc.w	r3, fp, r3
 8006c60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c70:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006c74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006c78:	460b      	mov	r3, r1
 8006c7a:	18db      	adds	r3, r3, r3
 8006c7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c7e:	4613      	mov	r3, r2
 8006c80:	eb42 0303 	adc.w	r3, r2, r3
 8006c84:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006c8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006c8e:	f7f9 fab1 	bl	80001f4 <__aeabi_uldivmod>
 8006c92:	4602      	mov	r2, r0
 8006c94:	460b      	mov	r3, r1
 8006c96:	4611      	mov	r1, r2
 8006c98:	4b3b      	ldr	r3, [pc, #236]	@ (8006d88 <UART_SetConfig+0x2d4>)
 8006c9a:	fba3 2301 	umull	r2, r3, r3, r1
 8006c9e:	095b      	lsrs	r3, r3, #5
 8006ca0:	2264      	movs	r2, #100	@ 0x64
 8006ca2:	fb02 f303 	mul.w	r3, r2, r3
 8006ca6:	1acb      	subs	r3, r1, r3
 8006ca8:	00db      	lsls	r3, r3, #3
 8006caa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006cae:	4b36      	ldr	r3, [pc, #216]	@ (8006d88 <UART_SetConfig+0x2d4>)
 8006cb0:	fba3 2302 	umull	r2, r3, r3, r2
 8006cb4:	095b      	lsrs	r3, r3, #5
 8006cb6:	005b      	lsls	r3, r3, #1
 8006cb8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006cbc:	441c      	add	r4, r3
 8006cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006cc8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006ccc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006cd0:	4642      	mov	r2, r8
 8006cd2:	464b      	mov	r3, r9
 8006cd4:	1891      	adds	r1, r2, r2
 8006cd6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006cd8:	415b      	adcs	r3, r3
 8006cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006ce0:	4641      	mov	r1, r8
 8006ce2:	1851      	adds	r1, r2, r1
 8006ce4:	6339      	str	r1, [r7, #48]	@ 0x30
 8006ce6:	4649      	mov	r1, r9
 8006ce8:	414b      	adcs	r3, r1
 8006cea:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cec:	f04f 0200 	mov.w	r2, #0
 8006cf0:	f04f 0300 	mov.w	r3, #0
 8006cf4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006cf8:	4659      	mov	r1, fp
 8006cfa:	00cb      	lsls	r3, r1, #3
 8006cfc:	4651      	mov	r1, sl
 8006cfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d02:	4651      	mov	r1, sl
 8006d04:	00ca      	lsls	r2, r1, #3
 8006d06:	4610      	mov	r0, r2
 8006d08:	4619      	mov	r1, r3
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	4642      	mov	r2, r8
 8006d0e:	189b      	adds	r3, r3, r2
 8006d10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d14:	464b      	mov	r3, r9
 8006d16:	460a      	mov	r2, r1
 8006d18:	eb42 0303 	adc.w	r3, r2, r3
 8006d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d2c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006d30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d34:	460b      	mov	r3, r1
 8006d36:	18db      	adds	r3, r3, r3
 8006d38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	eb42 0303 	adc.w	r3, r2, r3
 8006d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006d4a:	f7f9 fa53 	bl	80001f4 <__aeabi_uldivmod>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	460b      	mov	r3, r1
 8006d52:	4b0d      	ldr	r3, [pc, #52]	@ (8006d88 <UART_SetConfig+0x2d4>)
 8006d54:	fba3 1302 	umull	r1, r3, r3, r2
 8006d58:	095b      	lsrs	r3, r3, #5
 8006d5a:	2164      	movs	r1, #100	@ 0x64
 8006d5c:	fb01 f303 	mul.w	r3, r1, r3
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	00db      	lsls	r3, r3, #3
 8006d64:	3332      	adds	r3, #50	@ 0x32
 8006d66:	4a08      	ldr	r2, [pc, #32]	@ (8006d88 <UART_SetConfig+0x2d4>)
 8006d68:	fba2 2303 	umull	r2, r3, r2, r3
 8006d6c:	095b      	lsrs	r3, r3, #5
 8006d6e:	f003 0207 	and.w	r2, r3, #7
 8006d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4422      	add	r2, r4
 8006d7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d7c:	e106      	b.n	8006f8c <UART_SetConfig+0x4d8>
 8006d7e:	bf00      	nop
 8006d80:	40011000 	.word	0x40011000
 8006d84:	40011400 	.word	0x40011400
 8006d88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d90:	2200      	movs	r2, #0
 8006d92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d96:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006d9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006d9e:	4642      	mov	r2, r8
 8006da0:	464b      	mov	r3, r9
 8006da2:	1891      	adds	r1, r2, r2
 8006da4:	6239      	str	r1, [r7, #32]
 8006da6:	415b      	adcs	r3, r3
 8006da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006daa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006dae:	4641      	mov	r1, r8
 8006db0:	1854      	adds	r4, r2, r1
 8006db2:	4649      	mov	r1, r9
 8006db4:	eb43 0501 	adc.w	r5, r3, r1
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	f04f 0300 	mov.w	r3, #0
 8006dc0:	00eb      	lsls	r3, r5, #3
 8006dc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dc6:	00e2      	lsls	r2, r4, #3
 8006dc8:	4614      	mov	r4, r2
 8006dca:	461d      	mov	r5, r3
 8006dcc:	4643      	mov	r3, r8
 8006dce:	18e3      	adds	r3, r4, r3
 8006dd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006dd4:	464b      	mov	r3, r9
 8006dd6:	eb45 0303 	adc.w	r3, r5, r3
 8006dda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006dea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006dee:	f04f 0200 	mov.w	r2, #0
 8006df2:	f04f 0300 	mov.w	r3, #0
 8006df6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	008b      	lsls	r3, r1, #2
 8006dfe:	4621      	mov	r1, r4
 8006e00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e04:	4621      	mov	r1, r4
 8006e06:	008a      	lsls	r2, r1, #2
 8006e08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006e0c:	f7f9 f9f2 	bl	80001f4 <__aeabi_uldivmod>
 8006e10:	4602      	mov	r2, r0
 8006e12:	460b      	mov	r3, r1
 8006e14:	4b60      	ldr	r3, [pc, #384]	@ (8006f98 <UART_SetConfig+0x4e4>)
 8006e16:	fba3 2302 	umull	r2, r3, r3, r2
 8006e1a:	095b      	lsrs	r3, r3, #5
 8006e1c:	011c      	lsls	r4, r3, #4
 8006e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e22:	2200      	movs	r2, #0
 8006e24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006e2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006e30:	4642      	mov	r2, r8
 8006e32:	464b      	mov	r3, r9
 8006e34:	1891      	adds	r1, r2, r2
 8006e36:	61b9      	str	r1, [r7, #24]
 8006e38:	415b      	adcs	r3, r3
 8006e3a:	61fb      	str	r3, [r7, #28]
 8006e3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e40:	4641      	mov	r1, r8
 8006e42:	1851      	adds	r1, r2, r1
 8006e44:	6139      	str	r1, [r7, #16]
 8006e46:	4649      	mov	r1, r9
 8006e48:	414b      	adcs	r3, r1
 8006e4a:	617b      	str	r3, [r7, #20]
 8006e4c:	f04f 0200 	mov.w	r2, #0
 8006e50:	f04f 0300 	mov.w	r3, #0
 8006e54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e58:	4659      	mov	r1, fp
 8006e5a:	00cb      	lsls	r3, r1, #3
 8006e5c:	4651      	mov	r1, sl
 8006e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e62:	4651      	mov	r1, sl
 8006e64:	00ca      	lsls	r2, r1, #3
 8006e66:	4610      	mov	r0, r2
 8006e68:	4619      	mov	r1, r3
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	4642      	mov	r2, r8
 8006e6e:	189b      	adds	r3, r3, r2
 8006e70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e74:	464b      	mov	r3, r9
 8006e76:	460a      	mov	r2, r1
 8006e78:	eb42 0303 	adc.w	r3, r2, r3
 8006e7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006e8c:	f04f 0200 	mov.w	r2, #0
 8006e90:	f04f 0300 	mov.w	r3, #0
 8006e94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006e98:	4649      	mov	r1, r9
 8006e9a:	008b      	lsls	r3, r1, #2
 8006e9c:	4641      	mov	r1, r8
 8006e9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ea2:	4641      	mov	r1, r8
 8006ea4:	008a      	lsls	r2, r1, #2
 8006ea6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006eaa:	f7f9 f9a3 	bl	80001f4 <__aeabi_uldivmod>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	4b38      	ldr	r3, [pc, #224]	@ (8006f98 <UART_SetConfig+0x4e4>)
 8006eb6:	fba3 2301 	umull	r2, r3, r3, r1
 8006eba:	095b      	lsrs	r3, r3, #5
 8006ebc:	2264      	movs	r2, #100	@ 0x64
 8006ebe:	fb02 f303 	mul.w	r3, r2, r3
 8006ec2:	1acb      	subs	r3, r1, r3
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	3332      	adds	r3, #50	@ 0x32
 8006ec8:	4a33      	ldr	r2, [pc, #204]	@ (8006f98 <UART_SetConfig+0x4e4>)
 8006eca:	fba2 2303 	umull	r2, r3, r2, r3
 8006ece:	095b      	lsrs	r3, r3, #5
 8006ed0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ed4:	441c      	add	r4, r3
 8006ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006eda:	2200      	movs	r2, #0
 8006edc:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ede:	677a      	str	r2, [r7, #116]	@ 0x74
 8006ee0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006ee4:	4642      	mov	r2, r8
 8006ee6:	464b      	mov	r3, r9
 8006ee8:	1891      	adds	r1, r2, r2
 8006eea:	60b9      	str	r1, [r7, #8]
 8006eec:	415b      	adcs	r3, r3
 8006eee:	60fb      	str	r3, [r7, #12]
 8006ef0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ef4:	4641      	mov	r1, r8
 8006ef6:	1851      	adds	r1, r2, r1
 8006ef8:	6039      	str	r1, [r7, #0]
 8006efa:	4649      	mov	r1, r9
 8006efc:	414b      	adcs	r3, r1
 8006efe:	607b      	str	r3, [r7, #4]
 8006f00:	f04f 0200 	mov.w	r2, #0
 8006f04:	f04f 0300 	mov.w	r3, #0
 8006f08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f0c:	4659      	mov	r1, fp
 8006f0e:	00cb      	lsls	r3, r1, #3
 8006f10:	4651      	mov	r1, sl
 8006f12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f16:	4651      	mov	r1, sl
 8006f18:	00ca      	lsls	r2, r1, #3
 8006f1a:	4610      	mov	r0, r2
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	4603      	mov	r3, r0
 8006f20:	4642      	mov	r2, r8
 8006f22:	189b      	adds	r3, r3, r2
 8006f24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f26:	464b      	mov	r3, r9
 8006f28:	460a      	mov	r2, r1
 8006f2a:	eb42 0303 	adc.w	r3, r2, r3
 8006f2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f3a:	667a      	str	r2, [r7, #100]	@ 0x64
 8006f3c:	f04f 0200 	mov.w	r2, #0
 8006f40:	f04f 0300 	mov.w	r3, #0
 8006f44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006f48:	4649      	mov	r1, r9
 8006f4a:	008b      	lsls	r3, r1, #2
 8006f4c:	4641      	mov	r1, r8
 8006f4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f52:	4641      	mov	r1, r8
 8006f54:	008a      	lsls	r2, r1, #2
 8006f56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006f5a:	f7f9 f94b 	bl	80001f4 <__aeabi_uldivmod>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	460b      	mov	r3, r1
 8006f62:	4b0d      	ldr	r3, [pc, #52]	@ (8006f98 <UART_SetConfig+0x4e4>)
 8006f64:	fba3 1302 	umull	r1, r3, r3, r2
 8006f68:	095b      	lsrs	r3, r3, #5
 8006f6a:	2164      	movs	r1, #100	@ 0x64
 8006f6c:	fb01 f303 	mul.w	r3, r1, r3
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	011b      	lsls	r3, r3, #4
 8006f74:	3332      	adds	r3, #50	@ 0x32
 8006f76:	4a08      	ldr	r2, [pc, #32]	@ (8006f98 <UART_SetConfig+0x4e4>)
 8006f78:	fba2 2303 	umull	r2, r3, r2, r3
 8006f7c:	095b      	lsrs	r3, r3, #5
 8006f7e:	f003 020f 	and.w	r2, r3, #15
 8006f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4422      	add	r2, r4
 8006f8a:	609a      	str	r2, [r3, #8]
}
 8006f8c:	bf00      	nop
 8006f8e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006f92:	46bd      	mov	sp, r7
 8006f94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f98:	51eb851f 	.word	0x51eb851f

08006f9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006fa0:	4904      	ldr	r1, [pc, #16]	@ (8006fb4 <MX_FATFS_Init+0x18>)
 8006fa2:	4805      	ldr	r0, [pc, #20]	@ (8006fb8 <MX_FATFS_Init+0x1c>)
 8006fa4:	f000 f8ae 	bl	8007104 <FATFS_LinkDriver>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	461a      	mov	r2, r3
 8006fac:	4b03      	ldr	r3, [pc, #12]	@ (8006fbc <MX_FATFS_Init+0x20>)
 8006fae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006fb0:	bf00      	nop
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	2000093c 	.word	0x2000093c
 8006fb8:	2000002c 	.word	0x2000002c
 8006fbc:	20000938 	.word	0x20000938

08006fc0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8006fca:	79fb      	ldrb	r3, [r7, #7]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7fb f94d 	bl	800226c <SD_disk_initialize>
 8006fd2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8006fe6:	79fb      	ldrb	r3, [r7, #7]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7fb fa2b 	bl	8002444 <SD_disk_status>
 8006fee:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60b9      	str	r1, [r7, #8]
 8007000:	607a      	str	r2, [r7, #4]
 8007002:	603b      	str	r3, [r7, #0]
 8007004:	4603      	mov	r3, r0
 8007006:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8007008:	7bf8      	ldrb	r0, [r7, #15]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	68b9      	ldr	r1, [r7, #8]
 8007010:	f7fb fa2e 	bl	8002470 <SD_disk_read>
 8007014:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b084      	sub	sp, #16
 8007022:	af00      	add	r7, sp, #0
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
 8007028:	603b      	str	r3, [r7, #0]
 800702a:	4603      	mov	r3, r0
 800702c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800702e:	7bf8      	ldrb	r0, [r7, #15]
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	68b9      	ldr	r1, [r7, #8]
 8007036:	f7fb fa85 	bl	8002544 <SD_disk_write>
 800703a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	4603      	mov	r3, r0
 800704c:	603a      	str	r2, [r7, #0]
 800704e:	71fb      	strb	r3, [r7, #7]
 8007050:	460b      	mov	r3, r1
 8007052:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 8007054:	79b9      	ldrb	r1, [r7, #6]
 8007056:	79fb      	ldrb	r3, [r7, #7]
 8007058:	683a      	ldr	r2, [r7, #0]
 800705a:	4618      	mov	r0, r3
 800705c:	f7fb faf6 	bl	800264c <SD_disk_ioctl>
 8007060:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007062:	4618      	mov	r0, r3
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
	...

0800706c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	4613      	mov	r3, r2
 8007078:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800707a:	2301      	movs	r3, #1
 800707c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800707e:	2300      	movs	r3, #0
 8007080:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007082:	4b1f      	ldr	r3, [pc, #124]	@ (8007100 <FATFS_LinkDriverEx+0x94>)
 8007084:	7a5b      	ldrb	r3, [r3, #9]
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b00      	cmp	r3, #0
 800708a:	d131      	bne.n	80070f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800708c:	4b1c      	ldr	r3, [pc, #112]	@ (8007100 <FATFS_LinkDriverEx+0x94>)
 800708e:	7a5b      	ldrb	r3, [r3, #9]
 8007090:	b2db      	uxtb	r3, r3
 8007092:	461a      	mov	r2, r3
 8007094:	4b1a      	ldr	r3, [pc, #104]	@ (8007100 <FATFS_LinkDriverEx+0x94>)
 8007096:	2100      	movs	r1, #0
 8007098:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800709a:	4b19      	ldr	r3, [pc, #100]	@ (8007100 <FATFS_LinkDriverEx+0x94>)
 800709c:	7a5b      	ldrb	r3, [r3, #9]
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	4a17      	ldr	r2, [pc, #92]	@ (8007100 <FATFS_LinkDriverEx+0x94>)
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4413      	add	r3, r2
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80070aa:	4b15      	ldr	r3, [pc, #84]	@ (8007100 <FATFS_LinkDriverEx+0x94>)
 80070ac:	7a5b      	ldrb	r3, [r3, #9]
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	461a      	mov	r2, r3
 80070b2:	4b13      	ldr	r3, [pc, #76]	@ (8007100 <FATFS_LinkDriverEx+0x94>)
 80070b4:	4413      	add	r3, r2
 80070b6:	79fa      	ldrb	r2, [r7, #7]
 80070b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80070ba:	4b11      	ldr	r3, [pc, #68]	@ (8007100 <FATFS_LinkDriverEx+0x94>)
 80070bc:	7a5b      	ldrb	r3, [r3, #9]
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	1c5a      	adds	r2, r3, #1
 80070c2:	b2d1      	uxtb	r1, r2
 80070c4:	4a0e      	ldr	r2, [pc, #56]	@ (8007100 <FATFS_LinkDriverEx+0x94>)
 80070c6:	7251      	strb	r1, [r2, #9]
 80070c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80070ca:	7dbb      	ldrb	r3, [r7, #22]
 80070cc:	3330      	adds	r3, #48	@ 0x30
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	3301      	adds	r3, #1
 80070d8:	223a      	movs	r2, #58	@ 0x3a
 80070da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	3302      	adds	r3, #2
 80070e0:	222f      	movs	r2, #47	@ 0x2f
 80070e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	3303      	adds	r3, #3
 80070e8:	2200      	movs	r2, #0
 80070ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80070ec:	2300      	movs	r3, #0
 80070ee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80070f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	371c      	adds	r7, #28
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	20000940 	.word	0x20000940

08007104 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800710e:	2200      	movs	r2, #0
 8007110:	6839      	ldr	r1, [r7, #0]
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7ff ffaa 	bl	800706c <FATFS_LinkDriverEx>
 8007118:	4603      	mov	r3, r0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007122:	b480      	push	{r7}
 8007124:	b083      	sub	sp, #12
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f103 0208 	add.w	r2, r3, #8
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f04f 32ff 	mov.w	r2, #4294967295
 800713a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f103 0208 	add.w	r2, r3, #8
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f103 0208 	add.w	r2, r3, #8
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007162:	b480      	push	{r7}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	689a      	ldr	r2, [r3, #8]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	1c5a      	adds	r2, r3, #1
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	601a      	str	r2, [r3, #0]
}
 80071b8:	bf00      	nop
 80071ba:	3714      	adds	r7, #20
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071da:	d103      	bne.n	80071e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	60fb      	str	r3, [r7, #12]
 80071e2:	e00c      	b.n	80071fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	3308      	adds	r3, #8
 80071e8:	60fb      	str	r3, [r7, #12]
 80071ea:	e002      	b.n	80071f2 <vListInsert+0x2e>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d2f6      	bcs.n	80071ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	1c5a      	adds	r2, r3, #1
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	601a      	str	r2, [r3, #0]
}
 800722a:	bf00      	nop
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007236:	b480      	push	{r7}
 8007238:	b085      	sub	sp, #20
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	6892      	ldr	r2, [r2, #8]
 800724c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	6852      	ldr	r2, [r2, #4]
 8007256:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	429a      	cmp	r2, r3
 8007260:	d103      	bne.n	800726a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	689a      	ldr	r2, [r3, #8]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	1e5a      	subs	r2, r3, #1
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
	...

0800728c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10b      	bne.n	80072b8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80072a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a4:	f383 8811 	msr	BASEPRI, r3
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80072b2:	bf00      	nop
 80072b4:	bf00      	nop
 80072b6:	e7fd      	b.n	80072b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80072b8:	f001 fbc6 	bl	8008a48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072c4:	68f9      	ldr	r1, [r7, #12]
 80072c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80072c8:	fb01 f303 	mul.w	r3, r1, r3
 80072cc:	441a      	add	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072e8:	3b01      	subs	r3, #1
 80072ea:	68f9      	ldr	r1, [r7, #12]
 80072ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80072ee:	fb01 f303 	mul.w	r3, r1, r3
 80072f2:	441a      	add	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	22ff      	movs	r2, #255	@ 0xff
 80072fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	22ff      	movs	r2, #255	@ 0xff
 8007304:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d114      	bne.n	8007338 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d01a      	beq.n	800734c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3310      	adds	r3, #16
 800731a:	4618      	mov	r0, r3
 800731c:	f000 ff96 	bl	800824c <xTaskRemoveFromEventList>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d012      	beq.n	800734c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007326:	4b0d      	ldr	r3, [pc, #52]	@ (800735c <xQueueGenericReset+0xd0>)
 8007328:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800732c:	601a      	str	r2, [r3, #0]
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	e009      	b.n	800734c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3310      	adds	r3, #16
 800733c:	4618      	mov	r0, r3
 800733e:	f7ff fef0 	bl	8007122 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	3324      	adds	r3, #36	@ 0x24
 8007346:	4618      	mov	r0, r3
 8007348:	f7ff feeb 	bl	8007122 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800734c:	f001 fbae 	bl	8008aac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007350:	2301      	movs	r3, #1
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	e000ed04 	.word	0xe000ed04

08007360 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007360:	b580      	push	{r7, lr}
 8007362:	b08a      	sub	sp, #40	@ 0x28
 8007364:	af02      	add	r7, sp, #8
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	4613      	mov	r3, r2
 800736c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10b      	bne.n	800738c <xQueueGenericCreate+0x2c>
	__asm volatile
 8007374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007378:	f383 8811 	msr	BASEPRI, r3
 800737c:	f3bf 8f6f 	isb	sy
 8007380:	f3bf 8f4f 	dsb	sy
 8007384:	613b      	str	r3, [r7, #16]
}
 8007386:	bf00      	nop
 8007388:	bf00      	nop
 800738a:	e7fd      	b.n	8007388 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	fb02 f303 	mul.w	r3, r2, r3
 8007394:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	3348      	adds	r3, #72	@ 0x48
 800739a:	4618      	mov	r0, r3
 800739c:	f001 fc34 	bl	8008c08 <pvPortMalloc>
 80073a0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d011      	beq.n	80073cc <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	3348      	adds	r3, #72	@ 0x48
 80073b0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073ba:	79fa      	ldrb	r2, [r7, #7]
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	4613      	mov	r3, r2
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	68b9      	ldr	r1, [r7, #8]
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f000 f805 	bl	80073d6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073cc:	69bb      	ldr	r3, [r7, #24]
	}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3720      	adds	r7, #32
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	60f8      	str	r0, [r7, #12]
 80073de:	60b9      	str	r1, [r7, #8]
 80073e0:	607a      	str	r2, [r7, #4]
 80073e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d103      	bne.n	80073f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	69ba      	ldr	r2, [r7, #24]
 80073ee:	601a      	str	r2, [r3, #0]
 80073f0:	e002      	b.n	80073f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007404:	2101      	movs	r1, #1
 8007406:	69b8      	ldr	r0, [r7, #24]
 8007408:	f7ff ff40 	bl	800728c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800740c:	bf00      	nop
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b08e      	sub	sp, #56	@ 0x38
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
 8007420:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007422:	2300      	movs	r3, #0
 8007424:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800742a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10b      	bne.n	8007448 <xQueueGenericSend+0x34>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007442:	bf00      	nop
 8007444:	bf00      	nop
 8007446:	e7fd      	b.n	8007444 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d103      	bne.n	8007456 <xQueueGenericSend+0x42>
 800744e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <xQueueGenericSend+0x46>
 8007456:	2301      	movs	r3, #1
 8007458:	e000      	b.n	800745c <xQueueGenericSend+0x48>
 800745a:	2300      	movs	r3, #0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10b      	bne.n	8007478 <xQueueGenericSend+0x64>
	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007472:	bf00      	nop
 8007474:	bf00      	nop
 8007476:	e7fd      	b.n	8007474 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2b02      	cmp	r3, #2
 800747c:	d103      	bne.n	8007486 <xQueueGenericSend+0x72>
 800747e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007482:	2b01      	cmp	r3, #1
 8007484:	d101      	bne.n	800748a <xQueueGenericSend+0x76>
 8007486:	2301      	movs	r3, #1
 8007488:	e000      	b.n	800748c <xQueueGenericSend+0x78>
 800748a:	2300      	movs	r3, #0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10b      	bne.n	80074a8 <xQueueGenericSend+0x94>
	__asm volatile
 8007490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	623b      	str	r3, [r7, #32]
}
 80074a2:	bf00      	nop
 80074a4:	bf00      	nop
 80074a6:	e7fd      	b.n	80074a4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074a8:	f001 f890 	bl	80085cc <xTaskGetSchedulerState>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d102      	bne.n	80074b8 <xQueueGenericSend+0xa4>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <xQueueGenericSend+0xa8>
 80074b8:	2301      	movs	r3, #1
 80074ba:	e000      	b.n	80074be <xQueueGenericSend+0xaa>
 80074bc:	2300      	movs	r3, #0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10b      	bne.n	80074da <xQueueGenericSend+0xc6>
	__asm volatile
 80074c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	61fb      	str	r3, [r7, #28]
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop
 80074d8:	e7fd      	b.n	80074d6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074da:	f001 fab5 	bl	8008a48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d302      	bcc.n	80074f0 <xQueueGenericSend+0xdc>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d129      	bne.n	8007544 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	68b9      	ldr	r1, [r7, #8]
 80074f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074f6:	f000 f971 	bl	80077dc <prvCopyDataToQueue>
 80074fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007500:	2b00      	cmp	r3, #0
 8007502:	d010      	beq.n	8007526 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007506:	3324      	adds	r3, #36	@ 0x24
 8007508:	4618      	mov	r0, r3
 800750a:	f000 fe9f 	bl	800824c <xTaskRemoveFromEventList>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d013      	beq.n	800753c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007514:	4b3f      	ldr	r3, [pc, #252]	@ (8007614 <xQueueGenericSend+0x200>)
 8007516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	f3bf 8f6f 	isb	sy
 8007524:	e00a      	b.n	800753c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007528:	2b00      	cmp	r3, #0
 800752a:	d007      	beq.n	800753c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800752c:	4b39      	ldr	r3, [pc, #228]	@ (8007614 <xQueueGenericSend+0x200>)
 800752e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800753c:	f001 fab6 	bl	8008aac <vPortExitCritical>
				return pdPASS;
 8007540:	2301      	movs	r3, #1
 8007542:	e063      	b.n	800760c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d103      	bne.n	8007552 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800754a:	f001 faaf 	bl	8008aac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800754e:	2300      	movs	r3, #0
 8007550:	e05c      	b.n	800760c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007554:	2b00      	cmp	r3, #0
 8007556:	d106      	bne.n	8007566 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007558:	f107 0314 	add.w	r3, r7, #20
 800755c:	4618      	mov	r0, r3
 800755e:	f000 fed9 	bl	8008314 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007562:	2301      	movs	r3, #1
 8007564:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007566:	f001 faa1 	bl	8008aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800756a:	f000 fc77 	bl	8007e5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800756e:	f001 fa6b 	bl	8008a48 <vPortEnterCritical>
 8007572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007574:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007578:	b25b      	sxtb	r3, r3
 800757a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757e:	d103      	bne.n	8007588 <xQueueGenericSend+0x174>
 8007580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007582:	2200      	movs	r2, #0
 8007584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800758e:	b25b      	sxtb	r3, r3
 8007590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007594:	d103      	bne.n	800759e <xQueueGenericSend+0x18a>
 8007596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007598:	2200      	movs	r2, #0
 800759a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800759e:	f001 fa85 	bl	8008aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075a2:	1d3a      	adds	r2, r7, #4
 80075a4:	f107 0314 	add.w	r3, r7, #20
 80075a8:	4611      	mov	r1, r2
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 fec8 	bl	8008340 <xTaskCheckForTimeOut>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d124      	bne.n	8007600 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80075b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075b8:	f000 fa08 	bl	80079cc <prvIsQueueFull>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d018      	beq.n	80075f4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80075c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c4:	3310      	adds	r3, #16
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	4611      	mov	r1, r2
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 fe18 	bl	8008200 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80075d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075d2:	f000 f993 	bl	80078fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80075d6:	f000 fc4f 	bl	8007e78 <xTaskResumeAll>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f47f af7c 	bne.w	80074da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80075e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007614 <xQueueGenericSend+0x200>)
 80075e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	e772      	b.n	80074da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80075f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075f6:	f000 f981 	bl	80078fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075fa:	f000 fc3d 	bl	8007e78 <xTaskResumeAll>
 80075fe:	e76c      	b.n	80074da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007600:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007602:	f000 f97b 	bl	80078fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007606:	f000 fc37 	bl	8007e78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800760a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800760c:	4618      	mov	r0, r3
 800760e:	3738      	adds	r7, #56	@ 0x38
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	e000ed04 	.word	0xe000ed04

08007618 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b08c      	sub	sp, #48	@ 0x30
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007624:	2300      	movs	r3, #0
 8007626:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800762c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10b      	bne.n	800764a <xQueueReceive+0x32>
	__asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	623b      	str	r3, [r7, #32]
}
 8007644:	bf00      	nop
 8007646:	bf00      	nop
 8007648:	e7fd      	b.n	8007646 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d103      	bne.n	8007658 <xQueueReceive+0x40>
 8007650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <xQueueReceive+0x44>
 8007658:	2301      	movs	r3, #1
 800765a:	e000      	b.n	800765e <xQueueReceive+0x46>
 800765c:	2300      	movs	r3, #0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10b      	bne.n	800767a <xQueueReceive+0x62>
	__asm volatile
 8007662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	61fb      	str	r3, [r7, #28]
}
 8007674:	bf00      	nop
 8007676:	bf00      	nop
 8007678:	e7fd      	b.n	8007676 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800767a:	f000 ffa7 	bl	80085cc <xTaskGetSchedulerState>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d102      	bne.n	800768a <xQueueReceive+0x72>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <xQueueReceive+0x76>
 800768a:	2301      	movs	r3, #1
 800768c:	e000      	b.n	8007690 <xQueueReceive+0x78>
 800768e:	2300      	movs	r3, #0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10b      	bne.n	80076ac <xQueueReceive+0x94>
	__asm volatile
 8007694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007698:	f383 8811 	msr	BASEPRI, r3
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	61bb      	str	r3, [r7, #24]
}
 80076a6:	bf00      	nop
 80076a8:	bf00      	nop
 80076aa:	e7fd      	b.n	80076a8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076ac:	f001 f9cc 	bl	8008a48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d01f      	beq.n	80076fc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80076bc:	68b9      	ldr	r1, [r7, #8]
 80076be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076c0:	f000 f8f6 	bl	80078b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c6:	1e5a      	subs	r2, r3, #1
 80076c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00f      	beq.n	80076f4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d6:	3310      	adds	r3, #16
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 fdb7 	bl	800824c <xTaskRemoveFromEventList>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d007      	beq.n	80076f4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076e4:	4b3c      	ldr	r3, [pc, #240]	@ (80077d8 <xQueueReceive+0x1c0>)
 80076e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076ea:	601a      	str	r2, [r3, #0]
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80076f4:	f001 f9da 	bl	8008aac <vPortExitCritical>
				return pdPASS;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e069      	b.n	80077d0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d103      	bne.n	800770a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007702:	f001 f9d3 	bl	8008aac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007706:	2300      	movs	r3, #0
 8007708:	e062      	b.n	80077d0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800770a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800770c:	2b00      	cmp	r3, #0
 800770e:	d106      	bne.n	800771e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007710:	f107 0310 	add.w	r3, r7, #16
 8007714:	4618      	mov	r0, r3
 8007716:	f000 fdfd 	bl	8008314 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800771a:	2301      	movs	r3, #1
 800771c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800771e:	f001 f9c5 	bl	8008aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007722:	f000 fb9b 	bl	8007e5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007726:	f001 f98f 	bl	8008a48 <vPortEnterCritical>
 800772a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800772c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007730:	b25b      	sxtb	r3, r3
 8007732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007736:	d103      	bne.n	8007740 <xQueueReceive+0x128>
 8007738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800773a:	2200      	movs	r2, #0
 800773c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007742:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007746:	b25b      	sxtb	r3, r3
 8007748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774c:	d103      	bne.n	8007756 <xQueueReceive+0x13e>
 800774e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007750:	2200      	movs	r2, #0
 8007752:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007756:	f001 f9a9 	bl	8008aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800775a:	1d3a      	adds	r2, r7, #4
 800775c:	f107 0310 	add.w	r3, r7, #16
 8007760:	4611      	mov	r1, r2
 8007762:	4618      	mov	r0, r3
 8007764:	f000 fdec 	bl	8008340 <xTaskCheckForTimeOut>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d123      	bne.n	80077b6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800776e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007770:	f000 f916 	bl	80079a0 <prvIsQueueEmpty>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d017      	beq.n	80077aa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800777a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800777c:	3324      	adds	r3, #36	@ 0x24
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	4611      	mov	r1, r2
 8007782:	4618      	mov	r0, r3
 8007784:	f000 fd3c 	bl	8008200 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007788:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800778a:	f000 f8b7 	bl	80078fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800778e:	f000 fb73 	bl	8007e78 <xTaskResumeAll>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d189      	bne.n	80076ac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007798:	4b0f      	ldr	r3, [pc, #60]	@ (80077d8 <xQueueReceive+0x1c0>)
 800779a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800779e:	601a      	str	r2, [r3, #0]
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	e780      	b.n	80076ac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80077aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077ac:	f000 f8a6 	bl	80078fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077b0:	f000 fb62 	bl	8007e78 <xTaskResumeAll>
 80077b4:	e77a      	b.n	80076ac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80077b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077b8:	f000 f8a0 	bl	80078fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077bc:	f000 fb5c 	bl	8007e78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077c2:	f000 f8ed 	bl	80079a0 <prvIsQueueEmpty>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f43f af6f 	beq.w	80076ac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80077ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3730      	adds	r7, #48	@ 0x30
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	e000ed04 	.word	0xe000ed04

080077dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80077e8:	2300      	movs	r3, #0
 80077ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10d      	bne.n	8007816 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d14d      	bne.n	800789e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	4618      	mov	r0, r3
 8007808:	f000 fefe 	bl	8008608 <xTaskPriorityDisinherit>
 800780c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	609a      	str	r2, [r3, #8]
 8007814:	e043      	b.n	800789e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d119      	bne.n	8007850 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6858      	ldr	r0, [r3, #4]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007824:	461a      	mov	r2, r3
 8007826:	68b9      	ldr	r1, [r7, #8]
 8007828:	f001 fc08 	bl	800903c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007834:	441a      	add	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	429a      	cmp	r2, r3
 8007844:	d32b      	bcc.n	800789e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	605a      	str	r2, [r3, #4]
 800784e:	e026      	b.n	800789e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	68d8      	ldr	r0, [r3, #12]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007858:	461a      	mov	r2, r3
 800785a:	68b9      	ldr	r1, [r7, #8]
 800785c:	f001 fbee 	bl	800903c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	68da      	ldr	r2, [r3, #12]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007868:	425b      	negs	r3, r3
 800786a:	441a      	add	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	68da      	ldr	r2, [r3, #12]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	429a      	cmp	r2, r3
 800787a:	d207      	bcs.n	800788c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	689a      	ldr	r2, [r3, #8]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007884:	425b      	negs	r3, r3
 8007886:	441a      	add	r2, r3
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b02      	cmp	r3, #2
 8007890:	d105      	bne.n	800789e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d002      	beq.n	800789e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	3b01      	subs	r3, #1
 800789c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	1c5a      	adds	r2, r3, #1
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80078a6:	697b      	ldr	r3, [r7, #20]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3718      	adds	r7, #24
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d018      	beq.n	80078f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	68da      	ldr	r2, [r3, #12]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ca:	441a      	add	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	68da      	ldr	r2, [r3, #12]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d303      	bcc.n	80078e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	68d9      	ldr	r1, [r3, #12]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ec:	461a      	mov	r2, r3
 80078ee:	6838      	ldr	r0, [r7, #0]
 80078f0:	f001 fba4 	bl	800903c <memcpy>
	}
}
 80078f4:	bf00      	nop
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007904:	f001 f8a0 	bl	8008a48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800790e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007910:	e011      	b.n	8007936 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007916:	2b00      	cmp	r3, #0
 8007918:	d012      	beq.n	8007940 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	3324      	adds	r3, #36	@ 0x24
 800791e:	4618      	mov	r0, r3
 8007920:	f000 fc94 	bl	800824c <xTaskRemoveFromEventList>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800792a:	f000 fd6d 	bl	8008408 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800792e:	7bfb      	ldrb	r3, [r7, #15]
 8007930:	3b01      	subs	r3, #1
 8007932:	b2db      	uxtb	r3, r3
 8007934:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800793a:	2b00      	cmp	r3, #0
 800793c:	dce9      	bgt.n	8007912 <prvUnlockQueue+0x16>
 800793e:	e000      	b.n	8007942 <prvUnlockQueue+0x46>
					break;
 8007940:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	22ff      	movs	r2, #255	@ 0xff
 8007946:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800794a:	f001 f8af 	bl	8008aac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800794e:	f001 f87b 	bl	8008a48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007958:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800795a:	e011      	b.n	8007980 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d012      	beq.n	800798a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	3310      	adds	r3, #16
 8007968:	4618      	mov	r0, r3
 800796a:	f000 fc6f 	bl	800824c <xTaskRemoveFromEventList>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d001      	beq.n	8007978 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007974:	f000 fd48 	bl	8008408 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007978:	7bbb      	ldrb	r3, [r7, #14]
 800797a:	3b01      	subs	r3, #1
 800797c:	b2db      	uxtb	r3, r3
 800797e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007984:	2b00      	cmp	r3, #0
 8007986:	dce9      	bgt.n	800795c <prvUnlockQueue+0x60>
 8007988:	e000      	b.n	800798c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800798a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	22ff      	movs	r2, #255	@ 0xff
 8007990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007994:	f001 f88a 	bl	8008aac <vPortExitCritical>
}
 8007998:	bf00      	nop
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079a8:	f001 f84e 	bl	8008a48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d102      	bne.n	80079ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80079b4:	2301      	movs	r3, #1
 80079b6:	60fb      	str	r3, [r7, #12]
 80079b8:	e001      	b.n	80079be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80079ba:	2300      	movs	r3, #0
 80079bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079be:	f001 f875 	bl	8008aac <vPortExitCritical>

	return xReturn;
 80079c2:	68fb      	ldr	r3, [r7, #12]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079d4:	f001 f838 	bl	8008a48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d102      	bne.n	80079ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80079e4:	2301      	movs	r3, #1
 80079e6:	60fb      	str	r3, [r7, #12]
 80079e8:	e001      	b.n	80079ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80079ea:	2300      	movs	r3, #0
 80079ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079ee:	f001 f85d 	bl	8008aac <vPortExitCritical>

	return xReturn;
 80079f2:	68fb      	ldr	r3, [r7, #12]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b08e      	sub	sp, #56	@ 0x38
 8007a00:	af04      	add	r7, sp, #16
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
 8007a08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10b      	bne.n	8007a28 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	623b      	str	r3, [r7, #32]
}
 8007a22:	bf00      	nop
 8007a24:	bf00      	nop
 8007a26:	e7fd      	b.n	8007a24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10b      	bne.n	8007a46 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	61fb      	str	r3, [r7, #28]
}
 8007a40:	bf00      	nop
 8007a42:	bf00      	nop
 8007a44:	e7fd      	b.n	8007a42 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a46:	2354      	movs	r3, #84	@ 0x54
 8007a48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	2b54      	cmp	r3, #84	@ 0x54
 8007a4e:	d00b      	beq.n	8007a68 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a54:	f383 8811 	msr	BASEPRI, r3
 8007a58:	f3bf 8f6f 	isb	sy
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	61bb      	str	r3, [r7, #24]
}
 8007a62:	bf00      	nop
 8007a64:	bf00      	nop
 8007a66:	e7fd      	b.n	8007a64 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007a68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d01e      	beq.n	8007aae <xTaskCreateStatic+0xb2>
 8007a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d01b      	beq.n	8007aae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a78:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a7e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a82:	2202      	movs	r2, #2
 8007a84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a88:	2300      	movs	r3, #0
 8007a8a:	9303      	str	r3, [sp, #12]
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a8e:	9302      	str	r3, [sp, #8]
 8007a90:	f107 0314 	add.w	r3, r7, #20
 8007a94:	9301      	str	r3, [sp, #4]
 8007a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	68b9      	ldr	r1, [r7, #8]
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f000 f850 	bl	8007b46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007aa6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007aa8:	f000 f8d6 	bl	8007c58 <prvAddNewTaskToReadyList>
 8007aac:	e001      	b.n	8007ab2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ab2:	697b      	ldr	r3, [r7, #20]
	}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3728      	adds	r7, #40	@ 0x28
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b08c      	sub	sp, #48	@ 0x30
 8007ac0:	af04      	add	r7, sp, #16
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	603b      	str	r3, [r7, #0]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007acc:	88fb      	ldrh	r3, [r7, #6]
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f001 f899 	bl	8008c08 <pvPortMalloc>
 8007ad6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00e      	beq.n	8007afc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ade:	2054      	movs	r0, #84	@ 0x54
 8007ae0:	f001 f892 	bl	8008c08 <pvPortMalloc>
 8007ae4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	631a      	str	r2, [r3, #48]	@ 0x30
 8007af2:	e005      	b.n	8007b00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007af4:	6978      	ldr	r0, [r7, #20]
 8007af6:	f001 f955 	bl	8008da4 <vPortFree>
 8007afa:	e001      	b.n	8007b00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007afc:	2300      	movs	r3, #0
 8007afe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d017      	beq.n	8007b36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b0e:	88fa      	ldrh	r2, [r7, #6]
 8007b10:	2300      	movs	r3, #0
 8007b12:	9303      	str	r3, [sp, #12]
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	9302      	str	r3, [sp, #8]
 8007b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b1a:	9301      	str	r3, [sp, #4]
 8007b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	68b9      	ldr	r1, [r7, #8]
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f000 f80e 	bl	8007b46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b2a:	69f8      	ldr	r0, [r7, #28]
 8007b2c:	f000 f894 	bl	8007c58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b30:	2301      	movs	r3, #1
 8007b32:	61bb      	str	r3, [r7, #24]
 8007b34:	e002      	b.n	8007b3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b36:	f04f 33ff 	mov.w	r3, #4294967295
 8007b3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b3c:	69bb      	ldr	r3, [r7, #24]
	}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3720      	adds	r7, #32
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b088      	sub	sp, #32
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	60f8      	str	r0, [r7, #12]
 8007b4e:	60b9      	str	r1, [r7, #8]
 8007b50:	607a      	str	r2, [r7, #4]
 8007b52:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	f023 0307 	bic.w	r3, r3, #7
 8007b6c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	f003 0307 	and.w	r3, r3, #7
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00b      	beq.n	8007b90 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b7c:	f383 8811 	msr	BASEPRI, r3
 8007b80:	f3bf 8f6f 	isb	sy
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	617b      	str	r3, [r7, #20]
}
 8007b8a:	bf00      	nop
 8007b8c:	bf00      	nop
 8007b8e:	e7fd      	b.n	8007b8c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d01f      	beq.n	8007bd6 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b96:	2300      	movs	r3, #0
 8007b98:	61fb      	str	r3, [r7, #28]
 8007b9a:	e012      	b.n	8007bc2 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	7819      	ldrb	r1, [r3, #0]
 8007ba4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	4413      	add	r3, r2
 8007baa:	3334      	adds	r3, #52	@ 0x34
 8007bac:	460a      	mov	r2, r1
 8007bae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d006      	beq.n	8007bca <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	61fb      	str	r3, [r7, #28]
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	2b0f      	cmp	r3, #15
 8007bc6:	d9e9      	bls.n	8007b9c <prvInitialiseNewTask+0x56>
 8007bc8:	e000      	b.n	8007bcc <prvInitialiseNewTask+0x86>
			{
				break;
 8007bca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007bd4:	e003      	b.n	8007bde <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be0:	2b06      	cmp	r3, #6
 8007be2:	d901      	bls.n	8007be8 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007be4:	2306      	movs	r3, #6
 8007be6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007bec:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007bf2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7ff faaf 	bl	8007162 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c06:	3318      	adds	r3, #24
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7ff faaa 	bl	8007162 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c16:	f1c3 0207 	rsb	r2, r3, #7
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c22:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c26:	2200      	movs	r2, #0
 8007c28:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007c32:	683a      	ldr	r2, [r7, #0]
 8007c34:	68f9      	ldr	r1, [r7, #12]
 8007c36:	69b8      	ldr	r0, [r7, #24]
 8007c38:	f000 fdd4 	bl	80087e4 <pxPortInitialiseStack>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c4e:	bf00      	nop
 8007c50:	3720      	adds	r7, #32
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c60:	f000 fef2 	bl	8008a48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c64:	4b2a      	ldr	r3, [pc, #168]	@ (8007d10 <prvAddNewTaskToReadyList+0xb8>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	4a29      	ldr	r2, [pc, #164]	@ (8007d10 <prvAddNewTaskToReadyList+0xb8>)
 8007c6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c6e:	4b29      	ldr	r3, [pc, #164]	@ (8007d14 <prvAddNewTaskToReadyList+0xbc>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d109      	bne.n	8007c8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c76:	4a27      	ldr	r2, [pc, #156]	@ (8007d14 <prvAddNewTaskToReadyList+0xbc>)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c7c:	4b24      	ldr	r3, [pc, #144]	@ (8007d10 <prvAddNewTaskToReadyList+0xb8>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d110      	bne.n	8007ca6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c84:	f000 fbe4 	bl	8008450 <prvInitialiseTaskLists>
 8007c88:	e00d      	b.n	8007ca6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c8a:	4b23      	ldr	r3, [pc, #140]	@ (8007d18 <prvAddNewTaskToReadyList+0xc0>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d109      	bne.n	8007ca6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c92:	4b20      	ldr	r3, [pc, #128]	@ (8007d14 <prvAddNewTaskToReadyList+0xbc>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d802      	bhi.n	8007ca6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ca0:	4a1c      	ldr	r2, [pc, #112]	@ (8007d14 <prvAddNewTaskToReadyList+0xbc>)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8007d1c <prvAddNewTaskToReadyList+0xc4>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3301      	adds	r3, #1
 8007cac:	4a1b      	ldr	r2, [pc, #108]	@ (8007d1c <prvAddNewTaskToReadyList+0xc4>)
 8007cae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	409a      	lsls	r2, r3
 8007cb8:	4b19      	ldr	r3, [pc, #100]	@ (8007d20 <prvAddNewTaskToReadyList+0xc8>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	4a18      	ldr	r2, [pc, #96]	@ (8007d20 <prvAddNewTaskToReadyList+0xc8>)
 8007cc0:	6013      	str	r3, [r2, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4413      	add	r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4a15      	ldr	r2, [pc, #84]	@ (8007d24 <prvAddNewTaskToReadyList+0xcc>)
 8007cd0:	441a      	add	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	4610      	mov	r0, r2
 8007cda:	f7ff fa4f 	bl	800717c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007cde:	f000 fee5 	bl	8008aac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d18 <prvAddNewTaskToReadyList+0xc0>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00e      	beq.n	8007d08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007cea:	4b0a      	ldr	r3, [pc, #40]	@ (8007d14 <prvAddNewTaskToReadyList+0xbc>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d207      	bcs.n	8007d08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8007d28 <prvAddNewTaskToReadyList+0xd0>)
 8007cfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d08:	bf00      	nop
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	20000a4c 	.word	0x20000a4c
 8007d14:	2000094c 	.word	0x2000094c
 8007d18:	20000a58 	.word	0x20000a58
 8007d1c:	20000a68 	.word	0x20000a68
 8007d20:	20000a54 	.word	0x20000a54
 8007d24:	20000950 	.word	0x20000950
 8007d28:	e000ed04 	.word	0xe000ed04

08007d2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007d34:	2300      	movs	r3, #0
 8007d36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d018      	beq.n	8007d70 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007d3e:	4b14      	ldr	r3, [pc, #80]	@ (8007d90 <vTaskDelay+0x64>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00b      	beq.n	8007d5e <vTaskDelay+0x32>
	__asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	60bb      	str	r3, [r7, #8]
}
 8007d58:	bf00      	nop
 8007d5a:	bf00      	nop
 8007d5c:	e7fd      	b.n	8007d5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007d5e:	f000 f87d 	bl	8007e5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d62:	2100      	movs	r1, #0
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fcd7 	bl	8008718 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d6a:	f000 f885 	bl	8007e78 <xTaskResumeAll>
 8007d6e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d107      	bne.n	8007d86 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007d76:	4b07      	ldr	r3, [pc, #28]	@ (8007d94 <vTaskDelay+0x68>)
 8007d78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d86:	bf00      	nop
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	20000a74 	.word	0x20000a74
 8007d94:	e000ed04 	.word	0xe000ed04

08007d98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b08a      	sub	sp, #40	@ 0x28
 8007d9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007da2:	2300      	movs	r3, #0
 8007da4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007da6:	463a      	mov	r2, r7
 8007da8:	1d39      	adds	r1, r7, #4
 8007daa:	f107 0308 	add.w	r3, r7, #8
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7f8 fb98 	bl	80004e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007db4:	6839      	ldr	r1, [r7, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	9202      	str	r2, [sp, #8]
 8007dbc:	9301      	str	r3, [sp, #4]
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	460a      	mov	r2, r1
 8007dc6:	491f      	ldr	r1, [pc, #124]	@ (8007e44 <vTaskStartScheduler+0xac>)
 8007dc8:	481f      	ldr	r0, [pc, #124]	@ (8007e48 <vTaskStartScheduler+0xb0>)
 8007dca:	f7ff fe17 	bl	80079fc <xTaskCreateStatic>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	4a1e      	ldr	r2, [pc, #120]	@ (8007e4c <vTaskStartScheduler+0xb4>)
 8007dd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8007e4c <vTaskStartScheduler+0xb4>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d002      	beq.n	8007de2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	617b      	str	r3, [r7, #20]
 8007de0:	e001      	b.n	8007de6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007de2:	2300      	movs	r3, #0
 8007de4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d116      	bne.n	8007e1a <vTaskStartScheduler+0x82>
	__asm volatile
 8007dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	613b      	str	r3, [r7, #16]
}
 8007dfe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007e00:	4b13      	ldr	r3, [pc, #76]	@ (8007e50 <vTaskStartScheduler+0xb8>)
 8007e02:	f04f 32ff 	mov.w	r2, #4294967295
 8007e06:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007e08:	4b12      	ldr	r3, [pc, #72]	@ (8007e54 <vTaskStartScheduler+0xbc>)
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007e0e:	4b12      	ldr	r3, [pc, #72]	@ (8007e58 <vTaskStartScheduler+0xc0>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007e14:	f000 fd74 	bl	8008900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007e18:	e00f      	b.n	8007e3a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e20:	d10b      	bne.n	8007e3a <vTaskStartScheduler+0xa2>
	__asm volatile
 8007e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e26:	f383 8811 	msr	BASEPRI, r3
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	60fb      	str	r3, [r7, #12]
}
 8007e34:	bf00      	nop
 8007e36:	bf00      	nop
 8007e38:	e7fd      	b.n	8007e36 <vTaskStartScheduler+0x9e>
}
 8007e3a:	bf00      	nop
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	08009168 	.word	0x08009168
 8007e48:	08008421 	.word	0x08008421
 8007e4c:	20000a70 	.word	0x20000a70
 8007e50:	20000a6c 	.word	0x20000a6c
 8007e54:	20000a58 	.word	0x20000a58
 8007e58:	20000a50 	.word	0x20000a50

08007e5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007e60:	4b04      	ldr	r3, [pc, #16]	@ (8007e74 <vTaskSuspendAll+0x18>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3301      	adds	r3, #1
 8007e66:	4a03      	ldr	r2, [pc, #12]	@ (8007e74 <vTaskSuspendAll+0x18>)
 8007e68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007e6a:	bf00      	nop
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr
 8007e74:	20000a74 	.word	0x20000a74

08007e78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e82:	2300      	movs	r3, #0
 8007e84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e86:	4b42      	ldr	r3, [pc, #264]	@ (8007f90 <xTaskResumeAll+0x118>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10b      	bne.n	8007ea6 <xTaskResumeAll+0x2e>
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	603b      	str	r3, [r7, #0]
}
 8007ea0:	bf00      	nop
 8007ea2:	bf00      	nop
 8007ea4:	e7fd      	b.n	8007ea2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007ea6:	f000 fdcf 	bl	8008a48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007eaa:	4b39      	ldr	r3, [pc, #228]	@ (8007f90 <xTaskResumeAll+0x118>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	4a37      	ldr	r2, [pc, #220]	@ (8007f90 <xTaskResumeAll+0x118>)
 8007eb2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007eb4:	4b36      	ldr	r3, [pc, #216]	@ (8007f90 <xTaskResumeAll+0x118>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d161      	bne.n	8007f80 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ebc:	4b35      	ldr	r3, [pc, #212]	@ (8007f94 <xTaskResumeAll+0x11c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d05d      	beq.n	8007f80 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ec4:	e02e      	b.n	8007f24 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ec6:	4b34      	ldr	r3, [pc, #208]	@ (8007f98 <xTaskResumeAll+0x120>)
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	3318      	adds	r3, #24
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7ff f9af 	bl	8007236 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	3304      	adds	r3, #4
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7ff f9aa 	bl	8007236 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	409a      	lsls	r2, r3
 8007eea:	4b2c      	ldr	r3, [pc, #176]	@ (8007f9c <xTaskResumeAll+0x124>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	4a2a      	ldr	r2, [pc, #168]	@ (8007f9c <xTaskResumeAll+0x124>)
 8007ef2:	6013      	str	r3, [r2, #0]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ef8:	4613      	mov	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4a27      	ldr	r2, [pc, #156]	@ (8007fa0 <xTaskResumeAll+0x128>)
 8007f02:	441a      	add	r2, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	3304      	adds	r3, #4
 8007f08:	4619      	mov	r1, r3
 8007f0a:	4610      	mov	r0, r2
 8007f0c:	f7ff f936 	bl	800717c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f14:	4b23      	ldr	r3, [pc, #140]	@ (8007fa4 <xTaskResumeAll+0x12c>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d302      	bcc.n	8007f24 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007f1e:	4b22      	ldr	r3, [pc, #136]	@ (8007fa8 <xTaskResumeAll+0x130>)
 8007f20:	2201      	movs	r2, #1
 8007f22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f24:	4b1c      	ldr	r3, [pc, #112]	@ (8007f98 <xTaskResumeAll+0x120>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1cc      	bne.n	8007ec6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d001      	beq.n	8007f36 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007f32:	f000 fb2b 	bl	800858c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007f36:	4b1d      	ldr	r3, [pc, #116]	@ (8007fac <xTaskResumeAll+0x134>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d010      	beq.n	8007f64 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f42:	f000 f847 	bl	8007fd4 <xTaskIncrementTick>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d002      	beq.n	8007f52 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007f4c:	4b16      	ldr	r3, [pc, #88]	@ (8007fa8 <xTaskResumeAll+0x130>)
 8007f4e:	2201      	movs	r2, #1
 8007f50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	3b01      	subs	r3, #1
 8007f56:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1f1      	bne.n	8007f42 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007f5e:	4b13      	ldr	r3, [pc, #76]	@ (8007fac <xTaskResumeAll+0x134>)
 8007f60:	2200      	movs	r2, #0
 8007f62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f64:	4b10      	ldr	r3, [pc, #64]	@ (8007fa8 <xTaskResumeAll+0x130>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d009      	beq.n	8007f80 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f70:	4b0f      	ldr	r3, [pc, #60]	@ (8007fb0 <xTaskResumeAll+0x138>)
 8007f72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f80:	f000 fd94 	bl	8008aac <vPortExitCritical>

	return xAlreadyYielded;
 8007f84:	68bb      	ldr	r3, [r7, #8]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	20000a74 	.word	0x20000a74
 8007f94:	20000a4c 	.word	0x20000a4c
 8007f98:	20000a0c 	.word	0x20000a0c
 8007f9c:	20000a54 	.word	0x20000a54
 8007fa0:	20000950 	.word	0x20000950
 8007fa4:	2000094c 	.word	0x2000094c
 8007fa8:	20000a60 	.word	0x20000a60
 8007fac:	20000a5c 	.word	0x20000a5c
 8007fb0:	e000ed04 	.word	0xe000ed04

08007fb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007fba:	4b05      	ldr	r3, [pc, #20]	@ (8007fd0 <xTaskGetTickCount+0x1c>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007fc0:	687b      	ldr	r3, [r7, #4]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	370c      	adds	r7, #12
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	20000a50 	.word	0x20000a50

08007fd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b086      	sub	sp, #24
 8007fd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fde:	4b4f      	ldr	r3, [pc, #316]	@ (800811c <xTaskIncrementTick+0x148>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	f040 808f 	bne.w	8008106 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007fe8:	4b4d      	ldr	r3, [pc, #308]	@ (8008120 <xTaskIncrementTick+0x14c>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	3301      	adds	r3, #1
 8007fee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ff0:	4a4b      	ldr	r2, [pc, #300]	@ (8008120 <xTaskIncrementTick+0x14c>)
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d121      	bne.n	8008040 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ffc:	4b49      	ldr	r3, [pc, #292]	@ (8008124 <xTaskIncrementTick+0x150>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00b      	beq.n	800801e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800800a:	f383 8811 	msr	BASEPRI, r3
 800800e:	f3bf 8f6f 	isb	sy
 8008012:	f3bf 8f4f 	dsb	sy
 8008016:	603b      	str	r3, [r7, #0]
}
 8008018:	bf00      	nop
 800801a:	bf00      	nop
 800801c:	e7fd      	b.n	800801a <xTaskIncrementTick+0x46>
 800801e:	4b41      	ldr	r3, [pc, #260]	@ (8008124 <xTaskIncrementTick+0x150>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	4b40      	ldr	r3, [pc, #256]	@ (8008128 <xTaskIncrementTick+0x154>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a3e      	ldr	r2, [pc, #248]	@ (8008124 <xTaskIncrementTick+0x150>)
 800802a:	6013      	str	r3, [r2, #0]
 800802c:	4a3e      	ldr	r2, [pc, #248]	@ (8008128 <xTaskIncrementTick+0x154>)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6013      	str	r3, [r2, #0]
 8008032:	4b3e      	ldr	r3, [pc, #248]	@ (800812c <xTaskIncrementTick+0x158>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3301      	adds	r3, #1
 8008038:	4a3c      	ldr	r2, [pc, #240]	@ (800812c <xTaskIncrementTick+0x158>)
 800803a:	6013      	str	r3, [r2, #0]
 800803c:	f000 faa6 	bl	800858c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008040:	4b3b      	ldr	r3, [pc, #236]	@ (8008130 <xTaskIncrementTick+0x15c>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	429a      	cmp	r2, r3
 8008048:	d348      	bcc.n	80080dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800804a:	4b36      	ldr	r3, [pc, #216]	@ (8008124 <xTaskIncrementTick+0x150>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d104      	bne.n	800805e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008054:	4b36      	ldr	r3, [pc, #216]	@ (8008130 <xTaskIncrementTick+0x15c>)
 8008056:	f04f 32ff 	mov.w	r2, #4294967295
 800805a:	601a      	str	r2, [r3, #0]
					break;
 800805c:	e03e      	b.n	80080dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800805e:	4b31      	ldr	r3, [pc, #196]	@ (8008124 <xTaskIncrementTick+0x150>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	429a      	cmp	r2, r3
 8008074:	d203      	bcs.n	800807e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008076:	4a2e      	ldr	r2, [pc, #184]	@ (8008130 <xTaskIncrementTick+0x15c>)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800807c:	e02e      	b.n	80080dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	3304      	adds	r3, #4
 8008082:	4618      	mov	r0, r3
 8008084:	f7ff f8d7 	bl	8007236 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800808c:	2b00      	cmp	r3, #0
 800808e:	d004      	beq.n	800809a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	3318      	adds	r3, #24
 8008094:	4618      	mov	r0, r3
 8008096:	f7ff f8ce 	bl	8007236 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800809e:	2201      	movs	r2, #1
 80080a0:	409a      	lsls	r2, r3
 80080a2:	4b24      	ldr	r3, [pc, #144]	@ (8008134 <xTaskIncrementTick+0x160>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	4a22      	ldr	r2, [pc, #136]	@ (8008134 <xTaskIncrementTick+0x160>)
 80080aa:	6013      	str	r3, [r2, #0]
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080b0:	4613      	mov	r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4413      	add	r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	4a1f      	ldr	r2, [pc, #124]	@ (8008138 <xTaskIncrementTick+0x164>)
 80080ba:	441a      	add	r2, r3
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	3304      	adds	r3, #4
 80080c0:	4619      	mov	r1, r3
 80080c2:	4610      	mov	r0, r2
 80080c4:	f7ff f85a 	bl	800717c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080cc:	4b1b      	ldr	r3, [pc, #108]	@ (800813c <xTaskIncrementTick+0x168>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d3b9      	bcc.n	800804a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80080d6:	2301      	movs	r3, #1
 80080d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080da:	e7b6      	b.n	800804a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80080dc:	4b17      	ldr	r3, [pc, #92]	@ (800813c <xTaskIncrementTick+0x168>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080e2:	4915      	ldr	r1, [pc, #84]	@ (8008138 <xTaskIncrementTick+0x164>)
 80080e4:	4613      	mov	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	440b      	add	r3, r1
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d901      	bls.n	80080f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80080f4:	2301      	movs	r3, #1
 80080f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80080f8:	4b11      	ldr	r3, [pc, #68]	@ (8008140 <xTaskIncrementTick+0x16c>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d007      	beq.n	8008110 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008100:	2301      	movs	r3, #1
 8008102:	617b      	str	r3, [r7, #20]
 8008104:	e004      	b.n	8008110 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008106:	4b0f      	ldr	r3, [pc, #60]	@ (8008144 <xTaskIncrementTick+0x170>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	3301      	adds	r3, #1
 800810c:	4a0d      	ldr	r2, [pc, #52]	@ (8008144 <xTaskIncrementTick+0x170>)
 800810e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008110:	697b      	ldr	r3, [r7, #20]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3718      	adds	r7, #24
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	20000a74 	.word	0x20000a74
 8008120:	20000a50 	.word	0x20000a50
 8008124:	20000a04 	.word	0x20000a04
 8008128:	20000a08 	.word	0x20000a08
 800812c:	20000a64 	.word	0x20000a64
 8008130:	20000a6c 	.word	0x20000a6c
 8008134:	20000a54 	.word	0x20000a54
 8008138:	20000950 	.word	0x20000950
 800813c:	2000094c 	.word	0x2000094c
 8008140:	20000a60 	.word	0x20000a60
 8008144:	20000a5c 	.word	0x20000a5c

08008148 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800814e:	4b27      	ldr	r3, [pc, #156]	@ (80081ec <vTaskSwitchContext+0xa4>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d003      	beq.n	800815e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008156:	4b26      	ldr	r3, [pc, #152]	@ (80081f0 <vTaskSwitchContext+0xa8>)
 8008158:	2201      	movs	r2, #1
 800815a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800815c:	e040      	b.n	80081e0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800815e:	4b24      	ldr	r3, [pc, #144]	@ (80081f0 <vTaskSwitchContext+0xa8>)
 8008160:	2200      	movs	r2, #0
 8008162:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008164:	4b23      	ldr	r3, [pc, #140]	@ (80081f4 <vTaskSwitchContext+0xac>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	fab3 f383 	clz	r3, r3
 8008170:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008172:	7afb      	ldrb	r3, [r7, #11]
 8008174:	f1c3 031f 	rsb	r3, r3, #31
 8008178:	617b      	str	r3, [r7, #20]
 800817a:	491f      	ldr	r1, [pc, #124]	@ (80081f8 <vTaskSwitchContext+0xb0>)
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	4613      	mov	r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4413      	add	r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	440b      	add	r3, r1
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10b      	bne.n	80081a6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	607b      	str	r3, [r7, #4]
}
 80081a0:	bf00      	nop
 80081a2:	bf00      	nop
 80081a4:	e7fd      	b.n	80081a2 <vTaskSwitchContext+0x5a>
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	4613      	mov	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4413      	add	r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	4a11      	ldr	r2, [pc, #68]	@ (80081f8 <vTaskSwitchContext+0xb0>)
 80081b2:	4413      	add	r3, r2
 80081b4:	613b      	str	r3, [r7, #16]
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	605a      	str	r2, [r3, #4]
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	685a      	ldr	r2, [r3, #4]
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	3308      	adds	r3, #8
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d104      	bne.n	80081d6 <vTaskSwitchContext+0x8e>
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	605a      	str	r2, [r3, #4]
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	4a07      	ldr	r2, [pc, #28]	@ (80081fc <vTaskSwitchContext+0xb4>)
 80081de:	6013      	str	r3, [r2, #0]
}
 80081e0:	bf00      	nop
 80081e2:	371c      	adds	r7, #28
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr
 80081ec:	20000a74 	.word	0x20000a74
 80081f0:	20000a60 	.word	0x20000a60
 80081f4:	20000a54 	.word	0x20000a54
 80081f8:	20000950 	.word	0x20000950
 80081fc:	2000094c 	.word	0x2000094c

08008200 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10b      	bne.n	8008228 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	60fb      	str	r3, [r7, #12]
}
 8008222:	bf00      	nop
 8008224:	bf00      	nop
 8008226:	e7fd      	b.n	8008224 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008228:	4b07      	ldr	r3, [pc, #28]	@ (8008248 <vTaskPlaceOnEventList+0x48>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3318      	adds	r3, #24
 800822e:	4619      	mov	r1, r3
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f7fe ffc7 	bl	80071c4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008236:	2101      	movs	r1, #1
 8008238:	6838      	ldr	r0, [r7, #0]
 800823a:	f000 fa6d 	bl	8008718 <prvAddCurrentTaskToDelayedList>
}
 800823e:	bf00      	nop
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	2000094c 	.word	0x2000094c

0800824c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d10b      	bne.n	800827a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008266:	f383 8811 	msr	BASEPRI, r3
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	60fb      	str	r3, [r7, #12]
}
 8008274:	bf00      	nop
 8008276:	bf00      	nop
 8008278:	e7fd      	b.n	8008276 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	3318      	adds	r3, #24
 800827e:	4618      	mov	r0, r3
 8008280:	f7fe ffd9 	bl	8007236 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008284:	4b1d      	ldr	r3, [pc, #116]	@ (80082fc <xTaskRemoveFromEventList+0xb0>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d11c      	bne.n	80082c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	3304      	adds	r3, #4
 8008290:	4618      	mov	r0, r3
 8008292:	f7fe ffd0 	bl	8007236 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800829a:	2201      	movs	r2, #1
 800829c:	409a      	lsls	r2, r3
 800829e:	4b18      	ldr	r3, [pc, #96]	@ (8008300 <xTaskRemoveFromEventList+0xb4>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	4a16      	ldr	r2, [pc, #88]	@ (8008300 <xTaskRemoveFromEventList+0xb4>)
 80082a6:	6013      	str	r3, [r2, #0]
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ac:	4613      	mov	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4413      	add	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4a13      	ldr	r2, [pc, #76]	@ (8008304 <xTaskRemoveFromEventList+0xb8>)
 80082b6:	441a      	add	r2, r3
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	3304      	adds	r3, #4
 80082bc:	4619      	mov	r1, r3
 80082be:	4610      	mov	r0, r2
 80082c0:	f7fe ff5c 	bl	800717c <vListInsertEnd>
 80082c4:	e005      	b.n	80082d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	3318      	adds	r3, #24
 80082ca:	4619      	mov	r1, r3
 80082cc:	480e      	ldr	r0, [pc, #56]	@ (8008308 <xTaskRemoveFromEventList+0xbc>)
 80082ce:	f7fe ff55 	bl	800717c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082d6:	4b0d      	ldr	r3, [pc, #52]	@ (800830c <xTaskRemoveFromEventList+0xc0>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082dc:	429a      	cmp	r2, r3
 80082de:	d905      	bls.n	80082ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80082e0:	2301      	movs	r3, #1
 80082e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80082e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008310 <xTaskRemoveFromEventList+0xc4>)
 80082e6:	2201      	movs	r2, #1
 80082e8:	601a      	str	r2, [r3, #0]
 80082ea:	e001      	b.n	80082f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80082ec:	2300      	movs	r3, #0
 80082ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80082f0:	697b      	ldr	r3, [r7, #20]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3718      	adds	r7, #24
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	20000a74 	.word	0x20000a74
 8008300:	20000a54 	.word	0x20000a54
 8008304:	20000950 	.word	0x20000950
 8008308:	20000a0c 	.word	0x20000a0c
 800830c:	2000094c 	.word	0x2000094c
 8008310:	20000a60 	.word	0x20000a60

08008314 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800831c:	4b06      	ldr	r3, [pc, #24]	@ (8008338 <vTaskInternalSetTimeOutState+0x24>)
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008324:	4b05      	ldr	r3, [pc, #20]	@ (800833c <vTaskInternalSetTimeOutState+0x28>)
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	605a      	str	r2, [r3, #4]
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr
 8008338:	20000a64 	.word	0x20000a64
 800833c:	20000a50 	.word	0x20000a50

08008340 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b088      	sub	sp, #32
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10b      	bne.n	8008368 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	613b      	str	r3, [r7, #16]
}
 8008362:	bf00      	nop
 8008364:	bf00      	nop
 8008366:	e7fd      	b.n	8008364 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10b      	bne.n	8008386 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	60fb      	str	r3, [r7, #12]
}
 8008380:	bf00      	nop
 8008382:	bf00      	nop
 8008384:	e7fd      	b.n	8008382 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008386:	f000 fb5f 	bl	8008a48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800838a:	4b1d      	ldr	r3, [pc, #116]	@ (8008400 <xTaskCheckForTimeOut+0xc0>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	69ba      	ldr	r2, [r7, #24]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a2:	d102      	bne.n	80083aa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80083a4:	2300      	movs	r3, #0
 80083a6:	61fb      	str	r3, [r7, #28]
 80083a8:	e023      	b.n	80083f2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	4b15      	ldr	r3, [pc, #84]	@ (8008404 <xTaskCheckForTimeOut+0xc4>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d007      	beq.n	80083c6 <xTaskCheckForTimeOut+0x86>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	69ba      	ldr	r2, [r7, #24]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d302      	bcc.n	80083c6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80083c0:	2301      	movs	r3, #1
 80083c2:	61fb      	str	r3, [r7, #28]
 80083c4:	e015      	b.n	80083f2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	697a      	ldr	r2, [r7, #20]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d20b      	bcs.n	80083e8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	1ad2      	subs	r2, r2, r3
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f7ff ff99 	bl	8008314 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80083e2:	2300      	movs	r3, #0
 80083e4:	61fb      	str	r3, [r7, #28]
 80083e6:	e004      	b.n	80083f2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	2200      	movs	r2, #0
 80083ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80083ee:	2301      	movs	r3, #1
 80083f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80083f2:	f000 fb5b 	bl	8008aac <vPortExitCritical>

	return xReturn;
 80083f6:	69fb      	ldr	r3, [r7, #28]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3720      	adds	r7, #32
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	20000a50 	.word	0x20000a50
 8008404:	20000a64 	.word	0x20000a64

08008408 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008408:	b480      	push	{r7}
 800840a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800840c:	4b03      	ldr	r3, [pc, #12]	@ (800841c <vTaskMissedYield+0x14>)
 800840e:	2201      	movs	r2, #1
 8008410:	601a      	str	r2, [r3, #0]
}
 8008412:	bf00      	nop
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr
 800841c:	20000a60 	.word	0x20000a60

08008420 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008428:	f000 f852 	bl	80084d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800842c:	4b06      	ldr	r3, [pc, #24]	@ (8008448 <prvIdleTask+0x28>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d9f9      	bls.n	8008428 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008434:	4b05      	ldr	r3, [pc, #20]	@ (800844c <prvIdleTask+0x2c>)
 8008436:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800843a:	601a      	str	r2, [r3, #0]
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008444:	e7f0      	b.n	8008428 <prvIdleTask+0x8>
 8008446:	bf00      	nop
 8008448:	20000950 	.word	0x20000950
 800844c:	e000ed04 	.word	0xe000ed04

08008450 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008456:	2300      	movs	r3, #0
 8008458:	607b      	str	r3, [r7, #4]
 800845a:	e00c      	b.n	8008476 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	4613      	mov	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4a12      	ldr	r2, [pc, #72]	@ (80084b0 <prvInitialiseTaskLists+0x60>)
 8008468:	4413      	add	r3, r2
 800846a:	4618      	mov	r0, r3
 800846c:	f7fe fe59 	bl	8007122 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	3301      	adds	r3, #1
 8008474:	607b      	str	r3, [r7, #4]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2b06      	cmp	r3, #6
 800847a:	d9ef      	bls.n	800845c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800847c:	480d      	ldr	r0, [pc, #52]	@ (80084b4 <prvInitialiseTaskLists+0x64>)
 800847e:	f7fe fe50 	bl	8007122 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008482:	480d      	ldr	r0, [pc, #52]	@ (80084b8 <prvInitialiseTaskLists+0x68>)
 8008484:	f7fe fe4d 	bl	8007122 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008488:	480c      	ldr	r0, [pc, #48]	@ (80084bc <prvInitialiseTaskLists+0x6c>)
 800848a:	f7fe fe4a 	bl	8007122 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800848e:	480c      	ldr	r0, [pc, #48]	@ (80084c0 <prvInitialiseTaskLists+0x70>)
 8008490:	f7fe fe47 	bl	8007122 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008494:	480b      	ldr	r0, [pc, #44]	@ (80084c4 <prvInitialiseTaskLists+0x74>)
 8008496:	f7fe fe44 	bl	8007122 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800849a:	4b0b      	ldr	r3, [pc, #44]	@ (80084c8 <prvInitialiseTaskLists+0x78>)
 800849c:	4a05      	ldr	r2, [pc, #20]	@ (80084b4 <prvInitialiseTaskLists+0x64>)
 800849e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80084a0:	4b0a      	ldr	r3, [pc, #40]	@ (80084cc <prvInitialiseTaskLists+0x7c>)
 80084a2:	4a05      	ldr	r2, [pc, #20]	@ (80084b8 <prvInitialiseTaskLists+0x68>)
 80084a4:	601a      	str	r2, [r3, #0]
}
 80084a6:	bf00      	nop
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	20000950 	.word	0x20000950
 80084b4:	200009dc 	.word	0x200009dc
 80084b8:	200009f0 	.word	0x200009f0
 80084bc:	20000a0c 	.word	0x20000a0c
 80084c0:	20000a20 	.word	0x20000a20
 80084c4:	20000a38 	.word	0x20000a38
 80084c8:	20000a04 	.word	0x20000a04
 80084cc:	20000a08 	.word	0x20000a08

080084d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084d6:	e019      	b.n	800850c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80084d8:	f000 fab6 	bl	8008a48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084dc:	4b10      	ldr	r3, [pc, #64]	@ (8008520 <prvCheckTasksWaitingTermination+0x50>)
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	3304      	adds	r3, #4
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fe fea4 	bl	8007236 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80084ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008524 <prvCheckTasksWaitingTermination+0x54>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	3b01      	subs	r3, #1
 80084f4:	4a0b      	ldr	r2, [pc, #44]	@ (8008524 <prvCheckTasksWaitingTermination+0x54>)
 80084f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80084f8:	4b0b      	ldr	r3, [pc, #44]	@ (8008528 <prvCheckTasksWaitingTermination+0x58>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	3b01      	subs	r3, #1
 80084fe:	4a0a      	ldr	r2, [pc, #40]	@ (8008528 <prvCheckTasksWaitingTermination+0x58>)
 8008500:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008502:	f000 fad3 	bl	8008aac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f810 	bl	800852c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800850c:	4b06      	ldr	r3, [pc, #24]	@ (8008528 <prvCheckTasksWaitingTermination+0x58>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1e1      	bne.n	80084d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008514:	bf00      	nop
 8008516:	bf00      	nop
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	20000a20 	.word	0x20000a20
 8008524:	20000a4c 	.word	0x20000a4c
 8008528:	20000a34 	.word	0x20000a34

0800852c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800853a:	2b00      	cmp	r3, #0
 800853c:	d108      	bne.n	8008550 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008542:	4618      	mov	r0, r3
 8008544:	f000 fc2e 	bl	8008da4 <vPortFree>
				vPortFree( pxTCB );
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fc2b 	bl	8008da4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800854e:	e019      	b.n	8008584 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008556:	2b01      	cmp	r3, #1
 8008558:	d103      	bne.n	8008562 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fc22 	bl	8008da4 <vPortFree>
	}
 8008560:	e010      	b.n	8008584 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008568:	2b02      	cmp	r3, #2
 800856a:	d00b      	beq.n	8008584 <prvDeleteTCB+0x58>
	__asm volatile
 800856c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008570:	f383 8811 	msr	BASEPRI, r3
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	60fb      	str	r3, [r7, #12]
}
 800857e:	bf00      	nop
 8008580:	bf00      	nop
 8008582:	e7fd      	b.n	8008580 <prvDeleteTCB+0x54>
	}
 8008584:	bf00      	nop
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008592:	4b0c      	ldr	r3, [pc, #48]	@ (80085c4 <prvResetNextTaskUnblockTime+0x38>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d104      	bne.n	80085a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800859c:	4b0a      	ldr	r3, [pc, #40]	@ (80085c8 <prvResetNextTaskUnblockTime+0x3c>)
 800859e:	f04f 32ff 	mov.w	r2, #4294967295
 80085a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80085a4:	e008      	b.n	80085b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085a6:	4b07      	ldr	r3, [pc, #28]	@ (80085c4 <prvResetNextTaskUnblockTime+0x38>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	4a04      	ldr	r2, [pc, #16]	@ (80085c8 <prvResetNextTaskUnblockTime+0x3c>)
 80085b6:	6013      	str	r3, [r2, #0]
}
 80085b8:	bf00      	nop
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr
 80085c4:	20000a04 	.word	0x20000a04
 80085c8:	20000a6c 	.word	0x20000a6c

080085cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80085d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008600 <xTaskGetSchedulerState+0x34>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d102      	bne.n	80085e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80085da:	2301      	movs	r3, #1
 80085dc:	607b      	str	r3, [r7, #4]
 80085de:	e008      	b.n	80085f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085e0:	4b08      	ldr	r3, [pc, #32]	@ (8008604 <xTaskGetSchedulerState+0x38>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d102      	bne.n	80085ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80085e8:	2302      	movs	r3, #2
 80085ea:	607b      	str	r3, [r7, #4]
 80085ec:	e001      	b.n	80085f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80085ee:	2300      	movs	r3, #0
 80085f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80085f2:	687b      	ldr	r3, [r7, #4]
	}
 80085f4:	4618      	mov	r0, r3
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	20000a58 	.word	0x20000a58
 8008604:	20000a74 	.word	0x20000a74

08008608 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008614:	2300      	movs	r3, #0
 8008616:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d070      	beq.n	8008700 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800861e:	4b3b      	ldr	r3, [pc, #236]	@ (800870c <xTaskPriorityDisinherit+0x104>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	693a      	ldr	r2, [r7, #16]
 8008624:	429a      	cmp	r2, r3
 8008626:	d00b      	beq.n	8008640 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800862c:	f383 8811 	msr	BASEPRI, r3
 8008630:	f3bf 8f6f 	isb	sy
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	60fb      	str	r3, [r7, #12]
}
 800863a:	bf00      	nop
 800863c:	bf00      	nop
 800863e:	e7fd      	b.n	800863c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008644:	2b00      	cmp	r3, #0
 8008646:	d10b      	bne.n	8008660 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800864c:	f383 8811 	msr	BASEPRI, r3
 8008650:	f3bf 8f6f 	isb	sy
 8008654:	f3bf 8f4f 	dsb	sy
 8008658:	60bb      	str	r3, [r7, #8]
}
 800865a:	bf00      	nop
 800865c:	bf00      	nop
 800865e:	e7fd      	b.n	800865c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008664:	1e5a      	subs	r2, r3, #1
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008672:	429a      	cmp	r2, r3
 8008674:	d044      	beq.n	8008700 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800867a:	2b00      	cmp	r3, #0
 800867c:	d140      	bne.n	8008700 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	3304      	adds	r3, #4
 8008682:	4618      	mov	r0, r3
 8008684:	f7fe fdd7 	bl	8007236 <uxListRemove>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d115      	bne.n	80086ba <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008692:	491f      	ldr	r1, [pc, #124]	@ (8008710 <xTaskPriorityDisinherit+0x108>)
 8008694:	4613      	mov	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	4413      	add	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	440b      	add	r3, r1
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10a      	bne.n	80086ba <xTaskPriorityDisinherit+0xb2>
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a8:	2201      	movs	r2, #1
 80086aa:	fa02 f303 	lsl.w	r3, r2, r3
 80086ae:	43da      	mvns	r2, r3
 80086b0:	4b18      	ldr	r3, [pc, #96]	@ (8008714 <xTaskPriorityDisinherit+0x10c>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4013      	ands	r3, r2
 80086b6:	4a17      	ldr	r2, [pc, #92]	@ (8008714 <xTaskPriorityDisinherit+0x10c>)
 80086b8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086c6:	f1c3 0207 	rsb	r2, r3, #7
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086d2:	2201      	movs	r2, #1
 80086d4:	409a      	lsls	r2, r3
 80086d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008714 <xTaskPriorityDisinherit+0x10c>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4313      	orrs	r3, r2
 80086dc:	4a0d      	ldr	r2, [pc, #52]	@ (8008714 <xTaskPriorityDisinherit+0x10c>)
 80086de:	6013      	str	r3, [r2, #0]
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086e4:	4613      	mov	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4413      	add	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4a08      	ldr	r2, [pc, #32]	@ (8008710 <xTaskPriorityDisinherit+0x108>)
 80086ee:	441a      	add	r2, r3
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	3304      	adds	r3, #4
 80086f4:	4619      	mov	r1, r3
 80086f6:	4610      	mov	r0, r2
 80086f8:	f7fe fd40 	bl	800717c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80086fc:	2301      	movs	r3, #1
 80086fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008700:	697b      	ldr	r3, [r7, #20]
	}
 8008702:	4618      	mov	r0, r3
 8008704:	3718      	adds	r7, #24
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	2000094c 	.word	0x2000094c
 8008710:	20000950 	.word	0x20000950
 8008714:	20000a54 	.word	0x20000a54

08008718 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008722:	4b29      	ldr	r3, [pc, #164]	@ (80087c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008728:	4b28      	ldr	r3, [pc, #160]	@ (80087cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	3304      	adds	r3, #4
 800872e:	4618      	mov	r0, r3
 8008730:	f7fe fd81 	bl	8007236 <uxListRemove>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10b      	bne.n	8008752 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800873a:	4b24      	ldr	r3, [pc, #144]	@ (80087cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008740:	2201      	movs	r2, #1
 8008742:	fa02 f303 	lsl.w	r3, r2, r3
 8008746:	43da      	mvns	r2, r3
 8008748:	4b21      	ldr	r3, [pc, #132]	@ (80087d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4013      	ands	r3, r2
 800874e:	4a20      	ldr	r2, [pc, #128]	@ (80087d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008750:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008758:	d10a      	bne.n	8008770 <prvAddCurrentTaskToDelayedList+0x58>
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d007      	beq.n	8008770 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008760:	4b1a      	ldr	r3, [pc, #104]	@ (80087cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	3304      	adds	r3, #4
 8008766:	4619      	mov	r1, r3
 8008768:	481a      	ldr	r0, [pc, #104]	@ (80087d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800876a:	f7fe fd07 	bl	800717c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800876e:	e026      	b.n	80087be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4413      	add	r3, r2
 8008776:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008778:	4b14      	ldr	r3, [pc, #80]	@ (80087cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	429a      	cmp	r2, r3
 8008786:	d209      	bcs.n	800879c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008788:	4b13      	ldr	r3, [pc, #76]	@ (80087d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	4b0f      	ldr	r3, [pc, #60]	@ (80087cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	3304      	adds	r3, #4
 8008792:	4619      	mov	r1, r3
 8008794:	4610      	mov	r0, r2
 8008796:	f7fe fd15 	bl	80071c4 <vListInsert>
}
 800879a:	e010      	b.n	80087be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800879c:	4b0f      	ldr	r3, [pc, #60]	@ (80087dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	4b0a      	ldr	r3, [pc, #40]	@ (80087cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	3304      	adds	r3, #4
 80087a6:	4619      	mov	r1, r3
 80087a8:	4610      	mov	r0, r2
 80087aa:	f7fe fd0b 	bl	80071c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80087ae:	4b0c      	ldr	r3, [pc, #48]	@ (80087e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d202      	bcs.n	80087be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80087b8:	4a09      	ldr	r2, [pc, #36]	@ (80087e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	6013      	str	r3, [r2, #0]
}
 80087be:	bf00      	nop
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	20000a50 	.word	0x20000a50
 80087cc:	2000094c 	.word	0x2000094c
 80087d0:	20000a54 	.word	0x20000a54
 80087d4:	20000a38 	.word	0x20000a38
 80087d8:	20000a08 	.word	0x20000a08
 80087dc:	20000a04 	.word	0x20000a04
 80087e0:	20000a6c 	.word	0x20000a6c

080087e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	3b04      	subs	r3, #4
 80087f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80087fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	3b04      	subs	r3, #4
 8008802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	f023 0201 	bic.w	r2, r3, #1
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	3b04      	subs	r3, #4
 8008812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008814:	4a0c      	ldr	r2, [pc, #48]	@ (8008848 <pxPortInitialiseStack+0x64>)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	3b14      	subs	r3, #20
 800881e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	3b04      	subs	r3, #4
 800882a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f06f 0202 	mvn.w	r2, #2
 8008832:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	3b20      	subs	r3, #32
 8008838:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800883a:	68fb      	ldr	r3, [r7, #12]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr
 8008848:	0800884d 	.word	0x0800884d

0800884c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008852:	2300      	movs	r3, #0
 8008854:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008856:	4b13      	ldr	r3, [pc, #76]	@ (80088a4 <prvTaskExitError+0x58>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885e:	d00b      	beq.n	8008878 <prvTaskExitError+0x2c>
	__asm volatile
 8008860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008864:	f383 8811 	msr	BASEPRI, r3
 8008868:	f3bf 8f6f 	isb	sy
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	60fb      	str	r3, [r7, #12]
}
 8008872:	bf00      	nop
 8008874:	bf00      	nop
 8008876:	e7fd      	b.n	8008874 <prvTaskExitError+0x28>
	__asm volatile
 8008878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887c:	f383 8811 	msr	BASEPRI, r3
 8008880:	f3bf 8f6f 	isb	sy
 8008884:	f3bf 8f4f 	dsb	sy
 8008888:	60bb      	str	r3, [r7, #8]
}
 800888a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800888c:	bf00      	nop
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d0fc      	beq.n	800888e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008894:	bf00      	nop
 8008896:	bf00      	nop
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	20000040 	.word	0x20000040
	...

080088b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80088b0:	4b07      	ldr	r3, [pc, #28]	@ (80088d0 <pxCurrentTCBConst2>)
 80088b2:	6819      	ldr	r1, [r3, #0]
 80088b4:	6808      	ldr	r0, [r1, #0]
 80088b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ba:	f380 8809 	msr	PSP, r0
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	f04f 0000 	mov.w	r0, #0
 80088c6:	f380 8811 	msr	BASEPRI, r0
 80088ca:	4770      	bx	lr
 80088cc:	f3af 8000 	nop.w

080088d0 <pxCurrentTCBConst2>:
 80088d0:	2000094c 	.word	0x2000094c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop

080088d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80088d8:	4808      	ldr	r0, [pc, #32]	@ (80088fc <prvPortStartFirstTask+0x24>)
 80088da:	6800      	ldr	r0, [r0, #0]
 80088dc:	6800      	ldr	r0, [r0, #0]
 80088de:	f380 8808 	msr	MSP, r0
 80088e2:	f04f 0000 	mov.w	r0, #0
 80088e6:	f380 8814 	msr	CONTROL, r0
 80088ea:	b662      	cpsie	i
 80088ec:	b661      	cpsie	f
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	f3bf 8f6f 	isb	sy
 80088f6:	df00      	svc	0
 80088f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80088fa:	bf00      	nop
 80088fc:	e000ed08 	.word	0xe000ed08

08008900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b086      	sub	sp, #24
 8008904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008906:	4b47      	ldr	r3, [pc, #284]	@ (8008a24 <xPortStartScheduler+0x124>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a47      	ldr	r2, [pc, #284]	@ (8008a28 <xPortStartScheduler+0x128>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d10b      	bne.n	8008928 <xPortStartScheduler+0x28>
	__asm volatile
 8008910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	613b      	str	r3, [r7, #16]
}
 8008922:	bf00      	nop
 8008924:	bf00      	nop
 8008926:	e7fd      	b.n	8008924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008928:	4b3e      	ldr	r3, [pc, #248]	@ (8008a24 <xPortStartScheduler+0x124>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a3f      	ldr	r2, [pc, #252]	@ (8008a2c <xPortStartScheduler+0x12c>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d10b      	bne.n	800894a <xPortStartScheduler+0x4a>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	60fb      	str	r3, [r7, #12]
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop
 8008948:	e7fd      	b.n	8008946 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800894a:	4b39      	ldr	r3, [pc, #228]	@ (8008a30 <xPortStartScheduler+0x130>)
 800894c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	b2db      	uxtb	r3, r3
 8008954:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	22ff      	movs	r2, #255	@ 0xff
 800895a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	b2db      	uxtb	r3, r3
 8008962:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008964:	78fb      	ldrb	r3, [r7, #3]
 8008966:	b2db      	uxtb	r3, r3
 8008968:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800896c:	b2da      	uxtb	r2, r3
 800896e:	4b31      	ldr	r3, [pc, #196]	@ (8008a34 <xPortStartScheduler+0x134>)
 8008970:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008972:	4b31      	ldr	r3, [pc, #196]	@ (8008a38 <xPortStartScheduler+0x138>)
 8008974:	2207      	movs	r2, #7
 8008976:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008978:	e009      	b.n	800898e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800897a:	4b2f      	ldr	r3, [pc, #188]	@ (8008a38 <xPortStartScheduler+0x138>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	3b01      	subs	r3, #1
 8008980:	4a2d      	ldr	r2, [pc, #180]	@ (8008a38 <xPortStartScheduler+0x138>)
 8008982:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008984:	78fb      	ldrb	r3, [r7, #3]
 8008986:	b2db      	uxtb	r3, r3
 8008988:	005b      	lsls	r3, r3, #1
 800898a:	b2db      	uxtb	r3, r3
 800898c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800898e:	78fb      	ldrb	r3, [r7, #3]
 8008990:	b2db      	uxtb	r3, r3
 8008992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008996:	2b80      	cmp	r3, #128	@ 0x80
 8008998:	d0ef      	beq.n	800897a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800899a:	4b27      	ldr	r3, [pc, #156]	@ (8008a38 <xPortStartScheduler+0x138>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f1c3 0307 	rsb	r3, r3, #7
 80089a2:	2b04      	cmp	r3, #4
 80089a4:	d00b      	beq.n	80089be <xPortStartScheduler+0xbe>
	__asm volatile
 80089a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089aa:	f383 8811 	msr	BASEPRI, r3
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	f3bf 8f4f 	dsb	sy
 80089b6:	60bb      	str	r3, [r7, #8]
}
 80089b8:	bf00      	nop
 80089ba:	bf00      	nop
 80089bc:	e7fd      	b.n	80089ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80089be:	4b1e      	ldr	r3, [pc, #120]	@ (8008a38 <xPortStartScheduler+0x138>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	021b      	lsls	r3, r3, #8
 80089c4:	4a1c      	ldr	r2, [pc, #112]	@ (8008a38 <xPortStartScheduler+0x138>)
 80089c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80089c8:	4b1b      	ldr	r3, [pc, #108]	@ (8008a38 <xPortStartScheduler+0x138>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80089d0:	4a19      	ldr	r2, [pc, #100]	@ (8008a38 <xPortStartScheduler+0x138>)
 80089d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	b2da      	uxtb	r2, r3
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80089dc:	4b17      	ldr	r3, [pc, #92]	@ (8008a3c <xPortStartScheduler+0x13c>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a16      	ldr	r2, [pc, #88]	@ (8008a3c <xPortStartScheduler+0x13c>)
 80089e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80089e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80089e8:	4b14      	ldr	r3, [pc, #80]	@ (8008a3c <xPortStartScheduler+0x13c>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a13      	ldr	r2, [pc, #76]	@ (8008a3c <xPortStartScheduler+0x13c>)
 80089ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80089f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80089f4:	f000 f8da 	bl	8008bac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80089f8:	4b11      	ldr	r3, [pc, #68]	@ (8008a40 <xPortStartScheduler+0x140>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80089fe:	f000 f8f9 	bl	8008bf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a02:	4b10      	ldr	r3, [pc, #64]	@ (8008a44 <xPortStartScheduler+0x144>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a0f      	ldr	r2, [pc, #60]	@ (8008a44 <xPortStartScheduler+0x144>)
 8008a08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008a0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a0e:	f7ff ff63 	bl	80088d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a12:	f7ff fb99 	bl	8008148 <vTaskSwitchContext>
	prvTaskExitError();
 8008a16:	f7ff ff19 	bl	800884c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3718      	adds	r7, #24
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	e000ed00 	.word	0xe000ed00
 8008a28:	410fc271 	.word	0x410fc271
 8008a2c:	410fc270 	.word	0x410fc270
 8008a30:	e000e400 	.word	0xe000e400
 8008a34:	20000a78 	.word	0x20000a78
 8008a38:	20000a7c 	.word	0x20000a7c
 8008a3c:	e000ed20 	.word	0xe000ed20
 8008a40:	20000040 	.word	0x20000040
 8008a44:	e000ef34 	.word	0xe000ef34

08008a48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a52:	f383 8811 	msr	BASEPRI, r3
 8008a56:	f3bf 8f6f 	isb	sy
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	607b      	str	r3, [r7, #4]
}
 8008a60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a62:	4b10      	ldr	r3, [pc, #64]	@ (8008aa4 <vPortEnterCritical+0x5c>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3301      	adds	r3, #1
 8008a68:	4a0e      	ldr	r2, [pc, #56]	@ (8008aa4 <vPortEnterCritical+0x5c>)
 8008a6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8008aa4 <vPortEnterCritical+0x5c>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d110      	bne.n	8008a96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a74:	4b0c      	ldr	r3, [pc, #48]	@ (8008aa8 <vPortEnterCritical+0x60>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00b      	beq.n	8008a96 <vPortEnterCritical+0x4e>
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	603b      	str	r3, [r7, #0]
}
 8008a90:	bf00      	nop
 8008a92:	bf00      	nop
 8008a94:	e7fd      	b.n	8008a92 <vPortEnterCritical+0x4a>
	}
}
 8008a96:	bf00      	nop
 8008a98:	370c      	adds	r7, #12
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	20000040 	.word	0x20000040
 8008aa8:	e000ed04 	.word	0xe000ed04

08008aac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008ab2:	4b12      	ldr	r3, [pc, #72]	@ (8008afc <vPortExitCritical+0x50>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10b      	bne.n	8008ad2 <vPortExitCritical+0x26>
	__asm volatile
 8008aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	607b      	str	r3, [r7, #4]
}
 8008acc:	bf00      	nop
 8008ace:	bf00      	nop
 8008ad0:	e7fd      	b.n	8008ace <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8008afc <vPortExitCritical+0x50>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	4a08      	ldr	r2, [pc, #32]	@ (8008afc <vPortExitCritical+0x50>)
 8008ada:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008adc:	4b07      	ldr	r3, [pc, #28]	@ (8008afc <vPortExitCritical+0x50>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d105      	bne.n	8008af0 <vPortExitCritical+0x44>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008aee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	20000040 	.word	0x20000040

08008b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b00:	f3ef 8009 	mrs	r0, PSP
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	4b15      	ldr	r3, [pc, #84]	@ (8008b60 <pxCurrentTCBConst>)
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	f01e 0f10 	tst.w	lr, #16
 8008b10:	bf08      	it	eq
 8008b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b1a:	6010      	str	r0, [r2, #0]
 8008b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008b24:	f380 8811 	msr	BASEPRI, r0
 8008b28:	f3bf 8f4f 	dsb	sy
 8008b2c:	f3bf 8f6f 	isb	sy
 8008b30:	f7ff fb0a 	bl	8008148 <vTaskSwitchContext>
 8008b34:	f04f 0000 	mov.w	r0, #0
 8008b38:	f380 8811 	msr	BASEPRI, r0
 8008b3c:	bc09      	pop	{r0, r3}
 8008b3e:	6819      	ldr	r1, [r3, #0]
 8008b40:	6808      	ldr	r0, [r1, #0]
 8008b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b46:	f01e 0f10 	tst.w	lr, #16
 8008b4a:	bf08      	it	eq
 8008b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b50:	f380 8809 	msr	PSP, r0
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	f3af 8000 	nop.w

08008b60 <pxCurrentTCBConst>:
 8008b60:	2000094c 	.word	0x2000094c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b64:	bf00      	nop
 8008b66:	bf00      	nop

08008b68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	607b      	str	r3, [r7, #4]
}
 8008b80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b82:	f7ff fa27 	bl	8007fd4 <xTaskIncrementTick>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d003      	beq.n	8008b94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b8c:	4b06      	ldr	r3, [pc, #24]	@ (8008ba8 <SysTick_Handler+0x40>)
 8008b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b92:	601a      	str	r2, [r3, #0]
 8008b94:	2300      	movs	r3, #0
 8008b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	f383 8811 	msr	BASEPRI, r3
}
 8008b9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ba0:	bf00      	nop
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	e000ed04 	.word	0xe000ed04

08008bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008bac:	b480      	push	{r7}
 8008bae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8008be0 <vPortSetupTimerInterrupt+0x34>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8008be4 <vPortSetupTimerInterrupt+0x38>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8008be8 <vPortSetupTimerInterrupt+0x3c>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8008bec <vPortSetupTimerInterrupt+0x40>)
 8008bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc6:	099b      	lsrs	r3, r3, #6
 8008bc8:	4a09      	ldr	r2, [pc, #36]	@ (8008bf0 <vPortSetupTimerInterrupt+0x44>)
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008bce:	4b04      	ldr	r3, [pc, #16]	@ (8008be0 <vPortSetupTimerInterrupt+0x34>)
 8008bd0:	2207      	movs	r2, #7
 8008bd2:	601a      	str	r2, [r3, #0]
}
 8008bd4:	bf00      	nop
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	e000e010 	.word	0xe000e010
 8008be4:	e000e018 	.word	0xe000e018
 8008be8:	20000000 	.word	0x20000000
 8008bec:	10624dd3 	.word	0x10624dd3
 8008bf0:	e000e014 	.word	0xe000e014

08008bf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008bf4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008c04 <vPortEnableVFP+0x10>
 8008bf8:	6801      	ldr	r1, [r0, #0]
 8008bfa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008bfe:	6001      	str	r1, [r0, #0]
 8008c00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c02:	bf00      	nop
 8008c04:	e000ed88 	.word	0xe000ed88

08008c08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b08a      	sub	sp, #40	@ 0x28
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c10:	2300      	movs	r3, #0
 8008c12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c14:	f7ff f922 	bl	8007e5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c18:	4b5c      	ldr	r3, [pc, #368]	@ (8008d8c <pvPortMalloc+0x184>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d101      	bne.n	8008c24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c20:	f000 f924 	bl	8008e6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c24:	4b5a      	ldr	r3, [pc, #360]	@ (8008d90 <pvPortMalloc+0x188>)
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f040 8095 	bne.w	8008d5c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d01e      	beq.n	8008c76 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008c38:	2208      	movs	r2, #8
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f003 0307 	and.w	r3, r3, #7
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d015      	beq.n	8008c76 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f023 0307 	bic.w	r3, r3, #7
 8008c50:	3308      	adds	r3, #8
 8008c52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f003 0307 	and.w	r3, r3, #7
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00b      	beq.n	8008c76 <pvPortMalloc+0x6e>
	__asm volatile
 8008c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	617b      	str	r3, [r7, #20]
}
 8008c70:	bf00      	nop
 8008c72:	bf00      	nop
 8008c74:	e7fd      	b.n	8008c72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d06f      	beq.n	8008d5c <pvPortMalloc+0x154>
 8008c7c:	4b45      	ldr	r3, [pc, #276]	@ (8008d94 <pvPortMalloc+0x18c>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d86a      	bhi.n	8008d5c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c86:	4b44      	ldr	r3, [pc, #272]	@ (8008d98 <pvPortMalloc+0x190>)
 8008c88:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008c8a:	4b43      	ldr	r3, [pc, #268]	@ (8008d98 <pvPortMalloc+0x190>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c90:	e004      	b.n	8008c9c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c94:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d903      	bls.n	8008cae <pvPortMalloc+0xa6>
 8008ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1f1      	bne.n	8008c92 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008cae:	4b37      	ldr	r3, [pc, #220]	@ (8008d8c <pvPortMalloc+0x184>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d051      	beq.n	8008d5c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008cb8:	6a3b      	ldr	r3, [r7, #32]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2208      	movs	r2, #8
 8008cbe:	4413      	add	r3, r2
 8008cc0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ccc:	685a      	ldr	r2, [r3, #4]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	1ad2      	subs	r2, r2, r3
 8008cd2:	2308      	movs	r3, #8
 8008cd4:	005b      	lsls	r3, r3, #1
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d920      	bls.n	8008d1c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4413      	add	r3, r2
 8008ce0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	f003 0307 	and.w	r3, r3, #7
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00b      	beq.n	8008d04 <pvPortMalloc+0xfc>
	__asm volatile
 8008cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf0:	f383 8811 	msr	BASEPRI, r3
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	613b      	str	r3, [r7, #16]
}
 8008cfe:	bf00      	nop
 8008d00:	bf00      	nop
 8008d02:	e7fd      	b.n	8008d00 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	1ad2      	subs	r2, r2, r3
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d16:	69b8      	ldr	r0, [r7, #24]
 8008d18:	f000 f90a 	bl	8008f30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8008d94 <pvPortMalloc+0x18c>)
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	1ad3      	subs	r3, r2, r3
 8008d26:	4a1b      	ldr	r2, [pc, #108]	@ (8008d94 <pvPortMalloc+0x18c>)
 8008d28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8008d94 <pvPortMalloc+0x18c>)
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8008d9c <pvPortMalloc+0x194>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d203      	bcs.n	8008d3e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d36:	4b17      	ldr	r3, [pc, #92]	@ (8008d94 <pvPortMalloc+0x18c>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a18      	ldr	r2, [pc, #96]	@ (8008d9c <pvPortMalloc+0x194>)
 8008d3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d40:	685a      	ldr	r2, [r3, #4]
 8008d42:	4b13      	ldr	r3, [pc, #76]	@ (8008d90 <pvPortMalloc+0x188>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	431a      	orrs	r2, r3
 8008d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d4e:	2200      	movs	r2, #0
 8008d50:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008d52:	4b13      	ldr	r3, [pc, #76]	@ (8008da0 <pvPortMalloc+0x198>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3301      	adds	r3, #1
 8008d58:	4a11      	ldr	r2, [pc, #68]	@ (8008da0 <pvPortMalloc+0x198>)
 8008d5a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d5c:	f7ff f88c 	bl	8007e78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	f003 0307 	and.w	r3, r3, #7
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00b      	beq.n	8008d82 <pvPortMalloc+0x17a>
	__asm volatile
 8008d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6e:	f383 8811 	msr	BASEPRI, r3
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	f3bf 8f4f 	dsb	sy
 8008d7a:	60fb      	str	r3, [r7, #12]
}
 8008d7c:	bf00      	nop
 8008d7e:	bf00      	nop
 8008d80:	e7fd      	b.n	8008d7e <pvPortMalloc+0x176>
	return pvReturn;
 8008d82:	69fb      	ldr	r3, [r7, #28]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3728      	adds	r7, #40	@ 0x28
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	2000e160 	.word	0x2000e160
 8008d90:	2000e174 	.word	0x2000e174
 8008d94:	2000e164 	.word	0x2000e164
 8008d98:	2000e158 	.word	0x2000e158
 8008d9c:	2000e168 	.word	0x2000e168
 8008da0:	2000e16c 	.word	0x2000e16c

08008da4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b086      	sub	sp, #24
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d04f      	beq.n	8008e56 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008db6:	2308      	movs	r3, #8
 8008db8:	425b      	negs	r3, r3
 8008dba:	697a      	ldr	r2, [r7, #20]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	685a      	ldr	r2, [r3, #4]
 8008dc8:	4b25      	ldr	r3, [pc, #148]	@ (8008e60 <vPortFree+0xbc>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4013      	ands	r3, r2
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10b      	bne.n	8008dea <vPortFree+0x46>
	__asm volatile
 8008dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	60fb      	str	r3, [r7, #12]
}
 8008de4:	bf00      	nop
 8008de6:	bf00      	nop
 8008de8:	e7fd      	b.n	8008de6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00b      	beq.n	8008e0a <vPortFree+0x66>
	__asm volatile
 8008df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df6:	f383 8811 	msr	BASEPRI, r3
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	60bb      	str	r3, [r7, #8]
}
 8008e04:	bf00      	nop
 8008e06:	bf00      	nop
 8008e08:	e7fd      	b.n	8008e06 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	685a      	ldr	r2, [r3, #4]
 8008e0e:	4b14      	ldr	r3, [pc, #80]	@ (8008e60 <vPortFree+0xbc>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4013      	ands	r3, r2
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d01e      	beq.n	8008e56 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d11a      	bne.n	8008e56 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	685a      	ldr	r2, [r3, #4]
 8008e24:	4b0e      	ldr	r3, [pc, #56]	@ (8008e60 <vPortFree+0xbc>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	43db      	mvns	r3, r3
 8008e2a:	401a      	ands	r2, r3
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e30:	f7ff f814 	bl	8007e5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	685a      	ldr	r2, [r3, #4]
 8008e38:	4b0a      	ldr	r3, [pc, #40]	@ (8008e64 <vPortFree+0xc0>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	4a09      	ldr	r2, [pc, #36]	@ (8008e64 <vPortFree+0xc0>)
 8008e40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e42:	6938      	ldr	r0, [r7, #16]
 8008e44:	f000 f874 	bl	8008f30 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008e48:	4b07      	ldr	r3, [pc, #28]	@ (8008e68 <vPortFree+0xc4>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	4a06      	ldr	r2, [pc, #24]	@ (8008e68 <vPortFree+0xc4>)
 8008e50:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008e52:	f7ff f811 	bl	8007e78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e56:	bf00      	nop
 8008e58:	3718      	adds	r7, #24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	2000e174 	.word	0x2000e174
 8008e64:	2000e164 	.word	0x2000e164
 8008e68:	2000e170 	.word	0x2000e170

08008e6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e72:	f24d 63d8 	movw	r3, #55000	@ 0xd6d8
 8008e76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008e78:	4b27      	ldr	r3, [pc, #156]	@ (8008f18 <prvHeapInit+0xac>)
 8008e7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f003 0307 	and.w	r3, r3, #7
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00c      	beq.n	8008ea0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	3307      	adds	r3, #7
 8008e8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f023 0307 	bic.w	r3, r3, #7
 8008e92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8008f18 <prvHeapInit+0xac>)
 8008e9c:	4413      	add	r3, r2
 8008e9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8008f1c <prvHeapInit+0xb0>)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8008f1c <prvHeapInit+0xb0>)
 8008eac:	2200      	movs	r2, #0
 8008eae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008eb8:	2208      	movs	r2, #8
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	1a9b      	subs	r3, r3, r2
 8008ebe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f023 0307 	bic.w	r3, r3, #7
 8008ec6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	4a15      	ldr	r2, [pc, #84]	@ (8008f20 <prvHeapInit+0xb4>)
 8008ecc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ece:	4b14      	ldr	r3, [pc, #80]	@ (8008f20 <prvHeapInit+0xb4>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008ed6:	4b12      	ldr	r3, [pc, #72]	@ (8008f20 <prvHeapInit+0xb4>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2200      	movs	r2, #0
 8008edc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	1ad2      	subs	r2, r2, r3
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008eec:	4b0c      	ldr	r3, [pc, #48]	@ (8008f20 <prvHeapInit+0xb4>)
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8008f24 <prvHeapInit+0xb8>)
 8008efa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	4a09      	ldr	r2, [pc, #36]	@ (8008f28 <prvHeapInit+0xbc>)
 8008f02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f04:	4b09      	ldr	r3, [pc, #36]	@ (8008f2c <prvHeapInit+0xc0>)
 8008f06:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008f0a:	601a      	str	r2, [r3, #0]
}
 8008f0c:	bf00      	nop
 8008f0e:	3714      	adds	r7, #20
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr
 8008f18:	20000a80 	.word	0x20000a80
 8008f1c:	2000e158 	.word	0x2000e158
 8008f20:	2000e160 	.word	0x2000e160
 8008f24:	2000e168 	.word	0x2000e168
 8008f28:	2000e164 	.word	0x2000e164
 8008f2c:	2000e174 	.word	0x2000e174

08008f30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f38:	4b28      	ldr	r3, [pc, #160]	@ (8008fdc <prvInsertBlockIntoFreeList+0xac>)
 8008f3a:	60fb      	str	r3, [r7, #12]
 8008f3c:	e002      	b.n	8008f44 <prvInsertBlockIntoFreeList+0x14>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	60fb      	str	r3, [r7, #12]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d8f7      	bhi.n	8008f3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	4413      	add	r3, r2
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d108      	bne.n	8008f72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	685a      	ldr	r2, [r3, #4]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	441a      	add	r2, r3
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	441a      	add	r2, r3
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d118      	bne.n	8008fb8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	4b15      	ldr	r3, [pc, #84]	@ (8008fe0 <prvInsertBlockIntoFreeList+0xb0>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d00d      	beq.n	8008fae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	685a      	ldr	r2, [r3, #4]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	441a      	add	r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	601a      	str	r2, [r3, #0]
 8008fac:	e008      	b.n	8008fc0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008fae:	4b0c      	ldr	r3, [pc, #48]	@ (8008fe0 <prvInsertBlockIntoFreeList+0xb0>)
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	601a      	str	r2, [r3, #0]
 8008fb6:	e003      	b.n	8008fc0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d002      	beq.n	8008fce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fce:	bf00      	nop
 8008fd0:	3714      	adds	r7, #20
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	2000e158 	.word	0x2000e158
 8008fe0:	2000e160 	.word	0x2000e160

08008fe4 <memset>:
 8008fe4:	4402      	add	r2, r0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d100      	bne.n	8008fee <memset+0xa>
 8008fec:	4770      	bx	lr
 8008fee:	f803 1b01 	strb.w	r1, [r3], #1
 8008ff2:	e7f9      	b.n	8008fe8 <memset+0x4>

08008ff4 <__libc_init_array>:
 8008ff4:	b570      	push	{r4, r5, r6, lr}
 8008ff6:	4d0d      	ldr	r5, [pc, #52]	@ (800902c <__libc_init_array+0x38>)
 8008ff8:	4c0d      	ldr	r4, [pc, #52]	@ (8009030 <__libc_init_array+0x3c>)
 8008ffa:	1b64      	subs	r4, r4, r5
 8008ffc:	10a4      	asrs	r4, r4, #2
 8008ffe:	2600      	movs	r6, #0
 8009000:	42a6      	cmp	r6, r4
 8009002:	d109      	bne.n	8009018 <__libc_init_array+0x24>
 8009004:	4d0b      	ldr	r5, [pc, #44]	@ (8009034 <__libc_init_array+0x40>)
 8009006:	4c0c      	ldr	r4, [pc, #48]	@ (8009038 <__libc_init_array+0x44>)
 8009008:	f000 f826 	bl	8009058 <_init>
 800900c:	1b64      	subs	r4, r4, r5
 800900e:	10a4      	asrs	r4, r4, #2
 8009010:	2600      	movs	r6, #0
 8009012:	42a6      	cmp	r6, r4
 8009014:	d105      	bne.n	8009022 <__libc_init_array+0x2e>
 8009016:	bd70      	pop	{r4, r5, r6, pc}
 8009018:	f855 3b04 	ldr.w	r3, [r5], #4
 800901c:	4798      	blx	r3
 800901e:	3601      	adds	r6, #1
 8009020:	e7ee      	b.n	8009000 <__libc_init_array+0xc>
 8009022:	f855 3b04 	ldr.w	r3, [r5], #4
 8009026:	4798      	blx	r3
 8009028:	3601      	adds	r6, #1
 800902a:	e7f2      	b.n	8009012 <__libc_init_array+0x1e>
 800902c:	0800b258 	.word	0x0800b258
 8009030:	0800b258 	.word	0x0800b258
 8009034:	0800b258 	.word	0x0800b258
 8009038:	0800b25c 	.word	0x0800b25c

0800903c <memcpy>:
 800903c:	440a      	add	r2, r1
 800903e:	4291      	cmp	r1, r2
 8009040:	f100 33ff 	add.w	r3, r0, #4294967295
 8009044:	d100      	bne.n	8009048 <memcpy+0xc>
 8009046:	4770      	bx	lr
 8009048:	b510      	push	{r4, lr}
 800904a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800904e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009052:	4291      	cmp	r1, r2
 8009054:	d1f9      	bne.n	800904a <memcpy+0xe>
 8009056:	bd10      	pop	{r4, pc}

08009058 <_init>:
 8009058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905a:	bf00      	nop
 800905c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800905e:	bc08      	pop	{r3}
 8009060:	469e      	mov	lr, r3
 8009062:	4770      	bx	lr

08009064 <_fini>:
 8009064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009066:	bf00      	nop
 8009068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800906a:	bc08      	pop	{r3}
 800906c:	469e      	mov	lr, r3
 800906e:	4770      	bx	lr
