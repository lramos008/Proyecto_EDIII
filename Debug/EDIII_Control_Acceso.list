
EDIII_Control_Acceso.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eccc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000411c  0800ee6c  0800ee6c  0000fe6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012f88  08012f88  00014084  2**0
                  CONTENTS
  4 .ARM          00000008  08012f88  08012f88  00013f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012f90  08012f90  00014084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012f90  08012f90  00013f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012f94  08012f94  00013f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08012f98  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003244  20000088  0801301c  00014088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200032cc  0801301c  000142cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023ddd  00000000  00000000  000140b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d61  00000000  00000000  00037e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002210  00000000  00000000  0003dbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a44  00000000  00000000  0003fe08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a55  00000000  00000000  0004184c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000337b7  00000000  00000000  000622a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b05b6  00000000  00000000  00095a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  0014600e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d90  00000000  00000000  001460c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0014ee54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000391  00000000  00000000  0014eeb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  0014f242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ee54 	.word	0x0800ee54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	0800ee54 	.word	0x0800ee54

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004da:	4802      	ldr	r0, [pc, #8]	@ (80004e4 <SELECT+0x14>)
 80004dc:	f003 ff38 	bl	8004350 <HAL_GPIO_WritePin>
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40020000 	.word	0x40020000

080004e8 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004f2:	4802      	ldr	r0, [pc, #8]	@ (80004fc <DESELECT+0x14>)
 80004f4:	f003 ff2c 	bl	8004350 <HAL_GPIO_WritePin>
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40020000 	.word	0x40020000

08000500 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 800050a:	bf00      	nop
 800050c:	4808      	ldr	r0, [pc, #32]	@ (8000530 <SPI_TxByte+0x30>)
 800050e:	f005 ff57 	bl	80063c0 <HAL_SPI_GetState>
 8000512:	4603      	mov	r3, r0
 8000514:	2b01      	cmp	r3, #1
 8000516:	d1f9      	bne.n	800050c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi3, &data, 1, SPI_TIMEOUT);
 8000518:	1df9      	adds	r1, r7, #7
 800051a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800051e:	2201      	movs	r2, #1
 8000520:	4803      	ldr	r0, [pc, #12]	@ (8000530 <SPI_TxByte+0x30>)
 8000522:	f005 fc60 	bl	8005de6 <HAL_SPI_Transmit>
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	200001c4 	.word	0x200001c4

08000534 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800053a:	23ff      	movs	r3, #255	@ 0xff
 800053c:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY));
 8000542:	bf00      	nop
 8000544:	4809      	ldr	r0, [pc, #36]	@ (800056c <SPI_RxByte+0x38>)
 8000546:	f005 ff3b 	bl	80063c0 <HAL_SPI_GetState>
 800054a:	4603      	mov	r3, r0
 800054c:	2b01      	cmp	r3, #1
 800054e:	d1f9      	bne.n	8000544 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi3, &dummy, &data, 1, SPI_TIMEOUT);
 8000550:	1dba      	adds	r2, r7, #6
 8000552:	1df9      	adds	r1, r7, #7
 8000554:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2301      	movs	r3, #1
 800055c:	4803      	ldr	r0, [pc, #12]	@ (800056c <SPI_RxByte+0x38>)
 800055e:	f005 fd86 	bl	800606e <HAL_SPI_TransmitReceive>
  
  return data;
 8000562:	79bb      	ldrb	r3, [r7, #6]
}
 8000564:	4618      	mov	r0, r3
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	200001c4 	.word	0x200001c4

08000570 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000578:	f7ff ffdc 	bl	8000534 <SPI_RxByte>
 800057c:	4603      	mov	r3, r0
 800057e:	461a      	mov	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	701a      	strb	r2, [r3, #0]
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8000592:	4b0b      	ldr	r3, [pc, #44]	@ (80005c0 <SD_ReadyWait+0x34>)
 8000594:	2232      	movs	r2, #50	@ 0x32
 8000596:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8000598:	f7ff ffcc 	bl	8000534 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 800059c:	f7ff ffca 	bl	8000534 <SPI_RxByte>
 80005a0:	4603      	mov	r3, r0
 80005a2:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	2bff      	cmp	r3, #255	@ 0xff
 80005a8:	d004      	beq.n	80005b4 <SD_ReadyWait+0x28>
 80005aa:	4b05      	ldr	r3, [pc, #20]	@ (80005c0 <SD_ReadyWait+0x34>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1f3      	bne.n	800059c <SD_ReadyWait+0x10>
  
  return res;
 80005b4:	79fb      	ldrb	r3, [r7, #7]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	2000030a 	.word	0x2000030a

080005c4 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80005ca:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80005ce:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 80005d0:	f7ff ff8a 	bl	80004e8 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 80005d4:	2300      	movs	r3, #0
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	e005      	b.n	80005e6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80005da:	20ff      	movs	r0, #255	@ 0xff
 80005dc:	f7ff ff90 	bl	8000500 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80005e0:	693b      	ldr	r3, [r7, #16]
 80005e2:	3301      	adds	r3, #1
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	693b      	ldr	r3, [r7, #16]
 80005e8:	2b09      	cmp	r3, #9
 80005ea:	ddf6      	ble.n	80005da <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 80005ec:	f7ff ff70 	bl	80004d0 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 80005f0:	2340      	movs	r3, #64	@ 0x40
 80005f2:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000604:	2395      	movs	r3, #149	@ 0x95
 8000606:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	e009      	b.n	8000622 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800060e:	1d3a      	adds	r2, r7, #4
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	4413      	add	r3, r2
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ff72 	bl	8000500 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	3301      	adds	r3, #1
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	2b05      	cmp	r3, #5
 8000626:	ddf2      	ble.n	800060e <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8000628:	e002      	b.n	8000630 <SD_PowerOn+0x6c>
  {
    Count--;
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	3b01      	subs	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000630:	f7ff ff80 	bl	8000534 <SPI_RxByte>
 8000634:	4603      	mov	r3, r0
 8000636:	2b01      	cmp	r3, #1
 8000638:	d002      	beq.n	8000640 <SD_PowerOn+0x7c>
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1f4      	bne.n	800062a <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8000640:	f7ff ff52 	bl	80004e8 <DESELECT>
  SPI_TxByte(0XFF);
 8000644:	20ff      	movs	r0, #255	@ 0xff
 8000646:	f7ff ff5b 	bl	8000500 <SPI_TxByte>
  
  PowerFlag = 1;
 800064a:	4b03      	ldr	r3, [pc, #12]	@ (8000658 <SD_PowerOn+0x94>)
 800064c:	2201      	movs	r2, #1
 800064e:	701a      	strb	r2, [r3, #0]
}
 8000650:	bf00      	nop
 8000652:	3718      	adds	r7, #24
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200000a5 	.word	0x200000a5

0800065c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000660:	4b03      	ldr	r3, [pc, #12]	@ (8000670 <SD_PowerOff+0x14>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	200000a5 	.word	0x200000a5

08000674 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000678:	4b03      	ldr	r3, [pc, #12]	@ (8000688 <SD_CheckPower+0x14>)
 800067a:	781b      	ldrb	r3, [r3, #0]
}
 800067c:	4618      	mov	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	200000a5 	.word	0x200000a5

0800068c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8000696:	4b17      	ldr	r3, [pc, #92]	@ (80006f4 <SD_RxDataBlock+0x68>)
 8000698:	220a      	movs	r2, #10
 800069a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 800069c:	f7ff ff4a 	bl	8000534 <SPI_RxByte>
 80006a0:	4603      	mov	r3, r0
 80006a2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	2bff      	cmp	r3, #255	@ 0xff
 80006a8:	d104      	bne.n	80006b4 <SD_RxDataBlock+0x28>
 80006aa:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <SD_RxDataBlock+0x68>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1f3      	bne.n	800069c <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	2bfe      	cmp	r3, #254	@ 0xfe
 80006b8:	d001      	beq.n	80006be <SD_RxDataBlock+0x32>
    return FALSE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	e016      	b.n	80006ec <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	1c5a      	adds	r2, r3, #1
 80006c2:	607a      	str	r2, [r7, #4]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ff53 	bl	8000570 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	1c5a      	adds	r2, r3, #1
 80006ce:	607a      	str	r2, [r7, #4]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ff4d 	bl	8000570 <SPI_RxBytePtr>
  } while(btr -= 2);
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	3b02      	subs	r3, #2
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d1ed      	bne.n	80006be <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 80006e2:	f7ff ff27 	bl	8000534 <SPI_RxByte>
  SPI_RxByte();
 80006e6:	f7ff ff25 	bl	8000534 <SPI_RxByte>
  
  return TRUE;
 80006ea:	2301      	movs	r3, #1
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000309 	.word	0x20000309

080006f8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000708:	f7ff ff40 	bl	800058c <SD_ReadyWait>
 800070c:	4603      	mov	r3, r0
 800070e:	2bff      	cmp	r3, #255	@ 0xff
 8000710:	d001      	beq.n	8000716 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000712:	2300      	movs	r3, #0
 8000714:	e040      	b.n	8000798 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8000716:	78fb      	ldrb	r3, [r7, #3]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff fef1 	bl	8000500 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 800071e:	78fb      	ldrb	r3, [r7, #3]
 8000720:	2bfd      	cmp	r3, #253	@ 0xfd
 8000722:	d031      	beq.n	8000788 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	1c5a      	adds	r2, r3, #1
 800072c:	607a      	str	r2, [r7, #4]
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fee5 	bl	8000500 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	1c5a      	adds	r2, r3, #1
 800073a:	607a      	str	r2, [r7, #4]
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff fede 	bl	8000500 <SPI_TxByte>
    } while (--wc);
 8000744:	7bbb      	ldrb	r3, [r7, #14]
 8000746:	3b01      	subs	r3, #1
 8000748:	73bb      	strb	r3, [r7, #14]
 800074a:	7bbb      	ldrb	r3, [r7, #14]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1eb      	bne.n	8000728 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8000750:	f7ff fef0 	bl	8000534 <SPI_RxByte>
    SPI_RxByte();
 8000754:	f7ff feee 	bl	8000534 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8000758:	e00b      	b.n	8000772 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 800075a:	f7ff feeb 	bl	8000534 <SPI_RxByte>
 800075e:	4603      	mov	r3, r0
 8000760:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	f003 031f 	and.w	r3, r3, #31
 8000768:	2b05      	cmp	r3, #5
 800076a:	d006      	beq.n	800077a <SD_TxDataBlock+0x82>
        break;
      
      i++;
 800076c:	7b7b      	ldrb	r3, [r7, #13]
 800076e:	3301      	adds	r3, #1
 8000770:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8000772:	7b7b      	ldrb	r3, [r7, #13]
 8000774:	2b40      	cmp	r3, #64	@ 0x40
 8000776:	d9f0      	bls.n	800075a <SD_TxDataBlock+0x62>
 8000778:	e000      	b.n	800077c <SD_TxDataBlock+0x84>
        break;
 800077a:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800077c:	bf00      	nop
 800077e:	f7ff fed9 	bl	8000534 <SPI_RxByte>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d0fa      	beq.n	800077e <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	f003 031f 	and.w	r3, r3, #31
 800078e:	2b05      	cmp	r3, #5
 8000790:	d101      	bne.n	8000796 <SD_TxDataBlock+0x9e>
    return TRUE;
 8000792:	2301      	movs	r3, #1
 8000794:	e000      	b.n	8000798 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000796:	2300      	movs	r3, #0
}
 8000798:	4618      	mov	r0, r3
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	6039      	str	r1, [r7, #0]
 80007aa:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80007ac:	f7ff feee 	bl	800058c <SD_ReadyWait>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2bff      	cmp	r3, #255	@ 0xff
 80007b4:	d001      	beq.n	80007ba <SD_SendCmd+0x1a>
    return 0xFF;
 80007b6:	23ff      	movs	r3, #255	@ 0xff
 80007b8:	e040      	b.n	800083c <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fe9f 	bl	8000500 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	0e1b      	lsrs	r3, r3, #24
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fe99 	bl	8000500 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	0c1b      	lsrs	r3, r3, #16
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fe93 	bl	8000500 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	0a1b      	lsrs	r3, r3, #8
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fe8d 	bl	8000500 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fe88 	bl	8000500 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 80007f0:	2300      	movs	r3, #0
 80007f2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b40      	cmp	r3, #64	@ 0x40
 80007f8:	d101      	bne.n	80007fe <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80007fa:	2395      	movs	r3, #149	@ 0x95
 80007fc:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	2b48      	cmp	r3, #72	@ 0x48
 8000802:	d101      	bne.n	8000808 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000804:	2387      	movs	r3, #135	@ 0x87
 8000806:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff fe78 	bl	8000500 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	2b4c      	cmp	r3, #76	@ 0x4c
 8000814:	d101      	bne.n	800081a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000816:	f7ff fe8d 	bl	8000534 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 800081a:	230a      	movs	r3, #10
 800081c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800081e:	f7ff fe89 	bl	8000534 <SPI_RxByte>
 8000822:	4603      	mov	r3, r0
 8000824:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000826:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800082a:	2b00      	cmp	r3, #0
 800082c:	da05      	bge.n	800083a <SD_SendCmd+0x9a>
 800082e:	7bbb      	ldrb	r3, [r7, #14]
 8000830:	3b01      	subs	r3, #1
 8000832:	73bb      	strb	r3, [r7, #14]
 8000834:	7bbb      	ldrb	r3, [r7, #14]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d1f1      	bne.n	800081e <SD_SendCmd+0x7e>
  
  return res;
 800083a:	7b7b      	ldrb	r3, [r7, #13]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8000854:	2301      	movs	r3, #1
 8000856:	e0d5      	b.n	8000a04 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000858:	4b6c      	ldr	r3, [pc, #432]	@ (8000a0c <SD_disk_initialize+0x1c8>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	2b00      	cmp	r3, #0
 8000864:	d003      	beq.n	800086e <SD_disk_initialize+0x2a>
    return Stat;        
 8000866:	4b69      	ldr	r3, [pc, #420]	@ (8000a0c <SD_disk_initialize+0x1c8>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	e0ca      	b.n	8000a04 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800086e:	f7ff fea9 	bl	80005c4 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8000872:	f7ff fe2d 	bl	80004d0 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 800087a:	2100      	movs	r1, #0
 800087c:	2040      	movs	r0, #64	@ 0x40
 800087e:	f7ff ff8f 	bl	80007a0 <SD_SendCmd>
 8000882:	4603      	mov	r3, r0
 8000884:	2b01      	cmp	r3, #1
 8000886:	f040 80a5 	bne.w	80009d4 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800088a:	4b61      	ldr	r3, [pc, #388]	@ (8000a10 <SD_disk_initialize+0x1cc>)
 800088c:	2264      	movs	r2, #100	@ 0x64
 800088e:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8000890:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000894:	2048      	movs	r0, #72	@ 0x48
 8000896:	f7ff ff83 	bl	80007a0 <SD_SendCmd>
 800089a:	4603      	mov	r3, r0
 800089c:	2b01      	cmp	r3, #1
 800089e:	d158      	bne.n	8000952 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80008a0:	2300      	movs	r3, #0
 80008a2:	73fb      	strb	r3, [r7, #15]
 80008a4:	e00c      	b.n	80008c0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80008a6:	7bfc      	ldrb	r4, [r7, #15]
 80008a8:	f7ff fe44 	bl	8000534 <SPI_RxByte>
 80008ac:	4603      	mov	r3, r0
 80008ae:	461a      	mov	r2, r3
 80008b0:	f104 0310 	add.w	r3, r4, #16
 80008b4:	443b      	add	r3, r7
 80008b6:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	3301      	adds	r3, #1
 80008be:	73fb      	strb	r3, [r7, #15]
 80008c0:	7bfb      	ldrb	r3, [r7, #15]
 80008c2:	2b03      	cmp	r3, #3
 80008c4:	d9ef      	bls.n	80008a6 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 80008c6:	7abb      	ldrb	r3, [r7, #10]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	f040 8083 	bne.w	80009d4 <SD_disk_initialize+0x190>
 80008ce:	7afb      	ldrb	r3, [r7, #11]
 80008d0:	2baa      	cmp	r3, #170	@ 0xaa
 80008d2:	d17f      	bne.n	80009d4 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80008d4:	2100      	movs	r1, #0
 80008d6:	2077      	movs	r0, #119	@ 0x77
 80008d8:	f7ff ff62 	bl	80007a0 <SD_SendCmd>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d807      	bhi.n	80008f2 <SD_disk_initialize+0xae>
 80008e2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80008e6:	2069      	movs	r0, #105	@ 0x69
 80008e8:	f7ff ff5a 	bl	80007a0 <SD_SendCmd>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d005      	beq.n	80008fe <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80008f2:	4b47      	ldr	r3, [pc, #284]	@ (8000a10 <SD_disk_initialize+0x1cc>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d1eb      	bne.n	80008d4 <SD_disk_initialize+0x90>
 80008fc:	e000      	b.n	8000900 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80008fe:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8000900:	4b43      	ldr	r3, [pc, #268]	@ (8000a10 <SD_disk_initialize+0x1cc>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	2b00      	cmp	r3, #0
 8000908:	d064      	beq.n	80009d4 <SD_disk_initialize+0x190>
 800090a:	2100      	movs	r1, #0
 800090c:	207a      	movs	r0, #122	@ 0x7a
 800090e:	f7ff ff47 	bl	80007a0 <SD_SendCmd>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d15d      	bne.n	80009d4 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000918:	2300      	movs	r3, #0
 800091a:	73fb      	strb	r3, [r7, #15]
 800091c:	e00c      	b.n	8000938 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800091e:	7bfc      	ldrb	r4, [r7, #15]
 8000920:	f7ff fe08 	bl	8000534 <SPI_RxByte>
 8000924:	4603      	mov	r3, r0
 8000926:	461a      	mov	r2, r3
 8000928:	f104 0310 	add.w	r3, r4, #16
 800092c:	443b      	add	r3, r7
 800092e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	3301      	adds	r3, #1
 8000936:	73fb      	strb	r3, [r7, #15]
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	2b03      	cmp	r3, #3
 800093c:	d9ef      	bls.n	800091e <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 800093e:	7a3b      	ldrb	r3, [r7, #8]
 8000940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SD_disk_initialize+0x108>
 8000948:	2306      	movs	r3, #6
 800094a:	e000      	b.n	800094e <SD_disk_initialize+0x10a>
 800094c:	2302      	movs	r3, #2
 800094e:	73bb      	strb	r3, [r7, #14]
 8000950:	e040      	b.n	80009d4 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000952:	2100      	movs	r1, #0
 8000954:	2077      	movs	r0, #119	@ 0x77
 8000956:	f7ff ff23 	bl	80007a0 <SD_SendCmd>
 800095a:	4603      	mov	r3, r0
 800095c:	2b01      	cmp	r3, #1
 800095e:	d808      	bhi.n	8000972 <SD_disk_initialize+0x12e>
 8000960:	2100      	movs	r1, #0
 8000962:	2069      	movs	r0, #105	@ 0x69
 8000964:	f7ff ff1c 	bl	80007a0 <SD_SendCmd>
 8000968:	4603      	mov	r3, r0
 800096a:	2b01      	cmp	r3, #1
 800096c:	d801      	bhi.n	8000972 <SD_disk_initialize+0x12e>
 800096e:	2302      	movs	r3, #2
 8000970:	e000      	b.n	8000974 <SD_disk_initialize+0x130>
 8000972:	2301      	movs	r3, #1
 8000974:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8000976:	7bbb      	ldrb	r3, [r7, #14]
 8000978:	2b02      	cmp	r3, #2
 800097a:	d10e      	bne.n	800099a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800097c:	2100      	movs	r1, #0
 800097e:	2077      	movs	r0, #119	@ 0x77
 8000980:	f7ff ff0e 	bl	80007a0 <SD_SendCmd>
 8000984:	4603      	mov	r3, r0
 8000986:	2b01      	cmp	r3, #1
 8000988:	d80e      	bhi.n	80009a8 <SD_disk_initialize+0x164>
 800098a:	2100      	movs	r1, #0
 800098c:	2069      	movs	r0, #105	@ 0x69
 800098e:	f7ff ff07 	bl	80007a0 <SD_SendCmd>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d107      	bne.n	80009a8 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000998:	e00d      	b.n	80009b6 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800099a:	2100      	movs	r1, #0
 800099c:	2041      	movs	r0, #65	@ 0x41
 800099e:	f7ff feff 	bl	80007a0 <SD_SendCmd>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d005      	beq.n	80009b4 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80009a8:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <SD_disk_initialize+0x1cc>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d1e1      	bne.n	8000976 <SD_disk_initialize+0x132>
 80009b2:	e000      	b.n	80009b6 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80009b4:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 80009b6:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <SD_disk_initialize+0x1cc>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d007      	beq.n	80009d0 <SD_disk_initialize+0x18c>
 80009c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009c4:	2050      	movs	r0, #80	@ 0x50
 80009c6:	f7ff feeb 	bl	80007a0 <SD_SendCmd>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80009d4:	4a0f      	ldr	r2, [pc, #60]	@ (8000a14 <SD_disk_initialize+0x1d0>)
 80009d6:	7bbb      	ldrb	r3, [r7, #14]
 80009d8:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80009da:	f7ff fd85 	bl	80004e8 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80009de:	f7ff fda9 	bl	8000534 <SPI_RxByte>
  
  if (type) 
 80009e2:	7bbb      	ldrb	r3, [r7, #14]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d008      	beq.n	80009fa <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80009e8:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <SD_disk_initialize+0x1c8>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	f023 0301 	bic.w	r3, r3, #1
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <SD_disk_initialize+0x1c8>)
 80009f6:	701a      	strb	r2, [r3, #0]
 80009f8:	e001      	b.n	80009fe <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80009fa:	f7ff fe2f 	bl	800065c <SD_PowerOff>
  }
  
  return Stat;
 80009fe:	4b03      	ldr	r3, [pc, #12]	@ (8000a0c <SD_disk_initialize+0x1c8>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	b2db      	uxtb	r3, r3
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd90      	pop	{r4, r7, pc}
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	20000309 	.word	0x20000309
 8000a14:	200000a4 	.word	0x200000a4

08000a18 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SD_disk_status+0x14>
    return STA_NOINIT; 
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e002      	b.n	8000a32 <SD_disk_status+0x1a>
  
  return Stat;
 8000a2c:	4b04      	ldr	r3, [pc, #16]	@ (8000a40 <SD_disk_status+0x28>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	b2db      	uxtb	r3, r3
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000000 	.word	0x20000000

08000a44 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	4603      	mov	r3, r0
 8000a52:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d102      	bne.n	8000a60 <SD_disk_read+0x1c>
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d101      	bne.n	8000a64 <SD_disk_read+0x20>
    return RES_PARERR;
 8000a60:	2304      	movs	r3, #4
 8000a62:	e051      	b.n	8000b08 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8000a64:	4b2a      	ldr	r3, [pc, #168]	@ (8000b10 <SD_disk_read+0xcc>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000a72:	2303      	movs	r3, #3
 8000a74:	e048      	b.n	8000b08 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8000a76:	4b27      	ldr	r3, [pc, #156]	@ (8000b14 <SD_disk_read+0xd0>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d102      	bne.n	8000a88 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	025b      	lsls	r3, r3, #9
 8000a86:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8000a88:	f7ff fd22 	bl	80004d0 <SELECT>
  
  if (count == 1) 
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d111      	bne.n	8000ab6 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	2051      	movs	r0, #81	@ 0x51
 8000a96:	f7ff fe83 	bl	80007a0 <SD_SendCmd>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d129      	bne.n	8000af4 <SD_disk_read+0xb0>
 8000aa0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000aa4:	68b8      	ldr	r0, [r7, #8]
 8000aa6:	f7ff fdf1 	bl	800068c <SD_RxDataBlock>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d021      	beq.n	8000af4 <SD_disk_read+0xb0>
      count = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	e01e      	b.n	8000af4 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	2052      	movs	r0, #82	@ 0x52
 8000aba:	f7ff fe71 	bl	80007a0 <SD_SendCmd>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d117      	bne.n	8000af4 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000ac4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ac8:	68b8      	ldr	r0, [r7, #8]
 8000aca:	f7ff fddf 	bl	800068c <SD_RxDataBlock>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d00a      	beq.n	8000aea <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000ada:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1ed      	bne.n	8000ac4 <SD_disk_read+0x80>
 8000ae8:	e000      	b.n	8000aec <SD_disk_read+0xa8>
          break;
 8000aea:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8000aec:	2100      	movs	r1, #0
 8000aee:	204c      	movs	r0, #76	@ 0x4c
 8000af0:	f7ff fe56 	bl	80007a0 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8000af4:	f7ff fcf8 	bl	80004e8 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000af8:	f7ff fd1c 	bl	8000534 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	bf14      	ite	ne
 8000b02:	2301      	movne	r3, #1
 8000b04:	2300      	moveq	r3, #0
 8000b06:	b2db      	uxtb	r3, r3
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000000 	.word	0x20000000
 8000b14:	200000a4 	.word	0x200000a4

08000b18 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	607a      	str	r2, [r7, #4]
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	4603      	mov	r3, r0
 8000b26:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d102      	bne.n	8000b34 <SD_disk_write+0x1c>
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d101      	bne.n	8000b38 <SD_disk_write+0x20>
    return RES_PARERR;
 8000b34:	2304      	movs	r3, #4
 8000b36:	e06b      	b.n	8000c10 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8000b38:	4b37      	ldr	r3, [pc, #220]	@ (8000c18 <SD_disk_write+0x100>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000b46:	2303      	movs	r3, #3
 8000b48:	e062      	b.n	8000c10 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8000b4a:	4b33      	ldr	r3, [pc, #204]	@ (8000c18 <SD_disk_write+0x100>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	f003 0304 	and.w	r3, r3, #4
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SD_disk_write+0x44>
    return RES_WRPRT;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	e059      	b.n	8000c10 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8000b5c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c1c <SD_disk_write+0x104>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	025b      	lsls	r3, r3, #9
 8000b6c:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8000b6e:	f7ff fcaf 	bl	80004d0 <SELECT>
  
  if (count == 1) 
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d110      	bne.n	8000b9a <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b78:	6879      	ldr	r1, [r7, #4]
 8000b7a:	2058      	movs	r0, #88	@ 0x58
 8000b7c:	f7ff fe10 	bl	80007a0 <SD_SendCmd>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d13a      	bne.n	8000bfc <SD_disk_write+0xe4>
 8000b86:	21fe      	movs	r1, #254	@ 0xfe
 8000b88:	68b8      	ldr	r0, [r7, #8]
 8000b8a:	f7ff fdb5 	bl	80006f8 <SD_TxDataBlock>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d033      	beq.n	8000bfc <SD_disk_write+0xe4>
      count = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	e030      	b.n	8000bfc <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8000b9a:	4b20      	ldr	r3, [pc, #128]	@ (8000c1c <SD_disk_write+0x104>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d007      	beq.n	8000bb6 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2077      	movs	r0, #119	@ 0x77
 8000baa:	f7ff fdf9 	bl	80007a0 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000bae:	6839      	ldr	r1, [r7, #0]
 8000bb0:	2057      	movs	r0, #87	@ 0x57
 8000bb2:	f7ff fdf5 	bl	80007a0 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	2059      	movs	r0, #89	@ 0x59
 8000bba:	f7ff fdf1 	bl	80007a0 <SD_SendCmd>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d11b      	bne.n	8000bfc <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000bc4:	21fc      	movs	r1, #252	@ 0xfc
 8000bc6:	68b8      	ldr	r0, [r7, #8]
 8000bc8:	f7ff fd96 	bl	80006f8 <SD_TxDataBlock>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d00a      	beq.n	8000be8 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000bd8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1ee      	bne.n	8000bc4 <SD_disk_write+0xac>
 8000be6:	e000      	b.n	8000bea <SD_disk_write+0xd2>
          break;
 8000be8:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8000bea:	21fd      	movs	r1, #253	@ 0xfd
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fd83 	bl	80006f8 <SD_TxDataBlock>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d101      	bne.n	8000bfc <SD_disk_write+0xe4>
      {        
        count = 1;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8000bfc:	f7ff fc74 	bl	80004e8 <DESELECT>
  SPI_RxByte();
 8000c00:	f7ff fc98 	bl	8000534 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	bf14      	ite	ne
 8000c0a:	2301      	movne	r3, #1
 8000c0c:	2300      	moveq	r3, #0
 8000c0e:	b2db      	uxtb	r3, r3
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	200000a4 	.word	0x200000a4

08000c20 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b08b      	sub	sp, #44	@ 0x2c
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	603a      	str	r2, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	e119      	b.n	8000e72 <SD_disk_ioctl+0x252>
  
  res = RES_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  if (ctrl == CTRL_POWER) 
 8000c44:	79bb      	ldrb	r3, [r7, #6]
 8000c46:	2b05      	cmp	r3, #5
 8000c48:	d129      	bne.n	8000c9e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8000c4a:	6a3b      	ldr	r3, [r7, #32]
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d017      	beq.n	8000c82 <SD_disk_ioctl+0x62>
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	dc1f      	bgt.n	8000c96 <SD_disk_ioctl+0x76>
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d002      	beq.n	8000c60 <SD_disk_ioctl+0x40>
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d00b      	beq.n	8000c76 <SD_disk_ioctl+0x56>
 8000c5e:	e01a      	b.n	8000c96 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8000c60:	f7ff fd08 	bl	8000674 <SD_CheckPower>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8000c6a:	f7ff fcf7 	bl	800065c <SD_PowerOff>
      res = RES_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000c74:	e0fb      	b.n	8000e6e <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8000c76:	f7ff fca5 	bl	80005c4 <SD_PowerOn>
      res = RES_OK;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000c80:	e0f5      	b.n	8000e6e <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000c82:	6a3b      	ldr	r3, [r7, #32]
 8000c84:	1c5c      	adds	r4, r3, #1
 8000c86:	f7ff fcf5 	bl	8000674 <SD_CheckPower>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000c94:	e0eb      	b.n	8000e6e <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8000c96:	2304      	movs	r3, #4
 8000c98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c9c:	e0e7      	b.n	8000e6e <SD_disk_ioctl+0x24e>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8000c9e:	4b77      	ldr	r3, [pc, #476]	@ (8000e7c <SD_disk_ioctl+0x25c>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000cac:	2303      	movs	r3, #3
 8000cae:	e0e0      	b.n	8000e72 <SD_disk_ioctl+0x252>
    
    SELECT();
 8000cb0:	f7ff fc0e 	bl	80004d0 <SELECT>
    
    switch (ctrl) 
 8000cb4:	79bb      	ldrb	r3, [r7, #6]
 8000cb6:	2b0d      	cmp	r3, #13
 8000cb8:	f200 80ca 	bhi.w	8000e50 <SD_disk_ioctl+0x230>
 8000cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8000cc4 <SD_disk_ioctl+0xa4>)
 8000cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc2:	bf00      	nop
 8000cc4:	08000dbb 	.word	0x08000dbb
 8000cc8:	08000cfd 	.word	0x08000cfd
 8000ccc:	08000dab 	.word	0x08000dab
 8000cd0:	08000e51 	.word	0x08000e51
 8000cd4:	08000e51 	.word	0x08000e51
 8000cd8:	08000e51 	.word	0x08000e51
 8000cdc:	08000e51 	.word	0x08000e51
 8000ce0:	08000e51 	.word	0x08000e51
 8000ce4:	08000e51 	.word	0x08000e51
 8000ce8:	08000e51 	.word	0x08000e51
 8000cec:	08000e51 	.word	0x08000e51
 8000cf0:	08000dcd 	.word	0x08000dcd
 8000cf4:	08000df1 	.word	0x08000df1
 8000cf8:	08000e15 	.word	0x08000e15
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2049      	movs	r0, #73	@ 0x49
 8000d00:	f7ff fd4e 	bl	80007a0 <SD_SendCmd>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f040 80a6 	bne.w	8000e58 <SD_disk_ioctl+0x238>
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	2110      	movs	r1, #16
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fcba 	bl	800068c <SD_RxDataBlock>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f000 809c 	beq.w	8000e58 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1) 
 8000d20:	7b3b      	ldrb	r3, [r7, #12]
 8000d22:	099b      	lsrs	r3, r3, #6
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d10d      	bne.n	8000d46 <SD_disk_ioctl+0x126>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d2a:	7d7b      	ldrb	r3, [r7, #21]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	7d3b      	ldrb	r3, [r7, #20]
 8000d30:	021b      	lsls	r3, r3, #8
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	4413      	add	r3, r2
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	3301      	adds	r3, #1
 8000d3a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000d3c:	8bfb      	ldrh	r3, [r7, #30]
 8000d3e:	029a      	lsls	r2, r3, #10
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	e02d      	b.n	8000da2 <SD_disk_ioctl+0x182>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d46:	7c7b      	ldrb	r3, [r7, #17]
 8000d48:	f003 030f 	and.w	r3, r3, #15
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	7dbb      	ldrb	r3, [r7, #22]
 8000d50:	09db      	lsrs	r3, r3, #7
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	4413      	add	r3, r2
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	7d7b      	ldrb	r3, [r7, #21]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	f003 0306 	and.w	r3, r3, #6
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	4413      	add	r3, r2
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	3302      	adds	r3, #2
 8000d6a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d6e:	7d3b      	ldrb	r3, [r7, #20]
 8000d70:	099b      	lsrs	r3, r3, #6
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	461a      	mov	r2, r3
 8000d76:	7cfb      	ldrb	r3, [r7, #19]
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	4413      	add	r3, r2
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	7cbb      	ldrb	r3, [r7, #18]
 8000d82:	029b      	lsls	r3, r3, #10
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	4413      	add	r3, r2
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	3301      	adds	r3, #1
 8000d92:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d94:	8bfa      	ldrh	r2, [r7, #30]
 8000d96:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000d9a:	3b09      	subs	r3, #9
 8000d9c:	409a      	lsls	r2, r3
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8000da8:	e056      	b.n	8000e58 <SD_disk_ioctl+0x238>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000db0:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000db8:	e055      	b.n	8000e66 <SD_disk_ioctl+0x246>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000dba:	f7ff fbe7 	bl	800058c <SD_ReadyWait>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2bff      	cmp	r3, #255	@ 0xff
 8000dc2:	d14b      	bne.n	8000e5c <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000dca:	e047      	b.n	8000e5c <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2049      	movs	r0, #73	@ 0x49
 8000dd0:	f7ff fce6 	bl	80007a0 <SD_SendCmd>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d142      	bne.n	8000e60 <SD_disk_ioctl+0x240>
 8000dda:	2110      	movs	r1, #16
 8000ddc:	6a38      	ldr	r0, [r7, #32]
 8000dde:	f7ff fc55 	bl	800068c <SD_RxDataBlock>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d03b      	beq.n	8000e60 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000dee:	e037      	b.n	8000e60 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000df0:	2100      	movs	r1, #0
 8000df2:	204a      	movs	r0, #74	@ 0x4a
 8000df4:	f7ff fcd4 	bl	80007a0 <SD_SendCmd>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d132      	bne.n	8000e64 <SD_disk_ioctl+0x244>
 8000dfe:	2110      	movs	r1, #16
 8000e00:	6a38      	ldr	r0, [r7, #32]
 8000e02:	f7ff fc43 	bl	800068c <SD_RxDataBlock>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d02b      	beq.n	8000e64 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000e12:	e027      	b.n	8000e64 <SD_disk_ioctl+0x244>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8000e14:	2100      	movs	r1, #0
 8000e16:	207a      	movs	r0, #122	@ 0x7a
 8000e18:	f7ff fcc2 	bl	80007a0 <SD_SendCmd>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d116      	bne.n	8000e50 <SD_disk_ioctl+0x230>
      {         
        for (n = 0; n < 4; n++)
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e28:	e00b      	b.n	8000e42 <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 8000e2a:	6a3c      	ldr	r4, [r7, #32]
 8000e2c:	1c63      	adds	r3, r4, #1
 8000e2e:	623b      	str	r3, [r7, #32]
 8000e30:	f7ff fb80 	bl	8000534 <SPI_RxByte>
 8000e34:	4603      	mov	r3, r0
 8000e36:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000e38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e42:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d9ef      	bls.n	8000e2a <SD_disk_ioctl+0x20a>
        }
        
        res = RES_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }     
      
    default:
      res = RES_PARERR;
 8000e50:	2304      	movs	r3, #4
 8000e52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000e56:	e006      	b.n	8000e66 <SD_disk_ioctl+0x246>
      break;
 8000e58:	bf00      	nop
 8000e5a:	e004      	b.n	8000e66 <SD_disk_ioctl+0x246>
      break;
 8000e5c:	bf00      	nop
 8000e5e:	e002      	b.n	8000e66 <SD_disk_ioctl+0x246>
      break;
 8000e60:	bf00      	nop
 8000e62:	e000      	b.n	8000e66 <SD_disk_ioctl+0x246>
      break;
 8000e64:	bf00      	nop
    }
    
    DESELECT();
 8000e66:	f7ff fb3f 	bl	80004e8 <DESELECT>
    SPI_RxByte();
 8000e6a:	f7ff fb63 	bl	8000534 <SPI_RxByte>
  }
  
  return res;
 8000e6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	372c      	adds	r7, #44	@ 0x2c
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd90      	pop	{r4, r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000000 	.word	0x20000000

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e86:	f002 f85f 	bl	8002f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8a:	f000 f877 	bl	8000f7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8e:	f000 fa89 	bl	80013a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e92:	f000 fa67 	bl	8001364 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e96:	f000 fa3b 	bl	8001310 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e9a:	f000 f92d 	bl	80010f8 <MX_I2C1_Init>
  MX_SPI3_Init();
 8000e9e:	f000 f9b3 	bl	8001208 <MX_SPI3_Init>
  MX_RTC_Init();
 8000ea2:	f000 f957 	bl	8001154 <MX_RTC_Init>
  MX_ADC1_Init();
 8000ea6:	f000 f8d5 	bl	8001054 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000eaa:	f000 f9e3 	bl	8001274 <MX_TIM3_Init>
  MX_FATFS_Init();
 8000eae:	f006 fa9d 	bl	80073ec <MX_FATFS_Init>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  keypad_sd_sync = xSemaphoreCreateBinary();
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f00b fd60 	bl	800c97c <xQueueGenericCreate>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	4a23      	ldr	r2, [pc, #140]	@ (8000f4c <main+0xcc>)
 8000ec0:	6013      	str	r3, [r2, #0]
  sd_display_sync = xSemaphoreCreateBinary();
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f00b fd58 	bl	800c97c <xQueueGenericCreate>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	4a20      	ldr	r2, [pc, #128]	@ (8000f50 <main+0xd0>)
 8000ed0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  display_queue = xQueueCreate(1, sizeof(display_message_t));
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f00b fd50 	bl	800c97c <xQueueGenericCreate>
 8000edc:	4603      	mov	r3, r0
 8000ede:	4a1d      	ldr	r2, [pc, #116]	@ (8000f54 <main+0xd4>)
 8000ee0:	6013      	str	r3, [r2, #0]
  sequence_queue = xQueueCreate(1, sizeof(char));
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f00b fd48 	bl	800c97c <xQueueGenericCreate>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4a1a      	ldr	r2, [pc, #104]	@ (8000f58 <main+0xd8>)
 8000ef0:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(display_task, "Tarea display", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 4, NULL);
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2300      	movs	r3, #0
 8000efc:	2280      	movs	r2, #128	@ 0x80
 8000efe:	4917      	ldr	r1, [pc, #92]	@ (8000f5c <main+0xdc>)
 8000f00:	4817      	ldr	r0, [pc, #92]	@ (8000f60 <main+0xe0>)
 8000f02:	f00c fb09 	bl	800d518 <xTaskCreate>
  //xTaskCreate(LockControl, "Tarea 04", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL);
  //xTaskCreate(VoiceProcessing, "Tarea 03", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
  xTaskCreate(sd_task, "Tarea SD", 15360, NULL, tskIDLE_PRIORITY + 2, NULL);
 8000f06:	2300      	movs	r3, #0
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f44f 5270 	mov.w	r2, #15360	@ 0x3c00
 8000f14:	4913      	ldr	r1, [pc, #76]	@ (8000f64 <main+0xe4>)
 8000f16:	4814      	ldr	r0, [pc, #80]	@ (8000f68 <main+0xe8>)
 8000f18:	f00c fafe 	bl	800d518 <xTaskCreate>
  xTaskCreate(keypad_task, "Tarea keypad", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	2301      	movs	r3, #1
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	2300      	movs	r3, #0
 8000f26:	2280      	movs	r2, #128	@ 0x80
 8000f28:	4910      	ldr	r1, [pc, #64]	@ (8000f6c <main+0xec>)
 8000f2a:	4811      	ldr	r0, [pc, #68]	@ (8000f70 <main+0xf0>)
 8000f2c:	f00c faf4 	bl	800d518 <xTaskCreate>
  xTaskCreate(idle_task, "Tarea Idle", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 8000f30:	2300      	movs	r3, #0
 8000f32:	9301      	str	r3, [sp, #4]
 8000f34:	2300      	movs	r3, #0
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2300      	movs	r3, #0
 8000f3a:	2280      	movs	r2, #128	@ 0x80
 8000f3c:	490d      	ldr	r1, [pc, #52]	@ (8000f74 <main+0xf4>)
 8000f3e:	480e      	ldr	r0, [pc, #56]	@ (8000f78 <main+0xf8>)
 8000f40:	f00c faea 	bl	800d518 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 8000f44:	f00c fc52 	bl	800d7ec <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <main+0xc8>
 8000f4c:	200002b4 	.word	0x200002b4
 8000f50:	200002b8 	.word	0x200002b8
 8000f54:	200002b0 	.word	0x200002b0
 8000f58:	200002ac 	.word	0x200002ac
 8000f5c:	0800ee6c 	.word	0x0800ee6c
 8000f60:	08002b41 	.word	0x08002b41
 8000f64:	0800ee7c 	.word	0x0800ee7c
 8000f68:	08002e21 	.word	0x08002e21
 8000f6c:	0800ee88 	.word	0x0800ee88
 8000f70:	08002d81 	.word	0x08002d81
 8000f74:	0800ee98 	.word	0x0800ee98
 8000f78:	080014c9 	.word	0x080014c9

08000f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b094      	sub	sp, #80	@ 0x50
 8000f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f82:	f107 0320 	add.w	r3, r7, #32
 8000f86:	2230      	movs	r2, #48	@ 0x30
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f00d ff00 	bl	800ed90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	4b29      	ldr	r3, [pc, #164]	@ (800104c <SystemClock_Config+0xd0>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa8:	4a28      	ldr	r2, [pc, #160]	@ (800104c <SystemClock_Config+0xd0>)
 8000faa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb0:	4b26      	ldr	r3, [pc, #152]	@ (800104c <SystemClock_Config+0xd0>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	4b23      	ldr	r3, [pc, #140]	@ (8001050 <SystemClock_Config+0xd4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fc8:	4a21      	ldr	r2, [pc, #132]	@ (8001050 <SystemClock_Config+0xd4>)
 8000fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	@ (8001050 <SystemClock_Config+0xd4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000fdc:	2309      	movs	r3, #9
 8000fde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fe0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fea:	2302      	movs	r3, #2
 8000fec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000ff8:	2340      	movs	r3, #64	@ 0x40
 8000ffa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001000:	2307      	movs	r3, #7
 8001002:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001004:	f107 0320 	add.w	r3, r7, #32
 8001008:	4618      	mov	r0, r3
 800100a:	f003 fe69 	bl	8004ce0 <HAL_RCC_OscConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001014:	f000 fa85 	bl	8001522 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001018:	230f      	movs	r3, #15
 800101a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800101c:	2302      	movs	r3, #2
 800101e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001024:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001028:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	2102      	movs	r1, #2
 8001034:	4618      	mov	r0, r3
 8001036:	f004 f8cb 	bl	80051d0 <HAL_RCC_ClockConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001040:	f000 fa6f 	bl	8001522 <Error_Handler>
  }
}
 8001044:	bf00      	nop
 8001046:	3750      	adds	r7, #80	@ 0x50
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40023800 	.word	0x40023800
 8001050:	40007000 	.word	0x40007000

08001054 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800105a:	463b      	mov	r3, r7
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001066:	4b22      	ldr	r3, [pc, #136]	@ (80010f0 <MX_ADC1_Init+0x9c>)
 8001068:	4a22      	ldr	r2, [pc, #136]	@ (80010f4 <MX_ADC1_Init+0xa0>)
 800106a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800106c:	4b20      	ldr	r3, [pc, #128]	@ (80010f0 <MX_ADC1_Init+0x9c>)
 800106e:	2200      	movs	r2, #0
 8001070:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001072:	4b1f      	ldr	r3, [pc, #124]	@ (80010f0 <MX_ADC1_Init+0x9c>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001078:	4b1d      	ldr	r3, [pc, #116]	@ (80010f0 <MX_ADC1_Init+0x9c>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800107e:	4b1c      	ldr	r3, [pc, #112]	@ (80010f0 <MX_ADC1_Init+0x9c>)
 8001080:	2200      	movs	r2, #0
 8001082:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001084:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <MX_ADC1_Init+0x9c>)
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800108c:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <MX_ADC1_Init+0x9c>)
 800108e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001092:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001094:	4b16      	ldr	r3, [pc, #88]	@ (80010f0 <MX_ADC1_Init+0x9c>)
 8001096:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800109a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800109c:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <MX_ADC1_Init+0x9c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010a2:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <MX_ADC1_Init+0x9c>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a8:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <MX_ADC1_Init+0x9c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <MX_ADC1_Init+0x9c>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b6:	480e      	ldr	r0, [pc, #56]	@ (80010f0 <MX_ADC1_Init+0x9c>)
 80010b8:	f001 ff88 	bl	8002fcc <HAL_ADC_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80010c2:	f000 fa2e 	bl	8001522 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010ca:	2301      	movs	r3, #1
 80010cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80010ce:	2302      	movs	r3, #2
 80010d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d2:	463b      	mov	r3, r7
 80010d4:	4619      	mov	r1, r3
 80010d6:	4806      	ldr	r0, [pc, #24]	@ (80010f0 <MX_ADC1_Init+0x9c>)
 80010d8:	f002 f93a 	bl	8003350 <HAL_ADC_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80010e2:	f000 fa1e 	bl	8001522 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200000a8 	.word	0x200000a8
 80010f4:	40012000 	.word	0x40012000

080010f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010fc:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <MX_I2C1_Init+0x50>)
 80010fe:	4a13      	ldr	r2, [pc, #76]	@ (800114c <MX_I2C1_Init+0x54>)
 8001100:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001102:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001104:	4a12      	ldr	r2, [pc, #72]	@ (8001150 <MX_I2C1_Init+0x58>)
 8001106:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001108:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <MX_I2C1_Init+0x50>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800110e:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001114:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001116:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800111a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800111c:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <MX_I2C1_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001122:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001128:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <MX_I2C1_Init+0x50>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112e:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001134:	4804      	ldr	r0, [pc, #16]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001136:	f003 f925 	bl	8004384 <HAL_I2C_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001140:	f000 f9ef 	bl	8001522 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000150 	.word	0x20000150
 800114c:	40005400 	.word	0x40005400
 8001150:	00061a80 	.word	0x00061a80

08001154 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001168:	2300      	movs	r3, #0
 800116a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800116c:	4b24      	ldr	r3, [pc, #144]	@ (8001200 <MX_RTC_Init+0xac>)
 800116e:	4a25      	ldr	r2, [pc, #148]	@ (8001204 <MX_RTC_Init+0xb0>)
 8001170:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001172:	4b23      	ldr	r3, [pc, #140]	@ (8001200 <MX_RTC_Init+0xac>)
 8001174:	2200      	movs	r2, #0
 8001176:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001178:	4b21      	ldr	r3, [pc, #132]	@ (8001200 <MX_RTC_Init+0xac>)
 800117a:	227f      	movs	r2, #127	@ 0x7f
 800117c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800117e:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <MX_RTC_Init+0xac>)
 8001180:	22ff      	movs	r2, #255	@ 0xff
 8001182:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001184:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <MX_RTC_Init+0xac>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800118a:	4b1d      	ldr	r3, [pc, #116]	@ (8001200 <MX_RTC_Init+0xac>)
 800118c:	2200      	movs	r2, #0
 800118e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001190:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <MX_RTC_Init+0xac>)
 8001192:	2200      	movs	r2, #0
 8001194:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001196:	481a      	ldr	r0, [pc, #104]	@ (8001200 <MX_RTC_Init+0xac>)
 8001198:	f004 fb5a 	bl	8005850 <HAL_RTC_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80011a2:	f000 f9be 	bl	8001522 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 15;
 80011a6:	230f      	movs	r3, #15
 80011a8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2200      	movs	r2, #0
 80011be:	4619      	mov	r1, r3
 80011c0:	480f      	ldr	r0, [pc, #60]	@ (8001200 <MX_RTC_Init+0xac>)
 80011c2:	f004 fbc8 	bl	8005956 <HAL_RTC_SetTime>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80011cc:	f000 f9a9 	bl	8001522 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80011d0:	2306      	movs	r3, #6
 80011d2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 80011d4:	2307      	movs	r3, #7
 80011d6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 6;
 80011d8:	2306      	movs	r3, #6
 80011da:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 80011dc:	2318      	movs	r3, #24
 80011de:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80011e0:	463b      	mov	r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	4619      	mov	r1, r3
 80011e6:	4806      	ldr	r0, [pc, #24]	@ (8001200 <MX_RTC_Init+0xac>)
 80011e8:	f004 fc4f 	bl	8005a8a <HAL_RTC_SetDate>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80011f2:	f000 f996 	bl	8001522 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200001a4 	.word	0x200001a4
 8001204:	40002800 	.word	0x40002800

08001208 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800120c:	4b17      	ldr	r3, [pc, #92]	@ (800126c <MX_SPI3_Init+0x64>)
 800120e:	4a18      	ldr	r2, [pc, #96]	@ (8001270 <MX_SPI3_Init+0x68>)
 8001210:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001212:	4b16      	ldr	r3, [pc, #88]	@ (800126c <MX_SPI3_Init+0x64>)
 8001214:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001218:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800121a:	4b14      	ldr	r3, [pc, #80]	@ (800126c <MX_SPI3_Init+0x64>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001220:	4b12      	ldr	r3, [pc, #72]	@ (800126c <MX_SPI3_Init+0x64>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001226:	4b11      	ldr	r3, [pc, #68]	@ (800126c <MX_SPI3_Init+0x64>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800122c:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <MX_SPI3_Init+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001232:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <MX_SPI3_Init+0x64>)
 8001234:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001238:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800123a:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <MX_SPI3_Init+0x64>)
 800123c:	2210      	movs	r2, #16
 800123e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001240:	4b0a      	ldr	r3, [pc, #40]	@ (800126c <MX_SPI3_Init+0x64>)
 8001242:	2200      	movs	r2, #0
 8001244:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001246:	4b09      	ldr	r3, [pc, #36]	@ (800126c <MX_SPI3_Init+0x64>)
 8001248:	2200      	movs	r2, #0
 800124a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800124c:	4b07      	ldr	r3, [pc, #28]	@ (800126c <MX_SPI3_Init+0x64>)
 800124e:	2200      	movs	r2, #0
 8001250:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001252:	4b06      	ldr	r3, [pc, #24]	@ (800126c <MX_SPI3_Init+0x64>)
 8001254:	220a      	movs	r2, #10
 8001256:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001258:	4804      	ldr	r0, [pc, #16]	@ (800126c <MX_SPI3_Init+0x64>)
 800125a:	f004 fd3b 	bl	8005cd4 <HAL_SPI_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001264:	f000 f95d 	bl	8001522 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200001c4 	.word	0x200001c4
 8001270:	40003c00 	.word	0x40003c00

08001274 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001288:	463b      	mov	r3, r7
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001290:	4b1d      	ldr	r3, [pc, #116]	@ (8001308 <MX_TIM3_Init+0x94>)
 8001292:	4a1e      	ldr	r2, [pc, #120]	@ (800130c <MX_TIM3_Init+0x98>)
 8001294:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001296:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <MX_TIM3_Init+0x94>)
 8001298:	2200      	movs	r2, #0
 800129a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129c:	4b1a      	ldr	r3, [pc, #104]	@ (8001308 <MX_TIM3_Init+0x94>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4000 - 1;
 80012a2:	4b19      	ldr	r3, [pc, #100]	@ (8001308 <MX_TIM3_Init+0x94>)
 80012a4:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80012a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012aa:	4b17      	ldr	r3, [pc, #92]	@ (8001308 <MX_TIM3_Init+0x94>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b0:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <MX_TIM3_Init+0x94>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012b6:	4814      	ldr	r0, [pc, #80]	@ (8001308 <MX_TIM3_Init+0x94>)
 80012b8:	f005 f96c 	bl	8006594 <HAL_TIM_Base_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80012c2:	f000 f92e 	bl	8001522 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	4619      	mov	r1, r3
 80012d2:	480d      	ldr	r0, [pc, #52]	@ (8001308 <MX_TIM3_Init+0x94>)
 80012d4:	f005 fb2f 	bl	8006936 <HAL_TIM_ConfigClockSource>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80012de:	f000 f920 	bl	8001522 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012e2:	2320      	movs	r3, #32
 80012e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012ea:	463b      	mov	r3, r7
 80012ec:	4619      	mov	r1, r3
 80012ee:	4806      	ldr	r0, [pc, #24]	@ (8001308 <MX_TIM3_Init+0x94>)
 80012f0:	f005 fd36 	bl	8006d60 <HAL_TIMEx_MasterConfigSynchronization>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80012fa:	f000 f912 	bl	8001522 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000021c 	.word	0x2000021c
 800130c:	40000400 	.word	0x40000400

08001310 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001314:	4b11      	ldr	r3, [pc, #68]	@ (800135c <MX_USART2_UART_Init+0x4c>)
 8001316:	4a12      	ldr	r2, [pc, #72]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 8001318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800131a:	4b10      	ldr	r3, [pc, #64]	@ (800135c <MX_USART2_UART_Init+0x4c>)
 800131c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001322:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <MX_USART2_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001328:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <MX_USART2_UART_Init+0x4c>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800132e:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <MX_USART2_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001334:	4b09      	ldr	r3, [pc, #36]	@ (800135c <MX_USART2_UART_Init+0x4c>)
 8001336:	220c      	movs	r2, #12
 8001338:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133a:	4b08      	ldr	r3, [pc, #32]	@ (800135c <MX_USART2_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001340:	4b06      	ldr	r3, [pc, #24]	@ (800135c <MX_USART2_UART_Init+0x4c>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001346:	4805      	ldr	r0, [pc, #20]	@ (800135c <MX_USART2_UART_Init+0x4c>)
 8001348:	f005 fd8c 	bl	8006e64 <HAL_UART_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001352:	f000 f8e6 	bl	8001522 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000264 	.word	0x20000264
 8001360:	40004400 	.word	0x40004400

08001364 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <MX_DMA_Init+0x3c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	4a0b      	ldr	r2, [pc, #44]	@ (80013a0 <MX_DMA_Init+0x3c>)
 8001374:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001378:	6313      	str	r3, [r2, #48]	@ 0x30
 800137a:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <MX_DMA_Init+0x3c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2105      	movs	r1, #5
 800138a:	2038      	movs	r0, #56	@ 0x38
 800138c:	f002 fac0 	bl	8003910 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001390:	2038      	movs	r0, #56	@ 0x38
 8001392:	f002 fad9 	bl	8003948 <HAL_NVIC_EnableIRQ>

}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800

080013a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	@ 0x28
 80013a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	4b3f      	ldr	r3, [pc, #252]	@ (80014bc <MX_GPIO_Init+0x118>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a3e      	ldr	r2, [pc, #248]	@ (80014bc <MX_GPIO_Init+0x118>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b3c      	ldr	r3, [pc, #240]	@ (80014bc <MX_GPIO_Init+0x118>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b38      	ldr	r3, [pc, #224]	@ (80014bc <MX_GPIO_Init+0x118>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a37      	ldr	r2, [pc, #220]	@ (80014bc <MX_GPIO_Init+0x118>)
 80013e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b35      	ldr	r3, [pc, #212]	@ (80014bc <MX_GPIO_Init+0x118>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	4b31      	ldr	r3, [pc, #196]	@ (80014bc <MX_GPIO_Init+0x118>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a30      	ldr	r2, [pc, #192]	@ (80014bc <MX_GPIO_Init+0x118>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b2e      	ldr	r3, [pc, #184]	@ (80014bc <MX_GPIO_Init+0x118>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	4b2a      	ldr	r3, [pc, #168]	@ (80014bc <MX_GPIO_Init+0x118>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	4a29      	ldr	r2, [pc, #164]	@ (80014bc <MX_GPIO_Init+0x118>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6313      	str	r3, [r2, #48]	@ 0x30
 800141e:	4b27      	ldr	r3, [pc, #156]	@ (80014bc <MX_GPIO_Init+0x118>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|CS_SD_Pin, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	f248 0120 	movw	r1, #32800	@ 0x8020
 8001430:	4823      	ldr	r0, [pc, #140]	@ (80014c0 <MX_GPIO_Init+0x11c>)
 8001432:	f002 ff8d 	bl	8004350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001436:	2200      	movs	r2, #0
 8001438:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 800143c:	4821      	ldr	r0, [pc, #132]	@ (80014c4 <MX_GPIO_Init+0x120>)
 800143e:	f002 ff87 	bl	8004350 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001442:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001448:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800144c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	481a      	ldr	r0, [pc, #104]	@ (80014c4 <MX_GPIO_Init+0x120>)
 800145a:	f002 fddd 	bl	8004018 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800145e:	230f      	movs	r3, #15
 8001460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001462:	2300      	movs	r3, #0
 8001464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001466:	2302      	movs	r3, #2
 8001468:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	4814      	ldr	r0, [pc, #80]	@ (80014c4 <MX_GPIO_Init+0x120>)
 8001472:	f002 fdd1 	bl	8004018 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin CS_SD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|CS_SD_Pin;
 8001476:	f248 0320 	movw	r3, #32800	@ 0x8020
 800147a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147c:	2301      	movs	r3, #1
 800147e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	480c      	ldr	r0, [pc, #48]	@ (80014c0 <MX_GPIO_Init+0x11c>)
 8001490:	f002 fdc2 	bl	8004018 <HAL_GPIO_Init>

  /*Configure GPIO pins : Lock_Pin PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001494:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8001498:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149a:	2301      	movs	r3, #1
 800149c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <MX_GPIO_Init+0x120>)
 80014ae:	f002 fdb3 	bl	8004018 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014b2:	bf00      	nop
 80014b4:	3728      	adds	r7, #40	@ 0x28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020000 	.word	0x40020000
 80014c4:	40020800 	.word	0x40020800

080014c8 <idle_task>:

/* USER CODE BEGIN 4 */
void idle_task(void *pvParameters){
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	while(1);
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <idle_task+0x8>

080014d4 <HAL_ADC_ConvCpltCallback>:
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim3);
 80014dc:	4806      	ldr	r0, [pc, #24]	@ (80014f8 <HAL_ADC_ConvCpltCallback+0x24>)
 80014de:	f005 f90b 	bl	80066f8 <HAL_TIM_Base_Stop_IT>
	HAL_ADC_Stop_DMA(&hadc1);
 80014e2:	4806      	ldr	r0, [pc, #24]	@ (80014fc <HAL_ADC_ConvCpltCallback+0x28>)
 80014e4:	f001 fec5 	bl	8003272 <HAL_ADC_Stop_DMA>
	conv_cplt_flag = true;
 80014e8:	4b05      	ldr	r3, [pc, #20]	@ (8001500 <HAL_ADC_ConvCpltCallback+0x2c>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2000021c 	.word	0x2000021c
 80014fc:	200000a8 	.word	0x200000a8
 8001500:	200002bc 	.word	0x200002bc

08001504 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001514:	d101      	bne.n	800151a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001516:	f001 fd39 	bl	8002f8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001526:	b672      	cpsid	i
}
 8001528:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800152a:	bf00      	nop
 800152c:	e7fd      	b.n	800152a <Error_Handler+0x8>
	...

08001530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <HAL_MspInit+0x54>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153e:	4a11      	ldr	r2, [pc, #68]	@ (8001584 <HAL_MspInit+0x54>)
 8001540:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001544:	6453      	str	r3, [r2, #68]	@ 0x44
 8001546:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <HAL_MspInit+0x54>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <HAL_MspInit+0x54>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	4a0a      	ldr	r2, [pc, #40]	@ (8001584 <HAL_MspInit+0x54>)
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001560:	6413      	str	r3, [r2, #64]	@ 0x40
 8001562:	4b08      	ldr	r3, [pc, #32]	@ (8001584 <HAL_MspInit+0x54>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	210f      	movs	r1, #15
 8001572:	f06f 0001 	mvn.w	r0, #1
 8001576:	f002 f9cb 	bl	8003910 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800

08001588 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	@ 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a32      	ldr	r2, [pc, #200]	@ (8001670 <HAL_ADC_MspInit+0xe8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d15e      	bne.n	8001668 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	4b31      	ldr	r3, [pc, #196]	@ (8001674 <HAL_ADC_MspInit+0xec>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b2:	4a30      	ldr	r2, [pc, #192]	@ (8001674 <HAL_ADC_MspInit+0xec>)
 80015b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001674 <HAL_ADC_MspInit+0xec>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001674 <HAL_ADC_MspInit+0xec>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	4a29      	ldr	r2, [pc, #164]	@ (8001674 <HAL_ADC_MspInit+0xec>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d6:	4b27      	ldr	r3, [pc, #156]	@ (8001674 <HAL_ADC_MspInit+0xec>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015e2:	2301      	movs	r3, #1
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e6:	2303      	movs	r3, #3
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	4820      	ldr	r0, [pc, #128]	@ (8001678 <HAL_ADC_MspInit+0xf0>)
 80015f6:	f002 fd0f 	bl	8004018 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80015fa:	4b20      	ldr	r3, [pc, #128]	@ (800167c <HAL_ADC_MspInit+0xf4>)
 80015fc:	4a20      	ldr	r2, [pc, #128]	@ (8001680 <HAL_ADC_MspInit+0xf8>)
 80015fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001600:	4b1e      	ldr	r3, [pc, #120]	@ (800167c <HAL_ADC_MspInit+0xf4>)
 8001602:	2200      	movs	r2, #0
 8001604:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001606:	4b1d      	ldr	r3, [pc, #116]	@ (800167c <HAL_ADC_MspInit+0xf4>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800160c:	4b1b      	ldr	r3, [pc, #108]	@ (800167c <HAL_ADC_MspInit+0xf4>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001612:	4b1a      	ldr	r3, [pc, #104]	@ (800167c <HAL_ADC_MspInit+0xf4>)
 8001614:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001618:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800161a:	4b18      	ldr	r3, [pc, #96]	@ (800167c <HAL_ADC_MspInit+0xf4>)
 800161c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001620:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001622:	4b16      	ldr	r3, [pc, #88]	@ (800167c <HAL_ADC_MspInit+0xf4>)
 8001624:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001628:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800162a:	4b14      	ldr	r3, [pc, #80]	@ (800167c <HAL_ADC_MspInit+0xf4>)
 800162c:	2200      	movs	r2, #0
 800162e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <HAL_ADC_MspInit+0xf4>)
 8001632:	2200      	movs	r2, #0
 8001634:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001636:	4b11      	ldr	r3, [pc, #68]	@ (800167c <HAL_ADC_MspInit+0xf4>)
 8001638:	2200      	movs	r2, #0
 800163a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800163c:	480f      	ldr	r0, [pc, #60]	@ (800167c <HAL_ADC_MspInit+0xf4>)
 800163e:	f002 f991 	bl	8003964 <HAL_DMA_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001648:	f7ff ff6b 	bl	8001522 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a0b      	ldr	r2, [pc, #44]	@ (800167c <HAL_ADC_MspInit+0xf4>)
 8001650:	639a      	str	r2, [r3, #56]	@ 0x38
 8001652:	4a0a      	ldr	r2, [pc, #40]	@ (800167c <HAL_ADC_MspInit+0xf4>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2105      	movs	r1, #5
 800165c:	2012      	movs	r0, #18
 800165e:	f002 f957 	bl	8003910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001662:	2012      	movs	r0, #18
 8001664:	f002 f970 	bl	8003948 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001668:	bf00      	nop
 800166a:	3728      	adds	r7, #40	@ 0x28
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40012000 	.word	0x40012000
 8001674:	40023800 	.word	0x40023800
 8001678:	40020000 	.word	0x40020000
 800167c:	200000f0 	.word	0x200000f0
 8001680:	40026410 	.word	0x40026410

08001684 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	@ 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a19      	ldr	r2, [pc, #100]	@ (8001708 <HAL_I2C_MspInit+0x84>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d12b      	bne.n	80016fe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	4b18      	ldr	r3, [pc, #96]	@ (800170c <HAL_I2C_MspInit+0x88>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a17      	ldr	r2, [pc, #92]	@ (800170c <HAL_I2C_MspInit+0x88>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b15      	ldr	r3, [pc, #84]	@ (800170c <HAL_I2C_MspInit+0x88>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016c2:	23c0      	movs	r3, #192	@ 0xc0
 80016c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c6:	2312      	movs	r3, #18
 80016c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016d2:	2304      	movs	r3, #4
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	480c      	ldr	r0, [pc, #48]	@ (8001710 <HAL_I2C_MspInit+0x8c>)
 80016de:	f002 fc9b 	bl	8004018 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	4b09      	ldr	r3, [pc, #36]	@ (800170c <HAL_I2C_MspInit+0x88>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	4a08      	ldr	r2, [pc, #32]	@ (800170c <HAL_I2C_MspInit+0x88>)
 80016ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f2:	4b06      	ldr	r3, [pc, #24]	@ (800170c <HAL_I2C_MspInit+0x88>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016fe:	bf00      	nop
 8001700:	3728      	adds	r7, #40	@ 0x28
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40005400 	.word	0x40005400
 800170c:	40023800 	.word	0x40023800
 8001710:	40020400 	.word	0x40020400

08001714 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a0c      	ldr	r2, [pc, #48]	@ (8001764 <HAL_RTC_MspInit+0x50>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d111      	bne.n	800175a <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001736:	2302      	movs	r3, #2
 8001738:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800173a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800173e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	4618      	mov	r0, r3
 8001746:	f003 ff95 	bl	8005674 <HAL_RCCEx_PeriphCLKConfig>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001750:	f7ff fee7 	bl	8001522 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001754:	4b04      	ldr	r3, [pc, #16]	@ (8001768 <HAL_RTC_MspInit+0x54>)
 8001756:	2201      	movs	r2, #1
 8001758:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800175a:	bf00      	nop
 800175c:	3720      	adds	r7, #32
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40002800 	.word	0x40002800
 8001768:	42470e3c 	.word	0x42470e3c

0800176c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	@ 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a22      	ldr	r2, [pc, #136]	@ (8001814 <HAL_SPI_MspInit+0xa8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d13d      	bne.n	800180a <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	4b21      	ldr	r3, [pc, #132]	@ (8001818 <HAL_SPI_MspInit+0xac>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	4a20      	ldr	r2, [pc, #128]	@ (8001818 <HAL_SPI_MspInit+0xac>)
 8001798:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800179c:	6413      	str	r3, [r2, #64]	@ 0x40
 800179e:	4b1e      	ldr	r3, [pc, #120]	@ (8001818 <HAL_SPI_MspInit+0xac>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001818 <HAL_SPI_MspInit+0xac>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	4a19      	ldr	r2, [pc, #100]	@ (8001818 <HAL_SPI_MspInit+0xac>)
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ba:	4b17      	ldr	r3, [pc, #92]	@ (8001818 <HAL_SPI_MspInit+0xac>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d4:	2303      	movs	r3, #3
 80017d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017d8:	2306      	movs	r3, #6
 80017da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	4619      	mov	r1, r3
 80017e2:	480e      	ldr	r0, [pc, #56]	@ (800181c <HAL_SPI_MspInit+0xb0>)
 80017e4:	f002 fc18 	bl	8004018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80017e8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80017ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f6:	2303      	movs	r3, #3
 80017f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017fa:	2306      	movs	r3, #6
 80017fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4619      	mov	r1, r3
 8001804:	4805      	ldr	r0, [pc, #20]	@ (800181c <HAL_SPI_MspInit+0xb0>)
 8001806:	f002 fc07 	bl	8004018 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800180a:	bf00      	nop
 800180c:	3728      	adds	r7, #40	@ 0x28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40003c00 	.word	0x40003c00
 8001818:	40023800 	.word	0x40023800
 800181c:	40020800 	.word	0x40020800

08001820 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0e      	ldr	r2, [pc, #56]	@ (8001868 <HAL_TIM_Base_MspInit+0x48>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d115      	bne.n	800185e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	4b0d      	ldr	r3, [pc, #52]	@ (800186c <HAL_TIM_Base_MspInit+0x4c>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183a:	4a0c      	ldr	r2, [pc, #48]	@ (800186c <HAL_TIM_Base_MspInit+0x4c>)
 800183c:	f043 0302 	orr.w	r3, r3, #2
 8001840:	6413      	str	r3, [r2, #64]	@ 0x40
 8001842:	4b0a      	ldr	r3, [pc, #40]	@ (800186c <HAL_TIM_Base_MspInit+0x4c>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2105      	movs	r1, #5
 8001852:	201d      	movs	r0, #29
 8001854:	f002 f85c 	bl	8003910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001858:	201d      	movs	r0, #29
 800185a:	f002 f875 	bl	8003948 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40000400 	.word	0x40000400
 800186c:	40023800 	.word	0x40023800

08001870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	@ 0x28
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a19      	ldr	r2, [pc, #100]	@ (80018f4 <HAL_UART_MspInit+0x84>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d12b      	bne.n	80018ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <HAL_UART_MspInit+0x88>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	4a17      	ldr	r2, [pc, #92]	@ (80018f8 <HAL_UART_MspInit+0x88>)
 800189c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018a2:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <HAL_UART_MspInit+0x88>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <HAL_UART_MspInit+0x88>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	4a10      	ldr	r2, [pc, #64]	@ (80018f8 <HAL_UART_MspInit+0x88>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018be:	4b0e      	ldr	r3, [pc, #56]	@ (80018f8 <HAL_UART_MspInit+0x88>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018ca:	230c      	movs	r3, #12
 80018cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018da:	2307      	movs	r3, #7
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	4805      	ldr	r0, [pc, #20]	@ (80018fc <HAL_UART_MspInit+0x8c>)
 80018e6:	f002 fb97 	bl	8004018 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80018ea:	bf00      	nop
 80018ec:	3728      	adds	r7, #40	@ 0x28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40004400 	.word	0x40004400
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020000 	.word	0x40020000

08001900 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08e      	sub	sp, #56	@ 0x38
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	4b34      	ldr	r3, [pc, #208]	@ (80019e8 <HAL_InitTick+0xe8>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001918:	4a33      	ldr	r2, [pc, #204]	@ (80019e8 <HAL_InitTick+0xe8>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001920:	4b31      	ldr	r3, [pc, #196]	@ (80019e8 <HAL_InitTick+0xe8>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800192c:	f107 0210 	add.w	r2, r7, #16
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4611      	mov	r1, r2
 8001936:	4618      	mov	r0, r3
 8001938:	f003 fe6a 	bl	8005610 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800193c:	6a3b      	ldr	r3, [r7, #32]
 800193e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001942:	2b00      	cmp	r3, #0
 8001944:	d103      	bne.n	800194e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001946:	f003 fe3b 	bl	80055c0 <HAL_RCC_GetPCLK1Freq>
 800194a:	6378      	str	r0, [r7, #52]	@ 0x34
 800194c:	e004      	b.n	8001958 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800194e:	f003 fe37 	bl	80055c0 <HAL_RCC_GetPCLK1Freq>
 8001952:	4603      	mov	r3, r0
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800195a:	4a24      	ldr	r2, [pc, #144]	@ (80019ec <HAL_InitTick+0xec>)
 800195c:	fba2 2303 	umull	r2, r3, r2, r3
 8001960:	0c9b      	lsrs	r3, r3, #18
 8001962:	3b01      	subs	r3, #1
 8001964:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001966:	4b22      	ldr	r3, [pc, #136]	@ (80019f0 <HAL_InitTick+0xf0>)
 8001968:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800196c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800196e:	4b20      	ldr	r3, [pc, #128]	@ (80019f0 <HAL_InitTick+0xf0>)
 8001970:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001974:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001976:	4a1e      	ldr	r2, [pc, #120]	@ (80019f0 <HAL_InitTick+0xf0>)
 8001978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800197a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800197c:	4b1c      	ldr	r3, [pc, #112]	@ (80019f0 <HAL_InitTick+0xf0>)
 800197e:	2200      	movs	r2, #0
 8001980:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001982:	4b1b      	ldr	r3, [pc, #108]	@ (80019f0 <HAL_InitTick+0xf0>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001988:	4b19      	ldr	r3, [pc, #100]	@ (80019f0 <HAL_InitTick+0xf0>)
 800198a:	2200      	movs	r2, #0
 800198c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800198e:	4818      	ldr	r0, [pc, #96]	@ (80019f0 <HAL_InitTick+0xf0>)
 8001990:	f004 fe00 	bl	8006594 <HAL_TIM_Base_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800199a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d11b      	bne.n	80019da <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80019a2:	4813      	ldr	r0, [pc, #76]	@ (80019f0 <HAL_InitTick+0xf0>)
 80019a4:	f004 fe46 	bl	8006634 <HAL_TIM_Base_Start_IT>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80019ae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d111      	bne.n	80019da <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019b6:	201c      	movs	r0, #28
 80019b8:	f001 ffc6 	bl	8003948 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b0f      	cmp	r3, #15
 80019c0:	d808      	bhi.n	80019d4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80019c2:	2200      	movs	r2, #0
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	201c      	movs	r0, #28
 80019c8:	f001 ffa2 	bl	8003910 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019cc:	4a09      	ldr	r2, [pc, #36]	@ (80019f4 <HAL_InitTick+0xf4>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	e002      	b.n	80019da <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80019da:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3738      	adds	r7, #56	@ 0x38
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800
 80019ec:	431bde83 	.word	0x431bde83
 80019f0:	200002c0 	.word	0x200002c0
 80019f4:	20000014 	.word	0x20000014

080019f8 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80019fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a38 <SDTimer_Handler+0x40>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d006      	beq.n	8001a14 <SDTimer_Handler+0x1c>
    Timer1--;
 8001a06:	4b0c      	ldr	r3, [pc, #48]	@ (8001a38 <SDTimer_Handler+0x40>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b09      	ldr	r3, [pc, #36]	@ (8001a38 <SDTimer_Handler+0x40>)
 8001a12:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001a14:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <SDTimer_Handler+0x44>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d006      	beq.n	8001a2c <SDTimer_Handler+0x34>
    Timer2--;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	@ (8001a3c <SDTimer_Handler+0x44>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b04      	ldr	r3, [pc, #16]	@ (8001a3c <SDTimer_Handler+0x44>)
 8001a2a:	701a      	strb	r2, [r3, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000309 	.word	0x20000309
 8001a3c:	2000030a 	.word	0x2000030a

08001a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <NMI_Handler+0x4>

08001a48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <HardFault_Handler+0x4>

08001a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <MemManage_Handler+0x4>

08001a58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <BusFault_Handler+0x4>

08001a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <UsageFault_Handler+0x4>

08001a68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a7c:	4802      	ldr	r0, [pc, #8]	@ (8001a88 <ADC_IRQHandler+0x10>)
 8001a7e:	f001 fae8 	bl	8003052 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200000a8 	.word	0x200000a8

08001a8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  FatFsCnt++;
 8001a90:	4b0a      	ldr	r3, [pc, #40]	@ (8001abc <TIM2_IRQHandler+0x30>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	3301      	adds	r3, #1
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <TIM2_IRQHandler+0x30>)
 8001a9c:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10){
 8001a9e:	4b07      	ldr	r3, [pc, #28]	@ (8001abc <TIM2_IRQHandler+0x30>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b09      	cmp	r3, #9
 8001aa6:	d904      	bls.n	8001ab2 <TIM2_IRQHandler+0x26>
	  FatFsCnt = 0;
 8001aa8:	4b04      	ldr	r3, [pc, #16]	@ (8001abc <TIM2_IRQHandler+0x30>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 8001aae:	f7ff ffa3 	bl	80019f8 <SDTimer_Handler>
  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ab2:	4803      	ldr	r0, [pc, #12]	@ (8001ac0 <TIM2_IRQHandler+0x34>)
 8001ab4:	f004 fe4f 	bl	8006756 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000308 	.word	0x20000308
 8001ac0:	200002c0 	.word	0x200002c0

08001ac4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ac8:	4802      	ldr	r0, [pc, #8]	@ (8001ad4 <TIM3_IRQHandler+0x10>)
 8001aca:	f004 fe44 	bl	8006756 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	2000021c 	.word	0x2000021c

08001ad8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001adc:	4802      	ldr	r0, [pc, #8]	@ (8001ae8 <DMA2_Stream0_IRQHandler+0x10>)
 8001ade:	f002 f85f 	bl	8003ba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200000f0 	.word	0x200000f0

08001aec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af0:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <SystemInit+0x20>)
 8001af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001af6:	4a05      	ldr	r2, [pc, #20]	@ (8001b0c <SystemInit+0x20>)
 8001af8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001afc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8001b10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b14:	f7ff ffea 	bl	8001aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b18:	480c      	ldr	r0, [pc, #48]	@ (8001b4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b1a:	490d      	ldr	r1, [pc, #52]	@ (8001b50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b20:	e002      	b.n	8001b28 <LoopCopyDataInit>

08001b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b26:	3304      	adds	r3, #4

08001b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b2c:	d3f9      	bcc.n	8001b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b30:	4c0a      	ldr	r4, [pc, #40]	@ (8001b5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b34:	e001      	b.n	8001b3a <LoopFillZerobss>

08001b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b38:	3204      	adds	r2, #4

08001b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b3c:	d3fb      	bcc.n	8001b36 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001b3e:	f00d f935 	bl	800edac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b42:	f7ff f99d 	bl	8000e80 <main>
  bx  lr    
 8001b46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b48:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b50:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001b54:	08012f98 	.word	0x08012f98
  ldr r2, =_sbss
 8001b58:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001b5c:	200032cc 	.word	0x200032cc

08001b60 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b60:	e7fe      	b.n	8001b60 <DMA1_Stream0_IRQHandler>

08001b62 <display_init>:

#define LINE_HEIGHT 18  // Altura de la fuente (ajustar según la fuente usada)
#define DISPLAY_WIDTH 128
#define DISPLAY_HEIGHT 64
/*================[Public functions]=====================*/
void display_init(void){
 8001b62:	b580      	push	{r7, lr}
 8001b64:	af00      	add	r7, sp, #0
	/*Wrapper de la función que inicializa el display*/
	ssd1306_Init();
 8001b66:	f000 fa53 	bl	8002010 <ssd1306_Init>
	return;
 8001b6a:	bf00      	nop
}
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <display_text>:

void display_text(const char *text,  uint8_t font_size) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	70fb      	strb	r3, [r7, #3]
    uint8_t x = 0;  			// Posición inicial en X
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	73fb      	strb	r3, [r7, #15]
    uint8_t y = 0;  			// Posición inicial en Y
 8001b80:	2300      	movs	r3, #0
 8001b82:	73bb      	strb	r3, [r7, #14]
    uint8_t char_width = 0;   	// Ancho del carácter actual
 8001b84:	2300      	movs	r3, #0
 8001b86:	737b      	strb	r3, [r7, #13]
    uint8_t line_height = 0;  	// Altura de la línea actual
 8001b88:	2300      	movs	r3, #0
 8001b8a:	733b      	strb	r3, [r7, #12]
    // Configurar la fuente según el tamaño
    switch (font_size) {
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	d010      	beq.n	8001bb4 <display_text+0x44>
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	dc13      	bgt.n	8001bbe <display_text+0x4e>
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d002      	beq.n	8001ba0 <display_text+0x30>
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d005      	beq.n	8001baa <display_text+0x3a>
 8001b9e:	e00e      	b.n	8001bbe <display_text+0x4e>
        case 1: 									// Tamaño pequeño
            char_width = 7;
 8001ba0:	2307      	movs	r3, #7
 8001ba2:	737b      	strb	r3, [r7, #13]
            line_height = 10;
 8001ba4:	230a      	movs	r3, #10
 8001ba6:	733b      	strb	r3, [r7, #12]
            break;
 8001ba8:	e00e      	b.n	8001bc8 <display_text+0x58>
        case 2: 									// Tamaño mediano
            char_width = 11;
 8001baa:	230b      	movs	r3, #11
 8001bac:	737b      	strb	r3, [r7, #13]
            line_height = 18;
 8001bae:	2312      	movs	r3, #18
 8001bb0:	733b      	strb	r3, [r7, #12]
            break;
 8001bb2:	e009      	b.n	8001bc8 <display_text+0x58>
        case 3: 									// Tamaño grande
            char_width = 16;
 8001bb4:	2310      	movs	r3, #16
 8001bb6:	737b      	strb	r3, [r7, #13]
            line_height = 24;
 8001bb8:	2318      	movs	r3, #24
 8001bba:	733b      	strb	r3, [r7, #12]
            break;
 8001bbc:	e004      	b.n	8001bc8 <display_text+0x58>
        default: 									// Tamaño por defecto
            char_width = 7;
 8001bbe:	2307      	movs	r3, #7
 8001bc0:	737b      	strb	r3, [r7, #13]
            line_height = 10;
 8001bc2:	230a      	movs	r3, #10
 8001bc4:	733b      	strb	r3, [r7, #12]
            break;
 8001bc6:	bf00      	nop
    }

    ssd1306_Fill(Black);  // Limpiar la pantalla
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f000 fa8b 	bl	80020e4 <ssd1306_Fill>

    while (*text) {
 8001bce:	e053      	b.n	8001c78 <display_text+0x108>
        // Verificar si es un salto de línea manual
        if (*text == '\n') {
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b0a      	cmp	r3, #10
 8001bd6:	d106      	bne.n	8001be6 <display_text+0x76>
            y += line_height;  											// Avanzo a la siguiente linea
 8001bd8:	7bba      	ldrb	r2, [r7, #14]
 8001bda:	7b3b      	ldrb	r3, [r7, #12]
 8001bdc:	4413      	add	r3, r2
 8001bde:	73bb      	strb	r3, [r7, #14]
            x = 0;             											// Reinicio x
 8001be0:	2300      	movs	r3, #0
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	e040      	b.n	8001c68 <display_text+0xf8>
        } else {
            // Escribir el carácter actual
            ssd1306_SetCursor(x, y);
 8001be6:	7bba      	ldrb	r2, [r7, #14]
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 fbc3 	bl	8002378 <ssd1306_SetCursor>
            if(font_size == 1){
 8001bf2:	78fb      	ldrb	r3, [r7, #3]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d108      	bne.n	8001c0a <display_text+0x9a>
            	ssd1306_WriteChar(*text, Font_7x10, White);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7818      	ldrb	r0, [r3, #0]
 8001bfc:	4b24      	ldr	r3, [pc, #144]	@ (8001c90 <display_text+0x120>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	9200      	str	r2, [sp, #0]
 8001c02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c04:	f000 fb02 	bl	800220c <ssd1306_WriteChar>
 8001c08:	e01f      	b.n	8001c4a <display_text+0xda>
            }
            else if(font_size == 2){
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d108      	bne.n	8001c22 <display_text+0xb2>
            	ssd1306_WriteChar(*text, Font_11x18, White);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	7818      	ldrb	r0, [r3, #0]
 8001c14:	4b1f      	ldr	r3, [pc, #124]	@ (8001c94 <display_text+0x124>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	9200      	str	r2, [sp, #0]
 8001c1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c1c:	f000 faf6 	bl	800220c <ssd1306_WriteChar>
 8001c20:	e013      	b.n	8001c4a <display_text+0xda>
            }
            else if(font_size == 3){
 8001c22:	78fb      	ldrb	r3, [r7, #3]
 8001c24:	2b03      	cmp	r3, #3
 8001c26:	d108      	bne.n	8001c3a <display_text+0xca>
            	ssd1306_WriteChar(*text, Font_16x24, White);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7818      	ldrb	r0, [r3, #0]
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c98 <display_text+0x128>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	9200      	str	r2, [sp, #0]
 8001c32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c34:	f000 faea 	bl	800220c <ssd1306_WriteChar>
 8001c38:	e007      	b.n	8001c4a <display_text+0xda>
            }
            else{
            	ssd1306_WriteChar(*text, Font_7x10, White);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	7818      	ldrb	r0, [r3, #0]
 8001c3e:	4b14      	ldr	r3, [pc, #80]	@ (8001c90 <display_text+0x120>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	9200      	str	r2, [sp, #0]
 8001c44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c46:	f000 fae1 	bl	800220c <ssd1306_WriteChar>
            }

            // Avanzar la posición X
            x += char_width;  // Avanzar por el ancho de la fuente
 8001c4a:	7bfa      	ldrb	r2, [r7, #15]
 8001c4c:	7b7b      	ldrb	r3, [r7, #13]
 8001c4e:	4413      	add	r3, r2
 8001c50:	73fb      	strb	r3, [r7, #15]
            if (x + char_width > DISPLAY_WIDTH) {  							// Si se pasa del ancho de pantalla
 8001c52:	7bfa      	ldrb	r2, [r7, #15]
 8001c54:	7b7b      	ldrb	r3, [r7, #13]
 8001c56:	4413      	add	r3, r2
 8001c58:	2b80      	cmp	r3, #128	@ 0x80
 8001c5a:	dd05      	ble.n	8001c68 <display_text+0xf8>
                x = 0;                      								// Reinicio x
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]
                y += line_height;           								// Avanzo a la siguiente linea
 8001c60:	7bba      	ldrb	r2, [r7, #14]
 8001c62:	7b3b      	ldrb	r3, [r7, #12]
 8001c64:	4413      	add	r3, r2
 8001c66:	73bb      	strb	r3, [r7, #14]
            }
        }

        // Avanzar al siguiente carácter
        text++;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	607b      	str	r3, [r7, #4]

        // Verificar si alcanzamos el final de la pantalla
        if (y + line_height > DISPLAY_HEIGHT) {
 8001c6e:	7bba      	ldrb	r2, [r7, #14]
 8001c70:	7b3b      	ldrb	r3, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	2b40      	cmp	r3, #64	@ 0x40
 8001c76:	dc04      	bgt.n	8001c82 <display_text+0x112>
    while (*text) {
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1a7      	bne.n	8001bd0 <display_text+0x60>
 8001c80:	e000      	b.n	8001c84 <display_text+0x114>
            break;  // No hay más espacio para mostrar texto
 8001c82:	bf00      	nop
        }
    }

    ssd1306_UpdateScreen();  // Actualizar pantalla
 8001c84:	f000 fa46 	bl	8002114 <ssd1306_UpdateScreen>
}
 8001c88:	bf00      	nop
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	08012b00 	.word	0x08012b00
 8001c94:	08012b0c 	.word	0x08012b0c
 8001c98:	08012b24 	.word	0x08012b24

08001c9c <display_start_msg>:

void display_start_msg(void){
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af02      	add	r7, sp, #8
	/*Muestra mensaje de insertar clave*/
	uint8_t x = 5;
 8001ca2:	2305      	movs	r3, #5
 8001ca4:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8001caa:	2000      	movs	r0, #0
 8001cac:	f000 fa1a 	bl	80020e4 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001cb0:	79ba      	ldrb	r2, [r7, #6]
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 fb5e 	bl	8002378 <ssd1306_SetCursor>
	ssd1306_WriteString("Ingrese", Font_16x26, White);
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001cfc <display_start_msg+0x60>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	9200      	str	r2, [sp, #0]
 8001cc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc4:	480e      	ldr	r0, [pc, #56]	@ (8001d00 <display_start_msg+0x64>)
 8001cc6:	f000 fb31 	bl	800232c <ssd1306_WriteString>
	x += 15;
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	330f      	adds	r3, #15
 8001cce:	71fb      	strb	r3, [r7, #7]
	y += 28;
 8001cd0:	79bb      	ldrb	r3, [r7, #6]
 8001cd2:	331c      	adds	r3, #28
 8001cd4:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8001cd6:	79ba      	ldrb	r2, [r7, #6]
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 fb4b 	bl	8002378 <ssd1306_SetCursor>
	ssd1306_WriteString("clave", Font_16x26, White);
 8001ce2:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <display_start_msg+0x60>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	9200      	str	r2, [sp, #0]
 8001ce8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cea:	4806      	ldr	r0, [pc, #24]	@ (8001d04 <display_start_msg+0x68>)
 8001cec:	f000 fb1e 	bl	800232c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001cf0:	f000 fa10 	bl	8002114 <ssd1306_UpdateScreen>
	return;
 8001cf4:	bf00      	nop
}
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	08012b18 	.word	0x08012b18
 8001d00:	0800eea4 	.word	0x0800eea4
 8001d04:	0800eeac 	.word	0x0800eeac

08001d08 <display_sequence_entry_msg>:

void display_sequence_entry_msg(uint8_t input_cont){
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af02      	add	r7, sp, #8
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
	/*Maneja el ingreso de digitos en el display*/
	char message[SEQUENCE_LENGTH + 1] = {0};
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	f107 0310 	add.w	r3, r7, #16
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	460a      	mov	r2, r1
 8001d1e:	801a      	strh	r2, [r3, #0]
 8001d20:	460a      	mov	r2, r1
 8001d22:	709a      	strb	r2, [r3, #2]
	uint8_t x = 10;														//x e y definen coordenadas en pantalla
 8001d24:	230a      	movs	r3, #10
 8001d26:	75bb      	strb	r3, [r7, #22]
	uint8_t y = 26;
 8001d28:	231a      	movs	r3, #26
 8001d2a:	757b      	strb	r3, [r7, #21]
	//Chequeo que counter no supere el numero maximo de digitos
	if(input_cont <= SEQUENCE_LENGTH){
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	2b06      	cmp	r3, #6
 8001d30:	d823      	bhi.n	8001d7a <display_sequence_entry_msg+0x72>
		//Armo el string a mostrar en el display
		for(uint8_t i = 0; i < input_cont; i++){
 8001d32:	2300      	movs	r3, #0
 8001d34:	75fb      	strb	r3, [r7, #23]
 8001d36:	e008      	b.n	8001d4a <display_sequence_entry_msg+0x42>
			message[i] = '*';
 8001d38:	7dfb      	ldrb	r3, [r7, #23]
 8001d3a:	3318      	adds	r3, #24
 8001d3c:	443b      	add	r3, r7
 8001d3e:	222a      	movs	r2, #42	@ 0x2a
 8001d40:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t i = 0; i < input_cont; i++){
 8001d44:	7dfb      	ldrb	r3, [r7, #23]
 8001d46:	3301      	adds	r3, #1
 8001d48:	75fb      	strb	r3, [r7, #23]
 8001d4a:	7dfa      	ldrb	r2, [r7, #23]
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d3f2      	bcc.n	8001d38 <display_sequence_entry_msg+0x30>
		}
		//Muestro el string
		ssd1306_Fill(Black);
 8001d52:	2000      	movs	r0, #0
 8001d54:	f000 f9c6 	bl	80020e4 <ssd1306_Fill>
		ssd1306_SetCursor(x, y);
 8001d58:	7d7a      	ldrb	r2, [r7, #21]
 8001d5a:	7dbb      	ldrb	r3, [r7, #22]
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 fb0a 	bl	8002378 <ssd1306_SetCursor>
		ssd1306_WriteString(message, Font_16x26, White);
 8001d64:	4b07      	ldr	r3, [pc, #28]	@ (8001d84 <display_sequence_entry_msg+0x7c>)
 8001d66:	f107 000c 	add.w	r0, r7, #12
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	9200      	str	r2, [sp, #0]
 8001d6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d70:	f000 fadc 	bl	800232c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001d74:	f000 f9ce 	bl	8002114 <ssd1306_UpdateScreen>
	}
	return;
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
}
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	08012b18 	.word	0x08012b18

08001d88 <display_timeout_msg>:


void display_timeout_msg(void){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
	display_text("\n Timeout!!!", 2);
 8001d8c:	2102      	movs	r1, #2
 8001d8e:	4802      	ldr	r0, [pc, #8]	@ (8001d98 <display_timeout_msg+0x10>)
 8001d90:	f7ff feee 	bl	8001b70 <display_text>
	return;
 8001d94:	bf00      	nop
}
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	0800eeb4 	.word	0x0800eeb4

08001d9c <display_incomplete_entry_msg>:

void display_incomplete_entry_msg(void){
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
	display_text("  Ingrese\n secuencia\n  valida", 2);
 8001da0:	2102      	movs	r1, #2
 8001da2:	4802      	ldr	r0, [pc, #8]	@ (8001dac <display_incomplete_entry_msg+0x10>)
 8001da4:	f7ff fee4 	bl	8001b70 <display_text>
	return;
 8001da8:	bf00      	nop
}
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	0800eec4 	.word	0x0800eec4

08001db0 <display_access_granted_msg>:

void display_access_granted_msg(void){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
	display_text("  Acceso\n concedido", 2);
 8001db4:	2102      	movs	r1, #2
 8001db6:	4802      	ldr	r0, [pc, #8]	@ (8001dc0 <display_access_granted_msg+0x10>)
 8001db8:	f7ff feda 	bl	8001b70 <display_text>
	return;
 8001dbc:	bf00      	nop
}
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	0800eee4 	.word	0x0800eee4

08001dc4 <display_access_denied_msg>:

void display_access_denied_msg(void){
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
	display_text("  Acceso\n denegado", 2);
 8001dc8:	2102      	movs	r1, #2
 8001dca:	4802      	ldr	r0, [pc, #8]	@ (8001dd4 <display_access_denied_msg+0x10>)
 8001dcc:	f7ff fed0 	bl	8001b70 <display_text>
	return;
 8001dd0:	bf00      	nop
}
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	0800eef8 	.word	0x0800eef8

08001dd8 <display_user_found_msg>:

void display_user_found_msg(void){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
	display_text("  Usuario\n  hallado", 2);
 8001ddc:	2102      	movs	r1, #2
 8001dde:	4802      	ldr	r0, [pc, #8]	@ (8001de8 <display_user_found_msg+0x10>)
 8001de0:	f7ff fec6 	bl	8001b70 <display_text>
	return;
 8001de4:	bf00      	nop
}
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	0800ef0c 	.word	0x0800ef0c

08001dec <display_user_not_found_msg>:

void display_user_not_found_msg(void){
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
	display_text("  Usuario\n    no\n  existe", 2);
 8001df0:	2102      	movs	r1, #2
 8001df2:	4802      	ldr	r0, [pc, #8]	@ (8001dfc <display_user_not_found_msg+0x10>)
 8001df4:	f7ff febc 	bl	8001b70 <display_text>
	return;
 8001df8:	bf00      	nop
}
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	0800ef20 	.word	0x0800ef20

08001e00 <display_start_voice_recognition_msg>:

void display_start_voice_recognition_msg(void){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
	display_text("  Comienza\n  captura\n  de voz", 2);
 8001e04:	2102      	movs	r1, #2
 8001e06:	4802      	ldr	r0, [pc, #8]	@ (8001e10 <display_start_voice_recognition_msg+0x10>)
 8001e08:	f7ff feb2 	bl	8001b70 <display_text>
	return;
 8001e0c:	bf00      	nop
}
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	0800ef3c 	.word	0x0800ef3c

08001e14 <countdown_msg>:

void countdown_msg(void){
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af02      	add	r7, sp, #8
	/*Muestra mensaje de cuenta regresiva en pantalla*/
	uint8_t x = 50;
 8001e1a:	2332      	movs	r3, #50	@ 0x32
 8001e1c:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 26;
 8001e1e:	231a      	movs	r3, #26
 8001e20:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8001e22:	2000      	movs	r0, #0
 8001e24:	f000 f95e 	bl	80020e4 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001e28:	79ba      	ldrb	r2, [r7, #6]
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 faa2 	bl	8002378 <ssd1306_SetCursor>
	ssd1306_WriteString("3", Font_16x26, White);
 8001e34:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb0 <countdown_msg+0x9c>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	9200      	str	r2, [sp, #0]
 8001e3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e3c:	481d      	ldr	r0, [pc, #116]	@ (8001eb4 <countdown_msg+0xa0>)
 8001e3e:	f000 fa75 	bl	800232c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001e42:	f000 f967 	bl	8002114 <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 8001e46:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e4a:	f00b fc99 	bl	800d780 <vTaskDelay>
	ssd1306_Fill(Black);
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f000 f948 	bl	80020e4 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001e54:	79ba      	ldrb	r2, [r7, #6]
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 fa8c 	bl	8002378 <ssd1306_SetCursor>
	ssd1306_WriteString("2", Font_16x26, White);
 8001e60:	4b13      	ldr	r3, [pc, #76]	@ (8001eb0 <countdown_msg+0x9c>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	9200      	str	r2, [sp, #0]
 8001e66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e68:	4813      	ldr	r0, [pc, #76]	@ (8001eb8 <countdown_msg+0xa4>)
 8001e6a:	f000 fa5f 	bl	800232c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001e6e:	f000 f951 	bl	8002114 <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 8001e72:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e76:	f00b fc83 	bl	800d780 <vTaskDelay>
	ssd1306_Fill(Black);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f000 f932 	bl	80020e4 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001e80:	79ba      	ldrb	r2, [r7, #6]
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 fa76 	bl	8002378 <ssd1306_SetCursor>
	ssd1306_WriteString("1", Font_16x26, White);
 8001e8c:	4b08      	ldr	r3, [pc, #32]	@ (8001eb0 <countdown_msg+0x9c>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	9200      	str	r2, [sp, #0]
 8001e92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e94:	4809      	ldr	r0, [pc, #36]	@ (8001ebc <countdown_msg+0xa8>)
 8001e96:	f000 fa49 	bl	800232c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001e9a:	f000 f93b 	bl	8002114 <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 8001e9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ea2:	f00b fc6d 	bl	800d780 <vTaskDelay>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	08012b18 	.word	0x08012b18
 8001eb4:	0800ef5c 	.word	0x0800ef5c
 8001eb8:	0800ef60 	.word	0x0800ef60
 8001ebc:	0800ef64 	.word	0x0800ef64

08001ec0 <display_capturing_voice_msg>:

void display_capturing_voice_msg(void){
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
	display_text("  Captura\n    ...", 2);
 8001ec4:	2102      	movs	r1, #2
 8001ec6:	4802      	ldr	r0, [pc, #8]	@ (8001ed0 <display_capturing_voice_msg+0x10>)
 8001ec8:	f7ff fe52 	bl	8001b70 <display_text>
	return;
 8001ecc:	bf00      	nop
}
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	0800ef68 	.word	0x0800ef68

08001ed4 <display_processing_data_msg>:
void display_not_recognized_voice_msg(void){
	display_text("   Voz no\n reconocida", 2);
	return;
}

void display_processing_data_msg(void){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	display_text("  Aguarde\n    ...", 2);
 8001ed8:	2102      	movs	r1, #2
 8001eda:	4802      	ldr	r0, [pc, #8]	@ (8001ee4 <display_processing_data_msg+0x10>)
 8001edc:	f7ff fe48 	bl	8001b70 <display_text>
	return;
 8001ee0:	bf00      	nop
}
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	0800efa8 	.word	0x0800efa8

08001ee8 <display_missing_database_msg>:

void display_missing_database_msg(void){
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
	display_text("  Database\n  faltante", 2);
 8001eec:	2102      	movs	r1, #2
 8001eee:	4802      	ldr	r0, [pc, #8]	@ (8001ef8 <display_missing_database_msg+0x10>)
 8001ef0:	f7ff fe3e 	bl	8001b70 <display_text>
	return;
 8001ef4:	bf00      	nop
}
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	0800efbc 	.word	0x0800efbc

08001efc <display_missing_template_msg>:

void display_missing_template_msg(void){
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
	display_text("  Template\n  faltante", 2);
 8001f00:	2102      	movs	r1, #2
 8001f02:	4802      	ldr	r0, [pc, #8]	@ (8001f0c <display_missing_template_msg+0x10>)
 8001f04:	f7ff fe34 	bl	8001b70 <display_text>
	return;
 8001f08:	bf00      	nop
}
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	0800efd4 	.word	0x0800efd4

08001f10 <display_template_saved_msg>:

void display_template_saved_msg(void){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
	display_text("  Template\n  guardado", 2);
 8001f14:	2102      	movs	r1, #2
 8001f16:	4802      	ldr	r0, [pc, #8]	@ (8001f20 <display_template_saved_msg+0x10>)
 8001f18:	f7ff fe2a 	bl	8001b70 <display_text>
	return;
 8001f1c:	bf00      	nop
}
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	0800efec 	.word	0x0800efec

08001f24 <display_template_not_created_msg>:

void display_template_not_created_msg(void){
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
	display_text("  Template\n  Fallo", 2);
 8001f28:	2102      	movs	r1, #2
 8001f2a:	4802      	ldr	r0, [pc, #8]	@ (8001f34 <display_template_not_created_msg+0x10>)
 8001f2c:	f7ff fe20 	bl	8001b70 <display_text>
	return;
 8001f30:	bf00      	nop
}
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	0800f004 	.word	0x0800f004

08001f38 <display_mounting_error_msg>:

void display_mounting_error_msg(void){
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
	display_text("  Mounting\n  Error", 2);
 8001f3c:	2102      	movs	r1, #2
 8001f3e:	4802      	ldr	r0, [pc, #8]	@ (8001f48 <display_mounting_error_msg+0x10>)
 8001f40:	f7ff fe16 	bl	8001b70 <display_text>
	return;
 8001f44:	bf00      	nop
}
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	0800f018 	.word	0x0800f018

08001f4c <display_register_not_created_msg>:

void display_register_not_created_msg(void){
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
	display_text("  Registro\n  Fallo", 2);
 8001f50:	2102      	movs	r1, #2
 8001f52:	4802      	ldr	r0, [pc, #8]	@ (8001f5c <display_register_not_created_msg+0x10>)
 8001f54:	f7ff fe0c 	bl	8001b70 <display_text>
	return;
 8001f58:	bf00      	nop
}
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	0800f02c 	.word	0x0800f02c

08001f60 <display_memory_error_msg>:

void display_memory_error_msg(void){
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
	display_text("  Error\n  Malloc", 2);
 8001f64:	2102      	movs	r1, #2
 8001f66:	4802      	ldr	r0, [pc, #8]	@ (8001f70 <display_memory_error_msg+0x10>)
 8001f68:	f7ff fe02 	bl	8001b70 <display_text>
	return;
 8001f6c:	bf00      	nop
}
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	0800f040 	.word	0x0800f040

08001f74 <display_read_sd_error_msg>:

void display_read_sd_error_msg(void){
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
	display_text("  Error\n Read SD", 2);
 8001f78:	2102      	movs	r1, #2
 8001f7a:	4802      	ldr	r0, [pc, #8]	@ (8001f84 <display_read_sd_error_msg+0x10>)
 8001f7c:	f7ff fdf8 	bl	8001b70 <display_text>
	return;
 8001f80:	bf00      	nop
}
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	0800f054 	.word	0x0800f054

08001f88 <display_write_sd_error_msg>:

void display_write_sd_error_msg(void){
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
	display_text("  Error\n Write SD", 2);
 8001f8c:	2102      	movs	r1, #2
 8001f8e:	4802      	ldr	r0, [pc, #8]	@ (8001f98 <display_write_sd_error_msg+0x10>)
 8001f90:	f7ff fdee 	bl	8001b70 <display_text>
	return;
 8001f94:	bf00      	nop
}
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	0800f068 	.word	0x0800f068

08001f9c <ssd1306_Reset>:
#include "main.h"
#include "cmsis_os.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af04      	add	r7, sp, #16
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fba:	9302      	str	r3, [sp, #8]
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	9301      	str	r3, [sp, #4]
 8001fc0:	1dfb      	adds	r3, r7, #7
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2178      	movs	r1, #120	@ 0x78
 8001fca:	4803      	ldr	r0, [pc, #12]	@ (8001fd8 <ssd1306_WriteCommand+0x2c>)
 8001fcc:	f002 fb1e 	bl	800460c <HAL_I2C_Mem_Write>
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000150 	.word	0x20000150

08001fdc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af04      	add	r7, sp, #16
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	f04f 32ff 	mov.w	r2, #4294967295
 8001fee:	9202      	str	r2, [sp, #8]
 8001ff0:	9301      	str	r3, [sp, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	2240      	movs	r2, #64	@ 0x40
 8001ffa:	2178      	movs	r1, #120	@ 0x78
 8001ffc:	4803      	ldr	r0, [pc, #12]	@ (800200c <ssd1306_WriteData+0x30>)
 8001ffe:	f002 fb05 	bl	800460c <HAL_I2C_Mem_Write>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000150 	.word	0x20000150

08002010 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002014:	f7ff ffc2 	bl	8001f9c <ssd1306_Reset>

    // Wait for the screen to boot
    vTaskDelay(100 / portTICK_RATE_MS);
 8002018:	2064      	movs	r0, #100	@ 0x64
 800201a:	f00b fbb1 	bl	800d780 <vTaskDelay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800201e:	2000      	movs	r0, #0
 8002020:	f000 f9d6 	bl	80023d0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002024:	2020      	movs	r0, #32
 8002026:	f7ff ffc1 	bl	8001fac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800202a:	2000      	movs	r0, #0
 800202c:	f7ff ffbe 	bl	8001fac <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002030:	20b0      	movs	r0, #176	@ 0xb0
 8002032:	f7ff ffbb 	bl	8001fac <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002036:	20c8      	movs	r0, #200	@ 0xc8
 8002038:	f7ff ffb8 	bl	8001fac <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800203c:	2000      	movs	r0, #0
 800203e:	f7ff ffb5 	bl	8001fac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002042:	2010      	movs	r0, #16
 8002044:	f7ff ffb2 	bl	8001fac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002048:	2040      	movs	r0, #64	@ 0x40
 800204a:	f7ff ffaf 	bl	8001fac <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800204e:	20ff      	movs	r0, #255	@ 0xff
 8002050:	f000 f9aa 	bl	80023a8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002054:	20a1      	movs	r0, #161	@ 0xa1
 8002056:	f7ff ffa9 	bl	8001fac <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800205a:	20a6      	movs	r0, #166	@ 0xa6
 800205c:	f7ff ffa6 	bl	8001fac <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002060:	20a8      	movs	r0, #168	@ 0xa8
 8002062:	f7ff ffa3 	bl	8001fac <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002066:	203f      	movs	r0, #63	@ 0x3f
 8002068:	f7ff ffa0 	bl	8001fac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800206c:	20a4      	movs	r0, #164	@ 0xa4
 800206e:	f7ff ff9d 	bl	8001fac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002072:	20d3      	movs	r0, #211	@ 0xd3
 8002074:	f7ff ff9a 	bl	8001fac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002078:	2000      	movs	r0, #0
 800207a:	f7ff ff97 	bl	8001fac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800207e:	20d5      	movs	r0, #213	@ 0xd5
 8002080:	f7ff ff94 	bl	8001fac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002084:	20f0      	movs	r0, #240	@ 0xf0
 8002086:	f7ff ff91 	bl	8001fac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800208a:	20d9      	movs	r0, #217	@ 0xd9
 800208c:	f7ff ff8e 	bl	8001fac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002090:	2022      	movs	r0, #34	@ 0x22
 8002092:	f7ff ff8b 	bl	8001fac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002096:	20da      	movs	r0, #218	@ 0xda
 8002098:	f7ff ff88 	bl	8001fac <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800209c:	2012      	movs	r0, #18
 800209e:	f7ff ff85 	bl	8001fac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80020a2:	20db      	movs	r0, #219	@ 0xdb
 80020a4:	f7ff ff82 	bl	8001fac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80020a8:	2020      	movs	r0, #32
 80020aa:	f7ff ff7f 	bl	8001fac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80020ae:	208d      	movs	r0, #141	@ 0x8d
 80020b0:	f7ff ff7c 	bl	8001fac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80020b4:	2014      	movs	r0, #20
 80020b6:	f7ff ff79 	bl	8001fac <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80020ba:	2001      	movs	r0, #1
 80020bc:	f000 f988 	bl	80023d0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80020c0:	2000      	movs	r0, #0
 80020c2:	f000 f80f 	bl	80020e4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80020c6:	f000 f825 	bl	8002114 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80020ca:	4b05      	ldr	r3, [pc, #20]	@ (80020e0 <ssd1306_Init+0xd0>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80020d0:	4b03      	ldr	r3, [pc, #12]	@ (80020e0 <ssd1306_Init+0xd0>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80020d6:	4b02      	ldr	r3, [pc, #8]	@ (80020e0 <ssd1306_Init+0xd0>)
 80020d8:	2201      	movs	r2, #1
 80020da:	711a      	strb	r2, [r3, #4]
}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	2000070c 	.word	0x2000070c

080020e4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <ssd1306_Fill+0x14>
 80020f4:	2300      	movs	r3, #0
 80020f6:	e000      	b.n	80020fa <ssd1306_Fill+0x16>
 80020f8:	23ff      	movs	r3, #255	@ 0xff
 80020fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020fe:	4619      	mov	r1, r3
 8002100:	4803      	ldr	r0, [pc, #12]	@ (8002110 <ssd1306_Fill+0x2c>)
 8002102:	f00c fe45 	bl	800ed90 <memset>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2000030c 	.word	0x2000030c

08002114 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800211a:	2300      	movs	r3, #0
 800211c:	71fb      	strb	r3, [r7, #7]
 800211e:	e016      	b.n	800214e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	3b50      	subs	r3, #80	@ 0x50
 8002124:	b2db      	uxtb	r3, r3
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff ff40 	bl	8001fac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800212c:	2000      	movs	r0, #0
 800212e:	f7ff ff3d 	bl	8001fac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002132:	2010      	movs	r0, #16
 8002134:	f7ff ff3a 	bl	8001fac <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	01db      	lsls	r3, r3, #7
 800213c:	4a08      	ldr	r2, [pc, #32]	@ (8002160 <ssd1306_UpdateScreen+0x4c>)
 800213e:	4413      	add	r3, r2
 8002140:	2180      	movs	r1, #128	@ 0x80
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff ff4a 	bl	8001fdc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	3301      	adds	r3, #1
 800214c:	71fb      	strb	r3, [r7, #7]
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	2b07      	cmp	r3, #7
 8002152:	d9e5      	bls.n	8002120 <ssd1306_UpdateScreen+0xc>
    }
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	2000030c 	.word	0x2000030c

08002164 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	71fb      	strb	r3, [r7, #7]
 800216e:	460b      	mov	r3, r1
 8002170:	71bb      	strb	r3, [r7, #6]
 8002172:	4613      	mov	r3, r2
 8002174:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	2b00      	cmp	r3, #0
 800217c:	db3d      	blt.n	80021fa <ssd1306_DrawPixel+0x96>
 800217e:	79bb      	ldrb	r3, [r7, #6]
 8002180:	2b3f      	cmp	r3, #63	@ 0x3f
 8002182:	d83a      	bhi.n	80021fa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002184:	797b      	ldrb	r3, [r7, #5]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d11a      	bne.n	80021c0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800218a:	79fa      	ldrb	r2, [r7, #7]
 800218c:	79bb      	ldrb	r3, [r7, #6]
 800218e:	08db      	lsrs	r3, r3, #3
 8002190:	b2d8      	uxtb	r0, r3
 8002192:	4603      	mov	r3, r0
 8002194:	01db      	lsls	r3, r3, #7
 8002196:	4413      	add	r3, r2
 8002198:	4a1b      	ldr	r2, [pc, #108]	@ (8002208 <ssd1306_DrawPixel+0xa4>)
 800219a:	5cd3      	ldrb	r3, [r2, r3]
 800219c:	b25a      	sxtb	r2, r3
 800219e:	79bb      	ldrb	r3, [r7, #6]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	2101      	movs	r1, #1
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	b25b      	sxtb	r3, r3
 80021ac:	4313      	orrs	r3, r2
 80021ae:	b259      	sxtb	r1, r3
 80021b0:	79fa      	ldrb	r2, [r7, #7]
 80021b2:	4603      	mov	r3, r0
 80021b4:	01db      	lsls	r3, r3, #7
 80021b6:	4413      	add	r3, r2
 80021b8:	b2c9      	uxtb	r1, r1
 80021ba:	4a13      	ldr	r2, [pc, #76]	@ (8002208 <ssd1306_DrawPixel+0xa4>)
 80021bc:	54d1      	strb	r1, [r2, r3]
 80021be:	e01d      	b.n	80021fc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80021c0:	79fa      	ldrb	r2, [r7, #7]
 80021c2:	79bb      	ldrb	r3, [r7, #6]
 80021c4:	08db      	lsrs	r3, r3, #3
 80021c6:	b2d8      	uxtb	r0, r3
 80021c8:	4603      	mov	r3, r0
 80021ca:	01db      	lsls	r3, r3, #7
 80021cc:	4413      	add	r3, r2
 80021ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002208 <ssd1306_DrawPixel+0xa4>)
 80021d0:	5cd3      	ldrb	r3, [r2, r3]
 80021d2:	b25a      	sxtb	r2, r3
 80021d4:	79bb      	ldrb	r3, [r7, #6]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	2101      	movs	r1, #1
 80021dc:	fa01 f303 	lsl.w	r3, r1, r3
 80021e0:	b25b      	sxtb	r3, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	b25b      	sxtb	r3, r3
 80021e6:	4013      	ands	r3, r2
 80021e8:	b259      	sxtb	r1, r3
 80021ea:	79fa      	ldrb	r2, [r7, #7]
 80021ec:	4603      	mov	r3, r0
 80021ee:	01db      	lsls	r3, r3, #7
 80021f0:	4413      	add	r3, r2
 80021f2:	b2c9      	uxtb	r1, r1
 80021f4:	4a04      	ldr	r2, [pc, #16]	@ (8002208 <ssd1306_DrawPixel+0xa4>)
 80021f6:	54d1      	strb	r1, [r2, r3]
 80021f8:	e000      	b.n	80021fc <ssd1306_DrawPixel+0x98>
        return;
 80021fa:	bf00      	nop
    }
}
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	2000030c 	.word	0x2000030c

0800220c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800220c:	b590      	push	{r4, r7, lr}
 800220e:	b089      	sub	sp, #36	@ 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	4604      	mov	r4, r0
 8002214:	4638      	mov	r0, r7
 8002216:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800221a:	4623      	mov	r3, r4
 800221c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	2b1f      	cmp	r3, #31
 8002222:	d902      	bls.n	800222a <ssd1306_WriteChar+0x1e>
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	2b7e      	cmp	r3, #126	@ 0x7e
 8002228:	d901      	bls.n	800222e <ssd1306_WriteChar+0x22>
        return 0;
 800222a:	2300      	movs	r3, #0
 800222c:	e077      	b.n	800231e <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800222e:	4b3e      	ldr	r3, [pc, #248]	@ (8002328 <ssd1306_WriteChar+0x11c>)
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	783b      	ldrb	r3, [r7, #0]
 8002236:	4413      	add	r3, r2
 8002238:	2b80      	cmp	r3, #128	@ 0x80
 800223a:	dc06      	bgt.n	800224a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800223c:	4b3a      	ldr	r3, [pc, #232]	@ (8002328 <ssd1306_WriteChar+0x11c>)
 800223e:	885b      	ldrh	r3, [r3, #2]
 8002240:	461a      	mov	r2, r3
 8002242:	787b      	ldrb	r3, [r7, #1]
 8002244:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002246:	2b40      	cmp	r3, #64	@ 0x40
 8002248:	dd01      	ble.n	800224e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800224a:	2300      	movs	r3, #0
 800224c:	e067      	b.n	800231e <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	e04e      	b.n	80022f2 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	3b20      	subs	r3, #32
 800225a:	7879      	ldrb	r1, [r7, #1]
 800225c:	fb01 f303 	mul.w	r3, r1, r3
 8002260:	4619      	mov	r1, r3
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	440b      	add	r3, r1
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4413      	add	r3, r2
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]
 8002272:	e036      	b.n	80022e2 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d013      	beq.n	80022ac <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002284:	4b28      	ldr	r3, [pc, #160]	@ (8002328 <ssd1306_WriteChar+0x11c>)
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	b2da      	uxtb	r2, r3
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	4413      	add	r3, r2
 8002290:	b2d8      	uxtb	r0, r3
 8002292:	4b25      	ldr	r3, [pc, #148]	@ (8002328 <ssd1306_WriteChar+0x11c>)
 8002294:	885b      	ldrh	r3, [r3, #2]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	b2db      	uxtb	r3, r3
 800229c:	4413      	add	r3, r2
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80022a4:	4619      	mov	r1, r3
 80022a6:	f7ff ff5d 	bl	8002164 <ssd1306_DrawPixel>
 80022aa:	e017      	b.n	80022dc <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80022ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002328 <ssd1306_WriteChar+0x11c>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	b2d8      	uxtb	r0, r3
 80022ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002328 <ssd1306_WriteChar+0x11c>)
 80022bc:	885b      	ldrh	r3, [r3, #2]
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	4413      	add	r3, r2
 80022c6:	b2d9      	uxtb	r1, r3
 80022c8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	bf0c      	ite	eq
 80022d0:	2301      	moveq	r3, #1
 80022d2:	2300      	movne	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	461a      	mov	r2, r3
 80022d8:	f7ff ff44 	bl	8002164 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	3301      	adds	r3, #1
 80022e0:	61bb      	str	r3, [r7, #24]
 80022e2:	783b      	ldrb	r3, [r7, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d3c3      	bcc.n	8002274 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	3301      	adds	r3, #1
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	787b      	ldrb	r3, [r7, #1]
 80022f4:	461a      	mov	r2, r3
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d3ab      	bcc.n	8002254 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80022fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002328 <ssd1306_WriteChar+0x11c>)
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	2a00      	cmp	r2, #0
 8002304:	d005      	beq.n	8002312 <ssd1306_WriteChar+0x106>
 8002306:	68b9      	ldr	r1, [r7, #8]
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	3a20      	subs	r2, #32
 800230c:	440a      	add	r2, r1
 800230e:	7812      	ldrb	r2, [r2, #0]
 8002310:	e000      	b.n	8002314 <ssd1306_WriteChar+0x108>
 8002312:	783a      	ldrb	r2, [r7, #0]
 8002314:	4413      	add	r3, r2
 8002316:	b29a      	uxth	r2, r3
 8002318:	4b03      	ldr	r3, [pc, #12]	@ (8002328 <ssd1306_WriteChar+0x11c>)
 800231a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800231c:	7bfb      	ldrb	r3, [r7, #15]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3724      	adds	r7, #36	@ 0x24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd90      	pop	{r4, r7, pc}
 8002326:	bf00      	nop
 8002328:	2000070c 	.word	0x2000070c

0800232c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	4638      	mov	r0, r7
 8002336:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800233a:	e013      	b.n	8002364 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	7818      	ldrb	r0, [r3, #0]
 8002340:	7e3b      	ldrb	r3, [r7, #24]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	463b      	mov	r3, r7
 8002346:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002348:	f7ff ff60 	bl	800220c <ssd1306_WriteChar>
 800234c:	4603      	mov	r3, r0
 800234e:	461a      	mov	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d002      	beq.n	800235e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	e008      	b.n	8002370 <ssd1306_WriteString+0x44>
        }
        str++;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	3301      	adds	r3, #1
 8002362:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1e7      	bne.n	800233c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	781b      	ldrb	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	460a      	mov	r2, r1
 8002382:	71fb      	strb	r3, [r7, #7]
 8002384:	4613      	mov	r3, r2
 8002386:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	b29a      	uxth	r2, r3
 800238c:	4b05      	ldr	r3, [pc, #20]	@ (80023a4 <ssd1306_SetCursor+0x2c>)
 800238e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002390:	79bb      	ldrb	r3, [r7, #6]
 8002392:	b29a      	uxth	r2, r3
 8002394:	4b03      	ldr	r3, [pc, #12]	@ (80023a4 <ssd1306_SetCursor+0x2c>)
 8002396:	805a      	strh	r2, [r3, #2]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	2000070c 	.word	0x2000070c

080023a8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80023b2:	2381      	movs	r3, #129	@ 0x81
 80023b4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fdf7 	bl	8001fac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fdf3 	bl	8001fac <ssd1306_WriteCommand>
}
 80023c6:	bf00      	nop
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80023e0:	23af      	movs	r3, #175	@ 0xaf
 80023e2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80023e4:	4b08      	ldr	r3, [pc, #32]	@ (8002408 <ssd1306_SetDisplayOn+0x38>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	715a      	strb	r2, [r3, #5]
 80023ea:	e004      	b.n	80023f6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80023ec:	23ae      	movs	r3, #174	@ 0xae
 80023ee:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80023f0:	4b05      	ldr	r3, [pc, #20]	@ (8002408 <ssd1306_SetDisplayOn+0x38>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fdd7 	bl	8001fac <ssd1306_WriteCommand>
}
 80023fe:	bf00      	nop
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	2000070c 	.word	0x2000070c

0800240c <set_row>:
	      	  	  	  	  		  	  	  	  	  {'4', '5', '6', 'B'},
												  {'7', '8', '9', 'C'},
												  {'*', '0', '#', 'D'} };

/*================[Private functions]====================*/
static void set_row(row_t row){
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIO_ROW, row, GPIO_PIN_SET);
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	2201      	movs	r2, #1
 800241a:	4619      	mov	r1, r3
 800241c:	4803      	ldr	r0, [pc, #12]	@ (800242c <set_row+0x20>)
 800241e:	f001 ff97 	bl	8004350 <HAL_GPIO_WritePin>
	return;
 8002422:	bf00      	nop
}
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40020800 	.word	0x40020800

08002430 <reset_row>:

static void reset_row(row_t row){
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIO_ROW, row, GPIO_PIN_RESET);
 800243a:	88fb      	ldrh	r3, [r7, #6]
 800243c:	2200      	movs	r2, #0
 800243e:	4619      	mov	r1, r3
 8002440:	4803      	ldr	r0, [pc, #12]	@ (8002450 <reset_row+0x20>)
 8002442:	f001 ff85 	bl	8004350 <HAL_GPIO_WritePin>
	return;
 8002446:	bf00      	nop
}
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40020800 	.word	0x40020800

08002454 <read_col>:

static GPIO_PinState read_col(col_t col){
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
	return HAL_GPIO_ReadPin(GPIO_COL, col);
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	b29b      	uxth	r3, r3
 8002462:	4619      	mov	r1, r3
 8002464:	4803      	ldr	r0, [pc, #12]	@ (8002474 <read_col+0x20>)
 8002466:	f001 ff5b 	bl	8004320 <HAL_GPIO_ReadPin>
 800246a:	4603      	mov	r3, r0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40020800 	.word	0x40020800

08002478 <read_keypad>:

/*================[Public functions]=====================*/
char read_keypad(void){
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
	/* La funcion barre las filas del keypad, activando una por una individualmente y leyendo la columna asociada,
	 * para así poder triangular la tecla presionada. Se realiza doble confirmacion de tecla presionada.
	 */
	char key_pressed;
	for(uint8_t i = 0; i < ROW_LENGTH; i++){
 800247e:	2300      	movs	r3, #0
 8002480:	71fb      	strb	r3, [r7, #7]
 8002482:	e04c      	b.n	800251e <read_keypad+0xa6>
		set_row(keypad_rows[i]);
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	4a2a      	ldr	r2, [pc, #168]	@ (8002530 <read_keypad+0xb8>)
 8002488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ffbd 	bl	800240c <set_row>
		for(uint8_t j = 0; j < COL_LENGTH; j++){
 8002492:	2300      	movs	r3, #0
 8002494:	71bb      	strb	r3, [r7, #6]
 8002496:	e035      	b.n	8002504 <read_keypad+0x8c>
			if(read_col(keypad_cols[j]) == GPIO_PIN_SET){					//Verifico si alguna columna esta en alto (tecla presionada)
 8002498:	79bb      	ldrb	r3, [r7, #6]
 800249a:	4a26      	ldr	r2, [pc, #152]	@ (8002534 <read_keypad+0xbc>)
 800249c:	5cd3      	ldrb	r3, [r2, r3]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ffd8 	bl	8002454 <read_col>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d129      	bne.n	80024fe <read_keypad+0x86>
				vTaskDelay(20 / portTICK_RATE_MS);							//Si una de las columnas dio alto, espero 20ms y verifico que siga en alto para confirmar
 80024aa:	2014      	movs	r0, #20
 80024ac:	f00b f968 	bl	800d780 <vTaskDelay>
				if(read_col(keypad_cols[j]) == GPIO_PIN_SET){
 80024b0:	79bb      	ldrb	r3, [r7, #6]
 80024b2:	4a20      	ldr	r2, [pc, #128]	@ (8002534 <read_keypad+0xbc>)
 80024b4:	5cd3      	ldrb	r3, [r2, r3]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff ffcc 	bl	8002454 <read_col>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d11d      	bne.n	80024fe <read_keypad+0x86>
					key_pressed = keypad_chars[i][j];						//Guardo la tecla presionada
 80024c2:	79fa      	ldrb	r2, [r7, #7]
 80024c4:	79bb      	ldrb	r3, [r7, #6]
 80024c6:	491c      	ldr	r1, [pc, #112]	@ (8002538 <read_keypad+0xc0>)
 80024c8:	0092      	lsls	r2, r2, #2
 80024ca:	440a      	add	r2, r1
 80024cc:	4413      	add	r3, r2
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	717b      	strb	r3, [r7, #5]
					while(read_col(keypad_cols[j]) == GPIO_PIN_SET);		//Espero a que se deje de apretar la tecla
 80024d2:	bf00      	nop
 80024d4:	79bb      	ldrb	r3, [r7, #6]
 80024d6:	4a17      	ldr	r2, [pc, #92]	@ (8002534 <read_keypad+0xbc>)
 80024d8:	5cd3      	ldrb	r3, [r2, r3]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff ffba 	bl	8002454 <read_col>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d0f6      	beq.n	80024d4 <read_keypad+0x5c>
					reset_row(keypad_rows[i]);								//Reseteo la fila en alto antes de salir de la funcion
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	4a11      	ldr	r2, [pc, #68]	@ (8002530 <read_keypad+0xb8>)
 80024ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff ff9e 	bl	8002430 <reset_row>
					vTaskDelay(10/portTICK_RATE_MS);						//Pequeño delay para asegurar que el boton fue liberado completamente
 80024f4:	200a      	movs	r0, #10
 80024f6:	f00b f943 	bl	800d780 <vTaskDelay>
					return key_pressed;
 80024fa:	797b      	ldrb	r3, [r7, #5]
 80024fc:	e013      	b.n	8002526 <read_keypad+0xae>
		for(uint8_t j = 0; j < COL_LENGTH; j++){
 80024fe:	79bb      	ldrb	r3, [r7, #6]
 8002500:	3301      	adds	r3, #1
 8002502:	71bb      	strb	r3, [r7, #6]
 8002504:	79bb      	ldrb	r3, [r7, #6]
 8002506:	2b03      	cmp	r3, #3
 8002508:	d9c6      	bls.n	8002498 <read_keypad+0x20>
				}
			}
		}
		reset_row(keypad_rows[i]);
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	4a08      	ldr	r2, [pc, #32]	@ (8002530 <read_keypad+0xb8>)
 800250e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff ff8c 	bl	8002430 <reset_row>
	for(uint8_t i = 0; i < ROW_LENGTH; i++){
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	3301      	adds	r3, #1
 800251c:	71fb      	strb	r3, [r7, #7]
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	2b03      	cmp	r3, #3
 8002522:	d9af      	bls.n	8002484 <read_keypad+0xc>
	}
	return 0;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000008 	.word	0x20000008
 8002534:	20000010 	.word	0x20000010
 8002538:	08012b30 	.word	0x08012b30

0800253c <read_data_from_sd>:
	res = try_f_close(&fil);
	return res ? true : false;
}

//Funcion para leer datos desde archivo y guardarlos en un buffer
bool read_data_from_sd(char *filename, void *buffer, uint32_t btr, uint32_t *last_pos){
 800253c:	b5b0      	push	{r4, r5, r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	603b      	str	r3, [r7, #0]
	//Current pos debe ser multiplicado por el numero de bytes de un float, o guardar la ultima posicion
	bool res;
	//Abro el archivo
	res = try_f_open(&fil, filename, FA_READ);
 800254a:	2201      	movs	r2, #1
 800254c:	68f9      	ldr	r1, [r7, #12]
 800254e:	4824      	ldr	r0, [pc, #144]	@ (80025e0 <read_data_from_sd+0xa4>)
 8002550:	f000 f88e 	bl	8002670 <try_f_open>
 8002554:	4603      	mov	r3, r0
 8002556:	75fb      	strb	r3, [r7, #23]
	if(!res){
 8002558:	7dfb      	ldrb	r3, [r7, #23]
 800255a:	f083 0301 	eor.w	r3, r3, #1
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <read_data_from_sd+0x2c>
		//No se pudo abrir el archivo
		return false;
 8002564:	2300      	movs	r3, #0
 8002566:	e036      	b.n	80025d6 <read_data_from_sd+0x9a>
	}

	//Posiciono el puntero de lectura
	fresult = f_lseek(&fil, *last_pos);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2200      	movs	r2, #0
 800256e:	461c      	mov	r4, r3
 8002570:	4615      	mov	r5, r2
 8002572:	4622      	mov	r2, r4
 8002574:	462b      	mov	r3, r5
 8002576:	481a      	ldr	r0, [pc, #104]	@ (80025e0 <read_data_from_sd+0xa4>)
 8002578:	f009 fa52 	bl	800ba20 <f_lseek>
 800257c:	4603      	mov	r3, r0
 800257e:	461a      	mov	r2, r3
 8002580:	4b18      	ldr	r3, [pc, #96]	@ (80025e4 <read_data_from_sd+0xa8>)
 8002582:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8002584:	4b17      	ldr	r3, [pc, #92]	@ (80025e4 <read_data_from_sd+0xa8>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d004      	beq.n	8002596 <read_data_from_sd+0x5a>
		try_f_close(&fil);
 800258c:	4814      	ldr	r0, [pc, #80]	@ (80025e0 <read_data_from_sd+0xa4>)
 800258e:	f000 f893 	bl	80026b8 <try_f_close>
		return false;
 8002592:	2300      	movs	r3, #0
 8002594:	e01f      	b.n	80025d6 <read_data_from_sd+0x9a>
	}

	//Leo datos desde archivo y los guardo en un buffer
	res = try_f_read(&fil, buffer, btr, &br);
 8002596:	4b14      	ldr	r3, [pc, #80]	@ (80025e8 <read_data_from_sd+0xac>)
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	68b9      	ldr	r1, [r7, #8]
 800259c:	4810      	ldr	r0, [pc, #64]	@ (80025e0 <read_data_from_sd+0xa4>)
 800259e:	f000 f8a9 	bl	80026f4 <try_f_read>
 80025a2:	4603      	mov	r3, r0
 80025a4:	75fb      	strb	r3, [r7, #23]
	if(!res){
 80025a6:	7dfb      	ldrb	r3, [r7, #23]
 80025a8:	f083 0301 	eor.w	r3, r3, #1
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d006      	beq.n	80025c0 <read_data_from_sd+0x84>
		res = try_f_close(&fil);
 80025b2:	480b      	ldr	r0, [pc, #44]	@ (80025e0 <read_data_from_sd+0xa4>)
 80025b4:	f000 f880 	bl	80026b8 <try_f_close>
 80025b8:	4603      	mov	r3, r0
 80025ba:	75fb      	strb	r3, [r7, #23]
		return false;
 80025bc:	2300      	movs	r3, #0
 80025be:	e00a      	b.n	80025d6 <read_data_from_sd+0x9a>
	}

	//Guardo la ultima posicion
	*last_pos = f_tell(&fil);
 80025c0:	4b07      	ldr	r3, [pc, #28]	@ (80025e0 <read_data_from_sd+0xa4>)
 80025c2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	601a      	str	r2, [r3, #0]

	//Cierro el archivo
	res = try_f_close(&fil);
 80025ca:	4805      	ldr	r0, [pc, #20]	@ (80025e0 <read_data_from_sd+0xa4>)
 80025cc:	f000 f874 	bl	80026b8 <try_f_close>
 80025d0:	4603      	mov	r3, r0
 80025d2:	75fb      	strb	r3, [r7, #23]
	return res ? true : false;
 80025d4:	7dfb      	ldrb	r3, [r7, #23]

}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bdb0      	pop	{r4, r5, r7, pc}
 80025de:	bf00      	nop
 80025e0:	20001758 	.word	0x20001758
 80025e4:	200027b0 	.word	0x200027b0
 80025e8:	200027b4 	.word	0x200027b4

080025ec <try_mount>:
FILINFO fno;
FRESULT fresult;  // result
UINT br, bw;  // File read/write count

//Esta funcion monta la tarjeta SD para su uso
bool try_mount(char *path){
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	bool is_mounted = false;
 80025f4:	2300      	movs	r3, #0
 80025f6:	73fb      	strb	r3, [r7, #15]
	uint8_t attemps = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	73bb      	strb	r3, [r7, #14]

	//Intento montar la tarjeta SD
	do{
		res = f_mount(&fs, path, 1);
 80025fc:	2201      	movs	r2, #1
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	480a      	ldr	r0, [pc, #40]	@ (800262c <try_mount+0x40>)
 8002602:	f008 fb7b 	bl	800acfc <f_mount>
 8002606:	4603      	mov	r3, r0
 8002608:	737b      	strb	r3, [r7, #13]
		if(res == FR_OK){
 800260a:	7b7b      	ldrb	r3, [r7, #13]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d102      	bne.n	8002616 <try_mount+0x2a>
			is_mounted = true;
 8002610:	2301      	movs	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
			break;
 8002614:	e005      	b.n	8002622 <try_mount+0x36>
		}
		attemps++;
 8002616:	7bbb      	ldrb	r3, [r7, #14]
 8002618:	3301      	adds	r3, #1
 800261a:	73bb      	strb	r3, [r7, #14]
	}while(attemps < MAX_RETRIES);				//Se intenta un numero de veces. Si falla todas devuelve false
 800261c:	7bbb      	ldrb	r3, [r7, #14]
 800261e:	2bff      	cmp	r3, #255	@ 0xff
 8002620:	d1ec      	bne.n	80025fc <try_mount+0x10>

	//Devuelvo estado de montaje
	return is_mounted;
 8002622:	7bfb      	ldrb	r3, [r7, #15]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20000714 	.word	0x20000714

08002630 <try_unmount>:

//Esta funcion desmonta la tarjeta SD
bool try_unmount(char *path){
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
	FRESULT res;
	bool is_unmounted = false;
 8002638:	2300      	movs	r3, #0
 800263a:	73fb      	strb	r3, [r7, #15]
	uint8_t attemps = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	73bb      	strb	r3, [r7, #14]

	//Intento desmontar la tarjeta SD
	do{
		res = f_mount(NULL, path, 1);
 8002640:	2201      	movs	r2, #1
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	2000      	movs	r0, #0
 8002646:	f008 fb59 	bl	800acfc <f_mount>
 800264a:	4603      	mov	r3, r0
 800264c:	737b      	strb	r3, [r7, #13]
		if(res == FR_OK){
 800264e:	7b7b      	ldrb	r3, [r7, #13]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d102      	bne.n	800265a <try_unmount+0x2a>
			is_unmounted = true;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
			break;
 8002658:	e005      	b.n	8002666 <try_unmount+0x36>
		}
		attemps++;
 800265a:	7bbb      	ldrb	r3, [r7, #14]
 800265c:	3301      	adds	r3, #1
 800265e:	73bb      	strb	r3, [r7, #14]
	}while(attemps < MAX_RETRIES);
 8002660:	7bbb      	ldrb	r3, [r7, #14]
 8002662:	2bff      	cmp	r3, #255	@ 0xff
 8002664:	d1ec      	bne.n	8002640 <try_unmount+0x10>

	//Devuelvo estado de desmontaje
	return is_unmounted;
 8002666:	7bfb      	ldrb	r3, [r7, #15]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <try_f_open>:

bool try_f_open(FIL *fil, char *path, BYTE mode){
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	4613      	mov	r3, r2
 800267c:	71fb      	strb	r3, [r7, #7]
	FRESULT res;
	uint8_t attemps = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	75fb      	strb	r3, [r7, #23]
	bool is_open = false;
 8002682:	2300      	movs	r3, #0
 8002684:	75bb      	strb	r3, [r7, #22]

	//Intento abrir el archivo
	do{
		res = f_open(fil, path, mode);
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	461a      	mov	r2, r3
 800268a:	68b9      	ldr	r1, [r7, #8]
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f008 fb99 	bl	800adc4 <f_open>
 8002692:	4603      	mov	r3, r0
 8002694:	757b      	strb	r3, [r7, #21]
		if(res == FR_OK){
 8002696:	7d7b      	ldrb	r3, [r7, #21]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d102      	bne.n	80026a2 <try_f_open+0x32>
			is_open = true;
 800269c:	2301      	movs	r3, #1
 800269e:	75bb      	strb	r3, [r7, #22]
			break;
 80026a0:	e005      	b.n	80026ae <try_f_open+0x3e>
		}
		attemps++;
 80026a2:	7dfb      	ldrb	r3, [r7, #23]
 80026a4:	3301      	adds	r3, #1
 80026a6:	75fb      	strb	r3, [r7, #23]
	}while(attemps < MAX_RETRIES);
 80026a8:	7dfb      	ldrb	r3, [r7, #23]
 80026aa:	2bff      	cmp	r3, #255	@ 0xff
 80026ac:	d1eb      	bne.n	8002686 <try_f_open+0x16>

	//Devuelvo estado de lectura
	return is_open;
 80026ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <try_f_close>:

bool try_f_close(FIL *fil){
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	uint8_t attemps = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]
	bool is_closed = false;
 80026c4:	2300      	movs	r3, #0
 80026c6:	73bb      	strb	r3, [r7, #14]

	//Intento abrir el archivo
	do{
		res = f_close(fil);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f009 f97a 	bl	800b9c2 <f_close>
 80026ce:	4603      	mov	r3, r0
 80026d0:	737b      	strb	r3, [r7, #13]
		if(res == FR_OK){
 80026d2:	7b7b      	ldrb	r3, [r7, #13]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d102      	bne.n	80026de <try_f_close+0x26>
			is_closed = true;
 80026d8:	2301      	movs	r3, #1
 80026da:	73bb      	strb	r3, [r7, #14]
			break;
 80026dc:	e005      	b.n	80026ea <try_f_close+0x32>
		}
		attemps++;
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	3301      	adds	r3, #1
 80026e2:	73fb      	strb	r3, [r7, #15]
	}while(attemps < MAX_RETRIES);
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	2bff      	cmp	r3, #255	@ 0xff
 80026e8:	d1ee      	bne.n	80026c8 <try_f_close+0x10>

	//Devuelvo estado de lectura
	return is_closed;
 80026ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <try_f_read>:

//Esta funcion lee bytes de un archivo
bool try_f_read(FIL *fil, void *buffer, UINT btr, UINT *br){
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	603b      	str	r3, [r7, #0]
	FRESULT res;
	uint8_t attemps = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	75fb      	strb	r3, [r7, #23]
	bool is_read = false;
 8002706:	2300      	movs	r3, #0
 8002708:	75bb      	strb	r3, [r7, #22]

	//Intento leer desde SD
	do{
		res = f_read(fil, buffer, btr, br);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	68b9      	ldr	r1, [r7, #8]
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f008 fe4c 	bl	800b3ae <f_read>
 8002716:	4603      	mov	r3, r0
 8002718:	757b      	strb	r3, [r7, #21]
		if(res == FR_OK){
 800271a:	7d7b      	ldrb	r3, [r7, #21]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d102      	bne.n	8002726 <try_f_read+0x32>
			is_read = true;
 8002720:	2301      	movs	r3, #1
 8002722:	75bb      	strb	r3, [r7, #22]
			break;
 8002724:	e005      	b.n	8002732 <try_f_read+0x3e>
		}
		attemps++;
 8002726:	7dfb      	ldrb	r3, [r7, #23]
 8002728:	3301      	adds	r3, #1
 800272a:	75fb      	strb	r3, [r7, #23]
	}while(attemps < MAX_RETRIES);
 800272c:	7dfb      	ldrb	r3, [r7, #23]
 800272e:	2bff      	cmp	r3, #255	@ 0xff
 8002730:	d1eb      	bne.n	800270a <try_f_read+0x16>

	//Devuelvo estado de lectura
	return is_read;
 8002732:	7dbb      	ldrb	r3, [r7, #22]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	ed87 0a01 	vstr	s0, [r7, #4]
 8002746:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8002748:	edd7 7a01 	vldr	s15, [r7, #4]
 800274c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002754:	db0a      	blt.n	800276c <arm_sqrt_f32+0x30>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8002756:	ed97 0a01 	vldr	s0, [r7, #4]
 800275a:	f00c fb59 	bl	800ee10 <sqrtf>
 800275e:	eef0 7a40 	vmov.f32	s15, s0
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8002768:	2300      	movs	r3, #0
 800276a:	e005      	b.n	8002778 <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8002774:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <euclidean_distance>:
#define __FPU_PRESENT  1U
#define ARM_MATH_CM4
#include "arm_math.h"
#include "common_utils.h"

float32_t euclidean_distance(float32_t *array_1, float32_t *array_2){
 8002780:	b580      	push	{r7, lr}
 8002782:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	f107 0310 	add.w	r3, r7, #16
 800278e:	f843 0c0c 	str.w	r0, [r3, #-12]
 8002792:	f107 0310 	add.w	r3, r7, #16
 8002796:	f843 1c10 	str.w	r1, [r3, #-16]
	float32_t diff[FEATURE_SIZE] = {0};
 800279a:	f107 0310 	add.w	r3, r7, #16
 800279e:	4618      	mov	r0, r3
 80027a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027a4:	461a      	mov	r2, r3
 80027a6:	2100      	movs	r1, #0
 80027a8:	f00c faf2 	bl	800ed90 <memset>
	float32_t distance = 0;
 80027ac:	f107 0310 	add.w	r3, r7, #16
 80027b0:	461a      	mov	r2, r3
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	f842 3c04 	str.w	r3, [r2, #-4]

	//Resto vectores
	arm_sub_f32(array_1, array_2, diff, FEATURE_SIZE);
 80027ba:	f107 0210 	add.w	r2, r7, #16
 80027be:	f107 0310 	add.w	r3, r7, #16
 80027c2:	4619      	mov	r1, r3
 80027c4:	f107 0310 	add.w	r3, r7, #16
 80027c8:	4618      	mov	r0, r3
 80027ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027ce:	f851 1c10 	ldr.w	r1, [r1, #-16]
 80027d2:	f850 0c0c 	ldr.w	r0, [r0, #-12]
 80027d6:	f00c fa4f 	bl	800ec78 <arm_sub_f32>

	//Calculo la suma de los cuadrados
	arm_dot_prod_f32(diff, diff, FEATURE_SIZE, &distance);
 80027da:	f107 0310 	add.w	r3, r7, #16
 80027de:	3b04      	subs	r3, #4
 80027e0:	f107 0110 	add.w	r1, r7, #16
 80027e4:	f107 0010 	add.w	r0, r7, #16
 80027e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027ec:	f00c fa8a 	bl	800ed04 <arm_dot_prod_f32>

	//Calculo la raiz para obtener la distancia euclideana
	arm_sqrt_f32(distance, &distance);
 80027f0:	f107 0310 	add.w	r3, r7, #16
 80027f4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80027f8:	f107 0310 	add.w	r3, r7, #16
 80027fc:	3b04      	subs	r3, #4
 80027fe:	4618      	mov	r0, r3
 8002800:	eeb0 0a67 	vmov.f32	s0, s15
 8002804:	f7ff ff9a 	bl	800273c <arm_sqrt_f32>

	//Devuelvo distancia calculada
	return distance;
 8002808:	f107 0310 	add.w	r3, r7, #16
 800280c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8002810:	ee07 3a90 	vmov	s15, r3
}
 8002814:	eeb0 0a67 	vmov.f32	s0, s15
 8002818:	f507 5780 	add.w	r7, r7, #4096	@ 0x1000
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <handle_keypad_input>:
	uint8_t current_index;
	TickType_t start_time;
}keypad_context_t;

/*================[Public functions]=========================*/
display_message_t handle_keypad_input(char input, char *buffer, bool *send_flag){
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	73fb      	strb	r3, [r7, #15]
	static keypad_context_t context = { .current_state = WAITING_FOR_DIGIT_1,
										.current_index = 0,
										.start_time = 0,					};
	display_message_t current_message = DISPLAY_IDLE;
 8002832:	2300      	movs	r3, #0
 8002834:	75fb      	strb	r3, [r7, #23]
	switch(context.current_state){
 8002836:	4b62      	ldr	r3, [pc, #392]	@ (80029c0 <handle_keypad_input+0x19c>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b07      	cmp	r3, #7
 800283c:	f000 80a1 	beq.w	8002982 <handle_keypad_input+0x15e>
 8002840:	2b07      	cmp	r3, #7
 8002842:	f300 80aa 	bgt.w	800299a <handle_keypad_input+0x176>
 8002846:	2b00      	cmp	r3, #0
 8002848:	d007      	beq.n	800285a <handle_keypad_input+0x36>
 800284a:	2b00      	cmp	r3, #0
 800284c:	f2c0 80a5 	blt.w	800299a <handle_keypad_input+0x176>
 8002850:	3b01      	subs	r3, #1
 8002852:	2b05      	cmp	r3, #5
 8002854:	f200 80a1 	bhi.w	800299a <handle_keypad_input+0x176>
 8002858:	e01c      	b.n	8002894 <handle_keypad_input+0x70>
	case WAITING_FOR_DIGIT_1:
		if(input != 0 && input != BORRAR_DIGITO && input != ENTER){
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d016      	beq.n	800288e <handle_keypad_input+0x6a>
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	2b23      	cmp	r3, #35	@ 0x23
 8002864:	d013      	beq.n	800288e <handle_keypad_input+0x6a>
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	2b2a      	cmp	r3, #42	@ 0x2a
 800286a:	d010      	beq.n	800288e <handle_keypad_input+0x6a>
			buffer[0] = input;													//Guardo digito en el buffer
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	7bfa      	ldrb	r2, [r7, #15]
 8002870:	701a      	strb	r2, [r3, #0]
			context.current_index = 1;
 8002872:	4b53      	ldr	r3, [pc, #332]	@ (80029c0 <handle_keypad_input+0x19c>)
 8002874:	2201      	movs	r2, #1
 8002876:	705a      	strb	r2, [r3, #1]
			context.start_time = xTaskGetTickCount();							//Reinicio el timeout
 8002878:	f00b f8ac 	bl	800d9d4 <xTaskGetTickCount>
 800287c:	4603      	mov	r3, r0
 800287e:	4a50      	ldr	r2, [pc, #320]	@ (80029c0 <handle_keypad_input+0x19c>)
 8002880:	6053      	str	r3, [r2, #4]
			context.current_state = WAITING_FOR_DIGIT_2;						//Avanzo al siguiente estado
 8002882:	4b4f      	ldr	r3, [pc, #316]	@ (80029c0 <handle_keypad_input+0x19c>)
 8002884:	2201      	movs	r2, #1
 8002886:	701a      	strb	r2, [r3, #0]
			current_message = DISPLAY_ENTER_DIGIT;
 8002888:	2302      	movs	r3, #2
 800288a:	75fb      	strb	r3, [r7, #23]
		}
		else{
			current_message = DISPLAY_IDLE;
		}
		break;
 800288c:	e093      	b.n	80029b6 <handle_keypad_input+0x192>
			current_message = DISPLAY_IDLE;
 800288e:	2300      	movs	r3, #0
 8002890:	75fb      	strb	r3, [r7, #23]
		break;
 8002892:	e090      	b.n	80029b6 <handle_keypad_input+0x192>
	case WAITING_FOR_DIGIT_3:
	case WAITING_FOR_DIGIT_4:
	case WAITING_FOR_DIGIT_5:
	case WAITING_FOR_DIGIT_6:
	case WAITING_FOR_CONFIRMATION:
		if((xTaskGetTickCount() - context.start_time) < pdMS_TO_TICKS(KEYPAD_TIMEOUT)){
 8002894:	f00b f89e 	bl	800d9d4 <xTaskGetTickCount>
 8002898:	4602      	mov	r2, r0
 800289a:	4b49      	ldr	r3, [pc, #292]	@ (80029c0 <handle_keypad_input+0x19c>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	f241 3287 	movw	r2, #4999	@ 0x1387
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d866      	bhi.n	8002976 <handle_keypad_input+0x152>
			if(input != 0){
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d060      	beq.n	8002970 <handle_keypad_input+0x14c>
				if(input == BORRAR_DIGITO){
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	2b23      	cmp	r3, #35	@ 0x23
 80028b2:	d124      	bne.n	80028fe <handle_keypad_input+0xda>
					if(context.current_index > 0){
 80028b4:	4b42      	ldr	r3, [pc, #264]	@ (80029c0 <handle_keypad_input+0x19c>)
 80028b6:	785b      	ldrb	r3, [r3, #1]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d07b      	beq.n	80029b4 <handle_keypad_input+0x190>
						context.current_index--;
 80028bc:	4b40      	ldr	r3, [pc, #256]	@ (80029c0 <handle_keypad_input+0x19c>)
 80028be:	785b      	ldrb	r3, [r3, #1]
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	4b3e      	ldr	r3, [pc, #248]	@ (80029c0 <handle_keypad_input+0x19c>)
 80028c6:	705a      	strb	r2, [r3, #1]
						buffer[context.current_index] = '\0';					//Borro el contenido previo
 80028c8:	4b3d      	ldr	r3, [pc, #244]	@ (80029c0 <handle_keypad_input+0x19c>)
 80028ca:	785b      	ldrb	r3, [r3, #1]
 80028cc:	461a      	mov	r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	4413      	add	r3, r2
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]
						context.start_time = xTaskGetTickCount();				//Reinicio el timeout
 80028d6:	f00b f87d 	bl	800d9d4 <xTaskGetTickCount>
 80028da:	4603      	mov	r3, r0
 80028dc:	4a38      	ldr	r2, [pc, #224]	@ (80029c0 <handle_keypad_input+0x19c>)
 80028de:	6053      	str	r3, [r2, #4]
						current_message = DISPLAY_ERASE_DIGIT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	75fb      	strb	r3, [r7, #23]
						context.current_state = (context.current_state > WAITING_FOR_DIGIT_1) ? context.current_state - 1 : WAITING_FOR_DIGIT_1;
 80028e4:	4b36      	ldr	r3, [pc, #216]	@ (80029c0 <handle_keypad_input+0x19c>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d004      	beq.n	80028f6 <handle_keypad_input+0xd2>
 80028ec:	4b34      	ldr	r3, [pc, #208]	@ (80029c0 <handle_keypad_input+0x19c>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	e000      	b.n	80028f8 <handle_keypad_input+0xd4>
 80028f6:	2300      	movs	r3, #0
 80028f8:	4a31      	ldr	r2, [pc, #196]	@ (80029c0 <handle_keypad_input+0x19c>)
 80028fa:	7013      	strb	r3, [r2, #0]
		}
		else{
			context.current_state = TIMEOUT;
			current_message = DISPLAY_TIMEOUT_EVENT;
		}
		break;
 80028fc:	e05a      	b.n	80029b4 <handle_keypad_input+0x190>
				else if(input == ENTER){
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	2b2a      	cmp	r3, #42	@ 0x2a
 8002902:	d10d      	bne.n	8002920 <handle_keypad_input+0xfc>
					if(context.current_state == WAITING_FOR_CONFIRMATION){
 8002904:	4b2e      	ldr	r3, [pc, #184]	@ (80029c0 <handle_keypad_input+0x19c>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b06      	cmp	r3, #6
 800290a:	d103      	bne.n	8002914 <handle_keypad_input+0xf0>
						context.current_state = SEND_SEQUENCE_TO_SD;
 800290c:	4b2c      	ldr	r3, [pc, #176]	@ (80029c0 <handle_keypad_input+0x19c>)
 800290e:	2207      	movs	r2, #7
 8002910:	701a      	strb	r2, [r3, #0]
		break;
 8002912:	e04f      	b.n	80029b4 <handle_keypad_input+0x190>
						context.current_state = INCOMPLETE_SEQUENCE;
 8002914:	4b2a      	ldr	r3, [pc, #168]	@ (80029c0 <handle_keypad_input+0x19c>)
 8002916:	2208      	movs	r2, #8
 8002918:	701a      	strb	r2, [r3, #0]
						current_message = DISPLAY_INCOMPLETE_SEQUENCE_EVENT;
 800291a:	230b      	movs	r3, #11
 800291c:	75fb      	strb	r3, [r7, #23]
		break;
 800291e:	e049      	b.n	80029b4 <handle_keypad_input+0x190>
					if(context.current_index < SEQUENCE_LENGTH){
 8002920:	4b27      	ldr	r3, [pc, #156]	@ (80029c0 <handle_keypad_input+0x19c>)
 8002922:	785b      	ldrb	r3, [r3, #1]
 8002924:	2b05      	cmp	r3, #5
 8002926:	d845      	bhi.n	80029b4 <handle_keypad_input+0x190>
						buffer[context.current_index++] = input;				//Agrego el digito al buffer
 8002928:	4b25      	ldr	r3, [pc, #148]	@ (80029c0 <handle_keypad_input+0x19c>)
 800292a:	785b      	ldrb	r3, [r3, #1]
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	b2d1      	uxtb	r1, r2
 8002930:	4a23      	ldr	r2, [pc, #140]	@ (80029c0 <handle_keypad_input+0x19c>)
 8002932:	7051      	strb	r1, [r2, #1]
 8002934:	461a      	mov	r2, r3
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	4413      	add	r3, r2
 800293a:	7bfa      	ldrb	r2, [r7, #15]
 800293c:	701a      	strb	r2, [r3, #0]
						buffer[context.current_index] = '\0';					//Aseguro que el buffer siempre termine en caracter nulo
 800293e:	4b20      	ldr	r3, [pc, #128]	@ (80029c0 <handle_keypad_input+0x19c>)
 8002940:	785b      	ldrb	r3, [r3, #1]
 8002942:	461a      	mov	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4413      	add	r3, r2
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
						context.start_time = xTaskGetTickCount();				//Reinicio el timeout
 800294c:	f00b f842 	bl	800d9d4 <xTaskGetTickCount>
 8002950:	4603      	mov	r3, r0
 8002952:	4a1b      	ldr	r2, [pc, #108]	@ (80029c0 <handle_keypad_input+0x19c>)
 8002954:	6053      	str	r3, [r2, #4]
						current_message = DISPLAY_ENTER_DIGIT;
 8002956:	2302      	movs	r3, #2
 8002958:	75fb      	strb	r3, [r7, #23]
						if(context.current_state != WAITING_FOR_CONFIRMATION){
 800295a:	4b19      	ldr	r3, [pc, #100]	@ (80029c0 <handle_keypad_input+0x19c>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b06      	cmp	r3, #6
 8002960:	d028      	beq.n	80029b4 <handle_keypad_input+0x190>
							context.current_state++;
 8002962:	4b17      	ldr	r3, [pc, #92]	@ (80029c0 <handle_keypad_input+0x19c>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	3301      	adds	r3, #1
 8002968:	b2da      	uxtb	r2, r3
 800296a:	4b15      	ldr	r3, [pc, #84]	@ (80029c0 <handle_keypad_input+0x19c>)
 800296c:	701a      	strb	r2, [r3, #0]
		break;
 800296e:	e021      	b.n	80029b4 <handle_keypad_input+0x190>
				current_message = DISPLAY_IDLE;
 8002970:	2300      	movs	r3, #0
 8002972:	75fb      	strb	r3, [r7, #23]
		break;
 8002974:	e01e      	b.n	80029b4 <handle_keypad_input+0x190>
			context.current_state = TIMEOUT;
 8002976:	4b12      	ldr	r3, [pc, #72]	@ (80029c0 <handle_keypad_input+0x19c>)
 8002978:	2209      	movs	r2, #9
 800297a:	701a      	strb	r2, [r3, #0]
			current_message = DISPLAY_TIMEOUT_EVENT;
 800297c:	230a      	movs	r3, #10
 800297e:	75fb      	strb	r3, [r7, #23]
		break;
 8002980:	e018      	b.n	80029b4 <handle_keypad_input+0x190>
	case SEND_SEQUENCE_TO_SD:
		*send_flag = 1;															//Habilito flag para enviar el string
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	701a      	strb	r2, [r3, #0]
		context.current_state = WAITING_FOR_DIGIT_1;
 8002988:	4b0d      	ldr	r3, [pc, #52]	@ (80029c0 <handle_keypad_input+0x19c>)
 800298a:	2200      	movs	r2, #0
 800298c:	701a      	strb	r2, [r3, #0]
		context.current_index = 0;
 800298e:	4b0c      	ldr	r3, [pc, #48]	@ (80029c0 <handle_keypad_input+0x19c>)
 8002990:	2200      	movs	r2, #0
 8002992:	705a      	strb	r2, [r3, #1]
		current_message = DISPLAY_SCREEN_WELCOME;								//Luego del procesamiento se vuelve al estado inicial
 8002994:	2301      	movs	r3, #1
 8002996:	75fb      	strb	r3, [r7, #23]
		break;
 8002998:	e00d      	b.n	80029b6 <handle_keypad_input+0x192>
	case INCOMPLETE_SEQUENCE:
	case TIMEOUT:
	default:
		clear_buffer(buffer, SEQUENCE_LENGTH + 1);
 800299a:	2107      	movs	r1, #7
 800299c:	68b8      	ldr	r0, [r7, #8]
 800299e:	f000 fa83 	bl	8002ea8 <clear_buffer>
		context.current_state = WAITING_FOR_DIGIT_1;							//Vuelvo al estado inicial
 80029a2:	4b07      	ldr	r3, [pc, #28]	@ (80029c0 <handle_keypad_input+0x19c>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
		context.current_index = 0;
 80029a8:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <handle_keypad_input+0x19c>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	705a      	strb	r2, [r3, #1]
		current_message = DISPLAY_SCREEN_WELCOME;
 80029ae:	2301      	movs	r3, #1
 80029b0:	75fb      	strb	r3, [r7, #23]
		break;
 80029b2:	e000      	b.n	80029b6 <handle_keypad_input+0x192>
		break;
 80029b4:	bf00      	nop
	}
	return current_message;
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	200027b8 	.word	0x200027b8

080029c4 <compare_features>:
 *
 * @param feature_1 String que contiene el nombre del archivo con el feature 1 (terminado en .bin).
 * @param feature_1 String que contiene el nombre del archivo con el feature 2 (terminado en .bin).
 * @return true si la voz fue reconocida, false en caso contrario.
 */
bool compare_features(char *feature_1, char *feature_2){
 80029c4:	b580      	push	{r7, lr}
 80029c6:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	f107 0320 	add.w	r3, r7, #32
 80029d2:	f843 0c1c 	str.w	r0, [r3, #-28]
 80029d6:	f107 0320 	add.w	r3, r7, #32
 80029da:	f843 1c20 	str.w	r1, [r3, #-32]
	//Declaro vectores de procesamiento
	float32_t feature1_block[FEATURE_SIZE] = {0};
 80029de:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80029e2:	3b10      	subs	r3, #16
 80029e4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f00c f9d0 	bl	800ed90 <memset>
	float32_t feature2_block[FEATURE_SIZE] = {0};
 80029f0:	f107 0320 	add.w	r3, r7, #32
 80029f4:	3b10      	subs	r3, #16
 80029f6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80029fa:	2100      	movs	r1, #0
 80029fc:	4618      	mov	r0, r3
 80029fe:	f00c f9c7 	bl	800ed90 <memset>
	float32_t distance = 0;
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8002a0a:	f102 0214 	add.w	r2, r2, #20
 8002a0e:	6013      	str	r3, [r2, #0]
	uint32_t blocks_ok = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8002a16:	f102 021c 	add.w	r2, r2, #28
 8002a1a:	6013      	str	r3, [r2, #0]
	uint32_t last_pos[2] = {0};
 8002a1c:	f107 0320 	add.w	r3, r7, #32
 8002a20:	3b18      	subs	r3, #24
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
	bool is_recognized;

	for(uint8_t i = 0; i < NUM_OF_BLOCKS; i++){
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8002a2e:	f102 021b 	add.w	r2, r2, #27
 8002a32:	7013      	strb	r3, [r2, #0]
 8002a34:	e062      	b.n	8002afc <compare_features+0x138>
		//Leo cada bloque del archivo, y comparo bin a bin
		if(!read_data_from_sd(feature_1, (void *) feature1_block, FLOAT_SIZE_BYTES(FEATURE_SIZE), &last_pos[0]) ||
 8002a36:	f107 0320 	add.w	r3, r7, #32
 8002a3a:	3b18      	subs	r3, #24
 8002a3c:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 8002a40:	3910      	subs	r1, #16
 8002a42:	f107 0220 	add.w	r2, r7, #32
 8002a46:	4610      	mov	r0, r2
 8002a48:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a4c:	f850 0c1c 	ldr.w	r0, [r0, #-28]
 8002a50:	f7ff fd74 	bl	800253c <read_data_from_sd>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f083 0301 	eor.w	r3, r3, #1
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d115      	bne.n	8002a8c <compare_features+0xc8>
		   !read_data_from_sd(feature_2, (void *) feature2_block, FLOAT_SIZE_BYTES(FEATURE_SIZE), &last_pos[1])){
 8002a60:	f107 0320 	add.w	r3, r7, #32
 8002a64:	3b18      	subs	r3, #24
 8002a66:	3304      	adds	r3, #4
 8002a68:	f107 0120 	add.w	r1, r7, #32
 8002a6c:	3910      	subs	r1, #16
 8002a6e:	f107 0220 	add.w	r2, r7, #32
 8002a72:	4610      	mov	r0, r2
 8002a74:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a78:	f850 0c20 	ldr.w	r0, [r0, #-32]
 8002a7c:	f7ff fd5e 	bl	800253c <read_data_from_sd>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f083 0301 	eor.w	r3, r3, #1
 8002a86:	b2db      	uxtb	r3, r3
		if(!read_data_from_sd(feature_1, (void *) feature1_block, FLOAT_SIZE_BYTES(FEATURE_SIZE), &last_pos[0]) ||
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d004      	beq.n	8002a96 <compare_features+0xd2>
			send_error(DISPLAY_READ_SD_ERROR);
 8002a8c:	2013      	movs	r0, #19
 8002a8e:	f000 fa4d 	bl	8002f2c <send_error>
			return false;
 8002a92:	2300      	movs	r3, #0
 8002a94:	e04c      	b.n	8002b30 <compare_features+0x16c>
		}

		//Calculo la distancia euclideana
		distance = euclidean_distance(feature1_block, feature2_block);
 8002a96:	f107 0220 	add.w	r2, r7, #32
 8002a9a:	3a10      	subs	r2, #16
 8002a9c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002aa0:	3b10      	subs	r3, #16
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fe6b 	bl	8002780 <euclidean_distance>
 8002aaa:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002aae:	f103 0314 	add.w	r3, r3, #20
 8002ab2:	ed83 0a00 	vstr	s0, [r3]

		//Verifico si es menor al threshold
		if(distance <= DISTANCE_THRESHOLD){
 8002ab6:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002aba:	f103 0314 	add.w	r3, r3, #20
 8002abe:	edd3 7a00 	vldr	s15, [r3]
 8002ac2:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002b3c <compare_features+0x178>
 8002ac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ace:	d80a      	bhi.n	8002ae6 <compare_features+0x122>
			blocks_ok++;
 8002ad0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002ad4:	f103 031c 	add.w	r3, r3, #28
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	3301      	adds	r3, #1
 8002adc:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8002ae0:	f102 021c 	add.w	r2, r2, #28
 8002ae4:	6013      	str	r3, [r2, #0]
	for(uint8_t i = 0; i < NUM_OF_BLOCKS; i++){
 8002ae6:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002aea:	f103 031b 	add.w	r3, r3, #27
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	3301      	adds	r3, #1
 8002af2:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8002af6:	f102 021b 	add.w	r2, r2, #27
 8002afa:	7013      	strb	r3, [r2, #0]
 8002afc:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002b00:	f103 031b 	add.w	r3, r3, #27
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b16      	cmp	r3, #22
 8002b08:	d995      	bls.n	8002a36 <compare_features+0x72>
		}
	}

	//Chequeo si pasaron la verificacion la cantidad de bloques requeridos
	is_recognized = (blocks_ok >= ACCEPTED_BLOCK_TH) ? true : false;
 8002b0a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002b0e:	f103 031c 	add.w	r3, r3, #28
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b14      	cmp	r3, #20
 8002b16:	bf8c      	ite	hi
 8002b18:	2301      	movhi	r3, #1
 8002b1a:	2300      	movls	r3, #0
 8002b1c:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8002b20:	f102 0213 	add.w	r2, r2, #19
 8002b24:	7013      	strb	r3, [r2, #0]

	//Devuelvo estado de reconocimiento
	return is_recognized;
 8002b26:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002b2a:	f103 0313 	add.w	r3, r3, #19
 8002b2e:	781b      	ldrb	r3, [r3, #0]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	f507 5700 	add.w	r7, r7, #8192	@ 0x2000
 8002b36:	3720      	adds	r7, #32
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40133333 	.word	0x40133333

08002b40 <display_task>:
	}
}

#elif DISPLAY_FUNCTION == 1
//Version funcional que utiliza el control de acceso
void display_task(void *pvParameters){
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	display_message_t message;
	uint8_t counter = 0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	73fb      	strb	r3, [r7, #15]
	display_init();						//Inicializo el display
 8002b4c:	f7ff f809 	bl	8001b62 <display_init>
	display_start_msg();				//Muestro mensaje inicial
 8002b50:	f7ff f8a4 	bl	8001c9c <display_start_msg>
	while(1){
		xQueueReceive(display_queue, &message, portMAX_DELAY);				//Espero a que llegue una pantalla para mostrar
 8002b54:	4b88      	ldr	r3, [pc, #544]	@ (8002d78 <display_task+0x238>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f107 010e 	add.w	r1, r7, #14
 8002b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b60:	4618      	mov	r0, r3
 8002b62:	f00a f8f3 	bl	800cd4c <xQueueReceive>
		switch(message){
 8002b66:	7bbb      	ldrb	r3, [r7, #14]
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	2b13      	cmp	r3, #19
 8002b6c:	d8f2      	bhi.n	8002b54 <display_task+0x14>
 8002b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b74 <display_task+0x34>)
 8002b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b74:	08002bc5 	.word	0x08002bc5
 8002b78:	08002bcb 	.word	0x08002bcb
 8002b7c:	08002be3 	.word	0x08002be3
 8002b80:	08002bfb 	.word	0x08002bfb
 8002b84:	08002c0d 	.word	0x08002c0d
 8002b88:	08002c2d 	.word	0x08002c2d
 8002b8c:	08002c51 	.word	0x08002c51
 8002b90:	08002c57 	.word	0x08002c57
 8002b94:	08002c73 	.word	0x08002c73
 8002b98:	08002c8f 	.word	0x08002c8f
 8002b9c:	08002ca1 	.word	0x08002ca1
 8002ba0:	08002cb3 	.word	0x08002cb3
 8002ba4:	08002ccf 	.word	0x08002ccf
 8002ba8:	08002ceb 	.word	0x08002ceb
 8002bac:	08002cf1 	.word	0x08002cf1
 8002bb0:	08002d0d 	.word	0x08002d0d
 8002bb4:	08002d13 	.word	0x08002d13
 8002bb8:	08002d19 	.word	0x08002d19
 8002bbc:	08002d35 	.word	0x08002d35
 8002bc0:	08002d51 	.word	0x08002d51
		case DISPLAY_SCREEN_WELCOME:
			display_start_msg();
 8002bc4:	f7ff f86a 	bl	8001c9c <display_start_msg>
			break;
 8002bc8:	e0d4      	b.n	8002d74 <display_task+0x234>
		case DISPLAY_ENTER_DIGIT:
			if(counter < SEQUENCE_LENGTH){
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	2b05      	cmp	r3, #5
 8002bce:	f200 80cd 	bhi.w	8002d6c <display_task+0x22c>
				counter++;
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
				display_sequence_entry_msg(counter);
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff f894 	bl	8001d08 <display_sequence_entry_msg>
			}
			break;
 8002be0:	e0c4      	b.n	8002d6c <display_task+0x22c>
		case DISPLAY_ERASE_DIGIT:
			if(counter > 0){
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 80c3 	beq.w	8002d70 <display_task+0x230>
				counter--;
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
				display_sequence_entry_msg(counter);
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff f888 	bl	8001d08 <display_sequence_entry_msg>
			}
			break;
 8002bf8:	e0ba      	b.n	8002d70 <display_task+0x230>
		case DISPLAY_USER_FOUND:
			display_user_found_msg();
 8002bfa:	f7ff f8ed 	bl	8001dd8 <display_user_found_msg>
			counter = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8002c02:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002c06:	f00a fdbb 	bl	800d780 <vTaskDelay>
			break;
 8002c0a:	e0b3      	b.n	8002d74 <display_task+0x234>
		case DISPLAY_USER_NOT_FOUND:
			display_user_not_found_msg();
 8002c0c:	f7ff f8ee 	bl	8001dec <display_user_not_found_msg>
			counter = 0;													//Reinicio el contador
 8002c10:	2300      	movs	r3, #0
 8002c12:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8002c14:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002c18:	f00a fdb2 	bl	800d780 <vTaskDelay>
			xSemaphoreGive(sd_display_sync);								//Luego del delay, doy semaforo para que tarea sd siga ejecutandose
 8002c1c:	4b57      	ldr	r3, [pc, #348]	@ (8002d7c <display_task+0x23c>)
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	2300      	movs	r3, #0
 8002c22:	2200      	movs	r2, #0
 8002c24:	2100      	movs	r1, #0
 8002c26:	f009 feff 	bl	800ca28 <xQueueGenericSend>
			break;
 8002c2a:	e0a3      	b.n	8002d74 <display_task+0x234>
		case DISPLAY_START_SPEECH_REC:
			display_start_voice_recognition_msg();
 8002c2c:	f7ff f8e8 	bl	8001e00 <display_start_voice_recognition_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8002c30:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002c34:	f00a fda4 	bl	800d780 <vTaskDelay>
			countdown_msg();
 8002c38:	f7ff f8ec 	bl	8001e14 <countdown_msg>
			display_capturing_voice_msg();
 8002c3c:	f7ff f940 	bl	8001ec0 <display_capturing_voice_msg>
			xSemaphoreGive(sd_display_sync);
 8002c40:	4b4e      	ldr	r3, [pc, #312]	@ (8002d7c <display_task+0x23c>)
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	2300      	movs	r3, #0
 8002c46:	2200      	movs	r2, #0
 8002c48:	2100      	movs	r1, #0
 8002c4a:	f009 feed 	bl	800ca28 <xQueueGenericSend>
			break;
 8002c4e:	e091      	b.n	8002d74 <display_task+0x234>
		case DISPLAY_PROCESSING_DATA:
			display_processing_data_msg();
 8002c50:	f7ff f940 	bl	8001ed4 <display_processing_data_msg>
			//vTaskDelay(2000 / portTICK_RATE_MS);
			break;
 8002c54:	e08e      	b.n	8002d74 <display_task+0x234>
		case DISPLAY_ACCESS_GRANTED:
			display_access_granted_msg();
 8002c56:	f7ff f8ab 	bl	8001db0 <display_access_granted_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8002c5a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002c5e:	f00a fd8f 	bl	800d780 <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 8002c62:	4b46      	ldr	r3, [pc, #280]	@ (8002d7c <display_task+0x23c>)
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	2300      	movs	r3, #0
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	f009 fedc 	bl	800ca28 <xQueueGenericSend>
			break;
 8002c70:	e080      	b.n	8002d74 <display_task+0x234>
		case DISPLAY_ACCESS_DENIED:
			display_access_denied_msg();
 8002c72:	f7ff f8a7 	bl	8001dc4 <display_access_denied_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8002c76:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002c7a:	f00a fd81 	bl	800d780 <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 8002c7e:	4b3f      	ldr	r3, [pc, #252]	@ (8002d7c <display_task+0x23c>)
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	2300      	movs	r3, #0
 8002c84:	2200      	movs	r2, #0
 8002c86:	2100      	movs	r1, #0
 8002c88:	f009 fece 	bl	800ca28 <xQueueGenericSend>
			break;
 8002c8c:	e072      	b.n	8002d74 <display_task+0x234>
		case DISPLAY_TIMEOUT_EVENT:
			display_timeout_msg();
 8002c8e:	f7ff f87b 	bl	8001d88 <display_timeout_msg>
			counter = 0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8002c96:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002c9a:	f00a fd71 	bl	800d780 <vTaskDelay>
			break;
 8002c9e:	e069      	b.n	8002d74 <display_task+0x234>
		case DISPLAY_INCOMPLETE_SEQUENCE_EVENT:
			display_incomplete_entry_msg();
 8002ca0:	f7ff f87c 	bl	8001d9c <display_incomplete_entry_msg>
			counter = 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8002ca8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002cac:	f00a fd68 	bl	800d780 <vTaskDelay>
			break;
 8002cb0:	e060      	b.n	8002d74 <display_task+0x234>
		case DISPLAY_TEMPLATE_SAVED:
			display_template_saved_msg();
 8002cb2:	f7ff f92d 	bl	8001f10 <display_template_saved_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8002cb6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002cba:	f00a fd61 	bl	800d780 <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 8002cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8002d7c <display_task+0x23c>)
 8002cc0:	6818      	ldr	r0, [r3, #0]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	f009 feae 	bl	800ca28 <xQueueGenericSend>
			break;
 8002ccc:	e052      	b.n	8002d74 <display_task+0x234>
		//Casos asociados a errores
		case DISPLAY_TEMPLATE_NOT_CREATED:
			display_template_not_created_msg();
 8002cce:	f7ff f929 	bl	8001f24 <display_template_not_created_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8002cd2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002cd6:	f00a fd53 	bl	800d780 <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 8002cda:	4b28      	ldr	r3, [pc, #160]	@ (8002d7c <display_task+0x23c>)
 8002cdc:	6818      	ldr	r0, [r3, #0]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	f009 fea0 	bl	800ca28 <xQueueGenericSend>
			break;
 8002ce8:	e044      	b.n	8002d74 <display_task+0x234>
		case DISPLAY_MOUNTING_ERROR:
			display_mounting_error_msg();
 8002cea:	f7ff f925 	bl	8001f38 <display_mounting_error_msg>
			break;
 8002cee:	e041      	b.n	8002d74 <display_task+0x234>
		case DISPLAY_TEMPLATE_NOT_FOUND:
			display_missing_template_msg();
 8002cf0:	f7ff f904 	bl	8001efc <display_missing_template_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8002cf4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002cf8:	f00a fd42 	bl	800d780 <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 8002cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8002d7c <display_task+0x23c>)
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	2300      	movs	r3, #0
 8002d02:	2200      	movs	r2, #0
 8002d04:	2100      	movs	r1, #0
 8002d06:	f009 fe8f 	bl	800ca28 <xQueueGenericSend>
			break;
 8002d0a:	e033      	b.n	8002d74 <display_task+0x234>
		case DISPLAY_DATABASE_NOT_FOUND:
			display_missing_database_msg();
 8002d0c:	f7ff f8ec 	bl	8001ee8 <display_missing_database_msg>
			break;
 8002d10:	e030      	b.n	8002d74 <display_task+0x234>
		case DISPLAY_REGISTER_NOT_CREATED:
			display_register_not_created_msg();
 8002d12:	f7ff f91b 	bl	8001f4c <display_register_not_created_msg>
			break;
 8002d16:	e02d      	b.n	8002d74 <display_task+0x234>
		case DISPLAY_MEMORY_ERROR:
			display_memory_error_msg();
 8002d18:	f7ff f922 	bl	8001f60 <display_memory_error_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8002d1c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002d20:	f00a fd2e 	bl	800d780 <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 8002d24:	4b15      	ldr	r3, [pc, #84]	@ (8002d7c <display_task+0x23c>)
 8002d26:	6818      	ldr	r0, [r3, #0]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	f009 fe7b 	bl	800ca28 <xQueueGenericSend>
			break;
 8002d32:	e01f      	b.n	8002d74 <display_task+0x234>
		case DISPLAY_READ_SD_ERROR:
			display_read_sd_error_msg();
 8002d34:	f7ff f91e 	bl	8001f74 <display_read_sd_error_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8002d38:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002d3c:	f00a fd20 	bl	800d780 <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 8002d40:	4b0e      	ldr	r3, [pc, #56]	@ (8002d7c <display_task+0x23c>)
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	2300      	movs	r3, #0
 8002d46:	2200      	movs	r2, #0
 8002d48:	2100      	movs	r1, #0
 8002d4a:	f009 fe6d 	bl	800ca28 <xQueueGenericSend>
			break;
 8002d4e:	e011      	b.n	8002d74 <display_task+0x234>
		case DISPLAY_WRITE_SD_ERROR:
			display_write_sd_error_msg();
 8002d50:	f7ff f91a 	bl	8001f88 <display_write_sd_error_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8002d54:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002d58:	f00a fd12 	bl	800d780 <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 8002d5c:	4b07      	ldr	r3, [pc, #28]	@ (8002d7c <display_task+0x23c>)
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	2300      	movs	r3, #0
 8002d62:	2200      	movs	r2, #0
 8002d64:	2100      	movs	r1, #0
 8002d66:	f009 fe5f 	bl	800ca28 <xQueueGenericSend>
			break;
 8002d6a:	e003      	b.n	8002d74 <display_task+0x234>
			break;
 8002d6c:	bf00      	nop
 8002d6e:	e6f1      	b.n	8002b54 <display_task+0x14>
			break;
 8002d70:	bf00      	nop
 8002d72:	e6ef      	b.n	8002b54 <display_task+0x14>
		xQueueReceive(display_queue, &message, portMAX_DELAY);				//Espero a que llegue una pantalla para mostrar
 8002d74:	e6ee      	b.n	8002b54 <display_task+0x14>
 8002d76:	bf00      	nop
 8002d78:	200002b0 	.word	0x200002b0
 8002d7c:	200002b8 	.word	0x200002b8

08002d80 <keypad_task>:
#include <digit_handle_logic.h>
#include "keypad_functions.h"
/*================[Public Task]=====================*/
void keypad_task(void *pvParameters){
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
	char input;
	char kp_buffer[SEQUENCE_LENGTH + 1] = {0};										//Son 7 elementos para incluir el caracter '\0'
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	f107 0310 	add.w	r3, r7, #16
 8002d90:	2100      	movs	r1, #0
 8002d92:	460a      	mov	r2, r1
 8002d94:	801a      	strh	r2, [r3, #0]
 8002d96:	460a      	mov	r2, r1
 8002d98:	709a      	strb	r2, [r3, #2]
	bool send_flag = false;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	72fb      	strb	r3, [r7, #11]
	display_message_t message;
	while(1){
		input = read_keypad();
 8002d9e:	f7ff fb6b 	bl	8002478 <read_keypad>
 8002da2:	4603      	mov	r3, r0
 8002da4:	75bb      	strb	r3, [r7, #22]
		message = handle_keypad_input(input, kp_buffer, &send_flag);				//Manejo la logica de recepcion. Con 6 digitos se envia
 8002da6:	f107 020b 	add.w	r2, r7, #11
 8002daa:	f107 010c 	add.w	r1, r7, #12
 8002dae:	7dbb      	ldrb	r3, [r7, #22]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fd37 	bl	8002824 <handle_keypad_input>
 8002db6:	4603      	mov	r3, r0
 8002db8:	72bb      	strb	r3, [r7, #10]
		if(send_flag){
 8002dba:	7afb      	ldrb	r3, [r7, #11]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01c      	beq.n	8002dfa <keypad_task+0x7a>
			//Envio uno por uno los digitos obtenidos con el keypad a la tarea SD
			for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	75fb      	strb	r3, [r7, #23]
 8002dc4:	e00d      	b.n	8002de2 <keypad_task+0x62>
				xQueueSend(sequence_queue, &kp_buffer[i], portMAX_DELAY);
 8002dc6:	4b13      	ldr	r3, [pc, #76]	@ (8002e14 <keypad_task+0x94>)
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
 8002dcc:	f107 020c 	add.w	r2, r7, #12
 8002dd0:	18d1      	adds	r1, r2, r3
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd8:	f009 fe26 	bl	800ca28 <xQueueGenericSend>
			for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
 8002dde:	3301      	adds	r3, #1
 8002de0:	75fb      	strb	r3, [r7, #23]
 8002de2:	7dfb      	ldrb	r3, [r7, #23]
 8002de4:	2b06      	cmp	r3, #6
 8002de6:	d9ee      	bls.n	8002dc6 <keypad_task+0x46>
			}
			xSemaphoreTake(keypad_sd_sync, portMAX_DELAY);							//Espero que la tarea SD devuelva el semaforo
 8002de8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <keypad_task+0x98>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f04f 31ff 	mov.w	r1, #4294967295
 8002df0:	4618      	mov	r0, r3
 8002df2:	f00a f88d 	bl	800cf10 <xQueueSemaphoreTake>

			//Reinicio el flag de envio
			send_flag = false;
 8002df6:	2300      	movs	r3, #0
 8002df8:	72fb      	strb	r3, [r7, #11]
		}

		//Envio el mensaje a la tarea display si no hay pantalla idle
		if(message != DISPLAY_IDLE){
 8002dfa:	7abb      	ldrb	r3, [r7, #10]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0ce      	beq.n	8002d9e <keypad_task+0x1e>
			xQueueSend(display_queue, &message, portMAX_DELAY);
 8002e00:	4b06      	ldr	r3, [pc, #24]	@ (8002e1c <keypad_task+0x9c>)
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	f107 010a 	add.w	r1, r7, #10
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0e:	f009 fe0b 	bl	800ca28 <xQueueGenericSend>
		input = read_keypad();
 8002e12:	e7c4      	b.n	8002d9e <keypad_task+0x1e>
 8002e14:	200002ac 	.word	0x200002ac
 8002e18:	200002b4 	.word	0x200002b4
 8002e1c:	200002b0 	.word	0x200002b0

08002e20 <sd_task>:
		}
	}
}

#elif CODE_VERSION == 2
void sd_task(void *pvParameters){
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
	display_message_t message;
	bool res;
	bool is_recognized;
	//Monto tarjeta SD
	res = try_mount("");
 8002e28:	481b      	ldr	r0, [pc, #108]	@ (8002e98 <sd_task+0x78>)
 8002e2a:	f7ff fbdf 	bl	80025ec <try_mount>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	73fb      	strb	r3, [r7, #15]
	if(!res){
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	f083 0301 	eor.w	r3, r3, #1
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00c      	beq.n	8002e58 <sd_task+0x38>
		message = DISPLAY_MOUNTING_ERROR;
 8002e3e:	230e      	movs	r3, #14
 8002e40:	737b      	strb	r3, [r7, #13]
		xQueueSend(display_queue, &message, portMAX_DELAY);
 8002e42:	4b16      	ldr	r3, [pc, #88]	@ (8002e9c <sd_task+0x7c>)
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	f107 010d 	add.w	r1, r7, #13
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e50:	f009 fdea 	bl	800ca28 <xQueueGenericSend>
		while(1);
 8002e54:	bf00      	nop
 8002e56:	e7fd      	b.n	8002e54 <sd_task+0x34>
	}

	//Comparo features
	is_recognized = compare_features(TEMPLATE_P, TEST_P);
 8002e58:	4911      	ldr	r1, [pc, #68]	@ (8002ea0 <sd_task+0x80>)
 8002e5a:	4812      	ldr	r0, [pc, #72]	@ (8002ea4 <sd_task+0x84>)
 8002e5c:	f7ff fdb2 	bl	80029c4 <compare_features>
 8002e60:	4603      	mov	r3, r0
 8002e62:	73bb      	strb	r3, [r7, #14]

	//Desmonto tarjeta SD
	res = try_unmount("");
 8002e64:	480c      	ldr	r0, [pc, #48]	@ (8002e98 <sd_task+0x78>)
 8002e66:	f7ff fbe3 	bl	8002630 <try_unmount>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	73fb      	strb	r3, [r7, #15]
	if(!res){
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
 8002e70:	f083 0301 	eor.w	r3, r3, #1
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00c      	beq.n	8002e94 <sd_task+0x74>
		message = DISPLAY_MOUNTING_ERROR;
 8002e7a:	230e      	movs	r3, #14
 8002e7c:	737b      	strb	r3, [r7, #13]
		xQueueSend(display_queue, &message, portMAX_DELAY);
 8002e7e:	4b07      	ldr	r3, [pc, #28]	@ (8002e9c <sd_task+0x7c>)
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	f107 010d 	add.w	r1, r7, #13
 8002e86:	2300      	movs	r3, #0
 8002e88:	f04f 32ff 	mov.w	r2, #4294967295
 8002e8c:	f009 fdcc 	bl	800ca28 <xQueueGenericSend>
		while(1);
 8002e90:	bf00      	nop
 8002e92:	e7fd      	b.n	8002e90 <sd_task+0x70>
	}

	while(1){
 8002e94:	e7fe      	b.n	8002e94 <sd_task+0x74>
 8002e96:	bf00      	nop
 8002e98:	0800f07c 	.word	0x0800f07c
 8002e9c:	200002b0 	.word	0x200002b0
 8002ea0:	0800f080 	.word	0x0800f080
 8002ea4:	0800f094 	.word	0x0800f094

08002ea8 <clear_buffer>:
#include "common_utils.h"
//Funciones utiles
void clear_buffer(char *buffer, size_t length) {
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
    if (buffer == NULL) {
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00f      	beq.n	8002ed8 <clear_buffer+0x30>
        return; // Verifica que el puntero no sea nulo
    }
    for (size_t i = 0; i < length; i++) {
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	e007      	b.n	8002ece <clear_buffer+0x26>
        buffer[i] = '\0'; // Llena el buffer con caracteres nulos
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < length; i++) {
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d3f3      	bcc.n	8002ebe <clear_buffer+0x16>
 8002ed6:	e000      	b.n	8002eda <clear_buffer+0x32>
        return; // Verifica que el puntero no sea nulo
 8002ed8:	bf00      	nop
    }
}
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <send_message>:
	*ptr = 0;
	return;
}


void send_message(display_message_t message, bool is_blocking){
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	460a      	mov	r2, r1
 8002eee:	71fb      	strb	r3, [r7, #7]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	71bb      	strb	r3, [r7, #6]
	xQueueSend(display_queue, &message, portMAX_DELAY);					//Envio mensaje de error al display
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f24 <send_message+0x40>)
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	1df9      	adds	r1, r7, #7
 8002efa:	2300      	movs	r3, #0
 8002efc:	f04f 32ff 	mov.w	r2, #4294967295
 8002f00:	f009 fd92 	bl	800ca28 <xQueueGenericSend>

	//Compruebo si es bloqueante el mensaje
	if(is_blocking){
 8002f04:	79bb      	ldrb	r3, [r7, #6]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <send_message+0x36>
		xSemaphoreTake(sd_display_sync, portMAX_DELAY);					//Esperar hasta que el display termine de mostrar el mensaje
 8002f0a:	4b07      	ldr	r3, [pc, #28]	@ (8002f28 <send_message+0x44>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f04f 31ff 	mov.w	r1, #4294967295
 8002f12:	4618      	mov	r0, r3
 8002f14:	f009 fffc 	bl	800cf10 <xQueueSemaphoreTake>
	}
	return;
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop
}
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	200002b0 	.word	0x200002b0
 8002f28:	200002b8 	.word	0x200002b8

08002f2c <send_error>:

void send_error(display_message_t error_message){
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	71fb      	strb	r3, [r7, #7]
	send_message(error_message, BLOCKING);
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	2101      	movs	r1, #1
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff ffd2 	bl	8002ee4 <send_message>
	return;
 8002f40:	bf00      	nop
}
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002f88 <HAL_Init+0x40>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a0d      	ldr	r2, [pc, #52]	@ (8002f88 <HAL_Init+0x40>)
 8002f52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f58:	4b0b      	ldr	r3, [pc, #44]	@ (8002f88 <HAL_Init+0x40>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8002f88 <HAL_Init+0x40>)
 8002f5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f64:	4b08      	ldr	r3, [pc, #32]	@ (8002f88 <HAL_Init+0x40>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a07      	ldr	r2, [pc, #28]	@ (8002f88 <HAL_Init+0x40>)
 8002f6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f70:	2003      	movs	r0, #3
 8002f72:	f000 fcc2 	bl	80038fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f76:	200f      	movs	r0, #15
 8002f78:	f7fe fcc2 	bl	8001900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f7c:	f7fe fad8 	bl	8001530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40023c00 	.word	0x40023c00

08002f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f90:	4b06      	ldr	r3, [pc, #24]	@ (8002fac <HAL_IncTick+0x20>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	461a      	mov	r2, r3
 8002f96:	4b06      	ldr	r3, [pc, #24]	@ (8002fb0 <HAL_IncTick+0x24>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	4a04      	ldr	r2, [pc, #16]	@ (8002fb0 <HAL_IncTick+0x24>)
 8002f9e:	6013      	str	r3, [r2, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	20000018 	.word	0x20000018
 8002fb0:	200027c0 	.word	0x200027c0

08002fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fb8:	4b03      	ldr	r3, [pc, #12]	@ (8002fc8 <HAL_GetTick+0x14>)
 8002fba:	681b      	ldr	r3, [r3, #0]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	200027c0 	.word	0x200027c0

08002fcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e033      	b.n	800304a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d109      	bne.n	8002ffe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fe facc 	bl	8001588 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	f003 0310 	and.w	r3, r3, #16
 8003006:	2b00      	cmp	r3, #0
 8003008:	d118      	bne.n	800303c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003012:	f023 0302 	bic.w	r3, r3, #2
 8003016:	f043 0202 	orr.w	r2, r3, #2
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fab8 	bl	8003594 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302e:	f023 0303 	bic.w	r3, r3, #3
 8003032:	f043 0201 	orr.w	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	641a      	str	r2, [r3, #64]	@ 0x40
 800303a:	e001      	b.n	8003040 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003048:	7bfb      	ldrb	r3, [r7, #15]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b086      	sub	sp, #24
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	2300      	movs	r3, #0
 8003060:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	f003 0320 	and.w	r3, r3, #32
 8003080:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d049      	beq.n	800311c <HAL_ADC_IRQHandler+0xca>
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d046      	beq.n	800311c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	f003 0310 	and.w	r3, r3, #16
 8003096:	2b00      	cmp	r3, #0
 8003098:	d105      	bne.n	80030a6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d12b      	bne.n	800310c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d127      	bne.n	800310c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d006      	beq.n	80030d8 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d119      	bne.n	800310c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0220 	bic.w	r2, r2, #32
 80030e6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d105      	bne.n	800310c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003104:	f043 0201 	orr.w	r2, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7fe f9e1 	bl	80014d4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f06f 0212 	mvn.w	r2, #18
 800311a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800312a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d057      	beq.n	80031e2 <HAL_ADC_IRQHandler+0x190>
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d054      	beq.n	80031e2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b00      	cmp	r3, #0
 8003142:	d105      	bne.n	8003150 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003148:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d139      	bne.n	80031d2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003164:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003168:	2b00      	cmp	r3, #0
 800316a:	d006      	beq.n	800317a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003176:	2b00      	cmp	r3, #0
 8003178:	d12b      	bne.n	80031d2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003184:	2b00      	cmp	r3, #0
 8003186:	d124      	bne.n	80031d2 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003192:	2b00      	cmp	r3, #0
 8003194:	d11d      	bne.n	80031d2 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800319a:	2b00      	cmp	r3, #0
 800319c:	d119      	bne.n	80031d2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031ac:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d105      	bne.n	80031d2 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	f043 0201 	orr.w	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fada 	bl	800378c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f06f 020c 	mvn.w	r2, #12
 80031e0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d017      	beq.n	8003228 <HAL_ADC_IRQHandler+0x1d6>
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d014      	beq.n	8003228 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b01      	cmp	r3, #1
 800320a:	d10d      	bne.n	8003228 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003210:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f884 	bl	8003326 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f06f 0201 	mvn.w	r2, #1
 8003226:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003236:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d015      	beq.n	800326a <HAL_ADC_IRQHandler+0x218>
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d012      	beq.n	800326a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003248:	f043 0202 	orr.w	r2, r3, #2
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f06f 0220 	mvn.w	r2, #32
 8003258:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f86d 	bl	800333a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0220 	mvn.w	r2, #32
 8003268:	601a      	str	r2, [r3, #0]
  }
}
 800326a:	bf00      	nop
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_ADC_Stop_DMA+0x1a>
 8003288:	2302      	movs	r3, #2
 800328a:	e048      	b.n	800331e <HAL_ADC_Stop_DMA+0xac>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0201 	bic.w	r2, r2, #1
 80032a2:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d130      	bne.n	8003314 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032c0:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d10f      	bne.n	80032f0 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 fbf3 	bl	8003ac0 <HAL_DMA_Abort>
 80032da:	4603      	mov	r3, r0
 80032dc:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80032de:	7bfb      	ldrb	r3, [r7, #15]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80032fe:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003304:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003308:	f023 0301 	bic.w	r3, r3, #1
 800330c:	f043 0201 	orr.w	r2, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800331c:	7bfb      	ldrb	r3, [r7, #15]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_ADC_ConfigChannel+0x1c>
 8003368:	2302      	movs	r3, #2
 800336a:	e105      	b.n	8003578 <HAL_ADC_ConfigChannel+0x228>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b09      	cmp	r3, #9
 800337a:	d925      	bls.n	80033c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68d9      	ldr	r1, [r3, #12]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	b29b      	uxth	r3, r3
 8003388:	461a      	mov	r2, r3
 800338a:	4613      	mov	r3, r2
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	4413      	add	r3, r2
 8003390:	3b1e      	subs	r3, #30
 8003392:	2207      	movs	r2, #7
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43da      	mvns	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	400a      	ands	r2, r1
 80033a0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68d9      	ldr	r1, [r3, #12]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	4618      	mov	r0, r3
 80033b4:	4603      	mov	r3, r0
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	4403      	add	r3, r0
 80033ba:	3b1e      	subs	r3, #30
 80033bc:	409a      	lsls	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	60da      	str	r2, [r3, #12]
 80033c6:	e022      	b.n	800340e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6919      	ldr	r1, [r3, #16]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	4613      	mov	r3, r2
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	4413      	add	r3, r2
 80033dc:	2207      	movs	r2, #7
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43da      	mvns	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	400a      	ands	r2, r1
 80033ea:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6919      	ldr	r1, [r3, #16]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	4618      	mov	r0, r3
 80033fe:	4603      	mov	r3, r0
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	4403      	add	r3, r0
 8003404:	409a      	lsls	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b06      	cmp	r3, #6
 8003414:	d824      	bhi.n	8003460 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	3b05      	subs	r3, #5
 8003428:	221f      	movs	r2, #31
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43da      	mvns	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	400a      	ands	r2, r1
 8003436:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	4618      	mov	r0, r3
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	3b05      	subs	r3, #5
 8003452:	fa00 f203 	lsl.w	r2, r0, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	635a      	str	r2, [r3, #52]	@ 0x34
 800345e:	e04c      	b.n	80034fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b0c      	cmp	r3, #12
 8003466:	d824      	bhi.n	80034b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	3b23      	subs	r3, #35	@ 0x23
 800347a:	221f      	movs	r2, #31
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43da      	mvns	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	400a      	ands	r2, r1
 8003488:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	b29b      	uxth	r3, r3
 8003496:	4618      	mov	r0, r3
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	3b23      	subs	r3, #35	@ 0x23
 80034a4:	fa00 f203 	lsl.w	r2, r0, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80034b0:	e023      	b.n	80034fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	3b41      	subs	r3, #65	@ 0x41
 80034c4:	221f      	movs	r2, #31
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43da      	mvns	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	400a      	ands	r2, r1
 80034d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	4618      	mov	r0, r3
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	3b41      	subs	r3, #65	@ 0x41
 80034ee:	fa00 f203 	lsl.w	r2, r0, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034fa:	4b22      	ldr	r3, [pc, #136]	@ (8003584 <HAL_ADC_ConfigChannel+0x234>)
 80034fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a21      	ldr	r2, [pc, #132]	@ (8003588 <HAL_ADC_ConfigChannel+0x238>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d109      	bne.n	800351c <HAL_ADC_ConfigChannel+0x1cc>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b12      	cmp	r3, #18
 800350e:	d105      	bne.n	800351c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a19      	ldr	r2, [pc, #100]	@ (8003588 <HAL_ADC_ConfigChannel+0x238>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d123      	bne.n	800356e <HAL_ADC_ConfigChannel+0x21e>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b10      	cmp	r3, #16
 800352c:	d003      	beq.n	8003536 <HAL_ADC_ConfigChannel+0x1e6>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b11      	cmp	r3, #17
 8003534:	d11b      	bne.n	800356e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b10      	cmp	r3, #16
 8003548:	d111      	bne.n	800356e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800354a:	4b10      	ldr	r3, [pc, #64]	@ (800358c <HAL_ADC_ConfigChannel+0x23c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a10      	ldr	r2, [pc, #64]	@ (8003590 <HAL_ADC_ConfigChannel+0x240>)
 8003550:	fba2 2303 	umull	r2, r3, r2, r3
 8003554:	0c9a      	lsrs	r2, r3, #18
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003560:	e002      	b.n	8003568 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	3b01      	subs	r3, #1
 8003566:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f9      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	40012300 	.word	0x40012300
 8003588:	40012000 	.word	0x40012000
 800358c:	20000004 	.word	0x20000004
 8003590:	431bde83 	.word	0x431bde83

08003594 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800359c:	4b79      	ldr	r3, [pc, #484]	@ (8003784 <ADC_Init+0x1f0>)
 800359e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	431a      	orrs	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6859      	ldr	r1, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	021a      	lsls	r2, r3, #8
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80035ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6859      	ldr	r1, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800360e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6899      	ldr	r1, [r3, #8]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003626:	4a58      	ldr	r2, [pc, #352]	@ (8003788 <ADC_Init+0x1f4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d022      	beq.n	8003672 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800363a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6899      	ldr	r1, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800365c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6899      	ldr	r1, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	609a      	str	r2, [r3, #8]
 8003670:	e00f      	b.n	8003692 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003680:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003690:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0202 	bic.w	r2, r2, #2
 80036a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6899      	ldr	r1, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	7e1b      	ldrb	r3, [r3, #24]
 80036ac:	005a      	lsls	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d01b      	beq.n	80036f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036ce:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80036de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6859      	ldr	r1, [r3, #4]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ea:	3b01      	subs	r3, #1
 80036ec:	035a      	lsls	r2, r3, #13
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	605a      	str	r2, [r3, #4]
 80036f6:	e007      	b.n	8003708 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003706:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003716:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	3b01      	subs	r3, #1
 8003724:	051a      	lsls	r2, r3, #20
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800373c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6899      	ldr	r1, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800374a:	025a      	lsls	r2, r3, #9
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003762:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6899      	ldr	r1, [r3, #8]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	029a      	lsls	r2, r3, #10
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	609a      	str	r2, [r3, #8]
}
 8003778:	bf00      	nop
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	40012300 	.word	0x40012300
 8003788:	0f000001 	.word	0x0f000001

0800378c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b0:	4b0c      	ldr	r3, [pc, #48]	@ (80037e4 <__NVIC_SetPriorityGrouping+0x44>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037bc:	4013      	ands	r3, r2
 80037be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037d2:	4a04      	ldr	r2, [pc, #16]	@ (80037e4 <__NVIC_SetPriorityGrouping+0x44>)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	60d3      	str	r3, [r2, #12]
}
 80037d8:	bf00      	nop
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037ec:	4b04      	ldr	r3, [pc, #16]	@ (8003800 <__NVIC_GetPriorityGrouping+0x18>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	0a1b      	lsrs	r3, r3, #8
 80037f2:	f003 0307 	and.w	r3, r3, #7
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	e000ed00 	.word	0xe000ed00

08003804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800380e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003812:	2b00      	cmp	r3, #0
 8003814:	db0b      	blt.n	800382e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	f003 021f 	and.w	r2, r3, #31
 800381c:	4907      	ldr	r1, [pc, #28]	@ (800383c <__NVIC_EnableIRQ+0x38>)
 800381e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	2001      	movs	r0, #1
 8003826:	fa00 f202 	lsl.w	r2, r0, r2
 800382a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	e000e100 	.word	0xe000e100

08003840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	4603      	mov	r3, r0
 8003848:	6039      	str	r1, [r7, #0]
 800384a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800384c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003850:	2b00      	cmp	r3, #0
 8003852:	db0a      	blt.n	800386a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	b2da      	uxtb	r2, r3
 8003858:	490c      	ldr	r1, [pc, #48]	@ (800388c <__NVIC_SetPriority+0x4c>)
 800385a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385e:	0112      	lsls	r2, r2, #4
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	440b      	add	r3, r1
 8003864:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003868:	e00a      	b.n	8003880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	b2da      	uxtb	r2, r3
 800386e:	4908      	ldr	r1, [pc, #32]	@ (8003890 <__NVIC_SetPriority+0x50>)
 8003870:	79fb      	ldrb	r3, [r7, #7]
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	3b04      	subs	r3, #4
 8003878:	0112      	lsls	r2, r2, #4
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	440b      	add	r3, r1
 800387e:	761a      	strb	r2, [r3, #24]
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	e000e100 	.word	0xe000e100
 8003890:	e000ed00 	.word	0xe000ed00

08003894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003894:	b480      	push	{r7}
 8003896:	b089      	sub	sp, #36	@ 0x24
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f1c3 0307 	rsb	r3, r3, #7
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	bf28      	it	cs
 80038b2:	2304      	movcs	r3, #4
 80038b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	3304      	adds	r3, #4
 80038ba:	2b06      	cmp	r3, #6
 80038bc:	d902      	bls.n	80038c4 <NVIC_EncodePriority+0x30>
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	3b03      	subs	r3, #3
 80038c2:	e000      	b.n	80038c6 <NVIC_EncodePriority+0x32>
 80038c4:	2300      	movs	r3, #0
 80038c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c8:	f04f 32ff 	mov.w	r2, #4294967295
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43da      	mvns	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	401a      	ands	r2, r3
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038dc:	f04f 31ff 	mov.w	r1, #4294967295
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	fa01 f303 	lsl.w	r3, r1, r3
 80038e6:	43d9      	mvns	r1, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038ec:	4313      	orrs	r3, r2
         );
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3724      	adds	r7, #36	@ 0x24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7ff ff4c 	bl	80037a0 <__NVIC_SetPriorityGrouping>
}
 8003908:	bf00      	nop
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	4603      	mov	r3, r0
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
 800391c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003922:	f7ff ff61 	bl	80037e8 <__NVIC_GetPriorityGrouping>
 8003926:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	6978      	ldr	r0, [r7, #20]
 800392e:	f7ff ffb1 	bl	8003894 <NVIC_EncodePriority>
 8003932:	4602      	mov	r2, r0
 8003934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003938:	4611      	mov	r1, r2
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff ff80 	bl	8003840 <__NVIC_SetPriority>
}
 8003940:	bf00      	nop
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff ff54 	bl	8003804 <__NVIC_EnableIRQ>
}
 800395c:	bf00      	nop
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003970:	f7ff fb20 	bl	8002fb4 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e099      	b.n	8003ab4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0201 	bic.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039a0:	e00f      	b.n	80039c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039a2:	f7ff fb07 	bl	8002fb4 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b05      	cmp	r3, #5
 80039ae:	d908      	bls.n	80039c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2220      	movs	r2, #32
 80039b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2203      	movs	r2, #3
 80039ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e078      	b.n	8003ab4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1e8      	bne.n	80039a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4b38      	ldr	r3, [pc, #224]	@ (8003abc <HAL_DMA_Init+0x158>)
 80039dc:	4013      	ands	r3, r2
 80039de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d107      	bne.n	8003a2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a24:	4313      	orrs	r3, r2
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f023 0307 	bic.w	r3, r3, #7
 8003a42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d117      	bne.n	8003a86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00e      	beq.n	8003a86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fa59 	bl	8003f20 <DMA_CheckFifoParam>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d008      	beq.n	8003a86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2240      	movs	r2, #64	@ 0x40
 8003a78:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003a82:	2301      	movs	r3, #1
 8003a84:	e016      	b.n	8003ab4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fa10 	bl	8003eb4 <DMA_CalcBaseAndBitshift>
 8003a94:	4603      	mov	r3, r0
 8003a96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a9c:	223f      	movs	r2, #63	@ 0x3f
 8003a9e:	409a      	lsls	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	f010803f 	.word	0xf010803f

08003ac0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003acc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ace:	f7ff fa71 	bl	8002fb4 <HAL_GetTick>
 8003ad2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d008      	beq.n	8003af2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2280      	movs	r2, #128	@ 0x80
 8003ae4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e052      	b.n	8003b98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0216 	bic.w	r2, r2, #22
 8003b00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695a      	ldr	r2, [r3, #20]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d103      	bne.n	8003b22 <HAL_DMA_Abort+0x62>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d007      	beq.n	8003b32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0208 	bic.w	r2, r2, #8
 8003b30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0201 	bic.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b42:	e013      	b.n	8003b6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b44:	f7ff fa36 	bl	8002fb4 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b05      	cmp	r3, #5
 8003b50:	d90c      	bls.n	8003b6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2220      	movs	r2, #32
 8003b56:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e015      	b.n	8003b98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1e4      	bne.n	8003b44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b7e:	223f      	movs	r2, #63	@ 0x3f
 8003b80:	409a      	lsls	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003bac:	4b8e      	ldr	r3, [pc, #568]	@ (8003de8 <HAL_DMA_IRQHandler+0x248>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a8e      	ldr	r2, [pc, #568]	@ (8003dec <HAL_DMA_IRQHandler+0x24c>)
 8003bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb6:	0a9b      	lsrs	r3, r3, #10
 8003bb8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bca:	2208      	movs	r2, #8
 8003bcc:	409a      	lsls	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d01a      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d013      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0204 	bic.w	r2, r2, #4
 8003bf2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf8:	2208      	movs	r2, #8
 8003bfa:	409a      	lsls	r2, r3
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c04:	f043 0201 	orr.w	r2, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c10:	2201      	movs	r2, #1
 8003c12:	409a      	lsls	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4013      	ands	r3, r2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d012      	beq.n	8003c42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00b      	beq.n	8003c42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2e:	2201      	movs	r2, #1
 8003c30:	409a      	lsls	r2, r3
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c3a:	f043 0202 	orr.w	r2, r3, #2
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c46:	2204      	movs	r2, #4
 8003c48:	409a      	lsls	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d012      	beq.n	8003c78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00b      	beq.n	8003c78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c64:	2204      	movs	r2, #4
 8003c66:	409a      	lsls	r2, r3
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c70:	f043 0204 	orr.w	r2, r3, #4
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c7c:	2210      	movs	r2, #16
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4013      	ands	r3, r2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d043      	beq.n	8003d10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d03c      	beq.n	8003d10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c9a:	2210      	movs	r2, #16
 8003c9c:	409a      	lsls	r2, r3
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d018      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d108      	bne.n	8003cd0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d024      	beq.n	8003d10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	4798      	blx	r3
 8003cce:	e01f      	b.n	8003d10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d01b      	beq.n	8003d10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	4798      	blx	r3
 8003ce0:	e016      	b.n	8003d10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d107      	bne.n	8003d00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0208 	bic.w	r2, r2, #8
 8003cfe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d14:	2220      	movs	r2, #32
 8003d16:	409a      	lsls	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 808f 	beq.w	8003e40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0310 	and.w	r3, r3, #16
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 8087 	beq.w	8003e40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d36:	2220      	movs	r2, #32
 8003d38:	409a      	lsls	r2, r3
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b05      	cmp	r3, #5
 8003d48:	d136      	bne.n	8003db8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0216 	bic.w	r2, r2, #22
 8003d58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	695a      	ldr	r2, [r3, #20]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d103      	bne.n	8003d7a <HAL_DMA_IRQHandler+0x1da>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d007      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0208 	bic.w	r2, r2, #8
 8003d88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d8e:	223f      	movs	r2, #63	@ 0x3f
 8003d90:	409a      	lsls	r2, r3
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d07e      	beq.n	8003eac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	4798      	blx	r3
        }
        return;
 8003db6:	e079      	b.n	8003eac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d01d      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10d      	bne.n	8003df0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d031      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	4798      	blx	r3
 8003de4:	e02c      	b.n	8003e40 <HAL_DMA_IRQHandler+0x2a0>
 8003de6:	bf00      	nop
 8003de8:	20000004 	.word	0x20000004
 8003dec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d023      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	4798      	blx	r3
 8003e00:	e01e      	b.n	8003e40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10f      	bne.n	8003e30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0210 	bic.w	r2, r2, #16
 8003e1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d032      	beq.n	8003eae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d022      	beq.n	8003e9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2205      	movs	r2, #5
 8003e58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0201 	bic.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	60bb      	str	r3, [r7, #8]
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d307      	bcc.n	8003e88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f2      	bne.n	8003e6c <HAL_DMA_IRQHandler+0x2cc>
 8003e86:	e000      	b.n	8003e8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	4798      	blx	r3
 8003eaa:	e000      	b.n	8003eae <HAL_DMA_IRQHandler+0x30e>
        return;
 8003eac:	bf00      	nop
    }
  }
}
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	3b10      	subs	r3, #16
 8003ec4:	4a14      	ldr	r2, [pc, #80]	@ (8003f18 <DMA_CalcBaseAndBitshift+0x64>)
 8003ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eca:	091b      	lsrs	r3, r3, #4
 8003ecc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ece:	4a13      	ldr	r2, [pc, #76]	@ (8003f1c <DMA_CalcBaseAndBitshift+0x68>)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2b03      	cmp	r3, #3
 8003ee0:	d909      	bls.n	8003ef6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003eea:	f023 0303 	bic.w	r3, r3, #3
 8003eee:	1d1a      	adds	r2, r3, #4
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ef4:	e007      	b.n	8003f06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003efe:	f023 0303 	bic.w	r3, r3, #3
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	aaaaaaab 	.word	0xaaaaaaab
 8003f1c:	08012b40 	.word	0x08012b40

08003f20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d11f      	bne.n	8003f7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d856      	bhi.n	8003fee <DMA_CheckFifoParam+0xce>
 8003f40:	a201      	add	r2, pc, #4	@ (adr r2, 8003f48 <DMA_CheckFifoParam+0x28>)
 8003f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f46:	bf00      	nop
 8003f48:	08003f59 	.word	0x08003f59
 8003f4c:	08003f6b 	.word	0x08003f6b
 8003f50:	08003f59 	.word	0x08003f59
 8003f54:	08003fef 	.word	0x08003fef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d046      	beq.n	8003ff2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f68:	e043      	b.n	8003ff2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f72:	d140      	bne.n	8003ff6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f78:	e03d      	b.n	8003ff6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f82:	d121      	bne.n	8003fc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d837      	bhi.n	8003ffa <DMA_CheckFifoParam+0xda>
 8003f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f90 <DMA_CheckFifoParam+0x70>)
 8003f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f90:	08003fa1 	.word	0x08003fa1
 8003f94:	08003fa7 	.word	0x08003fa7
 8003f98:	08003fa1 	.word	0x08003fa1
 8003f9c:	08003fb9 	.word	0x08003fb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fa4:	e030      	b.n	8004008 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003faa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d025      	beq.n	8003ffe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fb6:	e022      	b.n	8003ffe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fbc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003fc0:	d11f      	bne.n	8004002 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003fc6:	e01c      	b.n	8004002 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d903      	bls.n	8003fd6 <DMA_CheckFifoParam+0xb6>
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b03      	cmp	r3, #3
 8003fd2:	d003      	beq.n	8003fdc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003fd4:	e018      	b.n	8004008 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	73fb      	strb	r3, [r7, #15]
      break;
 8003fda:	e015      	b.n	8004008 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00e      	beq.n	8004006 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	73fb      	strb	r3, [r7, #15]
      break;
 8003fec:	e00b      	b.n	8004006 <DMA_CheckFifoParam+0xe6>
      break;
 8003fee:	bf00      	nop
 8003ff0:	e00a      	b.n	8004008 <DMA_CheckFifoParam+0xe8>
      break;
 8003ff2:	bf00      	nop
 8003ff4:	e008      	b.n	8004008 <DMA_CheckFifoParam+0xe8>
      break;
 8003ff6:	bf00      	nop
 8003ff8:	e006      	b.n	8004008 <DMA_CheckFifoParam+0xe8>
      break;
 8003ffa:	bf00      	nop
 8003ffc:	e004      	b.n	8004008 <DMA_CheckFifoParam+0xe8>
      break;
 8003ffe:	bf00      	nop
 8004000:	e002      	b.n	8004008 <DMA_CheckFifoParam+0xe8>
      break;   
 8004002:	bf00      	nop
 8004004:	e000      	b.n	8004008 <DMA_CheckFifoParam+0xe8>
      break;
 8004006:	bf00      	nop
    }
  } 
  
  return status; 
 8004008:	7bfb      	ldrb	r3, [r7, #15]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop

08004018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004018:	b480      	push	{r7}
 800401a:	b089      	sub	sp, #36	@ 0x24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004026:	2300      	movs	r3, #0
 8004028:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800402a:	2300      	movs	r3, #0
 800402c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800402e:	2300      	movs	r3, #0
 8004030:	61fb      	str	r3, [r7, #28]
 8004032:	e159      	b.n	80042e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004034:	2201      	movs	r2, #1
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	4013      	ands	r3, r2
 8004046:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	429a      	cmp	r2, r3
 800404e:	f040 8148 	bne.w	80042e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	2b01      	cmp	r3, #1
 800405c:	d005      	beq.n	800406a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004066:	2b02      	cmp	r3, #2
 8004068:	d130      	bne.n	80040cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	2203      	movs	r2, #3
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	43db      	mvns	r3, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4013      	ands	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4313      	orrs	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040a0:	2201      	movs	r2, #1
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	43db      	mvns	r3, r3
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4013      	ands	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	091b      	lsrs	r3, r3, #4
 80040b6:	f003 0201 	and.w	r2, r3, #1
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	2b03      	cmp	r3, #3
 80040d6:	d017      	beq.n	8004108 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	2203      	movs	r2, #3
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	43db      	mvns	r3, r3
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4013      	ands	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	4313      	orrs	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f003 0303 	and.w	r3, r3, #3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d123      	bne.n	800415c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	08da      	lsrs	r2, r3, #3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3208      	adds	r2, #8
 800411c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004120:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	220f      	movs	r2, #15
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	43db      	mvns	r3, r3
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	4013      	ands	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	4313      	orrs	r3, r2
 800414c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	08da      	lsrs	r2, r3, #3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	3208      	adds	r2, #8
 8004156:	69b9      	ldr	r1, [r7, #24]
 8004158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	2203      	movs	r2, #3
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	43db      	mvns	r3, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4013      	ands	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f003 0203 	and.w	r2, r3, #3
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4313      	orrs	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 80a2 	beq.w	80042e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	4b57      	ldr	r3, [pc, #348]	@ (8004300 <HAL_GPIO_Init+0x2e8>)
 80041a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a6:	4a56      	ldr	r2, [pc, #344]	@ (8004300 <HAL_GPIO_Init+0x2e8>)
 80041a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80041ae:	4b54      	ldr	r3, [pc, #336]	@ (8004300 <HAL_GPIO_Init+0x2e8>)
 80041b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041ba:	4a52      	ldr	r2, [pc, #328]	@ (8004304 <HAL_GPIO_Init+0x2ec>)
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	089b      	lsrs	r3, r3, #2
 80041c0:	3302      	adds	r3, #2
 80041c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	220f      	movs	r2, #15
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	43db      	mvns	r3, r3
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	4013      	ands	r3, r2
 80041dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a49      	ldr	r2, [pc, #292]	@ (8004308 <HAL_GPIO_Init+0x2f0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d019      	beq.n	800421a <HAL_GPIO_Init+0x202>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a48      	ldr	r2, [pc, #288]	@ (800430c <HAL_GPIO_Init+0x2f4>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d013      	beq.n	8004216 <HAL_GPIO_Init+0x1fe>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a47      	ldr	r2, [pc, #284]	@ (8004310 <HAL_GPIO_Init+0x2f8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d00d      	beq.n	8004212 <HAL_GPIO_Init+0x1fa>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a46      	ldr	r2, [pc, #280]	@ (8004314 <HAL_GPIO_Init+0x2fc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d007      	beq.n	800420e <HAL_GPIO_Init+0x1f6>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a45      	ldr	r2, [pc, #276]	@ (8004318 <HAL_GPIO_Init+0x300>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d101      	bne.n	800420a <HAL_GPIO_Init+0x1f2>
 8004206:	2304      	movs	r3, #4
 8004208:	e008      	b.n	800421c <HAL_GPIO_Init+0x204>
 800420a:	2307      	movs	r3, #7
 800420c:	e006      	b.n	800421c <HAL_GPIO_Init+0x204>
 800420e:	2303      	movs	r3, #3
 8004210:	e004      	b.n	800421c <HAL_GPIO_Init+0x204>
 8004212:	2302      	movs	r3, #2
 8004214:	e002      	b.n	800421c <HAL_GPIO_Init+0x204>
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <HAL_GPIO_Init+0x204>
 800421a:	2300      	movs	r3, #0
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	f002 0203 	and.w	r2, r2, #3
 8004222:	0092      	lsls	r2, r2, #2
 8004224:	4093      	lsls	r3, r2
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	4313      	orrs	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800422c:	4935      	ldr	r1, [pc, #212]	@ (8004304 <HAL_GPIO_Init+0x2ec>)
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	089b      	lsrs	r3, r3, #2
 8004232:	3302      	adds	r3, #2
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800423a:	4b38      	ldr	r3, [pc, #224]	@ (800431c <HAL_GPIO_Init+0x304>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	43db      	mvns	r3, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4013      	ands	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800425e:	4a2f      	ldr	r2, [pc, #188]	@ (800431c <HAL_GPIO_Init+0x304>)
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004264:	4b2d      	ldr	r3, [pc, #180]	@ (800431c <HAL_GPIO_Init+0x304>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	43db      	mvns	r3, r3
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4013      	ands	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004288:	4a24      	ldr	r2, [pc, #144]	@ (800431c <HAL_GPIO_Init+0x304>)
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800428e:	4b23      	ldr	r3, [pc, #140]	@ (800431c <HAL_GPIO_Init+0x304>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	43db      	mvns	r3, r3
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	4013      	ands	r3, r2
 800429c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042b2:	4a1a      	ldr	r2, [pc, #104]	@ (800431c <HAL_GPIO_Init+0x304>)
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042b8:	4b18      	ldr	r3, [pc, #96]	@ (800431c <HAL_GPIO_Init+0x304>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	43db      	mvns	r3, r3
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	4013      	ands	r3, r2
 80042c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	4313      	orrs	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042dc:	4a0f      	ldr	r2, [pc, #60]	@ (800431c <HAL_GPIO_Init+0x304>)
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	3301      	adds	r3, #1
 80042e6:	61fb      	str	r3, [r7, #28]
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	2b0f      	cmp	r3, #15
 80042ec:	f67f aea2 	bls.w	8004034 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042f0:	bf00      	nop
 80042f2:	bf00      	nop
 80042f4:	3724      	adds	r7, #36	@ 0x24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40023800 	.word	0x40023800
 8004304:	40013800 	.word	0x40013800
 8004308:	40020000 	.word	0x40020000
 800430c:	40020400 	.word	0x40020400
 8004310:	40020800 	.word	0x40020800
 8004314:	40020c00 	.word	0x40020c00
 8004318:	40021000 	.word	0x40021000
 800431c:	40013c00 	.word	0x40013c00

08004320 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	460b      	mov	r3, r1
 800432a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	887b      	ldrh	r3, [r7, #2]
 8004332:	4013      	ands	r3, r2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004338:	2301      	movs	r3, #1
 800433a:	73fb      	strb	r3, [r7, #15]
 800433c:	e001      	b.n	8004342 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800433e:	2300      	movs	r3, #0
 8004340:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004342:	7bfb      	ldrb	r3, [r7, #15]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	460b      	mov	r3, r1
 800435a:	807b      	strh	r3, [r7, #2]
 800435c:	4613      	mov	r3, r2
 800435e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004360:	787b      	ldrb	r3, [r7, #1]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004366:	887a      	ldrh	r2, [r7, #2]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800436c:	e003      	b.n	8004376 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800436e:	887b      	ldrh	r3, [r7, #2]
 8004370:	041a      	lsls	r2, r3, #16
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	619a      	str	r2, [r3, #24]
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
	...

08004384 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e12b      	b.n	80045ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fd f96a 	bl	8001684 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2224      	movs	r2, #36	@ 0x24
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0201 	bic.w	r2, r2, #1
 80043c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043e8:	f001 f8ea 	bl	80055c0 <HAL_RCC_GetPCLK1Freq>
 80043ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	4a81      	ldr	r2, [pc, #516]	@ (80045f8 <HAL_I2C_Init+0x274>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d807      	bhi.n	8004408 <HAL_I2C_Init+0x84>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4a80      	ldr	r2, [pc, #512]	@ (80045fc <HAL_I2C_Init+0x278>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	bf94      	ite	ls
 8004400:	2301      	movls	r3, #1
 8004402:	2300      	movhi	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	e006      	b.n	8004416 <HAL_I2C_Init+0x92>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4a7d      	ldr	r2, [pc, #500]	@ (8004600 <HAL_I2C_Init+0x27c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	bf94      	ite	ls
 8004410:	2301      	movls	r3, #1
 8004412:	2300      	movhi	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e0e7      	b.n	80045ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4a78      	ldr	r2, [pc, #480]	@ (8004604 <HAL_I2C_Init+0x280>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	0c9b      	lsrs	r3, r3, #18
 8004428:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	430a      	orrs	r2, r1
 800443c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	4a6a      	ldr	r2, [pc, #424]	@ (80045f8 <HAL_I2C_Init+0x274>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d802      	bhi.n	8004458 <HAL_I2C_Init+0xd4>
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	3301      	adds	r3, #1
 8004456:	e009      	b.n	800446c <HAL_I2C_Init+0xe8>
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800445e:	fb02 f303 	mul.w	r3, r2, r3
 8004462:	4a69      	ldr	r2, [pc, #420]	@ (8004608 <HAL_I2C_Init+0x284>)
 8004464:	fba2 2303 	umull	r2, r3, r2, r3
 8004468:	099b      	lsrs	r3, r3, #6
 800446a:	3301      	adds	r3, #1
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	430b      	orrs	r3, r1
 8004472:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800447e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	495c      	ldr	r1, [pc, #368]	@ (80045f8 <HAL_I2C_Init+0x274>)
 8004488:	428b      	cmp	r3, r1
 800448a:	d819      	bhi.n	80044c0 <HAL_I2C_Init+0x13c>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	1e59      	subs	r1, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	fbb1 f3f3 	udiv	r3, r1, r3
 800449a:	1c59      	adds	r1, r3, #1
 800449c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80044a0:	400b      	ands	r3, r1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00a      	beq.n	80044bc <HAL_I2C_Init+0x138>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1e59      	subs	r1, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80044b4:	3301      	adds	r3, #1
 80044b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ba:	e051      	b.n	8004560 <HAL_I2C_Init+0x1dc>
 80044bc:	2304      	movs	r3, #4
 80044be:	e04f      	b.n	8004560 <HAL_I2C_Init+0x1dc>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d111      	bne.n	80044ec <HAL_I2C_Init+0x168>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	1e58      	subs	r0, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6859      	ldr	r1, [r3, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	440b      	add	r3, r1
 80044d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044da:	3301      	adds	r3, #1
 80044dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	bf0c      	ite	eq
 80044e4:	2301      	moveq	r3, #1
 80044e6:	2300      	movne	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	e012      	b.n	8004512 <HAL_I2C_Init+0x18e>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	1e58      	subs	r0, r3, #1
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6859      	ldr	r1, [r3, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	0099      	lsls	r1, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004502:	3301      	adds	r3, #1
 8004504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004508:	2b00      	cmp	r3, #0
 800450a:	bf0c      	ite	eq
 800450c:	2301      	moveq	r3, #1
 800450e:	2300      	movne	r3, #0
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <HAL_I2C_Init+0x196>
 8004516:	2301      	movs	r3, #1
 8004518:	e022      	b.n	8004560 <HAL_I2C_Init+0x1dc>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10e      	bne.n	8004540 <HAL_I2C_Init+0x1bc>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	1e58      	subs	r0, r3, #1
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6859      	ldr	r1, [r3, #4]
 800452a:	460b      	mov	r3, r1
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	440b      	add	r3, r1
 8004530:	fbb0 f3f3 	udiv	r3, r0, r3
 8004534:	3301      	adds	r3, #1
 8004536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800453a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800453e:	e00f      	b.n	8004560 <HAL_I2C_Init+0x1dc>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	1e58      	subs	r0, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6859      	ldr	r1, [r3, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	0099      	lsls	r1, r3, #2
 8004550:	440b      	add	r3, r1
 8004552:	fbb0 f3f3 	udiv	r3, r0, r3
 8004556:	3301      	adds	r3, #1
 8004558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800455c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004560:	6879      	ldr	r1, [r7, #4]
 8004562:	6809      	ldr	r1, [r1, #0]
 8004564:	4313      	orrs	r3, r2
 8004566:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69da      	ldr	r2, [r3, #28]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800458e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6911      	ldr	r1, [r2, #16]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	68d2      	ldr	r2, [r2, #12]
 800459a:	4311      	orrs	r1, r2
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6812      	ldr	r2, [r2, #0]
 80045a0:	430b      	orrs	r3, r1
 80045a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	695a      	ldr	r2, [r3, #20]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	431a      	orrs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0201 	orr.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2220      	movs	r2, #32
 80045da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	000186a0 	.word	0x000186a0
 80045fc:	001e847f 	.word	0x001e847f
 8004600:	003d08ff 	.word	0x003d08ff
 8004604:	431bde83 	.word	0x431bde83
 8004608:	10624dd3 	.word	0x10624dd3

0800460c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af02      	add	r7, sp, #8
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	4608      	mov	r0, r1
 8004616:	4611      	mov	r1, r2
 8004618:	461a      	mov	r2, r3
 800461a:	4603      	mov	r3, r0
 800461c:	817b      	strh	r3, [r7, #10]
 800461e:	460b      	mov	r3, r1
 8004620:	813b      	strh	r3, [r7, #8]
 8004622:	4613      	mov	r3, r2
 8004624:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004626:	f7fe fcc5 	bl	8002fb4 <HAL_GetTick>
 800462a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b20      	cmp	r3, #32
 8004636:	f040 80d9 	bne.w	80047ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	2319      	movs	r3, #25
 8004640:	2201      	movs	r2, #1
 8004642:	496d      	ldr	r1, [pc, #436]	@ (80047f8 <HAL_I2C_Mem_Write+0x1ec>)
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 f971 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004650:	2302      	movs	r3, #2
 8004652:	e0cc      	b.n	80047ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800465a:	2b01      	cmp	r3, #1
 800465c:	d101      	bne.n	8004662 <HAL_I2C_Mem_Write+0x56>
 800465e:	2302      	movs	r3, #2
 8004660:	e0c5      	b.n	80047ee <HAL_I2C_Mem_Write+0x1e2>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b01      	cmp	r3, #1
 8004676:	d007      	beq.n	8004688 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0201 	orr.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004696:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2221      	movs	r2, #33	@ 0x21
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2240      	movs	r2, #64	@ 0x40
 80046a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a3a      	ldr	r2, [r7, #32]
 80046b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80046b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4a4d      	ldr	r2, [pc, #308]	@ (80047fc <HAL_I2C_Mem_Write+0x1f0>)
 80046c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046ca:	88f8      	ldrh	r0, [r7, #6]
 80046cc:	893a      	ldrh	r2, [r7, #8]
 80046ce:	8979      	ldrh	r1, [r7, #10]
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	9301      	str	r3, [sp, #4]
 80046d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	4603      	mov	r3, r0
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 f890 	bl	8004800 <I2C_RequestMemoryWrite>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d052      	beq.n	800478c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e081      	b.n	80047ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 fa36 	bl	8004b60 <I2C_WaitOnTXEFlagUntilTimeout>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00d      	beq.n	8004716 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d107      	bne.n	8004712 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004710:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e06b      	b.n	80047ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471a:	781a      	ldrb	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b04      	cmp	r3, #4
 8004752:	d11b      	bne.n	800478c <HAL_I2C_Mem_Write+0x180>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004758:	2b00      	cmp	r3, #0
 800475a:	d017      	beq.n	800478c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004760:	781a      	ldrb	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1aa      	bne.n	80046ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 fa29 	bl	8004bf0 <I2C_WaitOnBTFFlagUntilTimeout>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00d      	beq.n	80047c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d107      	bne.n	80047bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e016      	b.n	80047ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2220      	movs	r2, #32
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	e000      	b.n	80047ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80047ec:	2302      	movs	r3, #2
  }
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	00100002 	.word	0x00100002
 80047fc:	ffff0000 	.word	0xffff0000

08004800 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b088      	sub	sp, #32
 8004804:	af02      	add	r7, sp, #8
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	4608      	mov	r0, r1
 800480a:	4611      	mov	r1, r2
 800480c:	461a      	mov	r2, r3
 800480e:	4603      	mov	r3, r0
 8004810:	817b      	strh	r3, [r7, #10]
 8004812:	460b      	mov	r3, r1
 8004814:	813b      	strh	r3, [r7, #8]
 8004816:	4613      	mov	r3, r2
 8004818:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004828:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800482a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	2200      	movs	r2, #0
 8004832:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 f878 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00d      	beq.n	800485e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800484c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004850:	d103      	bne.n	800485a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004858:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e05f      	b.n	800491e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800485e:	897b      	ldrh	r3, [r7, #10]
 8004860:	b2db      	uxtb	r3, r3
 8004862:	461a      	mov	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800486c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800486e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004870:	6a3a      	ldr	r2, [r7, #32]
 8004872:	492d      	ldr	r1, [pc, #180]	@ (8004928 <I2C_RequestMemoryWrite+0x128>)
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f8d3 	bl	8004a20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e04c      	b.n	800491e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800489a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800489c:	6a39      	ldr	r1, [r7, #32]
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 f95e 	bl	8004b60 <I2C_WaitOnTXEFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00d      	beq.n	80048c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d107      	bne.n	80048c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e02b      	b.n	800491e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048c6:	88fb      	ldrh	r3, [r7, #6]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d105      	bne.n	80048d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048cc:	893b      	ldrh	r3, [r7, #8]
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	611a      	str	r2, [r3, #16]
 80048d6:	e021      	b.n	800491c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048d8:	893b      	ldrh	r3, [r7, #8]
 80048da:	0a1b      	lsrs	r3, r3, #8
 80048dc:	b29b      	uxth	r3, r3
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048e8:	6a39      	ldr	r1, [r7, #32]
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 f938 	bl	8004b60 <I2C_WaitOnTXEFlagUntilTimeout>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00d      	beq.n	8004912 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d107      	bne.n	800490e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800490c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e005      	b.n	800491e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004912:	893b      	ldrh	r3, [r7, #8]
 8004914:	b2da      	uxtb	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	00010002 	.word	0x00010002

0800492c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	4613      	mov	r3, r2
 800493a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800493c:	e048      	b.n	80049d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004944:	d044      	beq.n	80049d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004946:	f7fe fb35 	bl	8002fb4 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d302      	bcc.n	800495c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d139      	bne.n	80049d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	0c1b      	lsrs	r3, r3, #16
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b01      	cmp	r3, #1
 8004964:	d10d      	bne.n	8004982 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	43da      	mvns	r2, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	4013      	ands	r3, r2
 8004972:	b29b      	uxth	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	bf0c      	ite	eq
 8004978:	2301      	moveq	r3, #1
 800497a:	2300      	movne	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	461a      	mov	r2, r3
 8004980:	e00c      	b.n	800499c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	43da      	mvns	r2, r3
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	4013      	ands	r3, r2
 800498e:	b29b      	uxth	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	bf0c      	ite	eq
 8004994:	2301      	moveq	r3, #1
 8004996:	2300      	movne	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	461a      	mov	r2, r3
 800499c:	79fb      	ldrb	r3, [r7, #7]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d116      	bne.n	80049d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049bc:	f043 0220 	orr.w	r2, r3, #32
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e023      	b.n	8004a18 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	0c1b      	lsrs	r3, r3, #16
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d10d      	bne.n	80049f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	43da      	mvns	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	4013      	ands	r3, r2
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	bf0c      	ite	eq
 80049ec:	2301      	moveq	r3, #1
 80049ee:	2300      	movne	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	e00c      	b.n	8004a10 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	43da      	mvns	r2, r3
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	4013      	ands	r3, r2
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	bf0c      	ite	eq
 8004a08:	2301      	moveq	r3, #1
 8004a0a:	2300      	movne	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	461a      	mov	r2, r3
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d093      	beq.n	800493e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
 8004a2c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a2e:	e071      	b.n	8004b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a3e:	d123      	bne.n	8004a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a4e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a74:	f043 0204 	orr.w	r2, r3, #4
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e067      	b.n	8004b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8e:	d041      	beq.n	8004b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a90:	f7fe fa90 	bl	8002fb4 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d302      	bcc.n	8004aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d136      	bne.n	8004b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	0c1b      	lsrs	r3, r3, #16
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d10c      	bne.n	8004aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	43da      	mvns	r2, r3
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	4013      	ands	r3, r2
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	bf14      	ite	ne
 8004ac2:	2301      	movne	r3, #1
 8004ac4:	2300      	moveq	r3, #0
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	e00b      	b.n	8004ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	43da      	mvns	r2, r3
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	bf14      	ite	ne
 8004adc:	2301      	movne	r3, #1
 8004ade:	2300      	moveq	r3, #0
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d016      	beq.n	8004b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b00:	f043 0220 	orr.w	r2, r3, #32
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e021      	b.n	8004b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	0c1b      	lsrs	r3, r3, #16
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d10c      	bne.n	8004b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	43da      	mvns	r2, r3
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	bf14      	ite	ne
 8004b30:	2301      	movne	r3, #1
 8004b32:	2300      	moveq	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	e00b      	b.n	8004b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	43da      	mvns	r2, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	4013      	ands	r3, r2
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	bf14      	ite	ne
 8004b4a:	2301      	movne	r3, #1
 8004b4c:	2300      	moveq	r3, #0
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f47f af6d 	bne.w	8004a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b6c:	e034      	b.n	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 f886 	bl	8004c80 <I2C_IsAcknowledgeFailed>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e034      	b.n	8004be8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b84:	d028      	beq.n	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b86:	f7fe fa15 	bl	8002fb4 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d302      	bcc.n	8004b9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d11d      	bne.n	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ba6:	2b80      	cmp	r3, #128	@ 0x80
 8004ba8:	d016      	beq.n	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc4:	f043 0220 	orr.w	r2, r3, #32
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e007      	b.n	8004be8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004be2:	2b80      	cmp	r3, #128	@ 0x80
 8004be4:	d1c3      	bne.n	8004b6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bfc:	e034      	b.n	8004c68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 f83e 	bl	8004c80 <I2C_IsAcknowledgeFailed>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e034      	b.n	8004c78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c14:	d028      	beq.n	8004c68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c16:	f7fe f9cd 	bl	8002fb4 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d302      	bcc.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d11d      	bne.n	8004c68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d016      	beq.n	8004c68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c54:	f043 0220 	orr.w	r2, r3, #32
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e007      	b.n	8004c78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	f003 0304 	and.w	r3, r3, #4
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d1c3      	bne.n	8004bfe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c96:	d11b      	bne.n	8004cd0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ca0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cbc:	f043 0204 	orr.w	r2, r3, #4
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e000      	b.n	8004cd2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
	...

08004ce0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e267      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d075      	beq.n	8004dea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004cfe:	4b88      	ldr	r3, [pc, #544]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 030c 	and.w	r3, r3, #12
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d00c      	beq.n	8004d24 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d0a:	4b85      	ldr	r3, [pc, #532]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d112      	bne.n	8004d3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d16:	4b82      	ldr	r3, [pc, #520]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d22:	d10b      	bne.n	8004d3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d24:	4b7e      	ldr	r3, [pc, #504]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d05b      	beq.n	8004de8 <HAL_RCC_OscConfig+0x108>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d157      	bne.n	8004de8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e242      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d44:	d106      	bne.n	8004d54 <HAL_RCC_OscConfig+0x74>
 8004d46:	4b76      	ldr	r3, [pc, #472]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a75      	ldr	r2, [pc, #468]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	e01d      	b.n	8004d90 <HAL_RCC_OscConfig+0xb0>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d5c:	d10c      	bne.n	8004d78 <HAL_RCC_OscConfig+0x98>
 8004d5e:	4b70      	ldr	r3, [pc, #448]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a6f      	ldr	r2, [pc, #444]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	4b6d      	ldr	r3, [pc, #436]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a6c      	ldr	r2, [pc, #432]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	e00b      	b.n	8004d90 <HAL_RCC_OscConfig+0xb0>
 8004d78:	4b69      	ldr	r3, [pc, #420]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a68      	ldr	r2, [pc, #416]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d82:	6013      	str	r3, [r2, #0]
 8004d84:	4b66      	ldr	r3, [pc, #408]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a65      	ldr	r2, [pc, #404]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d013      	beq.n	8004dc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d98:	f7fe f90c 	bl	8002fb4 <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da0:	f7fe f908 	bl	8002fb4 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b64      	cmp	r3, #100	@ 0x64
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e207      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004db2:	4b5b      	ldr	r3, [pc, #364]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCC_OscConfig+0xc0>
 8004dbe:	e014      	b.n	8004dea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc0:	f7fe f8f8 	bl	8002fb4 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dc8:	f7fe f8f4 	bl	8002fb4 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b64      	cmp	r3, #100	@ 0x64
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e1f3      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dda:	4b51      	ldr	r3, [pc, #324]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f0      	bne.n	8004dc8 <HAL_RCC_OscConfig+0xe8>
 8004de6:	e000      	b.n	8004dea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d063      	beq.n	8004ebe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004df6:	4b4a      	ldr	r3, [pc, #296]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 030c 	and.w	r3, r3, #12
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00b      	beq.n	8004e1a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e02:	4b47      	ldr	r3, [pc, #284]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e0a:	2b08      	cmp	r3, #8
 8004e0c:	d11c      	bne.n	8004e48 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e0e:	4b44      	ldr	r3, [pc, #272]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d116      	bne.n	8004e48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e1a:	4b41      	ldr	r3, [pc, #260]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d005      	beq.n	8004e32 <HAL_RCC_OscConfig+0x152>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d001      	beq.n	8004e32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e1c7      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e32:	4b3b      	ldr	r3, [pc, #236]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	4937      	ldr	r1, [pc, #220]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e46:	e03a      	b.n	8004ebe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d020      	beq.n	8004e92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e50:	4b34      	ldr	r3, [pc, #208]	@ (8004f24 <HAL_RCC_OscConfig+0x244>)
 8004e52:	2201      	movs	r2, #1
 8004e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e56:	f7fe f8ad 	bl	8002fb4 <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e5e:	f7fe f8a9 	bl	8002fb4 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e1a8      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e70:	4b2b      	ldr	r3, [pc, #172]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0f0      	beq.n	8004e5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e7c:	4b28      	ldr	r3, [pc, #160]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	4925      	ldr	r1, [pc, #148]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	600b      	str	r3, [r1, #0]
 8004e90:	e015      	b.n	8004ebe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e92:	4b24      	ldr	r3, [pc, #144]	@ (8004f24 <HAL_RCC_OscConfig+0x244>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e98:	f7fe f88c 	bl	8002fb4 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ea0:	f7fe f888 	bl	8002fb4 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e187      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f0      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d036      	beq.n	8004f38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d016      	beq.n	8004f00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ed2:	4b15      	ldr	r3, [pc, #84]	@ (8004f28 <HAL_RCC_OscConfig+0x248>)
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed8:	f7fe f86c 	bl	8002fb4 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ee0:	f7fe f868 	bl	8002fb4 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e167      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004ef4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0f0      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x200>
 8004efe:	e01b      	b.n	8004f38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f00:	4b09      	ldr	r3, [pc, #36]	@ (8004f28 <HAL_RCC_OscConfig+0x248>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f06:	f7fe f855 	bl	8002fb4 <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f0c:	e00e      	b.n	8004f2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f0e:	f7fe f851 	bl	8002fb4 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d907      	bls.n	8004f2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e150      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
 8004f20:	40023800 	.word	0x40023800
 8004f24:	42470000 	.word	0x42470000
 8004f28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f2c:	4b88      	ldr	r3, [pc, #544]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1ea      	bne.n	8004f0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 8097 	beq.w	8005074 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f46:	2300      	movs	r3, #0
 8004f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f4a:	4b81      	ldr	r3, [pc, #516]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10f      	bne.n	8004f76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f56:	2300      	movs	r3, #0
 8004f58:	60bb      	str	r3, [r7, #8]
 8004f5a:	4b7d      	ldr	r3, [pc, #500]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5e:	4a7c      	ldr	r2, [pc, #496]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f66:	4b7a      	ldr	r3, [pc, #488]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f6e:	60bb      	str	r3, [r7, #8]
 8004f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f72:	2301      	movs	r3, #1
 8004f74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f76:	4b77      	ldr	r3, [pc, #476]	@ (8005154 <HAL_RCC_OscConfig+0x474>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d118      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f82:	4b74      	ldr	r3, [pc, #464]	@ (8005154 <HAL_RCC_OscConfig+0x474>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a73      	ldr	r2, [pc, #460]	@ (8005154 <HAL_RCC_OscConfig+0x474>)
 8004f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f8e:	f7fe f811 	bl	8002fb4 <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f96:	f7fe f80d 	bl	8002fb4 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e10c      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa8:	4b6a      	ldr	r3, [pc, #424]	@ (8005154 <HAL_RCC_OscConfig+0x474>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0f0      	beq.n	8004f96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d106      	bne.n	8004fca <HAL_RCC_OscConfig+0x2ea>
 8004fbc:	4b64      	ldr	r3, [pc, #400]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc0:	4a63      	ldr	r2, [pc, #396]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fc2:	f043 0301 	orr.w	r3, r3, #1
 8004fc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fc8:	e01c      	b.n	8005004 <HAL_RCC_OscConfig+0x324>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b05      	cmp	r3, #5
 8004fd0:	d10c      	bne.n	8004fec <HAL_RCC_OscConfig+0x30c>
 8004fd2:	4b5f      	ldr	r3, [pc, #380]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fd6:	4a5e      	ldr	r2, [pc, #376]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fd8:	f043 0304 	orr.w	r3, r3, #4
 8004fdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fde:	4b5c      	ldr	r3, [pc, #368]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe2:	4a5b      	ldr	r2, [pc, #364]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fe4:	f043 0301 	orr.w	r3, r3, #1
 8004fe8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fea:	e00b      	b.n	8005004 <HAL_RCC_OscConfig+0x324>
 8004fec:	4b58      	ldr	r3, [pc, #352]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff0:	4a57      	ldr	r2, [pc, #348]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004ff2:	f023 0301 	bic.w	r3, r3, #1
 8004ff6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ff8:	4b55      	ldr	r3, [pc, #340]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ffc:	4a54      	ldr	r2, [pc, #336]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004ffe:	f023 0304 	bic.w	r3, r3, #4
 8005002:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d015      	beq.n	8005038 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500c:	f7fd ffd2 	bl	8002fb4 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005012:	e00a      	b.n	800502a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005014:	f7fd ffce 	bl	8002fb4 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005022:	4293      	cmp	r3, r2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e0cb      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800502a:	4b49      	ldr	r3, [pc, #292]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 800502c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0ee      	beq.n	8005014 <HAL_RCC_OscConfig+0x334>
 8005036:	e014      	b.n	8005062 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005038:	f7fd ffbc 	bl	8002fb4 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800503e:	e00a      	b.n	8005056 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005040:	f7fd ffb8 	bl	8002fb4 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800504e:	4293      	cmp	r3, r2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e0b5      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005056:	4b3e      	ldr	r3, [pc, #248]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8005058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1ee      	bne.n	8005040 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005062:	7dfb      	ldrb	r3, [r7, #23]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d105      	bne.n	8005074 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005068:	4b39      	ldr	r3, [pc, #228]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 800506a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506c:	4a38      	ldr	r2, [pc, #224]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 800506e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005072:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 80a1 	beq.w	80051c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800507e:	4b34      	ldr	r3, [pc, #208]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 030c 	and.w	r3, r3, #12
 8005086:	2b08      	cmp	r3, #8
 8005088:	d05c      	beq.n	8005144 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d141      	bne.n	8005116 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005092:	4b31      	ldr	r3, [pc, #196]	@ (8005158 <HAL_RCC_OscConfig+0x478>)
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005098:	f7fd ff8c 	bl	8002fb4 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a0:	f7fd ff88 	bl	8002fb4 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e087      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050b2:	4b27      	ldr	r3, [pc, #156]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1f0      	bne.n	80050a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69da      	ldr	r2, [r3, #28]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	431a      	orrs	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050cc:	019b      	lsls	r3, r3, #6
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d4:	085b      	lsrs	r3, r3, #1
 80050d6:	3b01      	subs	r3, #1
 80050d8:	041b      	lsls	r3, r3, #16
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e0:	061b      	lsls	r3, r3, #24
 80050e2:	491b      	ldr	r1, [pc, #108]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005158 <HAL_RCC_OscConfig+0x478>)
 80050ea:	2201      	movs	r2, #1
 80050ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ee:	f7fd ff61 	bl	8002fb4 <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050f4:	e008      	b.n	8005108 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050f6:	f7fd ff5d 	bl	8002fb4 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e05c      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005108:	4b11      	ldr	r3, [pc, #68]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0f0      	beq.n	80050f6 <HAL_RCC_OscConfig+0x416>
 8005114:	e054      	b.n	80051c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005116:	4b10      	ldr	r3, [pc, #64]	@ (8005158 <HAL_RCC_OscConfig+0x478>)
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800511c:	f7fd ff4a 	bl	8002fb4 <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005124:	f7fd ff46 	bl	8002fb4 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e045      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005136:	4b06      	ldr	r3, [pc, #24]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f0      	bne.n	8005124 <HAL_RCC_OscConfig+0x444>
 8005142:	e03d      	b.n	80051c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d107      	bne.n	800515c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e038      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
 8005150:	40023800 	.word	0x40023800
 8005154:	40007000 	.word	0x40007000
 8005158:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800515c:	4b1b      	ldr	r3, [pc, #108]	@ (80051cc <HAL_RCC_OscConfig+0x4ec>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d028      	beq.n	80051bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005174:	429a      	cmp	r2, r3
 8005176:	d121      	bne.n	80051bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005182:	429a      	cmp	r2, r3
 8005184:	d11a      	bne.n	80051bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800518c:	4013      	ands	r3, r2
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005192:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005194:	4293      	cmp	r3, r2
 8005196:	d111      	bne.n	80051bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a2:	085b      	lsrs	r3, r3, #1
 80051a4:	3b01      	subs	r3, #1
 80051a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d107      	bne.n	80051bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d001      	beq.n	80051c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e000      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40023800 	.word	0x40023800

080051d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e0cc      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051e4:	4b68      	ldr	r3, [pc, #416]	@ (8005388 <HAL_RCC_ClockConfig+0x1b8>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d90c      	bls.n	800520c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051f2:	4b65      	ldr	r3, [pc, #404]	@ (8005388 <HAL_RCC_ClockConfig+0x1b8>)
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051fa:	4b63      	ldr	r3, [pc, #396]	@ (8005388 <HAL_RCC_ClockConfig+0x1b8>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d001      	beq.n	800520c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e0b8      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d020      	beq.n	800525a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	d005      	beq.n	8005230 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005224:	4b59      	ldr	r3, [pc, #356]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	4a58      	ldr	r2, [pc, #352]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 800522a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800522e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0308 	and.w	r3, r3, #8
 8005238:	2b00      	cmp	r3, #0
 800523a:	d005      	beq.n	8005248 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800523c:	4b53      	ldr	r3, [pc, #332]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	4a52      	ldr	r2, [pc, #328]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005242:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005246:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005248:	4b50      	ldr	r3, [pc, #320]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	494d      	ldr	r1, [pc, #308]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005256:	4313      	orrs	r3, r2
 8005258:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d044      	beq.n	80052f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d107      	bne.n	800527e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800526e:	4b47      	ldr	r3, [pc, #284]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d119      	bne.n	80052ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e07f      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b02      	cmp	r3, #2
 8005284:	d003      	beq.n	800528e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800528a:	2b03      	cmp	r3, #3
 800528c:	d107      	bne.n	800529e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800528e:	4b3f      	ldr	r3, [pc, #252]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d109      	bne.n	80052ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e06f      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800529e:	4b3b      	ldr	r3, [pc, #236]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e067      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052ae:	4b37      	ldr	r3, [pc, #220]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f023 0203 	bic.w	r2, r3, #3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	4934      	ldr	r1, [pc, #208]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052c0:	f7fd fe78 	bl	8002fb4 <HAL_GetTick>
 80052c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052c6:	e00a      	b.n	80052de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052c8:	f7fd fe74 	bl	8002fb4 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e04f      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052de:	4b2b      	ldr	r3, [pc, #172]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 020c 	and.w	r2, r3, #12
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d1eb      	bne.n	80052c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052f0:	4b25      	ldr	r3, [pc, #148]	@ (8005388 <HAL_RCC_ClockConfig+0x1b8>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d20c      	bcs.n	8005318 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052fe:	4b22      	ldr	r3, [pc, #136]	@ (8005388 <HAL_RCC_ClockConfig+0x1b8>)
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005306:	4b20      	ldr	r3, [pc, #128]	@ (8005388 <HAL_RCC_ClockConfig+0x1b8>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d001      	beq.n	8005318 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e032      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b00      	cmp	r3, #0
 8005322:	d008      	beq.n	8005336 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005324:	4b19      	ldr	r3, [pc, #100]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	4916      	ldr	r1, [pc, #88]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005332:	4313      	orrs	r3, r2
 8005334:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b00      	cmp	r3, #0
 8005340:	d009      	beq.n	8005356 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005342:	4b12      	ldr	r3, [pc, #72]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	490e      	ldr	r1, [pc, #56]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005352:	4313      	orrs	r3, r2
 8005354:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005356:	f000 f821 	bl	800539c <HAL_RCC_GetSysClockFreq>
 800535a:	4602      	mov	r2, r0
 800535c:	4b0b      	ldr	r3, [pc, #44]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	091b      	lsrs	r3, r3, #4
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	490a      	ldr	r1, [pc, #40]	@ (8005390 <HAL_RCC_ClockConfig+0x1c0>)
 8005368:	5ccb      	ldrb	r3, [r1, r3]
 800536a:	fa22 f303 	lsr.w	r3, r2, r3
 800536e:	4a09      	ldr	r2, [pc, #36]	@ (8005394 <HAL_RCC_ClockConfig+0x1c4>)
 8005370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005372:	4b09      	ldr	r3, [pc, #36]	@ (8005398 <HAL_RCC_ClockConfig+0x1c8>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4618      	mov	r0, r3
 8005378:	f7fc fac2 	bl	8001900 <HAL_InitTick>

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	40023c00 	.word	0x40023c00
 800538c:	40023800 	.word	0x40023800
 8005390:	0800f104 	.word	0x0800f104
 8005394:	20000004 	.word	0x20000004
 8005398:	20000014 	.word	0x20000014

0800539c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800539c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053a0:	b094      	sub	sp, #80	@ 0x50
 80053a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053b4:	4b79      	ldr	r3, [pc, #484]	@ (800559c <HAL_RCC_GetSysClockFreq+0x200>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f003 030c 	and.w	r3, r3, #12
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d00d      	beq.n	80053dc <HAL_RCC_GetSysClockFreq+0x40>
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	f200 80e1 	bhi.w	8005588 <HAL_RCC_GetSysClockFreq+0x1ec>
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <HAL_RCC_GetSysClockFreq+0x34>
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d003      	beq.n	80053d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80053ce:	e0db      	b.n	8005588 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053d0:	4b73      	ldr	r3, [pc, #460]	@ (80055a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80053d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053d4:	e0db      	b.n	800558e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053d6:	4b73      	ldr	r3, [pc, #460]	@ (80055a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80053d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053da:	e0d8      	b.n	800558e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053dc:	4b6f      	ldr	r3, [pc, #444]	@ (800559c <HAL_RCC_GetSysClockFreq+0x200>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053e6:	4b6d      	ldr	r3, [pc, #436]	@ (800559c <HAL_RCC_GetSysClockFreq+0x200>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d063      	beq.n	80054ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053f2:	4b6a      	ldr	r3, [pc, #424]	@ (800559c <HAL_RCC_GetSysClockFreq+0x200>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	099b      	lsrs	r3, r3, #6
 80053f8:	2200      	movs	r2, #0
 80053fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80053fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005404:	633b      	str	r3, [r7, #48]	@ 0x30
 8005406:	2300      	movs	r3, #0
 8005408:	637b      	str	r3, [r7, #52]	@ 0x34
 800540a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800540e:	4622      	mov	r2, r4
 8005410:	462b      	mov	r3, r5
 8005412:	f04f 0000 	mov.w	r0, #0
 8005416:	f04f 0100 	mov.w	r1, #0
 800541a:	0159      	lsls	r1, r3, #5
 800541c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005420:	0150      	lsls	r0, r2, #5
 8005422:	4602      	mov	r2, r0
 8005424:	460b      	mov	r3, r1
 8005426:	4621      	mov	r1, r4
 8005428:	1a51      	subs	r1, r2, r1
 800542a:	6139      	str	r1, [r7, #16]
 800542c:	4629      	mov	r1, r5
 800542e:	eb63 0301 	sbc.w	r3, r3, r1
 8005432:	617b      	str	r3, [r7, #20]
 8005434:	f04f 0200 	mov.w	r2, #0
 8005438:	f04f 0300 	mov.w	r3, #0
 800543c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005440:	4659      	mov	r1, fp
 8005442:	018b      	lsls	r3, r1, #6
 8005444:	4651      	mov	r1, sl
 8005446:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800544a:	4651      	mov	r1, sl
 800544c:	018a      	lsls	r2, r1, #6
 800544e:	4651      	mov	r1, sl
 8005450:	ebb2 0801 	subs.w	r8, r2, r1
 8005454:	4659      	mov	r1, fp
 8005456:	eb63 0901 	sbc.w	r9, r3, r1
 800545a:	f04f 0200 	mov.w	r2, #0
 800545e:	f04f 0300 	mov.w	r3, #0
 8005462:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005466:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800546a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800546e:	4690      	mov	r8, r2
 8005470:	4699      	mov	r9, r3
 8005472:	4623      	mov	r3, r4
 8005474:	eb18 0303 	adds.w	r3, r8, r3
 8005478:	60bb      	str	r3, [r7, #8]
 800547a:	462b      	mov	r3, r5
 800547c:	eb49 0303 	adc.w	r3, r9, r3
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	f04f 0300 	mov.w	r3, #0
 800548a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800548e:	4629      	mov	r1, r5
 8005490:	024b      	lsls	r3, r1, #9
 8005492:	4621      	mov	r1, r4
 8005494:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005498:	4621      	mov	r1, r4
 800549a:	024a      	lsls	r2, r1, #9
 800549c:	4610      	mov	r0, r2
 800549e:	4619      	mov	r1, r3
 80054a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054a2:	2200      	movs	r2, #0
 80054a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80054ac:	f7fa fe98 	bl	80001e0 <__aeabi_uldivmod>
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4613      	mov	r3, r2
 80054b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054b8:	e058      	b.n	800556c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ba:	4b38      	ldr	r3, [pc, #224]	@ (800559c <HAL_RCC_GetSysClockFreq+0x200>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	099b      	lsrs	r3, r3, #6
 80054c0:	2200      	movs	r2, #0
 80054c2:	4618      	mov	r0, r3
 80054c4:	4611      	mov	r1, r2
 80054c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80054ca:	623b      	str	r3, [r7, #32]
 80054cc:	2300      	movs	r3, #0
 80054ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80054d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80054d4:	4642      	mov	r2, r8
 80054d6:	464b      	mov	r3, r9
 80054d8:	f04f 0000 	mov.w	r0, #0
 80054dc:	f04f 0100 	mov.w	r1, #0
 80054e0:	0159      	lsls	r1, r3, #5
 80054e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054e6:	0150      	lsls	r0, r2, #5
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	4641      	mov	r1, r8
 80054ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80054f2:	4649      	mov	r1, r9
 80054f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	f04f 0300 	mov.w	r3, #0
 8005500:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005504:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005508:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800550c:	ebb2 040a 	subs.w	r4, r2, sl
 8005510:	eb63 050b 	sbc.w	r5, r3, fp
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	00eb      	lsls	r3, r5, #3
 800551e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005522:	00e2      	lsls	r2, r4, #3
 8005524:	4614      	mov	r4, r2
 8005526:	461d      	mov	r5, r3
 8005528:	4643      	mov	r3, r8
 800552a:	18e3      	adds	r3, r4, r3
 800552c:	603b      	str	r3, [r7, #0]
 800552e:	464b      	mov	r3, r9
 8005530:	eb45 0303 	adc.w	r3, r5, r3
 8005534:	607b      	str	r3, [r7, #4]
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	f04f 0300 	mov.w	r3, #0
 800553e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005542:	4629      	mov	r1, r5
 8005544:	028b      	lsls	r3, r1, #10
 8005546:	4621      	mov	r1, r4
 8005548:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800554c:	4621      	mov	r1, r4
 800554e:	028a      	lsls	r2, r1, #10
 8005550:	4610      	mov	r0, r2
 8005552:	4619      	mov	r1, r3
 8005554:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005556:	2200      	movs	r2, #0
 8005558:	61bb      	str	r3, [r7, #24]
 800555a:	61fa      	str	r2, [r7, #28]
 800555c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005560:	f7fa fe3e 	bl	80001e0 <__aeabi_uldivmod>
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	4613      	mov	r3, r2
 800556a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800556c:	4b0b      	ldr	r3, [pc, #44]	@ (800559c <HAL_RCC_GetSysClockFreq+0x200>)
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	0c1b      	lsrs	r3, r3, #16
 8005572:	f003 0303 	and.w	r3, r3, #3
 8005576:	3301      	adds	r3, #1
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800557c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800557e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005580:	fbb2 f3f3 	udiv	r3, r2, r3
 8005584:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005586:	e002      	b.n	800558e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005588:	4b05      	ldr	r3, [pc, #20]	@ (80055a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800558a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800558c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800558e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005590:	4618      	mov	r0, r3
 8005592:	3750      	adds	r7, #80	@ 0x50
 8005594:	46bd      	mov	sp, r7
 8005596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800559a:	bf00      	nop
 800559c:	40023800 	.word	0x40023800
 80055a0:	00f42400 	.word	0x00f42400
 80055a4:	007a1200 	.word	0x007a1200

080055a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055ac:	4b03      	ldr	r3, [pc, #12]	@ (80055bc <HAL_RCC_GetHCLKFreq+0x14>)
 80055ae:	681b      	ldr	r3, [r3, #0]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	20000004 	.word	0x20000004

080055c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055c4:	f7ff fff0 	bl	80055a8 <HAL_RCC_GetHCLKFreq>
 80055c8:	4602      	mov	r2, r0
 80055ca:	4b05      	ldr	r3, [pc, #20]	@ (80055e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	0a9b      	lsrs	r3, r3, #10
 80055d0:	f003 0307 	and.w	r3, r3, #7
 80055d4:	4903      	ldr	r1, [pc, #12]	@ (80055e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055d6:	5ccb      	ldrb	r3, [r1, r3]
 80055d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055dc:	4618      	mov	r0, r3
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	40023800 	.word	0x40023800
 80055e4:	0800f114 	.word	0x0800f114

080055e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055ec:	f7ff ffdc 	bl	80055a8 <HAL_RCC_GetHCLKFreq>
 80055f0:	4602      	mov	r2, r0
 80055f2:	4b05      	ldr	r3, [pc, #20]	@ (8005608 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	0b5b      	lsrs	r3, r3, #13
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	4903      	ldr	r1, [pc, #12]	@ (800560c <HAL_RCC_GetPCLK2Freq+0x24>)
 80055fe:	5ccb      	ldrb	r3, [r1, r3]
 8005600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005604:	4618      	mov	r0, r3
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40023800 	.word	0x40023800
 800560c:	0800f114 	.word	0x0800f114

08005610 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	220f      	movs	r2, #15
 800561e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005620:	4b12      	ldr	r3, [pc, #72]	@ (800566c <HAL_RCC_GetClockConfig+0x5c>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f003 0203 	and.w	r2, r3, #3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800562c:	4b0f      	ldr	r3, [pc, #60]	@ (800566c <HAL_RCC_GetClockConfig+0x5c>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005638:	4b0c      	ldr	r3, [pc, #48]	@ (800566c <HAL_RCC_GetClockConfig+0x5c>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005644:	4b09      	ldr	r3, [pc, #36]	@ (800566c <HAL_RCC_GetClockConfig+0x5c>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	08db      	lsrs	r3, r3, #3
 800564a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005652:	4b07      	ldr	r3, [pc, #28]	@ (8005670 <HAL_RCC_GetClockConfig+0x60>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0207 	and.w	r2, r3, #7
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	601a      	str	r2, [r3, #0]
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	40023800 	.word	0x40023800
 8005670:	40023c00 	.word	0x40023c00

08005674 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800567c:	2300      	movs	r3, #0
 800567e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d105      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005698:	2b00      	cmp	r3, #0
 800569a:	d035      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800569c:	4b67      	ldr	r3, [pc, #412]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056a2:	f7fd fc87 	bl	8002fb4 <HAL_GetTick>
 80056a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056a8:	e008      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056aa:	f7fd fc83 	bl	8002fb4 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d901      	bls.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e0ba      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056bc:	4b60      	ldr	r3, [pc, #384]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1f0      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	019a      	lsls	r2, r3, #6
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	071b      	lsls	r3, r3, #28
 80056d4:	495a      	ldr	r1, [pc, #360]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80056dc:	4b57      	ldr	r3, [pc, #348]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80056de:	2201      	movs	r2, #1
 80056e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056e2:	f7fd fc67 	bl	8002fb4 <HAL_GetTick>
 80056e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056e8:	e008      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056ea:	f7fd fc63 	bl	8002fb4 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d901      	bls.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e09a      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056fc:	4b50      	ldr	r3, [pc, #320]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0f0      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 8083 	beq.w	800581c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	4b49      	ldr	r3, [pc, #292]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800571c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571e:	4a48      	ldr	r2, [pc, #288]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005724:	6413      	str	r3, [r2, #64]	@ 0x40
 8005726:	4b46      	ldr	r3, [pc, #280]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800572e:	60fb      	str	r3, [r7, #12]
 8005730:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005732:	4b44      	ldr	r3, [pc, #272]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a43      	ldr	r2, [pc, #268]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800573c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800573e:	f7fd fc39 	bl	8002fb4 <HAL_GetTick>
 8005742:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005744:	e008      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005746:	f7fd fc35 	bl	8002fb4 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d901      	bls.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e06c      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005758:	4b3a      	ldr	r3, [pc, #232]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0f0      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005764:	4b36      	ldr	r3, [pc, #216]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005768:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800576c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d02f      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	429a      	cmp	r2, r3
 8005780:	d028      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005782:	4b2f      	ldr	r3, [pc, #188]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800578a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800578c:	4b2e      	ldr	r3, [pc, #184]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800578e:	2201      	movs	r2, #1
 8005790:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005792:	4b2d      	ldr	r3, [pc, #180]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005798:	4a29      	ldr	r2, [pc, #164]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800579e:	4b28      	ldr	r3, [pc, #160]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d114      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80057aa:	f7fd fc03 	bl	8002fb4 <HAL_GetTick>
 80057ae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057b0:	e00a      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057b2:	f7fd fbff 	bl	8002fb4 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d901      	bls.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e034      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0ee      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057e0:	d10d      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80057e2:	4b17      	ldr	r3, [pc, #92]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80057f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057f6:	4912      	ldr	r1, [pc, #72]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	608b      	str	r3, [r1, #8]
 80057fc:	e005      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80057fe:	4b10      	ldr	r3, [pc, #64]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	4a0f      	ldr	r2, [pc, #60]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005804:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005808:	6093      	str	r3, [r2, #8]
 800580a:	4b0d      	ldr	r3, [pc, #52]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800580c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005816:	490a      	ldr	r1, [pc, #40]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005818:	4313      	orrs	r3, r2
 800581a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0308 	and.w	r3, r3, #8
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	7c1a      	ldrb	r2, [r3, #16]
 800582c:	4b07      	ldr	r3, [pc, #28]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800582e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	42470068 	.word	0x42470068
 8005840:	40023800 	.word	0x40023800
 8005844:	40007000 	.word	0x40007000
 8005848:	42470e40 	.word	0x42470e40
 800584c:	424711e0 	.word	0x424711e0

08005850 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e073      	b.n	800594e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	7f5b      	ldrb	r3, [r3, #29]
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	d105      	bne.n	800587c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fb ff4c 	bl	8001714 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f003 0310 	and.w	r3, r3, #16
 800588c:	2b10      	cmp	r3, #16
 800588e:	d055      	beq.n	800593c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	22ca      	movs	r2, #202	@ 0xca
 8005896:	625a      	str	r2, [r3, #36]	@ 0x24
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2253      	movs	r2, #83	@ 0x53
 800589e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f99d 	bl	8005be0 <RTC_EnterInitMode>
 80058a6:	4603      	mov	r3, r0
 80058a8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d12c      	bne.n	800590a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6812      	ldr	r2, [r2, #0]
 80058ba:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80058be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058c2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6899      	ldr	r1, [r3, #8]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	431a      	orrs	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	431a      	orrs	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	68d2      	ldr	r2, [r2, #12]
 80058ea:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6919      	ldr	r1, [r3, #16]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	041a      	lsls	r2, r3, #16
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f9a4 	bl	8005c4e <RTC_ExitInitMode>
 8005906:	4603      	mov	r3, r0
 8005908:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d110      	bne.n	8005932 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800591e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	699a      	ldr	r2, [r3, #24]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	22ff      	movs	r2, #255	@ 0xff
 8005938:	625a      	str	r2, [r3, #36]	@ 0x24
 800593a:	e001      	b.n	8005940 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800593c:	2300      	movs	r3, #0
 800593e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005940:	7bfb      	ldrb	r3, [r7, #15]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d102      	bne.n	800594c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800594c:	7bfb      	ldrb	r3, [r7, #15]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005956:	b590      	push	{r4, r7, lr}
 8005958:	b087      	sub	sp, #28
 800595a:	af00      	add	r7, sp, #0
 800595c:	60f8      	str	r0, [r7, #12]
 800595e:	60b9      	str	r1, [r7, #8]
 8005960:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005962:	2300      	movs	r3, #0
 8005964:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	7f1b      	ldrb	r3, [r3, #28]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d101      	bne.n	8005972 <HAL_RTC_SetTime+0x1c>
 800596e:	2302      	movs	r3, #2
 8005970:	e087      	b.n	8005a82 <HAL_RTC_SetTime+0x12c>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2201      	movs	r2, #1
 8005976:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2202      	movs	r2, #2
 800597c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d126      	bne.n	80059d2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800598e:	2b00      	cmp	r3, #0
 8005990:	d102      	bne.n	8005998 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2200      	movs	r2, #0
 8005996:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	4618      	mov	r0, r3
 800599e:	f000 f97b 	bl	8005c98 <RTC_ByteToBcd2>
 80059a2:	4603      	mov	r3, r0
 80059a4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	785b      	ldrb	r3, [r3, #1]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 f974 	bl	8005c98 <RTC_ByteToBcd2>
 80059b0:	4603      	mov	r3, r0
 80059b2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059b4:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	789b      	ldrb	r3, [r3, #2]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 f96c 	bl	8005c98 <RTC_ByteToBcd2>
 80059c0:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059c2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	78db      	ldrb	r3, [r3, #3]
 80059ca:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	e018      	b.n	8005a04 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d102      	bne.n	80059e6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2200      	movs	r2, #0
 80059e4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	785b      	ldrb	r3, [r3, #1]
 80059f0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80059f2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80059f8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	78db      	ldrb	r3, [r3, #3]
 80059fe:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a00:	4313      	orrs	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	22ca      	movs	r2, #202	@ 0xca
 8005a0a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2253      	movs	r2, #83	@ 0x53
 8005a12:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 f8e3 	bl	8005be0 <RTC_EnterInitMode>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005a1e:	7cfb      	ldrb	r3, [r7, #19]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d120      	bne.n	8005a66 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005a2e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005a32:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005a42:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6899      	ldr	r1, [r3, #8]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	431a      	orrs	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 f8f6 	bl	8005c4e <RTC_ExitInitMode>
 8005a62:	4603      	mov	r3, r0
 8005a64:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005a66:	7cfb      	ldrb	r3, [r7, #19]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d102      	bne.n	8005a72 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	22ff      	movs	r2, #255	@ 0xff
 8005a78:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	771a      	strb	r2, [r3, #28]

  return status;
 8005a80:	7cfb      	ldrb	r3, [r7, #19]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	371c      	adds	r7, #28
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd90      	pop	{r4, r7, pc}

08005a8a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a8a:	b590      	push	{r4, r7, lr}
 8005a8c:	b087      	sub	sp, #28
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	60f8      	str	r0, [r7, #12]
 8005a92:	60b9      	str	r1, [r7, #8]
 8005a94:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	7f1b      	ldrb	r3, [r3, #28]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d101      	bne.n	8005aa6 <HAL_RTC_SetDate+0x1c>
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	e071      	b.n	8005b8a <HAL_RTC_SetDate+0x100>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10e      	bne.n	8005ad6 <HAL_RTC_SetDate+0x4c>
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	785b      	ldrb	r3, [r3, #1]
 8005abc:	f003 0310 	and.w	r3, r3, #16
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d008      	beq.n	8005ad6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	785b      	ldrb	r3, [r3, #1]
 8005ac8:	f023 0310 	bic.w	r3, r3, #16
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	330a      	adds	r3, #10
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d11c      	bne.n	8005b16 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	78db      	ldrb	r3, [r3, #3]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 f8d9 	bl	8005c98 <RTC_ByteToBcd2>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	785b      	ldrb	r3, [r3, #1]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 f8d2 	bl	8005c98 <RTC_ByteToBcd2>
 8005af4:	4603      	mov	r3, r0
 8005af6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005af8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	789b      	ldrb	r3, [r3, #2]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 f8ca 	bl	8005c98 <RTC_ByteToBcd2>
 8005b04:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005b06:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005b10:	4313      	orrs	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	e00e      	b.n	8005b34 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	78db      	ldrb	r3, [r3, #3]
 8005b1a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	785b      	ldrb	r3, [r3, #1]
 8005b20:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b22:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005b28:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b30:	4313      	orrs	r3, r2
 8005b32:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	22ca      	movs	r2, #202	@ 0xca
 8005b3a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2253      	movs	r2, #83	@ 0x53
 8005b42:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 f84b 	bl	8005be0 <RTC_EnterInitMode>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005b4e:	7cfb      	ldrb	r3, [r7, #19]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10c      	bne.n	8005b6e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005b5e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005b62:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 f872 	bl	8005c4e <RTC_ExitInitMode>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005b6e:	7cfb      	ldrb	r3, [r7, #19]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d102      	bne.n	8005b7a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2201      	movs	r2, #1
 8005b78:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	22ff      	movs	r2, #255	@ 0xff
 8005b80:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	771a      	strb	r2, [r3, #28]

  return status;
 8005b88:	7cfb      	ldrb	r3, [r7, #19]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	371c      	adds	r7, #28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd90      	pop	{r4, r7, pc}
	...

08005b94 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8005bdc <HAL_RTC_WaitForSynchro+0x48>)
 8005ba6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ba8:	f7fd fa04 	bl	8002fb4 <HAL_GetTick>
 8005bac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005bae:	e009      	b.n	8005bc4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005bb0:	f7fd fa00 	bl	8002fb4 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e007      	b.n	8005bd4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f003 0320 	and.w	r3, r3, #32
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0ee      	beq.n	8005bb0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	00013f5f 	.word	0x00013f5f

08005be0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005be8:	2300      	movs	r3, #0
 8005bea:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005bec:	2300      	movs	r3, #0
 8005bee:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d122      	bne.n	8005c44 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005c0c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c0e:	f7fd f9d1 	bl	8002fb4 <HAL_GetTick>
 8005c12:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005c14:	e00c      	b.n	8005c30 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c16:	f7fd f9cd 	bl	8002fb4 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c24:	d904      	bls.n	8005c30 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2204      	movs	r2, #4
 8005c2a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d102      	bne.n	8005c44 <RTC_EnterInitMode+0x64>
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d1e8      	bne.n	8005c16 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68da      	ldr	r2, [r3, #12]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c68:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f003 0320 	and.w	r3, r3, #32
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10a      	bne.n	8005c8e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f7ff ff8b 	bl	8005b94 <HAL_RTC_WaitForSynchro>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d004      	beq.n	8005c8e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2204      	movs	r2, #4
 8005c88:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005ca6:	e005      	b.n	8005cb4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	3301      	adds	r3, #1
 8005cac:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005cae:	79fb      	ldrb	r3, [r7, #7]
 8005cb0:	3b0a      	subs	r3, #10
 8005cb2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005cb4:	79fb      	ldrb	r3, [r7, #7]
 8005cb6:	2b09      	cmp	r3, #9
 8005cb8:	d8f6      	bhi.n	8005ca8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	011b      	lsls	r3, r3, #4
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	79fb      	ldrb	r3, [r7, #7]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	b2db      	uxtb	r3, r3
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e07b      	b.n	8005dde <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d108      	bne.n	8005d00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cf6:	d009      	beq.n	8005d0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	61da      	str	r2, [r3, #28]
 8005cfe:	e005      	b.n	8005d0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d106      	bne.n	8005d2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7fb fd20 	bl	800176c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d54:	431a      	orrs	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d86:	431a      	orrs	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d90:	ea42 0103 	orr.w	r1, r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d98:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	0c1b      	lsrs	r3, r3, #16
 8005daa:	f003 0104 	and.w	r1, r3, #4
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db2:	f003 0210 	and.w	r2, r3, #16
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69da      	ldr	r2, [r3, #28]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005dcc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b088      	sub	sp, #32
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	60f8      	str	r0, [r7, #12]
 8005dee:	60b9      	str	r1, [r7, #8]
 8005df0:	603b      	str	r3, [r7, #0]
 8005df2:	4613      	mov	r3, r2
 8005df4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005df6:	f7fd f8dd 	bl	8002fb4 <HAL_GetTick>
 8005dfa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005dfc:	88fb      	ldrh	r3, [r7, #6]
 8005dfe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d001      	beq.n	8005e10 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	e12a      	b.n	8006066 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <HAL_SPI_Transmit+0x36>
 8005e16:	88fb      	ldrh	r3, [r7, #6]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e122      	b.n	8006066 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d101      	bne.n	8005e2e <HAL_SPI_Transmit+0x48>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	e11b      	b.n	8006066 <HAL_SPI_Transmit+0x280>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2203      	movs	r2, #3
 8005e3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	88fa      	ldrh	r2, [r7, #6]
 8005e4e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	88fa      	ldrh	r2, [r7, #6]
 8005e54:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e7c:	d10f      	bne.n	8005e9e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ea8:	2b40      	cmp	r3, #64	@ 0x40
 8005eaa:	d007      	beq.n	8005ebc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005eba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ec4:	d152      	bne.n	8005f6c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <HAL_SPI_Transmit+0xee>
 8005ece:	8b7b      	ldrh	r3, [r7, #26]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d145      	bne.n	8005f60 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed8:	881a      	ldrh	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee4:	1c9a      	adds	r2, r3, #2
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ef8:	e032      	b.n	8005f60 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d112      	bne.n	8005f2e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f0c:	881a      	ldrh	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f18:	1c9a      	adds	r2, r3, #2
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005f2c:	e018      	b.n	8005f60 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f2e:	f7fd f841 	bl	8002fb4 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d803      	bhi.n	8005f46 <HAL_SPI_Transmit+0x160>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f44:	d102      	bne.n	8005f4c <HAL_SPI_Transmit+0x166>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d109      	bne.n	8005f60 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e082      	b.n	8006066 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1c7      	bne.n	8005efa <HAL_SPI_Transmit+0x114>
 8005f6a:	e053      	b.n	8006014 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d002      	beq.n	8005f7a <HAL_SPI_Transmit+0x194>
 8005f74:	8b7b      	ldrh	r3, [r7, #26]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d147      	bne.n	800600a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	330c      	adds	r3, #12
 8005f84:	7812      	ldrb	r2, [r2, #0]
 8005f86:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f8c:	1c5a      	adds	r2, r3, #1
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005fa0:	e033      	b.n	800600a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d113      	bne.n	8005fd8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	330c      	adds	r3, #12
 8005fba:	7812      	ldrb	r2, [r2, #0]
 8005fbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005fd6:	e018      	b.n	800600a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fd8:	f7fc ffec 	bl	8002fb4 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d803      	bhi.n	8005ff0 <HAL_SPI_Transmit+0x20a>
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fee:	d102      	bne.n	8005ff6 <HAL_SPI_Transmit+0x210>
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d109      	bne.n	800600a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e02d      	b.n	8006066 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800600e:	b29b      	uxth	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1c6      	bne.n	8005fa2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006014:	69fa      	ldr	r2, [r7, #28]
 8006016:	6839      	ldr	r1, [r7, #0]
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 fa67 	bl	80064ec <SPI_EndRxTxTransaction>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2220      	movs	r2, #32
 8006028:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10a      	bne.n	8006048 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006032:	2300      	movs	r3, #0
 8006034:	617b      	str	r3, [r7, #20]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	617b      	str	r3, [r7, #20]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	617b      	str	r3, [r7, #20]
 8006046:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800605c:	2b00      	cmp	r3, #0
 800605e:	d001      	beq.n	8006064 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e000      	b.n	8006066 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006064:	2300      	movs	r3, #0
  }
}
 8006066:	4618      	mov	r0, r3
 8006068:	3720      	adds	r7, #32
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b08a      	sub	sp, #40	@ 0x28
 8006072:	af00      	add	r7, sp, #0
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	607a      	str	r2, [r7, #4]
 800607a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800607c:	2301      	movs	r3, #1
 800607e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006080:	f7fc ff98 	bl	8002fb4 <HAL_GetTick>
 8006084:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800608c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006094:	887b      	ldrh	r3, [r7, #2]
 8006096:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006098:	7ffb      	ldrb	r3, [r7, #31]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d00c      	beq.n	80060b8 <HAL_SPI_TransmitReceive+0x4a>
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060a4:	d106      	bne.n	80060b4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d102      	bne.n	80060b4 <HAL_SPI_TransmitReceive+0x46>
 80060ae:	7ffb      	ldrb	r3, [r7, #31]
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	d001      	beq.n	80060b8 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80060b4:	2302      	movs	r3, #2
 80060b6:	e17f      	b.n	80063b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d005      	beq.n	80060ca <HAL_SPI_TransmitReceive+0x5c>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <HAL_SPI_TransmitReceive+0x5c>
 80060c4:	887b      	ldrh	r3, [r7, #2]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e174      	b.n	80063b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d101      	bne.n	80060dc <HAL_SPI_TransmitReceive+0x6e>
 80060d8:	2302      	movs	r3, #2
 80060da:	e16d      	b.n	80063b8 <HAL_SPI_TransmitReceive+0x34a>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b04      	cmp	r3, #4
 80060ee:	d003      	beq.n	80060f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2205      	movs	r2, #5
 80060f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	887a      	ldrh	r2, [r7, #2]
 8006108:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	887a      	ldrh	r2, [r7, #2]
 800610e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	887a      	ldrh	r2, [r7, #2]
 800611a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	887a      	ldrh	r2, [r7, #2]
 8006120:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006138:	2b40      	cmp	r3, #64	@ 0x40
 800613a:	d007      	beq.n	800614c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800614a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006154:	d17e      	bne.n	8006254 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <HAL_SPI_TransmitReceive+0xf6>
 800615e:	8afb      	ldrh	r3, [r7, #22]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d16c      	bne.n	800623e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006168:	881a      	ldrh	r2, [r3, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006174:	1c9a      	adds	r2, r3, #2
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800617e:	b29b      	uxth	r3, r3
 8006180:	3b01      	subs	r3, #1
 8006182:	b29a      	uxth	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006188:	e059      	b.n	800623e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b02      	cmp	r3, #2
 8006196:	d11b      	bne.n	80061d0 <HAL_SPI_TransmitReceive+0x162>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800619c:	b29b      	uxth	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d016      	beq.n	80061d0 <HAL_SPI_TransmitReceive+0x162>
 80061a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d113      	bne.n	80061d0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ac:	881a      	ldrh	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b8:	1c9a      	adds	r2, r3, #2
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	3b01      	subs	r3, #1
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d119      	bne.n	8006212 <HAL_SPI_TransmitReceive+0x1a4>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d014      	beq.n	8006212 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68da      	ldr	r2, [r3, #12]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f2:	b292      	uxth	r2, r2
 80061f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fa:	1c9a      	adds	r2, r3, #2
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006204:	b29b      	uxth	r3, r3
 8006206:	3b01      	subs	r3, #1
 8006208:	b29a      	uxth	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800620e:	2301      	movs	r3, #1
 8006210:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006212:	f7fc fecf 	bl	8002fb4 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800621e:	429a      	cmp	r2, r3
 8006220:	d80d      	bhi.n	800623e <HAL_SPI_TransmitReceive+0x1d0>
 8006222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006228:	d009      	beq.n	800623e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e0bc      	b.n	80063b8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006242:	b29b      	uxth	r3, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1a0      	bne.n	800618a <HAL_SPI_TransmitReceive+0x11c>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800624c:	b29b      	uxth	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d19b      	bne.n	800618a <HAL_SPI_TransmitReceive+0x11c>
 8006252:	e082      	b.n	800635a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d002      	beq.n	8006262 <HAL_SPI_TransmitReceive+0x1f4>
 800625c:	8afb      	ldrh	r3, [r7, #22]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d171      	bne.n	8006346 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	330c      	adds	r3, #12
 800626c:	7812      	ldrb	r2, [r2, #0]
 800626e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006274:	1c5a      	adds	r2, r3, #1
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800627e:	b29b      	uxth	r3, r3
 8006280:	3b01      	subs	r3, #1
 8006282:	b29a      	uxth	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006288:	e05d      	b.n	8006346 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	2b02      	cmp	r3, #2
 8006296:	d11c      	bne.n	80062d2 <HAL_SPI_TransmitReceive+0x264>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800629c:	b29b      	uxth	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d017      	beq.n	80062d2 <HAL_SPI_TransmitReceive+0x264>
 80062a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d114      	bne.n	80062d2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	330c      	adds	r3, #12
 80062b2:	7812      	ldrb	r2, [r2, #0]
 80062b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d119      	bne.n	8006314 <HAL_SPI_TransmitReceive+0x2a6>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d014      	beq.n	8006314 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68da      	ldr	r2, [r3, #12]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f4:	b2d2      	uxtb	r2, r2
 80062f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006306:	b29b      	uxth	r3, r3
 8006308:	3b01      	subs	r3, #1
 800630a:	b29a      	uxth	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006310:	2301      	movs	r3, #1
 8006312:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006314:	f7fc fe4e 	bl	8002fb4 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006320:	429a      	cmp	r2, r3
 8006322:	d803      	bhi.n	800632c <HAL_SPI_TransmitReceive+0x2be>
 8006324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632a:	d102      	bne.n	8006332 <HAL_SPI_TransmitReceive+0x2c4>
 800632c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632e:	2b00      	cmp	r3, #0
 8006330:	d109      	bne.n	8006346 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e038      	b.n	80063b8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800634a:	b29b      	uxth	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d19c      	bne.n	800628a <HAL_SPI_TransmitReceive+0x21c>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006354:	b29b      	uxth	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d197      	bne.n	800628a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800635a:	6a3a      	ldr	r2, [r7, #32]
 800635c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 f8c4 	bl	80064ec <SPI_EndRxTxTransaction>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d008      	beq.n	800637c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2220      	movs	r2, #32
 800636e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e01d      	b.n	80063b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10a      	bne.n	800639a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006384:	2300      	movs	r3, #0
 8006386:	613b      	str	r3, [r7, #16]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	613b      	str	r3, [r7, #16]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	613b      	str	r3, [r7, #16]
 8006398:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80063b6:	2300      	movs	r3, #0
  }
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3728      	adds	r7, #40	@ 0x28
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063ce:	b2db      	uxtb	r3, r3
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b088      	sub	sp, #32
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	603b      	str	r3, [r7, #0]
 80063e8:	4613      	mov	r3, r2
 80063ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063ec:	f7fc fde2 	bl	8002fb4 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f4:	1a9b      	subs	r3, r3, r2
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	4413      	add	r3, r2
 80063fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063fc:	f7fc fdda 	bl	8002fb4 <HAL_GetTick>
 8006400:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006402:	4b39      	ldr	r3, [pc, #228]	@ (80064e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	015b      	lsls	r3, r3, #5
 8006408:	0d1b      	lsrs	r3, r3, #20
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	fb02 f303 	mul.w	r3, r2, r3
 8006410:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006412:	e054      	b.n	80064be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641a:	d050      	beq.n	80064be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800641c:	f7fc fdca 	bl	8002fb4 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	69fa      	ldr	r2, [r7, #28]
 8006428:	429a      	cmp	r2, r3
 800642a:	d902      	bls.n	8006432 <SPI_WaitFlagStateUntilTimeout+0x56>
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d13d      	bne.n	80064ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006440:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800644a:	d111      	bne.n	8006470 <SPI_WaitFlagStateUntilTimeout+0x94>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006454:	d004      	beq.n	8006460 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800645e:	d107      	bne.n	8006470 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800646e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006474:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006478:	d10f      	bne.n	800649a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006488:	601a      	str	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006498:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e017      	b.n	80064de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064b4:	2300      	movs	r3, #0
 80064b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	3b01      	subs	r3, #1
 80064bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	4013      	ands	r3, r2
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	bf0c      	ite	eq
 80064ce:	2301      	moveq	r3, #1
 80064d0:	2300      	movne	r3, #0
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	461a      	mov	r2, r3
 80064d6:	79fb      	ldrb	r3, [r7, #7]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d19b      	bne.n	8006414 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3720      	adds	r7, #32
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	20000004 	.word	0x20000004

080064ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b088      	sub	sp, #32
 80064f0:	af02      	add	r7, sp, #8
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2201      	movs	r2, #1
 8006500:	2102      	movs	r1, #2
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f7ff ff6a 	bl	80063dc <SPI_WaitFlagStateUntilTimeout>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d007      	beq.n	800651e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006512:	f043 0220 	orr.w	r2, r3, #32
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e032      	b.n	8006584 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800651e:	4b1b      	ldr	r3, [pc, #108]	@ (800658c <SPI_EndRxTxTransaction+0xa0>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a1b      	ldr	r2, [pc, #108]	@ (8006590 <SPI_EndRxTxTransaction+0xa4>)
 8006524:	fba2 2303 	umull	r2, r3, r2, r3
 8006528:	0d5b      	lsrs	r3, r3, #21
 800652a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800652e:	fb02 f303 	mul.w	r3, r2, r3
 8006532:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800653c:	d112      	bne.n	8006564 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	2200      	movs	r2, #0
 8006546:	2180      	movs	r1, #128	@ 0x80
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f7ff ff47 	bl	80063dc <SPI_WaitFlagStateUntilTimeout>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d016      	beq.n	8006582 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006558:	f043 0220 	orr.w	r2, r3, #32
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e00f      	b.n	8006584 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	3b01      	subs	r3, #1
 800656e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800657a:	2b80      	cmp	r3, #128	@ 0x80
 800657c:	d0f2      	beq.n	8006564 <SPI_EndRxTxTransaction+0x78>
 800657e:	e000      	b.n	8006582 <SPI_EndRxTxTransaction+0x96>
        break;
 8006580:	bf00      	nop
  }

  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3718      	adds	r7, #24
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	20000004 	.word	0x20000004
 8006590:	165e9f81 	.word	0x165e9f81

08006594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e041      	b.n	800662a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d106      	bne.n	80065c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7fb f930 	bl	8001820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2202      	movs	r2, #2
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	3304      	adds	r3, #4
 80065d0:	4619      	mov	r1, r3
 80065d2:	4610      	mov	r0, r2
 80065d4:	f000 fa9e 	bl	8006b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
	...

08006634 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b01      	cmp	r3, #1
 8006646:	d001      	beq.n	800664c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e044      	b.n	80066d6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68da      	ldr	r2, [r3, #12]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f042 0201 	orr.w	r2, r2, #1
 8006662:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a1e      	ldr	r2, [pc, #120]	@ (80066e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d018      	beq.n	80066a0 <HAL_TIM_Base_Start_IT+0x6c>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006676:	d013      	beq.n	80066a0 <HAL_TIM_Base_Start_IT+0x6c>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a1a      	ldr	r2, [pc, #104]	@ (80066e8 <HAL_TIM_Base_Start_IT+0xb4>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d00e      	beq.n	80066a0 <HAL_TIM_Base_Start_IT+0x6c>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a19      	ldr	r2, [pc, #100]	@ (80066ec <HAL_TIM_Base_Start_IT+0xb8>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d009      	beq.n	80066a0 <HAL_TIM_Base_Start_IT+0x6c>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a17      	ldr	r2, [pc, #92]	@ (80066f0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d004      	beq.n	80066a0 <HAL_TIM_Base_Start_IT+0x6c>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a16      	ldr	r2, [pc, #88]	@ (80066f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d111      	bne.n	80066c4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f003 0307 	and.w	r3, r3, #7
 80066aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2b06      	cmp	r3, #6
 80066b0:	d010      	beq.n	80066d4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f042 0201 	orr.w	r2, r2, #1
 80066c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c2:	e007      	b.n	80066d4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f042 0201 	orr.w	r2, r2, #1
 80066d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	40010000 	.word	0x40010000
 80066e8:	40000400 	.word	0x40000400
 80066ec:	40000800 	.word	0x40000800
 80066f0:	40000c00 	.word	0x40000c00
 80066f4:	40014000 	.word	0x40014000

080066f8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68da      	ldr	r2, [r3, #12]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f022 0201 	bic.w	r2, r2, #1
 800670e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6a1a      	ldr	r2, [r3, #32]
 8006716:	f241 1311 	movw	r3, #4369	@ 0x1111
 800671a:	4013      	ands	r3, r2
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10f      	bne.n	8006740 <HAL_TIM_Base_Stop_IT+0x48>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6a1a      	ldr	r2, [r3, #32]
 8006726:	f240 4344 	movw	r3, #1092	@ 0x444
 800672a:	4013      	ands	r3, r2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d107      	bne.n	8006740 <HAL_TIM_Base_Stop_IT+0x48>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0201 	bic.w	r2, r2, #1
 800673e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b084      	sub	sp, #16
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	f003 0302 	and.w	r3, r3, #2
 8006774:	2b00      	cmp	r3, #0
 8006776:	d020      	beq.n	80067ba <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	2b00      	cmp	r3, #0
 8006780:	d01b      	beq.n	80067ba <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f06f 0202 	mvn.w	r2, #2
 800678a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	f003 0303 	and.w	r3, r3, #3
 800679c:	2b00      	cmp	r3, #0
 800679e:	d003      	beq.n	80067a8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f999 	bl	8006ad8 <HAL_TIM_IC_CaptureCallback>
 80067a6:	e005      	b.n	80067b4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f98b 	bl	8006ac4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f99c 	bl	8006aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d020      	beq.n	8006806 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f003 0304 	and.w	r3, r3, #4
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d01b      	beq.n	8006806 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f06f 0204 	mvn.w	r2, #4
 80067d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2202      	movs	r2, #2
 80067dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d003      	beq.n	80067f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 f973 	bl	8006ad8 <HAL_TIM_IC_CaptureCallback>
 80067f2:	e005      	b.n	8006800 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f965 	bl	8006ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f976 	bl	8006aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	f003 0308 	and.w	r3, r3, #8
 800680c:	2b00      	cmp	r3, #0
 800680e:	d020      	beq.n	8006852 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f003 0308 	and.w	r3, r3, #8
 8006816:	2b00      	cmp	r3, #0
 8006818:	d01b      	beq.n	8006852 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f06f 0208 	mvn.w	r2, #8
 8006822:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2204      	movs	r2, #4
 8006828:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	69db      	ldr	r3, [r3, #28]
 8006830:	f003 0303 	and.w	r3, r3, #3
 8006834:	2b00      	cmp	r3, #0
 8006836:	d003      	beq.n	8006840 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f94d 	bl	8006ad8 <HAL_TIM_IC_CaptureCallback>
 800683e:	e005      	b.n	800684c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f93f 	bl	8006ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f950 	bl	8006aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	f003 0310 	and.w	r3, r3, #16
 8006858:	2b00      	cmp	r3, #0
 800685a:	d020      	beq.n	800689e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f003 0310 	and.w	r3, r3, #16
 8006862:	2b00      	cmp	r3, #0
 8006864:	d01b      	beq.n	800689e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f06f 0210 	mvn.w	r2, #16
 800686e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2208      	movs	r2, #8
 8006874:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006880:	2b00      	cmp	r3, #0
 8006882:	d003      	beq.n	800688c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 f927 	bl	8006ad8 <HAL_TIM_IC_CaptureCallback>
 800688a:	e005      	b.n	8006898 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f919 	bl	8006ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f92a 	bl	8006aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00c      	beq.n	80068c2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d007      	beq.n	80068c2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f06f 0201 	mvn.w	r2, #1
 80068ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7fa fe21 	bl	8001504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00c      	beq.n	80068e6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d007      	beq.n	80068e6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80068de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fab5 	bl	8006e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00c      	beq.n	800690a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d007      	beq.n	800690a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f8fb 	bl	8006b00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f003 0320 	and.w	r3, r3, #32
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00c      	beq.n	800692e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f003 0320 	and.w	r3, r3, #32
 800691a:	2b00      	cmp	r3, #0
 800691c:	d007      	beq.n	800692e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f06f 0220 	mvn.w	r2, #32
 8006926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fa87 	bl	8006e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800692e:	bf00      	nop
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b084      	sub	sp, #16
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006940:	2300      	movs	r3, #0
 8006942:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800694a:	2b01      	cmp	r3, #1
 800694c:	d101      	bne.n	8006952 <HAL_TIM_ConfigClockSource+0x1c>
 800694e:	2302      	movs	r3, #2
 8006950:	e0b4      	b.n	8006abc <HAL_TIM_ConfigClockSource+0x186>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2202      	movs	r2, #2
 800695e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006970:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006978:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800698a:	d03e      	beq.n	8006a0a <HAL_TIM_ConfigClockSource+0xd4>
 800698c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006990:	f200 8087 	bhi.w	8006aa2 <HAL_TIM_ConfigClockSource+0x16c>
 8006994:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006998:	f000 8086 	beq.w	8006aa8 <HAL_TIM_ConfigClockSource+0x172>
 800699c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069a0:	d87f      	bhi.n	8006aa2 <HAL_TIM_ConfigClockSource+0x16c>
 80069a2:	2b70      	cmp	r3, #112	@ 0x70
 80069a4:	d01a      	beq.n	80069dc <HAL_TIM_ConfigClockSource+0xa6>
 80069a6:	2b70      	cmp	r3, #112	@ 0x70
 80069a8:	d87b      	bhi.n	8006aa2 <HAL_TIM_ConfigClockSource+0x16c>
 80069aa:	2b60      	cmp	r3, #96	@ 0x60
 80069ac:	d050      	beq.n	8006a50 <HAL_TIM_ConfigClockSource+0x11a>
 80069ae:	2b60      	cmp	r3, #96	@ 0x60
 80069b0:	d877      	bhi.n	8006aa2 <HAL_TIM_ConfigClockSource+0x16c>
 80069b2:	2b50      	cmp	r3, #80	@ 0x50
 80069b4:	d03c      	beq.n	8006a30 <HAL_TIM_ConfigClockSource+0xfa>
 80069b6:	2b50      	cmp	r3, #80	@ 0x50
 80069b8:	d873      	bhi.n	8006aa2 <HAL_TIM_ConfigClockSource+0x16c>
 80069ba:	2b40      	cmp	r3, #64	@ 0x40
 80069bc:	d058      	beq.n	8006a70 <HAL_TIM_ConfigClockSource+0x13a>
 80069be:	2b40      	cmp	r3, #64	@ 0x40
 80069c0:	d86f      	bhi.n	8006aa2 <HAL_TIM_ConfigClockSource+0x16c>
 80069c2:	2b30      	cmp	r3, #48	@ 0x30
 80069c4:	d064      	beq.n	8006a90 <HAL_TIM_ConfigClockSource+0x15a>
 80069c6:	2b30      	cmp	r3, #48	@ 0x30
 80069c8:	d86b      	bhi.n	8006aa2 <HAL_TIM_ConfigClockSource+0x16c>
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	d060      	beq.n	8006a90 <HAL_TIM_ConfigClockSource+0x15a>
 80069ce:	2b20      	cmp	r3, #32
 80069d0:	d867      	bhi.n	8006aa2 <HAL_TIM_ConfigClockSource+0x16c>
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d05c      	beq.n	8006a90 <HAL_TIM_ConfigClockSource+0x15a>
 80069d6:	2b10      	cmp	r3, #16
 80069d8:	d05a      	beq.n	8006a90 <HAL_TIM_ConfigClockSource+0x15a>
 80069da:	e062      	b.n	8006aa2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069ec:	f000 f998 	bl	8006d20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80069fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	609a      	str	r2, [r3, #8]
      break;
 8006a08:	e04f      	b.n	8006aaa <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a1a:	f000 f981 	bl	8006d20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a2c:	609a      	str	r2, [r3, #8]
      break;
 8006a2e:	e03c      	b.n	8006aaa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	f000 f8f5 	bl	8006c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2150      	movs	r1, #80	@ 0x50
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 f94e 	bl	8006cea <TIM_ITRx_SetConfig>
      break;
 8006a4e:	e02c      	b.n	8006aaa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	f000 f914 	bl	8006c8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2160      	movs	r1, #96	@ 0x60
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 f93e 	bl	8006cea <TIM_ITRx_SetConfig>
      break;
 8006a6e:	e01c      	b.n	8006aaa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	f000 f8d5 	bl	8006c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2140      	movs	r1, #64	@ 0x40
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 f92e 	bl	8006cea <TIM_ITRx_SetConfig>
      break;
 8006a8e:	e00c      	b.n	8006aaa <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	f000 f925 	bl	8006cea <TIM_ITRx_SetConfig>
      break;
 8006aa0:	e003      	b.n	8006aaa <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	73fb      	strb	r3, [r7, #15]
      break;
 8006aa6:	e000      	b.n	8006aaa <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006aa8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a3a      	ldr	r2, [pc, #232]	@ (8006c10 <TIM_Base_SetConfig+0xfc>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d00f      	beq.n	8006b4c <TIM_Base_SetConfig+0x38>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b32:	d00b      	beq.n	8006b4c <TIM_Base_SetConfig+0x38>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a37      	ldr	r2, [pc, #220]	@ (8006c14 <TIM_Base_SetConfig+0x100>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d007      	beq.n	8006b4c <TIM_Base_SetConfig+0x38>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a36      	ldr	r2, [pc, #216]	@ (8006c18 <TIM_Base_SetConfig+0x104>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d003      	beq.n	8006b4c <TIM_Base_SetConfig+0x38>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a35      	ldr	r2, [pc, #212]	@ (8006c1c <TIM_Base_SetConfig+0x108>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d108      	bne.n	8006b5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a2b      	ldr	r2, [pc, #172]	@ (8006c10 <TIM_Base_SetConfig+0xfc>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d01b      	beq.n	8006b9e <TIM_Base_SetConfig+0x8a>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b6c:	d017      	beq.n	8006b9e <TIM_Base_SetConfig+0x8a>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a28      	ldr	r2, [pc, #160]	@ (8006c14 <TIM_Base_SetConfig+0x100>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d013      	beq.n	8006b9e <TIM_Base_SetConfig+0x8a>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a27      	ldr	r2, [pc, #156]	@ (8006c18 <TIM_Base_SetConfig+0x104>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00f      	beq.n	8006b9e <TIM_Base_SetConfig+0x8a>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a26      	ldr	r2, [pc, #152]	@ (8006c1c <TIM_Base_SetConfig+0x108>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d00b      	beq.n	8006b9e <TIM_Base_SetConfig+0x8a>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a25      	ldr	r2, [pc, #148]	@ (8006c20 <TIM_Base_SetConfig+0x10c>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d007      	beq.n	8006b9e <TIM_Base_SetConfig+0x8a>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a24      	ldr	r2, [pc, #144]	@ (8006c24 <TIM_Base_SetConfig+0x110>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d003      	beq.n	8006b9e <TIM_Base_SetConfig+0x8a>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a23      	ldr	r2, [pc, #140]	@ (8006c28 <TIM_Base_SetConfig+0x114>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d108      	bne.n	8006bb0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a0e      	ldr	r2, [pc, #56]	@ (8006c10 <TIM_Base_SetConfig+0xfc>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d103      	bne.n	8006be4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	691a      	ldr	r2, [r3, #16]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d105      	bne.n	8006c02 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	f023 0201 	bic.w	r2, r3, #1
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	611a      	str	r2, [r3, #16]
  }
}
 8006c02:	bf00      	nop
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	40010000 	.word	0x40010000
 8006c14:	40000400 	.word	0x40000400
 8006c18:	40000800 	.word	0x40000800
 8006c1c:	40000c00 	.word	0x40000c00
 8006c20:	40014000 	.word	0x40014000
 8006c24:	40014400 	.word	0x40014400
 8006c28:	40014800 	.word	0x40014800

08006c2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	f023 0201 	bic.w	r2, r3, #1
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	011b      	lsls	r3, r3, #4
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f023 030a 	bic.w	r3, r3, #10
 8006c68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	621a      	str	r2, [r3, #32]
}
 8006c7e:	bf00      	nop
 8006c80:	371c      	adds	r7, #28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b087      	sub	sp, #28
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	60f8      	str	r0, [r7, #12]
 8006c92:	60b9      	str	r1, [r7, #8]
 8006c94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	f023 0210 	bic.w	r2, r3, #16
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006cb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	031b      	lsls	r3, r3, #12
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006cc6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	011b      	lsls	r3, r3, #4
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	621a      	str	r2, [r3, #32]
}
 8006cde:	bf00      	nop
 8006ce0:	371c      	adds	r7, #28
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b085      	sub	sp, #20
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	f043 0307 	orr.w	r3, r3, #7
 8006d0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	609a      	str	r2, [r3, #8]
}
 8006d14:	bf00      	nop
 8006d16:	3714      	adds	r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
 8006d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	021a      	lsls	r2, r3, #8
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	431a      	orrs	r2, r3
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	609a      	str	r2, [r3, #8]
}
 8006d54:	bf00      	nop
 8006d56:	371c      	adds	r7, #28
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d101      	bne.n	8006d78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d74:	2302      	movs	r3, #2
 8006d76:	e050      	b.n	8006e1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2202      	movs	r2, #2
 8006d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a1c      	ldr	r2, [pc, #112]	@ (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d018      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dc4:	d013      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a18      	ldr	r2, [pc, #96]	@ (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d00e      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a16      	ldr	r2, [pc, #88]	@ (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d009      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a15      	ldr	r2, [pc, #84]	@ (8006e34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d004      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a13      	ldr	r2, [pc, #76]	@ (8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d10c      	bne.n	8006e08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006df4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	40010000 	.word	0x40010000
 8006e2c:	40000400 	.word	0x40000400
 8006e30:	40000800 	.word	0x40000800
 8006e34:	40000c00 	.word	0x40000c00
 8006e38:	40014000 	.word	0x40014000

08006e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e042      	b.n	8006efc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d106      	bne.n	8006e90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7fa fcf0 	bl	8001870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2224      	movs	r2, #36	@ 0x24
 8006e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ea6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 f82b 	bl	8006f04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	691a      	ldr	r2, [r3, #16]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ebc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	695a      	ldr	r2, [r3, #20]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ecc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68da      	ldr	r2, [r3, #12]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006edc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f08:	b0c0      	sub	sp, #256	@ 0x100
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f20:	68d9      	ldr	r1, [r3, #12]
 8006f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	ea40 0301 	orr.w	r3, r0, r1
 8006f2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f32:	689a      	ldr	r2, [r3, #8]
 8006f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	431a      	orrs	r2, r3
 8006f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006f5c:	f021 010c 	bic.w	r1, r1, #12
 8006f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006f6a:	430b      	orrs	r3, r1
 8006f6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f7e:	6999      	ldr	r1, [r3, #24]
 8006f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	ea40 0301 	orr.w	r3, r0, r1
 8006f8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	4b8f      	ldr	r3, [pc, #572]	@ (80071d0 <UART_SetConfig+0x2cc>)
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d005      	beq.n	8006fa4 <UART_SetConfig+0xa0>
 8006f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	4b8d      	ldr	r3, [pc, #564]	@ (80071d4 <UART_SetConfig+0x2d0>)
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d104      	bne.n	8006fae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fa4:	f7fe fb20 	bl	80055e8 <HAL_RCC_GetPCLK2Freq>
 8006fa8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006fac:	e003      	b.n	8006fb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006fae:	f7fe fb07 	bl	80055c0 <HAL_RCC_GetPCLK1Freq>
 8006fb2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fba:	69db      	ldr	r3, [r3, #28]
 8006fbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fc0:	f040 810c 	bne.w	80071dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006fce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006fd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006fd6:	4622      	mov	r2, r4
 8006fd8:	462b      	mov	r3, r5
 8006fda:	1891      	adds	r1, r2, r2
 8006fdc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006fde:	415b      	adcs	r3, r3
 8006fe0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fe2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	eb12 0801 	adds.w	r8, r2, r1
 8006fec:	4629      	mov	r1, r5
 8006fee:	eb43 0901 	adc.w	r9, r3, r1
 8006ff2:	f04f 0200 	mov.w	r2, #0
 8006ff6:	f04f 0300 	mov.w	r3, #0
 8006ffa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ffe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007002:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007006:	4690      	mov	r8, r2
 8007008:	4699      	mov	r9, r3
 800700a:	4623      	mov	r3, r4
 800700c:	eb18 0303 	adds.w	r3, r8, r3
 8007010:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007014:	462b      	mov	r3, r5
 8007016:	eb49 0303 	adc.w	r3, r9, r3
 800701a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800701e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800702a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800702e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007032:	460b      	mov	r3, r1
 8007034:	18db      	adds	r3, r3, r3
 8007036:	653b      	str	r3, [r7, #80]	@ 0x50
 8007038:	4613      	mov	r3, r2
 800703a:	eb42 0303 	adc.w	r3, r2, r3
 800703e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007040:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007044:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007048:	f7f9 f8ca 	bl	80001e0 <__aeabi_uldivmod>
 800704c:	4602      	mov	r2, r0
 800704e:	460b      	mov	r3, r1
 8007050:	4b61      	ldr	r3, [pc, #388]	@ (80071d8 <UART_SetConfig+0x2d4>)
 8007052:	fba3 2302 	umull	r2, r3, r3, r2
 8007056:	095b      	lsrs	r3, r3, #5
 8007058:	011c      	lsls	r4, r3, #4
 800705a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800705e:	2200      	movs	r2, #0
 8007060:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007064:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007068:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800706c:	4642      	mov	r2, r8
 800706e:	464b      	mov	r3, r9
 8007070:	1891      	adds	r1, r2, r2
 8007072:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007074:	415b      	adcs	r3, r3
 8007076:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007078:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800707c:	4641      	mov	r1, r8
 800707e:	eb12 0a01 	adds.w	sl, r2, r1
 8007082:	4649      	mov	r1, r9
 8007084:	eb43 0b01 	adc.w	fp, r3, r1
 8007088:	f04f 0200 	mov.w	r2, #0
 800708c:	f04f 0300 	mov.w	r3, #0
 8007090:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007094:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007098:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800709c:	4692      	mov	sl, r2
 800709e:	469b      	mov	fp, r3
 80070a0:	4643      	mov	r3, r8
 80070a2:	eb1a 0303 	adds.w	r3, sl, r3
 80070a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070aa:	464b      	mov	r3, r9
 80070ac:	eb4b 0303 	adc.w	r3, fp, r3
 80070b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80070b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80070c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80070c8:	460b      	mov	r3, r1
 80070ca:	18db      	adds	r3, r3, r3
 80070cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80070ce:	4613      	mov	r3, r2
 80070d0:	eb42 0303 	adc.w	r3, r2, r3
 80070d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80070d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80070da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80070de:	f7f9 f87f 	bl	80001e0 <__aeabi_uldivmod>
 80070e2:	4602      	mov	r2, r0
 80070e4:	460b      	mov	r3, r1
 80070e6:	4611      	mov	r1, r2
 80070e8:	4b3b      	ldr	r3, [pc, #236]	@ (80071d8 <UART_SetConfig+0x2d4>)
 80070ea:	fba3 2301 	umull	r2, r3, r3, r1
 80070ee:	095b      	lsrs	r3, r3, #5
 80070f0:	2264      	movs	r2, #100	@ 0x64
 80070f2:	fb02 f303 	mul.w	r3, r2, r3
 80070f6:	1acb      	subs	r3, r1, r3
 80070f8:	00db      	lsls	r3, r3, #3
 80070fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80070fe:	4b36      	ldr	r3, [pc, #216]	@ (80071d8 <UART_SetConfig+0x2d4>)
 8007100:	fba3 2302 	umull	r2, r3, r3, r2
 8007104:	095b      	lsrs	r3, r3, #5
 8007106:	005b      	lsls	r3, r3, #1
 8007108:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800710c:	441c      	add	r4, r3
 800710e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007112:	2200      	movs	r2, #0
 8007114:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007118:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800711c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007120:	4642      	mov	r2, r8
 8007122:	464b      	mov	r3, r9
 8007124:	1891      	adds	r1, r2, r2
 8007126:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007128:	415b      	adcs	r3, r3
 800712a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800712c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007130:	4641      	mov	r1, r8
 8007132:	1851      	adds	r1, r2, r1
 8007134:	6339      	str	r1, [r7, #48]	@ 0x30
 8007136:	4649      	mov	r1, r9
 8007138:	414b      	adcs	r3, r1
 800713a:	637b      	str	r3, [r7, #52]	@ 0x34
 800713c:	f04f 0200 	mov.w	r2, #0
 8007140:	f04f 0300 	mov.w	r3, #0
 8007144:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007148:	4659      	mov	r1, fp
 800714a:	00cb      	lsls	r3, r1, #3
 800714c:	4651      	mov	r1, sl
 800714e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007152:	4651      	mov	r1, sl
 8007154:	00ca      	lsls	r2, r1, #3
 8007156:	4610      	mov	r0, r2
 8007158:	4619      	mov	r1, r3
 800715a:	4603      	mov	r3, r0
 800715c:	4642      	mov	r2, r8
 800715e:	189b      	adds	r3, r3, r2
 8007160:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007164:	464b      	mov	r3, r9
 8007166:	460a      	mov	r2, r1
 8007168:	eb42 0303 	adc.w	r3, r2, r3
 800716c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800717c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007180:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007184:	460b      	mov	r3, r1
 8007186:	18db      	adds	r3, r3, r3
 8007188:	62bb      	str	r3, [r7, #40]	@ 0x28
 800718a:	4613      	mov	r3, r2
 800718c:	eb42 0303 	adc.w	r3, r2, r3
 8007190:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007192:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007196:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800719a:	f7f9 f821 	bl	80001e0 <__aeabi_uldivmod>
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	4b0d      	ldr	r3, [pc, #52]	@ (80071d8 <UART_SetConfig+0x2d4>)
 80071a4:	fba3 1302 	umull	r1, r3, r3, r2
 80071a8:	095b      	lsrs	r3, r3, #5
 80071aa:	2164      	movs	r1, #100	@ 0x64
 80071ac:	fb01 f303 	mul.w	r3, r1, r3
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	3332      	adds	r3, #50	@ 0x32
 80071b6:	4a08      	ldr	r2, [pc, #32]	@ (80071d8 <UART_SetConfig+0x2d4>)
 80071b8:	fba2 2303 	umull	r2, r3, r2, r3
 80071bc:	095b      	lsrs	r3, r3, #5
 80071be:	f003 0207 	and.w	r2, r3, #7
 80071c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4422      	add	r2, r4
 80071ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80071cc:	e106      	b.n	80073dc <UART_SetConfig+0x4d8>
 80071ce:	bf00      	nop
 80071d0:	40011000 	.word	0x40011000
 80071d4:	40011400 	.word	0x40011400
 80071d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071e0:	2200      	movs	r2, #0
 80071e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80071e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80071ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80071ee:	4642      	mov	r2, r8
 80071f0:	464b      	mov	r3, r9
 80071f2:	1891      	adds	r1, r2, r2
 80071f4:	6239      	str	r1, [r7, #32]
 80071f6:	415b      	adcs	r3, r3
 80071f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80071fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071fe:	4641      	mov	r1, r8
 8007200:	1854      	adds	r4, r2, r1
 8007202:	4649      	mov	r1, r9
 8007204:	eb43 0501 	adc.w	r5, r3, r1
 8007208:	f04f 0200 	mov.w	r2, #0
 800720c:	f04f 0300 	mov.w	r3, #0
 8007210:	00eb      	lsls	r3, r5, #3
 8007212:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007216:	00e2      	lsls	r2, r4, #3
 8007218:	4614      	mov	r4, r2
 800721a:	461d      	mov	r5, r3
 800721c:	4643      	mov	r3, r8
 800721e:	18e3      	adds	r3, r4, r3
 8007220:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007224:	464b      	mov	r3, r9
 8007226:	eb45 0303 	adc.w	r3, r5, r3
 800722a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800722e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800723a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800723e:	f04f 0200 	mov.w	r2, #0
 8007242:	f04f 0300 	mov.w	r3, #0
 8007246:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800724a:	4629      	mov	r1, r5
 800724c:	008b      	lsls	r3, r1, #2
 800724e:	4621      	mov	r1, r4
 8007250:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007254:	4621      	mov	r1, r4
 8007256:	008a      	lsls	r2, r1, #2
 8007258:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800725c:	f7f8 ffc0 	bl	80001e0 <__aeabi_uldivmod>
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	4b60      	ldr	r3, [pc, #384]	@ (80073e8 <UART_SetConfig+0x4e4>)
 8007266:	fba3 2302 	umull	r2, r3, r3, r2
 800726a:	095b      	lsrs	r3, r3, #5
 800726c:	011c      	lsls	r4, r3, #4
 800726e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007272:	2200      	movs	r2, #0
 8007274:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007278:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800727c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007280:	4642      	mov	r2, r8
 8007282:	464b      	mov	r3, r9
 8007284:	1891      	adds	r1, r2, r2
 8007286:	61b9      	str	r1, [r7, #24]
 8007288:	415b      	adcs	r3, r3
 800728a:	61fb      	str	r3, [r7, #28]
 800728c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007290:	4641      	mov	r1, r8
 8007292:	1851      	adds	r1, r2, r1
 8007294:	6139      	str	r1, [r7, #16]
 8007296:	4649      	mov	r1, r9
 8007298:	414b      	adcs	r3, r1
 800729a:	617b      	str	r3, [r7, #20]
 800729c:	f04f 0200 	mov.w	r2, #0
 80072a0:	f04f 0300 	mov.w	r3, #0
 80072a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072a8:	4659      	mov	r1, fp
 80072aa:	00cb      	lsls	r3, r1, #3
 80072ac:	4651      	mov	r1, sl
 80072ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072b2:	4651      	mov	r1, sl
 80072b4:	00ca      	lsls	r2, r1, #3
 80072b6:	4610      	mov	r0, r2
 80072b8:	4619      	mov	r1, r3
 80072ba:	4603      	mov	r3, r0
 80072bc:	4642      	mov	r2, r8
 80072be:	189b      	adds	r3, r3, r2
 80072c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80072c4:	464b      	mov	r3, r9
 80072c6:	460a      	mov	r2, r1
 80072c8:	eb42 0303 	adc.w	r3, r2, r3
 80072cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80072d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80072da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80072dc:	f04f 0200 	mov.w	r2, #0
 80072e0:	f04f 0300 	mov.w	r3, #0
 80072e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80072e8:	4649      	mov	r1, r9
 80072ea:	008b      	lsls	r3, r1, #2
 80072ec:	4641      	mov	r1, r8
 80072ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072f2:	4641      	mov	r1, r8
 80072f4:	008a      	lsls	r2, r1, #2
 80072f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80072fa:	f7f8 ff71 	bl	80001e0 <__aeabi_uldivmod>
 80072fe:	4602      	mov	r2, r0
 8007300:	460b      	mov	r3, r1
 8007302:	4611      	mov	r1, r2
 8007304:	4b38      	ldr	r3, [pc, #224]	@ (80073e8 <UART_SetConfig+0x4e4>)
 8007306:	fba3 2301 	umull	r2, r3, r3, r1
 800730a:	095b      	lsrs	r3, r3, #5
 800730c:	2264      	movs	r2, #100	@ 0x64
 800730e:	fb02 f303 	mul.w	r3, r2, r3
 8007312:	1acb      	subs	r3, r1, r3
 8007314:	011b      	lsls	r3, r3, #4
 8007316:	3332      	adds	r3, #50	@ 0x32
 8007318:	4a33      	ldr	r2, [pc, #204]	@ (80073e8 <UART_SetConfig+0x4e4>)
 800731a:	fba2 2303 	umull	r2, r3, r2, r3
 800731e:	095b      	lsrs	r3, r3, #5
 8007320:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007324:	441c      	add	r4, r3
 8007326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800732a:	2200      	movs	r2, #0
 800732c:	673b      	str	r3, [r7, #112]	@ 0x70
 800732e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007330:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007334:	4642      	mov	r2, r8
 8007336:	464b      	mov	r3, r9
 8007338:	1891      	adds	r1, r2, r2
 800733a:	60b9      	str	r1, [r7, #8]
 800733c:	415b      	adcs	r3, r3
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007344:	4641      	mov	r1, r8
 8007346:	1851      	adds	r1, r2, r1
 8007348:	6039      	str	r1, [r7, #0]
 800734a:	4649      	mov	r1, r9
 800734c:	414b      	adcs	r3, r1
 800734e:	607b      	str	r3, [r7, #4]
 8007350:	f04f 0200 	mov.w	r2, #0
 8007354:	f04f 0300 	mov.w	r3, #0
 8007358:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800735c:	4659      	mov	r1, fp
 800735e:	00cb      	lsls	r3, r1, #3
 8007360:	4651      	mov	r1, sl
 8007362:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007366:	4651      	mov	r1, sl
 8007368:	00ca      	lsls	r2, r1, #3
 800736a:	4610      	mov	r0, r2
 800736c:	4619      	mov	r1, r3
 800736e:	4603      	mov	r3, r0
 8007370:	4642      	mov	r2, r8
 8007372:	189b      	adds	r3, r3, r2
 8007374:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007376:	464b      	mov	r3, r9
 8007378:	460a      	mov	r2, r1
 800737a:	eb42 0303 	adc.w	r3, r2, r3
 800737e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	663b      	str	r3, [r7, #96]	@ 0x60
 800738a:	667a      	str	r2, [r7, #100]	@ 0x64
 800738c:	f04f 0200 	mov.w	r2, #0
 8007390:	f04f 0300 	mov.w	r3, #0
 8007394:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007398:	4649      	mov	r1, r9
 800739a:	008b      	lsls	r3, r1, #2
 800739c:	4641      	mov	r1, r8
 800739e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073a2:	4641      	mov	r1, r8
 80073a4:	008a      	lsls	r2, r1, #2
 80073a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80073aa:	f7f8 ff19 	bl	80001e0 <__aeabi_uldivmod>
 80073ae:	4602      	mov	r2, r0
 80073b0:	460b      	mov	r3, r1
 80073b2:	4b0d      	ldr	r3, [pc, #52]	@ (80073e8 <UART_SetConfig+0x4e4>)
 80073b4:	fba3 1302 	umull	r1, r3, r3, r2
 80073b8:	095b      	lsrs	r3, r3, #5
 80073ba:	2164      	movs	r1, #100	@ 0x64
 80073bc:	fb01 f303 	mul.w	r3, r1, r3
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	011b      	lsls	r3, r3, #4
 80073c4:	3332      	adds	r3, #50	@ 0x32
 80073c6:	4a08      	ldr	r2, [pc, #32]	@ (80073e8 <UART_SetConfig+0x4e4>)
 80073c8:	fba2 2303 	umull	r2, r3, r2, r3
 80073cc:	095b      	lsrs	r3, r3, #5
 80073ce:	f003 020f 	and.w	r2, r3, #15
 80073d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4422      	add	r2, r4
 80073da:	609a      	str	r2, [r3, #8]
}
 80073dc:	bf00      	nop
 80073de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80073e2:	46bd      	mov	sp, r7
 80073e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073e8:	51eb851f 	.word	0x51eb851f

080073ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80073f0:	4904      	ldr	r1, [pc, #16]	@ (8007404 <MX_FATFS_Init+0x18>)
 80073f2:	4805      	ldr	r0, [pc, #20]	@ (8007408 <MX_FATFS_Init+0x1c>)
 80073f4:	f004 ffa4 	bl	800c340 <FATFS_LinkDriver>
 80073f8:	4603      	mov	r3, r0
 80073fa:	461a      	mov	r2, r3
 80073fc:	4b03      	ldr	r3, [pc, #12]	@ (800740c <MX_FATFS_Init+0x20>)
 80073fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007400:	bf00      	nop
 8007402:	bd80      	pop	{r7, pc}
 8007404:	200027c8 	.word	0x200027c8
 8007408:	2000001c 	.word	0x2000001c
 800740c:	200027c4 	.word	0x200027c4

08007410 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007410:	b480      	push	{r7}
 8007412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007414:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007416:	4618      	mov	r0, r3
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	4603      	mov	r3, r0
 8007428:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800742a:	79fb      	ldrb	r3, [r7, #7]
 800742c:	4618      	mov	r0, r3
 800742e:	f7f9 fa09 	bl	8000844 <SD_disk_initialize>
 8007432:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007434:	4618      	mov	r0, r3
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	4603      	mov	r3, r0
 8007444:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8007446:	79fb      	ldrb	r3, [r7, #7]
 8007448:	4618      	mov	r0, r3
 800744a:	f7f9 fae5 	bl	8000a18 <SD_disk_status>
 800744e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007450:	4618      	mov	r0, r3
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	60b9      	str	r1, [r7, #8]
 8007460:	607a      	str	r2, [r7, #4]
 8007462:	603b      	str	r3, [r7, #0]
 8007464:	4603      	mov	r3, r0
 8007466:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8007468:	7bf8      	ldrb	r0, [r7, #15]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	68b9      	ldr	r1, [r7, #8]
 8007470:	f7f9 fae8 	bl	8000a44 <SD_disk_read>
 8007474:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b084      	sub	sp, #16
 8007482:	af00      	add	r7, sp, #0
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	603b      	str	r3, [r7, #0]
 800748a:	4603      	mov	r3, r0
 800748c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800748e:	7bf8      	ldrb	r0, [r7, #15]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	68b9      	ldr	r1, [r7, #8]
 8007496:	f7f9 fb3f 	bl	8000b18 <SD_disk_write>
 800749a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	4603      	mov	r3, r0
 80074ac:	603a      	str	r2, [r7, #0]
 80074ae:	71fb      	strb	r3, [r7, #7]
 80074b0:	460b      	mov	r3, r1
 80074b2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80074b4:	79b9      	ldrb	r1, [r7, #6]
 80074b6:	79fb      	ldrb	r3, [r7, #7]
 80074b8:	683a      	ldr	r2, [r7, #0]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7f9 fbb0 	bl	8000c20 <SD_disk_ioctl>
 80074c0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
	...

080074cc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	4603      	mov	r3, r0
 80074d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80074d6:	79fb      	ldrb	r3, [r7, #7]
 80074d8:	4a08      	ldr	r2, [pc, #32]	@ (80074fc <disk_status+0x30>)
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	79fa      	ldrb	r2, [r7, #7]
 80074e4:	4905      	ldr	r1, [pc, #20]	@ (80074fc <disk_status+0x30>)
 80074e6:	440a      	add	r2, r1
 80074e8:	7a12      	ldrb	r2, [r2, #8]
 80074ea:	4610      	mov	r0, r2
 80074ec:	4798      	blx	r3
 80074ee:	4603      	mov	r3, r0
 80074f0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80074f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	200027f4 	.word	0x200027f4

08007500 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	4603      	mov	r3, r0
 8007508:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800750a:	2300      	movs	r3, #0
 800750c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800750e:	79fb      	ldrb	r3, [r7, #7]
 8007510:	4a0e      	ldr	r2, [pc, #56]	@ (800754c <disk_initialize+0x4c>)
 8007512:	5cd3      	ldrb	r3, [r2, r3]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d114      	bne.n	8007542 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007518:	79fb      	ldrb	r3, [r7, #7]
 800751a:	4a0c      	ldr	r2, [pc, #48]	@ (800754c <disk_initialize+0x4c>)
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	79fa      	ldrb	r2, [r7, #7]
 8007526:	4909      	ldr	r1, [pc, #36]	@ (800754c <disk_initialize+0x4c>)
 8007528:	440a      	add	r2, r1
 800752a:	7a12      	ldrb	r2, [r2, #8]
 800752c:	4610      	mov	r0, r2
 800752e:	4798      	blx	r3
 8007530:	4603      	mov	r3, r0
 8007532:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d103      	bne.n	8007542 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800753a:	79fb      	ldrb	r3, [r7, #7]
 800753c:	4a03      	ldr	r2, [pc, #12]	@ (800754c <disk_initialize+0x4c>)
 800753e:	2101      	movs	r1, #1
 8007540:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8007542:	7bfb      	ldrb	r3, [r7, #15]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	200027f4 	.word	0x200027f4

08007550 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007550:	b590      	push	{r4, r7, lr}
 8007552:	b087      	sub	sp, #28
 8007554:	af00      	add	r7, sp, #0
 8007556:	60b9      	str	r1, [r7, #8]
 8007558:	607a      	str	r2, [r7, #4]
 800755a:	603b      	str	r3, [r7, #0]
 800755c:	4603      	mov	r3, r0
 800755e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007560:	7bfb      	ldrb	r3, [r7, #15]
 8007562:	4a0a      	ldr	r2, [pc, #40]	@ (800758c <disk_read+0x3c>)
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	689c      	ldr	r4, [r3, #8]
 800756c:	7bfb      	ldrb	r3, [r7, #15]
 800756e:	4a07      	ldr	r2, [pc, #28]	@ (800758c <disk_read+0x3c>)
 8007570:	4413      	add	r3, r2
 8007572:	7a18      	ldrb	r0, [r3, #8]
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	68b9      	ldr	r1, [r7, #8]
 800757a:	47a0      	blx	r4
 800757c:	4603      	mov	r3, r0
 800757e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007580:	7dfb      	ldrb	r3, [r7, #23]
}
 8007582:	4618      	mov	r0, r3
 8007584:	371c      	adds	r7, #28
 8007586:	46bd      	mov	sp, r7
 8007588:	bd90      	pop	{r4, r7, pc}
 800758a:	bf00      	nop
 800758c:	200027f4 	.word	0x200027f4

08007590 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007590:	b590      	push	{r4, r7, lr}
 8007592:	b087      	sub	sp, #28
 8007594:	af00      	add	r7, sp, #0
 8007596:	60b9      	str	r1, [r7, #8]
 8007598:	607a      	str	r2, [r7, #4]
 800759a:	603b      	str	r3, [r7, #0]
 800759c:	4603      	mov	r3, r0
 800759e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80075a0:	7bfb      	ldrb	r3, [r7, #15]
 80075a2:	4a0a      	ldr	r2, [pc, #40]	@ (80075cc <disk_write+0x3c>)
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	4413      	add	r3, r2
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	68dc      	ldr	r4, [r3, #12]
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
 80075ae:	4a07      	ldr	r2, [pc, #28]	@ (80075cc <disk_write+0x3c>)
 80075b0:	4413      	add	r3, r2
 80075b2:	7a18      	ldrb	r0, [r3, #8]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	68b9      	ldr	r1, [r7, #8]
 80075ba:	47a0      	blx	r4
 80075bc:	4603      	mov	r3, r0
 80075be:	75fb      	strb	r3, [r7, #23]
  return res;
 80075c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	371c      	adds	r7, #28
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd90      	pop	{r4, r7, pc}
 80075ca:	bf00      	nop
 80075cc:	200027f4 	.word	0x200027f4

080075d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	4603      	mov	r3, r0
 80075d8:	603a      	str	r2, [r7, #0]
 80075da:	71fb      	strb	r3, [r7, #7]
 80075dc:	460b      	mov	r3, r1
 80075de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80075e0:	79fb      	ldrb	r3, [r7, #7]
 80075e2:	4a09      	ldr	r2, [pc, #36]	@ (8007608 <disk_ioctl+0x38>)
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	79fa      	ldrb	r2, [r7, #7]
 80075ee:	4906      	ldr	r1, [pc, #24]	@ (8007608 <disk_ioctl+0x38>)
 80075f0:	440a      	add	r2, r1
 80075f2:	7a10      	ldrb	r0, [r2, #8]
 80075f4:	79b9      	ldrb	r1, [r7, #6]
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	4798      	blx	r3
 80075fa:	4603      	mov	r3, r0
 80075fc:	73fb      	strb	r3, [r7, #15]
  return res;
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	200027f4 	.word	0x200027f4

0800760c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3301      	adds	r3, #1
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800761c:	89fb      	ldrh	r3, [r7, #14]
 800761e:	021b      	lsls	r3, r3, #8
 8007620:	b21a      	sxth	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	b21b      	sxth	r3, r3
 8007628:	4313      	orrs	r3, r2
 800762a:	b21b      	sxth	r3, r3
 800762c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800762e:	89fb      	ldrh	r3, [r7, #14]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3714      	adds	r7, #20
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	3303      	adds	r3, #3
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	021b      	lsls	r3, r3, #8
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	3202      	adds	r2, #2
 8007654:	7812      	ldrb	r2, [r2, #0]
 8007656:	4313      	orrs	r3, r2
 8007658:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	021b      	lsls	r3, r3, #8
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	3201      	adds	r2, #1
 8007662:	7812      	ldrb	r2, [r2, #0]
 8007664:	4313      	orrs	r3, r2
 8007666:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	021b      	lsls	r3, r3, #8
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	7812      	ldrb	r2, [r2, #0]
 8007670:	4313      	orrs	r3, r2
 8007672:	60fb      	str	r3, [r7, #12]
	return rv;
 8007674:	68fb      	ldr	r3, [r7, #12]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8007682:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007686:	b09d      	sub	sp, #116	@ 0x74
 8007688:	af00      	add	r7, sp, #0
 800768a:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 800768c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800768e:	3307      	adds	r3, #7
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2200      	movs	r2, #0
 8007696:	469a      	mov	sl, r3
 8007698:	4693      	mov	fp, r2
 800769a:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 800769e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80076a2:	f04f 0000 	mov.w	r0, #0
 80076a6:	f04f 0100 	mov.w	r1, #0
 80076aa:	0219      	lsls	r1, r3, #8
 80076ac:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80076b0:	0210      	lsls	r0, r2, #8
 80076b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076b4:	3306      	adds	r3, #6
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2200      	movs	r2, #0
 80076bc:	461c      	mov	r4, r3
 80076be:	4615      	mov	r5, r2
 80076c0:	ea40 0804 	orr.w	r8, r0, r4
 80076c4:	ea41 0905 	orr.w	r9, r1, r5
 80076c8:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 80076cc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80076d0:	f04f 0000 	mov.w	r0, #0
 80076d4:	f04f 0100 	mov.w	r1, #0
 80076d8:	0219      	lsls	r1, r3, #8
 80076da:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80076de:	0210      	lsls	r0, r2, #8
 80076e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076e2:	3305      	adds	r3, #5
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2200      	movs	r2, #0
 80076ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076ec:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80076ee:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80076f2:	4623      	mov	r3, r4
 80076f4:	4303      	orrs	r3, r0
 80076f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076f8:	462b      	mov	r3, r5
 80076fa:	430b      	orrs	r3, r1
 80076fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076fe:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8007702:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 8007706:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800770a:	f04f 0000 	mov.w	r0, #0
 800770e:	f04f 0100 	mov.w	r1, #0
 8007712:	0219      	lsls	r1, r3, #8
 8007714:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8007718:	0210      	lsls	r0, r2, #8
 800771a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800771c:	3304      	adds	r3, #4
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2200      	movs	r2, #0
 8007724:	653b      	str	r3, [r7, #80]	@ 0x50
 8007726:	657a      	str	r2, [r7, #84]	@ 0x54
 8007728:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800772c:	4623      	mov	r3, r4
 800772e:	4303      	orrs	r3, r0
 8007730:	623b      	str	r3, [r7, #32]
 8007732:	462b      	mov	r3, r5
 8007734:	430b      	orrs	r3, r1
 8007736:	627b      	str	r3, [r7, #36]	@ 0x24
 8007738:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800773c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 8007740:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8007744:	f04f 0000 	mov.w	r0, #0
 8007748:	f04f 0100 	mov.w	r1, #0
 800774c:	0219      	lsls	r1, r3, #8
 800774e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8007752:	0210      	lsls	r0, r2, #8
 8007754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007756:	3303      	adds	r3, #3
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2200      	movs	r2, #0
 800775e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007760:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007762:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8007766:	4623      	mov	r3, r4
 8007768:	4303      	orrs	r3, r0
 800776a:	61bb      	str	r3, [r7, #24]
 800776c:	462b      	mov	r3, r5
 800776e:	430b      	orrs	r3, r1
 8007770:	61fb      	str	r3, [r7, #28]
 8007772:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8007776:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 800777a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800777e:	f04f 0000 	mov.w	r0, #0
 8007782:	f04f 0100 	mov.w	r1, #0
 8007786:	0219      	lsls	r1, r3, #8
 8007788:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800778c:	0210      	lsls	r0, r2, #8
 800778e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007790:	3302      	adds	r3, #2
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2200      	movs	r2, #0
 8007798:	643b      	str	r3, [r7, #64]	@ 0x40
 800779a:	647a      	str	r2, [r7, #68]	@ 0x44
 800779c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80077a0:	4623      	mov	r3, r4
 80077a2:	4303      	orrs	r3, r0
 80077a4:	613b      	str	r3, [r7, #16]
 80077a6:	462b      	mov	r3, r5
 80077a8:	430b      	orrs	r3, r1
 80077aa:	617b      	str	r3, [r7, #20]
 80077ac:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80077b0:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 80077b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80077b8:	f04f 0200 	mov.w	r2, #0
 80077bc:	f04f 0300 	mov.w	r3, #0
 80077c0:	020b      	lsls	r3, r1, #8
 80077c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077c6:	0202      	lsls	r2, r0, #8
 80077c8:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80077ca:	3101      	adds	r1, #1
 80077cc:	7809      	ldrb	r1, [r1, #0]
 80077ce:	b2c9      	uxtb	r1, r1
 80077d0:	2000      	movs	r0, #0
 80077d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80077d4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80077d6:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80077da:	4621      	mov	r1, r4
 80077dc:	4311      	orrs	r1, r2
 80077de:	60b9      	str	r1, [r7, #8]
 80077e0:	4629      	mov	r1, r5
 80077e2:	4319      	orrs	r1, r3
 80077e4:	60f9      	str	r1, [r7, #12]
 80077e6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80077ea:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 80077ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80077f2:	f04f 0200 	mov.w	r2, #0
 80077f6:	f04f 0300 	mov.w	r3, #0
 80077fa:	020b      	lsls	r3, r1, #8
 80077fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007800:	0202      	lsls	r2, r0, #8
 8007802:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007804:	7809      	ldrb	r1, [r1, #0]
 8007806:	b2c9      	uxtb	r1, r1
 8007808:	2000      	movs	r0, #0
 800780a:	6339      	str	r1, [r7, #48]	@ 0x30
 800780c:	6378      	str	r0, [r7, #52]	@ 0x34
 800780e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007812:	4621      	mov	r1, r4
 8007814:	4311      	orrs	r1, r2
 8007816:	6039      	str	r1, [r7, #0]
 8007818:	4629      	mov	r1, r5
 800781a:	4319      	orrs	r1, r3
 800781c:	6079      	str	r1, [r7, #4]
 800781e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007822:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 8007826:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 800782a:	4610      	mov	r0, r2
 800782c:	4619      	mov	r1, r3
 800782e:	3774      	adds	r7, #116	@ 0x74
 8007830:	46bd      	mov	sp, r7
 8007832:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007836:	4770      	bx	lr

08007838 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	460b      	mov	r3, r1
 8007842:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	1c5a      	adds	r2, r3, #1
 8007848:	607a      	str	r2, [r7, #4]
 800784a:	887a      	ldrh	r2, [r7, #2]
 800784c:	b2d2      	uxtb	r2, r2
 800784e:	701a      	strb	r2, [r3, #0]
 8007850:	887b      	ldrh	r3, [r7, #2]
 8007852:	0a1b      	lsrs	r3, r3, #8
 8007854:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	1c5a      	adds	r2, r3, #1
 800785a:	607a      	str	r2, [r7, #4]
 800785c:	887a      	ldrh	r2, [r7, #2]
 800785e:	b2d2      	uxtb	r2, r2
 8007860:	701a      	strb	r2, [r3, #0]
}
 8007862:	bf00      	nop
 8007864:	370c      	adds	r7, #12
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800786e:	b480      	push	{r7}
 8007870:	b083      	sub	sp, #12
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	1c5a      	adds	r2, r3, #1
 800787c:	607a      	str	r2, [r7, #4]
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	b2d2      	uxtb	r2, r2
 8007882:	701a      	strb	r2, [r3, #0]
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	0a1b      	lsrs	r3, r3, #8
 8007888:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	1c5a      	adds	r2, r3, #1
 800788e:	607a      	str	r2, [r7, #4]
 8007890:	683a      	ldr	r2, [r7, #0]
 8007892:	b2d2      	uxtb	r2, r2
 8007894:	701a      	strb	r2, [r3, #0]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	0a1b      	lsrs	r3, r3, #8
 800789a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	607a      	str	r2, [r7, #4]
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	b2d2      	uxtb	r2, r2
 80078a6:	701a      	strb	r2, [r3, #0]
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	0a1b      	lsrs	r3, r3, #8
 80078ac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	1c5a      	adds	r2, r3, #1
 80078b2:	607a      	str	r2, [r7, #4]
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	b2d2      	uxtb	r2, r2
 80078b8:	701a      	strb	r2, [r3, #0]
}
 80078ba:	bf00      	nop
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 80078c6:	b480      	push	{r7}
 80078c8:	b085      	sub	sp, #20
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	60f8      	str	r0, [r7, #12]
 80078ce:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	1c5a      	adds	r2, r3, #1
 80078d6:	60fa      	str	r2, [r7, #12]
 80078d8:	783a      	ldrb	r2, [r7, #0]
 80078da:	701a      	strb	r2, [r3, #0]
 80078dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078e0:	f04f 0200 	mov.w	r2, #0
 80078e4:	f04f 0300 	mov.w	r3, #0
 80078e8:	0a02      	lsrs	r2, r0, #8
 80078ea:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80078ee:	0a0b      	lsrs	r3, r1, #8
 80078f0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	1c5a      	adds	r2, r3, #1
 80078f8:	60fa      	str	r2, [r7, #12]
 80078fa:	783a      	ldrb	r2, [r7, #0]
 80078fc:	701a      	strb	r2, [r3, #0]
 80078fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007902:	f04f 0200 	mov.w	r2, #0
 8007906:	f04f 0300 	mov.w	r3, #0
 800790a:	0a02      	lsrs	r2, r0, #8
 800790c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007910:	0a0b      	lsrs	r3, r1, #8
 8007912:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	1c5a      	adds	r2, r3, #1
 800791a:	60fa      	str	r2, [r7, #12]
 800791c:	783a      	ldrb	r2, [r7, #0]
 800791e:	701a      	strb	r2, [r3, #0]
 8007920:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007924:	f04f 0200 	mov.w	r2, #0
 8007928:	f04f 0300 	mov.w	r3, #0
 800792c:	0a02      	lsrs	r2, r0, #8
 800792e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007932:	0a0b      	lsrs	r3, r1, #8
 8007934:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	1c5a      	adds	r2, r3, #1
 800793c:	60fa      	str	r2, [r7, #12]
 800793e:	783a      	ldrb	r2, [r7, #0]
 8007940:	701a      	strb	r2, [r3, #0]
 8007942:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007946:	f04f 0200 	mov.w	r2, #0
 800794a:	f04f 0300 	mov.w	r3, #0
 800794e:	0a02      	lsrs	r2, r0, #8
 8007950:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007954:	0a0b      	lsrs	r3, r1, #8
 8007956:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	1c5a      	adds	r2, r3, #1
 800795e:	60fa      	str	r2, [r7, #12]
 8007960:	783a      	ldrb	r2, [r7, #0]
 8007962:	701a      	strb	r2, [r3, #0]
 8007964:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007968:	f04f 0200 	mov.w	r2, #0
 800796c:	f04f 0300 	mov.w	r3, #0
 8007970:	0a02      	lsrs	r2, r0, #8
 8007972:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007976:	0a0b      	lsrs	r3, r1, #8
 8007978:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	1c5a      	adds	r2, r3, #1
 8007980:	60fa      	str	r2, [r7, #12]
 8007982:	783a      	ldrb	r2, [r7, #0]
 8007984:	701a      	strb	r2, [r3, #0]
 8007986:	e9d7 0100 	ldrd	r0, r1, [r7]
 800798a:	f04f 0200 	mov.w	r2, #0
 800798e:	f04f 0300 	mov.w	r3, #0
 8007992:	0a02      	lsrs	r2, r0, #8
 8007994:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007998:	0a0b      	lsrs	r3, r1, #8
 800799a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	1c5a      	adds	r2, r3, #1
 80079a2:	60fa      	str	r2, [r7, #12]
 80079a4:	783a      	ldrb	r2, [r7, #0]
 80079a6:	701a      	strb	r2, [r3, #0]
 80079a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079ac:	f04f 0200 	mov.w	r2, #0
 80079b0:	f04f 0300 	mov.w	r3, #0
 80079b4:	0a02      	lsrs	r2, r0, #8
 80079b6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80079ba:	0a0b      	lsrs	r3, r1, #8
 80079bc:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	1c5a      	adds	r2, r3, #1
 80079c4:	60fa      	str	r2, [r7, #12]
 80079c6:	783a      	ldrb	r2, [r7, #0]
 80079c8:	701a      	strb	r2, [r3, #0]
}
 80079ca:	bf00      	nop
 80079cc:	3714      	adds	r7, #20
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80079d6:	b480      	push	{r7}
 80079d8:	b087      	sub	sp, #28
 80079da:	af00      	add	r7, sp, #0
 80079dc:	60f8      	str	r0, [r7, #12]
 80079de:	60b9      	str	r1, [r7, #8]
 80079e0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00d      	beq.n	8007a0c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	1c53      	adds	r3, r2, #1
 80079f4:	613b      	str	r3, [r7, #16]
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	1c59      	adds	r1, r3, #1
 80079fa:	6179      	str	r1, [r7, #20]
 80079fc:	7812      	ldrb	r2, [r2, #0]
 80079fe:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	3b01      	subs	r3, #1
 8007a04:	607b      	str	r3, [r7, #4]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1f1      	bne.n	80079f0 <mem_cpy+0x1a>
	}
}
 8007a0c:	bf00      	nop
 8007a0e:	371c      	adds	r7, #28
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	1c5a      	adds	r2, r3, #1
 8007a2c:	617a      	str	r2, [r7, #20]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	b2d2      	uxtb	r2, r2
 8007a32:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	3b01      	subs	r3, #1
 8007a38:	607b      	str	r3, [r7, #4]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1f3      	bne.n	8007a28 <mem_set+0x10>
}
 8007a40:	bf00      	nop
 8007a42:	bf00      	nop
 8007a44:	371c      	adds	r7, #28
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007a4e:	b480      	push	{r7}
 8007a50:	b089      	sub	sp, #36	@ 0x24
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	60f8      	str	r0, [r7, #12]
 8007a56:	60b9      	str	r1, [r7, #8]
 8007a58:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	61fb      	str	r3, [r7, #28]
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007a62:	2300      	movs	r3, #0
 8007a64:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	1c5a      	adds	r2, r3, #1
 8007a6a:	61fa      	str	r2, [r7, #28]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	1c5a      	adds	r2, r3, #1
 8007a74:	61ba      	str	r2, [r7, #24]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	1acb      	subs	r3, r1, r3
 8007a7a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	607b      	str	r3, [r7, #4]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d002      	beq.n	8007a8e <mem_cmp+0x40>
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d0eb      	beq.n	8007a66 <mem_cmp+0x18>

	return r;
 8007a8e:	697b      	ldr	r3, [r7, #20]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3724      	adds	r7, #36	@ 0x24
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007aa6:	e002      	b.n	8007aae <chk_chr+0x12>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	607b      	str	r3, [r7, #4]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d005      	beq.n	8007ac2 <chk_chr+0x26>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	461a      	mov	r2, r3
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d1f2      	bne.n	8007aa8 <chk_chr+0xc>
	return *str;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	370c      	adds	r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b082      	sub	sp, #8
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d009      	beq.n	8007af4 <lock_fs+0x22>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f004 fd2b 	bl	800c540 <ff_req_grant>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d001      	beq.n	8007af4 <lock_fs+0x22>
 8007af0:	2301      	movs	r3, #1
 8007af2:	e000      	b.n	8007af6 <lock_fs+0x24>
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b082      	sub	sp, #8
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	460b      	mov	r3, r1
 8007b08:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00d      	beq.n	8007b2c <unlock_fs+0x2e>
 8007b10:	78fb      	ldrb	r3, [r7, #3]
 8007b12:	2b0c      	cmp	r3, #12
 8007b14:	d00a      	beq.n	8007b2c <unlock_fs+0x2e>
 8007b16:	78fb      	ldrb	r3, [r7, #3]
 8007b18:	2b0b      	cmp	r3, #11
 8007b1a:	d007      	beq.n	8007b2c <unlock_fs+0x2e>
 8007b1c:	78fb      	ldrb	r3, [r7, #3]
 8007b1e:	2b0f      	cmp	r3, #15
 8007b20:	d004      	beq.n	8007b2c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f004 fd1f 	bl	800c56a <ff_rel_grant>
	}
}
 8007b2c:	bf00      	nop
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007b3e:	2300      	movs	r3, #0
 8007b40:	60bb      	str	r3, [r7, #8]
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	60fb      	str	r3, [r7, #12]
 8007b46:	e029      	b.n	8007b9c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007b48:	4a27      	ldr	r2, [pc, #156]	@ (8007be8 <chk_lock+0xb4>)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	011b      	lsls	r3, r3, #4
 8007b4e:	4413      	add	r3, r2
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d01d      	beq.n	8007b92 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007b56:	4a24      	ldr	r2, [pc, #144]	@ (8007be8 <chk_lock+0xb4>)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	011b      	lsls	r3, r3, #4
 8007b5c:	4413      	add	r3, r2
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d116      	bne.n	8007b96 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007b68:	4a1f      	ldr	r2, [pc, #124]	@ (8007be8 <chk_lock+0xb4>)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	011b      	lsls	r3, r3, #4
 8007b6e:	4413      	add	r3, r2
 8007b70:	3304      	adds	r3, #4
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d10c      	bne.n	8007b96 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007b7c:	4a1a      	ldr	r2, [pc, #104]	@ (8007be8 <chk_lock+0xb4>)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	011b      	lsls	r3, r3, #4
 8007b82:	4413      	add	r3, r2
 8007b84:	3308      	adds	r3, #8
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d102      	bne.n	8007b96 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007b90:	e007      	b.n	8007ba2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007b92:	2301      	movs	r3, #1
 8007b94:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	60fb      	str	r3, [r7, #12]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d9d2      	bls.n	8007b48 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d109      	bne.n	8007bbc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d102      	bne.n	8007bb4 <chk_lock+0x80>
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d101      	bne.n	8007bb8 <chk_lock+0x84>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	e010      	b.n	8007bda <chk_lock+0xa6>
 8007bb8:	2312      	movs	r3, #18
 8007bba:	e00e      	b.n	8007bda <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d108      	bne.n	8007bd4 <chk_lock+0xa0>
 8007bc2:	4a09      	ldr	r2, [pc, #36]	@ (8007be8 <chk_lock+0xb4>)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	011b      	lsls	r3, r3, #4
 8007bc8:	4413      	add	r3, r2
 8007bca:	330c      	adds	r3, #12
 8007bcc:	881b      	ldrh	r3, [r3, #0]
 8007bce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bd2:	d101      	bne.n	8007bd8 <chk_lock+0xa4>
 8007bd4:	2310      	movs	r3, #16
 8007bd6:	e000      	b.n	8007bda <chk_lock+0xa6>
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	200027d4 	.word	0x200027d4

08007bec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	607b      	str	r3, [r7, #4]
 8007bf6:	e002      	b.n	8007bfe <enq_lock+0x12>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	607b      	str	r3, [r7, #4]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d806      	bhi.n	8007c12 <enq_lock+0x26>
 8007c04:	4a09      	ldr	r2, [pc, #36]	@ (8007c2c <enq_lock+0x40>)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	011b      	lsls	r3, r3, #4
 8007c0a:	4413      	add	r3, r2
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1f2      	bne.n	8007bf8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	bf14      	ite	ne
 8007c18:	2301      	movne	r3, #1
 8007c1a:	2300      	moveq	r3, #0
 8007c1c:	b2db      	uxtb	r3, r3
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	200027d4 	.word	0x200027d4

08007c30 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	60fb      	str	r3, [r7, #12]
 8007c3e:	e01f      	b.n	8007c80 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007c40:	4a41      	ldr	r2, [pc, #260]	@ (8007d48 <inc_lock+0x118>)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	011b      	lsls	r3, r3, #4
 8007c46:	4413      	add	r3, r2
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d113      	bne.n	8007c7a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007c52:	4a3d      	ldr	r2, [pc, #244]	@ (8007d48 <inc_lock+0x118>)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	011b      	lsls	r3, r3, #4
 8007c58:	4413      	add	r3, r2
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d109      	bne.n	8007c7a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007c66:	4a38      	ldr	r2, [pc, #224]	@ (8007d48 <inc_lock+0x118>)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	011b      	lsls	r3, r3, #4
 8007c6c:	4413      	add	r3, r2
 8007c6e:	3308      	adds	r3, #8
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d006      	beq.n	8007c88 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	60fb      	str	r3, [r7, #12]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d9dc      	bls.n	8007c40 <inc_lock+0x10>
 8007c86:	e000      	b.n	8007c8a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007c88:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d132      	bne.n	8007cf6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007c90:	2300      	movs	r3, #0
 8007c92:	60fb      	str	r3, [r7, #12]
 8007c94:	e002      	b.n	8007c9c <inc_lock+0x6c>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	60fb      	str	r3, [r7, #12]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d806      	bhi.n	8007cb0 <inc_lock+0x80>
 8007ca2:	4a29      	ldr	r2, [pc, #164]	@ (8007d48 <inc_lock+0x118>)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	011b      	lsls	r3, r3, #4
 8007ca8:	4413      	add	r3, r2
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1f2      	bne.n	8007c96 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d101      	bne.n	8007cba <inc_lock+0x8a>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	e040      	b.n	8007d3c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	4922      	ldr	r1, [pc, #136]	@ (8007d48 <inc_lock+0x118>)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	011b      	lsls	r3, r3, #4
 8007cc4:	440b      	add	r3, r1
 8007cc6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689a      	ldr	r2, [r3, #8]
 8007ccc:	491e      	ldr	r1, [pc, #120]	@ (8007d48 <inc_lock+0x118>)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	011b      	lsls	r3, r3, #4
 8007cd2:	440b      	add	r3, r1
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cdc:	491a      	ldr	r1, [pc, #104]	@ (8007d48 <inc_lock+0x118>)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	011b      	lsls	r3, r3, #4
 8007ce2:	440b      	add	r3, r1
 8007ce4:	3308      	adds	r3, #8
 8007ce6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007ce8:	4a17      	ldr	r2, [pc, #92]	@ (8007d48 <inc_lock+0x118>)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	011b      	lsls	r3, r3, #4
 8007cee:	4413      	add	r3, r2
 8007cf0:	330c      	adds	r3, #12
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d009      	beq.n	8007d10 <inc_lock+0xe0>
 8007cfc:	4a12      	ldr	r2, [pc, #72]	@ (8007d48 <inc_lock+0x118>)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	011b      	lsls	r3, r3, #4
 8007d02:	4413      	add	r3, r2
 8007d04:	330c      	adds	r3, #12
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d001      	beq.n	8007d10 <inc_lock+0xe0>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	e015      	b.n	8007d3c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d108      	bne.n	8007d28 <inc_lock+0xf8>
 8007d16:	4a0c      	ldr	r2, [pc, #48]	@ (8007d48 <inc_lock+0x118>)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	011b      	lsls	r3, r3, #4
 8007d1c:	4413      	add	r3, r2
 8007d1e:	330c      	adds	r3, #12
 8007d20:	881b      	ldrh	r3, [r3, #0]
 8007d22:	3301      	adds	r3, #1
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	e001      	b.n	8007d2c <inc_lock+0xfc>
 8007d28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d2c:	4906      	ldr	r1, [pc, #24]	@ (8007d48 <inc_lock+0x118>)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	011b      	lsls	r3, r3, #4
 8007d32:	440b      	add	r3, r1
 8007d34:	330c      	adds	r3, #12
 8007d36:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	3301      	adds	r3, #1
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	200027d4 	.word	0x200027d4

08007d4c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	3b01      	subs	r3, #1
 8007d58:	607b      	str	r3, [r7, #4]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d825      	bhi.n	8007dac <dec_lock+0x60>
		n = Files[i].ctr;
 8007d60:	4a17      	ldr	r2, [pc, #92]	@ (8007dc0 <dec_lock+0x74>)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	011b      	lsls	r3, r3, #4
 8007d66:	4413      	add	r3, r2
 8007d68:	330c      	adds	r3, #12
 8007d6a:	881b      	ldrh	r3, [r3, #0]
 8007d6c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007d6e:	89fb      	ldrh	r3, [r7, #14]
 8007d70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d74:	d101      	bne.n	8007d7a <dec_lock+0x2e>
 8007d76:	2300      	movs	r3, #0
 8007d78:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007d7a:	89fb      	ldrh	r3, [r7, #14]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d002      	beq.n	8007d86 <dec_lock+0x3a>
 8007d80:	89fb      	ldrh	r3, [r7, #14]
 8007d82:	3b01      	subs	r3, #1
 8007d84:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007d86:	4a0e      	ldr	r2, [pc, #56]	@ (8007dc0 <dec_lock+0x74>)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	011b      	lsls	r3, r3, #4
 8007d8c:	4413      	add	r3, r2
 8007d8e:	330c      	adds	r3, #12
 8007d90:	89fa      	ldrh	r2, [r7, #14]
 8007d92:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007d94:	89fb      	ldrh	r3, [r7, #14]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d105      	bne.n	8007da6 <dec_lock+0x5a>
 8007d9a:	4a09      	ldr	r2, [pc, #36]	@ (8007dc0 <dec_lock+0x74>)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	011b      	lsls	r3, r3, #4
 8007da0:	4413      	add	r3, r2
 8007da2:	2200      	movs	r2, #0
 8007da4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	737b      	strb	r3, [r7, #13]
 8007daa:	e001      	b.n	8007db0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007dac:	2302      	movs	r3, #2
 8007dae:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007db0:	7b7b      	ldrb	r3, [r7, #13]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3714      	adds	r7, #20
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	200027d4 	.word	0x200027d4

08007dc4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60fb      	str	r3, [r7, #12]
 8007dd0:	e010      	b.n	8007df4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007dd2:	4a0d      	ldr	r2, [pc, #52]	@ (8007e08 <clear_lock+0x44>)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	011b      	lsls	r3, r3, #4
 8007dd8:	4413      	add	r3, r2
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d105      	bne.n	8007dee <clear_lock+0x2a>
 8007de2:	4a09      	ldr	r2, [pc, #36]	@ (8007e08 <clear_lock+0x44>)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	011b      	lsls	r3, r3, #4
 8007de8:	4413      	add	r3, r2
 8007dea:	2200      	movs	r2, #0
 8007dec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	3301      	adds	r3, #1
 8007df2:	60fb      	str	r3, [r7, #12]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d9eb      	bls.n	8007dd2 <clear_lock+0xe>
	}
}
 8007dfa:	bf00      	nop
 8007dfc:	bf00      	nop
 8007dfe:	3714      	adds	r7, #20
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr
 8007e08:	200027d4 	.word	0x200027d4

08007e0c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007e14:	2300      	movs	r3, #0
 8007e16:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	78db      	ldrb	r3, [r3, #3]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d034      	beq.n	8007e8a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e24:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	7858      	ldrb	r0, [r3, #1]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8007e30:	2301      	movs	r3, #1
 8007e32:	697a      	ldr	r2, [r7, #20]
 8007e34:	f7ff fbac 	bl	8007590 <disk_write>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d002      	beq.n	8007e44 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	73fb      	strb	r3, [r7, #15]
 8007e42:	e022      	b.n	8007e8a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	1ad2      	subs	r2, r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d217      	bcs.n	8007e8a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	789b      	ldrb	r3, [r3, #2]
 8007e5e:	613b      	str	r3, [r7, #16]
 8007e60:	e010      	b.n	8007e84 <sync_window+0x78>
					wsect += fs->fsize;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	4413      	add	r3, r2
 8007e6a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	7858      	ldrb	r0, [r3, #1]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8007e76:	2301      	movs	r3, #1
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	f7ff fb89 	bl	8007590 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	3b01      	subs	r3, #1
 8007e82:	613b      	str	r3, [r7, #16]
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d8eb      	bhi.n	8007e62 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3718      	adds	r7, #24
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d01b      	beq.n	8007ee4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7ff ffad 	bl	8007e0c <sync_window>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d113      	bne.n	8007ee4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	7858      	ldrb	r0, [r3, #1]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	683a      	ldr	r2, [r7, #0]
 8007eca:	f7ff fb41 	bl	8007550 <disk_read>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d004      	beq.n	8007ede <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	683a      	ldr	r2, [r7, #0]
 8007ee2:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
	}
	return res;
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
	...

08007ef0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff ff87 	bl	8007e0c <sync_window>
 8007efe:	4603      	mov	r3, r0
 8007f00:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d159      	bne.n	8007fbc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	2b03      	cmp	r3, #3
 8007f0e:	d149      	bne.n	8007fa4 <sync_fs+0xb4>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	791b      	ldrb	r3, [r3, #4]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d145      	bne.n	8007fa4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	899b      	ldrh	r3, [r3, #12]
 8007f22:	461a      	mov	r2, r3
 8007f24:	2100      	movs	r1, #0
 8007f26:	f7ff fd77 	bl	8007a18 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	3340      	adds	r3, #64	@ 0x40
 8007f2e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007f32:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7ff fc7e 	bl	8007838 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	3340      	adds	r3, #64	@ 0x40
 8007f40:	4921      	ldr	r1, [pc, #132]	@ (8007fc8 <sync_fs+0xd8>)
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7ff fc93 	bl	800786e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	3340      	adds	r3, #64	@ 0x40
 8007f4c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007f50:	491e      	ldr	r1, [pc, #120]	@ (8007fcc <sync_fs+0xdc>)
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7ff fc8b 	bl	800786e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	3340      	adds	r3, #64	@ 0x40
 8007f5c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a1b      	ldr	r3, [r3, #32]
 8007f64:	4619      	mov	r1, r3
 8007f66:	4610      	mov	r0, r2
 8007f68:	f7ff fc81 	bl	800786e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	3340      	adds	r3, #64	@ 0x40
 8007f70:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	69db      	ldr	r3, [r3, #28]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	4610      	mov	r0, r2
 8007f7c:	f7ff fc77 	bl	800786e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f84:	1c5a      	adds	r2, r3, #1
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	63da      	str	r2, [r3, #60]	@ 0x3c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	7858      	ldrb	r0, [r3, #1]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f98:	2301      	movs	r3, #1
 8007f9a:	f7ff faf9 	bl	8007590 <disk_write>
			fs->fsi_flag = 0;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	785b      	ldrb	r3, [r3, #1]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	2100      	movs	r1, #0
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7ff fb0f 	bl	80075d0 <disk_ioctl>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <sync_fs+0xcc>
 8007fb8:	2301      	movs	r3, #1
 8007fba:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	41615252 	.word	0x41615252
 8007fcc:	61417272 	.word	0x61417272

08007fd0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	3b02      	subs	r3, #2
 8007fde:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe4:	3b02      	subs	r3, #2
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d301      	bcc.n	8007ff0 <clust2sect+0x20>
 8007fec:	2300      	movs	r3, #0
 8007fee:	e008      	b.n	8008002 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	895b      	ldrh	r3, [r3, #10]
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	fb03 f202 	mul.w	r2, r3, r2
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008000:	4413      	add	r3, r2
}
 8008002:	4618      	mov	r0, r3
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
	...

08008010 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008010:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008014:	b088      	sub	sp, #32
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d904      	bls.n	8008032 <get_fat+0x22>
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	429a      	cmp	r2, r3
 8008030:	d302      	bcc.n	8008038 <get_fat+0x28>
		val = 1;	/* Internal error */
 8008032:	2301      	movs	r3, #1
 8008034:	61fb      	str	r3, [r7, #28]
 8008036:	e139      	b.n	80082ac <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008038:	f04f 33ff 	mov.w	r3, #4294967295
 800803c:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	3b01      	subs	r3, #1
 8008044:	2b03      	cmp	r3, #3
 8008046:	f200 8125 	bhi.w	8008294 <get_fat+0x284>
 800804a:	a201      	add	r2, pc, #4	@ (adr r2, 8008050 <get_fat+0x40>)
 800804c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008050:	08008061 	.word	0x08008061
 8008054:	0800810d 	.word	0x0800810d
 8008058:	08008159 	.word	0x08008159
 800805c:	080081a9 	.word	0x080081a9
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	60fb      	str	r3, [r7, #12]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	085b      	lsrs	r3, r3, #1
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	4413      	add	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	899b      	ldrh	r3, [r3, #12]
 8008076:	4619      	mov	r1, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	fbb3 f3f1 	udiv	r3, r3, r1
 800807e:	4413      	add	r3, r2
 8008080:	4619      	mov	r1, r3
 8008082:	69b8      	ldr	r0, [r7, #24]
 8008084:	f7ff ff06 	bl	8007e94 <move_window>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	f040 8105 	bne.w	800829a <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	1c5a      	adds	r2, r3, #1
 8008094:	60fa      	str	r2, [r7, #12]
 8008096:	69ba      	ldr	r2, [r7, #24]
 8008098:	8992      	ldrh	r2, [r2, #12]
 800809a:	fbb3 f1f2 	udiv	r1, r3, r2
 800809e:	fb01 f202 	mul.w	r2, r1, r2
 80080a2:	1a9b      	subs	r3, r3, r2
 80080a4:	69ba      	ldr	r2, [r7, #24]
 80080a6:	4413      	add	r3, r2
 80080a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080ac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	899b      	ldrh	r3, [r3, #12]
 80080b6:	4619      	mov	r1, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80080be:	4413      	add	r3, r2
 80080c0:	4619      	mov	r1, r3
 80080c2:	69b8      	ldr	r0, [r7, #24]
 80080c4:	f7ff fee6 	bl	8007e94 <move_window>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f040 80e7 	bne.w	800829e <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	899b      	ldrh	r3, [r3, #12]
 80080d4:	461a      	mov	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80080dc:	fb01 f202 	mul.w	r2, r1, r2
 80080e0:	1a9b      	subs	r3, r3, r2
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	4413      	add	r3, r2
 80080e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080ea:	021b      	lsls	r3, r3, #8
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	f003 0301 	and.w	r3, r3, #1
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d002      	beq.n	8008102 <get_fat+0xf2>
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	091b      	lsrs	r3, r3, #4
 8008100:	e002      	b.n	8008108 <get_fat+0xf8>
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008108:	61fb      	str	r3, [r7, #28]
			break;
 800810a:	e0cf      	b.n	80082ac <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	899b      	ldrh	r3, [r3, #12]
 8008114:	085b      	lsrs	r3, r3, #1
 8008116:	b29b      	uxth	r3, r3
 8008118:	4619      	mov	r1, r3
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008120:	4413      	add	r3, r2
 8008122:	4619      	mov	r1, r3
 8008124:	69b8      	ldr	r0, [r7, #24]
 8008126:	f7ff feb5 	bl	8007e94 <move_window>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	f040 80b8 	bne.w	80082a2 <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	005b      	lsls	r3, r3, #1
 800813c:	69ba      	ldr	r2, [r7, #24]
 800813e:	8992      	ldrh	r2, [r2, #12]
 8008140:	fbb3 f0f2 	udiv	r0, r3, r2
 8008144:	fb00 f202 	mul.w	r2, r0, r2
 8008148:	1a9b      	subs	r3, r3, r2
 800814a:	440b      	add	r3, r1
 800814c:	4618      	mov	r0, r3
 800814e:	f7ff fa5d 	bl	800760c <ld_word>
 8008152:	4603      	mov	r3, r0
 8008154:	61fb      	str	r3, [r7, #28]
			break;
 8008156:	e0a9      	b.n	80082ac <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	899b      	ldrh	r3, [r3, #12]
 8008160:	089b      	lsrs	r3, r3, #2
 8008162:	b29b      	uxth	r3, r3
 8008164:	4619      	mov	r1, r3
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	fbb3 f3f1 	udiv	r3, r3, r1
 800816c:	4413      	add	r3, r2
 800816e:	4619      	mov	r1, r3
 8008170:	69b8      	ldr	r0, [r7, #24]
 8008172:	f7ff fe8f 	bl	8007e94 <move_window>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	f040 8094 	bne.w	80082a6 <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	69ba      	ldr	r2, [r7, #24]
 800818a:	8992      	ldrh	r2, [r2, #12]
 800818c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008190:	fb00 f202 	mul.w	r2, r0, r2
 8008194:	1a9b      	subs	r3, r3, r2
 8008196:	440b      	add	r3, r1
 8008198:	4618      	mov	r0, r3
 800819a:	f7ff fa4f 	bl	800763c <ld_dword>
 800819e:	4603      	mov	r3, r0
 80081a0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80081a4:	61fb      	str	r3, [r7, #28]
			break;
 80081a6:	e081      	b.n	80082ac <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	d070      	beq.n	8008294 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80081c2:	1e54      	subs	r4, r2, #1
 80081c4:	f143 35ff 	adc.w	r5, r3, #4294967295
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	899b      	ldrh	r3, [r3, #12]
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	2200      	movs	r2, #0
 80081d0:	4698      	mov	r8, r3
 80081d2:	4691      	mov	r9, r2
 80081d4:	4642      	mov	r2, r8
 80081d6:	464b      	mov	r3, r9
 80081d8:	4620      	mov	r0, r4
 80081da:	4629      	mov	r1, r5
 80081dc:	f7f8 f800 	bl	80001e0 <__aeabi_uldivmod>
 80081e0:	4602      	mov	r2, r0
 80081e2:	460b      	mov	r3, r1
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	895b      	ldrh	r3, [r3, #10]
 80081e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ec:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	79db      	ldrb	r3, [r3, #7]
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d10e      	bne.n	8008214 <get_fat+0x204>
					if (cofs <= clen) {
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d80a      	bhi.n	8008214 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	429a      	cmp	r2, r3
 8008204:	d002      	beq.n	800820c <get_fat+0x1fc>
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	3301      	adds	r3, #1
 800820a:	e001      	b.n	8008210 <get_fat+0x200>
 800820c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8008210:	61fb      	str	r3, [r7, #28]
						break;
 8008212:	e04b      	b.n	80082ac <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	79db      	ldrb	r3, [r3, #7]
 8008218:	2b03      	cmp	r3, #3
 800821a:	d108      	bne.n	800822e <get_fat+0x21e>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	697a      	ldr	r2, [r7, #20]
 8008222:	429a      	cmp	r2, r3
 8008224:	d203      	bcs.n	800822e <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	3301      	adds	r3, #1
 800822a:	61fb      	str	r3, [r7, #28]
					break;
 800822c:	e03e      	b.n	80082ac <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	79db      	ldrb	r3, [r3, #7]
 8008232:	2b02      	cmp	r3, #2
 8008234:	d02e      	beq.n	8008294 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	69db      	ldr	r3, [r3, #28]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d003      	beq.n	8008246 <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800823e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8008242:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8008244:	e032      	b.n	80082ac <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	899b      	ldrh	r3, [r3, #12]
 800824e:	089b      	lsrs	r3, r3, #2
 8008250:	b29b      	uxth	r3, r3
 8008252:	4619      	mov	r1, r3
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	fbb3 f3f1 	udiv	r3, r3, r1
 800825a:	4413      	add	r3, r2
 800825c:	4619      	mov	r1, r3
 800825e:	69b8      	ldr	r0, [r7, #24]
 8008260:	f7ff fe18 	bl	8007e94 <move_window>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d11f      	bne.n	80082aa <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	69ba      	ldr	r2, [r7, #24]
 8008276:	8992      	ldrh	r2, [r2, #12]
 8008278:	fbb3 f0f2 	udiv	r0, r3, r2
 800827c:	fb00 f202 	mul.w	r2, r0, r2
 8008280:	1a9b      	subs	r3, r3, r2
 8008282:	440b      	add	r3, r1
 8008284:	4618      	mov	r0, r3
 8008286:	f7ff f9d9 	bl	800763c <ld_dword>
 800828a:	4603      	mov	r3, r0
 800828c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008290:	61fb      	str	r3, [r7, #28]
					break;
 8008292:	e00b      	b.n	80082ac <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008294:	2301      	movs	r3, #1
 8008296:	61fb      	str	r3, [r7, #28]
 8008298:	e008      	b.n	80082ac <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800829a:	bf00      	nop
 800829c:	e006      	b.n	80082ac <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800829e:	bf00      	nop
 80082a0:	e004      	b.n	80082ac <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80082a2:	bf00      	nop
 80082a4:	e002      	b.n	80082ac <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80082a6:	bf00      	nop
 80082a8:	e000      	b.n	80082ac <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80082aa:	bf00      	nop
		}
	}

	return val;
 80082ac:	69fb      	ldr	r3, [r7, #28]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3720      	adds	r7, #32
 80082b2:	46bd      	mov	sp, r7
 80082b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080082b8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80082b8:	b590      	push	{r4, r7, lr}
 80082ba:	b089      	sub	sp, #36	@ 0x24
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80082c4:	2302      	movs	r3, #2
 80082c6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	f240 810d 	bls.w	80084ea <put_fat+0x232>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	f080 8107 	bcs.w	80084ea <put_fat+0x232>
		switch (fs->fs_type) {
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	2b04      	cmp	r3, #4
 80082e2:	f300 8102 	bgt.w	80084ea <put_fat+0x232>
 80082e6:	2b03      	cmp	r3, #3
 80082e8:	f280 80b3 	bge.w	8008452 <put_fat+0x19a>
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d003      	beq.n	80082f8 <put_fat+0x40>
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	f000 8083 	beq.w	80083fc <put_fat+0x144>
 80082f6:	e0f8      	b.n	80084ea <put_fat+0x232>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	61bb      	str	r3, [r7, #24]
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	085b      	lsrs	r3, r3, #1
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	4413      	add	r3, r2
 8008304:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	899b      	ldrh	r3, [r3, #12]
 800830e:	4619      	mov	r1, r3
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	fbb3 f3f1 	udiv	r3, r3, r1
 8008316:	4413      	add	r3, r2
 8008318:	4619      	mov	r1, r3
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f7ff fdba 	bl	8007e94 <move_window>
 8008320:	4603      	mov	r3, r0
 8008322:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008324:	7ffb      	ldrb	r3, [r7, #31]
 8008326:	2b00      	cmp	r3, #0
 8008328:	f040 80d8 	bne.w	80084dc <put_fat+0x224>
			p = fs->win + bc++ % SS(fs);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	1c5a      	adds	r2, r3, #1
 8008336:	61ba      	str	r2, [r7, #24]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	8992      	ldrh	r2, [r2, #12]
 800833c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008340:	fb00 f202 	mul.w	r2, r0, r2
 8008344:	1a9b      	subs	r3, r3, r2
 8008346:	440b      	add	r3, r1
 8008348:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	f003 0301 	and.w	r3, r3, #1
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00d      	beq.n	8008370 <put_fat+0xb8>
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	b25b      	sxtb	r3, r3
 800835a:	f003 030f 	and.w	r3, r3, #15
 800835e:	b25a      	sxtb	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	b2db      	uxtb	r3, r3
 8008364:	011b      	lsls	r3, r3, #4
 8008366:	b25b      	sxtb	r3, r3
 8008368:	4313      	orrs	r3, r2
 800836a:	b25b      	sxtb	r3, r3
 800836c:	b2db      	uxtb	r3, r3
 800836e:	e001      	b.n	8008374 <put_fat+0xbc>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	b2db      	uxtb	r3, r3
 8008374:	697a      	ldr	r2, [r7, #20]
 8008376:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2201      	movs	r2, #1
 800837c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	899b      	ldrh	r3, [r3, #12]
 8008386:	4619      	mov	r1, r3
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	fbb3 f3f1 	udiv	r3, r3, r1
 800838e:	4413      	add	r3, r2
 8008390:	4619      	mov	r1, r3
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f7ff fd7e 	bl	8007e94 <move_window>
 8008398:	4603      	mov	r3, r0
 800839a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800839c:	7ffb      	ldrb	r3, [r7, #31]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f040 809e 	bne.w	80084e0 <put_fat+0x228>
			p = fs->win + bc % SS(fs);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	899b      	ldrh	r3, [r3, #12]
 80083ae:	461a      	mov	r2, r3
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80083b6:	fb00 f202 	mul.w	r2, r0, r2
 80083ba:	1a9b      	subs	r3, r3, r2
 80083bc:	440b      	add	r3, r1
 80083be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	f003 0301 	and.w	r3, r3, #1
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d003      	beq.n	80083d2 <put_fat+0x11a>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	091b      	lsrs	r3, r3, #4
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	e00e      	b.n	80083f0 <put_fat+0x138>
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	b25b      	sxtb	r3, r3
 80083d8:	f023 030f 	bic.w	r3, r3, #15
 80083dc:	b25a      	sxtb	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	0a1b      	lsrs	r3, r3, #8
 80083e2:	b25b      	sxtb	r3, r3
 80083e4:	f003 030f 	and.w	r3, r3, #15
 80083e8:	b25b      	sxtb	r3, r3
 80083ea:	4313      	orrs	r3, r2
 80083ec:	b25b      	sxtb	r3, r3
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	697a      	ldr	r2, [r7, #20]
 80083f2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2201      	movs	r2, #1
 80083f8:	70da      	strb	r2, [r3, #3]
			break;
 80083fa:	e076      	b.n	80084ea <put_fat+0x232>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	899b      	ldrh	r3, [r3, #12]
 8008404:	085b      	lsrs	r3, r3, #1
 8008406:	b29b      	uxth	r3, r3
 8008408:	4619      	mov	r1, r3
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008410:	4413      	add	r3, r2
 8008412:	4619      	mov	r1, r3
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f7ff fd3d 	bl	8007e94 <move_window>
 800841a:	4603      	mov	r3, r0
 800841c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800841e:	7ffb      	ldrb	r3, [r7, #31]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d15f      	bne.n	80084e4 <put_fat+0x22c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	005b      	lsls	r3, r3, #1
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	8992      	ldrh	r2, [r2, #12]
 8008432:	fbb3 f0f2 	udiv	r0, r3, r2
 8008436:	fb00 f202 	mul.w	r2, r0, r2
 800843a:	1a9b      	subs	r3, r3, r2
 800843c:	440b      	add	r3, r1
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	b292      	uxth	r2, r2
 8008442:	4611      	mov	r1, r2
 8008444:	4618      	mov	r0, r3
 8008446:	f7ff f9f7 	bl	8007838 <st_word>
			fs->wflag = 1;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2201      	movs	r2, #1
 800844e:	70da      	strb	r2, [r3, #3]
			break;
 8008450:	e04b      	b.n	80084ea <put_fat+0x232>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	899b      	ldrh	r3, [r3, #12]
 800845a:	089b      	lsrs	r3, r3, #2
 800845c:	b29b      	uxth	r3, r3
 800845e:	4619      	mov	r1, r3
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	fbb3 f3f1 	udiv	r3, r3, r1
 8008466:	4413      	add	r3, r2
 8008468:	4619      	mov	r1, r3
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f7ff fd12 	bl	8007e94 <move_window>
 8008470:	4603      	mov	r3, r0
 8008472:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008474:	7ffb      	ldrb	r3, [r7, #31]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d136      	bne.n	80084e8 <put_fat+0x230>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	2b04      	cmp	r3, #4
 8008480:	d017      	beq.n	80084b2 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	8992      	ldrh	r2, [r2, #12]
 8008496:	fbb3 f0f2 	udiv	r0, r3, r2
 800849a:	fb00 f202 	mul.w	r2, r0, r2
 800849e:	1a9b      	subs	r3, r3, r2
 80084a0:	440b      	add	r3, r1
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7ff f8ca 	bl	800763c <ld_dword>
 80084a8:	4603      	mov	r3, r0
 80084aa:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80084ae:	4323      	orrs	r3, r4
 80084b0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	8992      	ldrh	r2, [r2, #12]
 80084c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80084c4:	fb00 f202 	mul.w	r2, r0, r2
 80084c8:	1a9b      	subs	r3, r3, r2
 80084ca:	440b      	add	r3, r1
 80084cc:	6879      	ldr	r1, [r7, #4]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7ff f9cd 	bl	800786e <st_dword>
			fs->wflag = 1;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2201      	movs	r2, #1
 80084d8:	70da      	strb	r2, [r3, #3]
			break;
 80084da:	e006      	b.n	80084ea <put_fat+0x232>
			if (res != FR_OK) break;
 80084dc:	bf00      	nop
 80084de:	e004      	b.n	80084ea <put_fat+0x232>
			if (res != FR_OK) break;
 80084e0:	bf00      	nop
 80084e2:	e002      	b.n	80084ea <put_fat+0x232>
			if (res != FR_OK) break;
 80084e4:	bf00      	nop
 80084e6:	e000      	b.n	80084ea <put_fat+0x232>
			if (res != FR_OK) break;
 80084e8:	bf00      	nop
		}
	}
	return res;
 80084ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3724      	adds	r7, #36	@ 0x24
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd90      	pop	{r4, r7, pc}

080084f4 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b08a      	sub	sp, #40	@ 0x28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	3b02      	subs	r3, #2
 8008504:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800850a:	3b02      	subs	r3, #2
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	429a      	cmp	r2, r3
 8008510:	d301      	bcc.n	8008516 <find_bitmap+0x22>
 8008512:	2300      	movs	r3, #0
 8008514:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	61fb      	str	r3, [r7, #28]
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	61bb      	str	r3, [r7, #24]
 800851e:	2300      	movs	r3, #0
 8008520:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	08db      	lsrs	r3, r3, #3
 800852a:	68f9      	ldr	r1, [r7, #12]
 800852c:	8989      	ldrh	r1, [r1, #12]
 800852e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008532:	4413      	add	r3, r2
 8008534:	4619      	mov	r1, r3
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f7ff fcac 	bl	8007e94 <move_window>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d002      	beq.n	8008548 <find_bitmap+0x54>
 8008542:	f04f 33ff 	mov.w	r3, #4294967295
 8008546:	e058      	b.n	80085fa <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	08db      	lsrs	r3, r3, #3
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	8992      	ldrh	r2, [r2, #12]
 8008550:	fbb3 f1f2 	udiv	r1, r3, r2
 8008554:	fb01 f202 	mul.w	r2, r1, r2
 8008558:	1a9b      	subs	r3, r3, r2
 800855a:	623b      	str	r3, [r7, #32]
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	f003 0307 	and.w	r3, r3, #7
 8008562:	2201      	movs	r2, #1
 8008564:	fa02 f303 	lsl.w	r3, r2, r3
 8008568:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	6a3b      	ldr	r3, [r7, #32]
 8008570:	4413      	add	r3, r2
 8008572:	3340      	adds	r3, #64	@ 0x40
 8008574:	781a      	ldrb	r2, [r3, #0]
 8008576:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800857a:	4013      	ands	r3, r2
 800857c:	74fb      	strb	r3, [r7, #19]
 800857e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008582:	005b      	lsls	r3, r3, #1
 8008584:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	3301      	adds	r3, #1
 800858c:	61fb      	str	r3, [r7, #28]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008592:	3b02      	subs	r3, #2
 8008594:	69fa      	ldr	r2, [r7, #28]
 8008596:	429a      	cmp	r2, r3
 8008598:	d307      	bcc.n	80085aa <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800859a:	2300      	movs	r3, #0
 800859c:	61fb      	str	r3, [r7, #28]
 800859e:	2300      	movs	r3, #0
 80085a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	899b      	ldrh	r3, [r3, #12]
 80085a8:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 80085aa:	7cfb      	ldrb	r3, [r7, #19]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d109      	bne.n	80085c4 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	3301      	adds	r3, #1
 80085b4:	617b      	str	r3, [r7, #20]
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d106      	bne.n	80085cc <find_bitmap+0xd8>
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	3302      	adds	r3, #2
 80085c2:	e01a      	b.n	80085fa <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	61bb      	str	r3, [r7, #24]
 80085c8:	2300      	movs	r3, #0
 80085ca:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 80085cc:	69fa      	ldr	r2, [r7, #28]
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d101      	bne.n	80085d8 <find_bitmap+0xe4>
 80085d4:	2300      	movs	r3, #0
 80085d6:	e010      	b.n	80085fa <find_bitmap+0x106>
			} while (bm);
 80085d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1c5      	bne.n	800856c <find_bitmap+0x78>
			bm = 1;
 80085e0:	2301      	movs	r3, #1
 80085e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 80085e6:	6a3b      	ldr	r3, [r7, #32]
 80085e8:	3301      	adds	r3, #1
 80085ea:	623b      	str	r3, [r7, #32]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	899b      	ldrh	r3, [r3, #12]
 80085f0:	461a      	mov	r2, r3
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d3b9      	bcc.n	800856c <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 80085f8:	e793      	b.n	8008522 <find_bitmap+0x2e>
	}
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3728      	adds	r7, #40	@ 0x28
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	b088      	sub	sp, #32
 8008606:	af00      	add	r7, sp, #0
 8008608:	60f8      	str	r0, [r7, #12]
 800860a:	60b9      	str	r1, [r7, #8]
 800860c:	607a      	str	r2, [r7, #4]
 800860e:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	3b02      	subs	r3, #2
 8008614:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	08db      	lsrs	r3, r3, #3
 800861e:	68f9      	ldr	r1, [r7, #12]
 8008620:	8989      	ldrh	r1, [r1, #12]
 8008622:	fbb3 f3f1 	udiv	r3, r3, r1
 8008626:	4413      	add	r3, r2
 8008628:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	08db      	lsrs	r3, r3, #3
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	8992      	ldrh	r2, [r2, #12]
 8008632:	fbb3 f1f2 	udiv	r1, r3, r2
 8008636:	fb01 f202 	mul.w	r2, r1, r2
 800863a:	1a9b      	subs	r3, r3, r2
 800863c:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	f003 0307 	and.w	r3, r3, #7
 8008644:	2201      	movs	r2, #1
 8008646:	fa02 f303 	lsl.w	r3, r2, r3
 800864a:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	1c5a      	adds	r2, r3, #1
 8008650:	617a      	str	r2, [r7, #20]
 8008652:	4619      	mov	r1, r3
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f7ff fc1d 	bl	8007e94 <move_window>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d001      	beq.n	8008664 <change_bitmap+0x62>
 8008660:	2301      	movs	r3, #1
 8008662:	e03f      	b.n	80086e4 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	4413      	add	r3, r2
 800866a:	3340      	adds	r3, #64	@ 0x40
 800866c:	781a      	ldrb	r2, [r3, #0]
 800866e:	7ffb      	ldrb	r3, [r7, #31]
 8008670:	4013      	ands	r3, r2
 8008672:	b2db      	uxtb	r3, r3
 8008674:	2b00      	cmp	r3, #0
 8008676:	bf14      	ite	ne
 8008678:	2301      	movne	r3, #1
 800867a:	2300      	moveq	r3, #0
 800867c:	b2db      	uxtb	r3, r3
 800867e:	461a      	mov	r2, r3
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	4293      	cmp	r3, r2
 8008684:	d101      	bne.n	800868a <change_bitmap+0x88>
 8008686:	2302      	movs	r3, #2
 8008688:	e02c      	b.n	80086e4 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	4413      	add	r3, r2
 8008690:	3340      	adds	r3, #64	@ 0x40
 8008692:	781a      	ldrb	r2, [r3, #0]
 8008694:	7ffb      	ldrb	r3, [r7, #31]
 8008696:	4053      	eors	r3, r2
 8008698:	b2d9      	uxtb	r1, r3
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	4413      	add	r3, r2
 80086a0:	3340      	adds	r3, #64	@ 0x40
 80086a2:	460a      	mov	r2, r1
 80086a4:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2201      	movs	r2, #1
 80086aa:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	3b01      	subs	r3, #1
 80086b0:	607b      	str	r3, [r7, #4]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <change_bitmap+0xba>
 80086b8:	2300      	movs	r3, #0
 80086ba:	e013      	b.n	80086e4 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 80086bc:	7ffb      	ldrb	r3, [r7, #31]
 80086be:	005b      	lsls	r3, r3, #1
 80086c0:	77fb      	strb	r3, [r7, #31]
 80086c2:	7ffb      	ldrb	r3, [r7, #31]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1cd      	bne.n	8008664 <change_bitmap+0x62>
			bm = 1;
 80086c8:	2301      	movs	r3, #1
 80086ca:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	3301      	adds	r3, #1
 80086d0:	61bb      	str	r3, [r7, #24]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	899b      	ldrh	r3, [r3, #12]
 80086d6:	461a      	mov	r2, r3
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	4293      	cmp	r3, r2
 80086dc:	d3c2      	bcc.n	8008664 <change_bitmap+0x62>
		i = 0;
 80086de:	2300      	movs	r3, #0
 80086e0:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80086e2:	e7b3      	b.n	800864c <change_bitmap+0x4a>
	}
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3720      	adds	r7, #32
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b086      	sub	sp, #24
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	79db      	ldrb	r3, [r3, #7]
 80086f8:	2b03      	cmp	r3, #3
 80086fa:	d121      	bne.n	8008740 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	617b      	str	r3, [r7, #20]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	613b      	str	r3, [r7, #16]
 8008708:	e014      	b.n	8008734 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6818      	ldr	r0, [r3, #0]
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	3301      	adds	r3, #1
 8008712:	461a      	mov	r2, r3
 8008714:	6979      	ldr	r1, [r7, #20]
 8008716:	f7ff fdcf 	bl	80082b8 <put_fat>
 800871a:	4603      	mov	r3, r0
 800871c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800871e:	7bfb      	ldrb	r3, [r7, #15]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d001      	beq.n	8008728 <fill_first_frag+0x3c>
 8008724:	7bfb      	ldrb	r3, [r7, #15]
 8008726:	e00c      	b.n	8008742 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	3301      	adds	r3, #1
 800872c:	617b      	str	r3, [r7, #20]
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	3b01      	subs	r3, #1
 8008732:	613b      	str	r3, [r7, #16]
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1e7      	bne.n	800870a <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3718      	adds	r7, #24
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b086      	sub	sp, #24
 800874e:	af00      	add	r7, sp, #0
 8008750:	60f8      	str	r0, [r7, #12]
 8008752:	60b9      	str	r1, [r7, #8]
 8008754:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8008756:	e020      	b.n	800879a <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6818      	ldr	r0, [r3, #0]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	69db      	ldr	r3, [r3, #28]
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	1c59      	adds	r1, r3, #1
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	2b01      	cmp	r3, #1
 800876c:	d905      	bls.n	800877a <fill_last_frag+0x30>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	3302      	adds	r3, #2
 8008778:	e000      	b.n	800877c <fill_last_frag+0x32>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	461a      	mov	r2, r3
 800877e:	f7ff fd9b 	bl	80082b8 <put_fat>
 8008782:	4603      	mov	r3, r0
 8008784:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8008786:	7dfb      	ldrb	r3, [r7, #23]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d001      	beq.n	8008790 <fill_last_frag+0x46>
 800878c:	7dfb      	ldrb	r3, [r7, #23]
 800878e:	e009      	b.n	80087a4 <fill_last_frag+0x5a>
		obj->n_frag--;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	1e5a      	subs	r2, r3, #1
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1da      	bne.n	8008758 <fill_last_frag+0xe>
	}
	return FR_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3718      	adds	r7, #24
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b08a      	sub	sp, #40	@ 0x28
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80087b8:	2300      	movs	r3, #0
 80087ba:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d904      	bls.n	80087da <remove_chain+0x2e>
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d301      	bcc.n	80087de <remove_chain+0x32>
 80087da:	2302      	movs	r3, #2
 80087dc:	e096      	b.n	800890c <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d014      	beq.n	800880e <remove_chain+0x62>
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	2b04      	cmp	r3, #4
 80087ea:	d103      	bne.n	80087f4 <remove_chain+0x48>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	79db      	ldrb	r3, [r3, #7]
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d00c      	beq.n	800880e <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80087f4:	f04f 32ff 	mov.w	r2, #4294967295
 80087f8:	6879      	ldr	r1, [r7, #4]
 80087fa:	69b8      	ldr	r0, [r7, #24]
 80087fc:	f7ff fd5c 	bl	80082b8 <put_fat>
 8008800:	4603      	mov	r3, r0
 8008802:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008804:	7ffb      	ldrb	r3, [r7, #31]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d001      	beq.n	800880e <remove_chain+0x62>
 800880a:	7ffb      	ldrb	r3, [r7, #31]
 800880c:	e07e      	b.n	800890c <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800880e:	68b9      	ldr	r1, [r7, #8]
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f7ff fbfd 	bl	8008010 <get_fat>
 8008816:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d055      	beq.n	80088ca <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d101      	bne.n	8008828 <remove_chain+0x7c>
 8008824:	2302      	movs	r3, #2
 8008826:	e071      	b.n	800890c <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882e:	d101      	bne.n	8008834 <remove_chain+0x88>
 8008830:	2301      	movs	r3, #1
 8008832:	e06b      	b.n	800890c <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	2b04      	cmp	r3, #4
 800883a:	d00b      	beq.n	8008854 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800883c:	2200      	movs	r2, #0
 800883e:	68b9      	ldr	r1, [r7, #8]
 8008840:	69b8      	ldr	r0, [r7, #24]
 8008842:	f7ff fd39 	bl	80082b8 <put_fat>
 8008846:	4603      	mov	r3, r0
 8008848:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800884a:	7ffb      	ldrb	r3, [r7, #31]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d001      	beq.n	8008854 <remove_chain+0xa8>
 8008850:	7ffb      	ldrb	r3, [r7, #31]
 8008852:	e05b      	b.n	800890c <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	6a1a      	ldr	r2, [r3, #32]
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800885c:	3b02      	subs	r3, #2
 800885e:	429a      	cmp	r2, r3
 8008860:	d20b      	bcs.n	800887a <remove_chain+0xce>
			fs->free_clst++;
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	1c5a      	adds	r2, r3, #1
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	621a      	str	r2, [r3, #32]
			fs->fsi_flag |= 1;
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	791b      	ldrb	r3, [r3, #4]
 8008870:	f043 0301 	orr.w	r3, r3, #1
 8008874:	b2da      	uxtb	r2, r3
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800887a:	6a3b      	ldr	r3, [r7, #32]
 800887c:	3301      	adds	r3, #1
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	429a      	cmp	r2, r3
 8008882:	d102      	bne.n	800888a <remove_chain+0xde>
			ecl = nxt;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	623b      	str	r3, [r7, #32]
 8008888:	e017      	b.n	80088ba <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	2b04      	cmp	r3, #4
 8008890:	d10f      	bne.n	80088b2 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8008892:	6a3a      	ldr	r2, [r7, #32]
 8008894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	1c5a      	adds	r2, r3, #1
 800889a:	2300      	movs	r3, #0
 800889c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800889e:	69b8      	ldr	r0, [r7, #24]
 80088a0:	f7ff feaf 	bl	8008602 <change_bitmap>
 80088a4:	4603      	mov	r3, r0
 80088a6:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 80088a8:	7ffb      	ldrb	r3, [r7, #31]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d001      	beq.n	80088b2 <remove_chain+0x106>
 80088ae:	7ffb      	ldrb	r3, [r7, #31]
 80088b0:	e02c      	b.n	800890c <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	623b      	str	r3, [r7, #32]
 80088b6:	6a3b      	ldr	r3, [r7, #32]
 80088b8:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d3a2      	bcc.n	800880e <remove_chain+0x62>
 80088c8:	e000      	b.n	80088cc <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 80088ca:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	2b04      	cmp	r3, #4
 80088d2:	d11a      	bne.n	800890a <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d103      	bne.n	80088e2 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	71da      	strb	r2, [r3, #7]
 80088e0:	e013      	b.n	800890a <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	79db      	ldrb	r3, [r3, #7]
 80088e6:	2b03      	cmp	r3, #3
 80088e8:	d10f      	bne.n	800890a <remove_chain+0x15e>
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d30a      	bcc.n	800890a <remove_chain+0x15e>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	689a      	ldr	r2, [r3, #8]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	4413      	add	r3, r2
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	429a      	cmp	r2, r3
 8008902:	d802      	bhi.n	800890a <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2202      	movs	r2, #2
 8008908:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3728      	adds	r7, #40	@ 0x28
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b088      	sub	sp, #32
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d10d      	bne.n	8008946 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	69db      	ldr	r3, [r3, #28]
 800892e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d004      	beq.n	8008940 <create_chain+0x2c>
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800893a:	69ba      	ldr	r2, [r7, #24]
 800893c:	429a      	cmp	r2, r3
 800893e:	d31b      	bcc.n	8008978 <create_chain+0x64>
 8008940:	2301      	movs	r3, #1
 8008942:	61bb      	str	r3, [r7, #24]
 8008944:	e018      	b.n	8008978 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008946:	6839      	ldr	r1, [r7, #0]
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f7ff fb61 	bl	8008010 <get_fat>
 800894e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d801      	bhi.n	800895a <create_chain+0x46>
 8008956:	2301      	movs	r3, #1
 8008958:	e0d9      	b.n	8008b0e <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008960:	d101      	bne.n	8008966 <create_chain+0x52>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	e0d3      	b.n	8008b0e <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	429a      	cmp	r2, r3
 800896e:	d201      	bcs.n	8008974 <create_chain+0x60>
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	e0cc      	b.n	8008b0e <create_chain+0x1fa>
		scl = clst;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	2b04      	cmp	r3, #4
 800897e:	d164      	bne.n	8008a4a <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8008980:	2201      	movs	r2, #1
 8008982:	69b9      	ldr	r1, [r7, #24]
 8008984:	6938      	ldr	r0, [r7, #16]
 8008986:	f7ff fdb5 	bl	80084f4 <find_bitmap>
 800898a:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d003      	beq.n	800899a <create_chain+0x86>
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008998:	d101      	bne.n	800899e <create_chain+0x8a>
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	e0b7      	b.n	8008b0e <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800899e:	2301      	movs	r3, #1
 80089a0:	2201      	movs	r2, #1
 80089a2:	69f9      	ldr	r1, [r7, #28]
 80089a4:	6938      	ldr	r0, [r7, #16]
 80089a6:	f7ff fe2c 	bl	8008602 <change_bitmap>
 80089aa:	4603      	mov	r3, r0
 80089ac:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 80089ae:	7dfb      	ldrb	r3, [r7, #23]
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d101      	bne.n	80089b8 <create_chain+0xa4>
 80089b4:	2301      	movs	r3, #1
 80089b6:	e0aa      	b.n	8008b0e <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 80089b8:	7dfb      	ldrb	r3, [r7, #23]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d102      	bne.n	80089c4 <create_chain+0xb0>
 80089be:	f04f 33ff 	mov.w	r3, #4294967295
 80089c2:	e0a4      	b.n	8008b0e <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d103      	bne.n	80089d2 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2202      	movs	r2, #2
 80089ce:	71da      	strb	r2, [r3, #7]
 80089d0:	e011      	b.n	80089f6 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	79db      	ldrb	r3, [r3, #7]
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d10d      	bne.n	80089f6 <create_chain+0xe2>
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	3301      	adds	r3, #1
 80089de:	69fa      	ldr	r2, [r7, #28]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d008      	beq.n	80089f6 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	69ba      	ldr	r2, [r7, #24]
 80089ea:	1ad2      	subs	r2, r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2203      	movs	r2, #3
 80089f4:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	79db      	ldrb	r3, [r3, #7]
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d064      	beq.n	8008ac8 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	3301      	adds	r3, #1
 8008a02:	69fa      	ldr	r2, [r7, #28]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d10b      	bne.n	8008a20 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	69db      	ldr	r3, [r3, #28]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <create_chain+0x104>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	69db      	ldr	r3, [r3, #28]
 8008a14:	3301      	adds	r3, #1
 8008a16:	e000      	b.n	8008a1a <create_chain+0x106>
 8008a18:	2302      	movs	r3, #2
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	61d3      	str	r3, [r2, #28]
 8008a1e:	e053      	b.n	8008ac8 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	69db      	ldr	r3, [r3, #28]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d102      	bne.n	8008a2e <create_chain+0x11a>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8008a2e:	69fa      	ldr	r2, [r7, #28]
 8008a30:	6839      	ldr	r1, [r7, #0]
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f7ff fe89 	bl	800874a <fill_last_frag>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8008a3c:	7dfb      	ldrb	r3, [r7, #23]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d142      	bne.n	8008ac8 <create_chain+0x1b4>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	61da      	str	r2, [r3, #28]
 8008a48:	e03e      	b.n	8008ac8 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	3301      	adds	r3, #1
 8008a52:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a58:	69fa      	ldr	r2, [r7, #28]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d307      	bcc.n	8008a6e <create_chain+0x15a>
				ncl = 2;
 8008a5e:	2302      	movs	r3, #2
 8008a60:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008a62:	69fa      	ldr	r2, [r7, #28]
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d901      	bls.n	8008a6e <create_chain+0x15a>
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	e04f      	b.n	8008b0e <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008a6e:	69f9      	ldr	r1, [r7, #28]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f7ff facd 	bl	8008010 <get_fat>
 8008a76:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00e      	beq.n	8008a9c <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d003      	beq.n	8008a8c <create_chain+0x178>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a8a:	d101      	bne.n	8008a90 <create_chain+0x17c>
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	e03e      	b.n	8008b0e <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8008a90:	69fa      	ldr	r2, [r7, #28]
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d1da      	bne.n	8008a4e <create_chain+0x13a>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	e038      	b.n	8008b0e <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8008a9c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa2:	69f9      	ldr	r1, [r7, #28]
 8008aa4:	6938      	ldr	r0, [r7, #16]
 8008aa6:	f7ff fc07 	bl	80082b8 <put_fat>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008aae:	7dfb      	ldrb	r3, [r7, #23]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d109      	bne.n	8008ac8 <create_chain+0x1b4>
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d006      	beq.n	8008ac8 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008aba:	69fa      	ldr	r2, [r7, #28]
 8008abc:	6839      	ldr	r1, [r7, #0]
 8008abe:	6938      	ldr	r0, [r7, #16]
 8008ac0:	f7ff fbfa 	bl	80082b8 <put_fat>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008ac8:	7dfb      	ldrb	r3, [r7, #23]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d116      	bne.n	8008afc <create_chain+0x1e8>
		fs->last_clst = ncl;
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	69fa      	ldr	r2, [r7, #28]
 8008ad2:	61da      	str	r2, [r3, #28]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	6a1a      	ldr	r2, [r3, #32]
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008adc:	3b02      	subs	r3, #2
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d804      	bhi.n	8008aec <create_chain+0x1d8>
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	1e5a      	subs	r2, r3, #1
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	621a      	str	r2, [r3, #32]
		fs->fsi_flag |= 1;
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	791b      	ldrb	r3, [r3, #4]
 8008af0:	f043 0301 	orr.w	r3, r3, #1
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	711a      	strb	r2, [r3, #4]
 8008afa:	e007      	b.n	8008b0c <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008afc:	7dfb      	ldrb	r3, [r7, #23]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d102      	bne.n	8008b08 <create_chain+0x1f4>
 8008b02:	f04f 33ff 	mov.w	r3, #4294967295
 8008b06:	e000      	b.n	8008b0a <create_chain+0x1f6>
 8008b08:	2301      	movs	r3, #1
 8008b0a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008b0c:	69fb      	ldr	r3, [r7, #28]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3720      	adds	r7, #32
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008b16:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008b1a:	b088      	sub	sp, #32
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b2e:	3304      	adds	r3, #4
 8008b30:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	899b      	ldrh	r3, [r3, #12]
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	2200      	movs	r2, #0
 8008b3a:	4698      	mov	r8, r3
 8008b3c:	4691      	mov	r9, r2
 8008b3e:	4642      	mov	r2, r8
 8008b40:	464b      	mov	r3, r9
 8008b42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b46:	f7f7 fb4b 	bl	80001e0 <__aeabi_uldivmod>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	4610      	mov	r0, r2
 8008b50:	4619      	mov	r1, r3
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	895b      	ldrh	r3, [r3, #10]
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	2200      	movs	r2, #0
 8008b5a:	461c      	mov	r4, r3
 8008b5c:	4615      	mov	r5, r2
 8008b5e:	4622      	mov	r2, r4
 8008b60:	462b      	mov	r3, r5
 8008b62:	f7f7 fb3d 	bl	80001e0 <__aeabi_uldivmod>
 8008b66:	4602      	mov	r2, r0
 8008b68:	460b      	mov	r3, r1
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	1d1a      	adds	r2, r3, #4
 8008b72:	61ba      	str	r2, [r7, #24]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d101      	bne.n	8008b82 <clmt_clust+0x6c>
 8008b7e:	2300      	movs	r3, #0
 8008b80:	e010      	b.n	8008ba4 <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 8008b82:	69fa      	ldr	r2, [r7, #28]
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d307      	bcc.n	8008b9a <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 8008b8a:	69fa      	ldr	r2, [r7, #28]
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	61fb      	str	r3, [r7, #28]
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	3304      	adds	r3, #4
 8008b96:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008b98:	e7e9      	b.n	8008b6e <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 8008b9a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	4413      	add	r3, r2
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3720      	adds	r7, #32
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08008bae <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b086      	sub	sp, #24
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
 8008bb6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	2b04      	cmp	r3, #4
 8008bc4:	d102      	bne.n	8008bcc <dir_sdi+0x1e>
 8008bc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bca:	e001      	b.n	8008bd0 <dir_sdi+0x22>
 8008bcc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d904      	bls.n	8008be0 <dir_sdi+0x32>
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	f003 031f 	and.w	r3, r3, #31
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d001      	beq.n	8008be4 <dir_sdi+0x36>
		return FR_INT_ERR;
 8008be0:	2302      	movs	r3, #2
 8008be2:	e074      	b.n	8008cce <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d109      	bne.n	8008c0a <dir_sdi+0x5c>
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d905      	bls.n	8008c0a <dir_sdi+0x5c>
		clst = fs->dirbase;
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c02:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d10c      	bne.n	8008c2a <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	095b      	lsrs	r3, r3, #5
 8008c14:	693a      	ldr	r2, [r7, #16]
 8008c16:	8912      	ldrh	r2, [r2, #8]
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d301      	bcc.n	8008c20 <dir_sdi+0x72>
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	e056      	b.n	8008cce <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	639a      	str	r2, [r3, #56]	@ 0x38
 8008c28:	e02d      	b.n	8008c86 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	895b      	ldrh	r3, [r3, #10]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	899b      	ldrh	r3, [r3, #12]
 8008c34:	fb02 f303 	mul.w	r3, r2, r3
 8008c38:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008c3a:	e019      	b.n	8008c70 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6979      	ldr	r1, [r7, #20]
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7ff f9e5 	bl	8008010 <get_fat>
 8008c46:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c4e:	d101      	bne.n	8008c54 <dir_sdi+0xa6>
 8008c50:	2301      	movs	r3, #1
 8008c52:	e03c      	b.n	8008cce <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d904      	bls.n	8008c64 <dir_sdi+0xb6>
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c5e:	697a      	ldr	r2, [r7, #20]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d301      	bcc.n	8008c68 <dir_sdi+0xba>
 8008c64:	2302      	movs	r3, #2
 8008c66:	e032      	b.n	8008cce <dir_sdi+0x120>
			ofs -= csz;
 8008c68:	683a      	ldr	r2, [r7, #0]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008c70:	683a      	ldr	r2, [r7, #0]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d2e1      	bcs.n	8008c3c <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 8008c78:	6979      	ldr	r1, [r7, #20]
 8008c7a:	6938      	ldr	r0, [r7, #16]
 8008c7c:	f7ff f9a8 	bl	8007fd0 <clust2sect>
 8008c80:	4602      	mov	r2, r0
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	697a      	ldr	r2, [r7, #20]
 8008c8a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d101      	bne.n	8008c98 <dir_sdi+0xea>
 8008c94:	2302      	movs	r3, #2
 8008c96:	e01a      	b.n	8008cce <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	899b      	ldrh	r3, [r3, #12]
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ca8:	441a      	add	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	899b      	ldrh	r3, [r3, #12]
 8008cb8:	461a      	mov	r2, r3
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	fbb3 f0f2 	udiv	r0, r3, r2
 8008cc0:	fb00 f202 	mul.w	r2, r0, r2
 8008cc4:	1a9b      	subs	r3, r3, r2
 8008cc6:	18ca      	adds	r2, r1, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3718      	adds	r7, #24
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b086      	sub	sp, #24
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
 8008cde:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cea:	3320      	adds	r3, #32
 8008cec:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00b      	beq.n	8008d0e <dir_next+0x38>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	2b04      	cmp	r3, #4
 8008cfc:	d102      	bne.n	8008d04 <dir_next+0x2e>
 8008cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d02:	e001      	b.n	8008d08 <dir_next+0x32>
 8008d04:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d801      	bhi.n	8008d12 <dir_next+0x3c>
 8008d0e:	2304      	movs	r3, #4
 8008d10:	e0c3      	b.n	8008e9a <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	899b      	ldrh	r3, [r3, #12]
 8008d16:	461a      	mov	r2, r3
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d1e:	fb01 f202 	mul.w	r2, r1, r2
 8008d22:	1a9b      	subs	r3, r3, r2
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f040 80a5 	bne.w	8008e74 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d2e:	1c5a      	adds	r2, r3, #1
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d10b      	bne.n	8008d54 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	095b      	lsrs	r3, r3, #5
 8008d40:	68fa      	ldr	r2, [r7, #12]
 8008d42:	8912      	ldrh	r2, [r2, #8]
 8008d44:	4293      	cmp	r3, r2
 8008d46:	f0c0 8095 	bcc.w	8008e74 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008d50:	2304      	movs	r3, #4
 8008d52:	e0a2      	b.n	8008e9a <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	899b      	ldrh	r3, [r3, #12]
 8008d58:	461a      	mov	r2, r3
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	8952      	ldrh	r2, [r2, #10]
 8008d64:	3a01      	subs	r2, #1
 8008d66:	4013      	ands	r3, r2
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f040 8083 	bne.w	8008e74 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d74:	4619      	mov	r1, r3
 8008d76:	4610      	mov	r0, r2
 8008d78:	f7ff f94a 	bl	8008010 <get_fat>
 8008d7c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d801      	bhi.n	8008d88 <dir_next+0xb2>
 8008d84:	2302      	movs	r3, #2
 8008d86:	e088      	b.n	8008e9a <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d8e:	d101      	bne.n	8008d94 <dir_next+0xbe>
 8008d90:	2301      	movs	r3, #1
 8008d92:	e082      	b.n	8008e9a <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d98:	697a      	ldr	r2, [r7, #20]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d360      	bcc.n	8008e60 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d104      	bne.n	8008dae <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	639a      	str	r2, [r3, #56]	@ 0x38
 8008daa:	2304      	movs	r3, #4
 8008dac:	e075      	b.n	8008e9a <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008db4:	4619      	mov	r1, r3
 8008db6:	4610      	mov	r0, r2
 8008db8:	f7ff fdac 	bl	8008914 <create_chain>
 8008dbc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d101      	bne.n	8008dc8 <dir_next+0xf2>
 8008dc4:	2307      	movs	r3, #7
 8008dc6:	e068      	b.n	8008e9a <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d101      	bne.n	8008dd2 <dir_next+0xfc>
 8008dce:	2302      	movs	r3, #2
 8008dd0:	e063      	b.n	8008e9a <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd8:	d101      	bne.n	8008dde <dir_next+0x108>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e05d      	b.n	8008e9a <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	79db      	ldrb	r3, [r3, #7]
 8008de2:	f043 0304 	orr.w	r3, r3, #4
 8008de6:	b2da      	uxtb	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f7ff f80d 	bl	8007e0c <sync_window>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d001      	beq.n	8008dfc <dir_next+0x126>
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e04e      	b.n	8008e9a <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	899b      	ldrh	r3, [r3, #12]
 8008e06:	461a      	mov	r2, r3
 8008e08:	2100      	movs	r1, #0
 8008e0a:	f7fe fe05 	bl	8007a18 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008e0e:	2300      	movs	r3, #0
 8008e10:	613b      	str	r3, [r7, #16]
 8008e12:	6979      	ldr	r1, [r7, #20]
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f7ff f8db 	bl	8007fd0 <clust2sect>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008e20:	e012      	b.n	8008e48 <dir_next+0x172>
						fs->wflag = 1;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2201      	movs	r2, #1
 8008e26:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f7fe ffef 	bl	8007e0c <sync_window>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d001      	beq.n	8008e38 <dir_next+0x162>
 8008e34:	2301      	movs	r3, #1
 8008e36:	e030      	b.n	8008e9a <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	613b      	str	r3, [r7, #16]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e42:	1c5a      	adds	r2, r3, #1
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	895b      	ldrh	r3, [r3, #10]
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d3e6      	bcc.n	8008e22 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	1ad2      	subs	r2, r2, r3
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	63da      	str	r2, [r3, #60]	@ 0x3c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 8008e66:	6979      	ldr	r1, [r7, #20]
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f7ff f8b1 	bl	8007fd0 <clust2sect>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	899b      	ldrh	r3, [r3, #12]
 8008e84:	461a      	mov	r2, r3
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e8c:	fb00 f202 	mul.w	r2, r0, r2
 8008e90:	1a9b      	subs	r3, r3, r2
 8008e92:	18ca      	adds	r2, r1, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3718      	adds	r7, #24
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b086      	sub	sp, #24
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f7ff fe7a 	bl	8008bae <dir_sdi>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008ebe:	7dfb      	ldrb	r3, [r7, #23]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d140      	bne.n	8008f46 <dir_alloc+0xa4>
		n = 0;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ecc:	4619      	mov	r1, r3
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f7fe ffe0 	bl	8007e94 <move_window>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008ed8:	7dfb      	ldrb	r3, [r7, #23]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d132      	bne.n	8008f44 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	2b04      	cmp	r3, #4
 8008ee4:	d108      	bne.n	8008ef8 <dir_alloc+0x56>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	b25b      	sxtb	r3, r3
 8008eee:	43db      	mvns	r3, r3
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	09db      	lsrs	r3, r3, #7
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	e00f      	b.n	8008f18 <dir_alloc+0x76>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	2be5      	cmp	r3, #229	@ 0xe5
 8008f00:	d004      	beq.n	8008f0c <dir_alloc+0x6a>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d101      	bne.n	8008f10 <dir_alloc+0x6e>
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e000      	b.n	8008f12 <dir_alloc+0x70>
 8008f10:	2300      	movs	r3, #0
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d007      	beq.n	8008f2c <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	613b      	str	r3, [r7, #16]
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d102      	bne.n	8008f30 <dir_alloc+0x8e>
 8008f2a:	e00c      	b.n	8008f46 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008f30:	2101      	movs	r1, #1
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7ff fecf 	bl	8008cd6 <dir_next>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008f3c:	7dfb      	ldrb	r3, [r7, #23]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d0c2      	beq.n	8008ec8 <dir_alloc+0x26>
 8008f42:	e000      	b.n	8008f46 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8008f44:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
 8008f48:	2b04      	cmp	r3, #4
 8008f4a:	d101      	bne.n	8008f50 <dir_alloc+0xae>
 8008f4c:	2307      	movs	r3, #7
 8008f4e:	75fb      	strb	r3, [r7, #23]
	return res;
 8008f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3718      	adds	r7, #24
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b084      	sub	sp, #16
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
 8008f62:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	331a      	adds	r3, #26
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7fe fb4f 	bl	800760c <ld_word>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	2b03      	cmp	r3, #3
 8008f78:	d109      	bne.n	8008f8e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	3314      	adds	r3, #20
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fe fb44 	bl	800760c <ld_word>
 8008f84:	4603      	mov	r3, r0
 8008f86:	041b      	lsls	r3, r3, #16
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	331a      	adds	r3, #26
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	b292      	uxth	r2, r2
 8008fac:	4611      	mov	r1, r2
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fe fc42 	bl	8007838 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	2b03      	cmp	r3, #3
 8008fba:	d109      	bne.n	8008fd0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	f103 0214 	add.w	r2, r3, #20
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	0c1b      	lsrs	r3, r3, #16
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	4619      	mov	r1, r3
 8008fca:	4610      	mov	r0, r2
 8008fcc:	f7fe fc34 	bl	8007838 <st_word>
	}
}
 8008fd0:	bf00      	nop
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008fd8:	b590      	push	{r4, r7, lr}
 8008fda:	b087      	sub	sp, #28
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	331a      	adds	r3, #26
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fe fb10 	bl	800760c <ld_word>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d001      	beq.n	8008ff6 <cmp_lfn+0x1e>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	e059      	b.n	80090aa <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ffe:	1e5a      	subs	r2, r3, #1
 8009000:	4613      	mov	r3, r2
 8009002:	005b      	lsls	r3, r3, #1
 8009004:	4413      	add	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	4413      	add	r3, r2
 800900a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800900c:	2301      	movs	r3, #1
 800900e:	81fb      	strh	r3, [r7, #14]
 8009010:	2300      	movs	r3, #0
 8009012:	613b      	str	r3, [r7, #16]
 8009014:	e033      	b.n	800907e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009016:	4a27      	ldr	r2, [pc, #156]	@ (80090b4 <cmp_lfn+0xdc>)
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	4413      	add	r3, r2
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	461a      	mov	r2, r3
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	4413      	add	r3, r2
 8009024:	4618      	mov	r0, r3
 8009026:	f7fe faf1 	bl	800760c <ld_word>
 800902a:	4603      	mov	r3, r0
 800902c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800902e:	89fb      	ldrh	r3, [r7, #14]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d01a      	beq.n	800906a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	2bfe      	cmp	r3, #254	@ 0xfe
 8009038:	d812      	bhi.n	8009060 <cmp_lfn+0x88>
 800903a:	89bb      	ldrh	r3, [r7, #12]
 800903c:	4618      	mov	r0, r3
 800903e:	f003 f9cb 	bl	800c3d8 <ff_wtoupper>
 8009042:	4603      	mov	r3, r0
 8009044:	461c      	mov	r4, r3
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	1c5a      	adds	r2, r3, #1
 800904a:	617a      	str	r2, [r7, #20]
 800904c:	005b      	lsls	r3, r3, #1
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	4413      	add	r3, r2
 8009052:	881b      	ldrh	r3, [r3, #0]
 8009054:	4618      	mov	r0, r3
 8009056:	f003 f9bf 	bl	800c3d8 <ff_wtoupper>
 800905a:	4603      	mov	r3, r0
 800905c:	429c      	cmp	r4, r3
 800905e:	d001      	beq.n	8009064 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009060:	2300      	movs	r3, #0
 8009062:	e022      	b.n	80090aa <cmp_lfn+0xd2>
			}
			wc = uc;
 8009064:	89bb      	ldrh	r3, [r7, #12]
 8009066:	81fb      	strh	r3, [r7, #14]
 8009068:	e006      	b.n	8009078 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800906a:	89bb      	ldrh	r3, [r7, #12]
 800906c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009070:	4293      	cmp	r3, r2
 8009072:	d001      	beq.n	8009078 <cmp_lfn+0xa0>
 8009074:	2300      	movs	r3, #0
 8009076:	e018      	b.n	80090aa <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	3301      	adds	r3, #1
 800907c:	613b      	str	r3, [r7, #16]
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	2b0c      	cmp	r3, #12
 8009082:	d9c8      	bls.n	8009016 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00b      	beq.n	80090a8 <cmp_lfn+0xd0>
 8009090:	89fb      	ldrh	r3, [r7, #14]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d008      	beq.n	80090a8 <cmp_lfn+0xd0>
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	005b      	lsls	r3, r3, #1
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	4413      	add	r3, r2
 800909e:	881b      	ldrh	r3, [r3, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d001      	beq.n	80090a8 <cmp_lfn+0xd0>
 80090a4:	2300      	movs	r3, #0
 80090a6:	e000      	b.n	80090aa <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80090a8:	2301      	movs	r3, #1
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	371c      	adds	r7, #28
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd90      	pop	{r4, r7, pc}
 80090b2:	bf00      	nop
 80090b4:	08012bc8 	.word	0x08012bc8

080090b8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b086      	sub	sp, #24
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	331a      	adds	r3, #26
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7fe faa0 	bl	800760c <ld_word>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d001      	beq.n	80090d6 <pick_lfn+0x1e>
 80090d2:	2300      	movs	r3, #0
 80090d4:	e04d      	b.n	8009172 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090de:	1e5a      	subs	r2, r3, #1
 80090e0:	4613      	mov	r3, r2
 80090e2:	005b      	lsls	r3, r3, #1
 80090e4:	4413      	add	r3, r2
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	4413      	add	r3, r2
 80090ea:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80090ec:	2301      	movs	r3, #1
 80090ee:	81fb      	strh	r3, [r7, #14]
 80090f0:	2300      	movs	r3, #0
 80090f2:	613b      	str	r3, [r7, #16]
 80090f4:	e028      	b.n	8009148 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80090f6:	4a21      	ldr	r2, [pc, #132]	@ (800917c <pick_lfn+0xc4>)
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	4413      	add	r3, r2
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	461a      	mov	r2, r3
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	4413      	add	r3, r2
 8009104:	4618      	mov	r0, r3
 8009106:	f7fe fa81 	bl	800760c <ld_word>
 800910a:	4603      	mov	r3, r0
 800910c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800910e:	89fb      	ldrh	r3, [r7, #14]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00f      	beq.n	8009134 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	2bfe      	cmp	r3, #254	@ 0xfe
 8009118:	d901      	bls.n	800911e <pick_lfn+0x66>
 800911a:	2300      	movs	r3, #0
 800911c:	e029      	b.n	8009172 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800911e:	89bb      	ldrh	r3, [r7, #12]
 8009120:	81fb      	strh	r3, [r7, #14]
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	1c5a      	adds	r2, r3, #1
 8009126:	617a      	str	r2, [r7, #20]
 8009128:	005b      	lsls	r3, r3, #1
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	4413      	add	r3, r2
 800912e:	89fa      	ldrh	r2, [r7, #14]
 8009130:	801a      	strh	r2, [r3, #0]
 8009132:	e006      	b.n	8009142 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009134:	89bb      	ldrh	r3, [r7, #12]
 8009136:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800913a:	4293      	cmp	r3, r2
 800913c:	d001      	beq.n	8009142 <pick_lfn+0x8a>
 800913e:	2300      	movs	r3, #0
 8009140:	e017      	b.n	8009172 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	3301      	adds	r3, #1
 8009146:	613b      	str	r3, [r7, #16]
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	2b0c      	cmp	r3, #12
 800914c:	d9d3      	bls.n	80090f6 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00a      	beq.n	8009170 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	2bfe      	cmp	r3, #254	@ 0xfe
 800915e:	d901      	bls.n	8009164 <pick_lfn+0xac>
 8009160:	2300      	movs	r3, #0
 8009162:	e006      	b.n	8009172 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	005b      	lsls	r3, r3, #1
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	4413      	add	r3, r2
 800916c:	2200      	movs	r2, #0
 800916e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8009170:	2301      	movs	r3, #1
}
 8009172:	4618      	mov	r0, r3
 8009174:	3718      	adds	r7, #24
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	08012bc8 	.word	0x08012bc8

08009180 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b088      	sub	sp, #32
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	4611      	mov	r1, r2
 800918c:	461a      	mov	r2, r3
 800918e:	460b      	mov	r3, r1
 8009190:	71fb      	strb	r3, [r7, #7]
 8009192:	4613      	mov	r3, r2
 8009194:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	330d      	adds	r3, #13
 800919a:	79ba      	ldrb	r2, [r7, #6]
 800919c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	330b      	adds	r3, #11
 80091a2:	220f      	movs	r2, #15
 80091a4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	330c      	adds	r3, #12
 80091aa:	2200      	movs	r2, #0
 80091ac:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	331a      	adds	r3, #26
 80091b2:	2100      	movs	r1, #0
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7fe fb3f 	bl	8007838 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80091ba:	79fb      	ldrb	r3, [r7, #7]
 80091bc:	1e5a      	subs	r2, r3, #1
 80091be:	4613      	mov	r3, r2
 80091c0:	005b      	lsls	r3, r3, #1
 80091c2:	4413      	add	r3, r2
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	4413      	add	r3, r2
 80091c8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80091ca:	2300      	movs	r3, #0
 80091cc:	82fb      	strh	r3, [r7, #22]
 80091ce:	2300      	movs	r3, #0
 80091d0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80091d2:	8afb      	ldrh	r3, [r7, #22]
 80091d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80091d8:	4293      	cmp	r3, r2
 80091da:	d007      	beq.n	80091ec <put_lfn+0x6c>
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	1c5a      	adds	r2, r3, #1
 80091e0:	61fa      	str	r2, [r7, #28]
 80091e2:	005b      	lsls	r3, r3, #1
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	4413      	add	r3, r2
 80091e8:	881b      	ldrh	r3, [r3, #0]
 80091ea:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80091ec:	4a17      	ldr	r2, [pc, #92]	@ (800924c <put_lfn+0xcc>)
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	4413      	add	r3, r2
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	461a      	mov	r2, r3
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	4413      	add	r3, r2
 80091fa:	8afa      	ldrh	r2, [r7, #22]
 80091fc:	4611      	mov	r1, r2
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fe fb1a 	bl	8007838 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009204:	8afb      	ldrh	r3, [r7, #22]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d102      	bne.n	8009210 <put_lfn+0x90>
 800920a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800920e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	3301      	adds	r3, #1
 8009214:	61bb      	str	r3, [r7, #24]
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	2b0c      	cmp	r3, #12
 800921a:	d9da      	bls.n	80091d2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800921c:	8afb      	ldrh	r3, [r7, #22]
 800921e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009222:	4293      	cmp	r3, r2
 8009224:	d006      	beq.n	8009234 <put_lfn+0xb4>
 8009226:	69fb      	ldr	r3, [r7, #28]
 8009228:	005b      	lsls	r3, r3, #1
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	4413      	add	r3, r2
 800922e:	881b      	ldrh	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d103      	bne.n	800923c <put_lfn+0xbc>
 8009234:	79fb      	ldrb	r3, [r7, #7]
 8009236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800923a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	79fa      	ldrb	r2, [r7, #7]
 8009240:	701a      	strb	r2, [r3, #0]
}
 8009242:	bf00      	nop
 8009244:	3720      	adds	r7, #32
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	08012bc8 	.word	0x08012bc8

08009250 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b08c      	sub	sp, #48	@ 0x30
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
 800925c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800925e:	220b      	movs	r2, #11
 8009260:	68b9      	ldr	r1, [r7, #8]
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f7fe fbb7 	bl	80079d6 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	2b05      	cmp	r3, #5
 800926c:	d92b      	bls.n	80092c6 <gen_numname+0x76>
		sr = seq;
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009272:	e022      	b.n	80092ba <gen_numname+0x6a>
			wc = *lfn++;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	1c9a      	adds	r2, r3, #2
 8009278:	607a      	str	r2, [r7, #4]
 800927a:	881b      	ldrh	r3, [r3, #0]
 800927c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800927e:	2300      	movs	r3, #0
 8009280:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009282:	e017      	b.n	80092b4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	005a      	lsls	r2, r3, #1
 8009288:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800928a:	f003 0301 	and.w	r3, r3, #1
 800928e:	4413      	add	r3, r2
 8009290:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009292:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009294:	085b      	lsrs	r3, r3, #1
 8009296:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d005      	beq.n	80092ae <gen_numname+0x5e>
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80092a8:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 80092ac:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80092ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b0:	3301      	adds	r3, #1
 80092b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80092b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b6:	2b0f      	cmp	r3, #15
 80092b8:	d9e4      	bls.n	8009284 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	881b      	ldrh	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1d8      	bne.n	8009274 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80092c6:	2307      	movs	r3, #7
 80092c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	f003 030f 	and.w	r3, r3, #15
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	3330      	adds	r3, #48	@ 0x30
 80092d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80092da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80092de:	2b39      	cmp	r3, #57	@ 0x39
 80092e0:	d904      	bls.n	80092ec <gen_numname+0x9c>
 80092e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80092e6:	3307      	adds	r3, #7
 80092e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80092ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ee:	1e5a      	subs	r2, r3, #1
 80092f0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80092f2:	3330      	adds	r3, #48	@ 0x30
 80092f4:	443b      	add	r3, r7
 80092f6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80092fa:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	091b      	lsrs	r3, r3, #4
 8009302:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1df      	bne.n	80092ca <gen_numname+0x7a>
	ns[i] = '~';
 800930a:	f107 0214 	add.w	r2, r7, #20
 800930e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009310:	4413      	add	r3, r2
 8009312:	227e      	movs	r2, #126	@ 0x7e
 8009314:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009316:	2300      	movs	r3, #0
 8009318:	627b      	str	r3, [r7, #36]	@ 0x24
 800931a:	e002      	b.n	8009322 <gen_numname+0xd2>
 800931c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800931e:	3301      	adds	r3, #1
 8009320:	627b      	str	r3, [r7, #36]	@ 0x24
 8009322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009326:	429a      	cmp	r2, r3
 8009328:	d205      	bcs.n	8009336 <gen_numname+0xe6>
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800932e:	4413      	add	r3, r2
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	2b20      	cmp	r3, #32
 8009334:	d1f2      	bne.n	800931c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009338:	2b07      	cmp	r3, #7
 800933a:	d807      	bhi.n	800934c <gen_numname+0xfc>
 800933c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800933e:	1c5a      	adds	r2, r3, #1
 8009340:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009342:	3330      	adds	r3, #48	@ 0x30
 8009344:	443b      	add	r3, r7
 8009346:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800934a:	e000      	b.n	800934e <gen_numname+0xfe>
 800934c:	2120      	movs	r1, #32
 800934e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009350:	1c5a      	adds	r2, r3, #1
 8009352:	627a      	str	r2, [r7, #36]	@ 0x24
 8009354:	68fa      	ldr	r2, [r7, #12]
 8009356:	4413      	add	r3, r2
 8009358:	460a      	mov	r2, r1
 800935a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800935c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800935e:	2b07      	cmp	r3, #7
 8009360:	d9e9      	bls.n	8009336 <gen_numname+0xe6>
}
 8009362:	bf00      	nop
 8009364:	bf00      	nop
 8009366:	3730      	adds	r7, #48	@ 0x30
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800936c:	b480      	push	{r7}
 800936e:	b085      	sub	sp, #20
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009374:	2300      	movs	r3, #0
 8009376:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009378:	230b      	movs	r3, #11
 800937a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800937c:	7bfb      	ldrb	r3, [r7, #15]
 800937e:	b2da      	uxtb	r2, r3
 8009380:	0852      	lsrs	r2, r2, #1
 8009382:	01db      	lsls	r3, r3, #7
 8009384:	4313      	orrs	r3, r2
 8009386:	b2da      	uxtb	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	1c59      	adds	r1, r3, #1
 800938c:	6079      	str	r1, [r7, #4]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	4413      	add	r3, r2
 8009392:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	3b01      	subs	r3, #1
 8009398:	60bb      	str	r3, [r7, #8]
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1ed      	bne.n	800937c <sum_sfn+0x10>
	return sum;
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3714      	adds	r7, #20
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr

080093ae <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 80093ae:	b480      	push	{r7}
 80093b0:	b087      	sub	sp, #28
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	3301      	adds	r3, #1
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	3301      	adds	r3, #1
 80093be:	015b      	lsls	r3, r3, #5
 80093c0:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 80093c2:	2300      	movs	r3, #0
 80093c4:	827b      	strh	r3, [r7, #18]
 80093c6:	2300      	movs	r3, #0
 80093c8:	617b      	str	r3, [r7, #20]
 80093ca:	e017      	b.n	80093fc <xdir_sum+0x4e>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d103      	bne.n	80093da <xdir_sum+0x2c>
			i++;
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	3301      	adds	r3, #1
 80093d6:	617b      	str	r3, [r7, #20]
 80093d8:	e00d      	b.n	80093f6 <xdir_sum+0x48>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 80093da:	8a7b      	ldrh	r3, [r7, #18]
 80093dc:	03db      	lsls	r3, r3, #15
 80093de:	b29a      	uxth	r2, r3
 80093e0:	8a7b      	ldrh	r3, [r7, #18]
 80093e2:	085b      	lsrs	r3, r3, #1
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	4413      	add	r3, r2
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	6879      	ldr	r1, [r7, #4]
 80093ec:	697a      	ldr	r2, [r7, #20]
 80093ee:	440a      	add	r2, r1
 80093f0:	7812      	ldrb	r2, [r2, #0]
 80093f2:	4413      	add	r3, r2
 80093f4:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	3301      	adds	r3, #1
 80093fa:	617b      	str	r3, [r7, #20]
 80093fc:	697a      	ldr	r2, [r7, #20]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	429a      	cmp	r2, r3
 8009402:	d3e3      	bcc.n	80093cc <xdir_sum+0x1e>
		}
	}
	return sum;
 8009404:	8a7b      	ldrh	r3, [r7, #18]
}
 8009406:	4618      	mov	r0, r3
 8009408:	371c      	adds	r7, #28
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b084      	sub	sp, #16
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800941a:	2300      	movs	r3, #0
 800941c:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800941e:	e01f      	b.n	8009460 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8009420:	89bb      	ldrh	r3, [r7, #12]
 8009422:	4618      	mov	r0, r3
 8009424:	f002 ffd8 	bl	800c3d8 <ff_wtoupper>
 8009428:	4603      	mov	r3, r0
 800942a:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800942c:	89fb      	ldrh	r3, [r7, #14]
 800942e:	03db      	lsls	r3, r3, #15
 8009430:	b29a      	uxth	r2, r3
 8009432:	89fb      	ldrh	r3, [r7, #14]
 8009434:	085b      	lsrs	r3, r3, #1
 8009436:	b29b      	uxth	r3, r3
 8009438:	4413      	add	r3, r2
 800943a:	b29a      	uxth	r2, r3
 800943c:	89bb      	ldrh	r3, [r7, #12]
 800943e:	b2db      	uxtb	r3, r3
 8009440:	b29b      	uxth	r3, r3
 8009442:	4413      	add	r3, r2
 8009444:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8009446:	89fb      	ldrh	r3, [r7, #14]
 8009448:	03db      	lsls	r3, r3, #15
 800944a:	b29a      	uxth	r2, r3
 800944c:	89fb      	ldrh	r3, [r7, #14]
 800944e:	085b      	lsrs	r3, r3, #1
 8009450:	b29b      	uxth	r3, r3
 8009452:	4413      	add	r3, r2
 8009454:	b29a      	uxth	r2, r3
 8009456:	89bb      	ldrh	r3, [r7, #12]
 8009458:	0a1b      	lsrs	r3, r3, #8
 800945a:	b29b      	uxth	r3, r3
 800945c:	4413      	add	r3, r2
 800945e:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	1c9a      	adds	r2, r3, #2
 8009464:	607a      	str	r2, [r7, #4]
 8009466:	881b      	ldrh	r3, [r3, #0]
 8009468:	81bb      	strh	r3, [r7, #12]
 800946a:	89bb      	ldrh	r3, [r7, #12]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1d7      	bne.n	8009420 <xname_sum+0xe>
	}
	return sum;
 8009470:	89fb      	ldrh	r3, [r7, #14]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
	...

0800947c <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800947c:	b590      	push	{r4, r7, lr}
 800947e:	b087      	sub	sp, #28
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009494:	4619      	mov	r1, r3
 8009496:	4610      	mov	r0, r2
 8009498:	f7fe fcfc 	bl	8007e94 <move_window>
 800949c:	4603      	mov	r3, r0
 800949e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <load_xdir+0x2e>
 80094a6:	7bfb      	ldrb	r3, [r7, #15]
 80094a8:	e09f      	b.n	80095ea <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	2b85      	cmp	r3, #133	@ 0x85
 80094b2:	d001      	beq.n	80094b8 <load_xdir+0x3c>
 80094b4:	2302      	movs	r3, #2
 80094b6:	e098      	b.n	80095ea <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094bc:	2220      	movs	r2, #32
 80094be:	4619      	mov	r1, r3
 80094c0:	6938      	ldr	r0, [r7, #16]
 80094c2:	f7fe fa88 	bl	80079d6 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	3301      	adds	r3, #1
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	3301      	adds	r3, #1
 80094ce:	015b      	lsls	r3, r3, #5
 80094d0:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	2b5f      	cmp	r3, #95	@ 0x5f
 80094d6:	d903      	bls.n	80094e0 <load_xdir+0x64>
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 80094de:	d901      	bls.n	80094e4 <load_xdir+0x68>
 80094e0:	2302      	movs	r3, #2
 80094e2:	e082      	b.n	80095ea <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 80094e4:	2100      	movs	r1, #0
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f7ff fbf5 	bl	8008cd6 <dir_next>
 80094ec:	4603      	mov	r3, r0
 80094ee:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d001      	beq.n	80094fa <load_xdir+0x7e>
 80094f6:	7bfb      	ldrb	r3, [r7, #15]
 80094f8:	e077      	b.n	80095ea <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009502:	4619      	mov	r1, r3
 8009504:	4610      	mov	r0, r2
 8009506:	f7fe fcc5 	bl	8007e94 <move_window>
 800950a:	4603      	mov	r3, r0
 800950c:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800950e:	7bfb      	ldrb	r3, [r7, #15]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d001      	beq.n	8009518 <load_xdir+0x9c>
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	e068      	b.n	80095ea <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009520:	d001      	beq.n	8009526 <load_xdir+0xaa>
 8009522:	2302      	movs	r3, #2
 8009524:	e061      	b.n	80095ea <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	f103 0020 	add.w	r0, r3, #32
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009530:	2220      	movs	r2, #32
 8009532:	4619      	mov	r1, r3
 8009534:	f7fe fa4f 	bl	80079d6 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	3323      	adds	r3, #35	@ 0x23
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	332c      	adds	r3, #44	@ 0x2c
 8009540:	4a2c      	ldr	r2, [pc, #176]	@ (80095f4 <load_xdir+0x178>)
 8009542:	fba2 2303 	umull	r2, r3, r2, r3
 8009546:	08db      	lsrs	r3, r3, #3
 8009548:	015b      	lsls	r3, r3, #5
 800954a:	68ba      	ldr	r2, [r7, #8]
 800954c:	429a      	cmp	r2, r3
 800954e:	d201      	bcs.n	8009554 <load_xdir+0xd8>
 8009550:	2302      	movs	r3, #2
 8009552:	e04a      	b.n	80095ea <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8009554:	2340      	movs	r3, #64	@ 0x40
 8009556:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8009558:	2100      	movs	r1, #0
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f7ff fbbb 	bl	8008cd6 <dir_next>
 8009560:	4603      	mov	r3, r0
 8009562:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8009564:	7bfb      	ldrb	r3, [r7, #15]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <load_xdir+0xf2>
 800956a:	7bfb      	ldrb	r3, [r7, #15]
 800956c:	e03d      	b.n	80095ea <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009576:	4619      	mov	r1, r3
 8009578:	4610      	mov	r0, r2
 800957a:	f7fe fc8b 	bl	8007e94 <move_window>
 800957e:	4603      	mov	r3, r0
 8009580:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8009582:	7bfb      	ldrb	r3, [r7, #15]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d001      	beq.n	800958c <load_xdir+0x110>
 8009588:	7bfb      	ldrb	r3, [r7, #15]
 800958a:	e02e      	b.n	80095ea <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	2bc1      	cmp	r3, #193	@ 0xc1
 8009594:	d001      	beq.n	800959a <load_xdir+0x11e>
 8009596:	2302      	movs	r3, #2
 8009598:	e027      	b.n	80095ea <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 80095a0:	d208      	bcs.n	80095b4 <load_xdir+0x138>
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	18d0      	adds	r0, r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095ac:	2220      	movs	r2, #32
 80095ae:	4619      	mov	r1, r3
 80095b0:	f7fe fa11 	bl	80079d6 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	3320      	adds	r3, #32
 80095b8:	617b      	str	r3, [r7, #20]
 80095ba:	697a      	ldr	r2, [r7, #20]
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d3ca      	bcc.n	8009558 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 80095c8:	d80e      	bhi.n	80095e8 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 80095ca:	6938      	ldr	r0, [r7, #16]
 80095cc:	f7ff feef 	bl	80093ae <xdir_sum>
 80095d0:	4603      	mov	r3, r0
 80095d2:	461c      	mov	r4, r3
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	3302      	adds	r3, #2
 80095d8:	4618      	mov	r0, r3
 80095da:	f7fe f817 	bl	800760c <ld_word>
 80095de:	4603      	mov	r3, r0
 80095e0:	429c      	cmp	r4, r3
 80095e2:	d001      	beq.n	80095e8 <load_xdir+0x16c>
 80095e4:	2302      	movs	r3, #2
 80095e6:	e000      	b.n	80095ea <load_xdir+0x16e>
	}
	return FR_OK;
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	371c      	adds	r7, #28
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd90      	pop	{r4, r7, pc}
 80095f2:	bf00      	nop
 80095f4:	88888889 	.word	0x88888889

080095f8 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 80095f8:	b5b0      	push	{r4, r5, r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8009602:	6839      	ldr	r1, [r7, #0]
 8009604:	6808      	ldr	r0, [r1, #0]
 8009606:	6879      	ldr	r1, [r7, #4]
 8009608:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	6a08      	ldr	r0, [r1, #32]
 800960e:	6879      	ldr	r1, [r7, #4]
 8009610:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8009612:	6839      	ldr	r1, [r7, #0]
 8009614:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8009616:	b2c8      	uxtb	r0, r1
 8009618:	6879      	ldr	r1, [r7, #4]
 800961a:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800961c:	6839      	ldr	r1, [r7, #0]
 800961e:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8009620:	2000      	movs	r0, #0
 8009622:	460c      	mov	r4, r1
 8009624:	4605      	mov	r5, r0
 8009626:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 800962a:	2300      	movs	r3, #0
 800962c:	6879      	ldr	r1, [r7, #4]
 800962e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800963e:	4619      	mov	r1, r3
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f7ff fab4 	bl	8008bae <dir_sdi>
 8009646:	4603      	mov	r3, r0
 8009648:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800964a:	7bfb      	ldrb	r3, [r7, #15]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d104      	bne.n	800965a <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f7ff ff13 	bl	800947c <load_xdir>
 8009656:	4603      	mov	r3, r0
 8009658:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800965a:	7bfb      	ldrb	r3, [r7, #15]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3710      	adds	r7, #16
 8009660:	46bd      	mov	sp, r7
 8009662:	bdb0      	pop	{r4, r5, r7, pc}

08009664 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8009664:	b590      	push	{r4, r7, lr}
 8009666:	b087      	sub	sp, #28
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	695b      	ldr	r3, [r3, #20]
 8009672:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	1c9c      	adds	r4, r3, #2
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f7ff fe98 	bl	80093ae <xdir_sum>
 800967e:	4603      	mov	r3, r0
 8009680:	4619      	mov	r1, r3
 8009682:	4620      	mov	r0, r4
 8009684:	f7fe f8d8 	bl	8007838 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	3301      	adds	r3, #1
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	3301      	adds	r3, #1
 8009690:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009696:	4619      	mov	r1, r3
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f7ff fa88 	bl	8008bae <dir_sdi>
 800969e:	4603      	mov	r3, r0
 80096a0:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80096a2:	e026      	b.n	80096f2 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ac:	4619      	mov	r1, r3
 80096ae:	4610      	mov	r0, r2
 80096b0:	f7fe fbf0 	bl	8007e94 <move_window>
 80096b4:	4603      	mov	r3, r0
 80096b6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80096b8:	7dfb      	ldrb	r3, [r7, #23]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d11d      	bne.n	80096fa <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096c2:	2220      	movs	r2, #32
 80096c4:	68f9      	ldr	r1, [r7, #12]
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7fe f985 	bl	80079d6 <mem_cpy>
		dp->obj.fs->wflag = 1;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2201      	movs	r2, #1
 80096d2:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	3b01      	subs	r3, #1
 80096d8:	613b      	str	r3, [r7, #16]
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d00e      	beq.n	80096fe <store_xdir+0x9a>
		dirb += SZDIRE;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	3320      	adds	r3, #32
 80096e4:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 80096e6:	2100      	movs	r1, #0
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f7ff faf4 	bl	8008cd6 <dir_next>
 80096ee:	4603      	mov	r3, r0
 80096f0:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80096f2:	7dfb      	ldrb	r3, [r7, #23]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d0d5      	beq.n	80096a4 <store_xdir+0x40>
 80096f8:	e002      	b.n	8009700 <store_xdir+0x9c>
		if (res != FR_OK) break;
 80096fa:	bf00      	nop
 80096fc:	e000      	b.n	8009700 <store_xdir+0x9c>
		if (--nent == 0) break;
 80096fe:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8009700:	7dfb      	ldrb	r3, [r7, #23]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d002      	beq.n	800970c <store_xdir+0xa8>
 8009706:	7dfb      	ldrb	r3, [r7, #23]
 8009708:	2b01      	cmp	r3, #1
 800970a:	d101      	bne.n	8009710 <store_xdir+0xac>
 800970c:	7dfb      	ldrb	r3, [r7, #23]
 800970e:	e000      	b.n	8009712 <store_xdir+0xae>
 8009710:	2302      	movs	r3, #2
}
 8009712:	4618      	mov	r0, r3
 8009714:	371c      	adds	r7, #28
 8009716:	46bd      	mov	sp, r7
 8009718:	bd90      	pop	{r4, r7, pc}

0800971a <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800971a:	b590      	push	{r4, r7, lr}
 800971c:	b085      	sub	sp, #20
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
 8009722:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8009724:	2240      	movs	r2, #64	@ 0x40
 8009726:	2100      	movs	r1, #0
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f7fe f975 	bl	8007a18 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2285      	movs	r2, #133	@ 0x85
 8009732:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	3320      	adds	r3, #32
 8009738:	22c0      	movs	r2, #192	@ 0xc0
 800973a:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800973c:	2300      	movs	r3, #0
 800973e:	72bb      	strb	r3, [r7, #10]
 8009740:	2301      	movs	r3, #1
 8009742:	72fb      	strb	r3, [r7, #11]
 8009744:	2301      	movs	r3, #1
 8009746:	813b      	strh	r3, [r7, #8]
 8009748:	2340      	movs	r3, #64	@ 0x40
 800974a:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	1c5a      	adds	r2, r3, #1
 8009750:	60fa      	str	r2, [r7, #12]
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	4413      	add	r3, r2
 8009756:	22c1      	movs	r2, #193	@ 0xc1
 8009758:	701a      	strb	r2, [r3, #0]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	1c5a      	adds	r2, r3, #1
 800975e:	60fa      	str	r2, [r7, #12]
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	4413      	add	r3, r2
 8009764:	2200      	movs	r2, #0
 8009766:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8009768:	893b      	ldrh	r3, [r7, #8]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00b      	beq.n	8009786 <create_xdir+0x6c>
 800976e:	7abb      	ldrb	r3, [r7, #10]
 8009770:	005b      	lsls	r3, r3, #1
 8009772:	683a      	ldr	r2, [r7, #0]
 8009774:	4413      	add	r3, r2
 8009776:	881b      	ldrh	r3, [r3, #0]
 8009778:	813b      	strh	r3, [r7, #8]
 800977a:	893b      	ldrh	r3, [r7, #8]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d002      	beq.n	8009786 <create_xdir+0x6c>
 8009780:	7abb      	ldrb	r3, [r7, #10]
 8009782:	3301      	adds	r3, #1
 8009784:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	4413      	add	r3, r2
 800978c:	893a      	ldrh	r2, [r7, #8]
 800978e:	4611      	mov	r1, r2
 8009790:	4618      	mov	r0, r3
 8009792:	f7fe f851 	bl	8007838 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	3302      	adds	r3, #2
 800979a:	60fb      	str	r3, [r7, #12]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f003 031f 	and.w	r3, r3, #31
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1e0      	bne.n	8009768 <create_xdir+0x4e>
		nb++;
 80097a6:	7afb      	ldrb	r3, [r7, #11]
 80097a8:	3301      	adds	r3, #1
 80097aa:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 80097ac:	7abb      	ldrb	r3, [r7, #10]
 80097ae:	005b      	lsls	r3, r3, #1
 80097b0:	683a      	ldr	r2, [r7, #0]
 80097b2:	4413      	add	r3, r2
 80097b4:	881b      	ldrh	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1c8      	bne.n	800974c <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	3323      	adds	r3, #35	@ 0x23
 80097be:	7aba      	ldrb	r2, [r7, #10]
 80097c0:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	3301      	adds	r3, #1
 80097c6:	7afa      	ldrb	r2, [r7, #11]
 80097c8:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80097d0:	6838      	ldr	r0, [r7, #0]
 80097d2:	f7ff fe1e 	bl	8009412 <xname_sum>
 80097d6:	4603      	mov	r3, r0
 80097d8:	4619      	mov	r1, r3
 80097da:	4620      	mov	r0, r4
 80097dc:	f7fe f82c 	bl	8007838 <st_word>
}
 80097e0:	bf00      	nop
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd90      	pop	{r4, r7, pc}

080097e8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b086      	sub	sp, #24
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80097f2:	2304      	movs	r3, #4
 80097f4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80097fc:	23ff      	movs	r3, #255	@ 0xff
 80097fe:	757b      	strb	r3, [r7, #21]
 8009800:	23ff      	movs	r3, #255	@ 0xff
 8009802:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8009804:	e09f      	b.n	8009946 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800980a:	4619      	mov	r1, r3
 800980c:	6938      	ldr	r0, [r7, #16]
 800980e:	f7fe fb41 	bl	8007e94 <move_window>
 8009812:	4603      	mov	r3, r0
 8009814:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009816:	7dfb      	ldrb	r3, [r7, #23]
 8009818:	2b00      	cmp	r3, #0
 800981a:	f040 809a 	bne.w	8009952 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8009826:	7dbb      	ldrb	r3, [r7, #22]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d102      	bne.n	8009832 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800982c:	2304      	movs	r3, #4
 800982e:	75fb      	strb	r3, [r7, #23]
 8009830:	e096      	b.n	8009960 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	2b04      	cmp	r3, #4
 8009838:	d118      	bne.n	800986c <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800983a:	7dbb      	ldrb	r3, [r7, #22]
 800983c:	2b85      	cmp	r3, #133	@ 0x85
 800983e:	d179      	bne.n	8009934 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f7ff fe17 	bl	800947c <load_xdir>
 800984e:	4603      	mov	r3, r0
 8009850:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8009852:	7dfb      	ldrb	r3, [r7, #23]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d17e      	bne.n	8009956 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	695b      	ldr	r3, [r3, #20]
 800985c:	3304      	adds	r3, #4
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009864:	b2da      	uxtb	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	719a      	strb	r2, [r3, #6]
					}
					break;
 800986a:	e074      	b.n	8009956 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009870:	330b      	adds	r3, #11
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009878:	73fb      	strb	r3, [r7, #15]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	7bfa      	ldrb	r2, [r7, #15]
 800987e:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8009880:	7dbb      	ldrb	r3, [r7, #22]
 8009882:	2be5      	cmp	r3, #229	@ 0xe5
 8009884:	d00e      	beq.n	80098a4 <dir_read+0xbc>
 8009886:	7dbb      	ldrb	r3, [r7, #22]
 8009888:	2b2e      	cmp	r3, #46	@ 0x2e
 800988a:	d00b      	beq.n	80098a4 <dir_read+0xbc>
 800988c:	7bfb      	ldrb	r3, [r7, #15]
 800988e:	f023 0320 	bic.w	r3, r3, #32
 8009892:	2b08      	cmp	r3, #8
 8009894:	bf0c      	ite	eq
 8009896:	2301      	moveq	r3, #1
 8009898:	2300      	movne	r3, #0
 800989a:	b2db      	uxtb	r3, r3
 800989c:	461a      	mov	r2, r3
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d002      	beq.n	80098aa <dir_read+0xc2>
				ord = 0xFF;
 80098a4:	23ff      	movs	r3, #255	@ 0xff
 80098a6:	757b      	strb	r3, [r7, #21]
 80098a8:	e044      	b.n	8009934 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80098aa:	7bfb      	ldrb	r3, [r7, #15]
 80098ac:	2b0f      	cmp	r3, #15
 80098ae:	d12f      	bne.n	8009910 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80098b0:	7dbb      	ldrb	r3, [r7, #22]
 80098b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00d      	beq.n	80098d6 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098be:	7b5b      	ldrb	r3, [r3, #13]
 80098c0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80098c2:	7dbb      	ldrb	r3, [r7, #22]
 80098c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098c8:	75bb      	strb	r3, [r7, #22]
 80098ca:	7dbb      	ldrb	r3, [r7, #22]
 80098cc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80098d6:	7dba      	ldrb	r2, [r7, #22]
 80098d8:	7d7b      	ldrb	r3, [r7, #21]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d115      	bne.n	800990a <dir_read+0x122>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098e2:	330d      	adds	r3, #13
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	7d3a      	ldrb	r2, [r7, #20]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d10e      	bne.n	800990a <dir_read+0x122>
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	691a      	ldr	r2, [r3, #16]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098f4:	4619      	mov	r1, r3
 80098f6:	4610      	mov	r0, r2
 80098f8:	f7ff fbde 	bl	80090b8 <pick_lfn>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d003      	beq.n	800990a <dir_read+0x122>
 8009902:	7d7b      	ldrb	r3, [r7, #21]
 8009904:	3b01      	subs	r3, #1
 8009906:	b2db      	uxtb	r3, r3
 8009908:	e000      	b.n	800990c <dir_read+0x124>
 800990a:	23ff      	movs	r3, #255	@ 0xff
 800990c:	757b      	strb	r3, [r7, #21]
 800990e:	e011      	b.n	8009934 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8009910:	7d7b      	ldrb	r3, [r7, #21]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d109      	bne.n	800992a <dir_read+0x142>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800991a:	4618      	mov	r0, r3
 800991c:	f7ff fd26 	bl	800936c <sum_sfn>
 8009920:	4603      	mov	r3, r0
 8009922:	461a      	mov	r2, r3
 8009924:	7d3b      	ldrb	r3, [r7, #20]
 8009926:	4293      	cmp	r3, r2
 8009928:	d017      	beq.n	800995a <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f04f 32ff 	mov.w	r2, #4294967295
 8009930:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 8009932:	e012      	b.n	800995a <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8009934:	2100      	movs	r1, #0
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f7ff f9cd 	bl	8008cd6 <dir_next>
 800993c:	4603      	mov	r3, r0
 800993e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009940:	7dfb      	ldrb	r3, [r7, #23]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d10b      	bne.n	800995e <dir_read+0x176>
	while (dp->sect) {
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800994a:	2b00      	cmp	r3, #0
 800994c:	f47f af5b 	bne.w	8009806 <dir_read+0x1e>
 8009950:	e006      	b.n	8009960 <dir_read+0x178>
		if (res != FR_OK) break;
 8009952:	bf00      	nop
 8009954:	e004      	b.n	8009960 <dir_read+0x178>
					break;
 8009956:	bf00      	nop
 8009958:	e002      	b.n	8009960 <dir_read+0x178>
					break;
 800995a:	bf00      	nop
 800995c:	e000      	b.n	8009960 <dir_read+0x178>
		if (res != FR_OK) break;
 800995e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009960:	7dfb      	ldrb	r3, [r7, #23]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d002      	beq.n	800996c <dir_read+0x184>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800996c:	7dfb      	ldrb	r3, [r7, #23]
}
 800996e:	4618      	mov	r0, r3
 8009970:	3718      	adds	r7, #24
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009976:	b590      	push	{r4, r7, lr}
 8009978:	b089      	sub	sp, #36	@ 0x24
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009984:	2100      	movs	r1, #0
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f7ff f911 	bl	8008bae <dir_sdi>
 800998c:	4603      	mov	r3, r0
 800998e:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8009990:	7ffb      	ldrb	r3, [r7, #31]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d001      	beq.n	800999a <dir_find+0x24>
 8009996:	7ffb      	ldrb	r3, [r7, #31]
 8009998:	e113      	b.n	8009bc2 <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	2b04      	cmp	r3, #4
 80099a0:	d165      	bne.n	8009a6e <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7ff fd33 	bl	8009412 <xname_sum>
 80099ac:	4603      	mov	r3, r0
 80099ae:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 80099b0:	e050      	b.n	8009a54 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	695b      	ldr	r3, [r3, #20]
 80099b6:	3324      	adds	r3, #36	@ 0x24
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7fd fe27 	bl	800760c <ld_word>
 80099be:	4603      	mov	r3, r0
 80099c0:	461a      	mov	r2, r3
 80099c2:	893b      	ldrh	r3, [r7, #8]
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d144      	bne.n	8009a52 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	695b      	ldr	r3, [r3, #20]
 80099cc:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80099d0:	76fb      	strb	r3, [r7, #27]
 80099d2:	2340      	movs	r3, #64	@ 0x40
 80099d4:	617b      	str	r3, [r7, #20]
 80099d6:	2300      	movs	r3, #0
 80099d8:	613b      	str	r3, [r7, #16]
 80099da:	e029      	b.n	8009a30 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	f003 031f 	and.w	r3, r3, #31
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d102      	bne.n	80099ec <dir_find+0x76>
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	3302      	adds	r3, #2
 80099ea:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	695a      	ldr	r2, [r3, #20]
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	4413      	add	r3, r2
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7fd fe09 	bl	800760c <ld_word>
 80099fa:	4603      	mov	r3, r0
 80099fc:	4618      	mov	r0, r3
 80099fe:	f002 fceb 	bl	800c3d8 <ff_wtoupper>
 8009a02:	4603      	mov	r3, r0
 8009a04:	461c      	mov	r4, r3
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	691a      	ldr	r2, [r3, #16]
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	005b      	lsls	r3, r3, #1
 8009a0e:	4413      	add	r3, r2
 8009a10:	881b      	ldrh	r3, [r3, #0]
 8009a12:	4618      	mov	r0, r3
 8009a14:	f002 fce0 	bl	800c3d8 <ff_wtoupper>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	429c      	cmp	r4, r3
 8009a1c:	d10c      	bne.n	8009a38 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8009a1e:	7efb      	ldrb	r3, [r7, #27]
 8009a20:	3b01      	subs	r3, #1
 8009a22:	76fb      	strb	r3, [r7, #27]
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	3302      	adds	r3, #2
 8009a28:	617b      	str	r3, [r7, #20]
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	613b      	str	r3, [r7, #16]
 8009a30:	7efb      	ldrb	r3, [r7, #27]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1d2      	bne.n	80099dc <dir_find+0x66>
 8009a36:	e000      	b.n	8009a3a <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8009a38:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8009a3a:	7efb      	ldrb	r3, [r7, #27]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d109      	bne.n	8009a54 <dir_find+0xde>
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	691a      	ldr	r2, [r3, #16]
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	005b      	lsls	r3, r3, #1
 8009a48:	4413      	add	r3, r2
 8009a4a:	881b      	ldrh	r3, [r3, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d00b      	beq.n	8009a68 <dir_find+0xf2>
 8009a50:	e000      	b.n	8009a54 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8009a52:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8009a54:	2100      	movs	r1, #0
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f7ff fec6 	bl	80097e8 <dir_read>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	77fb      	strb	r3, [r7, #31]
 8009a60:	7ffb      	ldrb	r3, [r7, #31]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d0a5      	beq.n	80099b2 <dir_find+0x3c>
 8009a66:	e000      	b.n	8009a6a <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8009a68:	bf00      	nop
		}
		return res;
 8009a6a:	7ffb      	ldrb	r3, [r7, #31]
 8009a6c:	e0a9      	b.n	8009bc2 <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009a6e:	23ff      	movs	r3, #255	@ 0xff
 8009a70:	773b      	strb	r3, [r7, #28]
 8009a72:	7f3b      	ldrb	r3, [r7, #28]
 8009a74:	777b      	strb	r3, [r7, #29]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f04f 32ff 	mov.w	r2, #4294967295
 8009a7c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a82:	4619      	mov	r1, r3
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f7fe fa05 	bl	8007e94 <move_window>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8009a8e:	7ffb      	ldrb	r3, [r7, #31]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f040 8090 	bne.w	8009bb6 <dir_find+0x240>
		c = dp->dir[DIR_Name];
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009a9e:	7fbb      	ldrb	r3, [r7, #30]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d102      	bne.n	8009aaa <dir_find+0x134>
 8009aa4:	2304      	movs	r3, #4
 8009aa6:	77fb      	strb	r3, [r7, #31]
 8009aa8:	e08a      	b.n	8009bc0 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009aae:	330b      	adds	r3, #11
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ab6:	72fb      	strb	r3, [r7, #11]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	7afa      	ldrb	r2, [r7, #11]
 8009abc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009abe:	7fbb      	ldrb	r3, [r7, #30]
 8009ac0:	2be5      	cmp	r3, #229	@ 0xe5
 8009ac2:	d007      	beq.n	8009ad4 <dir_find+0x15e>
 8009ac4:	7afb      	ldrb	r3, [r7, #11]
 8009ac6:	f003 0308 	and.w	r3, r3, #8
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d009      	beq.n	8009ae2 <dir_find+0x16c>
 8009ace:	7afb      	ldrb	r3, [r7, #11]
 8009ad0:	2b0f      	cmp	r3, #15
 8009ad2:	d006      	beq.n	8009ae2 <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009ad4:	23ff      	movs	r3, #255	@ 0xff
 8009ad6:	777b      	strb	r3, [r7, #29]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f04f 32ff 	mov.w	r2, #4294967295
 8009ade:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009ae0:	e05e      	b.n	8009ba0 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009ae2:	7afb      	ldrb	r3, [r7, #11]
 8009ae4:	2b0f      	cmp	r3, #15
 8009ae6:	d136      	bne.n	8009b56 <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8009aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d154      	bne.n	8009ba0 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009af6:	7fbb      	ldrb	r3, [r7, #30]
 8009af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00d      	beq.n	8009b1c <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b04:	7b5b      	ldrb	r3, [r3, #13]
 8009b06:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009b08:	7fbb      	ldrb	r3, [r7, #30]
 8009b0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b0e:	77bb      	strb	r3, [r7, #30]
 8009b10:	7fbb      	ldrb	r3, [r7, #30]
 8009b12:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009b1c:	7fba      	ldrb	r2, [r7, #30]
 8009b1e:	7f7b      	ldrb	r3, [r7, #29]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d115      	bne.n	8009b50 <dir_find+0x1da>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b28:	330d      	adds	r3, #13
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	7f3a      	ldrb	r2, [r7, #28]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d10e      	bne.n	8009b50 <dir_find+0x1da>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	691a      	ldr	r2, [r3, #16]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	4610      	mov	r0, r2
 8009b3e:	f7ff fa4b 	bl	8008fd8 <cmp_lfn>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d003      	beq.n	8009b50 <dir_find+0x1da>
 8009b48:	7f7b      	ldrb	r3, [r7, #29]
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	e000      	b.n	8009b52 <dir_find+0x1dc>
 8009b50:	23ff      	movs	r3, #255	@ 0xff
 8009b52:	777b      	strb	r3, [r7, #29]
 8009b54:	e024      	b.n	8009ba0 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009b56:	7f7b      	ldrb	r3, [r7, #29]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d109      	bne.n	8009b70 <dir_find+0x1fa>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7ff fc03 	bl	800936c <sum_sfn>
 8009b66:	4603      	mov	r3, r0
 8009b68:	461a      	mov	r2, r3
 8009b6a:	7f3b      	ldrb	r3, [r7, #28]
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d024      	beq.n	8009bba <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8009b76:	f003 0301 	and.w	r3, r3, #1
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10a      	bne.n	8009b94 <dir_find+0x21e>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	3340      	adds	r3, #64	@ 0x40
 8009b86:	220b      	movs	r2, #11
 8009b88:	4619      	mov	r1, r3
 8009b8a:	f7fd ff60 	bl	8007a4e <mem_cmp>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d014      	beq.n	8009bbe <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009b94:	23ff      	movs	r3, #255	@ 0xff
 8009b96:	777b      	strb	r3, [r7, #29]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b9e:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7ff f897 	bl	8008cd6 <dir_next>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8009bac:	7ffb      	ldrb	r3, [r7, #31]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f43f af65 	beq.w	8009a7e <dir_find+0x108>
 8009bb4:	e004      	b.n	8009bc0 <dir_find+0x24a>
		if (res != FR_OK) break;
 8009bb6:	bf00      	nop
 8009bb8:	e002      	b.n	8009bc0 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009bba:	bf00      	nop
 8009bbc:	e000      	b.n	8009bc0 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009bbe:	bf00      	nop

	return res;
 8009bc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3724      	adds	r7, #36	@ 0x24
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd90      	pop	{r4, r7, pc}
	...

08009bcc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009bcc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009bd0:	b0a0      	sub	sp, #128	@ 0x80
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8009be2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d001      	beq.n	8009bee <dir_register+0x22>
 8009bea:	2306      	movs	r3, #6
 8009bec:	e192      	b.n	8009f14 <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009bee:	2300      	movs	r3, #0
 8009bf0:	677b      	str	r3, [r7, #116]	@ 0x74
 8009bf2:	e002      	b.n	8009bfa <dir_register+0x2e>
 8009bf4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	677b      	str	r3, [r7, #116]	@ 0x74
 8009bfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bfc:	691a      	ldr	r2, [r3, #16]
 8009bfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c00:	005b      	lsls	r3, r3, #1
 8009c02:	4413      	add	r3, r2
 8009c04:	881b      	ldrh	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1f4      	bne.n	8009bf4 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009c0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	2b04      	cmp	r3, #4
 8009c10:	f040 80a3 	bne.w	8009d5a <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8009c14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c16:	330e      	adds	r3, #14
 8009c18:	4aa4      	ldr	r2, [pc, #656]	@ (8009eac <dir_register+0x2e0>)
 8009c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c1e:	08db      	lsrs	r3, r3, #3
 8009c20:	3302      	adds	r3, #2
 8009c22:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8009c24:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f7ff f93b 	bl	8008ea2 <dir_alloc>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 8009c32:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d002      	beq.n	8009c40 <dir_register+0x74>
 8009c3a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009c3e:	e169      	b.n	8009f14 <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c46:	3b01      	subs	r3, #1
 8009c48:	015b      	lsls	r3, r3, #5
 8009c4a:	1ad2      	subs	r2, r2, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d076      	beq.n	8009d46 <dir_register+0x17a>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	79db      	ldrb	r3, [r3, #7]
 8009c5c:	f003 0304 	and.w	r3, r3, #4
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d070      	beq.n	8009d46 <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009c6a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009c6c:	8949      	ldrh	r1, [r1, #10]
 8009c6e:	4608      	mov	r0, r1
 8009c70:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009c72:	8989      	ldrh	r1, [r1, #12]
 8009c74:	fb00 f101 	mul.w	r1, r0, r1
 8009c78:	2000      	movs	r0, #0
 8009c7a:	460c      	mov	r4, r1
 8009c7c:	4605      	mov	r5, r0
 8009c7e:	eb12 0804 	adds.w	r8, r2, r4
 8009c82:	eb43 0905 	adc.w	r9, r3, r5
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7fe fd2c 	bl	80086ec <fill_first_frag>
 8009c94:	4603      	mov	r3, r0
 8009c96:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8009c9a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d002      	beq.n	8009ca8 <dir_register+0xdc>
 8009ca2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009ca6:	e135      	b.n	8009f14 <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cae:	f04f 32ff 	mov.w	r2, #4294967295
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	f7fe fd49 	bl	800874a <fill_last_frag>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8009cbe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d002      	beq.n	8009ccc <dir_register+0x100>
 8009cc6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009cca:	e123      	b.n	8009f14 <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	f107 0308 	add.w	r3, r7, #8
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7ff fc8f 	bl	80095f8 <load_obj_dir>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8009ce0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <dir_register+0x122>
 8009ce8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009cec:	e112      	b.n	8009f14 <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8009cee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cf0:	695b      	ldr	r3, [r3, #20]
 8009cf2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009cfc:	4608      	mov	r0, r1
 8009cfe:	f7fd fde2 	bl	80078c6 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8009d02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d04:	695b      	ldr	r3, [r3, #20]
 8009d06:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009d10:	4608      	mov	r0, r1
 8009d12:	f7fd fdd8 	bl	80078c6 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	79da      	ldrb	r2, [r3, #7]
 8009d1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d1c:	695b      	ldr	r3, [r3, #20]
 8009d1e:	3321      	adds	r3, #33	@ 0x21
 8009d20:	f042 0201 	orr.w	r2, r2, #1
 8009d24:	b2d2      	uxtb	r2, r2
 8009d26:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8009d28:	f107 0308 	add.w	r3, r7, #8
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f7ff fc99 	bl	8009664 <store_xdir>
 8009d32:	4603      	mov	r3, r0
 8009d34:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8009d38:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d002      	beq.n	8009d46 <dir_register+0x17a>
 8009d40:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009d44:	e0e6      	b.n	8009f14 <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8009d46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d48:	695a      	ldr	r2, [r3, #20]
 8009d4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	4619      	mov	r1, r3
 8009d50:	4610      	mov	r0, r2
 8009d52:	f7ff fce2 	bl	800971a <create_xdir>
		return FR_OK;
 8009d56:	2300      	movs	r3, #0
 8009d58:	e0dc      	b.n	8009f14 <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009d60:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8009d64:	220c      	movs	r2, #12
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7fd fe35 	bl	80079d6 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009d6c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009d70:	f003 0301 	and.w	r3, r3, #1
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d033      	beq.n	8009de0 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2240      	movs	r2, #64	@ 0x40
 8009d7c:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 8009d80:	2301      	movs	r3, #1
 8009d82:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009d84:	e016      	b.n	8009db4 <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8009d8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d8e:	691a      	ldr	r2, [r3, #16]
 8009d90:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8009d94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d96:	f7ff fa5b 	bl	8009250 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7ff fdeb 	bl	8009976 <dir_find>
 8009da0:	4603      	mov	r3, r0
 8009da2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 8009da6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d106      	bne.n	8009dbc <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 8009dae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009db0:	3301      	adds	r3, #1
 8009db2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009db4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009db6:	2b63      	cmp	r3, #99	@ 0x63
 8009db8:	d9e5      	bls.n	8009d86 <dir_register+0x1ba>
 8009dba:	e000      	b.n	8009dbe <dir_register+0x1f2>
			if (res != FR_OK) break;
 8009dbc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009dbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009dc0:	2b64      	cmp	r3, #100	@ 0x64
 8009dc2:	d101      	bne.n	8009dc8 <dir_register+0x1fc>
 8009dc4:	2307      	movs	r3, #7
 8009dc6:	e0a5      	b.n	8009f14 <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009dc8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009dcc:	2b04      	cmp	r3, #4
 8009dce:	d002      	beq.n	8009dd6 <dir_register+0x20a>
 8009dd0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009dd4:	e09e      	b.n	8009f14 <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009dd6:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009de0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009de4:	f003 0302 	and.w	r3, r3, #2
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d007      	beq.n	8009dfc <dir_register+0x230>
 8009dec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009dee:	330c      	adds	r3, #12
 8009df0:	4a2f      	ldr	r2, [pc, #188]	@ (8009eb0 <dir_register+0x2e4>)
 8009df2:	fba2 2303 	umull	r2, r3, r2, r3
 8009df6:	089b      	lsrs	r3, r3, #2
 8009df8:	3301      	adds	r3, #1
 8009dfa:	e000      	b.n	8009dfe <dir_register+0x232>
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009e00:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7ff f84d 	bl	8008ea2 <dir_alloc>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009e0e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d14f      	bne.n	8009eb6 <dir_register+0x2ea>
 8009e16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d049      	beq.n	8009eb6 <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e28:	015b      	lsls	r3, r3, #5
 8009e2a:	1ad3      	subs	r3, r2, r3
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f7fe febd 	bl	8008bae <dir_sdi>
 8009e34:	4603      	mov	r3, r0
 8009e36:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 8009e3a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d139      	bne.n	8009eb6 <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	3340      	adds	r3, #64	@ 0x40
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7ff fa90 	bl	800936c <sum_sfn>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e56:	4619      	mov	r1, r3
 8009e58:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009e5a:	f7fe f81b 	bl	8007e94 <move_window>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 8009e64:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d123      	bne.n	8009eb4 <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009e6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e6e:	6918      	ldr	r0, [r3, #16]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8009e74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e76:	b2da      	uxtb	r2, r3
 8009e78:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009e7c:	f7ff f980 	bl	8009180 <put_lfn>
				fs->wflag = 1;
 8009e80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e82:	2201      	movs	r2, #1
 8009e84:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009e86:	2100      	movs	r1, #0
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f7fe ff24 	bl	8008cd6 <dir_next>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 8009e94:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d10c      	bne.n	8009eb6 <dir_register+0x2ea>
 8009e9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	673b      	str	r3, [r7, #112]	@ 0x70
 8009ea2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d1d4      	bne.n	8009e52 <dir_register+0x286>
 8009ea8:	e005      	b.n	8009eb6 <dir_register+0x2ea>
 8009eaa:	bf00      	nop
 8009eac:	88888889 	.word	0x88888889
 8009eb0:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8009eb4:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009eb6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d128      	bne.n	8009f10 <dir_register+0x344>
		res = move_window(fs, dp->sect);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009ec6:	f7fd ffe5 	bl	8007e94 <move_window>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 8009ed0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d11b      	bne.n	8009f10 <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009edc:	2220      	movs	r2, #32
 8009ede:	2100      	movs	r1, #0
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7fd fd99 	bl	8007a18 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	3340      	adds	r3, #64	@ 0x40
 8009eee:	220b      	movs	r2, #11
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	f7fd fd70 	bl	80079d6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f00:	330c      	adds	r3, #12
 8009f02:	f002 0218 	and.w	r2, r2, #24
 8009f06:	b2d2      	uxtb	r2, r2
 8009f08:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009f0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009f10:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3780      	adds	r7, #128	@ 0x80
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009f1e:	bf00      	nop

08009f20 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b08a      	sub	sp, #40	@ 0x28
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	613b      	str	r3, [r7, #16]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	60fb      	str	r3, [r7, #12]
 8009f38:	2300      	movs	r3, #0
 8009f3a:	617b      	str	r3, [r7, #20]
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	1c5a      	adds	r2, r3, #1
 8009f44:	61ba      	str	r2, [r7, #24]
 8009f46:	693a      	ldr	r2, [r7, #16]
 8009f48:	4413      	add	r3, r2
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009f4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009f50:	2b1f      	cmp	r3, #31
 8009f52:	d940      	bls.n	8009fd6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009f54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009f56:	2b2f      	cmp	r3, #47	@ 0x2f
 8009f58:	d006      	beq.n	8009f68 <create_name+0x48>
 8009f5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009f5c:	2b5c      	cmp	r3, #92	@ 0x5c
 8009f5e:	d110      	bne.n	8009f82 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009f60:	e002      	b.n	8009f68 <create_name+0x48>
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	3301      	adds	r3, #1
 8009f66:	61bb      	str	r3, [r7, #24]
 8009f68:	693a      	ldr	r2, [r7, #16]
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	2b2f      	cmp	r3, #47	@ 0x2f
 8009f72:	d0f6      	beq.n	8009f62 <create_name+0x42>
 8009f74:	693a      	ldr	r2, [r7, #16]
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	4413      	add	r3, r2
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	2b5c      	cmp	r3, #92	@ 0x5c
 8009f7e:	d0f0      	beq.n	8009f62 <create_name+0x42>
			break;
 8009f80:	e02a      	b.n	8009fd8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	2bfe      	cmp	r3, #254	@ 0xfe
 8009f86:	d901      	bls.n	8009f8c <create_name+0x6c>
 8009f88:	2306      	movs	r3, #6
 8009f8a:	e17d      	b.n	800a288 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009f8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009f92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009f94:	2101      	movs	r1, #1
 8009f96:	4618      	mov	r0, r3
 8009f98:	f002 f9e2 	bl	800c360 <ff_convert>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009fa0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d101      	bne.n	8009faa <create_name+0x8a>
 8009fa6:	2306      	movs	r3, #6
 8009fa8:	e16e      	b.n	800a288 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009faa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009fac:	2b7f      	cmp	r3, #127	@ 0x7f
 8009fae:	d809      	bhi.n	8009fc4 <create_name+0xa4>
 8009fb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	488d      	ldr	r0, [pc, #564]	@ (800a1ec <create_name+0x2cc>)
 8009fb6:	f7fd fd71 	bl	8007a9c <chk_chr>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d001      	beq.n	8009fc4 <create_name+0xa4>
 8009fc0:	2306      	movs	r3, #6
 8009fc2:	e161      	b.n	800a288 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	1c5a      	adds	r2, r3, #1
 8009fc8:	617a      	str	r2, [r7, #20]
 8009fca:	005b      	lsls	r3, r3, #1
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	4413      	add	r3, r2
 8009fd0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009fd2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009fd4:	e7b4      	b.n	8009f40 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009fd6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009fd8:	693a      	ldr	r2, [r7, #16]
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	441a      	add	r2, r3
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009fe2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009fe4:	2b1f      	cmp	r3, #31
 8009fe6:	d801      	bhi.n	8009fec <create_name+0xcc>
 8009fe8:	2304      	movs	r3, #4
 8009fea:	e000      	b.n	8009fee <create_name+0xce>
 8009fec:	2300      	movs	r3, #0
 8009fee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009ff2:	e011      	b.n	800a018 <create_name+0xf8>
		w = lfn[di - 1];
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009ffa:	3b01      	subs	r3, #1
 8009ffc:	005b      	lsls	r3, r3, #1
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	4413      	add	r3, r2
 800a002:	881b      	ldrh	r3, [r3, #0]
 800a004:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800a006:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a008:	2b20      	cmp	r3, #32
 800a00a:	d002      	beq.n	800a012 <create_name+0xf2>
 800a00c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a00e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a010:	d106      	bne.n	800a020 <create_name+0x100>
		di--;
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	3b01      	subs	r3, #1
 800a016:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d1ea      	bne.n	8009ff4 <create_name+0xd4>
 800a01e:	e000      	b.n	800a022 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800a020:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	005b      	lsls	r3, r3, #1
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	4413      	add	r3, r2
 800a02a:	2200      	movs	r2, #0
 800a02c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d101      	bne.n	800a038 <create_name+0x118>
 800a034:	2306      	movs	r3, #6
 800a036:	e127      	b.n	800a288 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	3340      	adds	r3, #64	@ 0x40
 800a03c:	220b      	movs	r2, #11
 800a03e:	2120      	movs	r1, #32
 800a040:	4618      	mov	r0, r3
 800a042:	f7fd fce9 	bl	8007a18 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a046:	2300      	movs	r3, #0
 800a048:	61bb      	str	r3, [r7, #24]
 800a04a:	e002      	b.n	800a052 <create_name+0x132>
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	3301      	adds	r3, #1
 800a050:	61bb      	str	r3, [r7, #24]
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	005b      	lsls	r3, r3, #1
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	4413      	add	r3, r2
 800a05a:	881b      	ldrh	r3, [r3, #0]
 800a05c:	2b20      	cmp	r3, #32
 800a05e:	d0f5      	beq.n	800a04c <create_name+0x12c>
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	005b      	lsls	r3, r3, #1
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	4413      	add	r3, r2
 800a068:	881b      	ldrh	r3, [r3, #0]
 800a06a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a06c:	d0ee      	beq.n	800a04c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d009      	beq.n	800a088 <create_name+0x168>
 800a074:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a078:	f043 0303 	orr.w	r3, r3, #3
 800a07c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a080:	e002      	b.n	800a088 <create_name+0x168>
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	3b01      	subs	r3, #1
 800a086:	617b      	str	r3, [r7, #20]
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d009      	beq.n	800a0a2 <create_name+0x182>
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a094:	3b01      	subs	r3, #1
 800a096:	005b      	lsls	r3, r3, #1
 800a098:	68fa      	ldr	r2, [r7, #12]
 800a09a:	4413      	add	r3, r2
 800a09c:	881b      	ldrh	r3, [r3, #0]
 800a09e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0a0:	d1ef      	bne.n	800a082 <create_name+0x162>

	i = b = 0; ni = 8;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	623b      	str	r3, [r7, #32]
 800a0ac:	2308      	movs	r3, #8
 800a0ae:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	1c5a      	adds	r2, r3, #1
 800a0b4:	61ba      	str	r2, [r7, #24]
 800a0b6:	005b      	lsls	r3, r3, #1
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	881b      	ldrh	r3, [r3, #0]
 800a0be:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a0c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	f000 8090 	beq.w	800a1e8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a0c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a0ca:	2b20      	cmp	r3, #32
 800a0cc:	d006      	beq.n	800a0dc <create_name+0x1bc>
 800a0ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a0d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0d2:	d10a      	bne.n	800a0ea <create_name+0x1ca>
 800a0d4:	69ba      	ldr	r2, [r7, #24]
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d006      	beq.n	800a0ea <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a0dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0e0:	f043 0303 	orr.w	r3, r3, #3
 800a0e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a0e8:	e07d      	b.n	800a1e6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a0ea:	6a3a      	ldr	r2, [r7, #32]
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d203      	bcs.n	800a0fa <create_name+0x1da>
 800a0f2:	69ba      	ldr	r2, [r7, #24]
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d123      	bne.n	800a142 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	2b0b      	cmp	r3, #11
 800a0fe:	d106      	bne.n	800a10e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800a100:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a104:	f043 0303 	orr.w	r3, r3, #3
 800a108:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a10c:	e075      	b.n	800a1fa <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a10e:	69ba      	ldr	r2, [r7, #24]
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	429a      	cmp	r2, r3
 800a114:	d005      	beq.n	800a122 <create_name+0x202>
 800a116:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a11a:	f043 0303 	orr.w	r3, r3, #3
 800a11e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800a122:	69ba      	ldr	r2, [r7, #24]
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	429a      	cmp	r2, r3
 800a128:	d866      	bhi.n	800a1f8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	61bb      	str	r3, [r7, #24]
 800a12e:	2308      	movs	r3, #8
 800a130:	623b      	str	r3, [r7, #32]
 800a132:	230b      	movs	r3, #11
 800a134:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a136:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a140:	e051      	b.n	800a1e6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a142:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a144:	2b7f      	cmp	r3, #127	@ 0x7f
 800a146:	d914      	bls.n	800a172 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a148:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a14a:	2100      	movs	r1, #0
 800a14c:	4618      	mov	r0, r3
 800a14e:	f002 f907 	bl	800c360 <ff_convert>
 800a152:	4603      	mov	r3, r0
 800a154:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a156:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d004      	beq.n	800a166 <create_name+0x246>
 800a15c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a15e:	3b80      	subs	r3, #128	@ 0x80
 800a160:	4a23      	ldr	r2, [pc, #140]	@ (800a1f0 <create_name+0x2d0>)
 800a162:	5cd3      	ldrb	r3, [r2, r3]
 800a164:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a166:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a16a:	f043 0302 	orr.w	r3, r3, #2
 800a16e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a172:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a174:	2b00      	cmp	r3, #0
 800a176:	d007      	beq.n	800a188 <create_name+0x268>
 800a178:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a17a:	4619      	mov	r1, r3
 800a17c:	481d      	ldr	r0, [pc, #116]	@ (800a1f4 <create_name+0x2d4>)
 800a17e:	f7fd fc8d 	bl	8007a9c <chk_chr>
 800a182:	4603      	mov	r3, r0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d008      	beq.n	800a19a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a188:	235f      	movs	r3, #95	@ 0x5f
 800a18a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a18c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a190:	f043 0303 	orr.w	r3, r3, #3
 800a194:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a198:	e01b      	b.n	800a1d2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a19a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a19c:	2b40      	cmp	r3, #64	@ 0x40
 800a19e:	d909      	bls.n	800a1b4 <create_name+0x294>
 800a1a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a1a2:	2b5a      	cmp	r3, #90	@ 0x5a
 800a1a4:	d806      	bhi.n	800a1b4 <create_name+0x294>
					b |= 2;
 800a1a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a1aa:	f043 0302 	orr.w	r3, r3, #2
 800a1ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a1b2:	e00e      	b.n	800a1d2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a1b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a1b6:	2b60      	cmp	r3, #96	@ 0x60
 800a1b8:	d90b      	bls.n	800a1d2 <create_name+0x2b2>
 800a1ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a1bc:	2b7a      	cmp	r3, #122	@ 0x7a
 800a1be:	d808      	bhi.n	800a1d2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a1c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a1c4:	f043 0301 	orr.w	r3, r3, #1
 800a1c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a1cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a1ce:	3b20      	subs	r3, #32
 800a1d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a1d2:	6a3b      	ldr	r3, [r7, #32]
 800a1d4:	1c5a      	adds	r2, r3, #1
 800a1d6:	623a      	str	r2, [r7, #32]
 800a1d8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a1da:	b2d1      	uxtb	r1, r2
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	4413      	add	r3, r2
 800a1e0:	460a      	mov	r2, r1
 800a1e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 800a1e6:	e763      	b.n	800a0b0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a1e8:	bf00      	nop
 800a1ea:	e006      	b.n	800a1fa <create_name+0x2da>
 800a1ec:	0800f0a8 	.word	0x0800f0a8
 800a1f0:	08012b48 	.word	0x08012b48
 800a1f4:	0800f0b4 	.word	0x0800f0b4
			if (si > di) break;			/* No extension */
 800a1f8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a200:	2be5      	cmp	r3, #229	@ 0xe5
 800a202:	d103      	bne.n	800a20c <create_name+0x2ec>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2205      	movs	r2, #5
 800a208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	2b08      	cmp	r3, #8
 800a210:	d104      	bne.n	800a21c <create_name+0x2fc>
 800a212:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a21c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a220:	f003 030c 	and.w	r3, r3, #12
 800a224:	2b0c      	cmp	r3, #12
 800a226:	d005      	beq.n	800a234 <create_name+0x314>
 800a228:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a22c:	f003 0303 	and.w	r3, r3, #3
 800a230:	2b03      	cmp	r3, #3
 800a232:	d105      	bne.n	800a240 <create_name+0x320>
 800a234:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a238:	f043 0302 	orr.w	r3, r3, #2
 800a23c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a244:	f003 0302 	and.w	r3, r3, #2
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d117      	bne.n	800a27c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a24c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a250:	f003 0303 	and.w	r3, r3, #3
 800a254:	2b01      	cmp	r3, #1
 800a256:	d105      	bne.n	800a264 <create_name+0x344>
 800a258:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a25c:	f043 0310 	orr.w	r3, r3, #16
 800a260:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a264:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a268:	f003 030c 	and.w	r3, r3, #12
 800a26c:	2b04      	cmp	r3, #4
 800a26e:	d105      	bne.n	800a27c <create_name+0x35c>
 800a270:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a274:	f043 0308 	orr.w	r3, r3, #8
 800a278:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a282:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800a286:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3728      	adds	r7, #40	@ 0x28
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b086      	sub	sp, #24
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a2a4:	e002      	b.n	800a2ac <follow_path+0x1c>
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	603b      	str	r3, [r7, #0]
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	2b2f      	cmp	r3, #47	@ 0x2f
 800a2b2:	d0f8      	beq.n	800a2a6 <follow_path+0x16>
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	2b5c      	cmp	r3, #92	@ 0x5c
 800a2ba:	d0f4      	beq.n	800a2a6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	2b1f      	cmp	r3, #31
 800a2ce:	d80a      	bhi.n	800a2e6 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2280      	movs	r2, #128	@ 0x80
 800a2d4:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800a2d8:	2100      	movs	r1, #0
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f7fe fc67 	bl	8008bae <dir_sdi>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	75fb      	strb	r3, [r7, #23]
 800a2e4:	e07d      	b.n	800a3e2 <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a2e6:	463b      	mov	r3, r7
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f7ff fe18 	bl	8009f20 <create_name>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a2f4:	7dfb      	ldrb	r3, [r7, #23]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d16e      	bne.n	800a3d8 <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f7ff fb3b 	bl	8009976 <dir_find>
 800a300:	4603      	mov	r3, r0
 800a302:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800a30a:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a30c:	7dfb      	ldrb	r3, [r7, #23]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00a      	beq.n	800a328 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a312:	7dfb      	ldrb	r3, [r7, #23]
 800a314:	2b04      	cmp	r3, #4
 800a316:	d161      	bne.n	800a3dc <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a318:	7afb      	ldrb	r3, [r7, #11]
 800a31a:	f003 0304 	and.w	r3, r3, #4
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d15c      	bne.n	800a3dc <follow_path+0x14c>
 800a322:	2305      	movs	r3, #5
 800a324:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a326:	e059      	b.n	800a3dc <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a328:	7afb      	ldrb	r3, [r7, #11]
 800a32a:	f003 0304 	and.w	r3, r3, #4
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d156      	bne.n	800a3e0 <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	799b      	ldrb	r3, [r3, #6]
 800a336:	f003 0310 	and.w	r3, r3, #16
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d102      	bne.n	800a344 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800a33e:	2305      	movs	r3, #5
 800a340:	75fb      	strb	r3, [r7, #23]
 800a342:	e04e      	b.n	800a3e2 <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	2b04      	cmp	r3, #4
 800a34a:	d130      	bne.n	800a3ae <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	689a      	ldr	r2, [r3, #8]
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a35a:	4613      	mov	r3, r2
 800a35c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a360:	693a      	ldr	r2, [r7, #16]
 800a362:	79d2      	ldrb	r2, [r2, #7]
 800a364:	431a      	orrs	r2, r3
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	695b      	ldr	r3, [r3, #20]
 800a376:	3334      	adds	r3, #52	@ 0x34
 800a378:	4618      	mov	r0, r3
 800a37a:	f7fd f95f 	bl	800763c <ld_dword>
 800a37e:	4602      	mov	r2, r0
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	695b      	ldr	r3, [r3, #20]
 800a388:	3321      	adds	r3, #33	@ 0x21
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	f003 0302 	and.w	r3, r3, #2
 800a390:	b2da      	uxtb	r2, r3
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	695b      	ldr	r3, [r3, #20]
 800a39a:	3338      	adds	r3, #56	@ 0x38
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7fd f970 	bl	8007682 <ld_qword>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	6939      	ldr	r1, [r7, #16]
 800a3a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800a3ac:	e79b      	b.n	800a2e6 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3b8:	68fa      	ldr	r2, [r7, #12]
 800a3ba:	8992      	ldrh	r2, [r2, #12]
 800a3bc:	fbb3 f0f2 	udiv	r0, r3, r2
 800a3c0:	fb00 f202 	mul.w	r2, r0, r2
 800a3c4:	1a9b      	subs	r3, r3, r2
 800a3c6:	440b      	add	r3, r1
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	68f8      	ldr	r0, [r7, #12]
 800a3cc:	f7fe fdc5 	bl	8008f5a <ld_clust>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a3d6:	e786      	b.n	800a2e6 <follow_path+0x56>
			if (res != FR_OK) break;
 800a3d8:	bf00      	nop
 800a3da:	e002      	b.n	800a3e2 <follow_path+0x152>
				break;
 800a3dc:	bf00      	nop
 800a3de:	e000      	b.n	800a3e2 <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a3e0:	bf00      	nop
			}
		}
	}

	return res;
 800a3e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3718      	adds	r7, #24
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b087      	sub	sp, #28
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a3f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a3f8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d031      	beq.n	800a466 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	617b      	str	r3, [r7, #20]
 800a408:	e002      	b.n	800a410 <get_ldnumber+0x24>
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	3301      	adds	r3, #1
 800a40e:	617b      	str	r3, [r7, #20]
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	2b1f      	cmp	r3, #31
 800a416:	d903      	bls.n	800a420 <get_ldnumber+0x34>
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	2b3a      	cmp	r3, #58	@ 0x3a
 800a41e:	d1f4      	bne.n	800a40a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	2b3a      	cmp	r3, #58	@ 0x3a
 800a426:	d11c      	bne.n	800a462 <get_ldnumber+0x76>
			tp = *path;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	1c5a      	adds	r2, r3, #1
 800a432:	60fa      	str	r2, [r7, #12]
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	3b30      	subs	r3, #48	@ 0x30
 800a438:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	2b09      	cmp	r3, #9
 800a43e:	d80e      	bhi.n	800a45e <get_ldnumber+0x72>
 800a440:	68fa      	ldr	r2, [r7, #12]
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	429a      	cmp	r2, r3
 800a446:	d10a      	bne.n	800a45e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d107      	bne.n	800a45e <get_ldnumber+0x72>
					vol = (int)i;
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	3301      	adds	r3, #1
 800a456:	617b      	str	r3, [r7, #20]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	697a      	ldr	r2, [r7, #20]
 800a45c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	e002      	b.n	800a468 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a462:	2300      	movs	r3, #0
 800a464:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a466:	693b      	ldr	r3, [r7, #16]
}
 800a468:	4618      	mov	r0, r3
 800a46a:	371c      	adds	r7, #28
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2200      	movs	r2, #0
 800a482:	70da      	strb	r2, [r3, #3]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f04f 32ff 	mov.w	r2, #4294967295
 800a48a:	63da      	str	r2, [r3, #60]	@ 0x3c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a48c:	6839      	ldr	r1, [r7, #0]
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f7fd fd00 	bl	8007e94 <move_window>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d001      	beq.n	800a49e <check_fs+0x2a>
 800a49a:	2304      	movs	r3, #4
 800a49c:	e044      	b.n	800a528 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	3340      	adds	r3, #64	@ 0x40
 800a4a2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7fd f8b0 	bl	800760c <ld_word>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d001      	beq.n	800a4bc <check_fs+0x48>
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	e035      	b.n	800a528 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a4c2:	2be9      	cmp	r3, #233	@ 0xe9
 800a4c4:	d009      	beq.n	800a4da <check_fs+0x66>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a4cc:	2beb      	cmp	r3, #235	@ 0xeb
 800a4ce:	d11e      	bne.n	800a50e <check_fs+0x9a>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a4d6:	2b90      	cmp	r3, #144	@ 0x90
 800a4d8:	d119      	bne.n	800a50e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	3340      	adds	r3, #64	@ 0x40
 800a4de:	3336      	adds	r3, #54	@ 0x36
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7fd f8ab 	bl	800763c <ld_dword>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a4ec:	4a10      	ldr	r2, [pc, #64]	@ (800a530 <check_fs+0xbc>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d101      	bne.n	800a4f6 <check_fs+0x82>
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	e018      	b.n	800a528 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	3340      	adds	r3, #64	@ 0x40
 800a4fa:	3352      	adds	r3, #82	@ 0x52
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7fd f89d 	bl	800763c <ld_dword>
 800a502:	4603      	mov	r3, r0
 800a504:	4a0b      	ldr	r2, [pc, #44]	@ (800a534 <check_fs+0xc0>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d101      	bne.n	800a50e <check_fs+0x9a>
 800a50a:	2300      	movs	r3, #0
 800a50c:	e00c      	b.n	800a528 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	3340      	adds	r3, #64	@ 0x40
 800a512:	220b      	movs	r2, #11
 800a514:	4908      	ldr	r1, [pc, #32]	@ (800a538 <check_fs+0xc4>)
 800a516:	4618      	mov	r0, r3
 800a518:	f7fd fa99 	bl	8007a4e <mem_cmp>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d101      	bne.n	800a526 <check_fs+0xb2>
 800a522:	2301      	movs	r3, #1
 800a524:	e000      	b.n	800a528 <check_fs+0xb4>
#endif
	return 2;
 800a526:	2302      	movs	r3, #2
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3708      	adds	r7, #8
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	00544146 	.word	0x00544146
 800a534:	33544146 	.word	0x33544146
 800a538:	0800f0bc 	.word	0x0800f0bc

0800a53c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a53c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a540:	b09c      	sub	sp, #112	@ 0x70
 800a542:	af00      	add	r7, sp, #0
 800a544:	61f8      	str	r0, [r7, #28]
 800a546:	61b9      	str	r1, [r7, #24]
 800a548:	4613      	mov	r3, r2
 800a54a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a54c:	69bb      	ldr	r3, [r7, #24]
 800a54e:	2200      	movs	r2, #0
 800a550:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a552:	69f8      	ldr	r0, [r7, #28]
 800a554:	f7ff ff4a 	bl	800a3ec <get_ldnumber>
 800a558:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800a55a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	da01      	bge.n	800a564 <find_volume+0x28>
 800a560:	230b      	movs	r3, #11
 800a562:	e378      	b.n	800ac56 <find_volume+0x71a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a564:	4aa2      	ldr	r2, [pc, #648]	@ (800a7f0 <find_volume+0x2b4>)
 800a566:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a56c:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a56e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a570:	2b00      	cmp	r3, #0
 800a572:	d101      	bne.n	800a578 <find_volume+0x3c>
 800a574:	230c      	movs	r3, #12
 800a576:	e36e      	b.n	800ac56 <find_volume+0x71a>

	ENTER_FF(fs);						/* Lock the volume */
 800a578:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800a57a:	f7fd faaa 	bl	8007ad2 <lock_fs>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d101      	bne.n	800a588 <find_volume+0x4c>
 800a584:	230f      	movs	r3, #15
 800a586:	e366      	b.n	800ac56 <find_volume+0x71a>
	*rfs = fs;							/* Return pointer to the file system object */
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a58c:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a58e:	7dfb      	ldrb	r3, [r7, #23]
 800a590:	f023 0301 	bic.w	r3, r3, #1
 800a594:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a596:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d01a      	beq.n	800a5d4 <find_volume+0x98>
		stat = disk_status(fs->drv);
 800a59e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5a0:	785b      	ldrb	r3, [r3, #1]
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7fc ff92 	bl	80074cc <disk_status>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a5ae:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a5b2:	f003 0301 	and.w	r3, r3, #1
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d10c      	bne.n	800a5d4 <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a5ba:	7dfb      	ldrb	r3, [r7, #23]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d007      	beq.n	800a5d0 <find_volume+0x94>
 800a5c0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a5c4:	f003 0304 	and.w	r3, r3, #4
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d001      	beq.n	800a5d0 <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 800a5cc:	230a      	movs	r3, #10
 800a5ce:	e342      	b.n	800ac56 <find_volume+0x71a>
			}
			return FR_OK;				/* The file system object is valid */
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	e340      	b.n	800ac56 <find_volume+0x71a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a5d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a5da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5dc:	b2da      	uxtb	r2, r3
 800a5de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5e0:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a5e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5e4:	785b      	ldrb	r3, [r3, #1]
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7fc ff8a 	bl	8007500 <disk_initialize>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a5f2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a5f6:	f003 0301 	and.w	r3, r3, #1
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a5fe:	2303      	movs	r3, #3
 800a600:	e329      	b.n	800ac56 <find_volume+0x71a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a602:	7dfb      	ldrb	r3, [r7, #23]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d007      	beq.n	800a618 <find_volume+0xdc>
 800a608:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a60c:	f003 0304 	and.w	r3, r3, #4
 800a610:	2b00      	cmp	r3, #0
 800a612:	d001      	beq.n	800a618 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800a614:	230a      	movs	r3, #10
 800a616:	e31e      	b.n	800ac56 <find_volume+0x71a>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a618:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a61a:	7858      	ldrb	r0, [r3, #1]
 800a61c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a61e:	330c      	adds	r3, #12
 800a620:	461a      	mov	r2, r3
 800a622:	2102      	movs	r1, #2
 800a624:	f7fc ffd4 	bl	80075d0 <disk_ioctl>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d001      	beq.n	800a632 <find_volume+0xf6>
 800a62e:	2301      	movs	r3, #1
 800a630:	e311      	b.n	800ac56 <find_volume+0x71a>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a632:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a634:	899b      	ldrh	r3, [r3, #12]
 800a636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a63a:	d80d      	bhi.n	800a658 <find_volume+0x11c>
 800a63c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a63e:	899b      	ldrh	r3, [r3, #12]
 800a640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a644:	d308      	bcc.n	800a658 <find_volume+0x11c>
 800a646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a648:	899b      	ldrh	r3, [r3, #12]
 800a64a:	461a      	mov	r2, r3
 800a64c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a64e:	899b      	ldrh	r3, [r3, #12]
 800a650:	3b01      	subs	r3, #1
 800a652:	4013      	ands	r3, r2
 800a654:	2b00      	cmp	r3, #0
 800a656:	d001      	beq.n	800a65c <find_volume+0x120>
 800a658:	2301      	movs	r3, #1
 800a65a:	e2fc      	b.n	800ac56 <find_volume+0x71a>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a65c:	2300      	movs	r3, #0
 800a65e:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a660:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a662:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800a664:	f7ff ff06 	bl	800a474 <check_fs>
 800a668:	4603      	mov	r3, r0
 800a66a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a66e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a672:	2b02      	cmp	r3, #2
 800a674:	d14d      	bne.n	800a712 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a676:	2300      	movs	r3, #0
 800a678:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a67a:	e020      	b.n	800a6be <find_volume+0x182>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a67c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a67e:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800a682:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a684:	011b      	lsls	r3, r3, #4
 800a686:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a68a:	4413      	add	r3, r2
 800a68c:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a68e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a690:	3304      	adds	r3, #4
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d006      	beq.n	800a6a6 <find_volume+0x16a>
 800a698:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a69a:	3308      	adds	r3, #8
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7fc ffcd 	bl	800763c <ld_dword>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	e000      	b.n	800a6a8 <find_volume+0x16c>
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	3360      	adds	r3, #96	@ 0x60
 800a6ae:	f107 0110 	add.w	r1, r7, #16
 800a6b2:	440b      	add	r3, r1
 800a6b4:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a6b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a6be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a6c0:	2b03      	cmp	r3, #3
 800a6c2:	d9db      	bls.n	800a67c <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 800a6c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d002      	beq.n	800a6d4 <find_volume+0x198>
 800a6ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a6d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	3360      	adds	r3, #96	@ 0x60
 800a6da:	f107 0210 	add.w	r2, r7, #16
 800a6de:	4413      	add	r3, r2
 800a6e0:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800a6e4:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a6e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d005      	beq.n	800a6f8 <find_volume+0x1bc>
 800a6ec:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a6ee:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800a6f0:	f7ff fec0 	bl	800a474 <check_fs>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	e000      	b.n	800a6fa <find_volume+0x1be>
 800a6f8:	2303      	movs	r3, #3
 800a6fa:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a6fe:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a702:	2b01      	cmp	r3, #1
 800a704:	d905      	bls.n	800a712 <find_volume+0x1d6>
 800a706:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a708:	3301      	adds	r3, #1
 800a70a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a70c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a70e:	2b03      	cmp	r3, #3
 800a710:	d9e0      	bls.n	800a6d4 <find_volume+0x198>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a712:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a716:	2b04      	cmp	r3, #4
 800a718:	d101      	bne.n	800a71e <find_volume+0x1e2>
 800a71a:	2301      	movs	r3, #1
 800a71c:	e29b      	b.n	800ac56 <find_volume+0x71a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a71e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a722:	2b01      	cmp	r3, #1
 800a724:	d901      	bls.n	800a72a <find_volume+0x1ee>
 800a726:	230d      	movs	r3, #13
 800a728:	e295      	b.n	800ac56 <find_volume+0x71a>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800a72a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a72e:	2b01      	cmp	r3, #1
 800a730:	f040 8100 	bne.w	800a934 <find_volume+0x3f8>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800a734:	230b      	movs	r3, #11
 800a736:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a738:	e002      	b.n	800a740 <find_volume+0x204>
 800a73a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a73c:	3301      	adds	r3, #1
 800a73e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a740:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a742:	2b3f      	cmp	r3, #63	@ 0x3f
 800a744:	d806      	bhi.n	800a754 <find_volume+0x218>
 800a746:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a748:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a74a:	4413      	add	r3, r2
 800a74c:	3340      	adds	r3, #64	@ 0x40
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d0f2      	beq.n	800a73a <find_volume+0x1fe>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800a754:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a756:	2b3f      	cmp	r3, #63	@ 0x3f
 800a758:	d801      	bhi.n	800a75e <find_volume+0x222>
 800a75a:	230d      	movs	r3, #13
 800a75c:	e27b      	b.n	800ac56 <find_volume+0x71a>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800a75e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a760:	3340      	adds	r3, #64	@ 0x40
 800a762:	3368      	adds	r3, #104	@ 0x68
 800a764:	4618      	mov	r0, r3
 800a766:	f7fc ff51 	bl	800760c <ld_word>
 800a76a:	4603      	mov	r3, r0
 800a76c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a770:	d001      	beq.n	800a776 <find_volume+0x23a>
 800a772:	230d      	movs	r3, #13
 800a774:	e26f      	b.n	800ac56 <find_volume+0x71a>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800a776:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a778:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800a77c:	461a      	mov	r2, r3
 800a77e:	2301      	movs	r3, #1
 800a780:	4093      	lsls	r3, r2
 800a782:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a784:	8992      	ldrh	r2, [r2, #12]
 800a786:	4293      	cmp	r3, r2
 800a788:	d001      	beq.n	800a78e <find_volume+0x252>
			return FR_NO_FILESYSTEM;
 800a78a:	230d      	movs	r3, #13
 800a78c:	e263      	b.n	800ac56 <find_volume+0x71a>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800a78e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a790:	3340      	adds	r3, #64	@ 0x40
 800a792:	3348      	adds	r3, #72	@ 0x48
 800a794:	4618      	mov	r0, r3
 800a796:	f7fc ff74 	bl	8007682 <ld_qword>
 800a79a:	4602      	mov	r2, r0
 800a79c:	460b      	mov	r3, r1
 800a79e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a7a0:	2000      	movs	r0, #0
 800a7a2:	60b9      	str	r1, [r7, #8]
 800a7a4:	60f8      	str	r0, [r7, #12]
 800a7a6:	68b9      	ldr	r1, [r7, #8]
 800a7a8:	1851      	adds	r1, r2, r1
 800a7aa:	6039      	str	r1, [r7, #0]
 800a7ac:	68f9      	ldr	r1, [r7, #12]
 800a7ae:	eb43 0101 	adc.w	r1, r3, r1
 800a7b2:	6079      	str	r1, [r7, #4]
 800a7b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7b8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800a7bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d301      	bcc.n	800a7c8 <find_volume+0x28c>
 800a7c4:	230d      	movs	r3, #13
 800a7c6:	e246      	b.n	800ac56 <find_volume+0x71a>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800a7c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7ca:	3340      	adds	r3, #64	@ 0x40
 800a7cc:	3354      	adds	r3, #84	@ 0x54
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7fc ff34 	bl	800763c <ld_dword>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7d8:	629a      	str	r2, [r3, #40]	@ 0x28

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800a7da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7dc:	f893 20ae 	ldrb.w	r2, [r3, #174]	@ 0xae
 800a7e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7e2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800a7e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7e6:	789b      	ldrb	r3, [r3, #2]
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d003      	beq.n	800a7f4 <find_volume+0x2b8>
 800a7ec:	230d      	movs	r3, #13
 800a7ee:	e232      	b.n	800ac56 <find_volume+0x71a>
 800a7f0:	200027cc 	.word	0x200027cc

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800a7f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7f6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	4093      	lsls	r3, r2
 800a800:	b29a      	uxth	r2, r3
 800a802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a804:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800a806:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a808:	895b      	ldrh	r3, [r3, #10]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d101      	bne.n	800a812 <find_volume+0x2d6>
 800a80e:	230d      	movs	r3, #13
 800a810:	e221      	b.n	800ac56 <find_volume+0x71a>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800a812:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a814:	3340      	adds	r3, #64	@ 0x40
 800a816:	335c      	adds	r3, #92	@ 0x5c
 800a818:	4618      	mov	r0, r3
 800a81a:	f7fc ff0f 	bl	800763c <ld_dword>
 800a81e:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800a820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a822:	4a9a      	ldr	r2, [pc, #616]	@ (800aa8c <find_volume+0x550>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d901      	bls.n	800a82c <find_volume+0x2f0>
 800a828:	230d      	movs	r3, #13
 800a82a:	e214      	b.n	800ac56 <find_volume+0x71a>
		fs->n_fatent = nclst + 2;
 800a82c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a82e:	1c9a      	adds	r2, r3, #2
 800a830:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a832:	625a      	str	r2, [r3, #36]	@ 0x24

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800a834:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a836:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a838:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800a83a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a83c:	3340      	adds	r3, #64	@ 0x40
 800a83e:	3358      	adds	r3, #88	@ 0x58
 800a840:	4618      	mov	r0, r3
 800a842:	f7fc fefb 	bl	800763c <ld_dword>
 800a846:	4602      	mov	r2, r0
 800a848:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a84a:	441a      	add	r2, r3
 800a84c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a84e:	639a      	str	r2, [r3, #56]	@ 0x38
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800a850:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a852:	3340      	adds	r3, #64	@ 0x40
 800a854:	3350      	adds	r3, #80	@ 0x50
 800a856:	4618      	mov	r0, r3
 800a858:	f7fc fef0 	bl	800763c <ld_dword>
 800a85c:	4602      	mov	r2, r0
 800a85e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a860:	441a      	add	r2, r3
 800a862:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a864:	631a      	str	r2, [r3, #48]	@ 0x30
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800a866:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a86a:	2200      	movs	r2, #0
 800a86c:	469a      	mov	sl, r3
 800a86e:	4693      	mov	fp, r2
 800a870:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a872:	895b      	ldrh	r3, [r3, #10]
 800a874:	461a      	mov	r2, r3
 800a876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a878:	fb02 f303 	mul.w	r3, r2, r3
 800a87c:	2200      	movs	r2, #0
 800a87e:	4698      	mov	r8, r3
 800a880:	4691      	mov	r9, r2
 800a882:	eb1a 0408 	adds.w	r4, sl, r8
 800a886:	eb4b 0509 	adc.w	r5, fp, r9
 800a88a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800a88e:	42a2      	cmp	r2, r4
 800a890:	41ab      	sbcs	r3, r5
 800a892:	d201      	bcs.n	800a898 <find_volume+0x35c>
 800a894:	230d      	movs	r3, #13
 800a896:	e1de      	b.n	800ac56 <find_volume+0x71a>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800a898:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a89a:	3340      	adds	r3, #64	@ 0x40
 800a89c:	3360      	adds	r3, #96	@ 0x60
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7fc fecc 	bl	800763c <ld_dword>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8a8:	635a      	str	r2, [r3, #52]	@ 0x34

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800a8aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800a8b2:	f7fd fb8d 	bl	8007fd0 <clust2sect>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800a8bc:	f7fd faea 	bl	8007e94 <move_window>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d001      	beq.n	800a8ca <find_volume+0x38e>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e1c5      	b.n	800ac56 <find_volume+0x71a>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a8ce:	e015      	b.n	800a8fc <find_volume+0x3c0>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a8d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a8d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a8d4:	4413      	add	r3, r2
 800a8d6:	3340      	adds	r3, #64	@ 0x40
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	2b81      	cmp	r3, #129	@ 0x81
 800a8dc:	d10b      	bne.n	800a8f6 <find_volume+0x3ba>
 800a8de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8e0:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800a8e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a8e6:	3314      	adds	r3, #20
 800a8e8:	4413      	add	r3, r2
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7fc fea6 	bl	800763c <ld_dword>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b02      	cmp	r3, #2
 800a8f4:	d009      	beq.n	800a90a <find_volume+0x3ce>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800a8f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a8f8:	3320      	adds	r3, #32
 800a8fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a8fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8fe:	899b      	ldrh	r3, [r3, #12]
 800a900:	461a      	mov	r2, r3
 800a902:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a904:	4293      	cmp	r3, r2
 800a906:	d3e3      	bcc.n	800a8d0 <find_volume+0x394>
 800a908:	e000      	b.n	800a90c <find_volume+0x3d0>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a90a:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800a90c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a90e:	899b      	ldrh	r3, [r3, #12]
 800a910:	461a      	mov	r2, r3
 800a912:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a914:	4293      	cmp	r3, r2
 800a916:	d101      	bne.n	800a91c <find_volume+0x3e0>
 800a918:	230d      	movs	r3, #13
 800a91a:	e19c      	b.n	800ac56 <find_volume+0x71a>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a91c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a91e:	f04f 32ff 	mov.w	r2, #4294967295
 800a922:	621a      	str	r2, [r3, #32]
 800a924:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a926:	6a1a      	ldr	r2, [r3, #32]
 800a928:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a92a:	61da      	str	r2, [r3, #28]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800a92c:	2304      	movs	r3, #4
 800a92e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800a932:	e17e      	b.n	800ac32 <find_volume+0x6f6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a934:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a936:	3340      	adds	r3, #64	@ 0x40
 800a938:	330b      	adds	r3, #11
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7fc fe66 	bl	800760c <ld_word>
 800a940:	4603      	mov	r3, r0
 800a942:	461a      	mov	r2, r3
 800a944:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a946:	899b      	ldrh	r3, [r3, #12]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d001      	beq.n	800a950 <find_volume+0x414>
 800a94c:	230d      	movs	r3, #13
 800a94e:	e182      	b.n	800ac56 <find_volume+0x71a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a950:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a952:	3340      	adds	r3, #64	@ 0x40
 800a954:	3316      	adds	r3, #22
 800a956:	4618      	mov	r0, r3
 800a958:	f7fc fe58 	bl	800760c <ld_word>
 800a95c:	4603      	mov	r3, r0
 800a95e:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a960:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a962:	2b00      	cmp	r3, #0
 800a964:	d106      	bne.n	800a974 <find_volume+0x438>
 800a966:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a968:	3340      	adds	r3, #64	@ 0x40
 800a96a:	3324      	adds	r3, #36	@ 0x24
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7fc fe65 	bl	800763c <ld_dword>
 800a972:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800a974:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a976:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a978:	629a      	str	r2, [r3, #40]	@ 0x28

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a97a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a97c:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800a980:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a982:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a984:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a986:	789b      	ldrb	r3, [r3, #2]
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d005      	beq.n	800a998 <find_volume+0x45c>
 800a98c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a98e:	789b      	ldrb	r3, [r3, #2]
 800a990:	2b02      	cmp	r3, #2
 800a992:	d001      	beq.n	800a998 <find_volume+0x45c>
 800a994:	230d      	movs	r3, #13
 800a996:	e15e      	b.n	800ac56 <find_volume+0x71a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a998:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a99a:	789b      	ldrb	r3, [r3, #2]
 800a99c:	461a      	mov	r2, r3
 800a99e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9a0:	fb02 f303 	mul.w	r3, r2, r3
 800a9a4:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a9a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9a8:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9b0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a9b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9b4:	895b      	ldrh	r3, [r3, #10]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d008      	beq.n	800a9cc <find_volume+0x490>
 800a9ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9bc:	895b      	ldrh	r3, [r3, #10]
 800a9be:	461a      	mov	r2, r3
 800a9c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9c2:	895b      	ldrh	r3, [r3, #10]
 800a9c4:	3b01      	subs	r3, #1
 800a9c6:	4013      	ands	r3, r2
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d001      	beq.n	800a9d0 <find_volume+0x494>
 800a9cc:	230d      	movs	r3, #13
 800a9ce:	e142      	b.n	800ac56 <find_volume+0x71a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a9d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9d2:	3340      	adds	r3, #64	@ 0x40
 800a9d4:	3311      	adds	r3, #17
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7fc fe18 	bl	800760c <ld_word>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	461a      	mov	r2, r3
 800a9e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9e2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a9e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9e6:	891b      	ldrh	r3, [r3, #8]
 800a9e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a9ea:	8992      	ldrh	r2, [r2, #12]
 800a9ec:	0952      	lsrs	r2, r2, #5
 800a9ee:	b292      	uxth	r2, r2
 800a9f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a9f4:	fb01 f202 	mul.w	r2, r1, r2
 800a9f8:	1a9b      	subs	r3, r3, r2
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d001      	beq.n	800aa04 <find_volume+0x4c8>
 800aa00:	230d      	movs	r3, #13
 800aa02:	e128      	b.n	800ac56 <find_volume+0x71a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800aa04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa06:	3340      	adds	r3, #64	@ 0x40
 800aa08:	3313      	adds	r3, #19
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7fc fdfe 	bl	800760c <ld_word>
 800aa10:	4603      	mov	r3, r0
 800aa12:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800aa14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d106      	bne.n	800aa28 <find_volume+0x4ec>
 800aa1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa1c:	3340      	adds	r3, #64	@ 0x40
 800aa1e:	3320      	adds	r3, #32
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7fc fe0b 	bl	800763c <ld_dword>
 800aa26:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800aa28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa2a:	3340      	adds	r3, #64	@ 0x40
 800aa2c:	330e      	adds	r3, #14
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7fc fdec 	bl	800760c <ld_word>
 800aa34:	4603      	mov	r3, r0
 800aa36:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800aa3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d101      	bne.n	800aa46 <find_volume+0x50a>
 800aa42:	230d      	movs	r3, #13
 800aa44:	e107      	b.n	800ac56 <find_volume+0x71a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800aa46:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800aa4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa4c:	4413      	add	r3, r2
 800aa4e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aa50:	8911      	ldrh	r1, [r2, #8]
 800aa52:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aa54:	8992      	ldrh	r2, [r2, #12]
 800aa56:	0952      	lsrs	r2, r2, #5
 800aa58:	b292      	uxth	r2, r2
 800aa5a:	fbb1 f2f2 	udiv	r2, r1, r2
 800aa5e:	b292      	uxth	r2, r2
 800aa60:	4413      	add	r3, r2
 800aa62:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800aa64:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aa66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d201      	bcs.n	800aa70 <find_volume+0x534>
 800aa6c:	230d      	movs	r3, #13
 800aa6e:	e0f2      	b.n	800ac56 <find_volume+0x71a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800aa70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aa72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa74:	1ad3      	subs	r3, r2, r3
 800aa76:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aa78:	8952      	ldrh	r2, [r2, #10]
 800aa7a:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800aa80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d104      	bne.n	800aa90 <find_volume+0x554>
 800aa86:	230d      	movs	r3, #13
 800aa88:	e0e5      	b.n	800ac56 <find_volume+0x71a>
 800aa8a:	bf00      	nop
 800aa8c:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 800aa90:	2303      	movs	r3, #3
 800aa92:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800aa96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa98:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d802      	bhi.n	800aaa6 <find_volume+0x56a>
 800aaa0:	2302      	movs	r3, #2
 800aaa2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800aaa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaa8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d802      	bhi.n	800aab6 <find_volume+0x57a>
 800aab0:	2301      	movs	r3, #1
 800aab2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800aab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aab8:	1c9a      	adds	r2, r3, #2
 800aaba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aabc:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->volbase = bsect;							/* Volume start sector */
 800aabe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aac0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800aac2:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800aac4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800aac8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aaca:	441a      	add	r2, r3
 800aacc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aace:	631a      	str	r2, [r3, #48]	@ 0x30
		fs->database = bsect + sysect;					/* Data start sector */
 800aad0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800aad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aad4:	441a      	add	r2, r3
 800aad6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aad8:	639a      	str	r2, [r3, #56]	@ 0x38
		if (fmt == FS_FAT32) {
 800aada:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800aade:	2b03      	cmp	r3, #3
 800aae0:	d11e      	bne.n	800ab20 <find_volume+0x5e4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800aae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aae4:	3340      	adds	r3, #64	@ 0x40
 800aae6:	332a      	adds	r3, #42	@ 0x2a
 800aae8:	4618      	mov	r0, r3
 800aaea:	f7fc fd8f 	bl	800760c <ld_word>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d001      	beq.n	800aaf8 <find_volume+0x5bc>
 800aaf4:	230d      	movs	r3, #13
 800aaf6:	e0ae      	b.n	800ac56 <find_volume+0x71a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800aaf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aafa:	891b      	ldrh	r3, [r3, #8]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d001      	beq.n	800ab04 <find_volume+0x5c8>
 800ab00:	230d      	movs	r3, #13
 800ab02:	e0a8      	b.n	800ac56 <find_volume+0x71a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ab04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab06:	3340      	adds	r3, #64	@ 0x40
 800ab08:	332c      	adds	r3, #44	@ 0x2c
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7fc fd96 	bl	800763c <ld_dword>
 800ab10:	4602      	mov	r2, r0
 800ab12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab14:	635a      	str	r2, [r3, #52]	@ 0x34
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ab16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab1e:	e01f      	b.n	800ab60 <find_volume+0x624>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ab20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab22:	891b      	ldrh	r3, [r3, #8]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d101      	bne.n	800ab2c <find_volume+0x5f0>
 800ab28:	230d      	movs	r3, #13
 800ab2a:	e094      	b.n	800ac56 <find_volume+0x71a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ab2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab32:	441a      	add	r2, r3
 800ab34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab36:	635a      	str	r2, [r3, #52]	@ 0x34
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ab38:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ab3c:	2b02      	cmp	r3, #2
 800ab3e:	d103      	bne.n	800ab48 <find_volume+0x60c>
 800ab40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab44:	005b      	lsls	r3, r3, #1
 800ab46:	e00a      	b.n	800ab5e <find_volume+0x622>
 800ab48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab4c:	4613      	mov	r3, r2
 800ab4e:	005b      	lsls	r3, r3, #1
 800ab50:	4413      	add	r3, r2
 800ab52:	085a      	lsrs	r2, r3, #1
 800ab54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab58:	f003 0301 	and.w	r3, r3, #1
 800ab5c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ab5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ab60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab66:	899b      	ldrh	r3, [r3, #12]
 800ab68:	4619      	mov	r1, r3
 800ab6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab6c:	440b      	add	r3, r1
 800ab6e:	3b01      	subs	r3, #1
 800ab70:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ab72:	8989      	ldrh	r1, [r1, #12]
 800ab74:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d201      	bcs.n	800ab80 <find_volume+0x644>
 800ab7c:	230d      	movs	r3, #13
 800ab7e:	e06a      	b.n	800ac56 <find_volume+0x71a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ab80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab82:	f04f 32ff 	mov.w	r2, #4294967295
 800ab86:	621a      	str	r2, [r3, #32]
 800ab88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab8a:	6a1a      	ldr	r2, [r3, #32]
 800ab8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab8e:	61da      	str	r2, [r3, #28]
		fs->fsi_flag = 0x80;
 800ab90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab92:	2280      	movs	r2, #128	@ 0x80
 800ab94:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ab96:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ab9a:	2b03      	cmp	r3, #3
 800ab9c:	d149      	bne.n	800ac32 <find_volume+0x6f6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ab9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aba0:	3340      	adds	r3, #64	@ 0x40
 800aba2:	3330      	adds	r3, #48	@ 0x30
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7fc fd31 	bl	800760c <ld_word>
 800abaa:	4603      	mov	r3, r0
 800abac:	2b01      	cmp	r3, #1
 800abae:	d140      	bne.n	800ac32 <find_volume+0x6f6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800abb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800abb2:	3301      	adds	r3, #1
 800abb4:	4619      	mov	r1, r3
 800abb6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800abb8:	f7fd f96c 	bl	8007e94 <move_window>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d137      	bne.n	800ac32 <find_volume+0x6f6>
		{
			fs->fsi_flag = 0;
 800abc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abc4:	2200      	movs	r2, #0
 800abc6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800abc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abca:	3340      	adds	r3, #64	@ 0x40
 800abcc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7fc fd1b 	bl	800760c <ld_word>
 800abd6:	4603      	mov	r3, r0
 800abd8:	461a      	mov	r2, r3
 800abda:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800abde:	429a      	cmp	r2, r3
 800abe0:	d127      	bne.n	800ac32 <find_volume+0x6f6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800abe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abe4:	3340      	adds	r3, #64	@ 0x40
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7fc fd28 	bl	800763c <ld_dword>
 800abec:	4603      	mov	r3, r0
 800abee:	4a1c      	ldr	r2, [pc, #112]	@ (800ac60 <find_volume+0x724>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d11e      	bne.n	800ac32 <find_volume+0x6f6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800abf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abf6:	3340      	adds	r3, #64	@ 0x40
 800abf8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7fc fd1d 	bl	800763c <ld_dword>
 800ac02:	4603      	mov	r3, r0
 800ac04:	4a17      	ldr	r2, [pc, #92]	@ (800ac64 <find_volume+0x728>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d113      	bne.n	800ac32 <find_volume+0x6f6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ac0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac0c:	3340      	adds	r3, #64	@ 0x40
 800ac0e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fc fd12 	bl	800763c <ld_dword>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac1c:	621a      	str	r2, [r3, #32]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ac1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac20:	3340      	adds	r3, #64	@ 0x40
 800ac22:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7fc fd08 	bl	800763c <ld_dword>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac30:	61da      	str	r2, [r3, #28]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ac32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac34:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800ac38:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ac3a:	4b0b      	ldr	r3, [pc, #44]	@ (800ac68 <find_volume+0x72c>)
 800ac3c:	881b      	ldrh	r3, [r3, #0]
 800ac3e:	3301      	adds	r3, #1
 800ac40:	b29a      	uxth	r2, r3
 800ac42:	4b09      	ldr	r3, [pc, #36]	@ (800ac68 <find_volume+0x72c>)
 800ac44:	801a      	strh	r2, [r3, #0]
 800ac46:	4b08      	ldr	r3, [pc, #32]	@ (800ac68 <find_volume+0x72c>)
 800ac48:	881a      	ldrh	r2, [r3, #0]
 800ac4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac4c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ac4e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ac50:	f7fd f8b8 	bl	8007dc4 <clear_lock>
#endif
	return FR_OK;
 800ac54:	2300      	movs	r3, #0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3770      	adds	r7, #112	@ 0x70
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac60:	41615252 	.word	0x41615252
 800ac64:	61417272 	.word	0x61417272
 800ac68:	200027d0 	.word	0x200027d0

0800ac6c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ac76:	2309      	movs	r3, #9
 800ac78:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d02e      	beq.n	800acde <validate+0x72>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d02a      	beq.n	800acde <validate+0x72>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d025      	beq.n	800acde <validate+0x72>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	889a      	ldrh	r2, [r3, #4]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	88db      	ldrh	r3, [r3, #6]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d11e      	bne.n	800acde <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4618      	mov	r0, r3
 800aca6:	f7fc ff14 	bl	8007ad2 <lock_fs>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d014      	beq.n	800acda <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	785b      	ldrb	r3, [r3, #1]
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fc fc08 	bl	80074cc <disk_status>
 800acbc:	4603      	mov	r3, r0
 800acbe:	f003 0301 	and.w	r3, r3, #1
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d102      	bne.n	800accc <validate+0x60>
				res = FR_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	73fb      	strb	r3, [r7, #15]
 800acca:	e008      	b.n	800acde <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2100      	movs	r1, #0
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7fc ff13 	bl	8007afe <unlock_fs>
 800acd8:	e001      	b.n	800acde <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800acda:	230f      	movs	r3, #15
 800acdc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800acde:	7bfb      	ldrb	r3, [r7, #15]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d102      	bne.n	800acea <validate+0x7e>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	e000      	b.n	800acec <validate+0x80>
 800acea:	2300      	movs	r3, #0
 800acec:	683a      	ldr	r2, [r7, #0]
 800acee:	6013      	str	r3, [r2, #0]
	return res;
 800acf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3710      	adds	r7, #16
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
	...

0800acfc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b088      	sub	sp, #32
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	4613      	mov	r3, r2
 800ad08:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ad0e:	f107 0310 	add.w	r3, r7, #16
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7ff fb6a 	bl	800a3ec <get_ldnumber>
 800ad18:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	da01      	bge.n	800ad24 <f_mount+0x28>
 800ad20:	230b      	movs	r3, #11
 800ad22:	e048      	b.n	800adb6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ad24:	4a26      	ldr	r2, [pc, #152]	@ (800adc0 <f_mount+0xc4>)
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad2c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d00f      	beq.n	800ad54 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ad34:	69b8      	ldr	r0, [r7, #24]
 800ad36:	f7fd f845 	bl	8007dc4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800ad3a:	69bb      	ldr	r3, [r7, #24]
 800ad3c:	699b      	ldr	r3, [r3, #24]
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f001 fbf2 	bl	800c528 <ff_del_syncobj>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d101      	bne.n	800ad4e <f_mount+0x52>
 800ad4a:	2302      	movs	r3, #2
 800ad4c:	e033      	b.n	800adb6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	2200      	movs	r2, #0
 800ad52:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00f      	beq.n	800ad7a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	b2da      	uxtb	r2, r3
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	3318      	adds	r3, #24
 800ad68:	4619      	mov	r1, r3
 800ad6a:	4610      	mov	r0, r2
 800ad6c:	f001 fbbe 	bl	800c4ec <ff_cre_syncobj>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d101      	bne.n	800ad7a <f_mount+0x7e>
 800ad76:	2302      	movs	r3, #2
 800ad78:	e01d      	b.n	800adb6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	4910      	ldr	r1, [pc, #64]	@ (800adc0 <f_mount+0xc4>)
 800ad7e:	69fb      	ldr	r3, [r7, #28]
 800ad80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d002      	beq.n	800ad90 <f_mount+0x94>
 800ad8a:	79fb      	ldrb	r3, [r7, #7]
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d001      	beq.n	800ad94 <f_mount+0x98>
 800ad90:	2300      	movs	r3, #0
 800ad92:	e010      	b.n	800adb6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ad94:	f107 010c 	add.w	r1, r7, #12
 800ad98:	f107 0308 	add.w	r3, r7, #8
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7ff fbcc 	bl	800a53c <find_volume>
 800ada4:	4603      	mov	r3, r0
 800ada6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	7dfa      	ldrb	r2, [r7, #23]
 800adac:	4611      	mov	r1, r2
 800adae:	4618      	mov	r0, r3
 800adb0:	f7fc fea5 	bl	8007afe <unlock_fs>
 800adb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3720      	adds	r7, #32
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	200027cc 	.word	0x200027cc

0800adc4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800adc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800adc8:	b0aa      	sub	sp, #168	@ 0xa8
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6278      	str	r0, [r7, #36]	@ 0x24
 800adce:	6239      	str	r1, [r7, #32]
 800add0:	4613      	mov	r3, r2
 800add2:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800add4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add6:	2b00      	cmp	r3, #0
 800add8:	d101      	bne.n	800adde <f_open+0x1a>
 800adda:	2309      	movs	r3, #9
 800addc:	e2e2      	b.n	800b3a4 <f_open+0x5e0>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800adde:	7ffb      	ldrb	r3, [r7, #31]
 800ade0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ade4:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 800ade6:	7ffb      	ldrb	r3, [r7, #31]
 800ade8:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800adec:	f107 0020 	add.w	r0, r7, #32
 800adf0:	461a      	mov	r2, r3
 800adf2:	f7ff fba3 	bl	800a53c <find_volume>
 800adf6:	4603      	mov	r3, r0
 800adf8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	if (res == FR_OK) {
 800adfc:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f040 82bf 	bne.w	800b384 <f_open+0x5c0>
		dj.obj.fs = fs;
 800ae06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae08:	633b      	str	r3, [r7, #48]	@ 0x30
		INIT_NAMBUF(fs);
 800ae0a:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800ae0e:	f001 fbb7 	bl	800c580 <ff_memalloc>
 800ae12:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 800ae16:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d106      	bne.n	800ae2c <f_open+0x68>
 800ae1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae20:	2111      	movs	r1, #17
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7fc fe6b 	bl	8007afe <unlock_fs>
 800ae28:	2311      	movs	r3, #17
 800ae2a:	e2bb      	b.n	800b3a4 <f_open+0x5e0>
 800ae2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ae32:	611a      	str	r2, [r3, #16]
 800ae34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae36:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ae3a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800ae3e:	6153      	str	r3, [r2, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 800ae40:	6a3b      	ldr	r3, [r7, #32]
 800ae42:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ae46:	4619      	mov	r1, r3
 800ae48:	4610      	mov	r0, r2
 800ae4a:	f7ff fa21 	bl	800a290 <follow_path>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ae54:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d118      	bne.n	800ae8e <f_open+0xca>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ae5c:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800ae60:	b25b      	sxtb	r3, r3
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	da03      	bge.n	800ae6e <f_open+0xaa>
				res = FR_INVALID_NAME;
 800ae66:	2306      	movs	r3, #6
 800ae68:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800ae6c:	e00f      	b.n	800ae8e <f_open+0xca>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ae6e:	7ffb      	ldrb	r3, [r7, #31]
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	bf8c      	ite	hi
 800ae74:	2301      	movhi	r3, #1
 800ae76:	2300      	movls	r3, #0
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ae80:	4611      	mov	r1, r2
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7fc fe56 	bl	8007b34 <chk_lock>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ae8e:	7ffb      	ldrb	r3, [r7, #31]
 800ae90:	f003 031c 	and.w	r3, r3, #28
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f000 8117 	beq.w	800b0c8 <f_open+0x304>
			if (res != FR_OK) {					/* No file, create new */
 800ae9a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d017      	beq.n	800aed2 <f_open+0x10e>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800aea2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800aea6:	2b04      	cmp	r3, #4
 800aea8:	d10e      	bne.n	800aec8 <f_open+0x104>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800aeaa:	f7fc fe9f 	bl	8007bec <enq_lock>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d006      	beq.n	800aec2 <f_open+0xfe>
 800aeb4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7fe fe87 	bl	8009bcc <dir_register>
 800aebe:	4603      	mov	r3, r0
 800aec0:	e000      	b.n	800aec4 <f_open+0x100>
 800aec2:	2312      	movs	r3, #18
 800aec4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800aec8:	7ffb      	ldrb	r3, [r7, #31]
 800aeca:	f043 0308 	orr.w	r3, r3, #8
 800aece:	77fb      	strb	r3, [r7, #31]
 800aed0:	e011      	b.n	800aef6 <f_open+0x132>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800aed2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800aed6:	f003 0311 	and.w	r3, r3, #17
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d003      	beq.n	800aee6 <f_open+0x122>
					res = FR_DENIED;
 800aede:	2307      	movs	r3, #7
 800aee0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800aee4:	e007      	b.n	800aef6 <f_open+0x132>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800aee6:	7ffb      	ldrb	r3, [r7, #31]
 800aee8:	f003 0304 	and.w	r3, r3, #4
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d002      	beq.n	800aef6 <f_open+0x132>
 800aef0:	2308      	movs	r3, #8
 800aef2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800aef6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	f040 8100 	bne.w	800b100 <f_open+0x33c>
 800af00:	7ffb      	ldrb	r3, [r7, #31]
 800af02:	f003 0308 	and.w	r3, r3, #8
 800af06:	2b00      	cmp	r3, #0
 800af08:	f000 80fa 	beq.w	800b100 <f_open+0x33c>
				dw = GET_FATTIME();
 800af0c:	f7fc fa80 	bl	8007410 <get_fattime>
 800af10:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800af14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	2b04      	cmp	r3, #4
 800af1a:	f040 8085 	bne.w	800b028 <f_open+0x264>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800af1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af22:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800af24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af26:	695b      	ldr	r3, [r3, #20]
 800af28:	3334      	adds	r3, #52	@ 0x34
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7fc fb86 	bl	800763c <ld_dword>
 800af30:	4602      	mov	r2, r0
 800af32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af34:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800af36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af38:	695b      	ldr	r3, [r3, #20]
 800af3a:	3338      	adds	r3, #56	@ 0x38
 800af3c:	4618      	mov	r0, r3
 800af3e:	f7fc fba0 	bl	8007682 <ld_qword>
 800af42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af44:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800af48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af4a:	695b      	ldr	r3, [r3, #20]
 800af4c:	3321      	adds	r3, #33	@ 0x21
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	f003 0302 	and.w	r3, r3, #2
 800af54:	b2db      	uxtb	r3, r3
 800af56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af58:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 800af5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af5c:	2200      	movs	r2, #0
 800af5e:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800af60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af62:	695b      	ldr	r3, [r3, #20]
 800af64:	3308      	adds	r3, #8
 800af66:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7fc fc7f 	bl	800786e <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800af70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af72:	695b      	ldr	r3, [r3, #20]
 800af74:	f103 0214 	add.w	r2, r3, #20
 800af78:	2300      	movs	r3, #0
 800af7a:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800af7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af7e:	695b      	ldr	r3, [r3, #20]
 800af80:	330c      	adds	r3, #12
 800af82:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800af86:	4618      	mov	r0, r3
 800af88:	f7fc fc71 	bl	800786e <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800af8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af8e:	695b      	ldr	r3, [r3, #20]
 800af90:	f103 0215 	add.w	r2, r3, #21
 800af94:	2300      	movs	r3, #0
 800af96:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800af98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af9a:	695b      	ldr	r3, [r3, #20]
 800af9c:	1d1a      	adds	r2, r3, #4
 800af9e:	2320      	movs	r3, #32
 800afa0:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800afa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afa4:	695b      	ldr	r3, [r3, #20]
 800afa6:	3334      	adds	r3, #52	@ 0x34
 800afa8:	2100      	movs	r1, #0
 800afaa:	4618      	mov	r0, r3
 800afac:	f7fc fc5f 	bl	800786e <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800afb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afb2:	695b      	ldr	r3, [r3, #20]
 800afb4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800afb8:	f04f 0200 	mov.w	r2, #0
 800afbc:	f04f 0300 	mov.w	r3, #0
 800afc0:	4608      	mov	r0, r1
 800afc2:	f7fc fc80 	bl	80078c6 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800afc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afc8:	695b      	ldr	r3, [r3, #20]
 800afca:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800afce:	f04f 0200 	mov.w	r2, #0
 800afd2:	f04f 0300 	mov.w	r3, #0
 800afd6:	4608      	mov	r0, r1
 800afd8:	f7fc fc75 	bl	80078c6 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800afdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afde:	695b      	ldr	r3, [r3, #20]
 800afe0:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 800afe4:	2301      	movs	r3, #1
 800afe6:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 800afe8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800afec:	4618      	mov	r0, r3
 800afee:	f7fe fb39 	bl	8009664 <store_xdir>
 800aff2:	4603      	mov	r3, r0
 800aff4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800aff8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800affc:	2b00      	cmp	r3, #0
 800affe:	d17f      	bne.n	800b100 <f_open+0x33c>
 800b000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d07b      	beq.n	800b100 <f_open+0x33c>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800b008:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	2200      	movs	r2, #0
 800b010:	4619      	mov	r1, r3
 800b012:	f7fd fbcb 	bl	80087ac <remove_chain>
 800b016:	4603      	mov	r3, r0
 800b018:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800b01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b022:	3b01      	subs	r3, #1
 800b024:	61d3      	str	r3, [r2, #28]
 800b026:	e06b      	b.n	800b100 <f_open+0x33c>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b028:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b02a:	330e      	adds	r3, #14
 800b02c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b030:	4618      	mov	r0, r3
 800b032:	f7fc fc1c 	bl	800786e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b036:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b038:	3316      	adds	r3, #22
 800b03a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b03e:	4618      	mov	r0, r3
 800b040:	f7fc fc15 	bl	800786e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b044:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b046:	f103 020b 	add.w	r2, r3, #11
 800b04a:	2320      	movs	r3, #32
 800b04c:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b04e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b050:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b052:	4619      	mov	r1, r3
 800b054:	4610      	mov	r0, r2
 800b056:	f7fd ff80 	bl	8008f5a <ld_clust>
 800b05a:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b05e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b060:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b062:	2200      	movs	r2, #0
 800b064:	4619      	mov	r1, r3
 800b066:	f7fd ff97 	bl	8008f98 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b06a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b06c:	331c      	adds	r3, #28
 800b06e:	2100      	movs	r1, #0
 800b070:	4618      	mov	r0, r3
 800b072:	f7fc fbfc 	bl	800786e <st_dword>
					fs->wflag = 1;
 800b076:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b078:	2301      	movs	r3, #1
 800b07a:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b07c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b080:	2b00      	cmp	r3, #0
 800b082:	d03d      	beq.n	800b100 <f_open+0x33c>
						dw = fs->winsect;
 800b084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b088:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
						res = remove_chain(&dj.obj, cl, 0);
 800b08c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800b090:	2200      	movs	r2, #0
 800b092:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800b096:	4618      	mov	r0, r3
 800b098:	f7fd fb88 	bl	80087ac <remove_chain>
 800b09c:	4603      	mov	r3, r0
 800b09e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
						if (res == FR_OK) {
 800b0a2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d12a      	bne.n	800b100 <f_open+0x33c>
							res = move_window(fs, dw);
 800b0aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7fc feef 	bl	8007e94 <move_window>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b0bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b0c2:	3b01      	subs	r3, #1
 800b0c4:	61d3      	str	r3, [r2, #28]
 800b0c6:	e01b      	b.n	800b100 <f_open+0x33c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b0c8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d117      	bne.n	800b100 <f_open+0x33c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b0d0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b0d4:	f003 0310 	and.w	r3, r3, #16
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d003      	beq.n	800b0e4 <f_open+0x320>
					res = FR_NO_FILE;
 800b0dc:	2304      	movs	r3, #4
 800b0de:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800b0e2:	e00d      	b.n	800b100 <f_open+0x33c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b0e4:	7ffb      	ldrb	r3, [r7, #31]
 800b0e6:	f003 0302 	and.w	r3, r3, #2
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d008      	beq.n	800b100 <f_open+0x33c>
 800b0ee:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b0f2:	f003 0301 	and.w	r3, r3, #1
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d002      	beq.n	800b100 <f_open+0x33c>
						res = FR_DENIED;
 800b0fa:	2307      	movs	r3, #7
 800b0fc:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					}
				}
			}
		}
		if (res == FR_OK) {
 800b100:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800b104:	2b00      	cmp	r3, #0
 800b106:	d126      	bne.n	800b156 <f_open+0x392>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b108:	7ffb      	ldrb	r3, [r7, #31]
 800b10a:	f003 0308 	and.w	r3, r3, #8
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d003      	beq.n	800b11a <f_open+0x356>
				mode |= FA_MODIFIED;
 800b112:	7ffb      	ldrb	r3, [r7, #31]
 800b114:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b118:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b11a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b11c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b120:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800b122:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b126:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b128:	7ffb      	ldrb	r3, [r7, #31]
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	bf8c      	ite	hi
 800b12e:	2301      	movhi	r3, #1
 800b130:	2300      	movls	r3, #0
 800b132:	b2db      	uxtb	r3, r3
 800b134:	461a      	mov	r2, r3
 800b136:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800b13a:	4611      	mov	r1, r2
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7fc fd77 	bl	8007c30 <inc_lock>
 800b142:	4602      	mov	r2, r0
 800b144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b146:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b14a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d102      	bne.n	800b156 <f_open+0x392>
 800b150:	2302      	movs	r3, #2
 800b152:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b156:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	f040 810e 	bne.w	800b37c <f_open+0x5b8>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800b160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	2b04      	cmp	r3, #4
 800b166:	d12d      	bne.n	800b1c4 <f_open+0x400>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800b168:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b16c:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800b16e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b172:	4613      	mov	r3, r2
 800b174:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b178:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800b17c:	431a      	orrs	r2, r3
 800b17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b180:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800b182:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b186:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800b188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b18a:	695b      	ldr	r3, [r3, #20]
 800b18c:	3334      	adds	r3, #52	@ 0x34
 800b18e:	4618      	mov	r0, r3
 800b190:	f7fc fa54 	bl	800763c <ld_dword>
 800b194:	4602      	mov	r2, r0
 800b196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b198:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800b19a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b19c:	695b      	ldr	r3, [r3, #20]
 800b19e:	3338      	adds	r3, #56	@ 0x38
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7fc fa6e 	bl	8007682 <ld_qword>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b1ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800b1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1b2:	695b      	ldr	r3, [r3, #20]
 800b1b4:	3321      	adds	r3, #33	@ 0x21
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	f003 0302 	and.w	r3, r3, #2
 800b1bc:	b2da      	uxtb	r2, r3
 800b1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1c0:	71da      	strb	r2, [r3, #7]
 800b1c2:	e016      	b.n	800b1f2 <f_open+0x42e>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b1c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	4610      	mov	r0, r2
 800b1cc:	f7fd fec5 	bl	8008f5a <ld_clust>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b1d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1d8:	331c      	adds	r3, #28
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7fc fa2e 	bl	800763c <ld_dword>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	613b      	str	r3, [r7, #16]
 800b1e6:	617a      	str	r2, [r7, #20]
 800b1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b1ee:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b1f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1fc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b200:	88da      	ldrh	r2, [r3, #6]
 800b202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b204:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b208:	7ffa      	ldrb	r2, [r7, #31]
 800b20a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 800b20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b210:	2200      	movs	r2, #0
 800b212:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800b216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b218:	2200      	movs	r2, #0
 800b21a:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b21c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b21e:	f04f 0200 	mov.w	r2, #0
 800b222:	f04f 0300 	mov.w	r3, #0
 800b226:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b22c:	3354      	adds	r3, #84	@ 0x54
 800b22e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b232:	2100      	movs	r1, #0
 800b234:	4618      	mov	r0, r3
 800b236:	f7fc fbef 	bl	8007a18 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b23a:	7ffb      	ldrb	r3, [r7, #31]
 800b23c:	f003 0320 	and.w	r3, r3, #32
 800b240:	2b00      	cmp	r3, #0
 800b242:	f000 809b 	beq.w	800b37c <f_open+0x5b8>
 800b246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b248:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b24c:	4313      	orrs	r3, r2
 800b24e:	f000 8095 	beq.w	800b37c <f_open+0x5b8>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b254:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b258:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b25a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b25e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b260:	895b      	ldrh	r3, [r3, #10]
 800b262:	461a      	mov	r2, r3
 800b264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b266:	899b      	ldrh	r3, [r3, #12]
 800b268:	fb02 f303 	mul.w	r3, r2, r3
 800b26c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b27a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b27e:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
 800b282:	e023      	b.n	800b2cc <f_open+0x508>
					clst = get_fat(&fp->obj, clst);
 800b284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b286:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7fc fec0 	bl	8008010 <get_fat>
 800b290:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
					if (clst <= 1) res = FR_INT_ERR;
 800b294:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d802      	bhi.n	800b2a2 <f_open+0x4de>
 800b29c:	2302      	movs	r3, #2
 800b29e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b2a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2aa:	d102      	bne.n	800b2b2 <f_open+0x4ee>
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b2b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	4698      	mov	r8, r3
 800b2ba:	4691      	mov	r9, r2
 800b2bc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800b2c0:	ebb2 0a08 	subs.w	sl, r2, r8
 800b2c4:	eb63 0b09 	sbc.w	fp, r3, r9
 800b2c8:	e9c7 ab26 	strd	sl, fp, [r7, #152]	@ 0x98
 800b2cc:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d10a      	bne.n	800b2ea <f_open+0x526>
 800b2d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b2d8:	2200      	movs	r2, #0
 800b2da:	461c      	mov	r4, r3
 800b2dc:	4615      	mov	r5, r2
 800b2de:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800b2e2:	4294      	cmp	r4, r2
 800b2e4:	eb75 0303 	sbcs.w	r3, r5, r3
 800b2e8:	d3cc      	bcc.n	800b284 <f_open+0x4c0>
				}
				fp->clust = clst;
 800b2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ec:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800b2f0:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b2f2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d140      	bne.n	800b37c <f_open+0x5b8>
 800b2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2fc:	899b      	ldrh	r3, [r3, #12]
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	2200      	movs	r2, #0
 800b302:	60bb      	str	r3, [r7, #8]
 800b304:	60fa      	str	r2, [r7, #12]
 800b306:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b30a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b30e:	f7f4 ff67 	bl	80001e0 <__aeabi_uldivmod>
 800b312:	4313      	orrs	r3, r2
 800b314:	d032      	beq.n	800b37c <f_open+0x5b8>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b318:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7fc fe57 	bl	8007fd0 <clust2sect>
 800b322:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
 800b326:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d103      	bne.n	800b336 <f_open+0x572>
						res = FR_INT_ERR;
 800b32e:	2302      	movs	r3, #2
 800b330:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800b334:	e022      	b.n	800b37c <f_open+0x5b8>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b338:	899b      	ldrh	r3, [r3, #12]
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	2200      	movs	r2, #0
 800b33e:	603b      	str	r3, [r7, #0]
 800b340:	607a      	str	r2, [r7, #4]
 800b342:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b346:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b34a:	f7f4 ff49 	bl	80001e0 <__aeabi_uldivmod>
 800b34e:	4602      	mov	r2, r0
 800b350:	460b      	mov	r3, r1
 800b352:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b356:	441a      	add	r2, r3
 800b358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b35a:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b35e:	7858      	ldrb	r0, [r3, #1]
 800b360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b362:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800b366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b368:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b36a:	2301      	movs	r3, #1
 800b36c:	f7fc f8f0 	bl	8007550 <disk_read>
 800b370:	4603      	mov	r3, r0
 800b372:	2b00      	cmp	r3, #0
 800b374:	d002      	beq.n	800b37c <f_open+0x5b8>
 800b376:	2301      	movs	r3, #1
 800b378:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				}
			}
#endif
		}

		FREE_NAMBUF();
 800b37c:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800b380:	f001 f90a 	bl	800c598 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b384:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d002      	beq.n	800b392 <f_open+0x5ce>
 800b38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b38e:	2200      	movs	r2, #0
 800b390:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b394:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 800b398:	4611      	mov	r1, r2
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7fc fbaf 	bl	8007afe <unlock_fs>
 800b3a0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	37a8      	adds	r7, #168	@ 0xa8
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b3ae <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b3ae:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3b2:	b098      	sub	sp, #96	@ 0x60
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b3b8:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b3ba:	627a      	str	r2, [r7, #36]	@ 0x24
 800b3bc:	623b      	str	r3, [r7, #32]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c0:	64fb      	str	r3, [r7, #76]	@ 0x4c


	*br = 0;	/* Clear read byte counter */
 800b3c2:	6a3a      	ldr	r2, [r7, #32]
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b3c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3ca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	4610      	mov	r0, r2
 800b3d2:	f7ff fc4b 	bl	800ac6c <validate>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b3dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d108      	bne.n	800b3f6 <f_read+0x48>
 800b3e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3e6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b3ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b3ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d009      	beq.n	800b40a <f_read+0x5c>
 800b3f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3f8:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800b3fc:	4611      	mov	r1, r2
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7fc fb7d 	bl	8007afe <unlock_fs>
 800b404:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b408:	e193      	b.n	800b732 <f_read+0x384>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b40c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b410:	f003 0301 	and.w	r3, r3, #1
 800b414:	2b00      	cmp	r3, #0
 800b416:	d106      	bne.n	800b426 <f_read+0x78>
 800b418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b41a:	2107      	movs	r1, #7
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7fc fb6e 	bl	8007afe <unlock_fs>
 800b422:	2307      	movs	r3, #7
 800b424:	e185      	b.n	800b732 <f_read+0x384>
	remain = fp->obj.objsize - fp->fptr;
 800b426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b428:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b42c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b42e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b432:	ebb0 0802 	subs.w	r8, r0, r2
 800b436:	eb61 0903 	sbc.w	r9, r1, r3
 800b43a:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b440:	2200      	movs	r2, #0
 800b442:	461c      	mov	r4, r3
 800b444:	4615      	mov	r5, r2
 800b446:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b44a:	42a2      	cmp	r2, r4
 800b44c:	41ab      	sbcs	r3, r5
 800b44e:	f080 8166 	bcs.w	800b71e <f_read+0x370>
 800b452:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b454:	627b      	str	r3, [r7, #36]	@ 0x24

	for ( ;  btr;								/* Repeat until all data read */
 800b456:	e162      	b.n	800b71e <f_read+0x370>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b45a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800b45e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b460:	899b      	ldrh	r3, [r3, #12]
 800b462:	b29b      	uxth	r3, r3
 800b464:	2200      	movs	r2, #0
 800b466:	61bb      	str	r3, [r7, #24]
 800b468:	61fa      	str	r2, [r7, #28]
 800b46a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b46e:	f7f4 feb7 	bl	80001e0 <__aeabi_uldivmod>
 800b472:	4313      	orrs	r3, r2
 800b474:	f040 8107 	bne.w	800b686 <f_read+0x2d8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b47a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800b47e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b480:	899b      	ldrh	r3, [r3, #12]
 800b482:	b29b      	uxth	r3, r3
 800b484:	2200      	movs	r2, #0
 800b486:	613b      	str	r3, [r7, #16]
 800b488:	617a      	str	r2, [r7, #20]
 800b48a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b48e:	f7f4 fea7 	bl	80001e0 <__aeabi_uldivmod>
 800b492:	4602      	mov	r2, r0
 800b494:	460b      	mov	r3, r1
 800b496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b498:	895b      	ldrh	r3, [r3, #10]
 800b49a:	3b01      	subs	r3, #1
 800b49c:	4013      	ands	r3, r2
 800b49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (csect == 0) {					/* On the cluster boundary? */
 800b4a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d13c      	bne.n	800b520 <f_read+0x172>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4a8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	d103      	bne.n	800b4b8 <f_read+0x10a>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b4b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b4b6:	e013      	b.n	800b4e0 <f_read+0x132>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b4b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d007      	beq.n	800b4d0 <f_read+0x122>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4c2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b4c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b4c8:	f7fd fb25 	bl	8008b16 <clmt_clust>
 800b4cc:	65b8      	str	r0, [r7, #88]	@ 0x58
 800b4ce:	e007      	b.n	800b4e0 <f_read+0x132>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b4d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	4610      	mov	r0, r2
 800b4da:	f7fc fd99 	bl	8008010 <get_fat>
 800b4de:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b4e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d80a      	bhi.n	800b4fc <f_read+0x14e>
 800b4e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4e8:	2202      	movs	r2, #2
 800b4ea:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b4ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4f0:	2102      	movs	r1, #2
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7fc fb03 	bl	8007afe <unlock_fs>
 800b4f8:	2302      	movs	r3, #2
 800b4fa:	e11a      	b.n	800b732 <f_read+0x384>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b4fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b502:	d10a      	bne.n	800b51a <f_read+0x16c>
 800b504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b506:	2201      	movs	r2, #1
 800b508:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b50c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b50e:	2101      	movs	r1, #1
 800b510:	4618      	mov	r0, r3
 800b512:	f7fc faf4 	bl	8007afe <unlock_fs>
 800b516:	2301      	movs	r3, #1
 800b518:	e10b      	b.n	800b732 <f_read+0x384>
				fp->clust = clst;				/* Update current cluster */
 800b51a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b51c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b51e:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b520:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b526:	4619      	mov	r1, r3
 800b528:	4610      	mov	r0, r2
 800b52a:	f7fc fd51 	bl	8007fd0 <clust2sect>
 800b52e:	63b8      	str	r0, [r7, #56]	@ 0x38
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b532:	2b00      	cmp	r3, #0
 800b534:	d10a      	bne.n	800b54c <f_read+0x19e>
 800b536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b538:	2202      	movs	r2, #2
 800b53a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b53e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b540:	2102      	movs	r1, #2
 800b542:	4618      	mov	r0, r3
 800b544:	f7fc fadb 	bl	8007afe <unlock_fs>
 800b548:	2302      	movs	r3, #2
 800b54a:	e0f2      	b.n	800b732 <f_read+0x384>
			sect += csect;
 800b54c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b54e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b550:	4413      	add	r3, r2
 800b552:	63bb      	str	r3, [r7, #56]	@ 0x38
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b556:	899b      	ldrh	r3, [r3, #12]
 800b558:	461a      	mov	r2, r3
 800b55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b55c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b560:	653b      	str	r3, [r7, #80]	@ 0x50
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b562:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b564:	2b00      	cmp	r3, #0
 800b566:	d048      	beq.n	800b5fa <f_read+0x24c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b568:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b56a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b56c:	4413      	add	r3, r2
 800b56e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b570:	8952      	ldrh	r2, [r2, #10]
 800b572:	4293      	cmp	r3, r2
 800b574:	d905      	bls.n	800b582 <f_read+0x1d4>
					cc = fs->csize - csect;
 800b576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b578:	895b      	ldrh	r3, [r3, #10]
 800b57a:	461a      	mov	r2, r3
 800b57c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b57e:	1ad3      	subs	r3, r2, r3
 800b580:	653b      	str	r3, [r7, #80]	@ 0x50
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b584:	7858      	ldrb	r0, [r3, #1]
 800b586:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b588:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b58a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b58c:	f7fb ffe0 	bl	8007550 <disk_read>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00a      	beq.n	800b5ac <f_read+0x1fe>
 800b596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b598:	2201      	movs	r2, #1
 800b59a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b59e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5a0:	2101      	movs	r1, #1
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7fc faab 	bl	8007afe <unlock_fs>
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	e0c2      	b.n	800b732 <f_read+0x384>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b5ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b5b2:	b25b      	sxtb	r3, r3
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	da18      	bge.n	800b5ea <f_read+0x23c>
 800b5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5be:	1ad3      	subs	r3, r2, r3
 800b5c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d911      	bls.n	800b5ea <f_read+0x23c>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5cc:	1ad3      	subs	r3, r2, r3
 800b5ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b5d0:	8992      	ldrh	r2, [r2, #12]
 800b5d2:	fb02 f303 	mul.w	r3, r2, r3
 800b5d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b5d8:	18d0      	adds	r0, r2, r3
 800b5da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5dc:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800b5e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5e2:	899b      	ldrh	r3, [r3, #12]
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	f7fc f9f6 	bl	80079d6 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b5ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5ec:	899b      	ldrh	r3, [r3, #12]
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5f2:	fb02 f303 	mul.w	r3, r2, r3
 800b5f6:	657b      	str	r3, [r7, #84]	@ 0x54
				continue;
 800b5f8:	e071      	b.n	800b6de <f_read+0x330>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b600:	429a      	cmp	r2, r3
 800b602:	d03d      	beq.n	800b680 <f_read+0x2d2>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b606:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b60a:	b25b      	sxtb	r3, r3
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	da20      	bge.n	800b652 <f_read+0x2a4>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b612:	7858      	ldrb	r0, [r3, #1]
 800b614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b616:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800b61a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b61c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b61e:	2301      	movs	r3, #1
 800b620:	f7fb ffb6 	bl	8007590 <disk_write>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d00a      	beq.n	800b640 <f_read+0x292>
 800b62a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b62c:	2201      	movs	r2, #1
 800b62e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b634:	2101      	movs	r1, #1
 800b636:	4618      	mov	r0, r3
 800b638:	f7fc fa61 	bl	8007afe <unlock_fs>
 800b63c:	2301      	movs	r3, #1
 800b63e:	e078      	b.n	800b732 <f_read+0x384>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b642:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b646:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b64a:	b2da      	uxtb	r2, r3
 800b64c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b64e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b654:	7858      	ldrb	r0, [r3, #1]
 800b656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b658:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800b65c:	2301      	movs	r3, #1
 800b65e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b660:	f7fb ff76 	bl	8007550 <disk_read>
 800b664:	4603      	mov	r3, r0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d00a      	beq.n	800b680 <f_read+0x2d2>
 800b66a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b66c:	2201      	movs	r2, #1
 800b66e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b674:	2101      	movs	r1, #1
 800b676:	4618      	mov	r0, r3
 800b678:	f7fc fa41 	bl	8007afe <unlock_fs>
 800b67c:	2301      	movs	r3, #1
 800b67e:	e058      	b.n	800b732 <f_read+0x384>
			}
#endif
			fp->sect = sect;
 800b680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b682:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b684:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b688:	899b      	ldrh	r3, [r3, #12]
 800b68a:	4618      	mov	r0, r3
 800b68c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b68e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b694:	899b      	ldrh	r3, [r3, #12]
 800b696:	fbb2 f1f3 	udiv	r1, r2, r3
 800b69a:	fb01 f303 	mul.w	r3, r1, r3
 800b69e:	1ad3      	subs	r3, r2, r3
 800b6a0:	1ac3      	subs	r3, r0, r3
 800b6a2:	657b      	str	r3, [r7, #84]	@ 0x54
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b6a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d901      	bls.n	800b6b0 <f_read+0x302>
 800b6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ae:	657b      	str	r3, [r7, #84]	@ 0x54
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b6b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6b2:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 800b6b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6b8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800b6bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6be:	899b      	ldrh	r3, [r3, #12]
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	60bb      	str	r3, [r7, #8]
 800b6c6:	60fa      	str	r2, [r7, #12]
 800b6c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b6cc:	f7f4 fd88 	bl	80001e0 <__aeabi_uldivmod>
 800b6d0:	4613      	mov	r3, r2
 800b6d2:	4423      	add	r3, r4
 800b6d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800b6da:	f7fc f97c 	bl	80079d6 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b6de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b6e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6e2:	4413      	add	r3, r2
 800b6e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6e8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b6ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b6ee:	2000      	movs	r0, #0
 800b6f0:	468a      	mov	sl, r1
 800b6f2:	4683      	mov	fp, r0
 800b6f4:	eb12 010a 	adds.w	r1, r2, sl
 800b6f8:	6039      	str	r1, [r7, #0]
 800b6fa:	eb43 030b 	adc.w	r3, r3, fp
 800b6fe:	607b      	str	r3, [r7, #4]
 800b700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b702:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b706:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 800b70a:	6a3b      	ldr	r3, [r7, #32]
 800b70c:	681a      	ldr	r2, [r3, #0]
 800b70e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b710:	441a      	add	r2, r3
 800b712:	6a3b      	ldr	r3, [r7, #32]
 800b714:	601a      	str	r2, [r3, #0]
 800b716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b71a:	1ad3      	subs	r3, r2, r3
 800b71c:	627b      	str	r3, [r7, #36]	@ 0x24
	for ( ;  btr;								/* Repeat until all data read */
 800b71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b720:	2b00      	cmp	r3, #0
 800b722:	f47f ae99 	bne.w	800b458 <f_read+0xaa>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b728:	2100      	movs	r1, #0
 800b72a:	4618      	mov	r0, r3
 800b72c:	f7fc f9e7 	bl	8007afe <unlock_fs>
 800b730:	2300      	movs	r3, #0
}
 800b732:	4618      	mov	r0, r3
 800b734:	3760      	adds	r7, #96	@ 0x60
 800b736:	46bd      	mov	sp, r7
 800b738:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b73c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b09c      	sub	sp, #112	@ 0x70
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800b74a:	4611      	mov	r1, r2
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7ff fa8d 	bl	800ac6c <validate>
 800b752:	4603      	mov	r3, r0
 800b754:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (res == FR_OK) {
 800b758:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	f040 8123 	bne.w	800b9a8 <f_sync+0x26c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f000 811b 	beq.w	800b9a8 <f_sync+0x26c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b778:	b25b      	sxtb	r3, r3
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	da1c      	bge.n	800b7b8 <f_sync+0x7c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b77e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b780:	7858      	ldrb	r0, [r3, #1]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b78c:	2301      	movs	r3, #1
 800b78e:	f7fb feff 	bl	8007590 <disk_write>
 800b792:	4603      	mov	r3, r0
 800b794:	2b00      	cmp	r3, #0
 800b796:	d006      	beq.n	800b7a6 <f_sync+0x6a>
 800b798:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b79a:	2101      	movs	r1, #1
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7fc f9ae 	bl	8007afe <unlock_fs>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e109      	b.n	800b9ba <f_sync+0x27e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b7ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b7b0:	b2da      	uxtb	r2, r3
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b7b8:	f7fb fe2a 	bl	8007410 <get_fattime>
 800b7bc:	66b8      	str	r0, [r7, #104]	@ 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800b7be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	2b04      	cmp	r3, #4
 800b7c4:	f040 80a5 	bne.w	800b912 <f_sync+0x1d6>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7fc ff8e 	bl	80086ec <fill_first_frag>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 800b7d6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d10a      	bne.n	800b7f4 <f_sync+0xb8>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	f7fc ffae 	bl	800874a <fill_last_frag>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				}
				if (res == FR_OK) {
 800b7f4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	f040 80d5 	bne.w	800b9a8 <f_sync+0x26c>
					INIT_NAMBUF(fs);
 800b7fe:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800b802:	f000 febd 	bl	800c580 <ff_memalloc>
 800b806:	6638      	str	r0, [r7, #96]	@ 0x60
 800b808:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d106      	bne.n	800b81c <f_sync+0xe0>
 800b80e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b810:	2111      	movs	r1, #17
 800b812:	4618      	mov	r0, r3
 800b814:	f7fc f973 	bl	8007afe <unlock_fs>
 800b818:	2311      	movs	r3, #17
 800b81a:	e0ce      	b.n	800b9ba <f_sync+0x27e>
 800b81c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b81e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b820:	611a      	str	r2, [r3, #16]
 800b822:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b824:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b826:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800b82a:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800b82c:	687a      	ldr	r2, [r7, #4]
 800b82e:	f107 0308 	add.w	r3, r7, #8
 800b832:	4611      	mov	r1, r2
 800b834:	4618      	mov	r0, r3
 800b836:	f7fd fedf 	bl	80095f8 <load_obj_dir>
 800b83a:	4603      	mov	r3, r0
 800b83c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					if (res == FR_OK) {
 800b840:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800b844:	2b00      	cmp	r3, #0
 800b846:	d160      	bne.n	800b90a <f_sync+0x1ce>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800b848:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b84a:	695b      	ldr	r3, [r3, #20]
 800b84c:	3304      	adds	r3, #4
 800b84e:	781a      	ldrb	r2, [r3, #0]
 800b850:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b852:	695b      	ldr	r3, [r3, #20]
 800b854:	3304      	adds	r3, #4
 800b856:	f042 0220 	orr.w	r2, r2, #32
 800b85a:	b2d2      	uxtb	r2, r2
 800b85c:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	79da      	ldrb	r2, [r3, #7]
 800b862:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b864:	695b      	ldr	r3, [r3, #20]
 800b866:	3321      	adds	r3, #33	@ 0x21
 800b868:	f042 0201 	orr.w	r2, r2, #1
 800b86c:	b2d2      	uxtb	r2, r2
 800b86e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800b870:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b872:	695b      	ldr	r3, [r3, #20]
 800b874:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	4619      	mov	r1, r3
 800b87e:	4610      	mov	r0, r2
 800b880:	f7fb fff5 	bl	800786e <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800b884:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b886:	695b      	ldr	r3, [r3, #20]
 800b888:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b892:	4608      	mov	r0, r1
 800b894:	f7fc f817 	bl	80078c6 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800b898:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b89a:	695b      	ldr	r3, [r3, #20]
 800b89c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b8a6:	4608      	mov	r0, r1
 800b8a8:	f7fc f80d 	bl	80078c6 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800b8ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b8ae:	695b      	ldr	r3, [r3, #20]
 800b8b0:	330c      	adds	r3, #12
 800b8b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f7fb ffda 	bl	800786e <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800b8ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b8bc:	695b      	ldr	r3, [r3, #20]
 800b8be:	3315      	adds	r3, #21
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800b8c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b8c6:	695b      	ldr	r3, [r3, #20]
 800b8c8:	3310      	adds	r3, #16
 800b8ca:	2100      	movs	r1, #0
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f7fb ffce 	bl	800786e <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800b8d2:	f107 0308 	add.w	r3, r7, #8
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7fd fec4 	bl	8009664 <store_xdir>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
						if (res == FR_OK) {
 800b8e2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d10f      	bne.n	800b90a <f_sync+0x1ce>
							res = sync_fs(fs);
 800b8ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7fc faff 	bl	8007ef0 <sync_fs>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b8fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b902:	b2da      	uxtb	r2, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
						}
					}
					FREE_NAMBUF();
 800b90a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800b90c:	f000 fe44 	bl	800c598 <ff_memfree>
 800b910:	e04a      	b.n	800b9a8 <f_sync+0x26c>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b912:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b918:	4619      	mov	r1, r3
 800b91a:	4610      	mov	r0, r2
 800b91c:	f7fc faba 	bl	8007e94 <move_window>
 800b920:	4603      	mov	r3, r0
 800b922:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 800b926:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d13c      	bne.n	800b9a8 <f_sync+0x26c>
					dir = fp->dir_ptr;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b932:	667b      	str	r3, [r7, #100]	@ 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b934:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b936:	330b      	adds	r3, #11
 800b938:	781a      	ldrb	r2, [r3, #0]
 800b93a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b93c:	330b      	adds	r3, #11
 800b93e:	f042 0220 	orr.w	r2, r2, #32
 800b942:	b2d2      	uxtb	r2, r2
 800b944:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6818      	ldr	r0, [r3, #0]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	689b      	ldr	r3, [r3, #8]
 800b94e:	461a      	mov	r2, r3
 800b950:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b952:	f7fd fb21 	bl	8008f98 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b956:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b958:	f103 001c 	add.w	r0, r3, #28
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b962:	4613      	mov	r3, r2
 800b964:	4619      	mov	r1, r3
 800b966:	f7fb ff82 	bl	800786e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b96a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b96c:	3316      	adds	r3, #22
 800b96e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b970:	4618      	mov	r0, r3
 800b972:	f7fb ff7c 	bl	800786e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b976:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b978:	3312      	adds	r3, #18
 800b97a:	2100      	movs	r1, #0
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7fb ff5b 	bl	8007838 <st_word>
					fs->wflag = 1;
 800b982:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b984:	2201      	movs	r2, #1
 800b986:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b988:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7fc fab0 	bl	8007ef0 <sync_fs>
 800b990:	4603      	mov	r3, r0
 800b992:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b99c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b9a0:	b2da      	uxtb	r2, r3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b9a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b9aa:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800b9ae:	4611      	mov	r1, r2
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7fc f8a4 	bl	8007afe <unlock_fs>
 800b9b6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3770      	adds	r7, #112	@ 0x70
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b9c2:	b580      	push	{r7, lr}
 800b9c4:	b084      	sub	sp, #16
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f7ff feb6 	bl	800b73c <f_sync>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b9d4:	7bfb      	ldrb	r3, [r7, #15]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d11d      	bne.n	800ba16 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f107 0208 	add.w	r2, r7, #8
 800b9e0:	4611      	mov	r1, r2
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f7ff f942 	bl	800ac6c <validate>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b9ec:	7bfb      	ldrb	r3, [r7, #15]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d111      	bne.n	800ba16 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7fc f9a8 	bl	8007d4c <dec_lock>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ba00:	7bfb      	ldrb	r3, [r7, #15]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d102      	bne.n	800ba0c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	2100      	movs	r1, #0
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7fc f874 	bl	8007afe <unlock_fs>
#endif
		}
	}
	return res;
 800ba16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3710      	adds	r7, #16
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ba20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba24:	b0ba      	sub	sp, #232	@ 0xe8
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 800ba2c:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ba30:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800ba34:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800ba38:	4619      	mov	r1, r3
 800ba3a:	4610      	mov	r0, r2
 800ba3c:	f7ff f916 	bl	800ac6c <validate>
 800ba40:	4603      	mov	r3, r0
 800ba42:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ba46:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d105      	bne.n	800ba5a <f_lseek+0x3a>
 800ba4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ba52:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ba56:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 800ba5a:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d111      	bne.n	800ba86 <f_lseek+0x66>
 800ba62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	2b04      	cmp	r3, #4
 800ba6a:	d10c      	bne.n	800ba86 <f_lseek+0x66>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800ba6c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800ba70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ba74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba76:	f04f 32ff 	mov.w	r2, #4294967295
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	f7fc fe65 	bl	800874a <fill_last_frag>
 800ba80:	4603      	mov	r3, r0
 800ba82:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ba86:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00a      	beq.n	800baa4 <f_lseek+0x84>
 800ba8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ba92:	f897 20e7 	ldrb.w	r2, [r7, #231]	@ 0xe7
 800ba96:	4611      	mov	r1, r2
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7fc f830 	bl	8007afe <unlock_fs>
 800ba9e:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800baa2:	e3fb      	b.n	800c29c <f_lseek+0x87c>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800baa4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800baa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800baaa:	2b00      	cmp	r3, #0
 800baac:	f000 8170 	beq.w	800bd90 <f_lseek+0x370>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800bab0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800bab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bab8:	bf08      	it	eq
 800baba:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800babe:	f040 8093 	bne.w	800bbe8 <f_lseek+0x1c8>
			tbl = fp->cltbl;
 800bac2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bac8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800bacc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bad0:	1d1a      	adds	r2, r3, #4
 800bad2:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800badc:	2302      	movs	r3, #2
 800bade:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
			cl = fp->obj.sclust;		/* Origin of the chain */
 800bae2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			if (cl) {
 800baec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d064      	beq.n	800bbbe <f_lseek+0x19e>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800baf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800baf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bafc:	2300      	movs	r3, #0
 800bafe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bb02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bb06:	3302      	adds	r3, #2
 800bb08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
					do {
						pcl = cl; ncl++;
 800bb0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bb10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bb14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bb18:	3301      	adds	r3, #1
 800bb1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
						cl = get_fat(&fp->obj, cl);
 800bb1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bb22:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7fc fa72 	bl	8008010 <get_fat>
 800bb2c:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800bb30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d80c      	bhi.n	800bb52 <f_lseek+0x132>
 800bb38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bb3c:	2202      	movs	r2, #2
 800bb3e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800bb42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bb46:	2102      	movs	r1, #2
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7fb ffd8 	bl	8007afe <unlock_fs>
 800bb4e:	2302      	movs	r3, #2
 800bb50:	e3a4      	b.n	800c29c <f_lseek+0x87c>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bb52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bb56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb5a:	d10c      	bne.n	800bb76 <f_lseek+0x156>
 800bb5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bb60:	2201      	movs	r2, #1
 800bb62:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800bb66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bb6a:	2101      	movs	r1, #1
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f7fb ffc6 	bl	8007afe <unlock_fs>
 800bb72:	2301      	movs	r3, #1
 800bb74:	e392      	b.n	800c29c <f_lseek+0x87c>
					} while (cl == pcl + 1);
 800bb76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d0c3      	beq.n	800bb0c <f_lseek+0xec>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800bb84:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bb88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d80f      	bhi.n	800bbb0 <f_lseek+0x190>
						*tbl++ = ncl; *tbl++ = tcl;
 800bb90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bb94:	1d1a      	adds	r2, r3, #4
 800bb96:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800bb9a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800bb9e:	601a      	str	r2, [r3, #0]
 800bba0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bba4:	1d1a      	adds	r2, r3, #4
 800bba6:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800bbaa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bbae:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800bbb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bbb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbb6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d39a      	bcc.n	800baf4 <f_lseek+0xd4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800bbbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bbc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbc4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bbc8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800bbca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bbce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d804      	bhi.n	800bbe0 <f_lseek+0x1c0>
				*tbl = 0;		/* Terminate table */
 800bbd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bbda:	2200      	movs	r2, #0
 800bbdc:	601a      	str	r2, [r3, #0]
 800bbde:	e353      	b.n	800c288 <f_lseek+0x868>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800bbe0:	2311      	movs	r3, #17
 800bbe2:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
 800bbe6:	e34f      	b.n	800c288 <f_lseek+0x868>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800bbe8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bbec:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800bbf0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800bbf4:	4290      	cmp	r0, r2
 800bbf6:	eb71 0303 	sbcs.w	r3, r1, r3
 800bbfa:	d205      	bcs.n	800bc08 <f_lseek+0x1e8>
 800bbfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc00:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bc04:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
			fp->fptr = ofs;				/* Set file pointer */
 800bc08:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bc0c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800bc10:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
			if (ofs) {
 800bc14:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	f000 8335 	beq.w	800c288 <f_lseek+0x868>
				fp->clust = clmt_clust(fp, ofs - 1);
 800bc1e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800bc22:	f112 38ff 	adds.w	r8, r2, #4294967295
 800bc26:	f143 39ff 	adc.w	r9, r3, #4294967295
 800bc2a:	4642      	mov	r2, r8
 800bc2c:	464b      	mov	r3, r9
 800bc2e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800bc32:	f7fc ff70 	bl	8008b16 <clmt_clust>
 800bc36:	4602      	mov	r2, r0
 800bc38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc3c:	641a      	str	r2, [r3, #64]	@ 0x40
				dsc = clust2sect(fs, fp->clust);
 800bc3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bc42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc48:	4619      	mov	r1, r3
 800bc4a:	4610      	mov	r0, r2
 800bc4c:	f7fc f9c0 	bl	8007fd0 <clust2sect>
 800bc50:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800bc54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d10c      	bne.n	800bc76 <f_lseek+0x256>
 800bc5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc60:	2202      	movs	r2, #2
 800bc62:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800bc66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bc6a:	2102      	movs	r1, #2
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f7fb ff46 	bl	8007afe <unlock_fs>
 800bc72:	2302      	movs	r3, #2
 800bc74:	e312      	b.n	800c29c <f_lseek+0x87c>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800bc76:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800bc7a:	1e54      	subs	r4, r2, #1
 800bc7c:	f143 35ff 	adc.w	r5, r3, #4294967295
 800bc80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bc84:	899b      	ldrh	r3, [r3, #12]
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	2200      	movs	r2, #0
 800bc8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bc8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bc92:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800bc96:	4620      	mov	r0, r4
 800bc98:	4629      	mov	r1, r5
 800bc9a:	f7f4 faa1 	bl	80001e0 <__aeabi_uldivmod>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	460b      	mov	r3, r1
 800bca2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bca6:	895b      	ldrh	r3, [r3, #10]
 800bca8:	3b01      	subs	r3, #1
 800bcaa:	4013      	ands	r3, r2
 800bcac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bcb0:	4413      	add	r3, r2
 800bcb2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800bcb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bcba:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800bcbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bcc2:	899b      	ldrh	r3, [r3, #12]
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bccc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800bcd0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800bcd4:	f7f4 fa84 	bl	80001e0 <__aeabi_uldivmod>
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	f000 82d5 	beq.w	800c288 <f_lseek+0x868>
 800bcde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bce4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bce8:	429a      	cmp	r2, r3
 800bcea:	f000 82cd 	beq.w	800c288 <f_lseek+0x868>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bcee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bcf2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bcf6:	b25b      	sxtb	r3, r3
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	da27      	bge.n	800bd4c <f_lseek+0x32c>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bcfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bd00:	7858      	ldrb	r0, [r3, #1]
 800bd02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bd06:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800bd0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bd0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd10:	2301      	movs	r3, #1
 800bd12:	f7fb fc3d 	bl	8007590 <disk_write>
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d00c      	beq.n	800bd36 <f_lseek+0x316>
 800bd1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bd20:	2201      	movs	r2, #1
 800bd22:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800bd26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bd2a:	2101      	movs	r1, #1
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7fb fee6 	bl	8007afe <unlock_fs>
 800bd32:	2301      	movs	r3, #1
 800bd34:	e2b2      	b.n	800c29c <f_lseek+0x87c>
						fp->flag &= (BYTE)~FA_DIRTY;
 800bd36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bd3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bd3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd42:	b2da      	uxtb	r2, r3
 800bd44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bd48:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800bd4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bd50:	7858      	ldrb	r0, [r3, #1]
 800bd52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bd56:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bd60:	f7fb fbf6 	bl	8007550 <disk_read>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00c      	beq.n	800bd84 <f_lseek+0x364>
 800bd6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bd6e:	2201      	movs	r2, #1
 800bd70:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800bd74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bd78:	2101      	movs	r1, #1
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7fb febf 	bl	8007afe <unlock_fs>
 800bd80:	2301      	movs	r3, #1
 800bd82:	e28b      	b.n	800c29c <f_lseek+0x87c>
#endif
					fp->sect = dsc;
 800bd84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bd88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bd8c:	645a      	str	r2, [r3, #68]	@ 0x44
 800bd8e:	e27b      	b.n	800c288 <f_lseek+0x868>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 800bd90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	2b04      	cmp	r3, #4
 800bd98:	d009      	beq.n	800bdae <f_lseek+0x38e>
 800bd9a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d305      	bcc.n	800bdae <f_lseek+0x38e>
 800bda2:	f04f 32ff 	mov.w	r2, #4294967295
 800bda6:	f04f 0300 	mov.w	r3, #0
 800bdaa:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800bdae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bdb2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800bdb6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800bdba:	4290      	cmp	r0, r2
 800bdbc:	eb71 0303 	sbcs.w	r3, r1, r3
 800bdc0:	d20d      	bcs.n	800bdde <f_lseek+0x3be>
 800bdc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bdc6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bdca:	f003 0302 	and.w	r3, r3, #2
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d105      	bne.n	800bdde <f_lseek+0x3be>
			ofs = fp->obj.objsize;
 800bdd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bdd6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bdda:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
		}
		ifptr = fp->fptr;
 800bdde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bde2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800bde6:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
		fp->fptr = nsect = 0;
 800bdea:	2300      	movs	r3, #0
 800bdec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bdf0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bdf4:	f04f 0200 	mov.w	r2, #0
 800bdf8:	f04f 0300 	mov.w	r3, #0
 800bdfc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		if (ofs) {
 800be00:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800be04:	4313      	orrs	r3, r2
 800be06:	f000 81b8 	beq.w	800c17a <f_lseek+0x75a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800be0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800be0e:	895b      	ldrh	r3, [r3, #10]
 800be10:	461a      	mov	r2, r3
 800be12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800be16:	899b      	ldrh	r3, [r3, #12]
 800be18:	fb02 f303 	mul.w	r3, r2, r3
 800be1c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			if (ifptr > 0 &&
 800be20:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800be24:	4313      	orrs	r3, r2
 800be26:	d069      	beq.n	800befc <f_lseek+0x4dc>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800be28:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800be2c:	1e51      	subs	r1, r2, #1
 800be2e:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800be32:	f143 33ff 	adc.w	r3, r3, #4294967295
 800be36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800be3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800be3e:	2200      	movs	r2, #0
 800be40:	67bb      	str	r3, [r7, #120]	@ 0x78
 800be42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800be44:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800be48:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800be4c:	f7f4 f9c8 	bl	80001e0 <__aeabi_uldivmod>
 800be50:	4602      	mov	r2, r0
 800be52:	460b      	mov	r3, r1
 800be54:	4614      	mov	r4, r2
 800be56:	461d      	mov	r5, r3
 800be58:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800be5c:	1e51      	subs	r1, r2, #1
 800be5e:	6739      	str	r1, [r7, #112]	@ 0x70
 800be60:	f143 33ff 	adc.w	r3, r3, #4294967295
 800be64:	677b      	str	r3, [r7, #116]	@ 0x74
 800be66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800be6a:	2200      	movs	r2, #0
 800be6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800be6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800be70:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800be74:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800be78:	f7f4 f9b2 	bl	80001e0 <__aeabi_uldivmod>
 800be7c:	4602      	mov	r2, r0
 800be7e:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 800be80:	4294      	cmp	r4, r2
 800be82:	eb75 0303 	sbcs.w	r3, r5, r3
 800be86:	d339      	bcc.n	800befc <f_lseek+0x4dc>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800be88:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800be8c:	1e51      	subs	r1, r2, #1
 800be8e:	6639      	str	r1, [r7, #96]	@ 0x60
 800be90:	f143 33ff 	adc.w	r3, r3, #4294967295
 800be94:	667b      	str	r3, [r7, #100]	@ 0x64
 800be96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800be9a:	3b01      	subs	r3, #1
 800be9c:	2200      	movs	r2, #0
 800be9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bea0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800bea2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800bea6:	460b      	mov	r3, r1
 800bea8:	ea6f 0a03 	mvn.w	sl, r3
 800beac:	4613      	mov	r3, r2
 800beae:	ea6f 0b03 	mvn.w	fp, r3
 800beb2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800beb6:	460b      	mov	r3, r1
 800beb8:	ea03 030a 	and.w	r3, r3, sl
 800bebc:	653b      	str	r3, [r7, #80]	@ 0x50
 800bebe:	4613      	mov	r3, r2
 800bec0:	ea03 030b 	and.w	r3, r3, fp
 800bec4:	657b      	str	r3, [r7, #84]	@ 0x54
 800bec6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800beca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800bece:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
				ofs -= fp->fptr;
 800bed2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bed6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800beda:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800bede:	1a14      	subs	r4, r2, r0
 800bee0:	60bc      	str	r4, [r7, #8]
 800bee2:	eb63 0301 	sbc.w	r3, r3, r1
 800bee6:	60fb      	str	r3, [r7, #12]
 800bee8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800beec:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
				clst = fp->clust;
 800bef0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bef6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800befa:	e03d      	b.n	800bf78 <f_lseek+0x558>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800befc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bf00:	689b      	ldr	r3, [r3, #8]
 800bf02:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800bf06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d12f      	bne.n	800bf6e <f_lseek+0x54e>
					clst = create_chain(&fp->obj, 0);
 800bf0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bf12:	2100      	movs	r1, #0
 800bf14:	4618      	mov	r0, r3
 800bf16:	f7fc fcfd 	bl	8008914 <create_chain>
 800bf1a:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bf1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d10c      	bne.n	800bf40 <f_lseek+0x520>
 800bf26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bf2a:	2202      	movs	r2, #2
 800bf2c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800bf30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bf34:	2102      	movs	r1, #2
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7fb fde1 	bl	8007afe <unlock_fs>
 800bf3c:	2302      	movs	r3, #2
 800bf3e:	e1ad      	b.n	800c29c <f_lseek+0x87c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bf40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf48:	d10c      	bne.n	800bf64 <f_lseek+0x544>
 800bf4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bf4e:	2201      	movs	r2, #1
 800bf50:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800bf54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bf58:	2101      	movs	r1, #1
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7fb fdcf 	bl	8007afe <unlock_fs>
 800bf60:	2301      	movs	r3, #1
 800bf62:	e19b      	b.n	800c29c <f_lseek+0x87c>
					fp->obj.sclust = clst;
 800bf64:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800bf68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf6c:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 800bf6e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800bf72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf76:	6413      	str	r3, [r2, #64]	@ 0x40
			}
			if (clst != 0) {
 800bf78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	f000 80fc 	beq.w	800c17a <f_lseek+0x75a>
				while (ofs > bcs) {						/* Cluster following loop */
 800bf82:	e09c      	b.n	800c0be <f_lseek+0x69e>
					ofs -= bcs; fp->fptr += bcs;
 800bf84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bf88:	2200      	movs	r2, #0
 800bf8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf8c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800bf8e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800bf92:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800bf96:	4621      	mov	r1, r4
 800bf98:	1a51      	subs	r1, r2, r1
 800bf9a:	6039      	str	r1, [r7, #0]
 800bf9c:	4629      	mov	r1, r5
 800bf9e:	eb63 0301 	sbc.w	r3, r3, r1
 800bfa2:	607b      	str	r3, [r7, #4]
 800bfa4:	e9d7 3400 	ldrd	r3, r4, [r7]
 800bfa8:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
 800bfac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bfb0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800bfb4:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 800bfb8:	2000      	movs	r0, #0
 800bfba:	6439      	str	r1, [r7, #64]	@ 0x40
 800bfbc:	6478      	str	r0, [r7, #68]	@ 0x44
 800bfbe:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800bfc2:	4621      	mov	r1, r4
 800bfc4:	1851      	adds	r1, r2, r1
 800bfc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800bfc8:	4629      	mov	r1, r5
 800bfca:	414b      	adcs	r3, r1
 800bfcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bfce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bfd2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800bfd6:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800bfda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bfde:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bfe2:	f003 0302 	and.w	r3, r3, #2
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d031      	beq.n	800c04e <f_lseek+0x62e>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 800bfea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bfee:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800bff2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bff6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bffa:	4282      	cmp	r2, r0
 800bffc:	418b      	sbcs	r3, r1
 800bffe:	d212      	bcs.n	800c026 <f_lseek+0x606>
							fp->obj.objsize = fp->fptr;
 800c000:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c004:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800c008:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c00c:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 800c010:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c014:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c018:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800c022:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c026:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c02a:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800c02e:	4618      	mov	r0, r3
 800c030:	f7fc fc70 	bl	8008914 <create_chain>
 800c034:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d10f      	bne.n	800c060 <f_lseek+0x640>
							ofs = 0; break;
 800c040:	f04f 0200 	mov.w	r2, #0
 800c044:	f04f 0300 	mov.w	r3, #0
 800c048:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
 800c04c:	e047      	b.n	800c0de <f_lseek+0x6be>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c04e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c052:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800c056:	4618      	mov	r0, r3
 800c058:	f7fb ffda 	bl	8008010 <get_fat>
 800c05c:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c064:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c068:	d10c      	bne.n	800c084 <f_lseek+0x664>
 800c06a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c06e:	2201      	movs	r2, #1
 800c070:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800c074:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c078:	2101      	movs	r1, #1
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7fb fd3f 	bl	8007afe <unlock_fs>
 800c080:	2301      	movs	r3, #1
 800c082:	e10b      	b.n	800c29c <f_lseek+0x87c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d906      	bls.n	800c09a <f_lseek+0x67a>
 800c08c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c090:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c096:	4293      	cmp	r3, r2
 800c098:	d30c      	bcc.n	800c0b4 <f_lseek+0x694>
 800c09a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c09e:	2202      	movs	r2, #2
 800c0a0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800c0a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c0a8:	2102      	movs	r1, #2
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f7fb fd27 	bl	8007afe <unlock_fs>
 800c0b0:	2302      	movs	r3, #2
 800c0b2:	e0f3      	b.n	800c29c <f_lseek+0x87c>
					fp->clust = clst;
 800c0b4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800c0b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0bc:	6413      	str	r3, [r2, #64]	@ 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 800c0be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0c6:	637a      	str	r2, [r7, #52]	@ 0x34
 800c0c8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800c0cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800c0d0:	4621      	mov	r1, r4
 800c0d2:	4291      	cmp	r1, r2
 800c0d4:	4629      	mov	r1, r5
 800c0d6:	eb71 0303 	sbcs.w	r3, r1, r3
 800c0da:	f4ff af53 	bcc.w	800bf84 <f_lseek+0x564>
				}
				fp->fptr += ofs;
 800c0de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c0e2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800c0e6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800c0ea:	1884      	adds	r4, r0, r2
 800c0ec:	62bc      	str	r4, [r7, #40]	@ 0x28
 800c0ee:	eb41 0303 	adc.w	r3, r1, r3
 800c0f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c0f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c0f8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c0fc:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
				if (ofs % SS(fs)) {
 800c100:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c104:	899b      	ldrh	r3, [r3, #12]
 800c106:	b29b      	uxth	r3, r3
 800c108:	2200      	movs	r2, #0
 800c10a:	623b      	str	r3, [r7, #32]
 800c10c:	627a      	str	r2, [r7, #36]	@ 0x24
 800c10e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c112:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c116:	f7f4 f863 	bl	80001e0 <__aeabi_uldivmod>
 800c11a:	4313      	orrs	r3, r2
 800c11c:	d02d      	beq.n	800c17a <f_lseek+0x75a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c11e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c122:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800c126:	4618      	mov	r0, r3
 800c128:	f7fb ff52 	bl	8007fd0 <clust2sect>
 800c12c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c134:	2b00      	cmp	r3, #0
 800c136:	d10c      	bne.n	800c152 <f_lseek+0x732>
 800c138:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c13c:	2202      	movs	r2, #2
 800c13e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800c142:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c146:	2102      	movs	r1, #2
 800c148:	4618      	mov	r0, r3
 800c14a:	f7fb fcd8 	bl	8007afe <unlock_fs>
 800c14e:	2302      	movs	r3, #2
 800c150:	e0a4      	b.n	800c29c <f_lseek+0x87c>
					nsect += (DWORD)(ofs / SS(fs));
 800c152:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c156:	899b      	ldrh	r3, [r3, #12]
 800c158:	b29b      	uxth	r3, r3
 800c15a:	2200      	movs	r2, #0
 800c15c:	61bb      	str	r3, [r7, #24]
 800c15e:	61fa      	str	r2, [r7, #28]
 800c160:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c164:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c168:	f7f4 f83a 	bl	80001e0 <__aeabi_uldivmod>
 800c16c:	4602      	mov	r2, r0
 800c16e:	460b      	mov	r3, r1
 800c170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c174:	4413      	add	r3, r2
 800c176:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c17a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c17e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800c182:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c186:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800c18a:	4290      	cmp	r0, r2
 800c18c:	eb71 0303 	sbcs.w	r3, r1, r3
 800c190:	d212      	bcs.n	800c1b8 <f_lseek+0x798>
			fp->obj.objsize = fp->fptr;
 800c192:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c196:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800c19a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c19e:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 800c1a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c1a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c1aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1ae:	b2da      	uxtb	r2, r3
 800c1b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c1b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c1b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c1bc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800c1c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c1c4:	899b      	ldrh	r3, [r3, #12]
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	613b      	str	r3, [r7, #16]
 800c1cc:	617a      	str	r2, [r7, #20]
 800c1ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c1d2:	f7f4 f805 	bl	80001e0 <__aeabi_uldivmod>
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	d056      	beq.n	800c288 <f_lseek+0x868>
 800c1da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c1de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d04f      	beq.n	800c288 <f_lseek+0x868>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c1e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c1ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c1f0:	b25b      	sxtb	r3, r3
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	da27      	bge.n	800c246 <f_lseek+0x826>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c1f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c1fa:	7858      	ldrb	r0, [r3, #1]
 800c1fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c200:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800c204:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c208:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c20a:	2301      	movs	r3, #1
 800c20c:	f7fb f9c0 	bl	8007590 <disk_write>
 800c210:	4603      	mov	r3, r0
 800c212:	2b00      	cmp	r3, #0
 800c214:	d00c      	beq.n	800c230 <f_lseek+0x810>
 800c216:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c21a:	2201      	movs	r2, #1
 800c21c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800c220:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c224:	2101      	movs	r1, #1
 800c226:	4618      	mov	r0, r3
 800c228:	f7fb fc69 	bl	8007afe <unlock_fs>
 800c22c:	2301      	movs	r3, #1
 800c22e:	e035      	b.n	800c29c <f_lseek+0x87c>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c230:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c234:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c238:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c23c:	b2da      	uxtb	r2, r3
 800c23e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c242:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c246:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c24a:	7858      	ldrb	r0, [r3, #1]
 800c24c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c250:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800c254:	2301      	movs	r3, #1
 800c256:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c25a:	f7fb f979 	bl	8007550 <disk_read>
 800c25e:	4603      	mov	r3, r0
 800c260:	2b00      	cmp	r3, #0
 800c262:	d00c      	beq.n	800c27e <f_lseek+0x85e>
 800c264:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c268:	2201      	movs	r2, #1
 800c26a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800c26e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c272:	2101      	movs	r1, #1
 800c274:	4618      	mov	r0, r3
 800c276:	f7fb fc42 	bl	8007afe <unlock_fs>
 800c27a:	2301      	movs	r3, #1
 800c27c:	e00e      	b.n	800c29c <f_lseek+0x87c>
#endif
			fp->sect = nsect;
 800c27e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c282:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c286:	645a      	str	r2, [r3, #68]	@ 0x44
		}
	}

	LEAVE_FF(fs, res);
 800c288:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c28c:	f897 20e7 	ldrb.w	r2, [r7, #231]	@ 0xe7
 800c290:	4611      	mov	r1, r2
 800c292:	4618      	mov	r0, r3
 800c294:	f7fb fc33 	bl	8007afe <unlock_fs>
 800c298:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	37e8      	adds	r7, #232	@ 0xe8
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800c2a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b087      	sub	sp, #28
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	60f8      	str	r0, [r7, #12]
 800c2b0:	60b9      	str	r1, [r7, #8]
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c2be:	4b1f      	ldr	r3, [pc, #124]	@ (800c33c <FATFS_LinkDriverEx+0x94>)
 800c2c0:	7a5b      	ldrb	r3, [r3, #9]
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d131      	bne.n	800c32c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c2c8:	4b1c      	ldr	r3, [pc, #112]	@ (800c33c <FATFS_LinkDriverEx+0x94>)
 800c2ca:	7a5b      	ldrb	r3, [r3, #9]
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	4b1a      	ldr	r3, [pc, #104]	@ (800c33c <FATFS_LinkDriverEx+0x94>)
 800c2d2:	2100      	movs	r1, #0
 800c2d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c2d6:	4b19      	ldr	r3, [pc, #100]	@ (800c33c <FATFS_LinkDriverEx+0x94>)
 800c2d8:	7a5b      	ldrb	r3, [r3, #9]
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	4a17      	ldr	r2, [pc, #92]	@ (800c33c <FATFS_LinkDriverEx+0x94>)
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	4413      	add	r3, r2
 800c2e2:	68fa      	ldr	r2, [r7, #12]
 800c2e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c2e6:	4b15      	ldr	r3, [pc, #84]	@ (800c33c <FATFS_LinkDriverEx+0x94>)
 800c2e8:	7a5b      	ldrb	r3, [r3, #9]
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	4b13      	ldr	r3, [pc, #76]	@ (800c33c <FATFS_LinkDriverEx+0x94>)
 800c2f0:	4413      	add	r3, r2
 800c2f2:	79fa      	ldrb	r2, [r7, #7]
 800c2f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c2f6:	4b11      	ldr	r3, [pc, #68]	@ (800c33c <FATFS_LinkDriverEx+0x94>)
 800c2f8:	7a5b      	ldrb	r3, [r3, #9]
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	1c5a      	adds	r2, r3, #1
 800c2fe:	b2d1      	uxtb	r1, r2
 800c300:	4a0e      	ldr	r2, [pc, #56]	@ (800c33c <FATFS_LinkDriverEx+0x94>)
 800c302:	7251      	strb	r1, [r2, #9]
 800c304:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c306:	7dbb      	ldrb	r3, [r7, #22]
 800c308:	3330      	adds	r3, #48	@ 0x30
 800c30a:	b2da      	uxtb	r2, r3
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	3301      	adds	r3, #1
 800c314:	223a      	movs	r2, #58	@ 0x3a
 800c316:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	3302      	adds	r3, #2
 800c31c:	222f      	movs	r2, #47	@ 0x2f
 800c31e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	3303      	adds	r3, #3
 800c324:	2200      	movs	r2, #0
 800c326:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c328:	2300      	movs	r3, #0
 800c32a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c32c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c32e:	4618      	mov	r0, r3
 800c330:	371c      	adds	r7, #28
 800c332:	46bd      	mov	sp, r7
 800c334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c338:	4770      	bx	lr
 800c33a:	bf00      	nop
 800c33c:	200027f4 	.word	0x200027f4

0800c340 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b082      	sub	sp, #8
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c34a:	2200      	movs	r2, #0
 800c34c:	6839      	ldr	r1, [r7, #0]
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f7ff ffaa 	bl	800c2a8 <FATFS_LinkDriverEx>
 800c354:	4603      	mov	r3, r0
}
 800c356:	4618      	mov	r0, r3
 800c358:	3708      	adds	r7, #8
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
	...

0800c360 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800c360:	b480      	push	{r7}
 800c362:	b085      	sub	sp, #20
 800c364:	af00      	add	r7, sp, #0
 800c366:	4603      	mov	r3, r0
 800c368:	6039      	str	r1, [r7, #0]
 800c36a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c36c:	88fb      	ldrh	r3, [r7, #6]
 800c36e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c370:	d802      	bhi.n	800c378 <ff_convert+0x18>
		c = chr;
 800c372:	88fb      	ldrh	r3, [r7, #6]
 800c374:	81fb      	strh	r3, [r7, #14]
 800c376:	e025      	b.n	800c3c4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d00b      	beq.n	800c396 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c37e:	88fb      	ldrh	r3, [r7, #6]
 800c380:	2bff      	cmp	r3, #255	@ 0xff
 800c382:	d805      	bhi.n	800c390 <ff_convert+0x30>
 800c384:	88fb      	ldrh	r3, [r7, #6]
 800c386:	3b80      	subs	r3, #128	@ 0x80
 800c388:	4a12      	ldr	r2, [pc, #72]	@ (800c3d4 <ff_convert+0x74>)
 800c38a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c38e:	e000      	b.n	800c392 <ff_convert+0x32>
 800c390:	2300      	movs	r3, #0
 800c392:	81fb      	strh	r3, [r7, #14]
 800c394:	e016      	b.n	800c3c4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c396:	2300      	movs	r3, #0
 800c398:	81fb      	strh	r3, [r7, #14]
 800c39a:	e009      	b.n	800c3b0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c39c:	89fb      	ldrh	r3, [r7, #14]
 800c39e:	4a0d      	ldr	r2, [pc, #52]	@ (800c3d4 <ff_convert+0x74>)
 800c3a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3a4:	88fa      	ldrh	r2, [r7, #6]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d006      	beq.n	800c3b8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c3aa:	89fb      	ldrh	r3, [r7, #14]
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	81fb      	strh	r3, [r7, #14]
 800c3b0:	89fb      	ldrh	r3, [r7, #14]
 800c3b2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c3b4:	d9f2      	bls.n	800c39c <ff_convert+0x3c>
 800c3b6:	e000      	b.n	800c3ba <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c3b8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c3ba:	89fb      	ldrh	r3, [r7, #14]
 800c3bc:	3380      	adds	r3, #128	@ 0x80
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	b2db      	uxtb	r3, r3
 800c3c2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c3c4:	89fb      	ldrh	r3, [r7, #14]
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3714      	adds	r7, #20
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr
 800c3d2:	bf00      	nop
 800c3d4:	08012bd8 	.word	0x08012bd8

0800c3d8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b087      	sub	sp, #28
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	4603      	mov	r3, r0
 800c3e0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c3e2:	88fb      	ldrh	r3, [r7, #6]
 800c3e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c3e8:	d201      	bcs.n	800c3ee <ff_wtoupper+0x16>
 800c3ea:	4b3e      	ldr	r3, [pc, #248]	@ (800c4e4 <ff_wtoupper+0x10c>)
 800c3ec:	e000      	b.n	800c3f0 <ff_wtoupper+0x18>
 800c3ee:	4b3e      	ldr	r3, [pc, #248]	@ (800c4e8 <ff_wtoupper+0x110>)
 800c3f0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	1c9a      	adds	r2, r3, #2
 800c3f6:	617a      	str	r2, [r7, #20]
 800c3f8:	881b      	ldrh	r3, [r3, #0]
 800c3fa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800c3fc:	8a7b      	ldrh	r3, [r7, #18]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d068      	beq.n	800c4d4 <ff_wtoupper+0xfc>
 800c402:	88fa      	ldrh	r2, [r7, #6]
 800c404:	8a7b      	ldrh	r3, [r7, #18]
 800c406:	429a      	cmp	r2, r3
 800c408:	d364      	bcc.n	800c4d4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	1c9a      	adds	r2, r3, #2
 800c40e:	617a      	str	r2, [r7, #20]
 800c410:	881b      	ldrh	r3, [r3, #0]
 800c412:	823b      	strh	r3, [r7, #16]
 800c414:	8a3b      	ldrh	r3, [r7, #16]
 800c416:	0a1b      	lsrs	r3, r3, #8
 800c418:	81fb      	strh	r3, [r7, #14]
 800c41a:	8a3b      	ldrh	r3, [r7, #16]
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800c420:	88fa      	ldrh	r2, [r7, #6]
 800c422:	8a79      	ldrh	r1, [r7, #18]
 800c424:	8a3b      	ldrh	r3, [r7, #16]
 800c426:	440b      	add	r3, r1
 800c428:	429a      	cmp	r2, r3
 800c42a:	da49      	bge.n	800c4c0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800c42c:	89fb      	ldrh	r3, [r7, #14]
 800c42e:	2b08      	cmp	r3, #8
 800c430:	d84f      	bhi.n	800c4d2 <ff_wtoupper+0xfa>
 800c432:	a201      	add	r2, pc, #4	@ (adr r2, 800c438 <ff_wtoupper+0x60>)
 800c434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c438:	0800c45d 	.word	0x0800c45d
 800c43c:	0800c46f 	.word	0x0800c46f
 800c440:	0800c485 	.word	0x0800c485
 800c444:	0800c48d 	.word	0x0800c48d
 800c448:	0800c495 	.word	0x0800c495
 800c44c:	0800c49d 	.word	0x0800c49d
 800c450:	0800c4a5 	.word	0x0800c4a5
 800c454:	0800c4ad 	.word	0x0800c4ad
 800c458:	0800c4b5 	.word	0x0800c4b5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c45c:	88fa      	ldrh	r2, [r7, #6]
 800c45e:	8a7b      	ldrh	r3, [r7, #18]
 800c460:	1ad3      	subs	r3, r2, r3
 800c462:	005b      	lsls	r3, r3, #1
 800c464:	697a      	ldr	r2, [r7, #20]
 800c466:	4413      	add	r3, r2
 800c468:	881b      	ldrh	r3, [r3, #0]
 800c46a:	80fb      	strh	r3, [r7, #6]
 800c46c:	e027      	b.n	800c4be <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c46e:	88fa      	ldrh	r2, [r7, #6]
 800c470:	8a7b      	ldrh	r3, [r7, #18]
 800c472:	1ad3      	subs	r3, r2, r3
 800c474:	b29b      	uxth	r3, r3
 800c476:	f003 0301 	and.w	r3, r3, #1
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	88fa      	ldrh	r2, [r7, #6]
 800c47e:	1ad3      	subs	r3, r2, r3
 800c480:	80fb      	strh	r3, [r7, #6]
 800c482:	e01c      	b.n	800c4be <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c484:	88fb      	ldrh	r3, [r7, #6]
 800c486:	3b10      	subs	r3, #16
 800c488:	80fb      	strh	r3, [r7, #6]
 800c48a:	e018      	b.n	800c4be <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c48c:	88fb      	ldrh	r3, [r7, #6]
 800c48e:	3b20      	subs	r3, #32
 800c490:	80fb      	strh	r3, [r7, #6]
 800c492:	e014      	b.n	800c4be <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c494:	88fb      	ldrh	r3, [r7, #6]
 800c496:	3b30      	subs	r3, #48	@ 0x30
 800c498:	80fb      	strh	r3, [r7, #6]
 800c49a:	e010      	b.n	800c4be <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c49c:	88fb      	ldrh	r3, [r7, #6]
 800c49e:	3b1a      	subs	r3, #26
 800c4a0:	80fb      	strh	r3, [r7, #6]
 800c4a2:	e00c      	b.n	800c4be <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c4a4:	88fb      	ldrh	r3, [r7, #6]
 800c4a6:	3308      	adds	r3, #8
 800c4a8:	80fb      	strh	r3, [r7, #6]
 800c4aa:	e008      	b.n	800c4be <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c4ac:	88fb      	ldrh	r3, [r7, #6]
 800c4ae:	3b50      	subs	r3, #80	@ 0x50
 800c4b0:	80fb      	strh	r3, [r7, #6]
 800c4b2:	e004      	b.n	800c4be <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c4b4:	88fb      	ldrh	r3, [r7, #6]
 800c4b6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800c4ba:	80fb      	strh	r3, [r7, #6]
 800c4bc:	bf00      	nop
			}
			break;
 800c4be:	e008      	b.n	800c4d2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c4c0:	89fb      	ldrh	r3, [r7, #14]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d195      	bne.n	800c3f2 <ff_wtoupper+0x1a>
 800c4c6:	8a3b      	ldrh	r3, [r7, #16]
 800c4c8:	005b      	lsls	r3, r3, #1
 800c4ca:	697a      	ldr	r2, [r7, #20]
 800c4cc:	4413      	add	r3, r2
 800c4ce:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c4d0:	e78f      	b.n	800c3f2 <ff_wtoupper+0x1a>
			break;
 800c4d2:	bf00      	nop
	}

	return chr;
 800c4d4:	88fb      	ldrh	r3, [r7, #6]
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	371c      	adds	r7, #28
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr
 800c4e2:	bf00      	nop
 800c4e4:	08012cd8 	.word	0x08012cd8
 800c4e8:	08012ecc 	.word	0x08012ecc

0800c4ec <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	6039      	str	r1, [r7, #0]
 800c4f6:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800c4fc:	f107 0308 	add.w	r3, r7, #8
 800c500:	2101      	movs	r1, #1
 800c502:	4618      	mov	r0, r3
 800c504:	f000 f865 	bl	800c5d2 <osSemaphoreCreate>
 800c508:	4602      	mov	r2, r0
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	bf14      	ite	ne
 800c516:	2301      	movne	r3, #1
 800c518:	2300      	moveq	r3, #0
 800c51a:	b2db      	uxtb	r3, r3
 800c51c:	60fb      	str	r3, [r7, #12]

    return ret;
 800c51e:	68fb      	ldr	r3, [r7, #12]
}
 800c520:	4618      	mov	r0, r3
 800c522:	3710      	adds	r7, #16
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f000 f8f1 	bl	800c718 <osSemaphoreDelete>
#endif
    return 1;
 800c536:	2301      	movs	r3, #1
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3708      	adds	r7, #8
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c548:	2300      	movs	r3, #0
 800c54a:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800c54c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 f85d 	bl	800c610 <osSemaphoreWait>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d101      	bne.n	800c560 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800c55c:	2301      	movs	r3, #1
 800c55e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c560:	68fb      	ldr	r3, [r7, #12]
}
 800c562:	4618      	mov	r0, r3
 800c564:	3710      	adds	r7, #16
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b082      	sub	sp, #8
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 f89a 	bl	800c6ac <osSemaphoreRelease>
#endif
}
 800c578:	bf00      	nop
 800c57a:	3708      	adds	r7, #8
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f002 f987 	bl	800e89c <pvPortMalloc>
 800c58e:	4603      	mov	r3, r0
}
 800c590:	4618      	mov	r0, r3
 800c592:	3708      	adds	r7, #8
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f002 fa49 	bl	800ea38 <vPortFree>
}
 800c5a6:	bf00      	nop
 800c5a8:	3708      	adds	r7, #8
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}

0800c5ae <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c5ae:	b480      	push	{r7}
 800c5b0:	b083      	sub	sp, #12
 800c5b2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5b4:	f3ef 8305 	mrs	r3, IPSR
 800c5b8:	607b      	str	r3, [r7, #4]
  return(result);
 800c5ba:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	bf14      	ite	ne
 800c5c0:	2301      	movne	r3, #1
 800c5c2:	2300      	moveq	r3, #0
 800c5c4:	b2db      	uxtb	r3, r3
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	370c      	adds	r7, #12
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr

0800c5d2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b084      	sub	sp, #16
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
 800c5da:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	d110      	bne.n	800c604 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800c5e2:	2203      	movs	r2, #3
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	2001      	movs	r0, #1
 800c5e8:	f000 f9c8 	bl	800c97c <xQueueGenericCreate>
 800c5ec:	60f8      	str	r0, [r7, #12]
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d005      	beq.n	800c600 <osSemaphoreCreate+0x2e>
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	2100      	movs	r1, #0
 800c5fa:	68f8      	ldr	r0, [r7, #12]
 800c5fc:	f000 fa14 	bl	800ca28 <xQueueGenericSend>
    return sema;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	e000      	b.n	800c606 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800c604:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800c606:	4618      	mov	r0, r3
 800c608:	3710      	adds	r7, #16
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
	...

0800c610 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c61a:	2300      	movs	r3, #0
 800c61c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d101      	bne.n	800c628 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c624:	2380      	movs	r3, #128	@ 0x80
 800c626:	e03a      	b.n	800c69e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c628:	2300      	movs	r3, #0
 800c62a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c632:	d103      	bne.n	800c63c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c634:	f04f 33ff 	mov.w	r3, #4294967295
 800c638:	60fb      	str	r3, [r7, #12]
 800c63a:	e009      	b.n	800c650 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d006      	beq.n	800c650 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d101      	bne.n	800c650 <osSemaphoreWait+0x40>
      ticks = 1;
 800c64c:	2301      	movs	r3, #1
 800c64e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c650:	f7ff ffad 	bl	800c5ae <inHandlerMode>
 800c654:	4603      	mov	r3, r0
 800c656:	2b00      	cmp	r3, #0
 800c658:	d017      	beq.n	800c68a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c65a:	f107 0308 	add.w	r3, r7, #8
 800c65e:	461a      	mov	r2, r3
 800c660:	2100      	movs	r1, #0
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f000 fd64 	bl	800d130 <xQueueReceiveFromISR>
 800c668:	4603      	mov	r3, r0
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d001      	beq.n	800c672 <osSemaphoreWait+0x62>
      return osErrorOS;
 800c66e:	23ff      	movs	r3, #255	@ 0xff
 800c670:	e015      	b.n	800c69e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d011      	beq.n	800c69c <osSemaphoreWait+0x8c>
 800c678:	4b0b      	ldr	r3, [pc, #44]	@ (800c6a8 <osSemaphoreWait+0x98>)
 800c67a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c67e:	601a      	str	r2, [r3, #0]
 800c680:	f3bf 8f4f 	dsb	sy
 800c684:	f3bf 8f6f 	isb	sy
 800c688:	e008      	b.n	800c69c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c68a:	68f9      	ldr	r1, [r7, #12]
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 fc3f 	bl	800cf10 <xQueueSemaphoreTake>
 800c692:	4603      	mov	r3, r0
 800c694:	2b01      	cmp	r3, #1
 800c696:	d001      	beq.n	800c69c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c698:	23ff      	movs	r3, #255	@ 0xff
 800c69a:	e000      	b.n	800c69e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c69c:	2300      	movs	r3, #0
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3710      	adds	r7, #16
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	e000ed04 	.word	0xe000ed04

0800c6ac <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b084      	sub	sp, #16
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c6bc:	f7ff ff77 	bl	800c5ae <inHandlerMode>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d016      	beq.n	800c6f4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c6c6:	f107 0308 	add.w	r3, r7, #8
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f000 faad 	bl	800cc2c <xQueueGiveFromISR>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	d001      	beq.n	800c6dc <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c6d8:	23ff      	movs	r3, #255	@ 0xff
 800c6da:	e017      	b.n	800c70c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d013      	beq.n	800c70a <osSemaphoreRelease+0x5e>
 800c6e2:	4b0c      	ldr	r3, [pc, #48]	@ (800c714 <osSemaphoreRelease+0x68>)
 800c6e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6e8:	601a      	str	r2, [r3, #0]
 800c6ea:	f3bf 8f4f 	dsb	sy
 800c6ee:	f3bf 8f6f 	isb	sy
 800c6f2:	e00a      	b.n	800c70a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	2100      	movs	r1, #0
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 f994 	bl	800ca28 <xQueueGenericSend>
 800c700:	4603      	mov	r3, r0
 800c702:	2b01      	cmp	r3, #1
 800c704:	d001      	beq.n	800c70a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c706:	23ff      	movs	r3, #255	@ 0xff
 800c708:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c70a:	68fb      	ldr	r3, [r7, #12]
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3710      	adds	r7, #16
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	e000ed04 	.word	0xe000ed04

0800c718 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c720:	f7ff ff45 	bl	800c5ae <inHandlerMode>
 800c724:	4603      	mov	r3, r0
 800c726:	2b00      	cmp	r3, #0
 800c728:	d001      	beq.n	800c72e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800c72a:	2382      	movs	r3, #130	@ 0x82
 800c72c:	e003      	b.n	800c736 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 fd80 	bl	800d234 <vQueueDelete>

  return osOK; 
 800c734:	2300      	movs	r3, #0
}
 800c736:	4618      	mov	r0, r3
 800c738:	3708      	adds	r7, #8
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}

0800c73e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c73e:	b480      	push	{r7}
 800c740:	b083      	sub	sp, #12
 800c742:	af00      	add	r7, sp, #0
 800c744:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f103 0208 	add.w	r2, r3, #8
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f04f 32ff 	mov.w	r2, #4294967295
 800c756:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f103 0208 	add.w	r2, r3, #8
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f103 0208 	add.w	r2, r3, #8
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2200      	movs	r2, #0
 800c770:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c772:	bf00      	nop
 800c774:	370c      	adds	r7, #12
 800c776:	46bd      	mov	sp, r7
 800c778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77c:	4770      	bx	lr

0800c77e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c77e:	b480      	push	{r7}
 800c780:	b083      	sub	sp, #12
 800c782:	af00      	add	r7, sp, #0
 800c784:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2200      	movs	r2, #0
 800c78a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c78c:	bf00      	nop
 800c78e:	370c      	adds	r7, #12
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr

0800c798 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c798:	b480      	push	{r7}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	68fa      	ldr	r2, [r7, #12]
 800c7ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	689a      	ldr	r2, [r3, #8]
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	683a      	ldr	r2, [r7, #0]
 800c7bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	683a      	ldr	r2, [r7, #0]
 800c7c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	687a      	ldr	r2, [r7, #4]
 800c7c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	1c5a      	adds	r2, r3, #1
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	601a      	str	r2, [r3, #0]
}
 800c7d4:	bf00      	nop
 800c7d6:	3714      	adds	r7, #20
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr

0800c7e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b085      	sub	sp, #20
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7f6:	d103      	bne.n	800c800 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	691b      	ldr	r3, [r3, #16]
 800c7fc:	60fb      	str	r3, [r7, #12]
 800c7fe:	e00c      	b.n	800c81a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	3308      	adds	r3, #8
 800c804:	60fb      	str	r3, [r7, #12]
 800c806:	e002      	b.n	800c80e <vListInsert+0x2e>
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	60fb      	str	r3, [r7, #12]
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	68ba      	ldr	r2, [r7, #8]
 800c816:	429a      	cmp	r2, r3
 800c818:	d2f6      	bcs.n	800c808 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	685a      	ldr	r2, [r3, #4]
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	683a      	ldr	r2, [r7, #0]
 800c828:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	683a      	ldr	r2, [r7, #0]
 800c834:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	1c5a      	adds	r2, r3, #1
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	601a      	str	r2, [r3, #0]
}
 800c846:	bf00      	nop
 800c848:	3714      	adds	r7, #20
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr

0800c852 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c852:	b480      	push	{r7}
 800c854:	b085      	sub	sp, #20
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	691b      	ldr	r3, [r3, #16]
 800c85e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	6892      	ldr	r2, [r2, #8]
 800c868:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	689b      	ldr	r3, [r3, #8]
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	6852      	ldr	r2, [r2, #4]
 800c872:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	687a      	ldr	r2, [r7, #4]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d103      	bne.n	800c886 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	689a      	ldr	r2, [r3, #8]
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2200      	movs	r2, #0
 800c88a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	1e5a      	subs	r2, r3, #1
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3714      	adds	r7, #20
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr
	...

0800c8a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d10b      	bne.n	800c8d4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c8bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8c0:	f383 8811 	msr	BASEPRI, r3
 800c8c4:	f3bf 8f6f 	isb	sy
 800c8c8:	f3bf 8f4f 	dsb	sy
 800c8cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c8ce:	bf00      	nop
 800c8d0:	bf00      	nop
 800c8d2:	e7fd      	b.n	800c8d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c8d4:	f001 fec0 	bl	800e658 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681a      	ldr	r2, [r3, #0]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8e0:	68f9      	ldr	r1, [r7, #12]
 800c8e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c8e4:	fb01 f303 	mul.w	r3, r1, r3
 800c8e8:	441a      	add	r2, r3
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	681a      	ldr	r2, [r3, #0]
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681a      	ldr	r2, [r3, #0]
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c904:	3b01      	subs	r3, #1
 800c906:	68f9      	ldr	r1, [r7, #12]
 800c908:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c90a:	fb01 f303 	mul.w	r3, r1, r3
 800c90e:	441a      	add	r2, r3
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	22ff      	movs	r2, #255	@ 0xff
 800c918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	22ff      	movs	r2, #255	@ 0xff
 800c920:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d114      	bne.n	800c954 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	691b      	ldr	r3, [r3, #16]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d01a      	beq.n	800c968 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	3310      	adds	r3, #16
 800c936:	4618      	mov	r0, r3
 800c938:	f001 f998 	bl	800dc6c <xTaskRemoveFromEventList>
 800c93c:	4603      	mov	r3, r0
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d012      	beq.n	800c968 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c942:	4b0d      	ldr	r3, [pc, #52]	@ (800c978 <xQueueGenericReset+0xd0>)
 800c944:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c948:	601a      	str	r2, [r3, #0]
 800c94a:	f3bf 8f4f 	dsb	sy
 800c94e:	f3bf 8f6f 	isb	sy
 800c952:	e009      	b.n	800c968 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	3310      	adds	r3, #16
 800c958:	4618      	mov	r0, r3
 800c95a:	f7ff fef0 	bl	800c73e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	3324      	adds	r3, #36	@ 0x24
 800c962:	4618      	mov	r0, r3
 800c964:	f7ff feeb 	bl	800c73e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c968:	f001 fea8 	bl	800e6bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c96c:	2301      	movs	r3, #1
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3710      	adds	r7, #16
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}
 800c976:	bf00      	nop
 800c978:	e000ed04 	.word	0xe000ed04

0800c97c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b08a      	sub	sp, #40	@ 0x28
 800c980:	af02      	add	r7, sp, #8
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	4613      	mov	r3, r2
 800c988:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d10b      	bne.n	800c9a8 <xQueueGenericCreate+0x2c>
	__asm volatile
 800c990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c994:	f383 8811 	msr	BASEPRI, r3
 800c998:	f3bf 8f6f 	isb	sy
 800c99c:	f3bf 8f4f 	dsb	sy
 800c9a0:	613b      	str	r3, [r7, #16]
}
 800c9a2:	bf00      	nop
 800c9a4:	bf00      	nop
 800c9a6:	e7fd      	b.n	800c9a4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	68ba      	ldr	r2, [r7, #8]
 800c9ac:	fb02 f303 	mul.w	r3, r2, r3
 800c9b0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	3348      	adds	r3, #72	@ 0x48
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f001 ff70 	bl	800e89c <pvPortMalloc>
 800c9bc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c9be:	69bb      	ldr	r3, [r7, #24]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d00d      	beq.n	800c9e0 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c9c4:	69bb      	ldr	r3, [r7, #24]
 800c9c6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	3348      	adds	r3, #72	@ 0x48
 800c9cc:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c9ce:	79fa      	ldrb	r2, [r7, #7]
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	9300      	str	r3, [sp, #0]
 800c9d4:	4613      	mov	r3, r2
 800c9d6:	697a      	ldr	r2, [r7, #20]
 800c9d8:	68b9      	ldr	r1, [r7, #8]
 800c9da:	68f8      	ldr	r0, [r7, #12]
 800c9dc:	f000 f805 	bl	800c9ea <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c9e0:	69bb      	ldr	r3, [r7, #24]
	}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3720      	adds	r7, #32
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	b084      	sub	sp, #16
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	60f8      	str	r0, [r7, #12]
 800c9f2:	60b9      	str	r1, [r7, #8]
 800c9f4:	607a      	str	r2, [r7, #4]
 800c9f6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d103      	bne.n	800ca06 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c9fe:	69bb      	ldr	r3, [r7, #24]
 800ca00:	69ba      	ldr	r2, [r7, #24]
 800ca02:	601a      	str	r2, [r3, #0]
 800ca04:	e002      	b.n	800ca0c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ca06:	69bb      	ldr	r3, [r7, #24]
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ca0c:	69bb      	ldr	r3, [r7, #24]
 800ca0e:	68fa      	ldr	r2, [r7, #12]
 800ca10:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ca12:	69bb      	ldr	r3, [r7, #24]
 800ca14:	68ba      	ldr	r2, [r7, #8]
 800ca16:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ca18:	2101      	movs	r1, #1
 800ca1a:	69b8      	ldr	r0, [r7, #24]
 800ca1c:	f7ff ff44 	bl	800c8a8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ca20:	bf00      	nop
 800ca22:	3710      	adds	r7, #16
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b08e      	sub	sp, #56	@ 0x38
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	60f8      	str	r0, [r7, #12]
 800ca30:	60b9      	str	r1, [r7, #8]
 800ca32:	607a      	str	r2, [r7, #4]
 800ca34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ca36:	2300      	movs	r3, #0
 800ca38:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ca3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d10b      	bne.n	800ca5c <xQueueGenericSend+0x34>
	__asm volatile
 800ca44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca48:	f383 8811 	msr	BASEPRI, r3
 800ca4c:	f3bf 8f6f 	isb	sy
 800ca50:	f3bf 8f4f 	dsb	sy
 800ca54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ca56:	bf00      	nop
 800ca58:	bf00      	nop
 800ca5a:	e7fd      	b.n	800ca58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d103      	bne.n	800ca6a <xQueueGenericSend+0x42>
 800ca62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d101      	bne.n	800ca6e <xQueueGenericSend+0x46>
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	e000      	b.n	800ca70 <xQueueGenericSend+0x48>
 800ca6e:	2300      	movs	r3, #0
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d10b      	bne.n	800ca8c <xQueueGenericSend+0x64>
	__asm volatile
 800ca74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca78:	f383 8811 	msr	BASEPRI, r3
 800ca7c:	f3bf 8f6f 	isb	sy
 800ca80:	f3bf 8f4f 	dsb	sy
 800ca84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ca86:	bf00      	nop
 800ca88:	bf00      	nop
 800ca8a:	e7fd      	b.n	800ca88 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	2b02      	cmp	r3, #2
 800ca90:	d103      	bne.n	800ca9a <xQueueGenericSend+0x72>
 800ca92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	d101      	bne.n	800ca9e <xQueueGenericSend+0x76>
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	e000      	b.n	800caa0 <xQueueGenericSend+0x78>
 800ca9e:	2300      	movs	r3, #0
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d10b      	bne.n	800cabc <xQueueGenericSend+0x94>
	__asm volatile
 800caa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caa8:	f383 8811 	msr	BASEPRI, r3
 800caac:	f3bf 8f6f 	isb	sy
 800cab0:	f3bf 8f4f 	dsb	sy
 800cab4:	623b      	str	r3, [r7, #32]
}
 800cab6:	bf00      	nop
 800cab8:	bf00      	nop
 800caba:	e7fd      	b.n	800cab8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cabc:	f001 fa76 	bl	800dfac <xTaskGetSchedulerState>
 800cac0:	4603      	mov	r3, r0
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d102      	bne.n	800cacc <xQueueGenericSend+0xa4>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d101      	bne.n	800cad0 <xQueueGenericSend+0xa8>
 800cacc:	2301      	movs	r3, #1
 800cace:	e000      	b.n	800cad2 <xQueueGenericSend+0xaa>
 800cad0:	2300      	movs	r3, #0
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d10b      	bne.n	800caee <xQueueGenericSend+0xc6>
	__asm volatile
 800cad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cada:	f383 8811 	msr	BASEPRI, r3
 800cade:	f3bf 8f6f 	isb	sy
 800cae2:	f3bf 8f4f 	dsb	sy
 800cae6:	61fb      	str	r3, [r7, #28]
}
 800cae8:	bf00      	nop
 800caea:	bf00      	nop
 800caec:	e7fd      	b.n	800caea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800caee:	f001 fdb3 	bl	800e658 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800caf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800caf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d302      	bcc.n	800cb04 <xQueueGenericSend+0xdc>
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	2b02      	cmp	r3, #2
 800cb02:	d129      	bne.n	800cb58 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cb04:	683a      	ldr	r2, [r7, #0]
 800cb06:	68b9      	ldr	r1, [r7, #8]
 800cb08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cb0a:	f000 fbca 	bl	800d2a2 <prvCopyDataToQueue>
 800cb0e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d010      	beq.n	800cb3a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb1a:	3324      	adds	r3, #36	@ 0x24
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f001 f8a5 	bl	800dc6c <xTaskRemoveFromEventList>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d013      	beq.n	800cb50 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cb28:	4b3f      	ldr	r3, [pc, #252]	@ (800cc28 <xQueueGenericSend+0x200>)
 800cb2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb2e:	601a      	str	r2, [r3, #0]
 800cb30:	f3bf 8f4f 	dsb	sy
 800cb34:	f3bf 8f6f 	isb	sy
 800cb38:	e00a      	b.n	800cb50 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cb3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d007      	beq.n	800cb50 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cb40:	4b39      	ldr	r3, [pc, #228]	@ (800cc28 <xQueueGenericSend+0x200>)
 800cb42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb46:	601a      	str	r2, [r3, #0]
 800cb48:	f3bf 8f4f 	dsb	sy
 800cb4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cb50:	f001 fdb4 	bl	800e6bc <vPortExitCritical>
				return pdPASS;
 800cb54:	2301      	movs	r3, #1
 800cb56:	e063      	b.n	800cc20 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d103      	bne.n	800cb66 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cb5e:	f001 fdad 	bl	800e6bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cb62:	2300      	movs	r3, #0
 800cb64:	e05c      	b.n	800cc20 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cb66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d106      	bne.n	800cb7a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb6c:	f107 0314 	add.w	r3, r7, #20
 800cb70:	4618      	mov	r0, r3
 800cb72:	f001 f8df 	bl	800dd34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cb76:	2301      	movs	r3, #1
 800cb78:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb7a:	f001 fd9f 	bl	800e6bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb7e:	f000 fe7d 	bl	800d87c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb82:	f001 fd69 	bl	800e658 <vPortEnterCritical>
 800cb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cb8c:	b25b      	sxtb	r3, r3
 800cb8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb92:	d103      	bne.n	800cb9c <xQueueGenericSend+0x174>
 800cb94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb96:	2200      	movs	r2, #0
 800cb98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cb9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cba2:	b25b      	sxtb	r3, r3
 800cba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cba8:	d103      	bne.n	800cbb2 <xQueueGenericSend+0x18a>
 800cbaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbac:	2200      	movs	r2, #0
 800cbae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cbb2:	f001 fd83 	bl	800e6bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cbb6:	1d3a      	adds	r2, r7, #4
 800cbb8:	f107 0314 	add.w	r3, r7, #20
 800cbbc:	4611      	mov	r1, r2
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f001 f8ce 	bl	800dd60 <xTaskCheckForTimeOut>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d124      	bne.n	800cc14 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cbca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cbcc:	f000 fc61 	bl	800d492 <prvIsQueueFull>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d018      	beq.n	800cc08 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cbd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd8:	3310      	adds	r3, #16
 800cbda:	687a      	ldr	r2, [r7, #4]
 800cbdc:	4611      	mov	r1, r2
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f001 f81e 	bl	800dc20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cbe4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cbe6:	f000 fbec 	bl	800d3c2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cbea:	f000 fe55 	bl	800d898 <xTaskResumeAll>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	f47f af7c 	bne.w	800caee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cbf6:	4b0c      	ldr	r3, [pc, #48]	@ (800cc28 <xQueueGenericSend+0x200>)
 800cbf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbfc:	601a      	str	r2, [r3, #0]
 800cbfe:	f3bf 8f4f 	dsb	sy
 800cc02:	f3bf 8f6f 	isb	sy
 800cc06:	e772      	b.n	800caee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cc08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cc0a:	f000 fbda 	bl	800d3c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cc0e:	f000 fe43 	bl	800d898 <xTaskResumeAll>
 800cc12:	e76c      	b.n	800caee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cc14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cc16:	f000 fbd4 	bl	800d3c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cc1a:	f000 fe3d 	bl	800d898 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cc1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3738      	adds	r7, #56	@ 0x38
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	e000ed04 	.word	0xe000ed04

0800cc2c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b08e      	sub	sp, #56	@ 0x38
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cc3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d10b      	bne.n	800cc58 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800cc40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc44:	f383 8811 	msr	BASEPRI, r3
 800cc48:	f3bf 8f6f 	isb	sy
 800cc4c:	f3bf 8f4f 	dsb	sy
 800cc50:	623b      	str	r3, [r7, #32]
}
 800cc52:	bf00      	nop
 800cc54:	bf00      	nop
 800cc56:	e7fd      	b.n	800cc54 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cc58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d00b      	beq.n	800cc78 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800cc60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc64:	f383 8811 	msr	BASEPRI, r3
 800cc68:	f3bf 8f6f 	isb	sy
 800cc6c:	f3bf 8f4f 	dsb	sy
 800cc70:	61fb      	str	r3, [r7, #28]
}
 800cc72:	bf00      	nop
 800cc74:	bf00      	nop
 800cc76:	e7fd      	b.n	800cc74 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cc78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d103      	bne.n	800cc88 <xQueueGiveFromISR+0x5c>
 800cc80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc82:	689b      	ldr	r3, [r3, #8]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d101      	bne.n	800cc8c <xQueueGiveFromISR+0x60>
 800cc88:	2301      	movs	r3, #1
 800cc8a:	e000      	b.n	800cc8e <xQueueGiveFromISR+0x62>
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d10b      	bne.n	800ccaa <xQueueGiveFromISR+0x7e>
	__asm volatile
 800cc92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc96:	f383 8811 	msr	BASEPRI, r3
 800cc9a:	f3bf 8f6f 	isb	sy
 800cc9e:	f3bf 8f4f 	dsb	sy
 800cca2:	61bb      	str	r3, [r7, #24]
}
 800cca4:	bf00      	nop
 800cca6:	bf00      	nop
 800cca8:	e7fd      	b.n	800cca6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ccaa:	f001 fdb5 	bl	800e818 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ccae:	f3ef 8211 	mrs	r2, BASEPRI
 800ccb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccb6:	f383 8811 	msr	BASEPRI, r3
 800ccba:	f3bf 8f6f 	isb	sy
 800ccbe:	f3bf 8f4f 	dsb	sy
 800ccc2:	617a      	str	r2, [r7, #20]
 800ccc4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ccc6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ccc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ccca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccce:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ccd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d22b      	bcs.n	800cd32 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ccda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cce0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cce6:	1c5a      	adds	r2, r3, #1
 800cce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccea:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ccec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ccf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccf4:	d112      	bne.n	800cd1c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ccf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d016      	beq.n	800cd2c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ccfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd00:	3324      	adds	r3, #36	@ 0x24
 800cd02:	4618      	mov	r0, r3
 800cd04:	f000 ffb2 	bl	800dc6c <xTaskRemoveFromEventList>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d00e      	beq.n	800cd2c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d00b      	beq.n	800cd2c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	2201      	movs	r2, #1
 800cd18:	601a      	str	r2, [r3, #0]
 800cd1a:	e007      	b.n	800cd2c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cd1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cd20:	3301      	adds	r3, #1
 800cd22:	b2db      	uxtb	r3, r3
 800cd24:	b25a      	sxtb	r2, r3
 800cd26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd30:	e001      	b.n	800cd36 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cd32:	2300      	movs	r3, #0
 800cd34:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd38:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cd40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cd42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3738      	adds	r7, #56	@ 0x38
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b08c      	sub	sp, #48	@ 0x30
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cd60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d10b      	bne.n	800cd7e <xQueueReceive+0x32>
	__asm volatile
 800cd66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd6a:	f383 8811 	msr	BASEPRI, r3
 800cd6e:	f3bf 8f6f 	isb	sy
 800cd72:	f3bf 8f4f 	dsb	sy
 800cd76:	623b      	str	r3, [r7, #32]
}
 800cd78:	bf00      	nop
 800cd7a:	bf00      	nop
 800cd7c:	e7fd      	b.n	800cd7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d103      	bne.n	800cd8c <xQueueReceive+0x40>
 800cd84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d101      	bne.n	800cd90 <xQueueReceive+0x44>
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	e000      	b.n	800cd92 <xQueueReceive+0x46>
 800cd90:	2300      	movs	r3, #0
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d10b      	bne.n	800cdae <xQueueReceive+0x62>
	__asm volatile
 800cd96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd9a:	f383 8811 	msr	BASEPRI, r3
 800cd9e:	f3bf 8f6f 	isb	sy
 800cda2:	f3bf 8f4f 	dsb	sy
 800cda6:	61fb      	str	r3, [r7, #28]
}
 800cda8:	bf00      	nop
 800cdaa:	bf00      	nop
 800cdac:	e7fd      	b.n	800cdaa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cdae:	f001 f8fd 	bl	800dfac <xTaskGetSchedulerState>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d102      	bne.n	800cdbe <xQueueReceive+0x72>
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d101      	bne.n	800cdc2 <xQueueReceive+0x76>
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	e000      	b.n	800cdc4 <xQueueReceive+0x78>
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d10b      	bne.n	800cde0 <xQueueReceive+0x94>
	__asm volatile
 800cdc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdcc:	f383 8811 	msr	BASEPRI, r3
 800cdd0:	f3bf 8f6f 	isb	sy
 800cdd4:	f3bf 8f4f 	dsb	sy
 800cdd8:	61bb      	str	r3, [r7, #24]
}
 800cdda:	bf00      	nop
 800cddc:	bf00      	nop
 800cdde:	e7fd      	b.n	800cddc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cde0:	f001 fc3a 	bl	800e658 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cde4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cde6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cde8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cdea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d01f      	beq.n	800ce30 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cdf0:	68b9      	ldr	r1, [r7, #8]
 800cdf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cdf4:	f000 fabf 	bl	800d376 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cdf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdfa:	1e5a      	subs	r2, r3, #1
 800cdfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdfe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce02:	691b      	ldr	r3, [r3, #16]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d00f      	beq.n	800ce28 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce0a:	3310      	adds	r3, #16
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f000 ff2d 	bl	800dc6c <xTaskRemoveFromEventList>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d007      	beq.n	800ce28 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ce18:	4b3c      	ldr	r3, [pc, #240]	@ (800cf0c <xQueueReceive+0x1c0>)
 800ce1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce1e:	601a      	str	r2, [r3, #0]
 800ce20:	f3bf 8f4f 	dsb	sy
 800ce24:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ce28:	f001 fc48 	bl	800e6bc <vPortExitCritical>
				return pdPASS;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	e069      	b.n	800cf04 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d103      	bne.n	800ce3e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ce36:	f001 fc41 	bl	800e6bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	e062      	b.n	800cf04 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d106      	bne.n	800ce52 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce44:	f107 0310 	add.w	r3, r7, #16
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f000 ff73 	bl	800dd34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce52:	f001 fc33 	bl	800e6bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce56:	f000 fd11 	bl	800d87c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce5a:	f001 fbfd 	bl	800e658 <vPortEnterCritical>
 800ce5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ce64:	b25b      	sxtb	r3, r3
 800ce66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce6a:	d103      	bne.n	800ce74 <xQueueReceive+0x128>
 800ce6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce6e:	2200      	movs	r2, #0
 800ce70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ce74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ce7a:	b25b      	sxtb	r3, r3
 800ce7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce80:	d103      	bne.n	800ce8a <xQueueReceive+0x13e>
 800ce82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce84:	2200      	movs	r2, #0
 800ce86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ce8a:	f001 fc17 	bl	800e6bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce8e:	1d3a      	adds	r2, r7, #4
 800ce90:	f107 0310 	add.w	r3, r7, #16
 800ce94:	4611      	mov	r1, r2
 800ce96:	4618      	mov	r0, r3
 800ce98:	f000 ff62 	bl	800dd60 <xTaskCheckForTimeOut>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d123      	bne.n	800ceea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cea2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cea4:	f000 fadf 	bl	800d466 <prvIsQueueEmpty>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d017      	beq.n	800cede <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ceae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceb0:	3324      	adds	r3, #36	@ 0x24
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	4611      	mov	r1, r2
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f000 feb2 	bl	800dc20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cebc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cebe:	f000 fa80 	bl	800d3c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cec2:	f000 fce9 	bl	800d898 <xTaskResumeAll>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d189      	bne.n	800cde0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800cecc:	4b0f      	ldr	r3, [pc, #60]	@ (800cf0c <xQueueReceive+0x1c0>)
 800cece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ced2:	601a      	str	r2, [r3, #0]
 800ced4:	f3bf 8f4f 	dsb	sy
 800ced8:	f3bf 8f6f 	isb	sy
 800cedc:	e780      	b.n	800cde0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cede:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cee0:	f000 fa6f 	bl	800d3c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cee4:	f000 fcd8 	bl	800d898 <xTaskResumeAll>
 800cee8:	e77a      	b.n	800cde0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ceea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ceec:	f000 fa69 	bl	800d3c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cef0:	f000 fcd2 	bl	800d898 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cef4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cef6:	f000 fab6 	bl	800d466 <prvIsQueueEmpty>
 800cefa:	4603      	mov	r3, r0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	f43f af6f 	beq.w	800cde0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cf02:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3730      	adds	r7, #48	@ 0x30
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}
 800cf0c:	e000ed04 	.word	0xe000ed04

0800cf10 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b08e      	sub	sp, #56	@ 0x38
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cf22:	2300      	movs	r3, #0
 800cf24:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cf26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d10b      	bne.n	800cf44 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800cf2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf30:	f383 8811 	msr	BASEPRI, r3
 800cf34:	f3bf 8f6f 	isb	sy
 800cf38:	f3bf 8f4f 	dsb	sy
 800cf3c:	623b      	str	r3, [r7, #32]
}
 800cf3e:	bf00      	nop
 800cf40:	bf00      	nop
 800cf42:	e7fd      	b.n	800cf40 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cf44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d00b      	beq.n	800cf64 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800cf4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf50:	f383 8811 	msr	BASEPRI, r3
 800cf54:	f3bf 8f6f 	isb	sy
 800cf58:	f3bf 8f4f 	dsb	sy
 800cf5c:	61fb      	str	r3, [r7, #28]
}
 800cf5e:	bf00      	nop
 800cf60:	bf00      	nop
 800cf62:	e7fd      	b.n	800cf60 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf64:	f001 f822 	bl	800dfac <xTaskGetSchedulerState>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d102      	bne.n	800cf74 <xQueueSemaphoreTake+0x64>
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d101      	bne.n	800cf78 <xQueueSemaphoreTake+0x68>
 800cf74:	2301      	movs	r3, #1
 800cf76:	e000      	b.n	800cf7a <xQueueSemaphoreTake+0x6a>
 800cf78:	2300      	movs	r3, #0
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d10b      	bne.n	800cf96 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800cf7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf82:	f383 8811 	msr	BASEPRI, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	61bb      	str	r3, [r7, #24]
}
 800cf90:	bf00      	nop
 800cf92:	bf00      	nop
 800cf94:	e7fd      	b.n	800cf92 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf96:	f001 fb5f 	bl	800e658 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cf9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf9e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cfa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d024      	beq.n	800cff0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cfa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa8:	1e5a      	subs	r2, r3, #1
 800cfaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfac:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cfae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d104      	bne.n	800cfc0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cfb6:	f001 f9a5 	bl	800e304 <pvTaskIncrementMutexHeldCount>
 800cfba:	4602      	mov	r2, r0
 800cfbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfbe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cfc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfc2:	691b      	ldr	r3, [r3, #16]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d00f      	beq.n	800cfe8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cfc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfca:	3310      	adds	r3, #16
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f000 fe4d 	bl	800dc6c <xTaskRemoveFromEventList>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d007      	beq.n	800cfe8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cfd8:	4b54      	ldr	r3, [pc, #336]	@ (800d12c <xQueueSemaphoreTake+0x21c>)
 800cfda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfde:	601a      	str	r2, [r3, #0]
 800cfe0:	f3bf 8f4f 	dsb	sy
 800cfe4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cfe8:	f001 fb68 	bl	800e6bc <vPortExitCritical>
				return pdPASS;
 800cfec:	2301      	movs	r3, #1
 800cfee:	e098      	b.n	800d122 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d112      	bne.n	800d01c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d00b      	beq.n	800d014 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800cffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d000:	f383 8811 	msr	BASEPRI, r3
 800d004:	f3bf 8f6f 	isb	sy
 800d008:	f3bf 8f4f 	dsb	sy
 800d00c:	617b      	str	r3, [r7, #20]
}
 800d00e:	bf00      	nop
 800d010:	bf00      	nop
 800d012:	e7fd      	b.n	800d010 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d014:	f001 fb52 	bl	800e6bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d018:	2300      	movs	r3, #0
 800d01a:	e082      	b.n	800d122 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d01c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d106      	bne.n	800d030 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d022:	f107 030c 	add.w	r3, r7, #12
 800d026:	4618      	mov	r0, r3
 800d028:	f000 fe84 	bl	800dd34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d02c:	2301      	movs	r3, #1
 800d02e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d030:	f001 fb44 	bl	800e6bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d034:	f000 fc22 	bl	800d87c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d038:	f001 fb0e 	bl	800e658 <vPortEnterCritical>
 800d03c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d03e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d042:	b25b      	sxtb	r3, r3
 800d044:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d048:	d103      	bne.n	800d052 <xQueueSemaphoreTake+0x142>
 800d04a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d04c:	2200      	movs	r2, #0
 800d04e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d054:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d058:	b25b      	sxtb	r3, r3
 800d05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d05e:	d103      	bne.n	800d068 <xQueueSemaphoreTake+0x158>
 800d060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d062:	2200      	movs	r2, #0
 800d064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d068:	f001 fb28 	bl	800e6bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d06c:	463a      	mov	r2, r7
 800d06e:	f107 030c 	add.w	r3, r7, #12
 800d072:	4611      	mov	r1, r2
 800d074:	4618      	mov	r0, r3
 800d076:	f000 fe73 	bl	800dd60 <xTaskCheckForTimeOut>
 800d07a:	4603      	mov	r3, r0
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d132      	bne.n	800d0e6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d080:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d082:	f000 f9f0 	bl	800d466 <prvIsQueueEmpty>
 800d086:	4603      	mov	r3, r0
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d026      	beq.n	800d0da <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d109      	bne.n	800d0a8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d094:	f001 fae0 	bl	800e658 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	4618      	mov	r0, r3
 800d09e:	f000 ffa3 	bl	800dfe8 <xTaskPriorityInherit>
 800d0a2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d0a4:	f001 fb0a 	bl	800e6bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d0a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0aa:	3324      	adds	r3, #36	@ 0x24
 800d0ac:	683a      	ldr	r2, [r7, #0]
 800d0ae:	4611      	mov	r1, r2
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f000 fdb5 	bl	800dc20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d0b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d0b8:	f000 f983 	bl	800d3c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d0bc:	f000 fbec 	bl	800d898 <xTaskResumeAll>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	f47f af67 	bne.w	800cf96 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d0c8:	4b18      	ldr	r3, [pc, #96]	@ (800d12c <xQueueSemaphoreTake+0x21c>)
 800d0ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0ce:	601a      	str	r2, [r3, #0]
 800d0d0:	f3bf 8f4f 	dsb	sy
 800d0d4:	f3bf 8f6f 	isb	sy
 800d0d8:	e75d      	b.n	800cf96 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d0da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d0dc:	f000 f971 	bl	800d3c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d0e0:	f000 fbda 	bl	800d898 <xTaskResumeAll>
 800d0e4:	e757      	b.n	800cf96 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d0e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d0e8:	f000 f96b 	bl	800d3c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d0ec:	f000 fbd4 	bl	800d898 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d0f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d0f2:	f000 f9b8 	bl	800d466 <prvIsQueueEmpty>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	f43f af4c 	beq.w	800cf96 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d100:	2b00      	cmp	r3, #0
 800d102:	d00d      	beq.n	800d120 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d104:	f001 faa8 	bl	800e658 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d108:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d10a:	f000 f8b2 	bl	800d272 <prvGetDisinheritPriorityAfterTimeout>
 800d10e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d112:	689b      	ldr	r3, [r3, #8]
 800d114:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d116:	4618      	mov	r0, r3
 800d118:	f001 f864 	bl	800e1e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d11c:	f001 face 	bl	800e6bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d120:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d122:	4618      	mov	r0, r3
 800d124:	3738      	adds	r7, #56	@ 0x38
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
 800d12a:	bf00      	nop
 800d12c:	e000ed04 	.word	0xe000ed04

0800d130 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b08e      	sub	sp, #56	@ 0x38
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d142:	2b00      	cmp	r3, #0
 800d144:	d10b      	bne.n	800d15e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d14a:	f383 8811 	msr	BASEPRI, r3
 800d14e:	f3bf 8f6f 	isb	sy
 800d152:	f3bf 8f4f 	dsb	sy
 800d156:	623b      	str	r3, [r7, #32]
}
 800d158:	bf00      	nop
 800d15a:	bf00      	nop
 800d15c:	e7fd      	b.n	800d15a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d103      	bne.n	800d16c <xQueueReceiveFromISR+0x3c>
 800d164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d101      	bne.n	800d170 <xQueueReceiveFromISR+0x40>
 800d16c:	2301      	movs	r3, #1
 800d16e:	e000      	b.n	800d172 <xQueueReceiveFromISR+0x42>
 800d170:	2300      	movs	r3, #0
 800d172:	2b00      	cmp	r3, #0
 800d174:	d10b      	bne.n	800d18e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d17a:	f383 8811 	msr	BASEPRI, r3
 800d17e:	f3bf 8f6f 	isb	sy
 800d182:	f3bf 8f4f 	dsb	sy
 800d186:	61fb      	str	r3, [r7, #28]
}
 800d188:	bf00      	nop
 800d18a:	bf00      	nop
 800d18c:	e7fd      	b.n	800d18a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d18e:	f001 fb43 	bl	800e818 <vPortValidateInterruptPriority>
	__asm volatile
 800d192:	f3ef 8211 	mrs	r2, BASEPRI
 800d196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d19a:	f383 8811 	msr	BASEPRI, r3
 800d19e:	f3bf 8f6f 	isb	sy
 800d1a2:	f3bf 8f4f 	dsb	sy
 800d1a6:	61ba      	str	r2, [r7, #24]
 800d1a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d1aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d1ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1b2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d02f      	beq.n	800d21a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d1c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d1c4:	68b9      	ldr	r1, [r7, #8]
 800d1c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d1c8:	f000 f8d5 	bl	800d376 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d1cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ce:	1e5a      	subs	r2, r3, #1
 800d1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1d2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d1d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1dc:	d112      	bne.n	800d204 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1e0:	691b      	ldr	r3, [r3, #16]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d016      	beq.n	800d214 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1e8:	3310      	adds	r3, #16
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f000 fd3e 	bl	800dc6c <xTaskRemoveFromEventList>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d00e      	beq.n	800d214 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d00b      	beq.n	800d214 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2201      	movs	r2, #1
 800d200:	601a      	str	r2, [r3, #0]
 800d202:	e007      	b.n	800d214 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d204:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d208:	3301      	adds	r3, #1
 800d20a:	b2db      	uxtb	r3, r3
 800d20c:	b25a      	sxtb	r2, r3
 800d20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d210:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d214:	2301      	movs	r3, #1
 800d216:	637b      	str	r3, [r7, #52]	@ 0x34
 800d218:	e001      	b.n	800d21e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d21a:	2300      	movs	r3, #0
 800d21c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d21e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d220:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	f383 8811 	msr	BASEPRI, r3
}
 800d228:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d22a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3738      	adds	r7, #56	@ 0x38
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b084      	sub	sp, #16
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d10b      	bne.n	800d25e <vQueueDelete+0x2a>
	__asm volatile
 800d246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d24a:	f383 8811 	msr	BASEPRI, r3
 800d24e:	f3bf 8f6f 	isb	sy
 800d252:	f3bf 8f4f 	dsb	sy
 800d256:	60bb      	str	r3, [r7, #8]
}
 800d258:	bf00      	nop
 800d25a:	bf00      	nop
 800d25c:	e7fd      	b.n	800d25a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d25e:	68f8      	ldr	r0, [r7, #12]
 800d260:	f000 f930 	bl	800d4c4 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800d264:	68f8      	ldr	r0, [r7, #12]
 800d266:	f001 fbe7 	bl	800ea38 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d26a:	bf00      	nop
 800d26c:	3710      	adds	r7, #16
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}

0800d272 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d272:	b480      	push	{r7}
 800d274:	b085      	sub	sp, #20
 800d276:	af00      	add	r7, sp, #0
 800d278:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d006      	beq.n	800d290 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f1c3 0307 	rsb	r3, r3, #7
 800d28c:	60fb      	str	r3, [r7, #12]
 800d28e:	e001      	b.n	800d294 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d290:	2300      	movs	r3, #0
 800d292:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d294:	68fb      	ldr	r3, [r7, #12]
	}
 800d296:	4618      	mov	r0, r3
 800d298:	3714      	adds	r7, #20
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr

0800d2a2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b086      	sub	sp, #24
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	60f8      	str	r0, [r7, #12]
 800d2aa:	60b9      	str	r1, [r7, #8]
 800d2ac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2b6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d10d      	bne.n	800d2dc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d14d      	bne.n	800d364 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	689b      	ldr	r3, [r3, #8]
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f000 ff01 	bl	800e0d4 <xTaskPriorityDisinherit>
 800d2d2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	609a      	str	r2, [r3, #8]
 800d2da:	e043      	b.n	800d364 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d119      	bne.n	800d316 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	6858      	ldr	r0, [r3, #4]
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	68b9      	ldr	r1, [r7, #8]
 800d2ee:	f001 fd81 	bl	800edf4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	685a      	ldr	r2, [r3, #4]
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2fa:	441a      	add	r2, r3
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	685a      	ldr	r2, [r3, #4]
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	689b      	ldr	r3, [r3, #8]
 800d308:	429a      	cmp	r2, r3
 800d30a:	d32b      	bcc.n	800d364 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	605a      	str	r2, [r3, #4]
 800d314:	e026      	b.n	800d364 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	68d8      	ldr	r0, [r3, #12]
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d31e:	461a      	mov	r2, r3
 800d320:	68b9      	ldr	r1, [r7, #8]
 800d322:	f001 fd67 	bl	800edf4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	68da      	ldr	r2, [r3, #12]
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d32e:	425b      	negs	r3, r3
 800d330:	441a      	add	r2, r3
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	68da      	ldr	r2, [r3, #12]
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	429a      	cmp	r2, r3
 800d340:	d207      	bcs.n	800d352 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	689a      	ldr	r2, [r3, #8]
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d34a:	425b      	negs	r3, r3
 800d34c:	441a      	add	r2, r3
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2b02      	cmp	r3, #2
 800d356:	d105      	bne.n	800d364 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d002      	beq.n	800d364 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	3b01      	subs	r3, #1
 800d362:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	1c5a      	adds	r2, r3, #1
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d36c:	697b      	ldr	r3, [r7, #20]
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3718      	adds	r7, #24
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d376:	b580      	push	{r7, lr}
 800d378:	b082      	sub	sp, #8
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
 800d37e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d384:	2b00      	cmp	r3, #0
 800d386:	d018      	beq.n	800d3ba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	68da      	ldr	r2, [r3, #12]
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d390:	441a      	add	r2, r3
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	68da      	ldr	r2, [r3, #12]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	689b      	ldr	r3, [r3, #8]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d303      	bcc.n	800d3aa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681a      	ldr	r2, [r3, #0]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	68d9      	ldr	r1, [r3, #12]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	6838      	ldr	r0, [r7, #0]
 800d3b6:	f001 fd1d 	bl	800edf4 <memcpy>
	}
}
 800d3ba:	bf00      	nop
 800d3bc:	3708      	adds	r7, #8
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}

0800d3c2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d3c2:	b580      	push	{r7, lr}
 800d3c4:	b084      	sub	sp, #16
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d3ca:	f001 f945 	bl	800e658 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d3d4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d3d6:	e011      	b.n	800d3fc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d012      	beq.n	800d406 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	3324      	adds	r3, #36	@ 0x24
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f000 fc41 	bl	800dc6c <xTaskRemoveFromEventList>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d001      	beq.n	800d3f4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d3f0:	f000 fd1a 	bl	800de28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d3f4:	7bfb      	ldrb	r3, [r7, #15]
 800d3f6:	3b01      	subs	r3, #1
 800d3f8:	b2db      	uxtb	r3, r3
 800d3fa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d3fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d400:	2b00      	cmp	r3, #0
 800d402:	dce9      	bgt.n	800d3d8 <prvUnlockQueue+0x16>
 800d404:	e000      	b.n	800d408 <prvUnlockQueue+0x46>
					break;
 800d406:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	22ff      	movs	r2, #255	@ 0xff
 800d40c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d410:	f001 f954 	bl	800e6bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d414:	f001 f920 	bl	800e658 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d41e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d420:	e011      	b.n	800d446 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	691b      	ldr	r3, [r3, #16]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d012      	beq.n	800d450 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	3310      	adds	r3, #16
 800d42e:	4618      	mov	r0, r3
 800d430:	f000 fc1c 	bl	800dc6c <xTaskRemoveFromEventList>
 800d434:	4603      	mov	r3, r0
 800d436:	2b00      	cmp	r3, #0
 800d438:	d001      	beq.n	800d43e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d43a:	f000 fcf5 	bl	800de28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d43e:	7bbb      	ldrb	r3, [r7, #14]
 800d440:	3b01      	subs	r3, #1
 800d442:	b2db      	uxtb	r3, r3
 800d444:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d446:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	dce9      	bgt.n	800d422 <prvUnlockQueue+0x60>
 800d44e:	e000      	b.n	800d452 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d450:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	22ff      	movs	r2, #255	@ 0xff
 800d456:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d45a:	f001 f92f 	bl	800e6bc <vPortExitCritical>
}
 800d45e:	bf00      	nop
 800d460:	3710      	adds	r7, #16
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}

0800d466 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d466:	b580      	push	{r7, lr}
 800d468:	b084      	sub	sp, #16
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d46e:	f001 f8f3 	bl	800e658 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d476:	2b00      	cmp	r3, #0
 800d478:	d102      	bne.n	800d480 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d47a:	2301      	movs	r3, #1
 800d47c:	60fb      	str	r3, [r7, #12]
 800d47e:	e001      	b.n	800d484 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d480:	2300      	movs	r3, #0
 800d482:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d484:	f001 f91a 	bl	800e6bc <vPortExitCritical>

	return xReturn;
 800d488:	68fb      	ldr	r3, [r7, #12]
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3710      	adds	r7, #16
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}

0800d492 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d492:	b580      	push	{r7, lr}
 800d494:	b084      	sub	sp, #16
 800d496:	af00      	add	r7, sp, #0
 800d498:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d49a:	f001 f8dd 	bl	800e658 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d102      	bne.n	800d4b0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	60fb      	str	r3, [r7, #12]
 800d4ae:	e001      	b.n	800d4b4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d4b4:	f001 f902 	bl	800e6bc <vPortExitCritical>

	return xReturn;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3710      	adds	r7, #16
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}
	...

0800d4c4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b085      	sub	sp, #20
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	60fb      	str	r3, [r7, #12]
 800d4d0:	e016      	b.n	800d500 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d4d2:	4a10      	ldr	r2, [pc, #64]	@ (800d514 <vQueueUnregisterQueue+0x50>)
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	00db      	lsls	r3, r3, #3
 800d4d8:	4413      	add	r3, r2
 800d4da:	685b      	ldr	r3, [r3, #4]
 800d4dc:	687a      	ldr	r2, [r7, #4]
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d10b      	bne.n	800d4fa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d4e2:	4a0c      	ldr	r2, [pc, #48]	@ (800d514 <vQueueUnregisterQueue+0x50>)
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2100      	movs	r1, #0
 800d4e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d4ec:	4a09      	ldr	r2, [pc, #36]	@ (800d514 <vQueueUnregisterQueue+0x50>)
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	00db      	lsls	r3, r3, #3
 800d4f2:	4413      	add	r3, r2
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	605a      	str	r2, [r3, #4]
				break;
 800d4f8:	e006      	b.n	800d508 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	3301      	adds	r3, #1
 800d4fe:	60fb      	str	r3, [r7, #12]
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	2b07      	cmp	r3, #7
 800d504:	d9e5      	bls.n	800d4d2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d506:	bf00      	nop
 800d508:	bf00      	nop
 800d50a:	3714      	adds	r7, #20
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr
 800d514:	20002800 	.word	0x20002800

0800d518 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b08c      	sub	sp, #48	@ 0x30
 800d51c:	af04      	add	r7, sp, #16
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	60b9      	str	r1, [r7, #8]
 800d522:	603b      	str	r3, [r7, #0]
 800d524:	4613      	mov	r3, r2
 800d526:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d528:	88fb      	ldrh	r3, [r7, #6]
 800d52a:	009b      	lsls	r3, r3, #2
 800d52c:	4618      	mov	r0, r3
 800d52e:	f001 f9b5 	bl	800e89c <pvPortMalloc>
 800d532:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d00e      	beq.n	800d558 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d53a:	2054      	movs	r0, #84	@ 0x54
 800d53c:	f001 f9ae 	bl	800e89c <pvPortMalloc>
 800d540:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d542:	69fb      	ldr	r3, [r7, #28]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d003      	beq.n	800d550 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	697a      	ldr	r2, [r7, #20]
 800d54c:	631a      	str	r2, [r3, #48]	@ 0x30
 800d54e:	e005      	b.n	800d55c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d550:	6978      	ldr	r0, [r7, #20]
 800d552:	f001 fa71 	bl	800ea38 <vPortFree>
 800d556:	e001      	b.n	800d55c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d558:	2300      	movs	r3, #0
 800d55a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d55c:	69fb      	ldr	r3, [r7, #28]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d013      	beq.n	800d58a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d562:	88fa      	ldrh	r2, [r7, #6]
 800d564:	2300      	movs	r3, #0
 800d566:	9303      	str	r3, [sp, #12]
 800d568:	69fb      	ldr	r3, [r7, #28]
 800d56a:	9302      	str	r3, [sp, #8]
 800d56c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d56e:	9301      	str	r3, [sp, #4]
 800d570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d572:	9300      	str	r3, [sp, #0]
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	68b9      	ldr	r1, [r7, #8]
 800d578:	68f8      	ldr	r0, [r7, #12]
 800d57a:	f000 f80e 	bl	800d59a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d57e:	69f8      	ldr	r0, [r7, #28]
 800d580:	f000 f894 	bl	800d6ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d584:	2301      	movs	r3, #1
 800d586:	61bb      	str	r3, [r7, #24]
 800d588:	e002      	b.n	800d590 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d58a:	f04f 33ff 	mov.w	r3, #4294967295
 800d58e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d590:	69bb      	ldr	r3, [r7, #24]
	}
 800d592:	4618      	mov	r0, r3
 800d594:	3720      	adds	r7, #32
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}

0800d59a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d59a:	b580      	push	{r7, lr}
 800d59c:	b088      	sub	sp, #32
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	60f8      	str	r0, [r7, #12]
 800d5a2:	60b9      	str	r1, [r7, #8]
 800d5a4:	607a      	str	r2, [r7, #4]
 800d5a6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5b2:	3b01      	subs	r3, #1
 800d5b4:	009b      	lsls	r3, r3, #2
 800d5b6:	4413      	add	r3, r2
 800d5b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d5ba:	69bb      	ldr	r3, [r7, #24]
 800d5bc:	f023 0307 	bic.w	r3, r3, #7
 800d5c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d5c2:	69bb      	ldr	r3, [r7, #24]
 800d5c4:	f003 0307 	and.w	r3, r3, #7
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d00b      	beq.n	800d5e4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800d5cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5d0:	f383 8811 	msr	BASEPRI, r3
 800d5d4:	f3bf 8f6f 	isb	sy
 800d5d8:	f3bf 8f4f 	dsb	sy
 800d5dc:	617b      	str	r3, [r7, #20]
}
 800d5de:	bf00      	nop
 800d5e0:	bf00      	nop
 800d5e2:	e7fd      	b.n	800d5e0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d01f      	beq.n	800d62a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	61fb      	str	r3, [r7, #28]
 800d5ee:	e012      	b.n	800d616 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d5f0:	68ba      	ldr	r2, [r7, #8]
 800d5f2:	69fb      	ldr	r3, [r7, #28]
 800d5f4:	4413      	add	r3, r2
 800d5f6:	7819      	ldrb	r1, [r3, #0]
 800d5f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5fa:	69fb      	ldr	r3, [r7, #28]
 800d5fc:	4413      	add	r3, r2
 800d5fe:	3334      	adds	r3, #52	@ 0x34
 800d600:	460a      	mov	r2, r1
 800d602:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d604:	68ba      	ldr	r2, [r7, #8]
 800d606:	69fb      	ldr	r3, [r7, #28]
 800d608:	4413      	add	r3, r2
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d006      	beq.n	800d61e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d610:	69fb      	ldr	r3, [r7, #28]
 800d612:	3301      	adds	r3, #1
 800d614:	61fb      	str	r3, [r7, #28]
 800d616:	69fb      	ldr	r3, [r7, #28]
 800d618:	2b0f      	cmp	r3, #15
 800d61a:	d9e9      	bls.n	800d5f0 <prvInitialiseNewTask+0x56>
 800d61c:	e000      	b.n	800d620 <prvInitialiseNewTask+0x86>
			{
				break;
 800d61e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d622:	2200      	movs	r2, #0
 800d624:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d628:	e003      	b.n	800d632 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d62c:	2200      	movs	r2, #0
 800d62e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d634:	2b06      	cmp	r3, #6
 800d636:	d901      	bls.n	800d63c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d638:	2306      	movs	r3, #6
 800d63a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d63e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d640:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d644:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d646:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d64a:	2200      	movs	r2, #0
 800d64c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d650:	3304      	adds	r3, #4
 800d652:	4618      	mov	r0, r3
 800d654:	f7ff f893 	bl	800c77e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d65a:	3318      	adds	r3, #24
 800d65c:	4618      	mov	r0, r3
 800d65e:	f7ff f88e 	bl	800c77e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d666:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d66a:	f1c3 0207 	rsb	r2, r3, #7
 800d66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d670:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d674:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d676:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d67a:	2200      	movs	r2, #0
 800d67c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d680:	2200      	movs	r2, #0
 800d682:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d686:	683a      	ldr	r2, [r7, #0]
 800d688:	68f9      	ldr	r1, [r7, #12]
 800d68a:	69b8      	ldr	r0, [r7, #24]
 800d68c:	f000 feb4 	bl	800e3f8 <pxPortInitialiseStack>
 800d690:	4602      	mov	r2, r0
 800d692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d694:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d002      	beq.n	800d6a2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d69e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d6a2:	bf00      	nop
 800d6a4:	3720      	adds	r7, #32
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
	...

0800d6ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d6b4:	f000 ffd0 	bl	800e658 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d6b8:	4b2a      	ldr	r3, [pc, #168]	@ (800d764 <prvAddNewTaskToReadyList+0xb8>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	3301      	adds	r3, #1
 800d6be:	4a29      	ldr	r2, [pc, #164]	@ (800d764 <prvAddNewTaskToReadyList+0xb8>)
 800d6c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d6c2:	4b29      	ldr	r3, [pc, #164]	@ (800d768 <prvAddNewTaskToReadyList+0xbc>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d109      	bne.n	800d6de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d6ca:	4a27      	ldr	r2, [pc, #156]	@ (800d768 <prvAddNewTaskToReadyList+0xbc>)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d6d0:	4b24      	ldr	r3, [pc, #144]	@ (800d764 <prvAddNewTaskToReadyList+0xb8>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	d110      	bne.n	800d6fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d6d8:	f000 fbca 	bl	800de70 <prvInitialiseTaskLists>
 800d6dc:	e00d      	b.n	800d6fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d6de:	4b23      	ldr	r3, [pc, #140]	@ (800d76c <prvAddNewTaskToReadyList+0xc0>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d109      	bne.n	800d6fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d6e6:	4b20      	ldr	r3, [pc, #128]	@ (800d768 <prvAddNewTaskToReadyList+0xbc>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d802      	bhi.n	800d6fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d6f4:	4a1c      	ldr	r2, [pc, #112]	@ (800d768 <prvAddNewTaskToReadyList+0xbc>)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d6fa:	4b1d      	ldr	r3, [pc, #116]	@ (800d770 <prvAddNewTaskToReadyList+0xc4>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	3301      	adds	r3, #1
 800d700:	4a1b      	ldr	r2, [pc, #108]	@ (800d770 <prvAddNewTaskToReadyList+0xc4>)
 800d702:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d708:	2201      	movs	r2, #1
 800d70a:	409a      	lsls	r2, r3
 800d70c:	4b19      	ldr	r3, [pc, #100]	@ (800d774 <prvAddNewTaskToReadyList+0xc8>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4313      	orrs	r3, r2
 800d712:	4a18      	ldr	r2, [pc, #96]	@ (800d774 <prvAddNewTaskToReadyList+0xc8>)
 800d714:	6013      	str	r3, [r2, #0]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d71a:	4613      	mov	r3, r2
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	4413      	add	r3, r2
 800d720:	009b      	lsls	r3, r3, #2
 800d722:	4a15      	ldr	r2, [pc, #84]	@ (800d778 <prvAddNewTaskToReadyList+0xcc>)
 800d724:	441a      	add	r2, r3
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	3304      	adds	r3, #4
 800d72a:	4619      	mov	r1, r3
 800d72c:	4610      	mov	r0, r2
 800d72e:	f7ff f833 	bl	800c798 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d732:	f000 ffc3 	bl	800e6bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d736:	4b0d      	ldr	r3, [pc, #52]	@ (800d76c <prvAddNewTaskToReadyList+0xc0>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d00e      	beq.n	800d75c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d73e:	4b0a      	ldr	r3, [pc, #40]	@ (800d768 <prvAddNewTaskToReadyList+0xbc>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d748:	429a      	cmp	r2, r3
 800d74a:	d207      	bcs.n	800d75c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d74c:	4b0b      	ldr	r3, [pc, #44]	@ (800d77c <prvAddNewTaskToReadyList+0xd0>)
 800d74e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d752:	601a      	str	r2, [r3, #0]
 800d754:	f3bf 8f4f 	dsb	sy
 800d758:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d75c:	bf00      	nop
 800d75e:	3708      	adds	r7, #8
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}
 800d764:	20002940 	.word	0x20002940
 800d768:	20002840 	.word	0x20002840
 800d76c:	2000294c 	.word	0x2000294c
 800d770:	2000295c 	.word	0x2000295c
 800d774:	20002948 	.word	0x20002948
 800d778:	20002844 	.word	0x20002844
 800d77c:	e000ed04 	.word	0xe000ed04

0800d780 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d780:	b580      	push	{r7, lr}
 800d782:	b084      	sub	sp, #16
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d788:	2300      	movs	r3, #0
 800d78a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d018      	beq.n	800d7c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d792:	4b14      	ldr	r3, [pc, #80]	@ (800d7e4 <vTaskDelay+0x64>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d00b      	beq.n	800d7b2 <vTaskDelay+0x32>
	__asm volatile
 800d79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d79e:	f383 8811 	msr	BASEPRI, r3
 800d7a2:	f3bf 8f6f 	isb	sy
 800d7a6:	f3bf 8f4f 	dsb	sy
 800d7aa:	60bb      	str	r3, [r7, #8]
}
 800d7ac:	bf00      	nop
 800d7ae:	bf00      	nop
 800d7b0:	e7fd      	b.n	800d7ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d7b2:	f000 f863 	bl	800d87c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d7b6:	2100      	movs	r1, #0
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f000 fdb7 	bl	800e32c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d7be:	f000 f86b 	bl	800d898 <xTaskResumeAll>
 800d7c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d107      	bne.n	800d7da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d7ca:	4b07      	ldr	r3, [pc, #28]	@ (800d7e8 <vTaskDelay+0x68>)
 800d7cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7d0:	601a      	str	r2, [r3, #0]
 800d7d2:	f3bf 8f4f 	dsb	sy
 800d7d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d7da:	bf00      	nop
 800d7dc:	3710      	adds	r7, #16
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	20002968 	.word	0x20002968
 800d7e8:	e000ed04 	.word	0xe000ed04

0800d7ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b086      	sub	sp, #24
 800d7f0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800d7f2:	4b1c      	ldr	r3, [pc, #112]	@ (800d864 <vTaskStartScheduler+0x78>)
 800d7f4:	9301      	str	r3, [sp, #4]
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	9300      	str	r3, [sp, #0]
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	2280      	movs	r2, #128	@ 0x80
 800d7fe:	491a      	ldr	r1, [pc, #104]	@ (800d868 <vTaskStartScheduler+0x7c>)
 800d800:	481a      	ldr	r0, [pc, #104]	@ (800d86c <vTaskStartScheduler+0x80>)
 800d802:	f7ff fe89 	bl	800d518 <xTaskCreate>
 800d806:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2b01      	cmp	r3, #1
 800d80c:	d116      	bne.n	800d83c <vTaskStartScheduler+0x50>
	__asm volatile
 800d80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d812:	f383 8811 	msr	BASEPRI, r3
 800d816:	f3bf 8f6f 	isb	sy
 800d81a:	f3bf 8f4f 	dsb	sy
 800d81e:	60bb      	str	r3, [r7, #8]
}
 800d820:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d822:	4b13      	ldr	r3, [pc, #76]	@ (800d870 <vTaskStartScheduler+0x84>)
 800d824:	f04f 32ff 	mov.w	r2, #4294967295
 800d828:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d82a:	4b12      	ldr	r3, [pc, #72]	@ (800d874 <vTaskStartScheduler+0x88>)
 800d82c:	2201      	movs	r2, #1
 800d82e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d830:	4b11      	ldr	r3, [pc, #68]	@ (800d878 <vTaskStartScheduler+0x8c>)
 800d832:	2200      	movs	r2, #0
 800d834:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d836:	f000 fe6b 	bl	800e510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d83a:	e00f      	b.n	800d85c <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d842:	d10b      	bne.n	800d85c <vTaskStartScheduler+0x70>
	__asm volatile
 800d844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d848:	f383 8811 	msr	BASEPRI, r3
 800d84c:	f3bf 8f6f 	isb	sy
 800d850:	f3bf 8f4f 	dsb	sy
 800d854:	607b      	str	r3, [r7, #4]
}
 800d856:	bf00      	nop
 800d858:	bf00      	nop
 800d85a:	e7fd      	b.n	800d858 <vTaskStartScheduler+0x6c>
}
 800d85c:	bf00      	nop
 800d85e:	3710      	adds	r7, #16
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}
 800d864:	20002964 	.word	0x20002964
 800d868:	0800f0fc 	.word	0x0800f0fc
 800d86c:	0800de41 	.word	0x0800de41
 800d870:	20002960 	.word	0x20002960
 800d874:	2000294c 	.word	0x2000294c
 800d878:	20002944 	.word	0x20002944

0800d87c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d87c:	b480      	push	{r7}
 800d87e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d880:	4b04      	ldr	r3, [pc, #16]	@ (800d894 <vTaskSuspendAll+0x18>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	3301      	adds	r3, #1
 800d886:	4a03      	ldr	r2, [pc, #12]	@ (800d894 <vTaskSuspendAll+0x18>)
 800d888:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d88a:	bf00      	nop
 800d88c:	46bd      	mov	sp, r7
 800d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d892:	4770      	bx	lr
 800d894:	20002968 	.word	0x20002968

0800d898 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b084      	sub	sp, #16
 800d89c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d8a6:	4b42      	ldr	r3, [pc, #264]	@ (800d9b0 <xTaskResumeAll+0x118>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d10b      	bne.n	800d8c6 <xTaskResumeAll+0x2e>
	__asm volatile
 800d8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8b2:	f383 8811 	msr	BASEPRI, r3
 800d8b6:	f3bf 8f6f 	isb	sy
 800d8ba:	f3bf 8f4f 	dsb	sy
 800d8be:	603b      	str	r3, [r7, #0]
}
 800d8c0:	bf00      	nop
 800d8c2:	bf00      	nop
 800d8c4:	e7fd      	b.n	800d8c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d8c6:	f000 fec7 	bl	800e658 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d8ca:	4b39      	ldr	r3, [pc, #228]	@ (800d9b0 <xTaskResumeAll+0x118>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	3b01      	subs	r3, #1
 800d8d0:	4a37      	ldr	r2, [pc, #220]	@ (800d9b0 <xTaskResumeAll+0x118>)
 800d8d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8d4:	4b36      	ldr	r3, [pc, #216]	@ (800d9b0 <xTaskResumeAll+0x118>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d161      	bne.n	800d9a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d8dc:	4b35      	ldr	r3, [pc, #212]	@ (800d9b4 <xTaskResumeAll+0x11c>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d05d      	beq.n	800d9a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d8e4:	e02e      	b.n	800d944 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8e6:	4b34      	ldr	r3, [pc, #208]	@ (800d9b8 <xTaskResumeAll+0x120>)
 800d8e8:	68db      	ldr	r3, [r3, #12]
 800d8ea:	68db      	ldr	r3, [r3, #12]
 800d8ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	3318      	adds	r3, #24
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7fe ffad 	bl	800c852 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	3304      	adds	r3, #4
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f7fe ffa8 	bl	800c852 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d906:	2201      	movs	r2, #1
 800d908:	409a      	lsls	r2, r3
 800d90a:	4b2c      	ldr	r3, [pc, #176]	@ (800d9bc <xTaskResumeAll+0x124>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	4313      	orrs	r3, r2
 800d910:	4a2a      	ldr	r2, [pc, #168]	@ (800d9bc <xTaskResumeAll+0x124>)
 800d912:	6013      	str	r3, [r2, #0]
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d918:	4613      	mov	r3, r2
 800d91a:	009b      	lsls	r3, r3, #2
 800d91c:	4413      	add	r3, r2
 800d91e:	009b      	lsls	r3, r3, #2
 800d920:	4a27      	ldr	r2, [pc, #156]	@ (800d9c0 <xTaskResumeAll+0x128>)
 800d922:	441a      	add	r2, r3
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	3304      	adds	r3, #4
 800d928:	4619      	mov	r1, r3
 800d92a:	4610      	mov	r0, r2
 800d92c:	f7fe ff34 	bl	800c798 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d934:	4b23      	ldr	r3, [pc, #140]	@ (800d9c4 <xTaskResumeAll+0x12c>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d93a:	429a      	cmp	r2, r3
 800d93c:	d302      	bcc.n	800d944 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d93e:	4b22      	ldr	r3, [pc, #136]	@ (800d9c8 <xTaskResumeAll+0x130>)
 800d940:	2201      	movs	r2, #1
 800d942:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d944:	4b1c      	ldr	r3, [pc, #112]	@ (800d9b8 <xTaskResumeAll+0x120>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d1cc      	bne.n	800d8e6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d001      	beq.n	800d956 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d952:	f000 fb0b 	bl	800df6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d956:	4b1d      	ldr	r3, [pc, #116]	@ (800d9cc <xTaskResumeAll+0x134>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d010      	beq.n	800d984 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d962:	f000 f847 	bl	800d9f4 <xTaskIncrementTick>
 800d966:	4603      	mov	r3, r0
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d002      	beq.n	800d972 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d96c:	4b16      	ldr	r3, [pc, #88]	@ (800d9c8 <xTaskResumeAll+0x130>)
 800d96e:	2201      	movs	r2, #1
 800d970:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	3b01      	subs	r3, #1
 800d976:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d1f1      	bne.n	800d962 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d97e:	4b13      	ldr	r3, [pc, #76]	@ (800d9cc <xTaskResumeAll+0x134>)
 800d980:	2200      	movs	r2, #0
 800d982:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d984:	4b10      	ldr	r3, [pc, #64]	@ (800d9c8 <xTaskResumeAll+0x130>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d009      	beq.n	800d9a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d98c:	2301      	movs	r3, #1
 800d98e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d990:	4b0f      	ldr	r3, [pc, #60]	@ (800d9d0 <xTaskResumeAll+0x138>)
 800d992:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d996:	601a      	str	r2, [r3, #0]
 800d998:	f3bf 8f4f 	dsb	sy
 800d99c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d9a0:	f000 fe8c 	bl	800e6bc <vPortExitCritical>

	return xAlreadyYielded;
 800d9a4:	68bb      	ldr	r3, [r7, #8]
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3710      	adds	r7, #16
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}
 800d9ae:	bf00      	nop
 800d9b0:	20002968 	.word	0x20002968
 800d9b4:	20002940 	.word	0x20002940
 800d9b8:	20002900 	.word	0x20002900
 800d9bc:	20002948 	.word	0x20002948
 800d9c0:	20002844 	.word	0x20002844
 800d9c4:	20002840 	.word	0x20002840
 800d9c8:	20002954 	.word	0x20002954
 800d9cc:	20002950 	.word	0x20002950
 800d9d0:	e000ed04 	.word	0xe000ed04

0800d9d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b083      	sub	sp, #12
 800d9d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d9da:	4b05      	ldr	r3, [pc, #20]	@ (800d9f0 <xTaskGetTickCount+0x1c>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d9e0:	687b      	ldr	r3, [r7, #4]
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	370c      	adds	r7, #12
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ec:	4770      	bx	lr
 800d9ee:	bf00      	nop
 800d9f0:	20002944 	.word	0x20002944

0800d9f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b086      	sub	sp, #24
 800d9f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9fe:	4b4f      	ldr	r3, [pc, #316]	@ (800db3c <xTaskIncrementTick+0x148>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	2b00      	cmp	r3, #0
 800da04:	f040 808f 	bne.w	800db26 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800da08:	4b4d      	ldr	r3, [pc, #308]	@ (800db40 <xTaskIncrementTick+0x14c>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	3301      	adds	r3, #1
 800da0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800da10:	4a4b      	ldr	r2, [pc, #300]	@ (800db40 <xTaskIncrementTick+0x14c>)
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d121      	bne.n	800da60 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800da1c:	4b49      	ldr	r3, [pc, #292]	@ (800db44 <xTaskIncrementTick+0x150>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d00b      	beq.n	800da3e <xTaskIncrementTick+0x4a>
	__asm volatile
 800da26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da2a:	f383 8811 	msr	BASEPRI, r3
 800da2e:	f3bf 8f6f 	isb	sy
 800da32:	f3bf 8f4f 	dsb	sy
 800da36:	603b      	str	r3, [r7, #0]
}
 800da38:	bf00      	nop
 800da3a:	bf00      	nop
 800da3c:	e7fd      	b.n	800da3a <xTaskIncrementTick+0x46>
 800da3e:	4b41      	ldr	r3, [pc, #260]	@ (800db44 <xTaskIncrementTick+0x150>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	60fb      	str	r3, [r7, #12]
 800da44:	4b40      	ldr	r3, [pc, #256]	@ (800db48 <xTaskIncrementTick+0x154>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	4a3e      	ldr	r2, [pc, #248]	@ (800db44 <xTaskIncrementTick+0x150>)
 800da4a:	6013      	str	r3, [r2, #0]
 800da4c:	4a3e      	ldr	r2, [pc, #248]	@ (800db48 <xTaskIncrementTick+0x154>)
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	6013      	str	r3, [r2, #0]
 800da52:	4b3e      	ldr	r3, [pc, #248]	@ (800db4c <xTaskIncrementTick+0x158>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	3301      	adds	r3, #1
 800da58:	4a3c      	ldr	r2, [pc, #240]	@ (800db4c <xTaskIncrementTick+0x158>)
 800da5a:	6013      	str	r3, [r2, #0]
 800da5c:	f000 fa86 	bl	800df6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800da60:	4b3b      	ldr	r3, [pc, #236]	@ (800db50 <xTaskIncrementTick+0x15c>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	693a      	ldr	r2, [r7, #16]
 800da66:	429a      	cmp	r2, r3
 800da68:	d348      	bcc.n	800dafc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da6a:	4b36      	ldr	r3, [pc, #216]	@ (800db44 <xTaskIncrementTick+0x150>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d104      	bne.n	800da7e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da74:	4b36      	ldr	r3, [pc, #216]	@ (800db50 <xTaskIncrementTick+0x15c>)
 800da76:	f04f 32ff 	mov.w	r2, #4294967295
 800da7a:	601a      	str	r2, [r3, #0]
					break;
 800da7c:	e03e      	b.n	800dafc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da7e:	4b31      	ldr	r3, [pc, #196]	@ (800db44 <xTaskIncrementTick+0x150>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	68db      	ldr	r3, [r3, #12]
 800da84:	68db      	ldr	r3, [r3, #12]
 800da86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800da8e:	693a      	ldr	r2, [r7, #16]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	429a      	cmp	r2, r3
 800da94:	d203      	bcs.n	800da9e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800da96:	4a2e      	ldr	r2, [pc, #184]	@ (800db50 <xTaskIncrementTick+0x15c>)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800da9c:	e02e      	b.n	800dafc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	3304      	adds	r3, #4
 800daa2:	4618      	mov	r0, r3
 800daa4:	f7fe fed5 	bl	800c852 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800daac:	2b00      	cmp	r3, #0
 800daae:	d004      	beq.n	800daba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	3318      	adds	r3, #24
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7fe fecc 	bl	800c852 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dabe:	2201      	movs	r2, #1
 800dac0:	409a      	lsls	r2, r3
 800dac2:	4b24      	ldr	r3, [pc, #144]	@ (800db54 <xTaskIncrementTick+0x160>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	4313      	orrs	r3, r2
 800dac8:	4a22      	ldr	r2, [pc, #136]	@ (800db54 <xTaskIncrementTick+0x160>)
 800daca:	6013      	str	r3, [r2, #0]
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dad0:	4613      	mov	r3, r2
 800dad2:	009b      	lsls	r3, r3, #2
 800dad4:	4413      	add	r3, r2
 800dad6:	009b      	lsls	r3, r3, #2
 800dad8:	4a1f      	ldr	r2, [pc, #124]	@ (800db58 <xTaskIncrementTick+0x164>)
 800dada:	441a      	add	r2, r3
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	3304      	adds	r3, #4
 800dae0:	4619      	mov	r1, r3
 800dae2:	4610      	mov	r0, r2
 800dae4:	f7fe fe58 	bl	800c798 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800daec:	4b1b      	ldr	r3, [pc, #108]	@ (800db5c <xTaskIncrementTick+0x168>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d3b9      	bcc.n	800da6a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800daf6:	2301      	movs	r3, #1
 800daf8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dafa:	e7b6      	b.n	800da6a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dafc:	4b17      	ldr	r3, [pc, #92]	@ (800db5c <xTaskIncrementTick+0x168>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db02:	4915      	ldr	r1, [pc, #84]	@ (800db58 <xTaskIncrementTick+0x164>)
 800db04:	4613      	mov	r3, r2
 800db06:	009b      	lsls	r3, r3, #2
 800db08:	4413      	add	r3, r2
 800db0a:	009b      	lsls	r3, r3, #2
 800db0c:	440b      	add	r3, r1
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	2b01      	cmp	r3, #1
 800db12:	d901      	bls.n	800db18 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800db14:	2301      	movs	r3, #1
 800db16:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800db18:	4b11      	ldr	r3, [pc, #68]	@ (800db60 <xTaskIncrementTick+0x16c>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d007      	beq.n	800db30 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800db20:	2301      	movs	r3, #1
 800db22:	617b      	str	r3, [r7, #20]
 800db24:	e004      	b.n	800db30 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800db26:	4b0f      	ldr	r3, [pc, #60]	@ (800db64 <xTaskIncrementTick+0x170>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	3301      	adds	r3, #1
 800db2c:	4a0d      	ldr	r2, [pc, #52]	@ (800db64 <xTaskIncrementTick+0x170>)
 800db2e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800db30:	697b      	ldr	r3, [r7, #20]
}
 800db32:	4618      	mov	r0, r3
 800db34:	3718      	adds	r7, #24
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}
 800db3a:	bf00      	nop
 800db3c:	20002968 	.word	0x20002968
 800db40:	20002944 	.word	0x20002944
 800db44:	200028f8 	.word	0x200028f8
 800db48:	200028fc 	.word	0x200028fc
 800db4c:	20002958 	.word	0x20002958
 800db50:	20002960 	.word	0x20002960
 800db54:	20002948 	.word	0x20002948
 800db58:	20002844 	.word	0x20002844
 800db5c:	20002840 	.word	0x20002840
 800db60:	20002954 	.word	0x20002954
 800db64:	20002950 	.word	0x20002950

0800db68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800db68:	b480      	push	{r7}
 800db6a:	b087      	sub	sp, #28
 800db6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800db6e:	4b27      	ldr	r3, [pc, #156]	@ (800dc0c <vTaskSwitchContext+0xa4>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d003      	beq.n	800db7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800db76:	4b26      	ldr	r3, [pc, #152]	@ (800dc10 <vTaskSwitchContext+0xa8>)
 800db78:	2201      	movs	r2, #1
 800db7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800db7c:	e040      	b.n	800dc00 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800db7e:	4b24      	ldr	r3, [pc, #144]	@ (800dc10 <vTaskSwitchContext+0xa8>)
 800db80:	2200      	movs	r2, #0
 800db82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db84:	4b23      	ldr	r3, [pc, #140]	@ (800dc14 <vTaskSwitchContext+0xac>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	fab3 f383 	clz	r3, r3
 800db90:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800db92:	7afb      	ldrb	r3, [r7, #11]
 800db94:	f1c3 031f 	rsb	r3, r3, #31
 800db98:	617b      	str	r3, [r7, #20]
 800db9a:	491f      	ldr	r1, [pc, #124]	@ (800dc18 <vTaskSwitchContext+0xb0>)
 800db9c:	697a      	ldr	r2, [r7, #20]
 800db9e:	4613      	mov	r3, r2
 800dba0:	009b      	lsls	r3, r3, #2
 800dba2:	4413      	add	r3, r2
 800dba4:	009b      	lsls	r3, r3, #2
 800dba6:	440b      	add	r3, r1
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d10b      	bne.n	800dbc6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800dbae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbb2:	f383 8811 	msr	BASEPRI, r3
 800dbb6:	f3bf 8f6f 	isb	sy
 800dbba:	f3bf 8f4f 	dsb	sy
 800dbbe:	607b      	str	r3, [r7, #4]
}
 800dbc0:	bf00      	nop
 800dbc2:	bf00      	nop
 800dbc4:	e7fd      	b.n	800dbc2 <vTaskSwitchContext+0x5a>
 800dbc6:	697a      	ldr	r2, [r7, #20]
 800dbc8:	4613      	mov	r3, r2
 800dbca:	009b      	lsls	r3, r3, #2
 800dbcc:	4413      	add	r3, r2
 800dbce:	009b      	lsls	r3, r3, #2
 800dbd0:	4a11      	ldr	r2, [pc, #68]	@ (800dc18 <vTaskSwitchContext+0xb0>)
 800dbd2:	4413      	add	r3, r2
 800dbd4:	613b      	str	r3, [r7, #16]
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	685b      	ldr	r3, [r3, #4]
 800dbda:	685a      	ldr	r2, [r3, #4]
 800dbdc:	693b      	ldr	r3, [r7, #16]
 800dbde:	605a      	str	r2, [r3, #4]
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	685a      	ldr	r2, [r3, #4]
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	3308      	adds	r3, #8
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d104      	bne.n	800dbf6 <vTaskSwitchContext+0x8e>
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	685b      	ldr	r3, [r3, #4]
 800dbf0:	685a      	ldr	r2, [r3, #4]
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	605a      	str	r2, [r3, #4]
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	685b      	ldr	r3, [r3, #4]
 800dbfa:	68db      	ldr	r3, [r3, #12]
 800dbfc:	4a07      	ldr	r2, [pc, #28]	@ (800dc1c <vTaskSwitchContext+0xb4>)
 800dbfe:	6013      	str	r3, [r2, #0]
}
 800dc00:	bf00      	nop
 800dc02:	371c      	adds	r7, #28
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr
 800dc0c:	20002968 	.word	0x20002968
 800dc10:	20002954 	.word	0x20002954
 800dc14:	20002948 	.word	0x20002948
 800dc18:	20002844 	.word	0x20002844
 800dc1c:	20002840 	.word	0x20002840

0800dc20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d10b      	bne.n	800dc48 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800dc30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc34:	f383 8811 	msr	BASEPRI, r3
 800dc38:	f3bf 8f6f 	isb	sy
 800dc3c:	f3bf 8f4f 	dsb	sy
 800dc40:	60fb      	str	r3, [r7, #12]
}
 800dc42:	bf00      	nop
 800dc44:	bf00      	nop
 800dc46:	e7fd      	b.n	800dc44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dc48:	4b07      	ldr	r3, [pc, #28]	@ (800dc68 <vTaskPlaceOnEventList+0x48>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	3318      	adds	r3, #24
 800dc4e:	4619      	mov	r1, r3
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f7fe fdc5 	bl	800c7e0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dc56:	2101      	movs	r1, #1
 800dc58:	6838      	ldr	r0, [r7, #0]
 800dc5a:	f000 fb67 	bl	800e32c <prvAddCurrentTaskToDelayedList>
}
 800dc5e:	bf00      	nop
 800dc60:	3710      	adds	r7, #16
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	bf00      	nop
 800dc68:	20002840 	.word	0x20002840

0800dc6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b086      	sub	sp, #24
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	68db      	ldr	r3, [r3, #12]
 800dc78:	68db      	ldr	r3, [r3, #12]
 800dc7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d10b      	bne.n	800dc9a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800dc82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc86:	f383 8811 	msr	BASEPRI, r3
 800dc8a:	f3bf 8f6f 	isb	sy
 800dc8e:	f3bf 8f4f 	dsb	sy
 800dc92:	60fb      	str	r3, [r7, #12]
}
 800dc94:	bf00      	nop
 800dc96:	bf00      	nop
 800dc98:	e7fd      	b.n	800dc96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	3318      	adds	r3, #24
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7fe fdd7 	bl	800c852 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dca4:	4b1d      	ldr	r3, [pc, #116]	@ (800dd1c <xTaskRemoveFromEventList+0xb0>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d11c      	bne.n	800dce6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	3304      	adds	r3, #4
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f7fe fdce 	bl	800c852 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcba:	2201      	movs	r2, #1
 800dcbc:	409a      	lsls	r2, r3
 800dcbe:	4b18      	ldr	r3, [pc, #96]	@ (800dd20 <xTaskRemoveFromEventList+0xb4>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	4313      	orrs	r3, r2
 800dcc4:	4a16      	ldr	r2, [pc, #88]	@ (800dd20 <xTaskRemoveFromEventList+0xb4>)
 800dcc6:	6013      	str	r3, [r2, #0]
 800dcc8:	693b      	ldr	r3, [r7, #16]
 800dcca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dccc:	4613      	mov	r3, r2
 800dcce:	009b      	lsls	r3, r3, #2
 800dcd0:	4413      	add	r3, r2
 800dcd2:	009b      	lsls	r3, r3, #2
 800dcd4:	4a13      	ldr	r2, [pc, #76]	@ (800dd24 <xTaskRemoveFromEventList+0xb8>)
 800dcd6:	441a      	add	r2, r3
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	3304      	adds	r3, #4
 800dcdc:	4619      	mov	r1, r3
 800dcde:	4610      	mov	r0, r2
 800dce0:	f7fe fd5a 	bl	800c798 <vListInsertEnd>
 800dce4:	e005      	b.n	800dcf2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	3318      	adds	r3, #24
 800dcea:	4619      	mov	r1, r3
 800dcec:	480e      	ldr	r0, [pc, #56]	@ (800dd28 <xTaskRemoveFromEventList+0xbc>)
 800dcee:	f7fe fd53 	bl	800c798 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcf6:	4b0d      	ldr	r3, [pc, #52]	@ (800dd2c <xTaskRemoveFromEventList+0xc0>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d905      	bls.n	800dd0c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dd00:	2301      	movs	r3, #1
 800dd02:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dd04:	4b0a      	ldr	r3, [pc, #40]	@ (800dd30 <xTaskRemoveFromEventList+0xc4>)
 800dd06:	2201      	movs	r2, #1
 800dd08:	601a      	str	r2, [r3, #0]
 800dd0a:	e001      	b.n	800dd10 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dd10:	697b      	ldr	r3, [r7, #20]
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3718      	adds	r7, #24
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}
 800dd1a:	bf00      	nop
 800dd1c:	20002968 	.word	0x20002968
 800dd20:	20002948 	.word	0x20002948
 800dd24:	20002844 	.word	0x20002844
 800dd28:	20002900 	.word	0x20002900
 800dd2c:	20002840 	.word	0x20002840
 800dd30:	20002954 	.word	0x20002954

0800dd34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dd34:	b480      	push	{r7}
 800dd36:	b083      	sub	sp, #12
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dd3c:	4b06      	ldr	r3, [pc, #24]	@ (800dd58 <vTaskInternalSetTimeOutState+0x24>)
 800dd3e:	681a      	ldr	r2, [r3, #0]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dd44:	4b05      	ldr	r3, [pc, #20]	@ (800dd5c <vTaskInternalSetTimeOutState+0x28>)
 800dd46:	681a      	ldr	r2, [r3, #0]
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	605a      	str	r2, [r3, #4]
}
 800dd4c:	bf00      	nop
 800dd4e:	370c      	adds	r7, #12
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr
 800dd58:	20002958 	.word	0x20002958
 800dd5c:	20002944 	.word	0x20002944

0800dd60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b088      	sub	sp, #32
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d10b      	bne.n	800dd88 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800dd70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd74:	f383 8811 	msr	BASEPRI, r3
 800dd78:	f3bf 8f6f 	isb	sy
 800dd7c:	f3bf 8f4f 	dsb	sy
 800dd80:	613b      	str	r3, [r7, #16]
}
 800dd82:	bf00      	nop
 800dd84:	bf00      	nop
 800dd86:	e7fd      	b.n	800dd84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d10b      	bne.n	800dda6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800dd8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd92:	f383 8811 	msr	BASEPRI, r3
 800dd96:	f3bf 8f6f 	isb	sy
 800dd9a:	f3bf 8f4f 	dsb	sy
 800dd9e:	60fb      	str	r3, [r7, #12]
}
 800dda0:	bf00      	nop
 800dda2:	bf00      	nop
 800dda4:	e7fd      	b.n	800dda2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800dda6:	f000 fc57 	bl	800e658 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ddaa:	4b1d      	ldr	r3, [pc, #116]	@ (800de20 <xTaskCheckForTimeOut+0xc0>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	685b      	ldr	r3, [r3, #4]
 800ddb4:	69ba      	ldr	r2, [r7, #24]
 800ddb6:	1ad3      	subs	r3, r2, r3
 800ddb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddc2:	d102      	bne.n	800ddca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	61fb      	str	r3, [r7, #28]
 800ddc8:	e023      	b.n	800de12 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681a      	ldr	r2, [r3, #0]
 800ddce:	4b15      	ldr	r3, [pc, #84]	@ (800de24 <xTaskCheckForTimeOut+0xc4>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d007      	beq.n	800dde6 <xTaskCheckForTimeOut+0x86>
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	69ba      	ldr	r2, [r7, #24]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d302      	bcc.n	800dde6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dde0:	2301      	movs	r3, #1
 800dde2:	61fb      	str	r3, [r7, #28]
 800dde4:	e015      	b.n	800de12 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	697a      	ldr	r2, [r7, #20]
 800ddec:	429a      	cmp	r2, r3
 800ddee:	d20b      	bcs.n	800de08 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	681a      	ldr	r2, [r3, #0]
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	1ad2      	subs	r2, r2, r3
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f7ff ff99 	bl	800dd34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800de02:	2300      	movs	r3, #0
 800de04:	61fb      	str	r3, [r7, #28]
 800de06:	e004      	b.n	800de12 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	2200      	movs	r2, #0
 800de0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800de0e:	2301      	movs	r3, #1
 800de10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800de12:	f000 fc53 	bl	800e6bc <vPortExitCritical>

	return xReturn;
 800de16:	69fb      	ldr	r3, [r7, #28]
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3720      	adds	r7, #32
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	20002944 	.word	0x20002944
 800de24:	20002958 	.word	0x20002958

0800de28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800de28:	b480      	push	{r7}
 800de2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800de2c:	4b03      	ldr	r3, [pc, #12]	@ (800de3c <vTaskMissedYield+0x14>)
 800de2e:	2201      	movs	r2, #1
 800de30:	601a      	str	r2, [r3, #0]
}
 800de32:	bf00      	nop
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr
 800de3c:	20002954 	.word	0x20002954

0800de40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b082      	sub	sp, #8
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800de48:	f000 f852 	bl	800def0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800de4c:	4b06      	ldr	r3, [pc, #24]	@ (800de68 <prvIdleTask+0x28>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	2b01      	cmp	r3, #1
 800de52:	d9f9      	bls.n	800de48 <prvIdleTask+0x8>
			{
				taskYIELD();
 800de54:	4b05      	ldr	r3, [pc, #20]	@ (800de6c <prvIdleTask+0x2c>)
 800de56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de5a:	601a      	str	r2, [r3, #0]
 800de5c:	f3bf 8f4f 	dsb	sy
 800de60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800de64:	e7f0      	b.n	800de48 <prvIdleTask+0x8>
 800de66:	bf00      	nop
 800de68:	20002844 	.word	0x20002844
 800de6c:	e000ed04 	.word	0xe000ed04

0800de70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de76:	2300      	movs	r3, #0
 800de78:	607b      	str	r3, [r7, #4]
 800de7a:	e00c      	b.n	800de96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	4613      	mov	r3, r2
 800de80:	009b      	lsls	r3, r3, #2
 800de82:	4413      	add	r3, r2
 800de84:	009b      	lsls	r3, r3, #2
 800de86:	4a12      	ldr	r2, [pc, #72]	@ (800ded0 <prvInitialiseTaskLists+0x60>)
 800de88:	4413      	add	r3, r2
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7fe fc57 	bl	800c73e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	3301      	adds	r3, #1
 800de94:	607b      	str	r3, [r7, #4]
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2b06      	cmp	r3, #6
 800de9a:	d9ef      	bls.n	800de7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800de9c:	480d      	ldr	r0, [pc, #52]	@ (800ded4 <prvInitialiseTaskLists+0x64>)
 800de9e:	f7fe fc4e 	bl	800c73e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dea2:	480d      	ldr	r0, [pc, #52]	@ (800ded8 <prvInitialiseTaskLists+0x68>)
 800dea4:	f7fe fc4b 	bl	800c73e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dea8:	480c      	ldr	r0, [pc, #48]	@ (800dedc <prvInitialiseTaskLists+0x6c>)
 800deaa:	f7fe fc48 	bl	800c73e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800deae:	480c      	ldr	r0, [pc, #48]	@ (800dee0 <prvInitialiseTaskLists+0x70>)
 800deb0:	f7fe fc45 	bl	800c73e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800deb4:	480b      	ldr	r0, [pc, #44]	@ (800dee4 <prvInitialiseTaskLists+0x74>)
 800deb6:	f7fe fc42 	bl	800c73e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800deba:	4b0b      	ldr	r3, [pc, #44]	@ (800dee8 <prvInitialiseTaskLists+0x78>)
 800debc:	4a05      	ldr	r2, [pc, #20]	@ (800ded4 <prvInitialiseTaskLists+0x64>)
 800debe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dec0:	4b0a      	ldr	r3, [pc, #40]	@ (800deec <prvInitialiseTaskLists+0x7c>)
 800dec2:	4a05      	ldr	r2, [pc, #20]	@ (800ded8 <prvInitialiseTaskLists+0x68>)
 800dec4:	601a      	str	r2, [r3, #0]
}
 800dec6:	bf00      	nop
 800dec8:	3708      	adds	r7, #8
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	20002844 	.word	0x20002844
 800ded4:	200028d0 	.word	0x200028d0
 800ded8:	200028e4 	.word	0x200028e4
 800dedc:	20002900 	.word	0x20002900
 800dee0:	20002914 	.word	0x20002914
 800dee4:	2000292c 	.word	0x2000292c
 800dee8:	200028f8 	.word	0x200028f8
 800deec:	200028fc 	.word	0x200028fc

0800def0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b082      	sub	sp, #8
 800def4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800def6:	e019      	b.n	800df2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800def8:	f000 fbae 	bl	800e658 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800defc:	4b10      	ldr	r3, [pc, #64]	@ (800df40 <prvCheckTasksWaitingTermination+0x50>)
 800defe:	68db      	ldr	r3, [r3, #12]
 800df00:	68db      	ldr	r3, [r3, #12]
 800df02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	3304      	adds	r3, #4
 800df08:	4618      	mov	r0, r3
 800df0a:	f7fe fca2 	bl	800c852 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800df0e:	4b0d      	ldr	r3, [pc, #52]	@ (800df44 <prvCheckTasksWaitingTermination+0x54>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	3b01      	subs	r3, #1
 800df14:	4a0b      	ldr	r2, [pc, #44]	@ (800df44 <prvCheckTasksWaitingTermination+0x54>)
 800df16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800df18:	4b0b      	ldr	r3, [pc, #44]	@ (800df48 <prvCheckTasksWaitingTermination+0x58>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	3b01      	subs	r3, #1
 800df1e:	4a0a      	ldr	r2, [pc, #40]	@ (800df48 <prvCheckTasksWaitingTermination+0x58>)
 800df20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800df22:	f000 fbcb 	bl	800e6bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f000 f810 	bl	800df4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df2c:	4b06      	ldr	r3, [pc, #24]	@ (800df48 <prvCheckTasksWaitingTermination+0x58>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d1e1      	bne.n	800def8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800df34:	bf00      	nop
 800df36:	bf00      	nop
 800df38:	3708      	adds	r7, #8
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
 800df3e:	bf00      	nop
 800df40:	20002914 	.word	0x20002914
 800df44:	20002940 	.word	0x20002940
 800df48:	20002928 	.word	0x20002928

0800df4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b082      	sub	sp, #8
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df58:	4618      	mov	r0, r3
 800df5a:	f000 fd6d 	bl	800ea38 <vPortFree>
			vPortFree( pxTCB );
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f000 fd6a 	bl	800ea38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800df64:	bf00      	nop
 800df66:	3708      	adds	r7, #8
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}

0800df6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800df6c:	b480      	push	{r7}
 800df6e:	b083      	sub	sp, #12
 800df70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df72:	4b0c      	ldr	r3, [pc, #48]	@ (800dfa4 <prvResetNextTaskUnblockTime+0x38>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d104      	bne.n	800df86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800df7c:	4b0a      	ldr	r3, [pc, #40]	@ (800dfa8 <prvResetNextTaskUnblockTime+0x3c>)
 800df7e:	f04f 32ff 	mov.w	r2, #4294967295
 800df82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800df84:	e008      	b.n	800df98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df86:	4b07      	ldr	r3, [pc, #28]	@ (800dfa4 <prvResetNextTaskUnblockTime+0x38>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	68db      	ldr	r3, [r3, #12]
 800df8c:	68db      	ldr	r3, [r3, #12]
 800df8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	4a04      	ldr	r2, [pc, #16]	@ (800dfa8 <prvResetNextTaskUnblockTime+0x3c>)
 800df96:	6013      	str	r3, [r2, #0]
}
 800df98:	bf00      	nop
 800df9a:	370c      	adds	r7, #12
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr
 800dfa4:	200028f8 	.word	0x200028f8
 800dfa8:	20002960 	.word	0x20002960

0800dfac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dfac:	b480      	push	{r7}
 800dfae:	b083      	sub	sp, #12
 800dfb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dfb2:	4b0b      	ldr	r3, [pc, #44]	@ (800dfe0 <xTaskGetSchedulerState+0x34>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d102      	bne.n	800dfc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dfba:	2301      	movs	r3, #1
 800dfbc:	607b      	str	r3, [r7, #4]
 800dfbe:	e008      	b.n	800dfd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfc0:	4b08      	ldr	r3, [pc, #32]	@ (800dfe4 <xTaskGetSchedulerState+0x38>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d102      	bne.n	800dfce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dfc8:	2302      	movs	r3, #2
 800dfca:	607b      	str	r3, [r7, #4]
 800dfcc:	e001      	b.n	800dfd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dfd2:	687b      	ldr	r3, [r7, #4]
	}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	370c      	adds	r7, #12
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr
 800dfe0:	2000294c 	.word	0x2000294c
 800dfe4:	20002968 	.word	0x20002968

0800dfe8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b084      	sub	sp, #16
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dff4:	2300      	movs	r3, #0
 800dff6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d05e      	beq.n	800e0bc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e002:	4b31      	ldr	r3, [pc, #196]	@ (800e0c8 <xTaskPriorityInherit+0xe0>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e008:	429a      	cmp	r2, r3
 800e00a:	d24e      	bcs.n	800e0aa <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	699b      	ldr	r3, [r3, #24]
 800e010:	2b00      	cmp	r3, #0
 800e012:	db06      	blt.n	800e022 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e014:	4b2c      	ldr	r3, [pc, #176]	@ (800e0c8 <xTaskPriorityInherit+0xe0>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e01a:	f1c3 0207 	rsb	r2, r3, #7
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	6959      	ldr	r1, [r3, #20]
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e02a:	4613      	mov	r3, r2
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	4413      	add	r3, r2
 800e030:	009b      	lsls	r3, r3, #2
 800e032:	4a26      	ldr	r2, [pc, #152]	@ (800e0cc <xTaskPriorityInherit+0xe4>)
 800e034:	4413      	add	r3, r2
 800e036:	4299      	cmp	r1, r3
 800e038:	d12f      	bne.n	800e09a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	3304      	adds	r3, #4
 800e03e:	4618      	mov	r0, r3
 800e040:	f7fe fc07 	bl	800c852 <uxListRemove>
 800e044:	4603      	mov	r3, r0
 800e046:	2b00      	cmp	r3, #0
 800e048:	d10a      	bne.n	800e060 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e04e:	2201      	movs	r2, #1
 800e050:	fa02 f303 	lsl.w	r3, r2, r3
 800e054:	43da      	mvns	r2, r3
 800e056:	4b1e      	ldr	r3, [pc, #120]	@ (800e0d0 <xTaskPriorityInherit+0xe8>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	4013      	ands	r3, r2
 800e05c:	4a1c      	ldr	r2, [pc, #112]	@ (800e0d0 <xTaskPriorityInherit+0xe8>)
 800e05e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e060:	4b19      	ldr	r3, [pc, #100]	@ (800e0c8 <xTaskPriorityInherit+0xe0>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e06e:	2201      	movs	r2, #1
 800e070:	409a      	lsls	r2, r3
 800e072:	4b17      	ldr	r3, [pc, #92]	@ (800e0d0 <xTaskPriorityInherit+0xe8>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	4313      	orrs	r3, r2
 800e078:	4a15      	ldr	r2, [pc, #84]	@ (800e0d0 <xTaskPriorityInherit+0xe8>)
 800e07a:	6013      	str	r3, [r2, #0]
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e080:	4613      	mov	r3, r2
 800e082:	009b      	lsls	r3, r3, #2
 800e084:	4413      	add	r3, r2
 800e086:	009b      	lsls	r3, r3, #2
 800e088:	4a10      	ldr	r2, [pc, #64]	@ (800e0cc <xTaskPriorityInherit+0xe4>)
 800e08a:	441a      	add	r2, r3
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	3304      	adds	r3, #4
 800e090:	4619      	mov	r1, r3
 800e092:	4610      	mov	r0, r2
 800e094:	f7fe fb80 	bl	800c798 <vListInsertEnd>
 800e098:	e004      	b.n	800e0a4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e09a:	4b0b      	ldr	r3, [pc, #44]	@ (800e0c8 <xTaskPriorityInherit+0xe0>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	60fb      	str	r3, [r7, #12]
 800e0a8:	e008      	b.n	800e0bc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e0ae:	4b06      	ldr	r3, [pc, #24]	@ (800e0c8 <xTaskPriorityInherit+0xe0>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d201      	bcs.n	800e0bc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
	}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3710      	adds	r7, #16
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}
 800e0c6:	bf00      	nop
 800e0c8:	20002840 	.word	0x20002840
 800e0cc:	20002844 	.word	0x20002844
 800e0d0:	20002948 	.word	0x20002948

0800e0d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b086      	sub	sp, #24
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d070      	beq.n	800e1cc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e0ea:	4b3b      	ldr	r3, [pc, #236]	@ (800e1d8 <xTaskPriorityDisinherit+0x104>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	693a      	ldr	r2, [r7, #16]
 800e0f0:	429a      	cmp	r2, r3
 800e0f2:	d00b      	beq.n	800e10c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e0f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0f8:	f383 8811 	msr	BASEPRI, r3
 800e0fc:	f3bf 8f6f 	isb	sy
 800e100:	f3bf 8f4f 	dsb	sy
 800e104:	60fb      	str	r3, [r7, #12]
}
 800e106:	bf00      	nop
 800e108:	bf00      	nop
 800e10a:	e7fd      	b.n	800e108 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e110:	2b00      	cmp	r3, #0
 800e112:	d10b      	bne.n	800e12c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e118:	f383 8811 	msr	BASEPRI, r3
 800e11c:	f3bf 8f6f 	isb	sy
 800e120:	f3bf 8f4f 	dsb	sy
 800e124:	60bb      	str	r3, [r7, #8]
}
 800e126:	bf00      	nop
 800e128:	bf00      	nop
 800e12a:	e7fd      	b.n	800e128 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e12c:	693b      	ldr	r3, [r7, #16]
 800e12e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e130:	1e5a      	subs	r2, r3, #1
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e13e:	429a      	cmp	r2, r3
 800e140:	d044      	beq.n	800e1cc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e146:	2b00      	cmp	r3, #0
 800e148:	d140      	bne.n	800e1cc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	3304      	adds	r3, #4
 800e14e:	4618      	mov	r0, r3
 800e150:	f7fe fb7f 	bl	800c852 <uxListRemove>
 800e154:	4603      	mov	r3, r0
 800e156:	2b00      	cmp	r3, #0
 800e158:	d115      	bne.n	800e186 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e15e:	491f      	ldr	r1, [pc, #124]	@ (800e1dc <xTaskPriorityDisinherit+0x108>)
 800e160:	4613      	mov	r3, r2
 800e162:	009b      	lsls	r3, r3, #2
 800e164:	4413      	add	r3, r2
 800e166:	009b      	lsls	r3, r3, #2
 800e168:	440b      	add	r3, r1
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d10a      	bne.n	800e186 <xTaskPriorityDisinherit+0xb2>
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e174:	2201      	movs	r2, #1
 800e176:	fa02 f303 	lsl.w	r3, r2, r3
 800e17a:	43da      	mvns	r2, r3
 800e17c:	4b18      	ldr	r3, [pc, #96]	@ (800e1e0 <xTaskPriorityDisinherit+0x10c>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	4013      	ands	r3, r2
 800e182:	4a17      	ldr	r2, [pc, #92]	@ (800e1e0 <xTaskPriorityDisinherit+0x10c>)
 800e184:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e192:	f1c3 0207 	rsb	r2, r3, #7
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e19e:	2201      	movs	r2, #1
 800e1a0:	409a      	lsls	r2, r3
 800e1a2:	4b0f      	ldr	r3, [pc, #60]	@ (800e1e0 <xTaskPriorityDisinherit+0x10c>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	4313      	orrs	r3, r2
 800e1a8:	4a0d      	ldr	r2, [pc, #52]	@ (800e1e0 <xTaskPriorityDisinherit+0x10c>)
 800e1aa:	6013      	str	r3, [r2, #0]
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1b0:	4613      	mov	r3, r2
 800e1b2:	009b      	lsls	r3, r3, #2
 800e1b4:	4413      	add	r3, r2
 800e1b6:	009b      	lsls	r3, r3, #2
 800e1b8:	4a08      	ldr	r2, [pc, #32]	@ (800e1dc <xTaskPriorityDisinherit+0x108>)
 800e1ba:	441a      	add	r2, r3
 800e1bc:	693b      	ldr	r3, [r7, #16]
 800e1be:	3304      	adds	r3, #4
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	4610      	mov	r0, r2
 800e1c4:	f7fe fae8 	bl	800c798 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e1cc:	697b      	ldr	r3, [r7, #20]
	}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3718      	adds	r7, #24
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	20002840 	.word	0x20002840
 800e1dc:	20002844 	.word	0x20002844
 800e1e0:	20002948 	.word	0x20002948

0800e1e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b088      	sub	sp, #32
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
 800e1ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d079      	beq.n	800e2f0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e1fc:	69bb      	ldr	r3, [r7, #24]
 800e1fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e200:	2b00      	cmp	r3, #0
 800e202:	d10b      	bne.n	800e21c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e208:	f383 8811 	msr	BASEPRI, r3
 800e20c:	f3bf 8f6f 	isb	sy
 800e210:	f3bf 8f4f 	dsb	sy
 800e214:	60fb      	str	r3, [r7, #12]
}
 800e216:	bf00      	nop
 800e218:	bf00      	nop
 800e21a:	e7fd      	b.n	800e218 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e21c:	69bb      	ldr	r3, [r7, #24]
 800e21e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e220:	683a      	ldr	r2, [r7, #0]
 800e222:	429a      	cmp	r2, r3
 800e224:	d902      	bls.n	800e22c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	61fb      	str	r3, [r7, #28]
 800e22a:	e002      	b.n	800e232 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e22c:	69bb      	ldr	r3, [r7, #24]
 800e22e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e230:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e232:	69bb      	ldr	r3, [r7, #24]
 800e234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e236:	69fa      	ldr	r2, [r7, #28]
 800e238:	429a      	cmp	r2, r3
 800e23a:	d059      	beq.n	800e2f0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e23c:	69bb      	ldr	r3, [r7, #24]
 800e23e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e240:	697a      	ldr	r2, [r7, #20]
 800e242:	429a      	cmp	r2, r3
 800e244:	d154      	bne.n	800e2f0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e246:	4b2c      	ldr	r3, [pc, #176]	@ (800e2f8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	69ba      	ldr	r2, [r7, #24]
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d10b      	bne.n	800e268 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800e250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e254:	f383 8811 	msr	BASEPRI, r3
 800e258:	f3bf 8f6f 	isb	sy
 800e25c:	f3bf 8f4f 	dsb	sy
 800e260:	60bb      	str	r3, [r7, #8]
}
 800e262:	bf00      	nop
 800e264:	bf00      	nop
 800e266:	e7fd      	b.n	800e264 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e268:	69bb      	ldr	r3, [r7, #24]
 800e26a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e26c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e26e:	69bb      	ldr	r3, [r7, #24]
 800e270:	69fa      	ldr	r2, [r7, #28]
 800e272:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e274:	69bb      	ldr	r3, [r7, #24]
 800e276:	699b      	ldr	r3, [r3, #24]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	db04      	blt.n	800e286 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e27c:	69fb      	ldr	r3, [r7, #28]
 800e27e:	f1c3 0207 	rsb	r2, r3, #7
 800e282:	69bb      	ldr	r3, [r7, #24]
 800e284:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e286:	69bb      	ldr	r3, [r7, #24]
 800e288:	6959      	ldr	r1, [r3, #20]
 800e28a:	693a      	ldr	r2, [r7, #16]
 800e28c:	4613      	mov	r3, r2
 800e28e:	009b      	lsls	r3, r3, #2
 800e290:	4413      	add	r3, r2
 800e292:	009b      	lsls	r3, r3, #2
 800e294:	4a19      	ldr	r2, [pc, #100]	@ (800e2fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e296:	4413      	add	r3, r2
 800e298:	4299      	cmp	r1, r3
 800e29a:	d129      	bne.n	800e2f0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e29c:	69bb      	ldr	r3, [r7, #24]
 800e29e:	3304      	adds	r3, #4
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f7fe fad6 	bl	800c852 <uxListRemove>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d10a      	bne.n	800e2c2 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800e2ac:	69bb      	ldr	r3, [r7, #24]
 800e2ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2b0:	2201      	movs	r2, #1
 800e2b2:	fa02 f303 	lsl.w	r3, r2, r3
 800e2b6:	43da      	mvns	r2, r3
 800e2b8:	4b11      	ldr	r3, [pc, #68]	@ (800e300 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	4013      	ands	r3, r2
 800e2be:	4a10      	ldr	r2, [pc, #64]	@ (800e300 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800e2c0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e2c2:	69bb      	ldr	r3, [r7, #24]
 800e2c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	409a      	lsls	r2, r3
 800e2ca:	4b0d      	ldr	r3, [pc, #52]	@ (800e300 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	4313      	orrs	r3, r2
 800e2d0:	4a0b      	ldr	r2, [pc, #44]	@ (800e300 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800e2d2:	6013      	str	r3, [r2, #0]
 800e2d4:	69bb      	ldr	r3, [r7, #24]
 800e2d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2d8:	4613      	mov	r3, r2
 800e2da:	009b      	lsls	r3, r3, #2
 800e2dc:	4413      	add	r3, r2
 800e2de:	009b      	lsls	r3, r3, #2
 800e2e0:	4a06      	ldr	r2, [pc, #24]	@ (800e2fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e2e2:	441a      	add	r2, r3
 800e2e4:	69bb      	ldr	r3, [r7, #24]
 800e2e6:	3304      	adds	r3, #4
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	4610      	mov	r0, r2
 800e2ec:	f7fe fa54 	bl	800c798 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e2f0:	bf00      	nop
 800e2f2:	3720      	adds	r7, #32
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}
 800e2f8:	20002840 	.word	0x20002840
 800e2fc:	20002844 	.word	0x20002844
 800e300:	20002948 	.word	0x20002948

0800e304 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e304:	b480      	push	{r7}
 800e306:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e308:	4b07      	ldr	r3, [pc, #28]	@ (800e328 <pvTaskIncrementMutexHeldCount+0x24>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d004      	beq.n	800e31a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e310:	4b05      	ldr	r3, [pc, #20]	@ (800e328 <pvTaskIncrementMutexHeldCount+0x24>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e316:	3201      	adds	r2, #1
 800e318:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800e31a:	4b03      	ldr	r3, [pc, #12]	@ (800e328 <pvTaskIncrementMutexHeldCount+0x24>)
 800e31c:	681b      	ldr	r3, [r3, #0]
	}
 800e31e:	4618      	mov	r0, r3
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr
 800e328:	20002840 	.word	0x20002840

0800e32c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b084      	sub	sp, #16
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e336:	4b29      	ldr	r3, [pc, #164]	@ (800e3dc <prvAddCurrentTaskToDelayedList+0xb0>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e33c:	4b28      	ldr	r3, [pc, #160]	@ (800e3e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	3304      	adds	r3, #4
 800e342:	4618      	mov	r0, r3
 800e344:	f7fe fa85 	bl	800c852 <uxListRemove>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d10b      	bne.n	800e366 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e34e:	4b24      	ldr	r3, [pc, #144]	@ (800e3e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e354:	2201      	movs	r2, #1
 800e356:	fa02 f303 	lsl.w	r3, r2, r3
 800e35a:	43da      	mvns	r2, r3
 800e35c:	4b21      	ldr	r3, [pc, #132]	@ (800e3e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4013      	ands	r3, r2
 800e362:	4a20      	ldr	r2, [pc, #128]	@ (800e3e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e364:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e36c:	d10a      	bne.n	800e384 <prvAddCurrentTaskToDelayedList+0x58>
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d007      	beq.n	800e384 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e374:	4b1a      	ldr	r3, [pc, #104]	@ (800e3e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	3304      	adds	r3, #4
 800e37a:	4619      	mov	r1, r3
 800e37c:	481a      	ldr	r0, [pc, #104]	@ (800e3e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e37e:	f7fe fa0b 	bl	800c798 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e382:	e026      	b.n	800e3d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e384:	68fa      	ldr	r2, [r7, #12]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	4413      	add	r3, r2
 800e38a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e38c:	4b14      	ldr	r3, [pc, #80]	@ (800e3e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	68ba      	ldr	r2, [r7, #8]
 800e392:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e394:	68ba      	ldr	r2, [r7, #8]
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	429a      	cmp	r2, r3
 800e39a:	d209      	bcs.n	800e3b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e39c:	4b13      	ldr	r3, [pc, #76]	@ (800e3ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800e39e:	681a      	ldr	r2, [r3, #0]
 800e3a0:	4b0f      	ldr	r3, [pc, #60]	@ (800e3e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	3304      	adds	r3, #4
 800e3a6:	4619      	mov	r1, r3
 800e3a8:	4610      	mov	r0, r2
 800e3aa:	f7fe fa19 	bl	800c7e0 <vListInsert>
}
 800e3ae:	e010      	b.n	800e3d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e3b0:	4b0f      	ldr	r3, [pc, #60]	@ (800e3f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e3b2:	681a      	ldr	r2, [r3, #0]
 800e3b4:	4b0a      	ldr	r3, [pc, #40]	@ (800e3e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	3304      	adds	r3, #4
 800e3ba:	4619      	mov	r1, r3
 800e3bc:	4610      	mov	r0, r2
 800e3be:	f7fe fa0f 	bl	800c7e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e3c2:	4b0c      	ldr	r3, [pc, #48]	@ (800e3f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	68ba      	ldr	r2, [r7, #8]
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d202      	bcs.n	800e3d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e3cc:	4a09      	ldr	r2, [pc, #36]	@ (800e3f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	6013      	str	r3, [r2, #0]
}
 800e3d2:	bf00      	nop
 800e3d4:	3710      	adds	r7, #16
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
 800e3da:	bf00      	nop
 800e3dc:	20002944 	.word	0x20002944
 800e3e0:	20002840 	.word	0x20002840
 800e3e4:	20002948 	.word	0x20002948
 800e3e8:	2000292c 	.word	0x2000292c
 800e3ec:	200028fc 	.word	0x200028fc
 800e3f0:	200028f8 	.word	0x200028f8
 800e3f4:	20002960 	.word	0x20002960

0800e3f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b085      	sub	sp, #20
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	60f8      	str	r0, [r7, #12]
 800e400:	60b9      	str	r1, [r7, #8]
 800e402:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	3b04      	subs	r3, #4
 800e408:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e410:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	3b04      	subs	r3, #4
 800e416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	f023 0201 	bic.w	r2, r3, #1
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	3b04      	subs	r3, #4
 800e426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e428:	4a0c      	ldr	r2, [pc, #48]	@ (800e45c <pxPortInitialiseStack+0x64>)
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	3b14      	subs	r3, #20
 800e432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e434:	687a      	ldr	r2, [r7, #4]
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	3b04      	subs	r3, #4
 800e43e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	f06f 0202 	mvn.w	r2, #2
 800e446:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	3b20      	subs	r3, #32
 800e44c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e44e:	68fb      	ldr	r3, [r7, #12]
}
 800e450:	4618      	mov	r0, r3
 800e452:	3714      	adds	r7, #20
 800e454:	46bd      	mov	sp, r7
 800e456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45a:	4770      	bx	lr
 800e45c:	0800e461 	.word	0x0800e461

0800e460 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e460:	b480      	push	{r7}
 800e462:	b085      	sub	sp, #20
 800e464:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e466:	2300      	movs	r3, #0
 800e468:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e46a:	4b13      	ldr	r3, [pc, #76]	@ (800e4b8 <prvTaskExitError+0x58>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e472:	d00b      	beq.n	800e48c <prvTaskExitError+0x2c>
	__asm volatile
 800e474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e478:	f383 8811 	msr	BASEPRI, r3
 800e47c:	f3bf 8f6f 	isb	sy
 800e480:	f3bf 8f4f 	dsb	sy
 800e484:	60fb      	str	r3, [r7, #12]
}
 800e486:	bf00      	nop
 800e488:	bf00      	nop
 800e48a:	e7fd      	b.n	800e488 <prvTaskExitError+0x28>
	__asm volatile
 800e48c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e490:	f383 8811 	msr	BASEPRI, r3
 800e494:	f3bf 8f6f 	isb	sy
 800e498:	f3bf 8f4f 	dsb	sy
 800e49c:	60bb      	str	r3, [r7, #8]
}
 800e49e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e4a0:	bf00      	nop
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d0fc      	beq.n	800e4a2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e4a8:	bf00      	nop
 800e4aa:	bf00      	nop
 800e4ac:	3714      	adds	r7, #20
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b4:	4770      	bx	lr
 800e4b6:	bf00      	nop
 800e4b8:	20000030 	.word	0x20000030
 800e4bc:	00000000 	.word	0x00000000

0800e4c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e4c0:	4b07      	ldr	r3, [pc, #28]	@ (800e4e0 <pxCurrentTCBConst2>)
 800e4c2:	6819      	ldr	r1, [r3, #0]
 800e4c4:	6808      	ldr	r0, [r1, #0]
 800e4c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4ca:	f380 8809 	msr	PSP, r0
 800e4ce:	f3bf 8f6f 	isb	sy
 800e4d2:	f04f 0000 	mov.w	r0, #0
 800e4d6:	f380 8811 	msr	BASEPRI, r0
 800e4da:	4770      	bx	lr
 800e4dc:	f3af 8000 	nop.w

0800e4e0 <pxCurrentTCBConst2>:
 800e4e0:	20002840 	.word	0x20002840
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e4e4:	bf00      	nop
 800e4e6:	bf00      	nop

0800e4e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e4e8:	4808      	ldr	r0, [pc, #32]	@ (800e50c <prvPortStartFirstTask+0x24>)
 800e4ea:	6800      	ldr	r0, [r0, #0]
 800e4ec:	6800      	ldr	r0, [r0, #0]
 800e4ee:	f380 8808 	msr	MSP, r0
 800e4f2:	f04f 0000 	mov.w	r0, #0
 800e4f6:	f380 8814 	msr	CONTROL, r0
 800e4fa:	b662      	cpsie	i
 800e4fc:	b661      	cpsie	f
 800e4fe:	f3bf 8f4f 	dsb	sy
 800e502:	f3bf 8f6f 	isb	sy
 800e506:	df00      	svc	0
 800e508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e50a:	bf00      	nop
 800e50c:	e000ed08 	.word	0xe000ed08

0800e510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b086      	sub	sp, #24
 800e514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e516:	4b47      	ldr	r3, [pc, #284]	@ (800e634 <xPortStartScheduler+0x124>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	4a47      	ldr	r2, [pc, #284]	@ (800e638 <xPortStartScheduler+0x128>)
 800e51c:	4293      	cmp	r3, r2
 800e51e:	d10b      	bne.n	800e538 <xPortStartScheduler+0x28>
	__asm volatile
 800e520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e524:	f383 8811 	msr	BASEPRI, r3
 800e528:	f3bf 8f6f 	isb	sy
 800e52c:	f3bf 8f4f 	dsb	sy
 800e530:	613b      	str	r3, [r7, #16]
}
 800e532:	bf00      	nop
 800e534:	bf00      	nop
 800e536:	e7fd      	b.n	800e534 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e538:	4b3e      	ldr	r3, [pc, #248]	@ (800e634 <xPortStartScheduler+0x124>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	4a3f      	ldr	r2, [pc, #252]	@ (800e63c <xPortStartScheduler+0x12c>)
 800e53e:	4293      	cmp	r3, r2
 800e540:	d10b      	bne.n	800e55a <xPortStartScheduler+0x4a>
	__asm volatile
 800e542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e546:	f383 8811 	msr	BASEPRI, r3
 800e54a:	f3bf 8f6f 	isb	sy
 800e54e:	f3bf 8f4f 	dsb	sy
 800e552:	60fb      	str	r3, [r7, #12]
}
 800e554:	bf00      	nop
 800e556:	bf00      	nop
 800e558:	e7fd      	b.n	800e556 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e55a:	4b39      	ldr	r3, [pc, #228]	@ (800e640 <xPortStartScheduler+0x130>)
 800e55c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	781b      	ldrb	r3, [r3, #0]
 800e562:	b2db      	uxtb	r3, r3
 800e564:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e566:	697b      	ldr	r3, [r7, #20]
 800e568:	22ff      	movs	r2, #255	@ 0xff
 800e56a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	781b      	ldrb	r3, [r3, #0]
 800e570:	b2db      	uxtb	r3, r3
 800e572:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e574:	78fb      	ldrb	r3, [r7, #3]
 800e576:	b2db      	uxtb	r3, r3
 800e578:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e57c:	b2da      	uxtb	r2, r3
 800e57e:	4b31      	ldr	r3, [pc, #196]	@ (800e644 <xPortStartScheduler+0x134>)
 800e580:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e582:	4b31      	ldr	r3, [pc, #196]	@ (800e648 <xPortStartScheduler+0x138>)
 800e584:	2207      	movs	r2, #7
 800e586:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e588:	e009      	b.n	800e59e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e58a:	4b2f      	ldr	r3, [pc, #188]	@ (800e648 <xPortStartScheduler+0x138>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	3b01      	subs	r3, #1
 800e590:	4a2d      	ldr	r2, [pc, #180]	@ (800e648 <xPortStartScheduler+0x138>)
 800e592:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e594:	78fb      	ldrb	r3, [r7, #3]
 800e596:	b2db      	uxtb	r3, r3
 800e598:	005b      	lsls	r3, r3, #1
 800e59a:	b2db      	uxtb	r3, r3
 800e59c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e59e:	78fb      	ldrb	r3, [r7, #3]
 800e5a0:	b2db      	uxtb	r3, r3
 800e5a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e5a6:	2b80      	cmp	r3, #128	@ 0x80
 800e5a8:	d0ef      	beq.n	800e58a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e5aa:	4b27      	ldr	r3, [pc, #156]	@ (800e648 <xPortStartScheduler+0x138>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f1c3 0307 	rsb	r3, r3, #7
 800e5b2:	2b04      	cmp	r3, #4
 800e5b4:	d00b      	beq.n	800e5ce <xPortStartScheduler+0xbe>
	__asm volatile
 800e5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5ba:	f383 8811 	msr	BASEPRI, r3
 800e5be:	f3bf 8f6f 	isb	sy
 800e5c2:	f3bf 8f4f 	dsb	sy
 800e5c6:	60bb      	str	r3, [r7, #8]
}
 800e5c8:	bf00      	nop
 800e5ca:	bf00      	nop
 800e5cc:	e7fd      	b.n	800e5ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e5ce:	4b1e      	ldr	r3, [pc, #120]	@ (800e648 <xPortStartScheduler+0x138>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	021b      	lsls	r3, r3, #8
 800e5d4:	4a1c      	ldr	r2, [pc, #112]	@ (800e648 <xPortStartScheduler+0x138>)
 800e5d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e5d8:	4b1b      	ldr	r3, [pc, #108]	@ (800e648 <xPortStartScheduler+0x138>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e5e0:	4a19      	ldr	r2, [pc, #100]	@ (800e648 <xPortStartScheduler+0x138>)
 800e5e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	b2da      	uxtb	r2, r3
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e5ec:	4b17      	ldr	r3, [pc, #92]	@ (800e64c <xPortStartScheduler+0x13c>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	4a16      	ldr	r2, [pc, #88]	@ (800e64c <xPortStartScheduler+0x13c>)
 800e5f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e5f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e5f8:	4b14      	ldr	r3, [pc, #80]	@ (800e64c <xPortStartScheduler+0x13c>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	4a13      	ldr	r2, [pc, #76]	@ (800e64c <xPortStartScheduler+0x13c>)
 800e5fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e602:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e604:	f000 f8da 	bl	800e7bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e608:	4b11      	ldr	r3, [pc, #68]	@ (800e650 <xPortStartScheduler+0x140>)
 800e60a:	2200      	movs	r2, #0
 800e60c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e60e:	f000 f8f9 	bl	800e804 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e612:	4b10      	ldr	r3, [pc, #64]	@ (800e654 <xPortStartScheduler+0x144>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	4a0f      	ldr	r2, [pc, #60]	@ (800e654 <xPortStartScheduler+0x144>)
 800e618:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e61c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e61e:	f7ff ff63 	bl	800e4e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e622:	f7ff faa1 	bl	800db68 <vTaskSwitchContext>
	prvTaskExitError();
 800e626:	f7ff ff1b 	bl	800e460 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e62a:	2300      	movs	r3, #0
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	3718      	adds	r7, #24
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}
 800e634:	e000ed00 	.word	0xe000ed00
 800e638:	410fc271 	.word	0x410fc271
 800e63c:	410fc270 	.word	0x410fc270
 800e640:	e000e400 	.word	0xe000e400
 800e644:	2000296c 	.word	0x2000296c
 800e648:	20002970 	.word	0x20002970
 800e64c:	e000ed20 	.word	0xe000ed20
 800e650:	20000030 	.word	0x20000030
 800e654:	e000ef34 	.word	0xe000ef34

0800e658 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e658:	b480      	push	{r7}
 800e65a:	b083      	sub	sp, #12
 800e65c:	af00      	add	r7, sp, #0
	__asm volatile
 800e65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e662:	f383 8811 	msr	BASEPRI, r3
 800e666:	f3bf 8f6f 	isb	sy
 800e66a:	f3bf 8f4f 	dsb	sy
 800e66e:	607b      	str	r3, [r7, #4]
}
 800e670:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e672:	4b10      	ldr	r3, [pc, #64]	@ (800e6b4 <vPortEnterCritical+0x5c>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	3301      	adds	r3, #1
 800e678:	4a0e      	ldr	r2, [pc, #56]	@ (800e6b4 <vPortEnterCritical+0x5c>)
 800e67a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e67c:	4b0d      	ldr	r3, [pc, #52]	@ (800e6b4 <vPortEnterCritical+0x5c>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	2b01      	cmp	r3, #1
 800e682:	d110      	bne.n	800e6a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e684:	4b0c      	ldr	r3, [pc, #48]	@ (800e6b8 <vPortEnterCritical+0x60>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	b2db      	uxtb	r3, r3
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d00b      	beq.n	800e6a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e68e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e692:	f383 8811 	msr	BASEPRI, r3
 800e696:	f3bf 8f6f 	isb	sy
 800e69a:	f3bf 8f4f 	dsb	sy
 800e69e:	603b      	str	r3, [r7, #0]
}
 800e6a0:	bf00      	nop
 800e6a2:	bf00      	nop
 800e6a4:	e7fd      	b.n	800e6a2 <vPortEnterCritical+0x4a>
	}
}
 800e6a6:	bf00      	nop
 800e6a8:	370c      	adds	r7, #12
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b0:	4770      	bx	lr
 800e6b2:	bf00      	nop
 800e6b4:	20000030 	.word	0x20000030
 800e6b8:	e000ed04 	.word	0xe000ed04

0800e6bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e6c2:	4b12      	ldr	r3, [pc, #72]	@ (800e70c <vPortExitCritical+0x50>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d10b      	bne.n	800e6e2 <vPortExitCritical+0x26>
	__asm volatile
 800e6ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ce:	f383 8811 	msr	BASEPRI, r3
 800e6d2:	f3bf 8f6f 	isb	sy
 800e6d6:	f3bf 8f4f 	dsb	sy
 800e6da:	607b      	str	r3, [r7, #4]
}
 800e6dc:	bf00      	nop
 800e6de:	bf00      	nop
 800e6e0:	e7fd      	b.n	800e6de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e6e2:	4b0a      	ldr	r3, [pc, #40]	@ (800e70c <vPortExitCritical+0x50>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	3b01      	subs	r3, #1
 800e6e8:	4a08      	ldr	r2, [pc, #32]	@ (800e70c <vPortExitCritical+0x50>)
 800e6ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e6ec:	4b07      	ldr	r3, [pc, #28]	@ (800e70c <vPortExitCritical+0x50>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d105      	bne.n	800e700 <vPortExitCritical+0x44>
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	f383 8811 	msr	BASEPRI, r3
}
 800e6fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e700:	bf00      	nop
 800e702:	370c      	adds	r7, #12
 800e704:	46bd      	mov	sp, r7
 800e706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70a:	4770      	bx	lr
 800e70c:	20000030 	.word	0x20000030

0800e710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e710:	f3ef 8009 	mrs	r0, PSP
 800e714:	f3bf 8f6f 	isb	sy
 800e718:	4b15      	ldr	r3, [pc, #84]	@ (800e770 <pxCurrentTCBConst>)
 800e71a:	681a      	ldr	r2, [r3, #0]
 800e71c:	f01e 0f10 	tst.w	lr, #16
 800e720:	bf08      	it	eq
 800e722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e72a:	6010      	str	r0, [r2, #0]
 800e72c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e730:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e734:	f380 8811 	msr	BASEPRI, r0
 800e738:	f3bf 8f4f 	dsb	sy
 800e73c:	f3bf 8f6f 	isb	sy
 800e740:	f7ff fa12 	bl	800db68 <vTaskSwitchContext>
 800e744:	f04f 0000 	mov.w	r0, #0
 800e748:	f380 8811 	msr	BASEPRI, r0
 800e74c:	bc09      	pop	{r0, r3}
 800e74e:	6819      	ldr	r1, [r3, #0]
 800e750:	6808      	ldr	r0, [r1, #0]
 800e752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e756:	f01e 0f10 	tst.w	lr, #16
 800e75a:	bf08      	it	eq
 800e75c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e760:	f380 8809 	msr	PSP, r0
 800e764:	f3bf 8f6f 	isb	sy
 800e768:	4770      	bx	lr
 800e76a:	bf00      	nop
 800e76c:	f3af 8000 	nop.w

0800e770 <pxCurrentTCBConst>:
 800e770:	20002840 	.word	0x20002840
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e774:	bf00      	nop
 800e776:	bf00      	nop

0800e778 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b082      	sub	sp, #8
 800e77c:	af00      	add	r7, sp, #0
	__asm volatile
 800e77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e782:	f383 8811 	msr	BASEPRI, r3
 800e786:	f3bf 8f6f 	isb	sy
 800e78a:	f3bf 8f4f 	dsb	sy
 800e78e:	607b      	str	r3, [r7, #4]
}
 800e790:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e792:	f7ff f92f 	bl	800d9f4 <xTaskIncrementTick>
 800e796:	4603      	mov	r3, r0
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d003      	beq.n	800e7a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e79c:	4b06      	ldr	r3, [pc, #24]	@ (800e7b8 <SysTick_Handler+0x40>)
 800e79e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e7a2:	601a      	str	r2, [r3, #0]
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	f383 8811 	msr	BASEPRI, r3
}
 800e7ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e7b0:	bf00      	nop
 800e7b2:	3708      	adds	r7, #8
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}
 800e7b8:	e000ed04 	.word	0xe000ed04

0800e7bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e7bc:	b480      	push	{r7}
 800e7be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e7c0:	4b0b      	ldr	r3, [pc, #44]	@ (800e7f0 <vPortSetupTimerInterrupt+0x34>)
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e7c6:	4b0b      	ldr	r3, [pc, #44]	@ (800e7f4 <vPortSetupTimerInterrupt+0x38>)
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e7cc:	4b0a      	ldr	r3, [pc, #40]	@ (800e7f8 <vPortSetupTimerInterrupt+0x3c>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	4a0a      	ldr	r2, [pc, #40]	@ (800e7fc <vPortSetupTimerInterrupt+0x40>)
 800e7d2:	fba2 2303 	umull	r2, r3, r2, r3
 800e7d6:	099b      	lsrs	r3, r3, #6
 800e7d8:	4a09      	ldr	r2, [pc, #36]	@ (800e800 <vPortSetupTimerInterrupt+0x44>)
 800e7da:	3b01      	subs	r3, #1
 800e7dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e7de:	4b04      	ldr	r3, [pc, #16]	@ (800e7f0 <vPortSetupTimerInterrupt+0x34>)
 800e7e0:	2207      	movs	r2, #7
 800e7e2:	601a      	str	r2, [r3, #0]
}
 800e7e4:	bf00      	nop
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ec:	4770      	bx	lr
 800e7ee:	bf00      	nop
 800e7f0:	e000e010 	.word	0xe000e010
 800e7f4:	e000e018 	.word	0xe000e018
 800e7f8:	20000004 	.word	0x20000004
 800e7fc:	10624dd3 	.word	0x10624dd3
 800e800:	e000e014 	.word	0xe000e014

0800e804 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e804:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e814 <vPortEnableVFP+0x10>
 800e808:	6801      	ldr	r1, [r0, #0]
 800e80a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e80e:	6001      	str	r1, [r0, #0]
 800e810:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e812:	bf00      	nop
 800e814:	e000ed88 	.word	0xe000ed88

0800e818 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e818:	b480      	push	{r7}
 800e81a:	b085      	sub	sp, #20
 800e81c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e81e:	f3ef 8305 	mrs	r3, IPSR
 800e822:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2b0f      	cmp	r3, #15
 800e828:	d915      	bls.n	800e856 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e82a:	4a18      	ldr	r2, [pc, #96]	@ (800e88c <vPortValidateInterruptPriority+0x74>)
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	4413      	add	r3, r2
 800e830:	781b      	ldrb	r3, [r3, #0]
 800e832:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e834:	4b16      	ldr	r3, [pc, #88]	@ (800e890 <vPortValidateInterruptPriority+0x78>)
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	7afa      	ldrb	r2, [r7, #11]
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d20b      	bcs.n	800e856 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e842:	f383 8811 	msr	BASEPRI, r3
 800e846:	f3bf 8f6f 	isb	sy
 800e84a:	f3bf 8f4f 	dsb	sy
 800e84e:	607b      	str	r3, [r7, #4]
}
 800e850:	bf00      	nop
 800e852:	bf00      	nop
 800e854:	e7fd      	b.n	800e852 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e856:	4b0f      	ldr	r3, [pc, #60]	@ (800e894 <vPortValidateInterruptPriority+0x7c>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e85e:	4b0e      	ldr	r3, [pc, #56]	@ (800e898 <vPortValidateInterruptPriority+0x80>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	429a      	cmp	r2, r3
 800e864:	d90b      	bls.n	800e87e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e86a:	f383 8811 	msr	BASEPRI, r3
 800e86e:	f3bf 8f6f 	isb	sy
 800e872:	f3bf 8f4f 	dsb	sy
 800e876:	603b      	str	r3, [r7, #0]
}
 800e878:	bf00      	nop
 800e87a:	bf00      	nop
 800e87c:	e7fd      	b.n	800e87a <vPortValidateInterruptPriority+0x62>
	}
 800e87e:	bf00      	nop
 800e880:	3714      	adds	r7, #20
 800e882:	46bd      	mov	sp, r7
 800e884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e888:	4770      	bx	lr
 800e88a:	bf00      	nop
 800e88c:	e000e3f0 	.word	0xe000e3f0
 800e890:	2000296c 	.word	0x2000296c
 800e894:	e000ed0c 	.word	0xe000ed0c
 800e898:	20002970 	.word	0x20002970

0800e89c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b08a      	sub	sp, #40	@ 0x28
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e8a8:	f7fe ffe8 	bl	800d87c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e8ac:	4b5c      	ldr	r3, [pc, #368]	@ (800ea20 <pvPortMalloc+0x184>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d101      	bne.n	800e8b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e8b4:	f000 f924 	bl	800eb00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e8b8:	4b5a      	ldr	r3, [pc, #360]	@ (800ea24 <pvPortMalloc+0x188>)
 800e8ba:	681a      	ldr	r2, [r3, #0]
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	4013      	ands	r3, r2
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	f040 8095 	bne.w	800e9f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d01e      	beq.n	800e90a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e8cc:	2208      	movs	r2, #8
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	4413      	add	r3, r2
 800e8d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f003 0307 	and.w	r3, r3, #7
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d015      	beq.n	800e90a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f023 0307 	bic.w	r3, r3, #7
 800e8e4:	3308      	adds	r3, #8
 800e8e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f003 0307 	and.w	r3, r3, #7
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d00b      	beq.n	800e90a <pvPortMalloc+0x6e>
	__asm volatile
 800e8f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8f6:	f383 8811 	msr	BASEPRI, r3
 800e8fa:	f3bf 8f6f 	isb	sy
 800e8fe:	f3bf 8f4f 	dsb	sy
 800e902:	617b      	str	r3, [r7, #20]
}
 800e904:	bf00      	nop
 800e906:	bf00      	nop
 800e908:	e7fd      	b.n	800e906 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d06f      	beq.n	800e9f0 <pvPortMalloc+0x154>
 800e910:	4b45      	ldr	r3, [pc, #276]	@ (800ea28 <pvPortMalloc+0x18c>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	429a      	cmp	r2, r3
 800e918:	d86a      	bhi.n	800e9f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e91a:	4b44      	ldr	r3, [pc, #272]	@ (800ea2c <pvPortMalloc+0x190>)
 800e91c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e91e:	4b43      	ldr	r3, [pc, #268]	@ (800ea2c <pvPortMalloc+0x190>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e924:	e004      	b.n	800e930 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e928:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e92a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e932:	685b      	ldr	r3, [r3, #4]
 800e934:	687a      	ldr	r2, [r7, #4]
 800e936:	429a      	cmp	r2, r3
 800e938:	d903      	bls.n	800e942 <pvPortMalloc+0xa6>
 800e93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d1f1      	bne.n	800e926 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e942:	4b37      	ldr	r3, [pc, #220]	@ (800ea20 <pvPortMalloc+0x184>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e948:	429a      	cmp	r2, r3
 800e94a:	d051      	beq.n	800e9f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e94c:	6a3b      	ldr	r3, [r7, #32]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	2208      	movs	r2, #8
 800e952:	4413      	add	r3, r2
 800e954:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e958:	681a      	ldr	r2, [r3, #0]
 800e95a:	6a3b      	ldr	r3, [r7, #32]
 800e95c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e960:	685a      	ldr	r2, [r3, #4]
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	1ad2      	subs	r2, r2, r3
 800e966:	2308      	movs	r3, #8
 800e968:	005b      	lsls	r3, r3, #1
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d920      	bls.n	800e9b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e96e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	4413      	add	r3, r2
 800e974:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e976:	69bb      	ldr	r3, [r7, #24]
 800e978:	f003 0307 	and.w	r3, r3, #7
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d00b      	beq.n	800e998 <pvPortMalloc+0xfc>
	__asm volatile
 800e980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e984:	f383 8811 	msr	BASEPRI, r3
 800e988:	f3bf 8f6f 	isb	sy
 800e98c:	f3bf 8f4f 	dsb	sy
 800e990:	613b      	str	r3, [r7, #16]
}
 800e992:	bf00      	nop
 800e994:	bf00      	nop
 800e996:	e7fd      	b.n	800e994 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e99a:	685a      	ldr	r2, [r3, #4]
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	1ad2      	subs	r2, r2, r3
 800e9a0:	69bb      	ldr	r3, [r7, #24]
 800e9a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9a6:	687a      	ldr	r2, [r7, #4]
 800e9a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e9aa:	69b8      	ldr	r0, [r7, #24]
 800e9ac:	f000 f90a 	bl	800ebc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e9b0:	4b1d      	ldr	r3, [pc, #116]	@ (800ea28 <pvPortMalloc+0x18c>)
 800e9b2:	681a      	ldr	r2, [r3, #0]
 800e9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9b6:	685b      	ldr	r3, [r3, #4]
 800e9b8:	1ad3      	subs	r3, r2, r3
 800e9ba:	4a1b      	ldr	r2, [pc, #108]	@ (800ea28 <pvPortMalloc+0x18c>)
 800e9bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e9be:	4b1a      	ldr	r3, [pc, #104]	@ (800ea28 <pvPortMalloc+0x18c>)
 800e9c0:	681a      	ldr	r2, [r3, #0]
 800e9c2:	4b1b      	ldr	r3, [pc, #108]	@ (800ea30 <pvPortMalloc+0x194>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d203      	bcs.n	800e9d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e9ca:	4b17      	ldr	r3, [pc, #92]	@ (800ea28 <pvPortMalloc+0x18c>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	4a18      	ldr	r2, [pc, #96]	@ (800ea30 <pvPortMalloc+0x194>)
 800e9d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9d4:	685a      	ldr	r2, [r3, #4]
 800e9d6:	4b13      	ldr	r3, [pc, #76]	@ (800ea24 <pvPortMalloc+0x188>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	431a      	orrs	r2, r3
 800e9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e9e6:	4b13      	ldr	r3, [pc, #76]	@ (800ea34 <pvPortMalloc+0x198>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	3301      	adds	r3, #1
 800e9ec:	4a11      	ldr	r2, [pc, #68]	@ (800ea34 <pvPortMalloc+0x198>)
 800e9ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e9f0:	f7fe ff52 	bl	800d898 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9f4:	69fb      	ldr	r3, [r7, #28]
 800e9f6:	f003 0307 	and.w	r3, r3, #7
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d00b      	beq.n	800ea16 <pvPortMalloc+0x17a>
	__asm volatile
 800e9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea02:	f383 8811 	msr	BASEPRI, r3
 800ea06:	f3bf 8f6f 	isb	sy
 800ea0a:	f3bf 8f4f 	dsb	sy
 800ea0e:	60fb      	str	r3, [r7, #12]
}
 800ea10:	bf00      	nop
 800ea12:	bf00      	nop
 800ea14:	e7fd      	b.n	800ea12 <pvPortMalloc+0x176>
	return pvReturn;
 800ea16:	69fb      	ldr	r3, [r7, #28]
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3728      	adds	r7, #40	@ 0x28
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}
 800ea20:	2000317c 	.word	0x2000317c
 800ea24:	20003190 	.word	0x20003190
 800ea28:	20003180 	.word	0x20003180
 800ea2c:	20003174 	.word	0x20003174
 800ea30:	20003184 	.word	0x20003184
 800ea34:	20003188 	.word	0x20003188

0800ea38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b086      	sub	sp, #24
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d04f      	beq.n	800eaea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ea4a:	2308      	movs	r3, #8
 800ea4c:	425b      	negs	r3, r3
 800ea4e:	697a      	ldr	r2, [r7, #20]
 800ea50:	4413      	add	r3, r2
 800ea52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	685a      	ldr	r2, [r3, #4]
 800ea5c:	4b25      	ldr	r3, [pc, #148]	@ (800eaf4 <vPortFree+0xbc>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	4013      	ands	r3, r2
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d10b      	bne.n	800ea7e <vPortFree+0x46>
	__asm volatile
 800ea66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea6a:	f383 8811 	msr	BASEPRI, r3
 800ea6e:	f3bf 8f6f 	isb	sy
 800ea72:	f3bf 8f4f 	dsb	sy
 800ea76:	60fb      	str	r3, [r7, #12]
}
 800ea78:	bf00      	nop
 800ea7a:	bf00      	nop
 800ea7c:	e7fd      	b.n	800ea7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ea7e:	693b      	ldr	r3, [r7, #16]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d00b      	beq.n	800ea9e <vPortFree+0x66>
	__asm volatile
 800ea86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea8a:	f383 8811 	msr	BASEPRI, r3
 800ea8e:	f3bf 8f6f 	isb	sy
 800ea92:	f3bf 8f4f 	dsb	sy
 800ea96:	60bb      	str	r3, [r7, #8]
}
 800ea98:	bf00      	nop
 800ea9a:	bf00      	nop
 800ea9c:	e7fd      	b.n	800ea9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	685a      	ldr	r2, [r3, #4]
 800eaa2:	4b14      	ldr	r3, [pc, #80]	@ (800eaf4 <vPortFree+0xbc>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	4013      	ands	r3, r2
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d01e      	beq.n	800eaea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d11a      	bne.n	800eaea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eab4:	693b      	ldr	r3, [r7, #16]
 800eab6:	685a      	ldr	r2, [r3, #4]
 800eab8:	4b0e      	ldr	r3, [pc, #56]	@ (800eaf4 <vPortFree+0xbc>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	43db      	mvns	r3, r3
 800eabe:	401a      	ands	r2, r3
 800eac0:	693b      	ldr	r3, [r7, #16]
 800eac2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eac4:	f7fe feda 	bl	800d87c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	685a      	ldr	r2, [r3, #4]
 800eacc:	4b0a      	ldr	r3, [pc, #40]	@ (800eaf8 <vPortFree+0xc0>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	4413      	add	r3, r2
 800ead2:	4a09      	ldr	r2, [pc, #36]	@ (800eaf8 <vPortFree+0xc0>)
 800ead4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ead6:	6938      	ldr	r0, [r7, #16]
 800ead8:	f000 f874 	bl	800ebc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800eadc:	4b07      	ldr	r3, [pc, #28]	@ (800eafc <vPortFree+0xc4>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	3301      	adds	r3, #1
 800eae2:	4a06      	ldr	r2, [pc, #24]	@ (800eafc <vPortFree+0xc4>)
 800eae4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800eae6:	f7fe fed7 	bl	800d898 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eaea:	bf00      	nop
 800eaec:	3718      	adds	r7, #24
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}
 800eaf2:	bf00      	nop
 800eaf4:	20003190 	.word	0x20003190
 800eaf8:	20003180 	.word	0x20003180
 800eafc:	2000318c 	.word	0x2000318c

0800eb00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eb00:	b480      	push	{r7}
 800eb02:	b085      	sub	sp, #20
 800eb04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eb06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800eb0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eb0c:	4b27      	ldr	r3, [pc, #156]	@ (800ebac <prvHeapInit+0xac>)
 800eb0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	f003 0307 	and.w	r3, r3, #7
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d00c      	beq.n	800eb34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	3307      	adds	r3, #7
 800eb1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	f023 0307 	bic.w	r3, r3, #7
 800eb26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eb28:	68ba      	ldr	r2, [r7, #8]
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	1ad3      	subs	r3, r2, r3
 800eb2e:	4a1f      	ldr	r2, [pc, #124]	@ (800ebac <prvHeapInit+0xac>)
 800eb30:	4413      	add	r3, r2
 800eb32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eb38:	4a1d      	ldr	r2, [pc, #116]	@ (800ebb0 <prvHeapInit+0xb0>)
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eb3e:	4b1c      	ldr	r3, [pc, #112]	@ (800ebb0 <prvHeapInit+0xb0>)
 800eb40:	2200      	movs	r2, #0
 800eb42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	68ba      	ldr	r2, [r7, #8]
 800eb48:	4413      	add	r3, r2
 800eb4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eb4c:	2208      	movs	r2, #8
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	1a9b      	subs	r3, r3, r2
 800eb52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	f023 0307 	bic.w	r3, r3, #7
 800eb5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	4a15      	ldr	r2, [pc, #84]	@ (800ebb4 <prvHeapInit+0xb4>)
 800eb60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eb62:	4b14      	ldr	r3, [pc, #80]	@ (800ebb4 <prvHeapInit+0xb4>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	2200      	movs	r2, #0
 800eb68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eb6a:	4b12      	ldr	r3, [pc, #72]	@ (800ebb4 <prvHeapInit+0xb4>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	68fa      	ldr	r2, [r7, #12]
 800eb7a:	1ad2      	subs	r2, r2, r3
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eb80:	4b0c      	ldr	r3, [pc, #48]	@ (800ebb4 <prvHeapInit+0xb4>)
 800eb82:	681a      	ldr	r2, [r3, #0]
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	685b      	ldr	r3, [r3, #4]
 800eb8c:	4a0a      	ldr	r2, [pc, #40]	@ (800ebb8 <prvHeapInit+0xb8>)
 800eb8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	685b      	ldr	r3, [r3, #4]
 800eb94:	4a09      	ldr	r2, [pc, #36]	@ (800ebbc <prvHeapInit+0xbc>)
 800eb96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eb98:	4b09      	ldr	r3, [pc, #36]	@ (800ebc0 <prvHeapInit+0xc0>)
 800eb9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800eb9e:	601a      	str	r2, [r3, #0]
}
 800eba0:	bf00      	nop
 800eba2:	3714      	adds	r7, #20
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr
 800ebac:	20002974 	.word	0x20002974
 800ebb0:	20003174 	.word	0x20003174
 800ebb4:	2000317c 	.word	0x2000317c
 800ebb8:	20003184 	.word	0x20003184
 800ebbc:	20003180 	.word	0x20003180
 800ebc0:	20003190 	.word	0x20003190

0800ebc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b085      	sub	sp, #20
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ebcc:	4b28      	ldr	r3, [pc, #160]	@ (800ec70 <prvInsertBlockIntoFreeList+0xac>)
 800ebce:	60fb      	str	r3, [r7, #12]
 800ebd0:	e002      	b.n	800ebd8 <prvInsertBlockIntoFreeList+0x14>
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	60fb      	str	r3, [r7, #12]
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	687a      	ldr	r2, [r7, #4]
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	d8f7      	bhi.n	800ebd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	68ba      	ldr	r2, [r7, #8]
 800ebec:	4413      	add	r3, r2
 800ebee:	687a      	ldr	r2, [r7, #4]
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d108      	bne.n	800ec06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	685a      	ldr	r2, [r3, #4]
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	441a      	add	r2, r3
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	685b      	ldr	r3, [r3, #4]
 800ec0e:	68ba      	ldr	r2, [r7, #8]
 800ec10:	441a      	add	r2, r3
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d118      	bne.n	800ec4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	4b15      	ldr	r3, [pc, #84]	@ (800ec74 <prvInsertBlockIntoFreeList+0xb0>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d00d      	beq.n	800ec42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	685a      	ldr	r2, [r3, #4]
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	441a      	add	r2, r3
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	681a      	ldr	r2, [r3, #0]
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	601a      	str	r2, [r3, #0]
 800ec40:	e008      	b.n	800ec54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ec42:	4b0c      	ldr	r3, [pc, #48]	@ (800ec74 <prvInsertBlockIntoFreeList+0xb0>)
 800ec44:	681a      	ldr	r2, [r3, #0]
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	601a      	str	r2, [r3, #0]
 800ec4a:	e003      	b.n	800ec54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	681a      	ldr	r2, [r3, #0]
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ec54:	68fa      	ldr	r2, [r7, #12]
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d002      	beq.n	800ec62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	687a      	ldr	r2, [r7, #4]
 800ec60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec62:	bf00      	nop
 800ec64:	3714      	adds	r7, #20
 800ec66:	46bd      	mov	sp, r7
 800ec68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6c:	4770      	bx	lr
 800ec6e:	bf00      	nop
 800ec70:	20003174 	.word	0x20003174
 800ec74:	2000317c 	.word	0x2000317c

0800ec78 <arm_sub_f32>:
 800ec78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec7a:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800ec7e:	d033      	beq.n	800ece8 <arm_sub_f32+0x70>
 800ec80:	f100 0610 	add.w	r6, r0, #16
 800ec84:	f101 0510 	add.w	r5, r1, #16
 800ec88:	f102 0410 	add.w	r4, r2, #16
 800ec8c:	4677      	mov	r7, lr
 800ec8e:	ed16 6a03 	vldr	s12, [r6, #-12]
 800ec92:	ed15 4a03 	vldr	s8, [r5, #-12]
 800ec96:	ed56 6a02 	vldr	s13, [r6, #-8]
 800ec9a:	ed55 4a02 	vldr	s9, [r5, #-8]
 800ec9e:	ed16 7a01 	vldr	s14, [r6, #-4]
 800eca2:	ed15 5a01 	vldr	s10, [r5, #-4]
 800eca6:	ed56 7a04 	vldr	s15, [r6, #-16]
 800ecaa:	ed55 5a04 	vldr	s11, [r5, #-16]
 800ecae:	ee36 6a44 	vsub.f32	s12, s12, s8
 800ecb2:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800ecb6:	ee37 7a45 	vsub.f32	s14, s14, s10
 800ecba:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ecbe:	3f01      	subs	r7, #1
 800ecc0:	ed04 6a03 	vstr	s12, [r4, #-12]
 800ecc4:	ed44 6a02 	vstr	s13, [r4, #-8]
 800ecc8:	ed04 7a01 	vstr	s14, [r4, #-4]
 800eccc:	ed44 7a04 	vstr	s15, [r4, #-16]
 800ecd0:	f106 0610 	add.w	r6, r6, #16
 800ecd4:	f105 0510 	add.w	r5, r5, #16
 800ecd8:	f104 0410 	add.w	r4, r4, #16
 800ecdc:	d1d7      	bne.n	800ec8e <arm_sub_f32+0x16>
 800ecde:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800ece2:	4420      	add	r0, r4
 800ece4:	4421      	add	r1, r4
 800ece6:	4422      	add	r2, r4
 800ece8:	f013 0303 	ands.w	r3, r3, #3
 800ecec:	d009      	beq.n	800ed02 <arm_sub_f32+0x8a>
 800ecee:	ecf0 7a01 	vldmia	r0!, {s15}
 800ecf2:	ecb1 7a01 	vldmia	r1!, {s14}
 800ecf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ecfa:	3b01      	subs	r3, #1
 800ecfc:	ece2 7a01 	vstmia	r2!, {s15}
 800ed00:	d1f5      	bne.n	800ecee <arm_sub_f32+0x76>
 800ed02:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ed04 <arm_dot_prod_f32>:
 800ed04:	b4f0      	push	{r4, r5, r6, r7}
 800ed06:	0897      	lsrs	r7, r2, #2
 800ed08:	eddf 5a20 	vldr	s11, [pc, #128]	@ 800ed8c <arm_dot_prod_f32+0x88>
 800ed0c:	d02d      	beq.n	800ed6a <arm_dot_prod_f32+0x66>
 800ed0e:	f100 0510 	add.w	r5, r0, #16
 800ed12:	f101 0410 	add.w	r4, r1, #16
 800ed16:	463e      	mov	r6, r7
 800ed18:	ed54 7a04 	vldr	s15, [r4, #-16]
 800ed1c:	ed15 6a04 	vldr	s12, [r5, #-16]
 800ed20:	ed55 6a03 	vldr	s13, [r5, #-12]
 800ed24:	ed54 3a03 	vldr	s7, [r4, #-12]
 800ed28:	ed15 7a02 	vldr	s14, [r5, #-8]
 800ed2c:	ed14 4a02 	vldr	s8, [r4, #-8]
 800ed30:	ed15 5a01 	vldr	s10, [r5, #-4]
 800ed34:	ed54 4a01 	vldr	s9, [r4, #-4]
 800ed38:	ee26 6a27 	vmul.f32	s12, s12, s15
 800ed3c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800ed40:	ee76 7a25 	vadd.f32	s15, s12, s11
 800ed44:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ed48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed4c:	ee65 5a24 	vmul.f32	s11, s10, s9
 800ed50:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ed54:	3e01      	subs	r6, #1
 800ed56:	f105 0510 	add.w	r5, r5, #16
 800ed5a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800ed5e:	f104 0410 	add.w	r4, r4, #16
 800ed62:	d1d9      	bne.n	800ed18 <arm_dot_prod_f32+0x14>
 800ed64:	013f      	lsls	r7, r7, #4
 800ed66:	4438      	add	r0, r7
 800ed68:	4439      	add	r1, r7
 800ed6a:	f012 0203 	ands.w	r2, r2, #3
 800ed6e:	d009      	beq.n	800ed84 <arm_dot_prod_f32+0x80>
 800ed70:	ecf0 7a01 	vldmia	r0!, {s15}
 800ed74:	ecb1 7a01 	vldmia	r1!, {s14}
 800ed78:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ed7c:	3a01      	subs	r2, #1
 800ed7e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800ed82:	d1f5      	bne.n	800ed70 <arm_dot_prod_f32+0x6c>
 800ed84:	edc3 5a00 	vstr	s11, [r3]
 800ed88:	bcf0      	pop	{r4, r5, r6, r7}
 800ed8a:	4770      	bx	lr
 800ed8c:	00000000 	.word	0x00000000

0800ed90 <memset>:
 800ed90:	4402      	add	r2, r0
 800ed92:	4603      	mov	r3, r0
 800ed94:	4293      	cmp	r3, r2
 800ed96:	d100      	bne.n	800ed9a <memset+0xa>
 800ed98:	4770      	bx	lr
 800ed9a:	f803 1b01 	strb.w	r1, [r3], #1
 800ed9e:	e7f9      	b.n	800ed94 <memset+0x4>

0800eda0 <__errno>:
 800eda0:	4b01      	ldr	r3, [pc, #4]	@ (800eda8 <__errno+0x8>)
 800eda2:	6818      	ldr	r0, [r3, #0]
 800eda4:	4770      	bx	lr
 800eda6:	bf00      	nop
 800eda8:	20000034 	.word	0x20000034

0800edac <__libc_init_array>:
 800edac:	b570      	push	{r4, r5, r6, lr}
 800edae:	4d0d      	ldr	r5, [pc, #52]	@ (800ede4 <__libc_init_array+0x38>)
 800edb0:	4c0d      	ldr	r4, [pc, #52]	@ (800ede8 <__libc_init_array+0x3c>)
 800edb2:	1b64      	subs	r4, r4, r5
 800edb4:	10a4      	asrs	r4, r4, #2
 800edb6:	2600      	movs	r6, #0
 800edb8:	42a6      	cmp	r6, r4
 800edba:	d109      	bne.n	800edd0 <__libc_init_array+0x24>
 800edbc:	4d0b      	ldr	r5, [pc, #44]	@ (800edec <__libc_init_array+0x40>)
 800edbe:	4c0c      	ldr	r4, [pc, #48]	@ (800edf0 <__libc_init_array+0x44>)
 800edc0:	f000 f848 	bl	800ee54 <_init>
 800edc4:	1b64      	subs	r4, r4, r5
 800edc6:	10a4      	asrs	r4, r4, #2
 800edc8:	2600      	movs	r6, #0
 800edca:	42a6      	cmp	r6, r4
 800edcc:	d105      	bne.n	800edda <__libc_init_array+0x2e>
 800edce:	bd70      	pop	{r4, r5, r6, pc}
 800edd0:	f855 3b04 	ldr.w	r3, [r5], #4
 800edd4:	4798      	blx	r3
 800edd6:	3601      	adds	r6, #1
 800edd8:	e7ee      	b.n	800edb8 <__libc_init_array+0xc>
 800edda:	f855 3b04 	ldr.w	r3, [r5], #4
 800edde:	4798      	blx	r3
 800ede0:	3601      	adds	r6, #1
 800ede2:	e7f2      	b.n	800edca <__libc_init_array+0x1e>
 800ede4:	08012f90 	.word	0x08012f90
 800ede8:	08012f90 	.word	0x08012f90
 800edec:	08012f90 	.word	0x08012f90
 800edf0:	08012f94 	.word	0x08012f94

0800edf4 <memcpy>:
 800edf4:	440a      	add	r2, r1
 800edf6:	4291      	cmp	r1, r2
 800edf8:	f100 33ff 	add.w	r3, r0, #4294967295
 800edfc:	d100      	bne.n	800ee00 <memcpy+0xc>
 800edfe:	4770      	bx	lr
 800ee00:	b510      	push	{r4, lr}
 800ee02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee0a:	4291      	cmp	r1, r2
 800ee0c:	d1f9      	bne.n	800ee02 <memcpy+0xe>
 800ee0e:	bd10      	pop	{r4, pc}

0800ee10 <sqrtf>:
 800ee10:	b508      	push	{r3, lr}
 800ee12:	ed2d 8b02 	vpush	{d8}
 800ee16:	eeb0 8a40 	vmov.f32	s16, s0
 800ee1a:	f000 f817 	bl	800ee4c <__ieee754_sqrtf>
 800ee1e:	eeb4 8a48 	vcmp.f32	s16, s16
 800ee22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee26:	d60c      	bvs.n	800ee42 <sqrtf+0x32>
 800ee28:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ee48 <sqrtf+0x38>
 800ee2c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ee30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee34:	d505      	bpl.n	800ee42 <sqrtf+0x32>
 800ee36:	f7ff ffb3 	bl	800eda0 <__errno>
 800ee3a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ee3e:	2321      	movs	r3, #33	@ 0x21
 800ee40:	6003      	str	r3, [r0, #0]
 800ee42:	ecbd 8b02 	vpop	{d8}
 800ee46:	bd08      	pop	{r3, pc}
 800ee48:	00000000 	.word	0x00000000

0800ee4c <__ieee754_sqrtf>:
 800ee4c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ee50:	4770      	bx	lr
	...

0800ee54 <_init>:
 800ee54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee56:	bf00      	nop
 800ee58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee5a:	bc08      	pop	{r3}
 800ee5c:	469e      	mov	lr, r3
 800ee5e:	4770      	bx	lr

0800ee60 <_fini>:
 800ee60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee62:	bf00      	nop
 800ee64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee66:	bc08      	pop	{r3}
 800ee68:	469e      	mov	lr, r3
 800ee6a:	4770      	bx	lr
