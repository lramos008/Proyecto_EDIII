
EDIII_Control_Acceso.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011ee4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00024a44  08012084  08012084  00013084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08036ac8  08036ac8  00038080  2**0
                  CONTENTS
  4 .ARM          00000008  08036ac8  08036ac8  00037ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08036ad0  08036ad0  00038080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08036ad0  08036ad0  00037ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08036ad4  08036ad4  00037ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08036ad8  00038000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000eba0  20000080  08036b58  00038080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000ec20  08036b58  00038c20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00038080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025d1e  00000000  00000000  000380b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006120  00000000  00000000  0005ddce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020f0  00000000  00000000  00063ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000182e  00000000  00000000  00065fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f9a1  00000000  00000000  0006780e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030725  00000000  00000000  000871af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3bd1  00000000  00000000  000b78d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  0016b4a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008bb0  00000000  00000000  0016b558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  00174108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00004c97  00000000  00000000  0017418e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000001b0  00000000  00000000  00178e25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801206c 	.word	0x0801206c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	0801206c 	.word	0x0801206c

080001e0 <arm_bitreversal_32>:
 80001e0:	1c4b      	adds	r3, r1, #1
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf98      	it	ls
 80001e6:	4770      	bxls	lr
 80001e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ec:	1c91      	adds	r1, r2, #2
 80001ee:	089b      	lsrs	r3, r3, #2

080001f0 <arm_bitreversal_32_0>:
 80001f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f8:	880a      	ldrh	r2, [r1, #0]
 80001fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001fe:	4480      	add	r8, r0
 8000200:	4481      	add	r9, r0
 8000202:	4402      	add	r2, r0
 8000204:	4484      	add	ip, r0
 8000206:	f8d9 7000 	ldr.w	r7, [r9]
 800020a:	f8d8 6000 	ldr.w	r6, [r8]
 800020e:	6815      	ldr	r5, [r2, #0]
 8000210:	f8dc 4000 	ldr.w	r4, [ip]
 8000214:	f8c9 6000 	str.w	r6, [r9]
 8000218:	f8c8 7000 	str.w	r7, [r8]
 800021c:	f8cc 5000 	str.w	r5, [ip]
 8000220:	6014      	str	r4, [r2, #0]
 8000222:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000226:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800022a:	6855      	ldr	r5, [r2, #4]
 800022c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000230:	f8c9 6004 	str.w	r6, [r9, #4]
 8000234:	f8c8 7004 	str.w	r7, [r8, #4]
 8000238:	f8cc 5004 	str.w	r5, [ip, #4]
 800023c:	6054      	str	r4, [r2, #4]
 800023e:	3108      	adds	r1, #8
 8000240:	3b01      	subs	r3, #1
 8000242:	d1d5      	bne.n	80001f0 <arm_bitreversal_32_0>
 8000244:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	4770      	bx	lr

0800024a <arm_bitreversal_16>:
 800024a:	1c4b      	adds	r3, r1, #1
 800024c:	2b01      	cmp	r3, #1
 800024e:	bf98      	it	ls
 8000250:	4770      	bxls	lr
 8000252:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000256:	1c91      	adds	r1, r2, #2
 8000258:	089b      	lsrs	r3, r3, #2

0800025a <arm_bitreversal_16_0>:
 800025a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800025e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000262:	880a      	ldrh	r2, [r1, #0]
 8000264:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000268:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800026c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000270:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000274:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000278:	f8d9 7000 	ldr.w	r7, [r9]
 800027c:	f8d8 6000 	ldr.w	r6, [r8]
 8000280:	6815      	ldr	r5, [r2, #0]
 8000282:	f8dc 4000 	ldr.w	r4, [ip]
 8000286:	f8c9 6000 	str.w	r6, [r9]
 800028a:	f8c8 7000 	str.w	r7, [r8]
 800028e:	f8cc 5000 	str.w	r5, [ip]
 8000292:	6014      	str	r4, [r2, #0]
 8000294:	3108      	adds	r1, #8
 8000296:	3b01      	subs	r3, #1
 8000298:	d1df      	bne.n	800025a <arm_bitreversal_16_0>
 800029a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	4770      	bx	lr

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_drsub>:
 8000350:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000354:	e002      	b.n	800035c <__adddf3>
 8000356:	bf00      	nop

08000358 <__aeabi_dsub>:
 8000358:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800035c <__adddf3>:
 800035c:	b530      	push	{r4, r5, lr}
 800035e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000362:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	bf1f      	itttt	ne
 8000372:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000376:	ea55 0c02 	orrsne.w	ip, r5, r2
 800037a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800037e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000382:	f000 80e2 	beq.w	800054a <__adddf3+0x1ee>
 8000386:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800038a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800038e:	bfb8      	it	lt
 8000390:	426d      	neglt	r5, r5
 8000392:	dd0c      	ble.n	80003ae <__adddf3+0x52>
 8000394:	442c      	add	r4, r5
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	ea82 0000 	eor.w	r0, r2, r0
 80003a2:	ea83 0101 	eor.w	r1, r3, r1
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	2d36      	cmp	r5, #54	@ 0x36
 80003b0:	bf88      	it	hi
 80003b2:	bd30      	pophi	{r4, r5, pc}
 80003b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003c4:	d002      	beq.n	80003cc <__adddf3+0x70>
 80003c6:	4240      	negs	r0, r0
 80003c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003d8:	d002      	beq.n	80003e0 <__adddf3+0x84>
 80003da:	4252      	negs	r2, r2
 80003dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003e0:	ea94 0f05 	teq	r4, r5
 80003e4:	f000 80a7 	beq.w	8000536 <__adddf3+0x1da>
 80003e8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80003f0:	db0d      	blt.n	800040e <__adddf3+0xb2>
 80003f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003f6:	fa22 f205 	lsr.w	r2, r2, r5
 80003fa:	1880      	adds	r0, r0, r2
 80003fc:	f141 0100 	adc.w	r1, r1, #0
 8000400:	fa03 f20e 	lsl.w	r2, r3, lr
 8000404:	1880      	adds	r0, r0, r2
 8000406:	fa43 f305 	asr.w	r3, r3, r5
 800040a:	4159      	adcs	r1, r3
 800040c:	e00e      	b.n	800042c <__adddf3+0xd0>
 800040e:	f1a5 0520 	sub.w	r5, r5, #32
 8000412:	f10e 0e20 	add.w	lr, lr, #32
 8000416:	2a01      	cmp	r2, #1
 8000418:	fa03 fc0e 	lsl.w	ip, r3, lr
 800041c:	bf28      	it	cs
 800041e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000422:	fa43 f305 	asr.w	r3, r3, r5
 8000426:	18c0      	adds	r0, r0, r3
 8000428:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000430:	d507      	bpl.n	8000442 <__adddf3+0xe6>
 8000432:	f04f 0e00 	mov.w	lr, #0
 8000436:	f1dc 0c00 	rsbs	ip, ip, #0
 800043a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800043e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000442:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000446:	d31b      	bcc.n	8000480 <__adddf3+0x124>
 8000448:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800044c:	d30c      	bcc.n	8000468 <__adddf3+0x10c>
 800044e:	0849      	lsrs	r1, r1, #1
 8000450:	ea5f 0030 	movs.w	r0, r0, rrx
 8000454:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000458:	f104 0401 	add.w	r4, r4, #1
 800045c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000460:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000464:	f080 809a 	bcs.w	800059c <__adddf3+0x240>
 8000468:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800046c:	bf08      	it	eq
 800046e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000472:	f150 0000 	adcs.w	r0, r0, #0
 8000476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800047a:	ea41 0105 	orr.w	r1, r1, r5
 800047e:	bd30      	pop	{r4, r5, pc}
 8000480:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000484:	4140      	adcs	r0, r0
 8000486:	eb41 0101 	adc.w	r1, r1, r1
 800048a:	3c01      	subs	r4, #1
 800048c:	bf28      	it	cs
 800048e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000492:	d2e9      	bcs.n	8000468 <__adddf3+0x10c>
 8000494:	f091 0f00 	teq	r1, #0
 8000498:	bf04      	itt	eq
 800049a:	4601      	moveq	r1, r0
 800049c:	2000      	moveq	r0, #0
 800049e:	fab1 f381 	clz	r3, r1
 80004a2:	bf08      	it	eq
 80004a4:	3320      	addeq	r3, #32
 80004a6:	f1a3 030b 	sub.w	r3, r3, #11
 80004aa:	f1b3 0220 	subs.w	r2, r3, #32
 80004ae:	da0c      	bge.n	80004ca <__adddf3+0x16e>
 80004b0:	320c      	adds	r2, #12
 80004b2:	dd08      	ble.n	80004c6 <__adddf3+0x16a>
 80004b4:	f102 0c14 	add.w	ip, r2, #20
 80004b8:	f1c2 020c 	rsb	r2, r2, #12
 80004bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004c0:	fa21 f102 	lsr.w	r1, r1, r2
 80004c4:	e00c      	b.n	80004e0 <__adddf3+0x184>
 80004c6:	f102 0214 	add.w	r2, r2, #20
 80004ca:	bfd8      	it	le
 80004cc:	f1c2 0c20 	rsble	ip, r2, #32
 80004d0:	fa01 f102 	lsl.w	r1, r1, r2
 80004d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004d8:	bfdc      	itt	le
 80004da:	ea41 010c 	orrle.w	r1, r1, ip
 80004de:	4090      	lslle	r0, r2
 80004e0:	1ae4      	subs	r4, r4, r3
 80004e2:	bfa2      	ittt	ge
 80004e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004e8:	4329      	orrge	r1, r5
 80004ea:	bd30      	popge	{r4, r5, pc}
 80004ec:	ea6f 0404 	mvn.w	r4, r4
 80004f0:	3c1f      	subs	r4, #31
 80004f2:	da1c      	bge.n	800052e <__adddf3+0x1d2>
 80004f4:	340c      	adds	r4, #12
 80004f6:	dc0e      	bgt.n	8000516 <__adddf3+0x1ba>
 80004f8:	f104 0414 	add.w	r4, r4, #20
 80004fc:	f1c4 0220 	rsb	r2, r4, #32
 8000500:	fa20 f004 	lsr.w	r0, r0, r4
 8000504:	fa01 f302 	lsl.w	r3, r1, r2
 8000508:	ea40 0003 	orr.w	r0, r0, r3
 800050c:	fa21 f304 	lsr.w	r3, r1, r4
 8000510:	ea45 0103 	orr.w	r1, r5, r3
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f1c4 040c 	rsb	r4, r4, #12
 800051a:	f1c4 0220 	rsb	r2, r4, #32
 800051e:	fa20 f002 	lsr.w	r0, r0, r2
 8000522:	fa01 f304 	lsl.w	r3, r1, r4
 8000526:	ea40 0003 	orr.w	r0, r0, r3
 800052a:	4629      	mov	r1, r5
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	fa21 f004 	lsr.w	r0, r1, r4
 8000532:	4629      	mov	r1, r5
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f094 0f00 	teq	r4, #0
 800053a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800053e:	bf06      	itte	eq
 8000540:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000544:	3401      	addeq	r4, #1
 8000546:	3d01      	subne	r5, #1
 8000548:	e74e      	b.n	80003e8 <__adddf3+0x8c>
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf18      	it	ne
 8000550:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000554:	d029      	beq.n	80005aa <__adddf3+0x24e>
 8000556:	ea94 0f05 	teq	r4, r5
 800055a:	bf08      	it	eq
 800055c:	ea90 0f02 	teqeq	r0, r2
 8000560:	d005      	beq.n	800056e <__adddf3+0x212>
 8000562:	ea54 0c00 	orrs.w	ip, r4, r0
 8000566:	bf04      	itt	eq
 8000568:	4619      	moveq	r1, r3
 800056a:	4610      	moveq	r0, r2
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	ea91 0f03 	teq	r1, r3
 8000572:	bf1e      	ittt	ne
 8000574:	2100      	movne	r1, #0
 8000576:	2000      	movne	r0, #0
 8000578:	bd30      	popne	{r4, r5, pc}
 800057a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800057e:	d105      	bne.n	800058c <__adddf3+0x230>
 8000580:	0040      	lsls	r0, r0, #1
 8000582:	4149      	adcs	r1, r1
 8000584:	bf28      	it	cs
 8000586:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000590:	bf3c      	itt	cc
 8000592:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000596:	bd30      	popcc	{r4, r5, pc}
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800059c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005a4:	f04f 0000 	mov.w	r0, #0
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf1a      	itte	ne
 80005b0:	4619      	movne	r1, r3
 80005b2:	4610      	movne	r0, r2
 80005b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005b8:	bf1c      	itt	ne
 80005ba:	460b      	movne	r3, r1
 80005bc:	4602      	movne	r2, r0
 80005be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005c2:	bf06      	itte	eq
 80005c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005c8:	ea91 0f03 	teqeq	r1, r3
 80005cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	bf00      	nop

080005d4 <__aeabi_ui2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e8:	f04f 0500 	mov.w	r5, #0
 80005ec:	f04f 0100 	mov.w	r1, #0
 80005f0:	e750      	b.n	8000494 <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_i2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000608:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800060c:	bf48      	it	mi
 800060e:	4240      	negmi	r0, r0
 8000610:	f04f 0100 	mov.w	r1, #0
 8000614:	e73e      	b.n	8000494 <__adddf3+0x138>
 8000616:	bf00      	nop

08000618 <__aeabi_f2d>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800061e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000622:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000626:	bf1f      	itttt	ne
 8000628:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800062c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000630:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000634:	4770      	bxne	lr
 8000636:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800063a:	bf08      	it	eq
 800063c:	4770      	bxeq	lr
 800063e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000642:	bf04      	itt	eq
 8000644:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000648:	4770      	bxeq	lr
 800064a:	b530      	push	{r4, r5, lr}
 800064c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000650:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000654:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	e71c      	b.n	8000494 <__adddf3+0x138>
 800065a:	bf00      	nop

0800065c <__aeabi_ul2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	e00a      	b.n	8000682 <__aeabi_l2d+0x16>

0800066c <__aeabi_l2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800067a:	d502      	bpl.n	8000682 <__aeabi_l2d+0x16>
 800067c:	4240      	negs	r0, r0
 800067e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000682:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000686:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800068a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800068e:	f43f aed8 	beq.w	8000442 <__adddf3+0xe6>
 8000692:	f04f 0203 	mov.w	r2, #3
 8000696:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800069a:	bf18      	it	ne
 800069c:	3203      	addne	r2, #3
 800069e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006a2:	bf18      	it	ne
 80006a4:	3203      	addne	r2, #3
 80006a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006aa:	f1c2 0320 	rsb	r3, r2, #32
 80006ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ba:	ea40 000e 	orr.w	r0, r0, lr
 80006be:	fa21 f102 	lsr.w	r1, r1, r2
 80006c2:	4414      	add	r4, r2
 80006c4:	e6bd      	b.n	8000442 <__adddf3+0xe6>
 80006c6:	bf00      	nop

080006c8 <__aeabi_dmul>:
 80006c8:	b570      	push	{r4, r5, r6, lr}
 80006ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006d6:	bf1d      	ittte	ne
 80006d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006dc:	ea94 0f0c 	teqne	r4, ip
 80006e0:	ea95 0f0c 	teqne	r5, ip
 80006e4:	f000 f8de 	bleq	80008a4 <__aeabi_dmul+0x1dc>
 80006e8:	442c      	add	r4, r5
 80006ea:	ea81 0603 	eor.w	r6, r1, r3
 80006ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006fa:	bf18      	it	ne
 80006fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000704:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000708:	d038      	beq.n	800077c <__aeabi_dmul+0xb4>
 800070a:	fba0 ce02 	umull	ip, lr, r0, r2
 800070e:	f04f 0500 	mov.w	r5, #0
 8000712:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000716:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800071a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800071e:	f04f 0600 	mov.w	r6, #0
 8000722:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000726:	f09c 0f00 	teq	ip, #0
 800072a:	bf18      	it	ne
 800072c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000730:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000734:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000738:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800073c:	d204      	bcs.n	8000748 <__aeabi_dmul+0x80>
 800073e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000742:	416d      	adcs	r5, r5
 8000744:	eb46 0606 	adc.w	r6, r6, r6
 8000748:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800074c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000750:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000754:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000758:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800075c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000760:	bf88      	it	hi
 8000762:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000766:	d81e      	bhi.n	80007a6 <__aeabi_dmul+0xde>
 8000768:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800076c:	bf08      	it	eq
 800076e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000772:	f150 0000 	adcs.w	r0, r0, #0
 8000776:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000780:	ea46 0101 	orr.w	r1, r6, r1
 8000784:	ea40 0002 	orr.w	r0, r0, r2
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000790:	bfc2      	ittt	gt
 8000792:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000796:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800079a:	bd70      	popgt	{r4, r5, r6, pc}
 800079c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007a0:	f04f 0e00 	mov.w	lr, #0
 80007a4:	3c01      	subs	r4, #1
 80007a6:	f300 80ab 	bgt.w	8000900 <__aeabi_dmul+0x238>
 80007aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007ae:	bfde      	ittt	le
 80007b0:	2000      	movle	r0, #0
 80007b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007b6:	bd70      	pople	{r4, r5, r6, pc}
 80007b8:	f1c4 0400 	rsb	r4, r4, #0
 80007bc:	3c20      	subs	r4, #32
 80007be:	da35      	bge.n	800082c <__aeabi_dmul+0x164>
 80007c0:	340c      	adds	r4, #12
 80007c2:	dc1b      	bgt.n	80007fc <__aeabi_dmul+0x134>
 80007c4:	f104 0414 	add.w	r4, r4, #20
 80007c8:	f1c4 0520 	rsb	r5, r4, #32
 80007cc:	fa00 f305 	lsl.w	r3, r0, r5
 80007d0:	fa20 f004 	lsr.w	r0, r0, r4
 80007d4:	fa01 f205 	lsl.w	r2, r1, r5
 80007d8:	ea40 0002 	orr.w	r0, r0, r2
 80007dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007e8:	fa21 f604 	lsr.w	r6, r1, r4
 80007ec:	eb42 0106 	adc.w	r1, r2, r6
 80007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f1c4 040c 	rsb	r4, r4, #12
 8000800:	f1c4 0520 	rsb	r5, r4, #32
 8000804:	fa00 f304 	lsl.w	r3, r0, r4
 8000808:	fa20 f005 	lsr.w	r0, r0, r5
 800080c:	fa01 f204 	lsl.w	r2, r1, r4
 8000810:	ea40 0002 	orr.w	r0, r0, r2
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800081c:	f141 0100 	adc.w	r1, r1, #0
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 0520 	rsb	r5, r4, #32
 8000830:	fa00 f205 	lsl.w	r2, r0, r5
 8000834:	ea4e 0e02 	orr.w	lr, lr, r2
 8000838:	fa20 f304 	lsr.w	r3, r0, r4
 800083c:	fa01 f205 	lsl.w	r2, r1, r5
 8000840:	ea43 0302 	orr.w	r3, r3, r2
 8000844:	fa21 f004 	lsr.w	r0, r1, r4
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800084c:	fa21 f204 	lsr.w	r2, r1, r4
 8000850:	ea20 0002 	bic.w	r0, r0, r2
 8000854:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000858:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800085c:	bf08      	it	eq
 800085e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000862:	bd70      	pop	{r4, r5, r6, pc}
 8000864:	f094 0f00 	teq	r4, #0
 8000868:	d10f      	bne.n	800088a <__aeabi_dmul+0x1c2>
 800086a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800086e:	0040      	lsls	r0, r0, #1
 8000870:	eb41 0101 	adc.w	r1, r1, r1
 8000874:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000878:	bf08      	it	eq
 800087a:	3c01      	subeq	r4, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1a6>
 800087e:	ea41 0106 	orr.w	r1, r1, r6
 8000882:	f095 0f00 	teq	r5, #0
 8000886:	bf18      	it	ne
 8000888:	4770      	bxne	lr
 800088a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800088e:	0052      	lsls	r2, r2, #1
 8000890:	eb43 0303 	adc.w	r3, r3, r3
 8000894:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000898:	bf08      	it	eq
 800089a:	3d01      	subeq	r5, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1c6>
 800089e:	ea43 0306 	orr.w	r3, r3, r6
 80008a2:	4770      	bx	lr
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ac:	bf18      	it	ne
 80008ae:	ea95 0f0c 	teqne	r5, ip
 80008b2:	d00c      	beq.n	80008ce <__aeabi_dmul+0x206>
 80008b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b8:	bf18      	it	ne
 80008ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008be:	d1d1      	bne.n	8000864 <__aeabi_dmul+0x19c>
 80008c0:	ea81 0103 	eor.w	r1, r1, r3
 80008c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008c8:	f04f 0000 	mov.w	r0, #0
 80008cc:	bd70      	pop	{r4, r5, r6, pc}
 80008ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d2:	bf06      	itte	eq
 80008d4:	4610      	moveq	r0, r2
 80008d6:	4619      	moveq	r1, r3
 80008d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008dc:	d019      	beq.n	8000912 <__aeabi_dmul+0x24a>
 80008de:	ea94 0f0c 	teq	r4, ip
 80008e2:	d102      	bne.n	80008ea <__aeabi_dmul+0x222>
 80008e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008e8:	d113      	bne.n	8000912 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	d105      	bne.n	80008fc <__aeabi_dmul+0x234>
 80008f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008f4:	bf1c      	itt	ne
 80008f6:	4610      	movne	r0, r2
 80008f8:	4619      	movne	r1, r3
 80008fa:	d10a      	bne.n	8000912 <__aeabi_dmul+0x24a>
 80008fc:	ea81 0103 	eor.w	r1, r1, r3
 8000900:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000904:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000908:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800090c:	f04f 0000 	mov.w	r0, #0
 8000910:	bd70      	pop	{r4, r5, r6, pc}
 8000912:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000916:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800091a:	bd70      	pop	{r4, r5, r6, pc}

0800091c <__aeabi_ddiv>:
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000922:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000926:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800092a:	bf1d      	ittte	ne
 800092c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000930:	ea94 0f0c 	teqne	r4, ip
 8000934:	ea95 0f0c 	teqne	r5, ip
 8000938:	f000 f8a7 	bleq	8000a8a <__aeabi_ddiv+0x16e>
 800093c:	eba4 0405 	sub.w	r4, r4, r5
 8000940:	ea81 0e03 	eor.w	lr, r1, r3
 8000944:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000948:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800094c:	f000 8088 	beq.w	8000a60 <__aeabi_ddiv+0x144>
 8000950:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000954:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000958:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800095c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000960:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000964:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000968:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800096c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000970:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000974:	429d      	cmp	r5, r3
 8000976:	bf08      	it	eq
 8000978:	4296      	cmpeq	r6, r2
 800097a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800097e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000982:	d202      	bcs.n	800098a <__aeabi_ddiv+0x6e>
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	ea4f 0232 	mov.w	r2, r2, rrx
 800098a:	1ab6      	subs	r6, r6, r2
 800098c:	eb65 0503 	sbc.w	r5, r5, r3
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800099a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800099e:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a6:	bf22      	ittt	cs
 80009a8:	1ab6      	subcs	r6, r6, r2
 80009aa:	4675      	movcs	r5, lr
 80009ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009be:	bf22      	ittt	cs
 80009c0:	1ab6      	subcs	r6, r6, r2
 80009c2:	4675      	movcs	r5, lr
 80009c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009c8:	085b      	lsrs	r3, r3, #1
 80009ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009fc:	d018      	beq.n	8000a30 <__aeabi_ddiv+0x114>
 80009fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a02:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a06:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a0e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a16:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a1a:	d1c0      	bne.n	800099e <__aeabi_ddiv+0x82>
 8000a1c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a20:	d10b      	bne.n	8000a3a <__aeabi_ddiv+0x11e>
 8000a22:	ea41 0100 	orr.w	r1, r1, r0
 8000a26:	f04f 0000 	mov.w	r0, #0
 8000a2a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a2e:	e7b6      	b.n	800099e <__aeabi_ddiv+0x82>
 8000a30:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a34:	bf04      	itt	eq
 8000a36:	4301      	orreq	r1, r0
 8000a38:	2000      	moveq	r0, #0
 8000a3a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a3e:	bf88      	it	hi
 8000a40:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a44:	f63f aeaf 	bhi.w	80007a6 <__aeabi_dmul+0xde>
 8000a48:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a4c:	bf04      	itt	eq
 8000a4e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a56:	f150 0000 	adcs.w	r0, r0, #0
 8000a5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}
 8000a60:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a64:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a68:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a6c:	bfc2      	ittt	gt
 8000a6e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a76:	bd70      	popgt	{r4, r5, r6, pc}
 8000a78:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a7c:	f04f 0e00 	mov.w	lr, #0
 8000a80:	3c01      	subs	r4, #1
 8000a82:	e690      	b.n	80007a6 <__aeabi_dmul+0xde>
 8000a84:	ea45 0e06 	orr.w	lr, r5, r6
 8000a88:	e68d      	b.n	80007a6 <__aeabi_dmul+0xde>
 8000a8a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a8e:	ea94 0f0c 	teq	r4, ip
 8000a92:	bf08      	it	eq
 8000a94:	ea95 0f0c 	teqeq	r5, ip
 8000a98:	f43f af3b 	beq.w	8000912 <__aeabi_dmul+0x24a>
 8000a9c:	ea94 0f0c 	teq	r4, ip
 8000aa0:	d10a      	bne.n	8000ab8 <__aeabi_ddiv+0x19c>
 8000aa2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000aa6:	f47f af34 	bne.w	8000912 <__aeabi_dmul+0x24a>
 8000aaa:	ea95 0f0c 	teq	r5, ip
 8000aae:	f47f af25 	bne.w	80008fc <__aeabi_dmul+0x234>
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	e72c      	b.n	8000912 <__aeabi_dmul+0x24a>
 8000ab8:	ea95 0f0c 	teq	r5, ip
 8000abc:	d106      	bne.n	8000acc <__aeabi_ddiv+0x1b0>
 8000abe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ac2:	f43f aefd 	beq.w	80008c0 <__aeabi_dmul+0x1f8>
 8000ac6:	4610      	mov	r0, r2
 8000ac8:	4619      	mov	r1, r3
 8000aca:	e722      	b.n	8000912 <__aeabi_dmul+0x24a>
 8000acc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ad0:	bf18      	it	ne
 8000ad2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ad6:	f47f aec5 	bne.w	8000864 <__aeabi_dmul+0x19c>
 8000ada:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ade:	f47f af0d 	bne.w	80008fc <__aeabi_dmul+0x234>
 8000ae2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ae6:	f47f aeeb 	bne.w	80008c0 <__aeabi_dmul+0x1f8>
 8000aea:	e712      	b.n	8000912 <__aeabi_dmul+0x24a>

08000aec <__aeabi_d2f>:
 8000aec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af4:	bf24      	itt	cs
 8000af6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000afe:	d90d      	bls.n	8000b1c <__aeabi_d2f+0x30>
 8000b00:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b0c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b14:	bf08      	it	eq
 8000b16:	f020 0001 	biceq.w	r0, r0, #1
 8000b1a:	4770      	bx	lr
 8000b1c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b20:	d121      	bne.n	8000b66 <__aeabi_d2f+0x7a>
 8000b22:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b26:	bfbc      	itt	lt
 8000b28:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b2c:	4770      	bxlt	lr
 8000b2e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b36:	f1c2 0218 	rsb	r2, r2, #24
 8000b3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b42:	fa20 f002 	lsr.w	r0, r0, r2
 8000b46:	bf18      	it	ne
 8000b48:	f040 0001 	orrne.w	r0, r0, #1
 8000b4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b58:	ea40 000c 	orr.w	r0, r0, ip
 8000b5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b64:	e7cc      	b.n	8000b00 <__aeabi_d2f+0x14>
 8000b66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6a:	d107      	bne.n	8000b7c <__aeabi_d2f+0x90>
 8000b6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b70:	bf1e      	ittt	ne
 8000b72:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b76:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7a:	4770      	bxne	lr
 8000b7c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b80:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b84:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b96a 	b.w	8000e78 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9d08      	ldr	r5, [sp, #32]
 8000bc2:	460c      	mov	r4, r1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d14e      	bne.n	8000c66 <__udivmoddi4+0xaa>
 8000bc8:	4694      	mov	ip, r2
 8000bca:	458c      	cmp	ip, r1
 8000bcc:	4686      	mov	lr, r0
 8000bce:	fab2 f282 	clz	r2, r2
 8000bd2:	d962      	bls.n	8000c9a <__udivmoddi4+0xde>
 8000bd4:	b14a      	cbz	r2, 8000bea <__udivmoddi4+0x2e>
 8000bd6:	f1c2 0320 	rsb	r3, r2, #32
 8000bda:	4091      	lsls	r1, r2
 8000bdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000be0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be4:	4319      	orrs	r1, r3
 8000be6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bee:	fa1f f68c 	uxth.w	r6, ip
 8000bf2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bf6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bfa:	fb07 1114 	mls	r1, r7, r4, r1
 8000bfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c02:	fb04 f106 	mul.w	r1, r4, r6
 8000c06:	4299      	cmp	r1, r3
 8000c08:	d90a      	bls.n	8000c20 <__udivmoddi4+0x64>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c12:	f080 8112 	bcs.w	8000e3a <__udivmoddi4+0x27e>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 810f 	bls.w	8000e3a <__udivmoddi4+0x27e>
 8000c1c:	3c02      	subs	r4, #2
 8000c1e:	4463      	add	r3, ip
 8000c20:	1a59      	subs	r1, r3, r1
 8000c22:	fa1f f38e 	uxth.w	r3, lr
 8000c26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c32:	fb00 f606 	mul.w	r6, r0, r6
 8000c36:	429e      	cmp	r6, r3
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x94>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c42:	f080 80fc 	bcs.w	8000e3e <__udivmoddi4+0x282>
 8000c46:	429e      	cmp	r6, r3
 8000c48:	f240 80f9 	bls.w	8000e3e <__udivmoddi4+0x282>
 8000c4c:	4463      	add	r3, ip
 8000c4e:	3802      	subs	r0, #2
 8000c50:	1b9b      	subs	r3, r3, r6
 8000c52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c56:	2100      	movs	r1, #0
 8000c58:	b11d      	cbz	r5, 8000c62 <__udivmoddi4+0xa6>
 8000c5a:	40d3      	lsrs	r3, r2
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d905      	bls.n	8000c76 <__udivmoddi4+0xba>
 8000c6a:	b10d      	cbz	r5, 8000c70 <__udivmoddi4+0xb4>
 8000c6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c70:	2100      	movs	r1, #0
 8000c72:	4608      	mov	r0, r1
 8000c74:	e7f5      	b.n	8000c62 <__udivmoddi4+0xa6>
 8000c76:	fab3 f183 	clz	r1, r3
 8000c7a:	2900      	cmp	r1, #0
 8000c7c:	d146      	bne.n	8000d0c <__udivmoddi4+0x150>
 8000c7e:	42a3      	cmp	r3, r4
 8000c80:	d302      	bcc.n	8000c88 <__udivmoddi4+0xcc>
 8000c82:	4290      	cmp	r0, r2
 8000c84:	f0c0 80f0 	bcc.w	8000e68 <__udivmoddi4+0x2ac>
 8000c88:	1a86      	subs	r6, r0, r2
 8000c8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c8e:	2001      	movs	r0, #1
 8000c90:	2d00      	cmp	r5, #0
 8000c92:	d0e6      	beq.n	8000c62 <__udivmoddi4+0xa6>
 8000c94:	e9c5 6300 	strd	r6, r3, [r5]
 8000c98:	e7e3      	b.n	8000c62 <__udivmoddi4+0xa6>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	f040 8090 	bne.w	8000dc0 <__udivmoddi4+0x204>
 8000ca0:	eba1 040c 	sub.w	r4, r1, ip
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa1f f78c 	uxth.w	r7, ip
 8000cac:	2101      	movs	r1, #1
 8000cae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cbe:	fb07 f006 	mul.w	r0, r7, r6
 8000cc2:	4298      	cmp	r0, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x11c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x11a>
 8000cd0:	4298      	cmp	r0, r3
 8000cd2:	f200 80cd 	bhi.w	8000e70 <__udivmoddi4+0x2b4>
 8000cd6:	4626      	mov	r6, r4
 8000cd8:	1a1c      	subs	r4, r3, r0
 8000cda:	fa1f f38e 	uxth.w	r3, lr
 8000cde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ce2:	fb08 4410 	mls	r4, r8, r0, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb00 f707 	mul.w	r7, r0, r7
 8000cee:	429f      	cmp	r7, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x148>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x146>
 8000cfc:	429f      	cmp	r7, r3
 8000cfe:	f200 80b0 	bhi.w	8000e62 <__udivmoddi4+0x2a6>
 8000d02:	4620      	mov	r0, r4
 8000d04:	1bdb      	subs	r3, r3, r7
 8000d06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0a:	e7a5      	b.n	8000c58 <__udivmoddi4+0x9c>
 8000d0c:	f1c1 0620 	rsb	r6, r1, #32
 8000d10:	408b      	lsls	r3, r1
 8000d12:	fa22 f706 	lsr.w	r7, r2, r6
 8000d16:	431f      	orrs	r7, r3
 8000d18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d20:	ea43 030c 	orr.w	r3, r3, ip
 8000d24:	40f4      	lsrs	r4, r6
 8000d26:	fa00 f801 	lsl.w	r8, r0, r1
 8000d2a:	0c38      	lsrs	r0, r7, #16
 8000d2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d30:	fbb4 fef0 	udiv	lr, r4, r0
 8000d34:	fa1f fc87 	uxth.w	ip, r7
 8000d38:	fb00 441e 	mls	r4, r0, lr, r4
 8000d3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d40:	fb0e f90c 	mul.w	r9, lr, ip
 8000d44:	45a1      	cmp	r9, r4
 8000d46:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4a:	d90a      	bls.n	8000d62 <__udivmoddi4+0x1a6>
 8000d4c:	193c      	adds	r4, r7, r4
 8000d4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d52:	f080 8084 	bcs.w	8000e5e <__udivmoddi4+0x2a2>
 8000d56:	45a1      	cmp	r9, r4
 8000d58:	f240 8081 	bls.w	8000e5e <__udivmoddi4+0x2a2>
 8000d5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d60:	443c      	add	r4, r7
 8000d62:	eba4 0409 	sub.w	r4, r4, r9
 8000d66:	fa1f f983 	uxth.w	r9, r3
 8000d6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	d907      	bls.n	8000d8e <__udivmoddi4+0x1d2>
 8000d7e:	193c      	adds	r4, r7, r4
 8000d80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d84:	d267      	bcs.n	8000e56 <__udivmoddi4+0x29a>
 8000d86:	45a4      	cmp	ip, r4
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0x29a>
 8000d8a:	3b02      	subs	r3, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d92:	fba0 9302 	umull	r9, r3, r0, r2
 8000d96:	eba4 040c 	sub.w	r4, r4, ip
 8000d9a:	429c      	cmp	r4, r3
 8000d9c:	46ce      	mov	lr, r9
 8000d9e:	469c      	mov	ip, r3
 8000da0:	d351      	bcc.n	8000e46 <__udivmoddi4+0x28a>
 8000da2:	d04e      	beq.n	8000e42 <__udivmoddi4+0x286>
 8000da4:	b155      	cbz	r5, 8000dbc <__udivmoddi4+0x200>
 8000da6:	ebb8 030e 	subs.w	r3, r8, lr
 8000daa:	eb64 040c 	sbc.w	r4, r4, ip
 8000dae:	fa04 f606 	lsl.w	r6, r4, r6
 8000db2:	40cb      	lsrs	r3, r1
 8000db4:	431e      	orrs	r6, r3
 8000db6:	40cc      	lsrs	r4, r1
 8000db8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	e750      	b.n	8000c62 <__udivmoddi4+0xa6>
 8000dc0:	f1c2 0320 	rsb	r3, r2, #32
 8000dc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000dc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dcc:	fa24 f303 	lsr.w	r3, r4, r3
 8000dd0:	4094      	lsls	r4, r2
 8000dd2:	430c      	orrs	r4, r1
 8000dd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ddc:	fa1f f78c 	uxth.w	r7, ip
 8000de0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de4:	fb08 3110 	mls	r1, r8, r0, r3
 8000de8:	0c23      	lsrs	r3, r4, #16
 8000dea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dee:	fb00 f107 	mul.w	r1, r0, r7
 8000df2:	4299      	cmp	r1, r3
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x24c>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dfe:	d22c      	bcs.n	8000e5a <__udivmoddi4+0x29e>
 8000e00:	4299      	cmp	r1, r3
 8000e02:	d92a      	bls.n	8000e5a <__udivmoddi4+0x29e>
 8000e04:	3802      	subs	r0, #2
 8000e06:	4463      	add	r3, ip
 8000e08:	1a5b      	subs	r3, r3, r1
 8000e0a:	b2a4      	uxth	r4, r4
 8000e0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e10:	fb08 3311 	mls	r3, r8, r1, r3
 8000e14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e18:	fb01 f307 	mul.w	r3, r1, r7
 8000e1c:	42a3      	cmp	r3, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x276>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e28:	d213      	bcs.n	8000e52 <__udivmoddi4+0x296>
 8000e2a:	42a3      	cmp	r3, r4
 8000e2c:	d911      	bls.n	8000e52 <__udivmoddi4+0x296>
 8000e2e:	3902      	subs	r1, #2
 8000e30:	4464      	add	r4, ip
 8000e32:	1ae4      	subs	r4, r4, r3
 8000e34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e38:	e739      	b.n	8000cae <__udivmoddi4+0xf2>
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	e6f0      	b.n	8000c20 <__udivmoddi4+0x64>
 8000e3e:	4608      	mov	r0, r1
 8000e40:	e706      	b.n	8000c50 <__udivmoddi4+0x94>
 8000e42:	45c8      	cmp	r8, r9
 8000e44:	d2ae      	bcs.n	8000da4 <__udivmoddi4+0x1e8>
 8000e46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e4e:	3801      	subs	r0, #1
 8000e50:	e7a8      	b.n	8000da4 <__udivmoddi4+0x1e8>
 8000e52:	4631      	mov	r1, r6
 8000e54:	e7ed      	b.n	8000e32 <__udivmoddi4+0x276>
 8000e56:	4603      	mov	r3, r0
 8000e58:	e799      	b.n	8000d8e <__udivmoddi4+0x1d2>
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	e7d4      	b.n	8000e08 <__udivmoddi4+0x24c>
 8000e5e:	46d6      	mov	lr, sl
 8000e60:	e77f      	b.n	8000d62 <__udivmoddi4+0x1a6>
 8000e62:	4463      	add	r3, ip
 8000e64:	3802      	subs	r0, #2
 8000e66:	e74d      	b.n	8000d04 <__udivmoddi4+0x148>
 8000e68:	4606      	mov	r6, r0
 8000e6a:	4623      	mov	r3, r4
 8000e6c:	4608      	mov	r0, r1
 8000e6e:	e70f      	b.n	8000c90 <__udivmoddi4+0xd4>
 8000e70:	3e02      	subs	r6, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	e730      	b.n	8000cd8 <__udivmoddi4+0x11c>
 8000e76:	bf00      	nop

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4a07      	ldr	r2, [pc, #28]	@ (8000ea8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	4a06      	ldr	r2, [pc, #24]	@ (8000eac <vApplicationGetIdleTaskMemory+0x30>)
 8000e92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2280      	movs	r2, #128	@ 0x80
 8000e98:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e9a:	bf00      	nop
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	2000009c 	.word	0x2000009c
 8000eac:	200000f0 	.word	0x200000f0

08000eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb6:	f002 fbab 	bl	8003610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eba:	f000 f875 	bl	8000fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ebe:	f000 fa87 	bl	80013d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ec2:	f000 fa65 	bl	8001390 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ec6:	f000 fa39 	bl	800133c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000eca:	f000 f92b 	bl	8001124 <MX_I2C1_Init>
  MX_SPI3_Init();
 8000ece:	f000 f9b1 	bl	8001234 <MX_SPI3_Init>
  MX_RTC_Init();
 8000ed2:	f000 f955 	bl	8001180 <MX_RTC_Init>
  MX_ADC1_Init();
 8000ed6:	f000 f8d3 	bl	8001080 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000eda:	f000 f9e1 	bl	80012a0 <MX_TIM3_Init>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  keypad_sd_sync = xSemaphoreCreateBinary();
 8000ede:	2203      	movs	r2, #3
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f007 fa6a 	bl	80083bc <xQueueGenericCreate>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4a23      	ldr	r2, [pc, #140]	@ (8000f78 <main+0xc8>)
 8000eec:	6013      	str	r3, [r2, #0]
  sd_display_sync = xSemaphoreCreateBinary();
 8000eee:	2203      	movs	r2, #3
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f007 fa62 	bl	80083bc <xQueueGenericCreate>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4a20      	ldr	r2, [pc, #128]	@ (8000f7c <main+0xcc>)
 8000efc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  display_queue = xQueueCreate(1, sizeof(uint8_t));
 8000efe:	2200      	movs	r2, #0
 8000f00:	2101      	movs	r1, #1
 8000f02:	2001      	movs	r0, #1
 8000f04:	f007 fa5a 	bl	80083bc <xQueueGenericCreate>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a1d      	ldr	r2, [pc, #116]	@ (8000f80 <main+0xd0>)
 8000f0c:	6013      	str	r3, [r2, #0]
  sequence_queue = xQueueCreate(1, sizeof(char));
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2101      	movs	r1, #1
 8000f12:	2001      	movs	r0, #1
 8000f14:	f007 fa52 	bl	80083bc <xQueueGenericCreate>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a1a      	ldr	r2, [pc, #104]	@ (8000f84 <main+0xd4>)
 8000f1c:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(display_task, "Tarea display", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 4, NULL);
 8000f1e:	2300      	movs	r3, #0
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	2304      	movs	r3, #4
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2300      	movs	r3, #0
 8000f28:	2280      	movs	r2, #128	@ 0x80
 8000f2a:	4917      	ldr	r1, [pc, #92]	@ (8000f88 <main+0xd8>)
 8000f2c:	4817      	ldr	r0, [pc, #92]	@ (8000f8c <main+0xdc>)
 8000f2e:	f007 ff1b 	bl	8008d68 <xTaskCreate>
  //xTaskCreate(LockControl, "Tarea 04", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL);
  //xTaskCreate(VoiceProcessing, "Tarea 03", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
  xTaskCreate(sd_task, "Tarea SD", 10 * configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
 8000f32:	2300      	movs	r3, #0
 8000f34:	9301      	str	r3, [sp, #4]
 8000f36:	2302      	movs	r3, #2
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000f40:	4913      	ldr	r1, [pc, #76]	@ (8000f90 <main+0xe0>)
 8000f42:	4814      	ldr	r0, [pc, #80]	@ (8000f94 <main+0xe4>)
 8000f44:	f007 ff10 	bl	8008d68 <xTaskCreate>
  xTaskCreate(keypad_task, "Tarea keypad", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 8000f48:	2300      	movs	r3, #0
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2300      	movs	r3, #0
 8000f52:	2280      	movs	r2, #128	@ 0x80
 8000f54:	4910      	ldr	r1, [pc, #64]	@ (8000f98 <main+0xe8>)
 8000f56:	4811      	ldr	r0, [pc, #68]	@ (8000f9c <main+0xec>)
 8000f58:	f007 ff06 	bl	8008d68 <xTaskCreate>
  xTaskCreate(idle_task, "Tarea Idle", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	2300      	movs	r3, #0
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2300      	movs	r3, #0
 8000f66:	2280      	movs	r2, #128	@ 0x80
 8000f68:	490d      	ldr	r1, [pc, #52]	@ (8000fa0 <main+0xf0>)
 8000f6a:	480e      	ldr	r0, [pc, #56]	@ (8000fa4 <main+0xf4>)
 8000f6c:	f007 fefc 	bl	8008d68 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 8000f70:	f008 f868 	bl	8009044 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <main+0xc4>
 8000f78:	200004fc 	.word	0x200004fc
 8000f7c:	20000500 	.word	0x20000500
 8000f80:	200004f8 	.word	0x200004f8
 8000f84:	200004f4 	.word	0x200004f4
 8000f88:	08012084 	.word	0x08012084
 8000f8c:	0800305d 	.word	0x0800305d
 8000f90:	08012094 	.word	0x08012094
 8000f94:	080032b5 	.word	0x080032b5
 8000f98:	080120a0 	.word	0x080120a0
 8000f9c:	08003219 	.word	0x08003219
 8000fa0:	080120b0 	.word	0x080120b0
 8000fa4:	080014f5 	.word	0x080014f5

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b094      	sub	sp, #80	@ 0x50
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 0320 	add.w	r3, r7, #32
 8000fb2:	2230      	movs	r2, #48	@ 0x30
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f010 fbc2 	bl	8011740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	4b29      	ldr	r3, [pc, #164]	@ (8001078 <SystemClock_Config+0xd0>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd4:	4a28      	ldr	r2, [pc, #160]	@ (8001078 <SystemClock_Config+0xd0>)
 8000fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fda:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fdc:	4b26      	ldr	r3, [pc, #152]	@ (8001078 <SystemClock_Config+0xd0>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	4b23      	ldr	r3, [pc, #140]	@ (800107c <SystemClock_Config+0xd4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ff4:	4a21      	ldr	r2, [pc, #132]	@ (800107c <SystemClock_Config+0xd4>)
 8000ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800107c <SystemClock_Config+0xd4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001008:	2309      	movs	r3, #9
 800100a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800100c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001010:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001012:	2301      	movs	r3, #1
 8001014:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001016:	2302      	movs	r3, #2
 8001018:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800101a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800101e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001020:	2304      	movs	r3, #4
 8001022:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001024:	2340      	movs	r3, #64	@ 0x40
 8001026:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001028:	2302      	movs	r3, #2
 800102a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800102c:	2307      	movs	r3, #7
 800102e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001030:	f107 0320 	add.w	r3, r7, #32
 8001034:	4618      	mov	r0, r3
 8001036:	f004 fbdd 	bl	80057f4 <HAL_RCC_OscConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001040:	f000 fa85 	bl	800154e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001044:	230f      	movs	r3, #15
 8001046:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001048:	2302      	movs	r3, #2
 800104a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001050:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001054:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2102      	movs	r1, #2
 8001060:	4618      	mov	r0, r3
 8001062:	f004 fe3f 	bl	8005ce4 <HAL_RCC_ClockConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800106c:	f000 fa6f 	bl	800154e <Error_Handler>
  }
}
 8001070:	bf00      	nop
 8001072:	3750      	adds	r7, #80	@ 0x50
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40023800 	.word	0x40023800
 800107c:	40007000 	.word	0x40007000

08001080 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001086:	463b      	mov	r3, r7
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001092:	4b22      	ldr	r3, [pc, #136]	@ (800111c <MX_ADC1_Init+0x9c>)
 8001094:	4a22      	ldr	r2, [pc, #136]	@ (8001120 <MX_ADC1_Init+0xa0>)
 8001096:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001098:	4b20      	ldr	r3, [pc, #128]	@ (800111c <MX_ADC1_Init+0x9c>)
 800109a:	2200      	movs	r2, #0
 800109c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800109e:	4b1f      	ldr	r3, [pc, #124]	@ (800111c <MX_ADC1_Init+0x9c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010a4:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_ADC1_Init+0x9c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010aa:	4b1c      	ldr	r3, [pc, #112]	@ (800111c <MX_ADC1_Init+0x9c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b0:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <MX_ADC1_Init+0x9c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010b8:	4b18      	ldr	r3, [pc, #96]	@ (800111c <MX_ADC1_Init+0x9c>)
 80010ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80010c0:	4b16      	ldr	r3, [pc, #88]	@ (800111c <MX_ADC1_Init+0x9c>)
 80010c2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c8:	4b14      	ldr	r3, [pc, #80]	@ (800111c <MX_ADC1_Init+0x9c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010ce:	4b13      	ldr	r3, [pc, #76]	@ (800111c <MX_ADC1_Init+0x9c>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010d4:	4b11      	ldr	r3, [pc, #68]	@ (800111c <MX_ADC1_Init+0x9c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010dc:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <MX_ADC1_Init+0x9c>)
 80010de:	2201      	movs	r2, #1
 80010e0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e2:	480e      	ldr	r0, [pc, #56]	@ (800111c <MX_ADC1_Init+0x9c>)
 80010e4:	f002 fafa 	bl	80036dc <HAL_ADC_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80010ee:	f000 fa2e 	bl	800154e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80010fa:	2302      	movs	r3, #2
 80010fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fe:	463b      	mov	r3, r7
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <MX_ADC1_Init+0x9c>)
 8001104:	f002 fda6 	bl	8003c54 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800110e:	f000 fa1e 	bl	800154e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200002f0 	.word	0x200002f0
 8001120:	40012000 	.word	0x40012000

08001124 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001128:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <MX_I2C1_Init+0x50>)
 800112a:	4a13      	ldr	r2, [pc, #76]	@ (8001178 <MX_I2C1_Init+0x54>)
 800112c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800112e:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <MX_I2C1_Init+0x50>)
 8001130:	4a12      	ldr	r2, [pc, #72]	@ (800117c <MX_I2C1_Init+0x58>)
 8001132:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001134:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <MX_I2C1_Init+0x50>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800113a:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <MX_I2C1_Init+0x50>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001140:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <MX_I2C1_Init+0x50>)
 8001142:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001146:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001148:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <MX_I2C1_Init+0x50>)
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800114e:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <MX_I2C1_Init+0x50>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001154:	4b07      	ldr	r3, [pc, #28]	@ (8001174 <MX_I2C1_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800115a:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <MX_I2C1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001160:	4804      	ldr	r0, [pc, #16]	@ (8001174 <MX_I2C1_Init+0x50>)
 8001162:	f003 fe99 	bl	8004e98 <HAL_I2C_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800116c:	f000 f9ef 	bl	800154e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000398 	.word	0x20000398
 8001178:	40005400 	.word	0x40005400
 800117c:	00061a80 	.word	0x00061a80

08001180 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001194:	2300      	movs	r3, #0
 8001196:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001198:	4b24      	ldr	r3, [pc, #144]	@ (800122c <MX_RTC_Init+0xac>)
 800119a:	4a25      	ldr	r2, [pc, #148]	@ (8001230 <MX_RTC_Init+0xb0>)
 800119c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800119e:	4b23      	ldr	r3, [pc, #140]	@ (800122c <MX_RTC_Init+0xac>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011a4:	4b21      	ldr	r3, [pc, #132]	@ (800122c <MX_RTC_Init+0xac>)
 80011a6:	227f      	movs	r2, #127	@ 0x7f
 80011a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011aa:	4b20      	ldr	r3, [pc, #128]	@ (800122c <MX_RTC_Init+0xac>)
 80011ac:	22ff      	movs	r2, #255	@ 0xff
 80011ae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011b0:	4b1e      	ldr	r3, [pc, #120]	@ (800122c <MX_RTC_Init+0xac>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011b6:	4b1d      	ldr	r3, [pc, #116]	@ (800122c <MX_RTC_Init+0xac>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <MX_RTC_Init+0xac>)
 80011be:	2200      	movs	r2, #0
 80011c0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011c2:	481a      	ldr	r0, [pc, #104]	@ (800122c <MX_RTC_Init+0xac>)
 80011c4:	f005 f8ce 	bl	8006364 <HAL_RTC_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80011ce:	f000 f9be 	bl	800154e <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 15;
 80011d2:	230f      	movs	r3, #15
 80011d4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	2200      	movs	r2, #0
 80011ea:	4619      	mov	r1, r3
 80011ec:	480f      	ldr	r0, [pc, #60]	@ (800122c <MX_RTC_Init+0xac>)
 80011ee:	f005 f93c 	bl	800646a <HAL_RTC_SetTime>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80011f8:	f000 f9a9 	bl	800154e <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80011fc:	2306      	movs	r3, #6
 80011fe:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8001200:	2307      	movs	r3, #7
 8001202:	707b      	strb	r3, [r7, #1]
  sDate.Date = 6;
 8001204:	2306      	movs	r3, #6
 8001206:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 8001208:	2318      	movs	r3, #24
 800120a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800120c:	463b      	mov	r3, r7
 800120e:	2200      	movs	r2, #0
 8001210:	4619      	mov	r1, r3
 8001212:	4806      	ldr	r0, [pc, #24]	@ (800122c <MX_RTC_Init+0xac>)
 8001214:	f005 f9c3 	bl	800659e <HAL_RTC_SetDate>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800121e:	f000 f996 	bl	800154e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200003ec 	.word	0x200003ec
 8001230:	40002800 	.word	0x40002800

08001234 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001238:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <MX_SPI3_Init+0x64>)
 800123a:	4a18      	ldr	r2, [pc, #96]	@ (800129c <MX_SPI3_Init+0x68>)
 800123c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800123e:	4b16      	ldr	r3, [pc, #88]	@ (8001298 <MX_SPI3_Init+0x64>)
 8001240:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001244:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001246:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <MX_SPI3_Init+0x64>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800124c:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <MX_SPI3_Init+0x64>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001252:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <MX_SPI3_Init+0x64>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001258:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <MX_SPI3_Init+0x64>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800125e:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <MX_SPI3_Init+0x64>)
 8001260:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001264:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001266:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <MX_SPI3_Init+0x64>)
 8001268:	2210      	movs	r2, #16
 800126a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800126c:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <MX_SPI3_Init+0x64>)
 800126e:	2200      	movs	r2, #0
 8001270:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <MX_SPI3_Init+0x64>)
 8001274:	2200      	movs	r2, #0
 8001276:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001278:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <MX_SPI3_Init+0x64>)
 800127a:	2200      	movs	r2, #0
 800127c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <MX_SPI3_Init+0x64>)
 8001280:	220a      	movs	r2, #10
 8001282:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001284:	4804      	ldr	r0, [pc, #16]	@ (8001298 <MX_SPI3_Init+0x64>)
 8001286:	f005 faaf 	bl	80067e8 <HAL_SPI_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001290:	f000 f95d 	bl	800154e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	2000040c 	.word	0x2000040c
 800129c:	40003c00 	.word	0x40003c00

080012a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b4:	463b      	mov	r3, r7
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <MX_TIM3_Init+0x94>)
 80012be:	4a1e      	ldr	r2, [pc, #120]	@ (8001338 <MX_TIM3_Init+0x98>)
 80012c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001334 <MX_TIM3_Init+0x94>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <MX_TIM3_Init+0x94>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5334 - 1;
 80012ce:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <MX_TIM3_Init+0x94>)
 80012d0:	f241 42d5 	movw	r2, #5333	@ 0x14d5
 80012d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d6:	4b17      	ldr	r3, [pc, #92]	@ (8001334 <MX_TIM3_Init+0x94>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012dc:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <MX_TIM3_Init+0x94>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012e2:	4814      	ldr	r0, [pc, #80]	@ (8001334 <MX_TIM3_Init+0x94>)
 80012e4:	f005 fed8 	bl	8007098 <HAL_TIM_Base_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80012ee:	f000 f92e 	bl	800154e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	4619      	mov	r1, r3
 80012fe:	480d      	ldr	r0, [pc, #52]	@ (8001334 <MX_TIM3_Init+0x94>)
 8001300:	f006 f89b 	bl	800743a <HAL_TIM_ConfigClockSource>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800130a:	f000 f920 	bl	800154e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800130e:	2320      	movs	r3, #32
 8001310:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001316:	463b      	mov	r3, r7
 8001318:	4619      	mov	r1, r3
 800131a:	4806      	ldr	r0, [pc, #24]	@ (8001334 <MX_TIM3_Init+0x94>)
 800131c:	f006 faa2 	bl	8007864 <HAL_TIMEx_MasterConfigSynchronization>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001326:	f000 f912 	bl	800154e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000464 	.word	0x20000464
 8001338:	40000400 	.word	0x40000400

0800133c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 8001342:	4a12      	ldr	r2, [pc, #72]	@ (800138c <MX_USART2_UART_Init+0x50>)
 8001344:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001346:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 8001348:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800134c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800134e:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800135a:	4b0b      	ldr	r3, [pc, #44]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001360:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 8001362:	220c      	movs	r2, #12
 8001364:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001366:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001372:	4805      	ldr	r0, [pc, #20]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 8001374:	f006 faf8 	bl	8007968 <HAL_UART_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800137e:	f000 f8e6 	bl	800154e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200004ac 	.word	0x200004ac
 800138c:	40004400 	.word	0x40004400

08001390 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <MX_DMA_Init+0x3c>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	4a0b      	ldr	r2, [pc, #44]	@ (80013cc <MX_DMA_Init+0x3c>)
 80013a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a6:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <MX_DMA_Init+0x3c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2105      	movs	r1, #5
 80013b6:	2038      	movs	r0, #56	@ 0x38
 80013b8:	f002 ffae 	bl	8004318 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013bc:	2038      	movs	r0, #56	@ 0x38
 80013be:	f002 ffc7 	bl	8004350 <HAL_NVIC_EnableIRQ>

}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800

080013d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	@ 0x28
 80013d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	4b3f      	ldr	r3, [pc, #252]	@ (80014e8 <MX_GPIO_Init+0x118>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	4a3e      	ldr	r2, [pc, #248]	@ (80014e8 <MX_GPIO_Init+0x118>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f6:	4b3c      	ldr	r3, [pc, #240]	@ (80014e8 <MX_GPIO_Init+0x118>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b38      	ldr	r3, [pc, #224]	@ (80014e8 <MX_GPIO_Init+0x118>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	4a37      	ldr	r2, [pc, #220]	@ (80014e8 <MX_GPIO_Init+0x118>)
 800140c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001410:	6313      	str	r3, [r2, #48]	@ 0x30
 8001412:	4b35      	ldr	r3, [pc, #212]	@ (80014e8 <MX_GPIO_Init+0x118>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	4b31      	ldr	r3, [pc, #196]	@ (80014e8 <MX_GPIO_Init+0x118>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	4a30      	ldr	r2, [pc, #192]	@ (80014e8 <MX_GPIO_Init+0x118>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6313      	str	r3, [r2, #48]	@ 0x30
 800142e:	4b2e      	ldr	r3, [pc, #184]	@ (80014e8 <MX_GPIO_Init+0x118>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	4b2a      	ldr	r3, [pc, #168]	@ (80014e8 <MX_GPIO_Init+0x118>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	4a29      	ldr	r2, [pc, #164]	@ (80014e8 <MX_GPIO_Init+0x118>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	6313      	str	r3, [r2, #48]	@ 0x30
 800144a:	4b27      	ldr	r3, [pc, #156]	@ (80014e8 <MX_GPIO_Init+0x118>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|CS_SD_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	f248 0120 	movw	r1, #32800	@ 0x8020
 800145c:	4823      	ldr	r0, [pc, #140]	@ (80014ec <MX_GPIO_Init+0x11c>)
 800145e:	f003 fd01 	bl	8004e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001462:	2200      	movs	r2, #0
 8001464:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 8001468:	4821      	ldr	r0, [pc, #132]	@ (80014f0 <MX_GPIO_Init+0x120>)
 800146a:	f003 fcfb 	bl	8004e64 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800146e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001474:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	481a      	ldr	r0, [pc, #104]	@ (80014f0 <MX_GPIO_Init+0x120>)
 8001486:	f003 fb51 	bl	8004b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800148a:	230f      	movs	r3, #15
 800148c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001492:	2302      	movs	r3, #2
 8001494:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4814      	ldr	r0, [pc, #80]	@ (80014f0 <MX_GPIO_Init+0x120>)
 800149e:	f003 fb45 	bl	8004b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin CS_SD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|CS_SD_Pin;
 80014a2:	f248 0320 	movw	r3, #32800	@ 0x8020
 80014a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	480c      	ldr	r0, [pc, #48]	@ (80014ec <MX_GPIO_Init+0x11c>)
 80014bc:	f003 fb36 	bl	8004b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : Lock_Pin PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80014c0:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 80014c4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c6:	2301      	movs	r3, #1
 80014c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	4805      	ldr	r0, [pc, #20]	@ (80014f0 <MX_GPIO_Init+0x120>)
 80014da:	f003 fb27 	bl	8004b2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014de:	bf00      	nop
 80014e0:	3728      	adds	r7, #40	@ 0x28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020000 	.word	0x40020000
 80014f0:	40020800 	.word	0x40020800

080014f4 <idle_task>:

/* USER CODE BEGIN 4 */
void idle_task(void *pvParameters){
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	while(1);
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <idle_task+0x8>

08001500 <HAL_ADC_ConvCpltCallback>:
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim3);
 8001508:	4806      	ldr	r0, [pc, #24]	@ (8001524 <HAL_ADC_ConvCpltCallback+0x24>)
 800150a:	f005 fe77 	bl	80071fc <HAL_TIM_Base_Stop_IT>
	HAL_ADC_Stop_DMA(&hadc1);
 800150e:	4806      	ldr	r0, [pc, #24]	@ (8001528 <HAL_ADC_ConvCpltCallback+0x28>)
 8001510:	f002 fb28 	bl	8003b64 <HAL_ADC_Stop_DMA>
	conv_cplt_flag = true;
 8001514:	4b05      	ldr	r3, [pc, #20]	@ (800152c <HAL_ADC_ConvCpltCallback+0x2c>)
 8001516:	2201      	movs	r2, #1
 8001518:	701a      	strb	r2, [r3, #0]
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000464 	.word	0x20000464
 8001528:	200002f0 	.word	0x200002f0
 800152c:	20000504 	.word	0x20000504

08001530 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001540:	d101      	bne.n	8001546 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001542:	f002 f887 	bl	8003654 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001552:	b672      	cpsid	i
}
 8001554:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001556:	bf00      	nop
 8001558:	e7fd      	b.n	8001556 <Error_Handler+0x8>
	...

0800155c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <HAL_MspInit+0x54>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156a:	4a11      	ldr	r2, [pc, #68]	@ (80015b0 <HAL_MspInit+0x54>)
 800156c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001570:	6453      	str	r3, [r2, #68]	@ 0x44
 8001572:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <HAL_MspInit+0x54>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	603b      	str	r3, [r7, #0]
 8001582:	4b0b      	ldr	r3, [pc, #44]	@ (80015b0 <HAL_MspInit+0x54>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	4a0a      	ldr	r2, [pc, #40]	@ (80015b0 <HAL_MspInit+0x54>)
 8001588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800158c:	6413      	str	r3, [r2, #64]	@ 0x40
 800158e:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <HAL_MspInit+0x54>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	210f      	movs	r1, #15
 800159e:	f06f 0001 	mvn.w	r0, #1
 80015a2:	f002 feb9 	bl	8004318 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800

080015b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	@ 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a32      	ldr	r2, [pc, #200]	@ (800169c <HAL_ADC_MspInit+0xe8>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d15e      	bne.n	8001694 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	4b31      	ldr	r3, [pc, #196]	@ (80016a0 <HAL_ADC_MspInit+0xec>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015de:	4a30      	ldr	r2, [pc, #192]	@ (80016a0 <HAL_ADC_MspInit+0xec>)
 80015e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015e6:	4b2e      	ldr	r3, [pc, #184]	@ (80016a0 <HAL_ADC_MspInit+0xec>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b2a      	ldr	r3, [pc, #168]	@ (80016a0 <HAL_ADC_MspInit+0xec>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	4a29      	ldr	r2, [pc, #164]	@ (80016a0 <HAL_ADC_MspInit+0xec>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6313      	str	r3, [r2, #48]	@ 0x30
 8001602:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <HAL_ADC_MspInit+0xec>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800160e:	2301      	movs	r3, #1
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001612:	2303      	movs	r3, #3
 8001614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	4820      	ldr	r0, [pc, #128]	@ (80016a4 <HAL_ADC_MspInit+0xf0>)
 8001622:	f003 fa83 	bl	8004b2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001626:	4b20      	ldr	r3, [pc, #128]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 8001628:	4a20      	ldr	r2, [pc, #128]	@ (80016ac <HAL_ADC_MspInit+0xf8>)
 800162a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800162c:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 800162e:	2200      	movs	r2, #0
 8001630:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001632:	4b1d      	ldr	r3, [pc, #116]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001638:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800163e:	4b1a      	ldr	r3, [pc, #104]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 8001640:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001644:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001646:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 8001648:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800164c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800164e:	4b16      	ldr	r3, [pc, #88]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 8001650:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001654:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001656:	4b14      	ldr	r3, [pc, #80]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 8001658:	2200      	movs	r2, #0
 800165a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800165c:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 800165e:	2200      	movs	r2, #0
 8001660:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001662:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 8001664:	2200      	movs	r2, #0
 8001666:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001668:	480f      	ldr	r0, [pc, #60]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 800166a:	f002 fe7f 	bl	800436c <HAL_DMA_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001674:	f7ff ff6b 	bl	800154e <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a0b      	ldr	r2, [pc, #44]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 800167c:	639a      	str	r2, [r3, #56]	@ 0x38
 800167e:	4a0a      	ldr	r2, [pc, #40]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2105      	movs	r1, #5
 8001688:	2012      	movs	r0, #18
 800168a:	f002 fe45 	bl	8004318 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800168e:	2012      	movs	r0, #18
 8001690:	f002 fe5e 	bl	8004350 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	@ 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40012000 	.word	0x40012000
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020000 	.word	0x40020000
 80016a8:	20000338 	.word	0x20000338
 80016ac:	40026410 	.word	0x40026410

080016b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	@ 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a19      	ldr	r2, [pc, #100]	@ (8001734 <HAL_I2C_MspInit+0x84>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d12b      	bne.n	800172a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	4b18      	ldr	r3, [pc, #96]	@ (8001738 <HAL_I2C_MspInit+0x88>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	4a17      	ldr	r2, [pc, #92]	@ (8001738 <HAL_I2C_MspInit+0x88>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e2:	4b15      	ldr	r3, [pc, #84]	@ (8001738 <HAL_I2C_MspInit+0x88>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ee:	23c0      	movs	r3, #192	@ 0xc0
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f2:	2312      	movs	r3, #18
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016fe:	2304      	movs	r3, #4
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	480c      	ldr	r0, [pc, #48]	@ (800173c <HAL_I2C_MspInit+0x8c>)
 800170a:	f003 fa0f 	bl	8004b2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <HAL_I2C_MspInit+0x88>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001716:	4a08      	ldr	r2, [pc, #32]	@ (8001738 <HAL_I2C_MspInit+0x88>)
 8001718:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800171c:	6413      	str	r3, [r2, #64]	@ 0x40
 800171e:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <HAL_I2C_MspInit+0x88>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800172a:	bf00      	nop
 800172c:	3728      	adds	r7, #40	@ 0x28
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40005400 	.word	0x40005400
 8001738:	40023800 	.word	0x40023800
 800173c:	40020400 	.word	0x40020400

08001740 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0c      	ldr	r2, [pc, #48]	@ (8001790 <HAL_RTC_MspInit+0x50>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d111      	bne.n	8001786 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001762:	2302      	movs	r3, #2
 8001764:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001766:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800176a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	4618      	mov	r0, r3
 8001772:	f004 fd09 	bl	8006188 <HAL_RCCEx_PeriphCLKConfig>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800177c:	f7ff fee7 	bl	800154e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001780:	4b04      	ldr	r3, [pc, #16]	@ (8001794 <HAL_RTC_MspInit+0x54>)
 8001782:	2201      	movs	r2, #1
 8001784:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001786:	bf00      	nop
 8001788:	3720      	adds	r7, #32
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40002800 	.word	0x40002800
 8001794:	42470e3c 	.word	0x42470e3c

08001798 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	@ 0x28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a19      	ldr	r2, [pc, #100]	@ (800181c <HAL_SPI_MspInit+0x84>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d12c      	bne.n	8001814 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	4b18      	ldr	r3, [pc, #96]	@ (8001820 <HAL_SPI_MspInit+0x88>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	4a17      	ldr	r2, [pc, #92]	@ (8001820 <HAL_SPI_MspInit+0x88>)
 80017c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ca:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <HAL_SPI_MspInit+0x88>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <HAL_SPI_MspInit+0x88>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a10      	ldr	r2, [pc, #64]	@ (8001820 <HAL_SPI_MspInit+0x88>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001820 <HAL_SPI_MspInit+0x88>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80017f2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80017f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001800:	2303      	movs	r3, #3
 8001802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001804:	2306      	movs	r3, #6
 8001806:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	4619      	mov	r1, r3
 800180e:	4805      	ldr	r0, [pc, #20]	@ (8001824 <HAL_SPI_MspInit+0x8c>)
 8001810:	f003 f98c 	bl	8004b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001814:	bf00      	nop
 8001816:	3728      	adds	r7, #40	@ 0x28
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40003c00 	.word	0x40003c00
 8001820:	40023800 	.word	0x40023800
 8001824:	40020800 	.word	0x40020800

08001828 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0e      	ldr	r2, [pc, #56]	@ (8001870 <HAL_TIM_Base_MspInit+0x48>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d115      	bne.n	8001866 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b0d      	ldr	r3, [pc, #52]	@ (8001874 <HAL_TIM_Base_MspInit+0x4c>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	4a0c      	ldr	r2, [pc, #48]	@ (8001874 <HAL_TIM_Base_MspInit+0x4c>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	6413      	str	r3, [r2, #64]	@ 0x40
 800184a:	4b0a      	ldr	r3, [pc, #40]	@ (8001874 <HAL_TIM_Base_MspInit+0x4c>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2105      	movs	r1, #5
 800185a:	201d      	movs	r0, #29
 800185c:	f002 fd5c 	bl	8004318 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001860:	201d      	movs	r0, #29
 8001862:	f002 fd75 	bl	8004350 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40000400 	.word	0x40000400
 8001874:	40023800 	.word	0x40023800

08001878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	@ 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a19      	ldr	r2, [pc, #100]	@ (80018fc <HAL_UART_MspInit+0x84>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d12b      	bne.n	80018f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	4b18      	ldr	r3, [pc, #96]	@ (8001900 <HAL_UART_MspInit+0x88>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	4a17      	ldr	r2, [pc, #92]	@ (8001900 <HAL_UART_MspInit+0x88>)
 80018a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018aa:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <HAL_UART_MspInit+0x88>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <HAL_UART_MspInit+0x88>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	4a10      	ldr	r2, [pc, #64]	@ (8001900 <HAL_UART_MspInit+0x88>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <HAL_UART_MspInit+0x88>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018d2:	230c      	movs	r3, #12
 80018d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018e2:	2307      	movs	r3, #7
 80018e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	4805      	ldr	r0, [pc, #20]	@ (8001904 <HAL_UART_MspInit+0x8c>)
 80018ee:	f003 f91d 	bl	8004b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018f2:	bf00      	nop
 80018f4:	3728      	adds	r7, #40	@ 0x28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40004400 	.word	0x40004400
 8001900:	40023800 	.word	0x40023800
 8001904:	40020000 	.word	0x40020000

08001908 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08e      	sub	sp, #56	@ 0x38
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	4b34      	ldr	r3, [pc, #208]	@ (80019f0 <HAL_InitTick+0xe8>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001920:	4a33      	ldr	r2, [pc, #204]	@ (80019f0 <HAL_InitTick+0xe8>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6413      	str	r3, [r2, #64]	@ 0x40
 8001928:	4b31      	ldr	r3, [pc, #196]	@ (80019f0 <HAL_InitTick+0xe8>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001934:	f107 0210 	add.w	r2, r7, #16
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4611      	mov	r1, r2
 800193e:	4618      	mov	r0, r3
 8001940:	f004 fbf0 	bl	8006124 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800194a:	2b00      	cmp	r3, #0
 800194c:	d103      	bne.n	8001956 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800194e:	f004 fbc1 	bl	80060d4 <HAL_RCC_GetPCLK1Freq>
 8001952:	6378      	str	r0, [r7, #52]	@ 0x34
 8001954:	e004      	b.n	8001960 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001956:	f004 fbbd 	bl	80060d4 <HAL_RCC_GetPCLK1Freq>
 800195a:	4603      	mov	r3, r0
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001962:	4a24      	ldr	r2, [pc, #144]	@ (80019f4 <HAL_InitTick+0xec>)
 8001964:	fba2 2303 	umull	r2, r3, r2, r3
 8001968:	0c9b      	lsrs	r3, r3, #18
 800196a:	3b01      	subs	r3, #1
 800196c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800196e:	4b22      	ldr	r3, [pc, #136]	@ (80019f8 <HAL_InitTick+0xf0>)
 8001970:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001974:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001976:	4b20      	ldr	r3, [pc, #128]	@ (80019f8 <HAL_InitTick+0xf0>)
 8001978:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800197c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800197e:	4a1e      	ldr	r2, [pc, #120]	@ (80019f8 <HAL_InitTick+0xf0>)
 8001980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001982:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001984:	4b1c      	ldr	r3, [pc, #112]	@ (80019f8 <HAL_InitTick+0xf0>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198a:	4b1b      	ldr	r3, [pc, #108]	@ (80019f8 <HAL_InitTick+0xf0>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001990:	4b19      	ldr	r3, [pc, #100]	@ (80019f8 <HAL_InitTick+0xf0>)
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001996:	4818      	ldr	r0, [pc, #96]	@ (80019f8 <HAL_InitTick+0xf0>)
 8001998:	f005 fb7e 	bl	8007098 <HAL_TIM_Base_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80019a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d11b      	bne.n	80019e2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80019aa:	4813      	ldr	r0, [pc, #76]	@ (80019f8 <HAL_InitTick+0xf0>)
 80019ac:	f005 fbc4 	bl	8007138 <HAL_TIM_Base_Start_IT>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80019b6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d111      	bne.n	80019e2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019be:	201c      	movs	r0, #28
 80019c0:	f002 fcc6 	bl	8004350 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b0f      	cmp	r3, #15
 80019c8:	d808      	bhi.n	80019dc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80019ca:	2200      	movs	r2, #0
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	201c      	movs	r0, #28
 80019d0:	f002 fca2 	bl	8004318 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019d4:	4a09      	ldr	r2, [pc, #36]	@ (80019fc <HAL_InitTick+0xf4>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e002      	b.n	80019e2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80019e2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3738      	adds	r7, #56	@ 0x38
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800
 80019f4:	431bde83 	.word	0x431bde83
 80019f8:	20000508 	.word	0x20000508
 80019fc:	20000020 	.word	0x20000020

08001a00 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001a04:	4b0e      	ldr	r3, [pc, #56]	@ (8001a40 <SDTimer_Handler+0x40>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d006      	beq.n	8001a1c <SDTimer_Handler+0x1c>
    Timer1--;
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a40 <SDTimer_Handler+0x40>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	3b01      	subs	r3, #1
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <SDTimer_Handler+0x40>)
 8001a1a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001a1c:	4b09      	ldr	r3, [pc, #36]	@ (8001a44 <SDTimer_Handler+0x44>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d006      	beq.n	8001a34 <SDTimer_Handler+0x34>
    Timer2--;
 8001a26:	4b07      	ldr	r3, [pc, #28]	@ (8001a44 <SDTimer_Handler+0x44>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	4b04      	ldr	r3, [pc, #16]	@ (8001a44 <SDTimer_Handler+0x44>)
 8001a32:	701a      	strb	r2, [r3, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000551 	.word	0x20000551
 8001a44:	20000552 	.word	0x20000552

08001a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <NMI_Handler+0x4>

08001a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <HardFault_Handler+0x4>

08001a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <MemManage_Handler+0x4>

08001a60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <BusFault_Handler+0x4>

08001a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <UsageFault_Handler+0x4>

08001a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a84:	4802      	ldr	r0, [pc, #8]	@ (8001a90 <ADC_IRQHandler+0x10>)
 8001a86:	f001 fe6c 	bl	8003762 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200002f0 	.word	0x200002f0

08001a94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  FatFsCnt++;
 8001a98:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <TIM2_IRQHandler+0x30>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <TIM2_IRQHandler+0x30>)
 8001aa4:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10){
 8001aa6:	4b07      	ldr	r3, [pc, #28]	@ (8001ac4 <TIM2_IRQHandler+0x30>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b09      	cmp	r3, #9
 8001aae:	d904      	bls.n	8001aba <TIM2_IRQHandler+0x26>
	  FatFsCnt = 0;
 8001ab0:	4b04      	ldr	r3, [pc, #16]	@ (8001ac4 <TIM2_IRQHandler+0x30>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 8001ab6:	f7ff ffa3 	bl	8001a00 <SDTimer_Handler>
  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001aba:	4803      	ldr	r0, [pc, #12]	@ (8001ac8 <TIM2_IRQHandler+0x34>)
 8001abc:	f005 fbcd 	bl	800725a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000550 	.word	0x20000550
 8001ac8:	20000508 	.word	0x20000508

08001acc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ad0:	4802      	ldr	r0, [pc, #8]	@ (8001adc <TIM3_IRQHandler+0x10>)
 8001ad2:	f005 fbc2 	bl	800725a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000464 	.word	0x20000464

08001ae0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ae4:	4802      	ldr	r0, [pc, #8]	@ (8001af0 <DMA2_Stream0_IRQHandler+0x10>)
 8001ae6:	f002 fdb7 	bl	8004658 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000338 	.word	0x20000338

08001af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001afc:	4a14      	ldr	r2, [pc, #80]	@ (8001b50 <_sbrk+0x5c>)
 8001afe:	4b15      	ldr	r3, [pc, #84]	@ (8001b54 <_sbrk+0x60>)
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b08:	4b13      	ldr	r3, [pc, #76]	@ (8001b58 <_sbrk+0x64>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d102      	bne.n	8001b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b10:	4b11      	ldr	r3, [pc, #68]	@ (8001b58 <_sbrk+0x64>)
 8001b12:	4a12      	ldr	r2, [pc, #72]	@ (8001b5c <_sbrk+0x68>)
 8001b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b16:	4b10      	ldr	r3, [pc, #64]	@ (8001b58 <_sbrk+0x64>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d207      	bcs.n	8001b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b24:	f00f fe22 	bl	801176c <__errno>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	220c      	movs	r2, #12
 8001b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b32:	e009      	b.n	8001b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b34:	4b08      	ldr	r3, [pc, #32]	@ (8001b58 <_sbrk+0x64>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b3a:	4b07      	ldr	r3, [pc, #28]	@ (8001b58 <_sbrk+0x64>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	4a05      	ldr	r2, [pc, #20]	@ (8001b58 <_sbrk+0x64>)
 8001b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b46:	68fb      	ldr	r3, [r7, #12]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20018000 	.word	0x20018000
 8001b54:	00000400 	.word	0x00000400
 8001b58:	20000554 	.word	0x20000554
 8001b5c:	2000ec20 	.word	0x2000ec20

08001b60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b64:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <SystemInit+0x20>)
 8001b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b6a:	4a05      	ldr	r2, [pc, #20]	@ (8001b80 <SystemInit+0x20>)
 8001b6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8001b84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b88:	f7ff ffea 	bl	8001b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b8c:	480c      	ldr	r0, [pc, #48]	@ (8001bc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b8e:	490d      	ldr	r1, [pc, #52]	@ (8001bc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b90:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b94:	e002      	b.n	8001b9c <LoopCopyDataInit>

08001b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9a:	3304      	adds	r3, #4

08001b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba0:	d3f9      	bcc.n	8001b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ba4:	4c0a      	ldr	r4, [pc, #40]	@ (8001bd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba8:	e001      	b.n	8001bae <LoopFillZerobss>

08001baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bac:	3204      	adds	r2, #4

08001bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb0:	d3fb      	bcc.n	8001baa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001bb2:	f00f fde1 	bl	8011778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bb6:	f7ff f97b 	bl	8000eb0 <main>
  bx  lr    
 8001bba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bbc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001bc8:	08036ad8 	.word	0x08036ad8
  ldr r2, =_sbss
 8001bcc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001bd0:	2000ec20 	.word	0x2000ec20

08001bd4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bd4:	e7fe      	b.n	8001bd4 <DMA1_Stream0_IRQHandler>
	...

08001bd8 <capture_voice>:
#include "utils.h"

/*================[Public functions]=====================*/
void capture_voice(uint16_t *buffer, uint32_t size){
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Start_IT(&htim3);
 8001be2:	4806      	ldr	r0, [pc, #24]	@ (8001bfc <capture_voice+0x24>)
 8001be4:	f005 faa8 	bl	8007138 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, size);
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	4804      	ldr	r0, [pc, #16]	@ (8001c00 <capture_voice+0x28>)
 8001bee:	f001 fec9 	bl	8003984 <HAL_ADC_Start_DMA>
	return;
 8001bf2:	bf00      	nop
}
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000464 	.word	0x20000464
 8001c00:	200002f0 	.word	0x200002f0
 8001c04:	00000000 	.word	0x00000000

08001c08 <get_voltage>:

void get_voltage(uint16_t *in_buffer, float *out_buffer, uint32_t size){
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
	for(uint32_t i = 0; i < size; i++){
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	e029      	b.n	8001c6e <get_voltage+0x66>
		out_buffer[i] = VOLTAGE_REFERENCE * ((float)in_buffer[i]) / ADC_RESOLUTION;
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	4413      	add	r3, r2
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	ee07 3a90 	vmov	s15, r3
 8001c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c2c:	ee17 0a90 	vmov	r0, s15
 8001c30:	f7fe fcf2 	bl	8000618 <__aeabi_f2d>
 8001c34:	a313      	add	r3, pc, #76	@ (adr r3, 8001c84 <get_voltage+0x7c>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	f7fe fd45 	bl	80006c8 <__aeabi_dmul>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c80 <get_voltage+0x78>)
 8001c4c:	f7fe fe66 	bl	800091c <__aeabi_ddiv>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	18d4      	adds	r4, r2, r3
 8001c60:	f7fe ff44 	bl	8000aec <__aeabi_d2f>
 8001c64:	4603      	mov	r3, r0
 8001c66:	6023      	str	r3, [r4, #0]
	for(uint32_t i = 0; i < size; i++){
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d3d1      	bcc.n	8001c1a <get_voltage+0x12>
	}
}
 8001c76:	bf00      	nop
 8001c78:	bf00      	nop
 8001c7a:	371c      	adds	r7, #28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd90      	pop	{r4, r7, pc}
 8001c80:	40b00000 	.word	0x40b00000
 8001c84:	66666666 	.word	0x66666666
 8001c88:	400a6666 	.word	0x400a6666

08001c8c <display_init>:

//#define LINE_HEIGHT 18  // Altura de la fuente (ajustar según la fuente usada)
//#define DISPLAY_WIDTH 128
//#define DISPLAY_HEIGHT 64
/*================[Public functions]=====================*/
void display_init(void){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
	/*Wrapper de la función que inicializa el display*/
	ssd1306_Init();
 8001c90:	f000 fbec 	bl	800246c <ssd1306_Init>
	return;
 8001c94:	bf00      	nop
}
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <display_start_msg>:
//    }
//
//    ssd1306_UpdateScreen();  // Actualizar pantalla
//}

void display_start_msg(void){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af02      	add	r7, sp, #8
	/*Muestra mensaje de insertar clave*/
	uint8_t x = 5;
 8001c9e:	2305      	movs	r3, #5
 8001ca0:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f000 fc4a 	bl	8002540 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001cac:	79ba      	ldrb	r2, [r7, #6]
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 fd8e 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("Ingrese", Font_16x26, White);
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf8 <display_start_msg+0x60>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	9200      	str	r2, [sp, #0]
 8001cbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc0:	480e      	ldr	r0, [pc, #56]	@ (8001cfc <display_start_msg+0x64>)
 8001cc2:	f000 fd61 	bl	8002788 <ssd1306_WriteString>
	x += 15;
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	330f      	adds	r3, #15
 8001cca:	71fb      	strb	r3, [r7, #7]
	y += 26;
 8001ccc:	79bb      	ldrb	r3, [r7, #6]
 8001cce:	331a      	adds	r3, #26
 8001cd0:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8001cd2:	79ba      	ldrb	r2, [r7, #6]
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 fd7b 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("clave", Font_16x26, White);
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <display_start_msg+0x60>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	9200      	str	r2, [sp, #0]
 8001ce4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ce6:	4806      	ldr	r0, [pc, #24]	@ (8001d00 <display_start_msg+0x68>)
 8001ce8:	f000 fd4e 	bl	8002788 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001cec:	f000 fc40 	bl	8002570 <ssd1306_UpdateScreen>
	return;
 8001cf0:	bf00      	nop
}
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	080143ac 	.word	0x080143ac
 8001cfc:	080120bc 	.word	0x080120bc
 8001d00:	080120c4 	.word	0x080120c4

08001d04 <display_sequence_entry_msg>:

void display_sequence_entry_msg(uint8_t input_cont){
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
	/*Maneja el ingreso de digitos en el display*/
	char message[MAX_DIGITS + 1] = {0};
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	f107 0310 	add.w	r3, r7, #16
 8001d16:	2100      	movs	r1, #0
 8001d18:	460a      	mov	r2, r1
 8001d1a:	801a      	strh	r2, [r3, #0]
 8001d1c:	460a      	mov	r2, r1
 8001d1e:	709a      	strb	r2, [r3, #2]
	uint8_t x = 10;														//x e y definen coordenadas en pantalla
 8001d20:	230a      	movs	r3, #10
 8001d22:	75bb      	strb	r3, [r7, #22]
	uint8_t y = 26;
 8001d24:	231a      	movs	r3, #26
 8001d26:	757b      	strb	r3, [r7, #21]
	//Chequeo que counter no supere el numero maximo de digitos
	if(input_cont <= MAX_DIGITS){
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d823      	bhi.n	8001d76 <display_sequence_entry_msg+0x72>
		//Armo el string a mostrar en el display
		for(uint8_t i = 0; i < input_cont; i++){
 8001d2e:	2300      	movs	r3, #0
 8001d30:	75fb      	strb	r3, [r7, #23]
 8001d32:	e008      	b.n	8001d46 <display_sequence_entry_msg+0x42>
			message[i] = '*';
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
 8001d36:	3318      	adds	r3, #24
 8001d38:	443b      	add	r3, r7
 8001d3a:	222a      	movs	r2, #42	@ 0x2a
 8001d3c:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t i = 0; i < input_cont; i++){
 8001d40:	7dfb      	ldrb	r3, [r7, #23]
 8001d42:	3301      	adds	r3, #1
 8001d44:	75fb      	strb	r3, [r7, #23]
 8001d46:	7dfa      	ldrb	r2, [r7, #23]
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d3f2      	bcc.n	8001d34 <display_sequence_entry_msg+0x30>
		}
		//Muestro el string
		ssd1306_Fill(Black);
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f000 fbf6 	bl	8002540 <ssd1306_Fill>
		ssd1306_SetCursor(x, y);
 8001d54:	7d7a      	ldrb	r2, [r7, #21]
 8001d56:	7dbb      	ldrb	r3, [r7, #22]
 8001d58:	4611      	mov	r1, r2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 fd3a 	bl	80027d4 <ssd1306_SetCursor>
		ssd1306_WriteString(message, Font_16x26, White);
 8001d60:	4b07      	ldr	r3, [pc, #28]	@ (8001d80 <display_sequence_entry_msg+0x7c>)
 8001d62:	f107 000c 	add.w	r0, r7, #12
 8001d66:	2201      	movs	r2, #1
 8001d68:	9200      	str	r2, [sp, #0]
 8001d6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d6c:	f000 fd0c 	bl	8002788 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001d70:	f000 fbfe 	bl	8002570 <ssd1306_UpdateScreen>
	}
	return;
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
}
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	080143ac 	.word	0x080143ac

08001d84 <display_timeout_msg>:


void display_timeout_msg(void){
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af02      	add	r7, sp, #8
	/*Muestra mensaje de timeout en display*/
	uint8_t x = 5;
 8001d8a:	2305      	movs	r3, #5
 8001d8c:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 18;
 8001d8e:	2312      	movs	r3, #18
 8001d90:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8001d92:	2000      	movs	r0, #0
 8001d94:	f000 fbd4 	bl	8002540 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001d98:	79ba      	ldrb	r2, [r7, #6]
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 fd18 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("Timeout!!!", Font_11x18, White);
 8001da4:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <display_timeout_msg+0x3c>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	9200      	str	r2, [sp, #0]
 8001daa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dac:	4805      	ldr	r0, [pc, #20]	@ (8001dc4 <display_timeout_msg+0x40>)
 8001dae:	f000 fceb 	bl	8002788 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001db2:	f000 fbdd 	bl	8002570 <ssd1306_UpdateScreen>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	080143a0 	.word	0x080143a0
 8001dc4:	080120cc 	.word	0x080120cc

08001dc8 <display_incomplete_entry_msg>:

void display_incomplete_entry_msg(void){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af02      	add	r7, sp, #8
	/*Muestra mensaje de secuencia incompleta en display*/
	uint8_t x = 20;
 8001dce:	2314      	movs	r3, #20
 8001dd0:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f000 fbb2 	bl	8002540 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001ddc:	79ba      	ldrb	r2, [r7, #6]
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	4611      	mov	r1, r2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 fcf6 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("Ingrese", Font_11x18, White);
 8001de8:	4b18      	ldr	r3, [pc, #96]	@ (8001e4c <display_incomplete_entry_msg+0x84>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	9200      	str	r2, [sp, #0]
 8001dee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001df0:	4817      	ldr	r0, [pc, #92]	@ (8001e50 <display_incomplete_entry_msg+0x88>)
 8001df2:	f000 fcc9 	bl	8002788 <ssd1306_WriteString>
	x = 10;
 8001df6:	230a      	movs	r3, #10
 8001df8:	71fb      	strb	r3, [r7, #7]
	y += 18;
 8001dfa:	79bb      	ldrb	r3, [r7, #6]
 8001dfc:	3312      	adds	r3, #18
 8001dfe:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8001e00:	79ba      	ldrb	r2, [r7, #6]
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	4611      	mov	r1, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 fce4 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("secuencia", Font_11x18, White);
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e4c <display_incomplete_entry_msg+0x84>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	9200      	str	r2, [sp, #0]
 8001e12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e14:	480f      	ldr	r0, [pc, #60]	@ (8001e54 <display_incomplete_entry_msg+0x8c>)
 8001e16:	f000 fcb7 	bl	8002788 <ssd1306_WriteString>
	x = 20;
 8001e1a:	2314      	movs	r3, #20
 8001e1c:	71fb      	strb	r3, [r7, #7]
	y += 18;
 8001e1e:	79bb      	ldrb	r3, [r7, #6]
 8001e20:	3312      	adds	r3, #18
 8001e22:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8001e24:	79ba      	ldrb	r2, [r7, #6]
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	4611      	mov	r1, r2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 fcd2 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("valida", Font_11x18, White);
 8001e30:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <display_incomplete_entry_msg+0x84>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	9200      	str	r2, [sp, #0]
 8001e36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e38:	4807      	ldr	r0, [pc, #28]	@ (8001e58 <display_incomplete_entry_msg+0x90>)
 8001e3a:	f000 fca5 	bl	8002788 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001e3e:	f000 fb97 	bl	8002570 <ssd1306_UpdateScreen>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	080143a0 	.word	0x080143a0
 8001e50:	080120bc 	.word	0x080120bc
 8001e54:	080120d8 	.word	0x080120d8
 8001e58:	080120e4 	.word	0x080120e4

08001e5c <display_access_granted_msg>:

void display_access_granted_msg(void){
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af02      	add	r7, sp, #8
	/*Muestra mensaje de acceso concedido*/
	uint8_t x = 5;
 8001e62:	2305      	movs	r3, #5
 8001e64:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f000 fb68 	bl	8002540 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001e70:	79ba      	ldrb	r2, [r7, #6]
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	4611      	mov	r1, r2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 fcac 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("Acceso", Font_11x18, White);
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb8 <display_access_granted_msg+0x5c>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	9200      	str	r2, [sp, #0]
 8001e82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e84:	480d      	ldr	r0, [pc, #52]	@ (8001ebc <display_access_granted_msg+0x60>)
 8001e86:	f000 fc7f 	bl	8002788 <ssd1306_WriteString>
	y += 18;
 8001e8a:	79bb      	ldrb	r3, [r7, #6]
 8001e8c:	3312      	adds	r3, #18
 8001e8e:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8001e90:	79ba      	ldrb	r2, [r7, #6]
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 fc9c 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("concedido", Font_11x18, White);
 8001e9c:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <display_access_granted_msg+0x5c>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	9200      	str	r2, [sp, #0]
 8001ea2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ea4:	4806      	ldr	r0, [pc, #24]	@ (8001ec0 <display_access_granted_msg+0x64>)
 8001ea6:	f000 fc6f 	bl	8002788 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001eaa:	f000 fb61 	bl	8002570 <ssd1306_UpdateScreen>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	080143a0 	.word	0x080143a0
 8001ebc:	080120ec 	.word	0x080120ec
 8001ec0:	080120f4 	.word	0x080120f4

08001ec4 <display_user_found_msg>:

void display_user_found_msg(void){
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af02      	add	r7, sp, #8
	/*Muestra mensaje de usuario encontrado*/
	uint8_t x = 20;
 8001eca:	2314      	movs	r3, #20
 8001ecc:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f000 fb34 	bl	8002540 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001ed8:	79ba      	ldrb	r2, [r7, #6]
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	4611      	mov	r1, r2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 fc78 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("Usuario", Font_11x18, White);
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f24 <display_user_found_msg+0x60>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	9200      	str	r2, [sp, #0]
 8001eea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eec:	480e      	ldr	r0, [pc, #56]	@ (8001f28 <display_user_found_msg+0x64>)
 8001eee:	f000 fc4b 	bl	8002788 <ssd1306_WriteString>
	x = 20;
 8001ef2:	2314      	movs	r3, #20
 8001ef4:	71fb      	strb	r3, [r7, #7]
	y += 18;
 8001ef6:	79bb      	ldrb	r3, [r7, #6]
 8001ef8:	3312      	adds	r3, #18
 8001efa:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8001efc:	79ba      	ldrb	r2, [r7, #6]
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	4611      	mov	r1, r2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fc66 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("hallado", Font_11x18, White);
 8001f08:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <display_user_found_msg+0x60>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	9200      	str	r2, [sp, #0]
 8001f0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f10:	4806      	ldr	r0, [pc, #24]	@ (8001f2c <display_user_found_msg+0x68>)
 8001f12:	f000 fc39 	bl	8002788 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001f16:	f000 fb2b 	bl	8002570 <ssd1306_UpdateScreen>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	080143a0 	.word	0x080143a0
 8001f28:	08012100 	.word	0x08012100
 8001f2c:	08012108 	.word	0x08012108

08001f30 <display_user_not_found_msg>:

void display_user_not_found_msg(void){
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af02      	add	r7, sp, #8
	/*Muestra mensaje de usuario no encontrado*/
	uint8_t x = 20;
 8001f36:	2314      	movs	r3, #20
 8001f38:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f000 fafe 	bl	8002540 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001f44:	79ba      	ldrb	r2, [r7, #6]
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	4611      	mov	r1, r2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 fc42 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("Usuario", Font_11x18, White);
 8001f50:	4b18      	ldr	r3, [pc, #96]	@ (8001fb4 <display_user_not_found_msg+0x84>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	9200      	str	r2, [sp, #0]
 8001f56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f58:	4817      	ldr	r0, [pc, #92]	@ (8001fb8 <display_user_not_found_msg+0x88>)
 8001f5a:	f000 fc15 	bl	8002788 <ssd1306_WriteString>
	x = 20;
 8001f5e:	2314      	movs	r3, #20
 8001f60:	71fb      	strb	r3, [r7, #7]
	y += 18;
 8001f62:	79bb      	ldrb	r3, [r7, #6]
 8001f64:	3312      	adds	r3, #18
 8001f66:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8001f68:	79ba      	ldrb	r2, [r7, #6]
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 fc30 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("no", Font_11x18, White);
 8001f74:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb4 <display_user_not_found_msg+0x84>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	9200      	str	r2, [sp, #0]
 8001f7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f7c:	480f      	ldr	r0, [pc, #60]	@ (8001fbc <display_user_not_found_msg+0x8c>)
 8001f7e:	f000 fc03 	bl	8002788 <ssd1306_WriteString>
	x = 20;
 8001f82:	2314      	movs	r3, #20
 8001f84:	71fb      	strb	r3, [r7, #7]
	y += 18;
 8001f86:	79bb      	ldrb	r3, [r7, #6]
 8001f88:	3312      	adds	r3, #18
 8001f8a:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8001f8c:	79ba      	ldrb	r2, [r7, #6]
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	4611      	mov	r1, r2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 fc1e 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("existente", Font_11x18, White);
 8001f98:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <display_user_not_found_msg+0x84>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	9200      	str	r2, [sp, #0]
 8001f9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fa0:	4807      	ldr	r0, [pc, #28]	@ (8001fc0 <display_user_not_found_msg+0x90>)
 8001fa2:	f000 fbf1 	bl	8002788 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001fa6:	f000 fae3 	bl	8002570 <ssd1306_UpdateScreen>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	080143a0 	.word	0x080143a0
 8001fb8:	08012100 	.word	0x08012100
 8001fbc:	08012110 	.word	0x08012110
 8001fc0:	08012114 	.word	0x08012114

08001fc4 <display_start_voice_recognition_msg>:

void display_start_voice_recognition_msg(void){
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af02      	add	r7, sp, #8
	/*Muestra mensaje que indica el inicio de reconocimiento de voz*/
	uint8_t x = 20;
 8001fca:	2314      	movs	r3, #20
 8001fcc:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f000 fab4 	bl	8002540 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001fd8:	79ba      	ldrb	r2, [r7, #6]
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	4611      	mov	r1, r2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 fbf8 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("Comienza", Font_11x18, White);
 8001fe4:	4b18      	ldr	r3, [pc, #96]	@ (8002048 <display_start_voice_recognition_msg+0x84>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	9200      	str	r2, [sp, #0]
 8001fea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fec:	4817      	ldr	r0, [pc, #92]	@ (800204c <display_start_voice_recognition_msg+0x88>)
 8001fee:	f000 fbcb 	bl	8002788 <ssd1306_WriteString>
	x = 20;
 8001ff2:	2314      	movs	r3, #20
 8001ff4:	71fb      	strb	r3, [r7, #7]
	y += 18;
 8001ff6:	79bb      	ldrb	r3, [r7, #6]
 8001ff8:	3312      	adds	r3, #18
 8001ffa:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8001ffc:	79ba      	ldrb	r2, [r7, #6]
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f000 fbe6 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("captura ", Font_11x18, White);
 8002008:	4b0f      	ldr	r3, [pc, #60]	@ (8002048 <display_start_voice_recognition_msg+0x84>)
 800200a:	2201      	movs	r2, #1
 800200c:	9200      	str	r2, [sp, #0]
 800200e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002010:	480f      	ldr	r0, [pc, #60]	@ (8002050 <display_start_voice_recognition_msg+0x8c>)
 8002012:	f000 fbb9 	bl	8002788 <ssd1306_WriteString>
	x = 20;
 8002016:	2314      	movs	r3, #20
 8002018:	71fb      	strb	r3, [r7, #7]
	y += 18;
 800201a:	79bb      	ldrb	r3, [r7, #6]
 800201c:	3312      	adds	r3, #18
 800201e:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8002020:	79ba      	ldrb	r2, [r7, #6]
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f000 fbd4 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("de voz", Font_11x18, White);
 800202c:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <display_start_voice_recognition_msg+0x84>)
 800202e:	2201      	movs	r2, #1
 8002030:	9200      	str	r2, [sp, #0]
 8002032:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002034:	4807      	ldr	r0, [pc, #28]	@ (8002054 <display_start_voice_recognition_msg+0x90>)
 8002036:	f000 fba7 	bl	8002788 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800203a:	f000 fa99 	bl	8002570 <ssd1306_UpdateScreen>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	080143a0 	.word	0x080143a0
 800204c:	08012120 	.word	0x08012120
 8002050:	0801212c 	.word	0x0801212c
 8002054:	08012138 	.word	0x08012138

08002058 <countdown_msg>:

void countdown_msg(void){
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af02      	add	r7, sp, #8
	/*Muestra mensaje de cuenta regresiva en pantalla*/
	uint8_t x = 50;
 800205e:	2332      	movs	r3, #50	@ 0x32
 8002060:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 26;
 8002062:	231a      	movs	r3, #26
 8002064:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8002066:	2000      	movs	r0, #0
 8002068:	f000 fa6a 	bl	8002540 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 800206c:	79ba      	ldrb	r2, [r7, #6]
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	4611      	mov	r1, r2
 8002072:	4618      	mov	r0, r3
 8002074:	f000 fbae 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("3", Font_16x26, White);
 8002078:	4b1e      	ldr	r3, [pc, #120]	@ (80020f4 <countdown_msg+0x9c>)
 800207a:	2201      	movs	r2, #1
 800207c:	9200      	str	r2, [sp, #0]
 800207e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002080:	481d      	ldr	r0, [pc, #116]	@ (80020f8 <countdown_msg+0xa0>)
 8002082:	f000 fb81 	bl	8002788 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002086:	f000 fa73 	bl	8002570 <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 800208a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800208e:	f006 ffa3 	bl	8008fd8 <vTaskDelay>
	ssd1306_Fill(Black);
 8002092:	2000      	movs	r0, #0
 8002094:	f000 fa54 	bl	8002540 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8002098:	79ba      	ldrb	r2, [r7, #6]
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	4611      	mov	r1, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 fb98 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("2", Font_16x26, White);
 80020a4:	4b13      	ldr	r3, [pc, #76]	@ (80020f4 <countdown_msg+0x9c>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	9200      	str	r2, [sp, #0]
 80020aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ac:	4813      	ldr	r0, [pc, #76]	@ (80020fc <countdown_msg+0xa4>)
 80020ae:	f000 fb6b 	bl	8002788 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80020b2:	f000 fa5d 	bl	8002570 <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 80020b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020ba:	f006 ff8d 	bl	8008fd8 <vTaskDelay>
	ssd1306_Fill(Black);
 80020be:	2000      	movs	r0, #0
 80020c0:	f000 fa3e 	bl	8002540 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80020c4:	79ba      	ldrb	r2, [r7, #6]
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 fb82 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("1", Font_16x26, White);
 80020d0:	4b08      	ldr	r3, [pc, #32]	@ (80020f4 <countdown_msg+0x9c>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	9200      	str	r2, [sp, #0]
 80020d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020d8:	4809      	ldr	r0, [pc, #36]	@ (8002100 <countdown_msg+0xa8>)
 80020da:	f000 fb55 	bl	8002788 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80020de:	f000 fa47 	bl	8002570 <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 80020e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020e6:	f006 ff77 	bl	8008fd8 <vTaskDelay>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	080143ac 	.word	0x080143ac
 80020f8:	08012140 	.word	0x08012140
 80020fc:	08012144 	.word	0x08012144
 8002100:	08012148 	.word	0x08012148

08002104 <display_capturing_voice_msg>:

void display_capturing_voice_msg(void){
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af02      	add	r7, sp, #8
	/*Muestra mensaje que indica que se esta capturando voz*/
	uint8_t x = 10;
 800210a:	230a      	movs	r3, #10
 800210c:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8002112:	2000      	movs	r0, #0
 8002114:	f000 fa14 	bl	8002540 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8002118:	79ba      	ldrb	r2, [r7, #6]
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	4611      	mov	r1, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f000 fb58 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("Capturando", Font_11x18, White);
 8002124:	4b0f      	ldr	r3, [pc, #60]	@ (8002164 <display_capturing_voice_msg+0x60>)
 8002126:	2201      	movs	r2, #1
 8002128:	9200      	str	r2, [sp, #0]
 800212a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800212c:	480e      	ldr	r0, [pc, #56]	@ (8002168 <display_capturing_voice_msg+0x64>)
 800212e:	f000 fb2b 	bl	8002788 <ssd1306_WriteString>
	x = 50;
 8002132:	2332      	movs	r3, #50	@ 0x32
 8002134:	71fb      	strb	r3, [r7, #7]
	y += 18;
 8002136:	79bb      	ldrb	r3, [r7, #6]
 8002138:	3312      	adds	r3, #18
 800213a:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 800213c:	79ba      	ldrb	r2, [r7, #6]
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	4611      	mov	r1, r2
 8002142:	4618      	mov	r0, r3
 8002144:	f000 fb46 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("...", Font_11x18, White);
 8002148:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <display_capturing_voice_msg+0x60>)
 800214a:	2201      	movs	r2, #1
 800214c:	9200      	str	r2, [sp, #0]
 800214e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002150:	4806      	ldr	r0, [pc, #24]	@ (800216c <display_capturing_voice_msg+0x68>)
 8002152:	f000 fb19 	bl	8002788 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002156:	f000 fa0b 	bl	8002570 <ssd1306_UpdateScreen>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	080143a0 	.word	0x080143a0
 8002168:	0801214c 	.word	0x0801214c
 800216c:	08012158 	.word	0x08012158

08002170 <display_recognized_voice_msg>:

void display_recognized_voice_msg(void){
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af02      	add	r7, sp, #8
	/*Muestra mensaje de voz reconocida*/
	uint8_t x = 40;
 8002176:	2328      	movs	r3, #40	@ 0x28
 8002178:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 800217e:	2000      	movs	r0, #0
 8002180:	f000 f9de 	bl	8002540 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8002184:	79ba      	ldrb	r2, [r7, #6]
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f000 fb22 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("Voz", Font_11x18, White);
 8002190:	4b0f      	ldr	r3, [pc, #60]	@ (80021d0 <display_recognized_voice_msg+0x60>)
 8002192:	2201      	movs	r2, #1
 8002194:	9200      	str	r2, [sp, #0]
 8002196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002198:	480e      	ldr	r0, [pc, #56]	@ (80021d4 <display_recognized_voice_msg+0x64>)
 800219a:	f000 faf5 	bl	8002788 <ssd1306_WriteString>
	x = 10;
 800219e:	230a      	movs	r3, #10
 80021a0:	71fb      	strb	r3, [r7, #7]
	y += 18;
 80021a2:	79bb      	ldrb	r3, [r7, #6]
 80021a4:	3312      	adds	r3, #18
 80021a6:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 80021a8:	79ba      	ldrb	r2, [r7, #6]
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	4611      	mov	r1, r2
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 fb10 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("reconocida", Font_11x18, White);
 80021b4:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <display_recognized_voice_msg+0x60>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	9200      	str	r2, [sp, #0]
 80021ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021bc:	4806      	ldr	r0, [pc, #24]	@ (80021d8 <display_recognized_voice_msg+0x68>)
 80021be:	f000 fae3 	bl	8002788 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80021c2:	f000 f9d5 	bl	8002570 <ssd1306_UpdateScreen>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	080143a0 	.word	0x080143a0
 80021d4:	0801215c 	.word	0x0801215c
 80021d8:	08012160 	.word	0x08012160

080021dc <display_not_recognized_voice_msg>:


void display_not_recognized_voice_msg(void){
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af02      	add	r7, sp, #8
	/*Muestra mensaje de voz no reconocida*/
	uint8_t x = 20;
 80021e2:	2314      	movs	r3, #20
 80021e4:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 80021ea:	2000      	movs	r0, #0
 80021ec:	f000 f9a8 	bl	8002540 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80021f0:	79ba      	ldrb	r2, [r7, #6]
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	4611      	mov	r1, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 faec 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("Voz no", Font_11x18, White);
 80021fc:	4b0f      	ldr	r3, [pc, #60]	@ (800223c <display_not_recognized_voice_msg+0x60>)
 80021fe:	2201      	movs	r2, #1
 8002200:	9200      	str	r2, [sp, #0]
 8002202:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002204:	480e      	ldr	r0, [pc, #56]	@ (8002240 <display_not_recognized_voice_msg+0x64>)
 8002206:	f000 fabf 	bl	8002788 <ssd1306_WriteString>
	x = 10;
 800220a:	230a      	movs	r3, #10
 800220c:	71fb      	strb	r3, [r7, #7]
	y += 18;
 800220e:	79bb      	ldrb	r3, [r7, #6]
 8002210:	3312      	adds	r3, #18
 8002212:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8002214:	79ba      	ldrb	r2, [r7, #6]
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f000 fada 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("reconocida", Font_11x18, White);
 8002220:	4b06      	ldr	r3, [pc, #24]	@ (800223c <display_not_recognized_voice_msg+0x60>)
 8002222:	2201      	movs	r2, #1
 8002224:	9200      	str	r2, [sp, #0]
 8002226:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002228:	4806      	ldr	r0, [pc, #24]	@ (8002244 <display_not_recognized_voice_msg+0x68>)
 800222a:	f000 faad 	bl	8002788 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800222e:	f000 f99f 	bl	8002570 <ssd1306_UpdateScreen>
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	080143a0 	.word	0x080143a0
 8002240:	0801216c 	.word	0x0801216c
 8002244:	08012160 	.word	0x08012160

08002248 <display_processing_data_msg>:

void display_processing_data_msg(void){
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af02      	add	r7, sp, #8
	/*Muestra mensaje de voz reconocida*/
	uint8_t x = 40;
 800224e:	2328      	movs	r3, #40	@ 0x28
 8002250:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8002256:	2000      	movs	r0, #0
 8002258:	f000 f972 	bl	8002540 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 800225c:	79ba      	ldrb	r2, [r7, #6]
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	4611      	mov	r1, r2
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fab6 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("Procesando", Font_11x18, White);
 8002268:	4b0f      	ldr	r3, [pc, #60]	@ (80022a8 <display_processing_data_msg+0x60>)
 800226a:	2201      	movs	r2, #1
 800226c:	9200      	str	r2, [sp, #0]
 800226e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002270:	480e      	ldr	r0, [pc, #56]	@ (80022ac <display_processing_data_msg+0x64>)
 8002272:	f000 fa89 	bl	8002788 <ssd1306_WriteString>
	x = 10;
 8002276:	230a      	movs	r3, #10
 8002278:	71fb      	strb	r3, [r7, #7]
	y += 18;
 800227a:	79bb      	ldrb	r3, [r7, #6]
 800227c:	3312      	adds	r3, #18
 800227e:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8002280:	79ba      	ldrb	r2, [r7, #6]
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	4611      	mov	r1, r2
 8002286:	4618      	mov	r0, r3
 8002288:	f000 faa4 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("datos", Font_11x18, White);
 800228c:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <display_processing_data_msg+0x60>)
 800228e:	2201      	movs	r2, #1
 8002290:	9200      	str	r2, [sp, #0]
 8002292:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002294:	4806      	ldr	r0, [pc, #24]	@ (80022b0 <display_processing_data_msg+0x68>)
 8002296:	f000 fa77 	bl	8002788 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800229a:	f000 f969 	bl	8002570 <ssd1306_UpdateScreen>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	080143a0 	.word	0x080143a0
 80022ac:	08012174 	.word	0x08012174
 80022b0:	08012180 	.word	0x08012180

080022b4 <display_missing_database_msg>:

void display_missing_database_msg(void){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af02      	add	r7, sp, #8
	/*Muestra mensaje de database faltante*/
	uint8_t x = 40;
 80022ba:	2328      	movs	r3, #40	@ 0x28
 80022bc:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 80022c2:	2000      	movs	r0, #0
 80022c4:	f000 f93c 	bl	8002540 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80022c8:	79ba      	ldrb	r2, [r7, #6]
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fa80 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("Database", Font_11x18, White);
 80022d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002314 <display_missing_database_msg+0x60>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	9200      	str	r2, [sp, #0]
 80022da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022dc:	480e      	ldr	r0, [pc, #56]	@ (8002318 <display_missing_database_msg+0x64>)
 80022de:	f000 fa53 	bl	8002788 <ssd1306_WriteString>
	x = 10;
 80022e2:	230a      	movs	r3, #10
 80022e4:	71fb      	strb	r3, [r7, #7]
	y += 18;
 80022e6:	79bb      	ldrb	r3, [r7, #6]
 80022e8:	3312      	adds	r3, #18
 80022ea:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 80022ec:	79ba      	ldrb	r2, [r7, #6]
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	4611      	mov	r1, r2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 fa6e 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("faltante", Font_11x18, White);
 80022f8:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <display_missing_database_msg+0x60>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	9200      	str	r2, [sp, #0]
 80022fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002300:	4806      	ldr	r0, [pc, #24]	@ (800231c <display_missing_database_msg+0x68>)
 8002302:	f000 fa41 	bl	8002788 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002306:	f000 f933 	bl	8002570 <ssd1306_UpdateScreen>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	080143a0 	.word	0x080143a0
 8002318:	08012188 	.word	0x08012188
 800231c:	08012194 	.word	0x08012194

08002320 <display_missing_template_msg>:

void display_missing_template_msg(void){
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af02      	add	r7, sp, #8
	/*Muestra mensaje de template faltante*/
	uint8_t x = 40;
 8002326:	2328      	movs	r3, #40	@ 0x28
 8002328:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 800232e:	2000      	movs	r0, #0
 8002330:	f000 f906 	bl	8002540 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8002334:	79ba      	ldrb	r2, [r7, #6]
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	4611      	mov	r1, r2
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fa4a 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("Template", Font_11x18, White);
 8002340:	4b0f      	ldr	r3, [pc, #60]	@ (8002380 <display_missing_template_msg+0x60>)
 8002342:	2201      	movs	r2, #1
 8002344:	9200      	str	r2, [sp, #0]
 8002346:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002348:	480e      	ldr	r0, [pc, #56]	@ (8002384 <display_missing_template_msg+0x64>)
 800234a:	f000 fa1d 	bl	8002788 <ssd1306_WriteString>
	x = 10;
 800234e:	230a      	movs	r3, #10
 8002350:	71fb      	strb	r3, [r7, #7]
	y += 18;
 8002352:	79bb      	ldrb	r3, [r7, #6]
 8002354:	3312      	adds	r3, #18
 8002356:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8002358:	79ba      	ldrb	r2, [r7, #6]
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f000 fa38 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("faltante", Font_11x18, White);
 8002364:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <display_missing_template_msg+0x60>)
 8002366:	2201      	movs	r2, #1
 8002368:	9200      	str	r2, [sp, #0]
 800236a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800236c:	4806      	ldr	r0, [pc, #24]	@ (8002388 <display_missing_template_msg+0x68>)
 800236e:	f000 fa0b 	bl	8002788 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002372:	f000 f8fd 	bl	8002570 <ssd1306_UpdateScreen>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	080143a0 	.word	0x080143a0
 8002384:	080121a0 	.word	0x080121a0
 8002388:	08012194 	.word	0x08012194

0800238c <display_template_saved_msg>:

void display_template_saved_msg(void){
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af02      	add	r7, sp, #8
	/*Muestra mensaje de template faltante*/
	uint8_t x = 40;
 8002392:	2328      	movs	r3, #40	@ 0x28
 8002394:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 800239a:	2000      	movs	r0, #0
 800239c:	f000 f8d0 	bl	8002540 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80023a0:	79ba      	ldrb	r2, [r7, #6]
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	4611      	mov	r1, r2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 fa14 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("Template", Font_11x18, White);
 80023ac:	4b0f      	ldr	r3, [pc, #60]	@ (80023ec <display_template_saved_msg+0x60>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	9200      	str	r2, [sp, #0]
 80023b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023b4:	480e      	ldr	r0, [pc, #56]	@ (80023f0 <display_template_saved_msg+0x64>)
 80023b6:	f000 f9e7 	bl	8002788 <ssd1306_WriteString>
	x = 10;
 80023ba:	230a      	movs	r3, #10
 80023bc:	71fb      	strb	r3, [r7, #7]
	y += 18;
 80023be:	79bb      	ldrb	r3, [r7, #6]
 80023c0:	3312      	adds	r3, #18
 80023c2:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 80023c4:	79ba      	ldrb	r2, [r7, #6]
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	4611      	mov	r1, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 fa02 	bl	80027d4 <ssd1306_SetCursor>
	ssd1306_WriteString("guardado", Font_11x18, White);
 80023d0:	4b06      	ldr	r3, [pc, #24]	@ (80023ec <display_template_saved_msg+0x60>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	9200      	str	r2, [sp, #0]
 80023d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d8:	4806      	ldr	r0, [pc, #24]	@ (80023f4 <display_template_saved_msg+0x68>)
 80023da:	f000 f9d5 	bl	8002788 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80023de:	f000 f8c7 	bl	8002570 <ssd1306_UpdateScreen>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	080143a0 	.word	0x080143a0
 80023f0:	080121a0 	.word	0x080121a0
 80023f4:	080121ac 	.word	0x080121ac

080023f8 <ssd1306_Reset>:
#include "main.h"
#include "cmsis_os.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af04      	add	r7, sp, #16
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002412:	f04f 33ff 	mov.w	r3, #4294967295
 8002416:	9302      	str	r3, [sp, #8]
 8002418:	2301      	movs	r3, #1
 800241a:	9301      	str	r3, [sp, #4]
 800241c:	1dfb      	adds	r3, r7, #7
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	2301      	movs	r3, #1
 8002422:	2200      	movs	r2, #0
 8002424:	2178      	movs	r1, #120	@ 0x78
 8002426:	4803      	ldr	r0, [pc, #12]	@ (8002434 <ssd1306_WriteCommand+0x2c>)
 8002428:	f002 fe7a 	bl	8005120 <HAL_I2C_Mem_Write>
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20000398 	.word	0x20000398

08002438 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af04      	add	r7, sp, #16
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	b29b      	uxth	r3, r3
 8002446:	f04f 32ff 	mov.w	r2, #4294967295
 800244a:	9202      	str	r2, [sp, #8]
 800244c:	9301      	str	r3, [sp, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	2301      	movs	r3, #1
 8002454:	2240      	movs	r2, #64	@ 0x40
 8002456:	2178      	movs	r1, #120	@ 0x78
 8002458:	4803      	ldr	r0, [pc, #12]	@ (8002468 <ssd1306_WriteData+0x30>)
 800245a:	f002 fe61 	bl	8005120 <HAL_I2C_Mem_Write>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000398 	.word	0x20000398

0800246c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002470:	f7ff ffc2 	bl	80023f8 <ssd1306_Reset>

    // Wait for the screen to boot
    vTaskDelay(100 / portTICK_RATE_MS);
 8002474:	2064      	movs	r0, #100	@ 0x64
 8002476:	f006 fdaf 	bl	8008fd8 <vTaskDelay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800247a:	2000      	movs	r0, #0
 800247c:	f000 f9d6 	bl	800282c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002480:	2020      	movs	r0, #32
 8002482:	f7ff ffc1 	bl	8002408 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002486:	2000      	movs	r0, #0
 8002488:	f7ff ffbe 	bl	8002408 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800248c:	20b0      	movs	r0, #176	@ 0xb0
 800248e:	f7ff ffbb 	bl	8002408 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002492:	20c8      	movs	r0, #200	@ 0xc8
 8002494:	f7ff ffb8 	bl	8002408 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002498:	2000      	movs	r0, #0
 800249a:	f7ff ffb5 	bl	8002408 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800249e:	2010      	movs	r0, #16
 80024a0:	f7ff ffb2 	bl	8002408 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80024a4:	2040      	movs	r0, #64	@ 0x40
 80024a6:	f7ff ffaf 	bl	8002408 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80024aa:	20ff      	movs	r0, #255	@ 0xff
 80024ac:	f000 f9aa 	bl	8002804 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80024b0:	20a1      	movs	r0, #161	@ 0xa1
 80024b2:	f7ff ffa9 	bl	8002408 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80024b6:	20a6      	movs	r0, #166	@ 0xa6
 80024b8:	f7ff ffa6 	bl	8002408 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80024bc:	20a8      	movs	r0, #168	@ 0xa8
 80024be:	f7ff ffa3 	bl	8002408 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80024c2:	203f      	movs	r0, #63	@ 0x3f
 80024c4:	f7ff ffa0 	bl	8002408 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80024c8:	20a4      	movs	r0, #164	@ 0xa4
 80024ca:	f7ff ff9d 	bl	8002408 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80024ce:	20d3      	movs	r0, #211	@ 0xd3
 80024d0:	f7ff ff9a 	bl	8002408 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80024d4:	2000      	movs	r0, #0
 80024d6:	f7ff ff97 	bl	8002408 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80024da:	20d5      	movs	r0, #213	@ 0xd5
 80024dc:	f7ff ff94 	bl	8002408 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80024e0:	20f0      	movs	r0, #240	@ 0xf0
 80024e2:	f7ff ff91 	bl	8002408 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80024e6:	20d9      	movs	r0, #217	@ 0xd9
 80024e8:	f7ff ff8e 	bl	8002408 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80024ec:	2022      	movs	r0, #34	@ 0x22
 80024ee:	f7ff ff8b 	bl	8002408 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80024f2:	20da      	movs	r0, #218	@ 0xda
 80024f4:	f7ff ff88 	bl	8002408 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80024f8:	2012      	movs	r0, #18
 80024fa:	f7ff ff85 	bl	8002408 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80024fe:	20db      	movs	r0, #219	@ 0xdb
 8002500:	f7ff ff82 	bl	8002408 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002504:	2020      	movs	r0, #32
 8002506:	f7ff ff7f 	bl	8002408 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800250a:	208d      	movs	r0, #141	@ 0x8d
 800250c:	f7ff ff7c 	bl	8002408 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002510:	2014      	movs	r0, #20
 8002512:	f7ff ff79 	bl	8002408 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002516:	2001      	movs	r0, #1
 8002518:	f000 f988 	bl	800282c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800251c:	2000      	movs	r0, #0
 800251e:	f000 f80f 	bl	8002540 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002522:	f000 f825 	bl	8002570 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002526:	4b05      	ldr	r3, [pc, #20]	@ (800253c <ssd1306_Init+0xd0>)
 8002528:	2200      	movs	r2, #0
 800252a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800252c:	4b03      	ldr	r3, [pc, #12]	@ (800253c <ssd1306_Init+0xd0>)
 800252e:	2200      	movs	r2, #0
 8002530:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002532:	4b02      	ldr	r3, [pc, #8]	@ (800253c <ssd1306_Init+0xd0>)
 8002534:	2201      	movs	r2, #1
 8002536:	711a      	strb	r2, [r3, #4]
}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000958 	.word	0x20000958

08002540 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <ssd1306_Fill+0x14>
 8002550:	2300      	movs	r3, #0
 8002552:	e000      	b.n	8002556 <ssd1306_Fill+0x16>
 8002554:	23ff      	movs	r3, #255	@ 0xff
 8002556:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800255a:	4619      	mov	r1, r3
 800255c:	4803      	ldr	r0, [pc, #12]	@ (800256c <ssd1306_Fill+0x2c>)
 800255e:	f00f f8ef 	bl	8011740 <memset>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000558 	.word	0x20000558

08002570 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002576:	2300      	movs	r3, #0
 8002578:	71fb      	strb	r3, [r7, #7]
 800257a:	e016      	b.n	80025aa <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	3b50      	subs	r3, #80	@ 0x50
 8002580:	b2db      	uxtb	r3, r3
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff ff40 	bl	8002408 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002588:	2000      	movs	r0, #0
 800258a:	f7ff ff3d 	bl	8002408 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800258e:	2010      	movs	r0, #16
 8002590:	f7ff ff3a 	bl	8002408 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	01db      	lsls	r3, r3, #7
 8002598:	4a08      	ldr	r2, [pc, #32]	@ (80025bc <ssd1306_UpdateScreen+0x4c>)
 800259a:	4413      	add	r3, r2
 800259c:	2180      	movs	r1, #128	@ 0x80
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ff4a 	bl	8002438 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	3301      	adds	r3, #1
 80025a8:	71fb      	strb	r3, [r7, #7]
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	2b07      	cmp	r3, #7
 80025ae:	d9e5      	bls.n	800257c <ssd1306_UpdateScreen+0xc>
    }
}
 80025b0:	bf00      	nop
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000558 	.word	0x20000558

080025c0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	71fb      	strb	r3, [r7, #7]
 80025ca:	460b      	mov	r3, r1
 80025cc:	71bb      	strb	r3, [r7, #6]
 80025ce:	4613      	mov	r3, r2
 80025d0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	db3d      	blt.n	8002656 <ssd1306_DrawPixel+0x96>
 80025da:	79bb      	ldrb	r3, [r7, #6]
 80025dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80025de:	d83a      	bhi.n	8002656 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80025e0:	797b      	ldrb	r3, [r7, #5]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d11a      	bne.n	800261c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80025e6:	79fa      	ldrb	r2, [r7, #7]
 80025e8:	79bb      	ldrb	r3, [r7, #6]
 80025ea:	08db      	lsrs	r3, r3, #3
 80025ec:	b2d8      	uxtb	r0, r3
 80025ee:	4603      	mov	r3, r0
 80025f0:	01db      	lsls	r3, r3, #7
 80025f2:	4413      	add	r3, r2
 80025f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002664 <ssd1306_DrawPixel+0xa4>)
 80025f6:	5cd3      	ldrb	r3, [r2, r3]
 80025f8:	b25a      	sxtb	r2, r3
 80025fa:	79bb      	ldrb	r3, [r7, #6]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	2101      	movs	r1, #1
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	b25b      	sxtb	r3, r3
 8002608:	4313      	orrs	r3, r2
 800260a:	b259      	sxtb	r1, r3
 800260c:	79fa      	ldrb	r2, [r7, #7]
 800260e:	4603      	mov	r3, r0
 8002610:	01db      	lsls	r3, r3, #7
 8002612:	4413      	add	r3, r2
 8002614:	b2c9      	uxtb	r1, r1
 8002616:	4a13      	ldr	r2, [pc, #76]	@ (8002664 <ssd1306_DrawPixel+0xa4>)
 8002618:	54d1      	strb	r1, [r2, r3]
 800261a:	e01d      	b.n	8002658 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800261c:	79fa      	ldrb	r2, [r7, #7]
 800261e:	79bb      	ldrb	r3, [r7, #6]
 8002620:	08db      	lsrs	r3, r3, #3
 8002622:	b2d8      	uxtb	r0, r3
 8002624:	4603      	mov	r3, r0
 8002626:	01db      	lsls	r3, r3, #7
 8002628:	4413      	add	r3, r2
 800262a:	4a0e      	ldr	r2, [pc, #56]	@ (8002664 <ssd1306_DrawPixel+0xa4>)
 800262c:	5cd3      	ldrb	r3, [r2, r3]
 800262e:	b25a      	sxtb	r2, r3
 8002630:	79bb      	ldrb	r3, [r7, #6]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	2101      	movs	r1, #1
 8002638:	fa01 f303 	lsl.w	r3, r1, r3
 800263c:	b25b      	sxtb	r3, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	b25b      	sxtb	r3, r3
 8002642:	4013      	ands	r3, r2
 8002644:	b259      	sxtb	r1, r3
 8002646:	79fa      	ldrb	r2, [r7, #7]
 8002648:	4603      	mov	r3, r0
 800264a:	01db      	lsls	r3, r3, #7
 800264c:	4413      	add	r3, r2
 800264e:	b2c9      	uxtb	r1, r1
 8002650:	4a04      	ldr	r2, [pc, #16]	@ (8002664 <ssd1306_DrawPixel+0xa4>)
 8002652:	54d1      	strb	r1, [r2, r3]
 8002654:	e000      	b.n	8002658 <ssd1306_DrawPixel+0x98>
        return;
 8002656:	bf00      	nop
    }
}
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20000558 	.word	0x20000558

08002668 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b089      	sub	sp, #36	@ 0x24
 800266c:	af00      	add	r7, sp, #0
 800266e:	4604      	mov	r4, r0
 8002670:	4638      	mov	r0, r7
 8002672:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002676:	4623      	mov	r3, r4
 8002678:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	2b1f      	cmp	r3, #31
 800267e:	d902      	bls.n	8002686 <ssd1306_WriteChar+0x1e>
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	2b7e      	cmp	r3, #126	@ 0x7e
 8002684:	d901      	bls.n	800268a <ssd1306_WriteChar+0x22>
        return 0;
 8002686:	2300      	movs	r3, #0
 8002688:	e077      	b.n	800277a <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800268a:	4b3e      	ldr	r3, [pc, #248]	@ (8002784 <ssd1306_WriteChar+0x11c>)
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	783b      	ldrb	r3, [r7, #0]
 8002692:	4413      	add	r3, r2
 8002694:	2b80      	cmp	r3, #128	@ 0x80
 8002696:	dc06      	bgt.n	80026a6 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002698:	4b3a      	ldr	r3, [pc, #232]	@ (8002784 <ssd1306_WriteChar+0x11c>)
 800269a:	885b      	ldrh	r3, [r3, #2]
 800269c:	461a      	mov	r2, r3
 800269e:	787b      	ldrb	r3, [r7, #1]
 80026a0:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80026a2:	2b40      	cmp	r3, #64	@ 0x40
 80026a4:	dd01      	ble.n	80026aa <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	e067      	b.n	800277a <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	e04e      	b.n	800274e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
 80026b4:	3b20      	subs	r3, #32
 80026b6:	7879      	ldrb	r1, [r7, #1]
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4619      	mov	r1, r3
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	440b      	add	r3, r1
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4413      	add	r3, r2
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80026ca:	2300      	movs	r3, #0
 80026cc:	61bb      	str	r3, [r7, #24]
 80026ce:	e036      	b.n	800273e <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d013      	beq.n	8002708 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80026e0:	4b28      	ldr	r3, [pc, #160]	@ (8002784 <ssd1306_WriteChar+0x11c>)
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	4413      	add	r3, r2
 80026ec:	b2d8      	uxtb	r0, r3
 80026ee:	4b25      	ldr	r3, [pc, #148]	@ (8002784 <ssd1306_WriteChar+0x11c>)
 80026f0:	885b      	ldrh	r3, [r3, #2]
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	4413      	add	r3, r2
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002700:	4619      	mov	r1, r3
 8002702:	f7ff ff5d 	bl	80025c0 <ssd1306_DrawPixel>
 8002706:	e017      	b.n	8002738 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002708:	4b1e      	ldr	r3, [pc, #120]	@ (8002784 <ssd1306_WriteChar+0x11c>)
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	b2db      	uxtb	r3, r3
 8002712:	4413      	add	r3, r2
 8002714:	b2d8      	uxtb	r0, r3
 8002716:	4b1b      	ldr	r3, [pc, #108]	@ (8002784 <ssd1306_WriteChar+0x11c>)
 8002718:	885b      	ldrh	r3, [r3, #2]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	4413      	add	r3, r2
 8002722:	b2d9      	uxtb	r1, r3
 8002724:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002728:	2b00      	cmp	r3, #0
 800272a:	bf0c      	ite	eq
 800272c:	2301      	moveq	r3, #1
 800272e:	2300      	movne	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	f7ff ff44 	bl	80025c0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	3301      	adds	r3, #1
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	783b      	ldrb	r3, [r7, #0]
 8002740:	461a      	mov	r2, r3
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	4293      	cmp	r3, r2
 8002746:	d3c3      	bcc.n	80026d0 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	3301      	adds	r3, #1
 800274c:	61fb      	str	r3, [r7, #28]
 800274e:	787b      	ldrb	r3, [r7, #1]
 8002750:	461a      	mov	r2, r3
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	4293      	cmp	r3, r2
 8002756:	d3ab      	bcc.n	80026b0 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8002758:	4b0a      	ldr	r3, [pc, #40]	@ (8002784 <ssd1306_WriteChar+0x11c>)
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	2a00      	cmp	r2, #0
 8002760:	d005      	beq.n	800276e <ssd1306_WriteChar+0x106>
 8002762:	68b9      	ldr	r1, [r7, #8]
 8002764:	7bfa      	ldrb	r2, [r7, #15]
 8002766:	3a20      	subs	r2, #32
 8002768:	440a      	add	r2, r1
 800276a:	7812      	ldrb	r2, [r2, #0]
 800276c:	e000      	b.n	8002770 <ssd1306_WriteChar+0x108>
 800276e:	783a      	ldrb	r2, [r7, #0]
 8002770:	4413      	add	r3, r2
 8002772:	b29a      	uxth	r2, r3
 8002774:	4b03      	ldr	r3, [pc, #12]	@ (8002784 <ssd1306_WriteChar+0x11c>)
 8002776:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002778:	7bfb      	ldrb	r3, [r7, #15]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3724      	adds	r7, #36	@ 0x24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd90      	pop	{r4, r7, pc}
 8002782:	bf00      	nop
 8002784:	20000958 	.word	0x20000958

08002788 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af02      	add	r7, sp, #8
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	4638      	mov	r0, r7
 8002792:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002796:	e013      	b.n	80027c0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	7818      	ldrb	r0, [r3, #0]
 800279c:	7e3b      	ldrb	r3, [r7, #24]
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	463b      	mov	r3, r7
 80027a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027a4:	f7ff ff60 	bl	8002668 <ssd1306_WriteChar>
 80027a8:	4603      	mov	r3, r0
 80027aa:	461a      	mov	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d002      	beq.n	80027ba <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	e008      	b.n	80027cc <ssd1306_WriteString+0x44>
        }
        str++;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	3301      	adds	r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1e7      	bne.n	8002798 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	781b      	ldrb	r3, [r3, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	460a      	mov	r2, r1
 80027de:	71fb      	strb	r3, [r7, #7]
 80027e0:	4613      	mov	r3, r2
 80027e2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	4b05      	ldr	r3, [pc, #20]	@ (8002800 <ssd1306_SetCursor+0x2c>)
 80027ea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80027ec:	79bb      	ldrb	r3, [r7, #6]
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	4b03      	ldr	r3, [pc, #12]	@ (8002800 <ssd1306_SetCursor+0x2c>)
 80027f2:	805a      	strh	r2, [r3, #2]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	20000958 	.word	0x20000958

08002804 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800280e:	2381      	movs	r3, #129	@ 0x81
 8002810:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff fdf7 	bl	8002408 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fdf3 	bl	8002408 <ssd1306_WriteCommand>
}
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800283c:	23af      	movs	r3, #175	@ 0xaf
 800283e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002840:	4b08      	ldr	r3, [pc, #32]	@ (8002864 <ssd1306_SetDisplayOn+0x38>)
 8002842:	2201      	movs	r2, #1
 8002844:	715a      	strb	r2, [r3, #5]
 8002846:	e004      	b.n	8002852 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002848:	23ae      	movs	r3, #174	@ 0xae
 800284a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800284c:	4b05      	ldr	r3, [pc, #20]	@ (8002864 <ssd1306_SetDisplayOn+0x38>)
 800284e:	2200      	movs	r2, #0
 8002850:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fdd7 	bl	8002408 <ssd1306_WriteCommand>
}
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20000958 	.word	0x20000958

08002868 <handle_keypad_input>:
	TickType_t start_time;
	char buffer[SEQUENCE_LENGTH + 1];
}keypad_context_t;


indicatorMessage handle_keypad_input(char input, char *buffer, uint8_t *send_flag){
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	73fb      	strb	r3, [r7, #15]
	static keypad_context_t context = { .current_state = ESPERANDO_DIGITO_1,
										.current_index = 0,
										.start_time = 0,					};
	indicatorMessage current_message = PANTALLA_IDLE;
 8002876:	2300      	movs	r3, #0
 8002878:	75fb      	strb	r3, [r7, #23]
	switch(context.current_state){
 800287a:	4b61      	ldr	r3, [pc, #388]	@ (8002a00 <handle_keypad_input+0x198>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b07      	cmp	r3, #7
 8002880:	f000 80a1 	beq.w	80029c6 <handle_keypad_input+0x15e>
 8002884:	2b07      	cmp	r3, #7
 8002886:	f300 80a8 	bgt.w	80029da <handle_keypad_input+0x172>
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <handle_keypad_input+0x36>
 800288e:	2b00      	cmp	r3, #0
 8002890:	f2c0 80a3 	blt.w	80029da <handle_keypad_input+0x172>
 8002894:	3b01      	subs	r3, #1
 8002896:	2b05      	cmp	r3, #5
 8002898:	f200 809f 	bhi.w	80029da <handle_keypad_input+0x172>
 800289c:	e01c      	b.n	80028d8 <handle_keypad_input+0x70>
	case ESPERANDO_DIGITO_1:
		if(input != 0 && input != BORRAR_DIGITO && input != ENTER){
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d016      	beq.n	80028d2 <handle_keypad_input+0x6a>
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	2b23      	cmp	r3, #35	@ 0x23
 80028a8:	d013      	beq.n	80028d2 <handle_keypad_input+0x6a>
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80028ae:	d010      	beq.n	80028d2 <handle_keypad_input+0x6a>
			buffer[0] = input;													//Guardo digito en el buffer
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	7bfa      	ldrb	r2, [r7, #15]
 80028b4:	701a      	strb	r2, [r3, #0]
			context.current_index = 1;
 80028b6:	4b52      	ldr	r3, [pc, #328]	@ (8002a00 <handle_keypad_input+0x198>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	705a      	strb	r2, [r3, #1]
			context.start_time = xTaskGetTickCount();							//Reinicio el timeout
 80028bc:	f006 fcd0 	bl	8009260 <xTaskGetTickCount>
 80028c0:	4603      	mov	r3, r0
 80028c2:	4a4f      	ldr	r2, [pc, #316]	@ (8002a00 <handle_keypad_input+0x198>)
 80028c4:	6053      	str	r3, [r2, #4]
			context.current_state = ESPERANDO_DIGITO_2;							//Avanzo al siguiente estado
 80028c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002a00 <handle_keypad_input+0x198>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	701a      	strb	r2, [r3, #0]
			current_message = PANTALLA_INGRESO_KEYPAD;
 80028cc:	2302      	movs	r3, #2
 80028ce:	75fb      	strb	r3, [r7, #23]
		}
		else{
			current_message = PANTALLA_DE_INICIO;
		}
		break;
 80028d0:	e091      	b.n	80029f6 <handle_keypad_input+0x18e>
			current_message = PANTALLA_DE_INICIO;
 80028d2:	2301      	movs	r3, #1
 80028d4:	75fb      	strb	r3, [r7, #23]
		break;
 80028d6:	e08e      	b.n	80029f6 <handle_keypad_input+0x18e>
	case ESPERANDO_DIGITO_3:
	case ESPERANDO_DIGITO_4:
	case ESPERANDO_DIGITO_5:
	case ESPERANDO_DIGITO_6:
	case ESPERANDO_CONFIRMACION:
		if((xTaskGetTickCount() - context.start_time) < pdMS_TO_TICKS(KEYPAD_TIMEOUT)){
 80028d8:	f006 fcc2 	bl	8009260 <xTaskGetTickCount>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b48      	ldr	r3, [pc, #288]	@ (8002a00 <handle_keypad_input+0x198>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	f241 3287 	movw	r2, #4999	@ 0x1387
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d866      	bhi.n	80029ba <handle_keypad_input+0x152>
			if(input != 0){
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d060      	beq.n	80029b4 <handle_keypad_input+0x14c>
				if(input == BORRAR_DIGITO){
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	2b23      	cmp	r3, #35	@ 0x23
 80028f6:	d124      	bne.n	8002942 <handle_keypad_input+0xda>
					if(context.current_index > 0){
 80028f8:	4b41      	ldr	r3, [pc, #260]	@ (8002a00 <handle_keypad_input+0x198>)
 80028fa:	785b      	ldrb	r3, [r3, #1]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d079      	beq.n	80029f4 <handle_keypad_input+0x18c>
						context.current_index--;
 8002900:	4b3f      	ldr	r3, [pc, #252]	@ (8002a00 <handle_keypad_input+0x198>)
 8002902:	785b      	ldrb	r3, [r3, #1]
 8002904:	3b01      	subs	r3, #1
 8002906:	b2da      	uxtb	r2, r3
 8002908:	4b3d      	ldr	r3, [pc, #244]	@ (8002a00 <handle_keypad_input+0x198>)
 800290a:	705a      	strb	r2, [r3, #1]
						buffer[context.current_index] = '\0';					//Borro el contenido previo
 800290c:	4b3c      	ldr	r3, [pc, #240]	@ (8002a00 <handle_keypad_input+0x198>)
 800290e:	785b      	ldrb	r3, [r3, #1]
 8002910:	461a      	mov	r2, r3
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	4413      	add	r3, r2
 8002916:	2200      	movs	r2, #0
 8002918:	701a      	strb	r2, [r3, #0]
						context.start_time = xTaskGetTickCount();				//Reinicio el timeout
 800291a:	f006 fca1 	bl	8009260 <xTaskGetTickCount>
 800291e:	4603      	mov	r3, r0
 8002920:	4a37      	ldr	r2, [pc, #220]	@ (8002a00 <handle_keypad_input+0x198>)
 8002922:	6053      	str	r3, [r2, #4]
						current_message = PANTALLA_BORRAR_KEYPAD;
 8002924:	2303      	movs	r3, #3
 8002926:	75fb      	strb	r3, [r7, #23]
						context.current_state = (context.current_state > ESPERANDO_DIGITO_1) ? context.current_state - 1 : ESPERANDO_DIGITO_1;
 8002928:	4b35      	ldr	r3, [pc, #212]	@ (8002a00 <handle_keypad_input+0x198>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d004      	beq.n	800293a <handle_keypad_input+0xd2>
 8002930:	4b33      	ldr	r3, [pc, #204]	@ (8002a00 <handle_keypad_input+0x198>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	3b01      	subs	r3, #1
 8002936:	b2db      	uxtb	r3, r3
 8002938:	e000      	b.n	800293c <handle_keypad_input+0xd4>
 800293a:	2300      	movs	r3, #0
 800293c:	4a30      	ldr	r2, [pc, #192]	@ (8002a00 <handle_keypad_input+0x198>)
 800293e:	7013      	strb	r3, [r2, #0]
		}
		else{
			context.current_state = TIMEOUT;
			current_message = PANTALLA_TIMEOUT;
		}
		break;
 8002940:	e058      	b.n	80029f4 <handle_keypad_input+0x18c>
				else if(input == ENTER){
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	2b2a      	cmp	r3, #42	@ 0x2a
 8002946:	d10d      	bne.n	8002964 <handle_keypad_input+0xfc>
					if(context.current_state == ESPERANDO_CONFIRMACION){
 8002948:	4b2d      	ldr	r3, [pc, #180]	@ (8002a00 <handle_keypad_input+0x198>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b06      	cmp	r3, #6
 800294e:	d103      	bne.n	8002958 <handle_keypad_input+0xf0>
						context.current_state = BUSQUEDA_DE_USUARIO;
 8002950:	4b2b      	ldr	r3, [pc, #172]	@ (8002a00 <handle_keypad_input+0x198>)
 8002952:	2207      	movs	r2, #7
 8002954:	701a      	strb	r2, [r3, #0]
		break;
 8002956:	e04d      	b.n	80029f4 <handle_keypad_input+0x18c>
						context.current_state = SECUENCIA_INCOMPLETA;
 8002958:	4b29      	ldr	r3, [pc, #164]	@ (8002a00 <handle_keypad_input+0x198>)
 800295a:	2208      	movs	r2, #8
 800295c:	701a      	strb	r2, [r3, #0]
						current_message = PANTALLA_SECUENCIA_INCOMPLETA;
 800295e:	230b      	movs	r3, #11
 8002960:	75fb      	strb	r3, [r7, #23]
		break;
 8002962:	e047      	b.n	80029f4 <handle_keypad_input+0x18c>
					if(context.current_index < SEQUENCE_LENGTH){
 8002964:	4b26      	ldr	r3, [pc, #152]	@ (8002a00 <handle_keypad_input+0x198>)
 8002966:	785b      	ldrb	r3, [r3, #1]
 8002968:	2b05      	cmp	r3, #5
 800296a:	d843      	bhi.n	80029f4 <handle_keypad_input+0x18c>
						buffer[context.current_index++] = input;				//Agrego el digito al buffer
 800296c:	4b24      	ldr	r3, [pc, #144]	@ (8002a00 <handle_keypad_input+0x198>)
 800296e:	785b      	ldrb	r3, [r3, #1]
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	b2d1      	uxtb	r1, r2
 8002974:	4a22      	ldr	r2, [pc, #136]	@ (8002a00 <handle_keypad_input+0x198>)
 8002976:	7051      	strb	r1, [r2, #1]
 8002978:	461a      	mov	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	4413      	add	r3, r2
 800297e:	7bfa      	ldrb	r2, [r7, #15]
 8002980:	701a      	strb	r2, [r3, #0]
						buffer[context.current_index] = '\0';					//Aseguro que el buffer siempre termine en caracter nulo
 8002982:	4b1f      	ldr	r3, [pc, #124]	@ (8002a00 <handle_keypad_input+0x198>)
 8002984:	785b      	ldrb	r3, [r3, #1]
 8002986:	461a      	mov	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4413      	add	r3, r2
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
						context.start_time = xTaskGetTickCount();				//Reinicio el timeout
 8002990:	f006 fc66 	bl	8009260 <xTaskGetTickCount>
 8002994:	4603      	mov	r3, r0
 8002996:	4a1a      	ldr	r2, [pc, #104]	@ (8002a00 <handle_keypad_input+0x198>)
 8002998:	6053      	str	r3, [r2, #4]
						current_message = PANTALLA_INGRESO_KEYPAD;
 800299a:	2302      	movs	r3, #2
 800299c:	75fb      	strb	r3, [r7, #23]
						if(context.current_state != ESPERANDO_CONFIRMACION){
 800299e:	4b18      	ldr	r3, [pc, #96]	@ (8002a00 <handle_keypad_input+0x198>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b06      	cmp	r3, #6
 80029a4:	d026      	beq.n	80029f4 <handle_keypad_input+0x18c>
							context.current_state++;
 80029a6:	4b16      	ldr	r3, [pc, #88]	@ (8002a00 <handle_keypad_input+0x198>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	3301      	adds	r3, #1
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	4b14      	ldr	r3, [pc, #80]	@ (8002a00 <handle_keypad_input+0x198>)
 80029b0:	701a      	strb	r2, [r3, #0]
		break;
 80029b2:	e01f      	b.n	80029f4 <handle_keypad_input+0x18c>
				current_message = PANTALLA_IDLE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	75fb      	strb	r3, [r7, #23]
		break;
 80029b8:	e01c      	b.n	80029f4 <handle_keypad_input+0x18c>
			context.current_state = TIMEOUT;
 80029ba:	4b11      	ldr	r3, [pc, #68]	@ (8002a00 <handle_keypad_input+0x198>)
 80029bc:	2209      	movs	r2, #9
 80029be:	701a      	strb	r2, [r3, #0]
			current_message = PANTALLA_TIMEOUT;
 80029c0:	230a      	movs	r3, #10
 80029c2:	75fb      	strb	r3, [r7, #23]
		break;
 80029c4:	e016      	b.n	80029f4 <handle_keypad_input+0x18c>
	case BUSQUEDA_DE_USUARIO:
		*send_flag = 1;															//Habilito flag para enviar el string
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
		context.current_state = ESPERANDO_DIGITO_1;
 80029cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002a00 <handle_keypad_input+0x198>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]
		context.current_index = 0;
 80029d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002a00 <handle_keypad_input+0x198>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	705a      	strb	r2, [r3, #1]
		//current_message = PANTALLA_DE_INICIO;									//Luego del procesamiento se vuelve al estado inicial
		break;
 80029d8:	e00d      	b.n	80029f6 <handle_keypad_input+0x18e>
	case SECUENCIA_INCOMPLETA:
	case TIMEOUT:
	default:
		clear_buffer(buffer, SEQUENCE_LENGTH + 1);
 80029da:	2107      	movs	r1, #7
 80029dc:	68b8      	ldr	r0, [r7, #8]
 80029de:	f000 fb1f 	bl	8003020 <clear_buffer>
		context.current_state = ESPERANDO_DIGITO_1;								//Vuelvo al estado inicial
 80029e2:	4b07      	ldr	r3, [pc, #28]	@ (8002a00 <handle_keypad_input+0x198>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]
		context.current_index = 0;
 80029e8:	4b05      	ldr	r3, [pc, #20]	@ (8002a00 <handle_keypad_input+0x198>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	705a      	strb	r2, [r3, #1]
		current_message = PANTALLA_DE_INICIO;
 80029ee:	2301      	movs	r3, #1
 80029f0:	75fb      	strb	r3, [r7, #23]
		break;
 80029f2:	e000      	b.n	80029f6 <handle_keypad_input+0x18e>
		break;
 80029f4:	bf00      	nop
	}
	return current_message;
 80029f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20000960 	.word	0x20000960

08002a04 <set_row>:
	      	  	  	  	  		  	  	  	  {'4', '5', '6', 'B'},
											  {'7', '8', '9', 'C'},
											  {'*', '0', '#', 'D'} };

/*================[Private functions]====================*/
static void set_row(row_t row){
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIO_ROW, row, GPIO_PIN_SET);
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	2201      	movs	r2, #1
 8002a12:	4619      	mov	r1, r3
 8002a14:	4803      	ldr	r0, [pc, #12]	@ (8002a24 <set_row+0x20>)
 8002a16:	f002 fa25 	bl	8004e64 <HAL_GPIO_WritePin>
	return;
 8002a1a:	bf00      	nop
}
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40020800 	.word	0x40020800

08002a28 <reset_row>:

static void reset_row(row_t row){
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIO_ROW, row, GPIO_PIN_RESET);
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	2200      	movs	r2, #0
 8002a36:	4619      	mov	r1, r3
 8002a38:	4803      	ldr	r0, [pc, #12]	@ (8002a48 <reset_row+0x20>)
 8002a3a:	f002 fa13 	bl	8004e64 <HAL_GPIO_WritePin>
	return;
 8002a3e:	bf00      	nop
}
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40020800 	.word	0x40020800

08002a4c <read_col>:

static GPIO_PinState read_col(col_t col){
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	71fb      	strb	r3, [r7, #7]
	return HAL_GPIO_ReadPin(GPIO_COL, col);
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4803      	ldr	r0, [pc, #12]	@ (8002a6c <read_col+0x20>)
 8002a5e:	f002 f9e9 	bl	8004e34 <HAL_GPIO_ReadPin>
 8002a62:	4603      	mov	r3, r0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40020800 	.word	0x40020800

08002a70 <read_keypad>:

/*================[Public functions]=====================*/
char read_keypad(void){
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
	/* La funcion barre las filas del keypad, activando una por una individualmente y leyendo la columna asociada,
	 * para así poder triangular la tecla presionada. Se realiza doble confirmacion de tecla presionada.
	 */
	char key_pressed;
	for(uint8_t i = 0; i < ROW_LENGTH; i++){
 8002a76:	2300      	movs	r3, #0
 8002a78:	71fb      	strb	r3, [r7, #7]
 8002a7a:	e04c      	b.n	8002b16 <read_keypad+0xa6>
		set_row(keypad_rows[i]);
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	4a2a      	ldr	r2, [pc, #168]	@ (8002b28 <read_keypad+0xb8>)
 8002a80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ffbd 	bl	8002a04 <set_row>
		for(uint8_t j = 0; j < COL_LENGTH; j++){
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	71bb      	strb	r3, [r7, #6]
 8002a8e:	e035      	b.n	8002afc <read_keypad+0x8c>
			if(read_col(keypad_cols[j]) == GPIO_PIN_SET){					//Verifico si alguna columna esta en alto (tecla presionada)
 8002a90:	79bb      	ldrb	r3, [r7, #6]
 8002a92:	4a26      	ldr	r2, [pc, #152]	@ (8002b2c <read_keypad+0xbc>)
 8002a94:	5cd3      	ldrb	r3, [r2, r3]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff ffd8 	bl	8002a4c <read_col>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d129      	bne.n	8002af6 <read_keypad+0x86>
				vTaskDelay(20 / portTICK_RATE_MS);							//Si una de las columnas dio alto, espero 20ms y verifico que siga en alto para confirmar
 8002aa2:	2014      	movs	r0, #20
 8002aa4:	f006 fa98 	bl	8008fd8 <vTaskDelay>
				if(read_col(keypad_cols[j]) == GPIO_PIN_SET){
 8002aa8:	79bb      	ldrb	r3, [r7, #6]
 8002aaa:	4a20      	ldr	r2, [pc, #128]	@ (8002b2c <read_keypad+0xbc>)
 8002aac:	5cd3      	ldrb	r3, [r2, r3]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff ffcc 	bl	8002a4c <read_col>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d11d      	bne.n	8002af6 <read_keypad+0x86>
					key_pressed = keypad_chars[i][j];						//Guardo la tecla presionada
 8002aba:	79fa      	ldrb	r2, [r7, #7]
 8002abc:	79bb      	ldrb	r3, [r7, #6]
 8002abe:	491c      	ldr	r1, [pc, #112]	@ (8002b30 <read_keypad+0xc0>)
 8002ac0:	0092      	lsls	r2, r2, #2
 8002ac2:	440a      	add	r2, r1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	717b      	strb	r3, [r7, #5]
					while(read_col(keypad_cols[j]) == GPIO_PIN_SET);		//Espero a que se deje de apretar la tecla
 8002aca:	bf00      	nop
 8002acc:	79bb      	ldrb	r3, [r7, #6]
 8002ace:	4a17      	ldr	r2, [pc, #92]	@ (8002b2c <read_keypad+0xbc>)
 8002ad0:	5cd3      	ldrb	r3, [r2, r3]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff ffba 	bl	8002a4c <read_col>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d0f6      	beq.n	8002acc <read_keypad+0x5c>
					reset_row(keypad_rows[i]);								//Reseteo la fila en alto antes de salir de la funcion
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	4a11      	ldr	r2, [pc, #68]	@ (8002b28 <read_keypad+0xb8>)
 8002ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff ff9e 	bl	8002a28 <reset_row>
					vTaskDelay(10/portTICK_RATE_MS);						//Pequeño delay para asegurar que el boton fue liberado completamente
 8002aec:	200a      	movs	r0, #10
 8002aee:	f006 fa73 	bl	8008fd8 <vTaskDelay>
					return key_pressed;
 8002af2:	797b      	ldrb	r3, [r7, #5]
 8002af4:	e013      	b.n	8002b1e <read_keypad+0xae>
		for(uint8_t j = 0; j < COL_LENGTH; j++){
 8002af6:	79bb      	ldrb	r3, [r7, #6]
 8002af8:	3301      	adds	r3, #1
 8002afa:	71bb      	strb	r3, [r7, #6]
 8002afc:	79bb      	ldrb	r3, [r7, #6]
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d9c6      	bls.n	8002a90 <read_keypad+0x20>
				}
			}
		}
		reset_row(keypad_rows[i]);
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	4a08      	ldr	r2, [pc, #32]	@ (8002b28 <read_keypad+0xb8>)
 8002b06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff ff8c 	bl	8002a28 <reset_row>
	for(uint8_t i = 0; i < ROW_LENGTH; i++){
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	3301      	adds	r3, #1
 8002b14:	71fb      	strb	r3, [r7, #7]
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d9af      	bls.n	8002a7c <read_keypad+0xc>
	}
	return 0;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000004 	.word	0x20000004
 8002b2c:	2000000c 	.word	0x2000000c
 8002b30:	20000010 	.word	0x20000010

08002b34 <fir_filter>:
										  -0.02485046961359185, 0.006276987439723166, -0.007413256377189857, -0.01872037528825959, 0.009067929219325404,
										  0.003579388809249739, -0.019344649278080953, 0.009987413560588994, 0.043161199365629975, 0.025663017507547244   };

/*Defino instancias para el filtro fir y la fft*/

static void fir_filter(float32_t *psrc, float32_t *pdst, const float32_t *coeff, uint16_t num_coeff, size_t block_size){
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	807b      	strh	r3, [r7, #2]
	static uint8_t fir_init_flag = 0;
	float32_t *fir_state = pvPortMalloc(STATE_SIZE * sizeof(float32_t));
 8002b42:	f242 00c4 	movw	r0, #8388	@ 0x20c4
 8002b46:	f007 facf 	bl	800a0e8 <pvPortMalloc>
 8002b4a:	6178      	str	r0, [r7, #20]
	if(!fir_init_flag){
 8002b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b88 <fir_filter+0x54>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10a      	bne.n	8002b6a <fir_filter+0x36>
		arm_fir_init_f32(&fir_instance, num_coeff, (float32_t *)coeff, fir_state, block_size);
 8002b54:	8879      	ldrh	r1, [r7, #2]
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	480b      	ldr	r0, [pc, #44]	@ (8002b8c <fir_filter+0x58>)
 8002b60:	f00d fe94 	bl	801088c <arm_fir_init_f32>
		fir_init_flag = 1;
 8002b64:	4b08      	ldr	r3, [pc, #32]	@ (8002b88 <fir_filter+0x54>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	701a      	strb	r2, [r3, #0]
	}
	arm_fir_f32(&fir_instance, psrc, pdst, block_size);
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	68f9      	ldr	r1, [r7, #12]
 8002b70:	4806      	ldr	r0, [pc, #24]	@ (8002b8c <fir_filter+0x58>)
 8002b72:	f00d fe9d 	bl	80108b0 <arm_fir_f32>
	vPortFree(fir_state);
 8002b76:	6978      	ldr	r0, [r7, #20]
 8002b78:	f007 fb84 	bl	800a284 <vPortFree>
	fir_state = NULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
	return;
 8002b80:	bf00      	nop
}
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20000994 	.word	0x20000994
 8002b8c:	20000970 	.word	0x20000970

08002b90 <hamming_window>:

static void hamming_window(float32_t *psrc, size_t block_size){
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
	// Constantes para la ventana de hamming
	const float32_t alpha = 0.54f;
 8002b9a:	4b21      	ldr	r3, [pc, #132]	@ (8002c20 <hamming_window+0x90>)
 8002b9c:	613b      	str	r3, [r7, #16]
	const float32_t beta = 0.46f;
 8002b9e:	4b21      	ldr	r3, [pc, #132]	@ (8002c24 <hamming_window+0x94>)
 8002ba0:	60fb      	str	r3, [r7, #12]
	float32_t hamming_coeff;
	for(size_t i = 0; i < block_size; i++){
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	e033      	b.n	8002c10 <hamming_window+0x80>
		// Calculo el coeficiente de hamming para la muestra actual
		hamming_coeff = alpha - beta * arm_cos_f32((2.0f * PI * i) / (block_size - 1));
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	ee07 3a90 	vmov	s15, r3
 8002bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bb2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002c28 <hamming_window+0x98>
 8002bb6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	ee07 3a90 	vmov	s15, r3
 8002bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002bca:	eeb0 0a66 	vmov.f32	s0, s13
 8002bce:	f00e f9bb 	bl	8010f48 <arm_cos_f32>
 8002bd2:	eeb0 7a40 	vmov.f32	s14, s0
 8002bd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bde:	ed97 7a04 	vldr	s14, [r7, #16]
 8002be2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be6:	edc7 7a02 	vstr	s15, [r7, #8]
		// Aplico coeficiente de hamming a la muestra de la señal
		psrc[i] *= hamming_coeff;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	ed93 7a00 	vldr	s14, [r3]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c06:	edc3 7a00 	vstr	s15, [r3]
	for(size_t i = 0; i < block_size; i++){
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d3c7      	bcc.n	8002ba8 <hamming_window+0x18>
	}
	return;
 8002c18:	bf00      	nop
}
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	3f0a3d71 	.word	0x3f0a3d71
 8002c24:	3eeb851f 	.word	0x3eeb851f
 8002c28:	40c90fdb 	.word	0x40c90fdb

08002c2c <calculate_fft>:

static void calculate_fft(float32_t *psrc, float32_t *pdst, size_t block_size){
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
	static uint8_t fft_init_flag = 0;
	/*Inicializo la instancia de fft si corresponde*/
	if(!fft_init_flag){
 8002c38:	4b0b      	ldr	r3, [pc, #44]	@ (8002c68 <calculate_fft+0x3c>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d108      	bne.n	8002c52 <calculate_fft+0x26>
		arm_rfft_fast_init_f32(&fft_instance, block_size);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	4619      	mov	r1, r3
 8002c46:	4809      	ldr	r0, [pc, #36]	@ (8002c6c <calculate_fft+0x40>)
 8002c48:	f00d f92e 	bl	800fea8 <arm_rfft_fast_init_f32>
		fft_init_flag = 1;
 8002c4c:	4b06      	ldr	r3, [pc, #24]	@ (8002c68 <calculate_fft+0x3c>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]
	}
	/*Calculo la fft*/
	arm_rfft_fast_f32(&fft_instance, psrc, pdst, 0);					//El cero indica que se hace transformada, no antitransformada
 8002c52:	2300      	movs	r3, #0
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	68f9      	ldr	r1, [r7, #12]
 8002c58:	4804      	ldr	r0, [pc, #16]	@ (8002c6c <calculate_fft+0x40>)
 8002c5a:	f00d f9a9 	bl	800ffb0 <arm_rfft_fast_f32>
	return;
 8002c5e:	bf00      	nop
}
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20000995 	.word	0x20000995
 8002c6c:	2000097c 	.word	0x2000097c

08002c70 <normalize_array>:

static void normalize_array(float32_t *psrc, size_t block_size){
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
	float32_t min_val, max_val;
	uint32_t min_index, max_index;
	float32_t range;
	/*Encuentro el maximo y el minimo del array*/
	arm_min_f32(psrc, block_size, &min_val, &min_index);
 8002c7a:	f107 030c 	add.w	r3, r7, #12
 8002c7e:	f107 0214 	add.w	r2, r7, #20
 8002c82:	6839      	ldr	r1, [r7, #0]
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f00d f83f 	bl	800fd08 <arm_min_f32>
	arm_max_f32(psrc, block_size, &max_val, &max_index);
 8002c8a:	f107 0308 	add.w	r3, r7, #8
 8002c8e:	f107 0210 	add.w	r2, r7, #16
 8002c92:	6839      	ldr	r1, [r7, #0]
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f00d f89f 	bl	800fdd8 <arm_max_f32>
	/*Calculo el rango*/
	range = max_val - min_val;
 8002c9a:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ca2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ca6:	edc7 7a06 	vstr	s15, [r7, #24]
	/*Normalizo el array*/
	for(size_t i = 0; i < block_size; i++){
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	e016      	b.n	8002cde <normalize_array+0x6e>
		psrc[i] = (psrc[i] - min_val) / range;
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	ed93 7a00 	vldr	s14, [r3]
 8002cbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cc0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	4413      	add	r3, r2
 8002ccc:	ed97 7a06 	vldr	s14, [r7, #24]
 8002cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cd4:	edc3 7a00 	vstr	s15, [r3]
	for(size_t i = 0; i < block_size; i++){
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	61fb      	str	r3, [r7, #28]
 8002cde:	69fa      	ldr	r2, [r7, #28]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d3e4      	bcc.n	8002cb0 <normalize_array+0x40>
	}
	return;
 8002ce6:	bf00      	nop
}
 8002ce8:	3720      	adds	r7, #32
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <get_fft_norm_mag>:

static void get_fft_norm_mag(float32_t *psrc, float32_t *pdst, size_t block_size){
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b084      	sub	sp, #16
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
	/*Se tienen en cuenta la cantidad de numeros complejos, no de elementos en p_src*/
	/*Calculo la magnitud de la fft*/
	arm_cmplx_mag_f32(psrc, pdst, block_size);
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f00e f83a 	bl	8010d78 <arm_cmplx_mag_f32>
	/*Normalizo*/
	normalize_array(pdst, block_size);
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	68b8      	ldr	r0, [r7, #8]
 8002d08:	f7ff ffb2 	bl	8002c70 <normalize_array>
	return;
 8002d0c:	bf00      	nop
}
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <process_signal>:

void process_signal(float32_t *psrc, float32_t *pdst, size_t block_size){
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
	/*Reservo memoria para salida filtrada y filtro la señal.*/
	float32_t *filtered = pvPortMalloc(block_size * sizeof(float32_t));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f007 f9df 	bl	800a0e8 <pvPortMalloc>
 8002d2a:	6178      	str	r0, [r7, #20]
	fir_filter(psrc, filtered, filter_taps, NUM_TAPS, block_size);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	2332      	movs	r3, #50	@ 0x32
 8002d32:	4a14      	ldr	r2, [pc, #80]	@ (8002d84 <process_signal+0x70>)
 8002d34:	6979      	ldr	r1, [r7, #20]
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f7ff fefc 	bl	8002b34 <fir_filter>

	//Aplico ventana de hamming al vector
	hamming_window(filtered, block_size);
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	6978      	ldr	r0, [r7, #20]
 8002d40:	f7ff ff26 	bl	8002b90 <hamming_window>

	/*Reservo memoria para la salida de FFT y calculo la fft. Libero memoria de salida filtrada*/
	float32_t *fft_output = pvPortMalloc(block_size * sizeof(float32_t));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f007 f9cd 	bl	800a0e8 <pvPortMalloc>
 8002d4e:	6138      	str	r0, [r7, #16]
	calculate_fft(filtered, fft_output, block_size);
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6939      	ldr	r1, [r7, #16]
 8002d54:	6978      	ldr	r0, [r7, #20]
 8002d56:	f7ff ff69 	bl	8002c2c <calculate_fft>
	vPortFree(filtered);
 8002d5a:	6978      	ldr	r0, [r7, #20]
 8002d5c:	f007 fa92 	bl	800a284 <vPortFree>
	filtered = NULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]

	/*Calculo la magnitud de la fft y libero la memoria ocupada por la fft.*/
	get_fft_norm_mag(fft_output, pdst, block_size / 2);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	085b      	lsrs	r3, r3, #1
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68b9      	ldr	r1, [r7, #8]
 8002d6c:	6938      	ldr	r0, [r7, #16]
 8002d6e:	f7ff ffbe 	bl	8002cee <get_fft_norm_mag>
	vPortFree(fft_output);
 8002d72:	6938      	ldr	r0, [r7, #16]
 8002d74:	f007 fa86 	bl	800a284 <vPortFree>
	fft_output = NULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	613b      	str	r3, [r7, #16]
	return;
 8002d7c:	bf00      	nop
}
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	080143b8 	.word	0x080143b8

08002d88 <send_uart>:

extern UART_HandleTypeDef huart2;
extern RTC_HandleTypeDef hrtc;			//Handler del RTC


void send_uart(char *string){
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7fd fa85 	bl	80002a0 <strlen>
 8002d96:	4603      	mov	r3, r0
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4803      	ldr	r0, [pc, #12]	@ (8002db0 <send_uart+0x28>)
 8002da2:	f004 fe31 	bl	8007a08 <HAL_UART_Transmit>
	return;
 8002da6:	bf00      	nop
}
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	200004ac 	.word	0x200004ac

08002db4 <mount_sd>:
		send_uart(str);
	}
	return;
}

void mount_sd(char* path){
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4809      	ldr	r0, [pc, #36]	@ (8002de8 <mount_sd+0x34>)
 8002dc2:	f00b fb51 	bl	800e468 <f_mount>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4b08      	ldr	r3, [pc, #32]	@ (8002dec <mount_sd+0x38>)
 8002dcc:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8002dce:	4b07      	ldr	r3, [pc, #28]	@ (8002dec <mount_sd+0x38>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d004      	beq.n	8002de0 <mount_sd+0x2c>
		send_uart("Error al dmontar la tarjeta SD!!!\n");
 8002dd6:	4806      	ldr	r0, [pc, #24]	@ (8002df0 <mount_sd+0x3c>)
 8002dd8:	f7ff ffd6 	bl	8002d88 <send_uart>
		while(1);
 8002ddc:	bf00      	nop
 8002dde:	e7fd      	b.n	8002ddc <mount_sd+0x28>
	}
	return;
 8002de0:	bf00      	nop
}
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20000998 	.word	0x20000998
 8002dec:	20000e28 	.word	0x20000e28
 8002df0:	080121bc 	.word	0x080121bc

08002df4 <unmount_sd>:

void unmount_sd(char* path){
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 0);
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	2000      	movs	r0, #0
 8002e02:	f00b fb31 	bl	800e468 <f_mount>
 8002e06:	4603      	mov	r3, r0
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4b07      	ldr	r3, [pc, #28]	@ (8002e28 <unmount_sd+0x34>)
 8002e0c:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8002e0e:	4b06      	ldr	r3, [pc, #24]	@ (8002e28 <unmount_sd+0x34>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d004      	beq.n	8002e20 <unmount_sd+0x2c>
		send_uart("Error al desmontar la tarjeta SD!!!\n");
 8002e16:	4805      	ldr	r0, [pc, #20]	@ (8002e2c <unmount_sd+0x38>)
 8002e18:	f7ff ffb6 	bl	8002d88 <send_uart>
		while(1);
 8002e1c:	bf00      	nop
 8002e1e:	e7fd      	b.n	8002e1c <unmount_sd+0x28>
	}
}
 8002e20:	bf00      	nop
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	20000e28 	.word	0x20000e28
 8002e2c:	080121e0 	.word	0x080121e0

08002e30 <save_buffer_on_sd>:
	strcat(rtc_lecture, time);
	vPortFree(time);
	return;
}

FRESULT save_buffer_on_sd(char *filename, float *buffer, size_t size){
 8002e30:	b580      	push	{r7, lr}
 8002e32:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002e3c:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002e40:	6018      	str	r0, [r3, #0]
 8002e42:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002e46:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8002e4a:	6019      	str	r1, [r3, #0]
 8002e4c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002e50:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8002e54:	601a      	str	r2, [r3, #0]
	 * Es importante que el archivo sea .bin, ya que es más conveniente guardar
	 * los datos en este formato (ocupa menos espacio y es más directa la escritura).
	 */
	//Abro el archivo
	FIL fil;
	fresult = f_open(&fil, filename, FA_OPEN_APPEND | FA_WRITE);						//Se abre con append por si es necesario seguir escribiendo desde el final
 8002e56:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002e5a:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002e5e:	f107 0010 	add.w	r0, r7, #16
 8002e62:	2232      	movs	r2, #50	@ 0x32
 8002e64:	6819      	ldr	r1, [r3, #0]
 8002e66:	f00b fb51 	bl	800e50c <f_open>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4b24      	ldr	r3, [pc, #144]	@ (8002f00 <save_buffer_on_sd+0xd0>)
 8002e70:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8002e72:	4b23      	ldr	r3, [pc, #140]	@ (8002f00 <save_buffer_on_sd+0xd0>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <save_buffer_on_sd+0x50>
		return fresult;
 8002e7a:	4b21      	ldr	r3, [pc, #132]	@ (8002f00 <save_buffer_on_sd+0xd0>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	e039      	b.n	8002ef4 <save_buffer_on_sd+0xc4>
	}
	//Escribo los datos del buffer en el archivo
	fresult = f_write(&fil, buffer, FLOAT_SIZE_BYTES(size), &bw);
 8002e80:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002e84:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	009a      	lsls	r2, r3, #2
 8002e8c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002e90:	f5a3 7116 	sub.w	r1, r3, #600	@ 0x258
 8002e94:	f107 0010 	add.w	r0, r7, #16
 8002e98:	4b1a      	ldr	r3, [pc, #104]	@ (8002f04 <save_buffer_on_sd+0xd4>)
 8002e9a:	6809      	ldr	r1, [r1, #0]
 8002e9c:	f00b fede 	bl	800ec5c <f_write>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	4b16      	ldr	r3, [pc, #88]	@ (8002f00 <save_buffer_on_sd+0xd0>)
 8002ea6:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK || bw < FLOAT_SIZE_BYTES(size)){
 8002ea8:	4b15      	ldr	r3, [pc, #84]	@ (8002f00 <save_buffer_on_sd+0xd0>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d109      	bne.n	8002ec4 <save_buffer_on_sd+0x94>
 8002eb0:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002eb4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	009a      	lsls	r2, r3, #2
 8002ebc:	4b11      	ldr	r3, [pc, #68]	@ (8002f04 <save_buffer_on_sd+0xd4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d90d      	bls.n	8002ee0 <save_buffer_on_sd+0xb0>
		f_close(&fil);																	//Frente a un error cierro el archivo y salgo de la funcion
 8002ec4:	f107 0310 	add.w	r3, r7, #16
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f00c f98d 	bl	800f1e8 <f_close>
		return (fresult != FR_OK) ? fresult : FR_DISK_ERR;								//Si se escribieron bytes de menos, devuelve FR_DISK_ERR
 8002ece:	4b0c      	ldr	r3, [pc, #48]	@ (8002f00 <save_buffer_on_sd+0xd0>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <save_buffer_on_sd+0xac>
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8002f00 <save_buffer_on_sd+0xd0>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	e00b      	b.n	8002ef4 <save_buffer_on_sd+0xc4>
 8002edc:	2301      	movs	r3, #1
 8002ede:	e009      	b.n	8002ef4 <save_buffer_on_sd+0xc4>
	}

	//Cierro el archivo
	fresult = f_close(&fil);
 8002ee0:	f107 0310 	add.w	r3, r7, #16
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f00c f97f 	bl	800f1e8 <f_close>
 8002eea:	4603      	mov	r3, r0
 8002eec:	461a      	mov	r2, r3
 8002eee:	4b04      	ldr	r3, [pc, #16]	@ (8002f00 <save_buffer_on_sd+0xd0>)
 8002ef0:	701a      	strb	r2, [r3, #0]
	return FR_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f507 7718 	add.w	r7, r7, #608	@ 0x260
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20000e28 	.word	0x20000e28
 8002f04:	20000e30 	.word	0x20000e30

08002f08 <read_buffer_from_sd>:

FRESULT read_buffer_from_sd(char *filename, float *buffer, size_t size, uint32_t current_pos){
 8002f08:	b5b0      	push	{r4, r5, r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
	 * La funcion esta pensada para leer de a bloques iguales, no guarda la ultima
	 * posicion del puntero de lectura, se debe llevar cuenta externamente.
	 */

	//Abro el archivo
	fresult = f_open(&fil, filename, FA_READ);
 8002f16:	2201      	movs	r2, #1
 8002f18:	68f9      	ldr	r1, [r7, #12]
 8002f1a:	4823      	ldr	r0, [pc, #140]	@ (8002fa8 <read_buffer_from_sd+0xa0>)
 8002f1c:	f00b faf6 	bl	800e50c <f_open>
 8002f20:	4603      	mov	r3, r0
 8002f22:	461a      	mov	r2, r3
 8002f24:	4b21      	ldr	r3, [pc, #132]	@ (8002fac <read_buffer_from_sd+0xa4>)
 8002f26:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8002f28:	4b20      	ldr	r3, [pc, #128]	@ (8002fac <read_buffer_from_sd+0xa4>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <read_buffer_from_sd+0x2e>
		return fresult;
 8002f30:	4b1e      	ldr	r3, [pc, #120]	@ (8002fac <read_buffer_from_sd+0xa4>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	e033      	b.n	8002f9e <read_buffer_from_sd+0x96>
	}

	//Posiciono el puntero de lectura en el archivo
	fresult = f_lseek(&fil, current_pos);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	461c      	mov	r4, r3
 8002f3c:	4615      	mov	r5, r2
 8002f3e:	4622      	mov	r2, r4
 8002f40:	462b      	mov	r3, r5
 8002f42:	4819      	ldr	r0, [pc, #100]	@ (8002fa8 <read_buffer_from_sd+0xa0>)
 8002f44:	f00c f970 	bl	800f228 <f_lseek>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4b17      	ldr	r3, [pc, #92]	@ (8002fac <read_buffer_from_sd+0xa4>)
 8002f4e:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8002f50:	4b16      	ldr	r3, [pc, #88]	@ (8002fac <read_buffer_from_sd+0xa4>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <read_buffer_from_sd+0x5c>
		f_close(&fil);
 8002f58:	4813      	ldr	r0, [pc, #76]	@ (8002fa8 <read_buffer_from_sd+0xa0>)
 8002f5a:	f00c f945 	bl	800f1e8 <f_close>
		return fresult;
 8002f5e:	4b13      	ldr	r3, [pc, #76]	@ (8002fac <read_buffer_from_sd+0xa4>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	e01c      	b.n	8002f9e <read_buffer_from_sd+0x96>
	}

	//Leo el bloque de tamaño size desde el archivo
	fresult = f_read(&fil, buffer, FLOAT_SIZE_BYTES(size), &br);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	009a      	lsls	r2, r3, #2
 8002f68:	4b11      	ldr	r3, [pc, #68]	@ (8002fb0 <read_buffer_from_sd+0xa8>)
 8002f6a:	68b9      	ldr	r1, [r7, #8]
 8002f6c:	480e      	ldr	r0, [pc, #56]	@ (8002fa8 <read_buffer_from_sd+0xa0>)
 8002f6e:	f00b fd09 	bl	800e984 <f_read>
 8002f72:	4603      	mov	r3, r0
 8002f74:	461a      	mov	r2, r3
 8002f76:	4b0d      	ldr	r3, [pc, #52]	@ (8002fac <read_buffer_from_sd+0xa4>)
 8002f78:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002fac <read_buffer_from_sd+0xa4>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d005      	beq.n	8002f8e <read_buffer_from_sd+0x86>
		f_close(&fil);
 8002f82:	4809      	ldr	r0, [pc, #36]	@ (8002fa8 <read_buffer_from_sd+0xa0>)
 8002f84:	f00c f930 	bl	800f1e8 <f_close>
		return fresult;
 8002f88:	4b08      	ldr	r3, [pc, #32]	@ (8002fac <read_buffer_from_sd+0xa4>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	e007      	b.n	8002f9e <read_buffer_from_sd+0x96>
	}

	//Cierro el archivo
	fresult = f_close(&fil);
 8002f8e:	4806      	ldr	r0, [pc, #24]	@ (8002fa8 <read_buffer_from_sd+0xa0>)
 8002f90:	f00c f92a 	bl	800f1e8 <f_close>
 8002f94:	4603      	mov	r3, r0
 8002f96:	461a      	mov	r2, r3
 8002f98:	4b04      	ldr	r3, [pc, #16]	@ (8002fac <read_buffer_from_sd+0xa4>)
 8002f9a:	701a      	strb	r2, [r3, #0]
	return FR_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000bd8 	.word	0x20000bd8
 8002fac:	20000e28 	.word	0x20000e28
 8002fb0:	20000e2c 	.word	0x20000e2c

08002fb4 <check_for_dir>:
	//Si se llego al final sin encontrar el usuario, devuelve mensaje de error
	fresult = f_close(&fil);
	return FR_NO_FILE;												//Devuelve FR_NO_FILE si no se encuentra el usuario
}

FRESULT check_for_dir(char *filename){
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b098      	sub	sp, #96	@ 0x60
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
	DIR dir;
	FRESULT res;
	fresult = f_opendir(&dir, filename);
 8002fbc:	f107 0308 	add.w	r3, r7, #8
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f00c fb75 	bl	800f6b2 <f_opendir>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	461a      	mov	r2, r3
 8002fcc:	4b13      	ldr	r3, [pc, #76]	@ (800301c <check_for_dir+0x68>)
 8002fce:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8002fd0:	4b12      	ldr	r3, [pc, #72]	@ (800301c <check_for_dir+0x68>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d012      	beq.n	8002ffe <check_for_dir+0x4a>
		//Si no existe el directorio, lo creo
		fresult = f_mkdir(filename);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f00c fbf9 	bl	800f7d0 <f_mkdir>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800301c <check_for_dir+0x68>)
 8002fe4:	701a      	strb	r2, [r3, #0]
		if(fresult != FR_OK){
 8002fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800301c <check_for_dir+0x68>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <check_for_dir+0x42>
			//Devuelve FR_NO_PATH si no pudo crearse
			res = FR_NO_PATH;
 8002fee:	2305      	movs	r3, #5
 8002ff0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002ff4:	e00b      	b.n	800300e <check_for_dir+0x5a>
		}
		else{
			//Si se pudo crear el directorio, devuelvo OK
			res = FR_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002ffc:	e007      	b.n	800300e <check_for_dir+0x5a>
		}
	}
	else{
		//Si existe, cierro el directorio y devuelve OK
		f_closedir(&dir);
 8002ffe:	f107 0308 	add.w	r3, r7, #8
 8003002:	4618      	mov	r0, r3
 8003004:	f00c fbcc 	bl	800f7a0 <f_closedir>
		res = FR_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	}
	return res;
 800300e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8003012:	4618      	mov	r0, r3
 8003014:	3760      	adds	r7, #96	@ 0x60
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000e28 	.word	0x20000e28

08003020 <clear_buffer>:
#include "utils.h"
//Funciones utiles
void clear_buffer(char *buffer, size_t length) {
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
    if (buffer == NULL) {
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00f      	beq.n	8003050 <clear_buffer+0x30>
        return; // Verifica que el puntero no sea nulo
    }
    for (size_t i = 0; i < length; i++) {
 8003030:	2300      	movs	r3, #0
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	e007      	b.n	8003046 <clear_buffer+0x26>
        buffer[i] = '\0'; // Llena el buffer con caracteres nulos
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4413      	add	r3, r2
 800303c:	2200      	movs	r2, #0
 800303e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < length; i++) {
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	3301      	adds	r3, #1
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d3f3      	bcc.n	8003036 <clear_buffer+0x16>
 800304e:	e000      	b.n	8003052 <clear_buffer+0x32>
        return; // Verifica que el puntero no sea nulo
 8003050:	bf00      	nop
    }
}
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <display_task>:
	}
}

#elif DISPLAY_FUNCTION == 1
//Version funcional que utiliza el control de acceso
void display_task(void *pvParameters){
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
	indicatorMessage display_message;
	uint8_t counter = 0;
 8003064:	2300      	movs	r3, #0
 8003066:	73fb      	strb	r3, [r7, #15]
	display_init();						//Inicializo el display
 8003068:	f7fe fe10 	bl	8001c8c <display_init>
	display_start_msg();				//Muestro mensaje inicial
 800306c:	f7fe fe14 	bl	8001c98 <display_start_msg>
	while(1){
		xQueueReceive(display_queue, &display_message, portMAX_DELAY);
 8003070:	4b67      	ldr	r3, [pc, #412]	@ (8003210 <display_task+0x1b4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f107 010e 	add.w	r1, r7, #14
 8003078:	f04f 32ff 	mov.w	r2, #4294967295
 800307c:	4618      	mov	r0, r3
 800307e:	f005 faf9 	bl	8008674 <xQueueReceive>
		switch(display_message){
 8003082:	7bbb      	ldrb	r3, [r7, #14]
 8003084:	3b01      	subs	r3, #1
 8003086:	2b0e      	cmp	r3, #14
 8003088:	d8f2      	bhi.n	8003070 <display_task+0x14>
 800308a:	a201      	add	r2, pc, #4	@ (adr r2, 8003090 <display_task+0x34>)
 800308c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003090:	080030cd 	.word	0x080030cd
 8003094:	080030d3 	.word	0x080030d3
 8003098:	080030eb 	.word	0x080030eb
 800309c:	08003103 	.word	0x08003103
 80030a0:	08003131 	.word	0x08003131
 80030a4:	08003143 	.word	0x08003143
 80030a8:	08003175 	.word	0x08003175
 80030ac:	08003183 	.word	0x08003183
 80030b0:	080031bb 	.word	0x080031bb
 80030b4:	080031c9 	.word	0x080031c9
 80030b8:	080031db 	.word	0x080031db
 80030bc:	080031f3 	.word	0x080031f3
 80030c0:	080031ed 	.word	0x080031ed
 80030c4:	080031ad 	.word	0x080031ad
 80030c8:	08003201 	.word	0x08003201
		case PANTALLA_DE_INICIO:
			display_start_msg();
 80030cc:	f7fe fde4 	bl	8001c98 <display_start_msg>
			break;
 80030d0:	e09d      	b.n	800320e <display_task+0x1b2>
		case PANTALLA_INGRESO_KEYPAD:
			if(counter < MAX_DIGITS){
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b05      	cmp	r3, #5
 80030d6:	f200 8096 	bhi.w	8003206 <display_task+0x1aa>
				counter++;
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	3301      	adds	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
				display_sequence_entry_msg(counter);
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fe fe0e 	bl	8001d04 <display_sequence_entry_msg>
			}
			break;
 80030e8:	e08d      	b.n	8003206 <display_task+0x1aa>
		case PANTALLA_BORRAR_KEYPAD:
			if(counter > 0){
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 808c 	beq.w	800320a <display_task+0x1ae>
				counter--;
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	3b01      	subs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
				display_sequence_entry_msg(counter);
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe fe02 	bl	8001d04 <display_sequence_entry_msg>
			}
			break;
 8003100:	e083      	b.n	800320a <display_task+0x1ae>
		case PANTALLA_USUARIO_ENCONTRADO:
			xSemaphoreTake(sd_display_sync, portMAX_DELAY);			//Se utiliza para sincronizar las tareas sd y display
 8003102:	4b44      	ldr	r3, [pc, #272]	@ (8003214 <display_task+0x1b8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f04f 31ff 	mov.w	r1, #4294967295
 800310a:	4618      	mov	r0, r3
 800310c:	f005 fb94 	bl	8008838 <xQueueSemaphoreTake>
			display_user_found_msg();
 8003110:	f7fe fed8 	bl	8001ec4 <display_user_found_msg>
			counter = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8003118:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800311c:	f005 ff5c 	bl	8008fd8 <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 8003120:	4b3c      	ldr	r3, [pc, #240]	@ (8003214 <display_task+0x1b8>)
 8003122:	6818      	ldr	r0, [r3, #0]
 8003124:	2300      	movs	r3, #0
 8003126:	2200      	movs	r2, #0
 8003128:	2100      	movs	r1, #0
 800312a:	f005 f9a1 	bl	8008470 <xQueueGenericSend>
			break;
 800312e:	e06e      	b.n	800320e <display_task+0x1b2>
		case PANTALLA_USUARIO_NO_EXISTE:
			display_user_not_found_msg();
 8003130:	f7fe fefe 	bl	8001f30 <display_user_not_found_msg>
			counter = 0;							//Reinicio el contador
 8003134:	2300      	movs	r3, #0
 8003136:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8003138:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800313c:	f005 ff4c 	bl	8008fd8 <vTaskDelay>
			break;
 8003140:	e065      	b.n	800320e <display_task+0x1b2>
		case PANTALLA_RECONOCIMIENTO_DE_VOZ:
			xSemaphoreTake(sd_display_sync, portMAX_DELAY);
 8003142:	4b34      	ldr	r3, [pc, #208]	@ (8003214 <display_task+0x1b8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f04f 31ff 	mov.w	r1, #4294967295
 800314a:	4618      	mov	r0, r3
 800314c:	f005 fb74 	bl	8008838 <xQueueSemaphoreTake>
			display_start_voice_recognition_msg();
 8003150:	f7fe ff38 	bl	8001fc4 <display_start_voice_recognition_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8003154:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003158:	f005 ff3e 	bl	8008fd8 <vTaskDelay>
			countdown_msg();
 800315c:	f7fe ff7c 	bl	8002058 <countdown_msg>
			display_capturing_voice_msg();
 8003160:	f7fe ffd0 	bl	8002104 <display_capturing_voice_msg>
			xSemaphoreGive(sd_display_sync);
 8003164:	4b2b      	ldr	r3, [pc, #172]	@ (8003214 <display_task+0x1b8>)
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	2300      	movs	r3, #0
 800316a:	2200      	movs	r2, #0
 800316c:	2100      	movs	r1, #0
 800316e:	f005 f97f 	bl	8008470 <xQueueGenericSend>
			break;
 8003172:	e04c      	b.n	800320e <display_task+0x1b2>
		case PANTALLA_VOZ_RECONOCIDA:
			display_recognized_voice_msg();
 8003174:	f7fe fffc 	bl	8002170 <display_recognized_voice_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8003178:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800317c:	f005 ff2c 	bl	8008fd8 <vTaskDelay>
			break;
 8003180:	e045      	b.n	800320e <display_task+0x1b2>
		case PANTALLA_VOZ_NO_RECONOCIDA:
			display_not_recognized_voice_msg();
 8003182:	f7ff f82b 	bl	80021dc <display_not_recognized_voice_msg>
			xSemaphoreTake(sd_display_sync, portMAX_DELAY);
 8003186:	4b23      	ldr	r3, [pc, #140]	@ (8003214 <display_task+0x1b8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f04f 31ff 	mov.w	r1, #4294967295
 800318e:	4618      	mov	r0, r3
 8003190:	f005 fb52 	bl	8008838 <xQueueSemaphoreTake>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8003194:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003198:	f005 ff1e 	bl	8008fd8 <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 800319c:	4b1d      	ldr	r3, [pc, #116]	@ (8003214 <display_task+0x1b8>)
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	2300      	movs	r3, #0
 80031a2:	2200      	movs	r2, #0
 80031a4:	2100      	movs	r1, #0
 80031a6:	f005 f963 	bl	8008470 <xQueueGenericSend>
			break;
 80031aa:	e030      	b.n	800320e <display_task+0x1b2>
		case PANTALLA_PROCESANDO_DATOS:
			display_processing_data_msg();
 80031ac:	f7ff f84c 	bl	8002248 <display_processing_data_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 80031b0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80031b4:	f005 ff10 	bl	8008fd8 <vTaskDelay>
			break;
 80031b8:	e029      	b.n	800320e <display_task+0x1b2>
		case PANTALLA_ACCESO_CONCEDIDO:
			display_access_granted_msg();
 80031ba:	f7fe fe4f 	bl	8001e5c <display_access_granted_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 80031be:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80031c2:	f005 ff09 	bl	8008fd8 <vTaskDelay>
			break;
 80031c6:	e022      	b.n	800320e <display_task+0x1b2>
		case PANTALLA_TIMEOUT:
			display_timeout_msg();
 80031c8:	f7fe fddc 	bl	8001d84 <display_timeout_msg>
			counter = 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 80031d0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80031d4:	f005 ff00 	bl	8008fd8 <vTaskDelay>
			break;
 80031d8:	e019      	b.n	800320e <display_task+0x1b2>
		case PANTALLA_SECUENCIA_INCOMPLETA:
			display_incomplete_entry_msg();
 80031da:	f7fe fdf5 	bl	8001dc8 <display_incomplete_entry_msg>
			counter = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 80031e2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80031e6:	f005 fef7 	bl	8008fd8 <vTaskDelay>
			break;
 80031ea:	e010      	b.n	800320e <display_task+0x1b2>
		case PANTALLA_DATABASE_NO_EXISTE:
			display_missing_database_msg();
 80031ec:	f7ff f862 	bl	80022b4 <display_missing_database_msg>
			break;
 80031f0:	e00d      	b.n	800320e <display_task+0x1b2>
		case PANTALLA_TEMPLATE_NO_EXISTE:
			display_missing_template_msg();
 80031f2:	f7ff f895 	bl	8002320 <display_missing_template_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 80031f6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80031fa:	f005 feed 	bl	8008fd8 <vTaskDelay>
			break;
 80031fe:	e006      	b.n	800320e <display_task+0x1b2>
		case PANTALLA_TEMPLATE_GUARDADO:
			display_template_saved_msg();
 8003200:	f7ff f8c4 	bl	800238c <display_template_saved_msg>
			break;
 8003204:	e003      	b.n	800320e <display_task+0x1b2>
			break;
 8003206:	bf00      	nop
 8003208:	e732      	b.n	8003070 <display_task+0x14>
			break;
 800320a:	bf00      	nop
 800320c:	e730      	b.n	8003070 <display_task+0x14>
		xQueueReceive(display_queue, &display_message, portMAX_DELAY);
 800320e:	e72f      	b.n	8003070 <display_task+0x14>
 8003210:	200004f8 	.word	0x200004f8
 8003214:	20000500 	.word	0x20000500

08003218 <keypad_task>:
#include "input_sequence_handle.h"
#include "display_functions.h"

char kp_buffer[SEQUENCE_LENGTH + 1] = {0};
/*================[Public Task]=====================*/
void keypad_task(void *pvParameters){
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
	char input;
	uint8_t send_flag = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	737b      	strb	r3, [r7, #13]
	indicatorMessage display_message;
	while(1){
		input = read_keypad();
 8003224:	f7ff fc24 	bl	8002a70 <read_keypad>
 8003228:	4603      	mov	r3, r0
 800322a:	73bb      	strb	r3, [r7, #14]
		display_message = handle_keypad_input(input, kp_buffer, &send_flag);
 800322c:	f107 020d 	add.w	r2, r7, #13
 8003230:	7bbb      	ldrb	r3, [r7, #14]
 8003232:	491c      	ldr	r1, [pc, #112]	@ (80032a4 <keypad_task+0x8c>)
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fb17 	bl	8002868 <handle_keypad_input>
 800323a:	4603      	mov	r3, r0
 800323c:	733b      	strb	r3, [r7, #12]
		if(send_flag){
 800323e:	7b7b      	ldrb	r3, [r7, #13]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d022      	beq.n	800328a <keypad_task+0x72>
			//Doy el semaforo
			xSemaphoreGive(keypad_sd_sync);
 8003244:	4b18      	ldr	r3, [pc, #96]	@ (80032a8 <keypad_task+0x90>)
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	2300      	movs	r3, #0
 800324a:	2200      	movs	r2, #0
 800324c:	2100      	movs	r1, #0
 800324e:	f005 f90f 	bl	8008470 <xQueueGenericSend>
			//Envio uno por uno los datos del buffer
			for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 8003252:	2300      	movs	r3, #0
 8003254:	73fb      	strb	r3, [r7, #15]
 8003256:	e00c      	b.n	8003272 <keypad_task+0x5a>
				xQueueSend(sequence_queue, &kp_buffer[i], portMAX_DELAY);
 8003258:	4b14      	ldr	r3, [pc, #80]	@ (80032ac <keypad_task+0x94>)
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	4a11      	ldr	r2, [pc, #68]	@ (80032a4 <keypad_task+0x8c>)
 8003260:	1899      	adds	r1, r3, r2
 8003262:	2300      	movs	r3, #0
 8003264:	f04f 32ff 	mov.w	r2, #4294967295
 8003268:	f005 f902 	bl	8008470 <xQueueGenericSend>
			for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	3301      	adds	r3, #1
 8003270:	73fb      	strb	r3, [r7, #15]
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	2b06      	cmp	r3, #6
 8003276:	d9ef      	bls.n	8003258 <keypad_task+0x40>
			}

			//Bloqueo la tarea keypad hasta que
			xSemaphoreTake(keypad_sd_sync, portMAX_DELAY);
 8003278:	4b0b      	ldr	r3, [pc, #44]	@ (80032a8 <keypad_task+0x90>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f04f 31ff 	mov.w	r1, #4294967295
 8003280:	4618      	mov	r0, r3
 8003282:	f005 fad9 	bl	8008838 <xQueueSemaphoreTake>
			//Reinicio el flag de envio
			send_flag = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	737b      	strb	r3, [r7, #13]
		}
		//Envio el mensaje a la tarea display si no hay pantalla idle
		if(display_message != PANTALLA_IDLE){
 800328a:	7b3b      	ldrb	r3, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0c9      	beq.n	8003224 <keypad_task+0xc>
			xQueueSend(display_queue, &display_message, portMAX_DELAY);
 8003290:	4b07      	ldr	r3, [pc, #28]	@ (80032b0 <keypad_task+0x98>)
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	f107 010c 	add.w	r1, r7, #12
 8003298:	2300      	movs	r3, #0
 800329a:	f04f 32ff 	mov.w	r2, #4294967295
 800329e:	f005 f8e7 	bl	8008470 <xQueueGenericSend>
		input = read_keypad();
 80032a2:	e7bf      	b.n	8003224 <keypad_task+0xc>
 80032a4:	20000e34 	.word	0x20000e34
 80032a8:	200004fc 	.word	0x200004fc
 80032ac:	200004f4 	.word	0x200004f4
 80032b0:	200004f8 	.word	0x200004f8

080032b4 <sd_task>:
	}
}

#elif CODE_VERSION == 2
//Template generator
void sd_task(void *pvParameters){
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b090      	sub	sp, #64	@ 0x40
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
	uint16_t *voice_buffer;
	float *current_block;
	float *template;
	float *aux;
	float *voice_1, *voice_2, *voice_3, *voice_4, *voice_5;
	char *filename = pvPortMalloc(DIR_STR_SIZE * sizeof(char));
 80032bc:	2014      	movs	r0, #20
 80032be:	f006 ff13 	bl	800a0e8 <pvPortMalloc>
 80032c2:	63b8      	str	r0, [r7, #56]	@ 0x38
	char *dir = pvPortMalloc(DIR_STR_SIZE * sizeof(char));
 80032c4:	2014      	movs	r0, #20
 80032c6:	f006 ff0f 	bl	800a0e8 <pvPortMalloc>
 80032ca:	6378      	str	r0, [r7, #52]	@ 0x34
	snprintf(dir, DIR_STR_SIZE, "/voces_template");
 80032cc:	4ac3      	ldr	r2, [pc, #780]	@ (80035dc <sd_task+0x328>)
 80032ce:	2114      	movs	r1, #20
 80032d0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80032d2:	f00e f9d7 	bl	8011684 <sniprintf>

	//Chequeo que exista la carpeta, sino la crea
	mount_sd("");
 80032d6:	48c2      	ldr	r0, [pc, #776]	@ (80035e0 <sd_task+0x32c>)
 80032d8:	f7ff fd6c 	bl	8002db4 <mount_sd>
	if(check_for_dir(dir) == FR_OK){
 80032dc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80032de:	f7ff fe69 	bl	8002fb4 <check_for_dir>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f040 8176 	bne.w	80035d6 <sd_task+0x322>
		voice_buffer = pvPortMalloc(VOICE_BUFFER_SIZE * sizeof(uint16_t));
 80032ea:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 80032ee:	f006 fefb 	bl	800a0e8 <pvPortMalloc>
 80032f2:	6338      	str	r0, [r7, #48]	@ 0x30
		current_block = pvPortMalloc(BLOCK_SIZE * sizeof(float));
 80032f4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80032f8:	f006 fef6 	bl	800a0e8 <pvPortMalloc>
 80032fc:	62f8      	str	r0, [r7, #44]	@ 0x2c
		for(uint8_t i = 0; i < TEMPLATE_SAMPLES; i++){
 80032fe:	2300      	movs	r3, #0
 8003300:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003304:	e05e      	b.n	80033c4 <sd_task+0x110>
			//Si existe el template, realizo reconocimiento de voz
			current_message = PANTALLA_RECONOCIMIENTO_DE_VOZ;
 8003306:	2306      	movs	r3, #6
 8003308:	73fb      	strb	r3, [r7, #15]

			//Sincronizo tarea de display y memoria SD
			xSemaphoreGive(sd_display_sync);
 800330a:	4bb6      	ldr	r3, [pc, #728]	@ (80035e4 <sd_task+0x330>)
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	2300      	movs	r3, #0
 8003310:	2200      	movs	r2, #0
 8003312:	2100      	movs	r1, #0
 8003314:	f005 f8ac 	bl	8008470 <xQueueGenericSend>

			//Envio pantalla al display
			xQueueSend(display_queue, &current_message, portMAX_DELAY);						//Envio el evento de reconocimiento al display
 8003318:	4bb3      	ldr	r3, [pc, #716]	@ (80035e8 <sd_task+0x334>)
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	f107 010f 	add.w	r1, r7, #15
 8003320:	2300      	movs	r3, #0
 8003322:	f04f 32ff 	mov.w	r2, #4294967295
 8003326:	f005 f8a3 	bl	8008470 <xQueueGenericSend>

			//Bloqueo la tarea hasta que el display termine el conteo
			xSemaphoreTake(sd_display_sync, portMAX_DELAY);									//Bloqueo la tarea hasta que el display me devuelva el semaforo
 800332a:	4bae      	ldr	r3, [pc, #696]	@ (80035e4 <sd_task+0x330>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f04f 31ff 	mov.w	r1, #4294967295
 8003332:	4618      	mov	r0, r3
 8003334:	f005 fa80 	bl	8008838 <xQueueSemaphoreTake>
																											//despues del countdown.

			//Capturo 1.5 segundos de voz

			capture_voice(voice_buffer, VOICE_BUFFER_SIZE);
 8003338:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 800333c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800333e:	f7fe fc4b 	bl	8001bd8 <capture_voice>
			while(!conv_cplt_flag);															//Espero a que termine la captura
 8003342:	bf00      	nop
 8003344:	4ba9      	ldr	r3, [pc, #676]	@ (80035ec <sd_task+0x338>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	f083 0301 	eor.w	r3, r3, #1
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1f7      	bne.n	8003344 <sd_task+0x90>
			conv_cplt_flag = false;
 8003354:	4ba5      	ldr	r3, [pc, #660]	@ (80035ec <sd_task+0x338>)
 8003356:	2200      	movs	r2, #0
 8003358:	701a      	strb	r2, [r3, #0]

			//Mandar cartel procesando valores
			current_message = PANTALLA_PROCESANDO_DATOS;
 800335a:	230e      	movs	r3, #14
 800335c:	73fb      	strb	r3, [r7, #15]
			xQueueSend(display_queue, &current_message, portMAX_DELAY);
 800335e:	4ba2      	ldr	r3, [pc, #648]	@ (80035e8 <sd_task+0x334>)
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	f107 010f 	add.w	r1, r7, #15
 8003366:	2300      	movs	r3, #0
 8003368:	f04f 32ff 	mov.w	r2, #4294967295
 800336c:	f005 f880 	bl	8008470 <xQueueGenericSend>

			//Convierto los valores a tension y los guardo en la memoria SD
			snprintf(filename, DIR_STR_SIZE, "voice_%d.bin", i);							//Nombre del archivo a guardar
 8003370:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003374:	4a9e      	ldr	r2, [pc, #632]	@ (80035f0 <sd_task+0x33c>)
 8003376:	2114      	movs	r1, #20
 8003378:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800337a:	f00e f983 	bl	8011684 <sniprintf>
			for(uint8_t j = 0; j < NUM_OF_BLOCKS; j++){
 800337e:	2300      	movs	r3, #0
 8003380:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8003384:	e015      	b.n	80033b2 <sd_task+0xfe>
				//La conversion es por bloques para ahorrar espacio
				get_voltage(&voice_buffer[j * BLOCK_SIZE], current_block, BLOCK_SIZE);
 8003386:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800338a:	031b      	lsls	r3, r3, #12
 800338c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800338e:	4413      	add	r3, r2
 8003390:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003394:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003396:	4618      	mov	r0, r3
 8003398:	f7fe fc36 	bl	8001c08 <get_voltage>
				save_buffer_on_sd(filename, current_block, BLOCK_SIZE);
 800339c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80033a4:	f7ff fd44 	bl	8002e30 <save_buffer_on_sd>
			for(uint8_t j = 0; j < NUM_OF_BLOCKS; j++){
 80033a8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80033ac:	3301      	adds	r3, #1
 80033ae:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80033b2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d9e5      	bls.n	8003386 <sd_task+0xd2>
		for(uint8_t i = 0; i < TEMPLATE_SAMPLES; i++){
 80033ba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80033be:	3301      	adds	r3, #1
 80033c0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80033c4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d99c      	bls.n	8003306 <sd_task+0x52>
			}
		}

		//Libero memoria utilizada
		vPortFree(voice_buffer);
 80033cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033ce:	f006 ff59 	bl	800a284 <vPortFree>
		vPortFree(current_block);
 80033d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80033d4:	f006 ff56 	bl	800a284 <vPortFree>
		voice_buffer = NULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	633b      	str	r3, [r7, #48]	@ 0x30
		current_block = NULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	62fb      	str	r3, [r7, #44]	@ 0x2c

		//Proceso de a bloques cada uno de los archivos, y promedio
		template = pvPortMalloc(FLOAT_SIZE_BYTES(BLOCK_SIZE / 2));
 80033e0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80033e4:	f006 fe80 	bl	800a0e8 <pvPortMalloc>
 80033e8:	62b8      	str	r0, [r7, #40]	@ 0x28
		aux = pvPortMalloc(FLOAT_SIZE_BYTES(BLOCK_SIZE / 2));
 80033ea:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80033ee:	f006 fe7b 	bl	800a0e8 <pvPortMalloc>
 80033f2:	6278      	str	r0, [r7, #36]	@ 0x24
		voice_1 = pvPortMalloc(FLOAT_SIZE_BYTES(BLOCK_SIZE));
 80033f4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80033f8:	f006 fe76 	bl	800a0e8 <pvPortMalloc>
 80033fc:	6238      	str	r0, [r7, #32]
		voice_2 = pvPortMalloc(FLOAT_SIZE_BYTES(BLOCK_SIZE));
 80033fe:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003402:	f006 fe71 	bl	800a0e8 <pvPortMalloc>
 8003406:	61f8      	str	r0, [r7, #28]
		voice_3 = pvPortMalloc(FLOAT_SIZE_BYTES(BLOCK_SIZE));
 8003408:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800340c:	f006 fe6c 	bl	800a0e8 <pvPortMalloc>
 8003410:	61b8      	str	r0, [r7, #24]
		voice_4 = pvPortMalloc(FLOAT_SIZE_BYTES(BLOCK_SIZE));
 8003412:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003416:	f006 fe67 	bl	800a0e8 <pvPortMalloc>
 800341a:	6178      	str	r0, [r7, #20]
		voice_5 = pvPortMalloc(FLOAT_SIZE_BYTES(BLOCK_SIZE));
 800341c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003420:	f006 fe62 	bl	800a0e8 <pvPortMalloc>
 8003424:	6138      	str	r0, [r7, #16]
		arm_fill_f32(0.0f, template, BLOCK_SIZE / 2);													//Lleno arrays con ceros
 8003426:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800342a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800342c:	ed9f 0a71 	vldr	s0, [pc, #452]	@ 80035f4 <sd_task+0x340>
 8003430:	f00c fc4c 	bl	800fccc <arm_fill_f32>
		arm_fill_f32(0.0f, aux, BLOCK_SIZE / 2);
 8003434:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003438:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800343a:	ed9f 0a6e 	vldr	s0, [pc, #440]	@ 80035f4 <sd_task+0x340>
 800343e:	f00c fc45 	bl	800fccc <arm_fill_f32>
		for(uint8_t i = 0; i < NUM_OF_BLOCKS; i++){
 8003442:	2300      	movs	r3, #0
 8003444:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8003448:	e09c      	b.n	8003584 <sd_task+0x2d0>
			//Leo los bloques desde sus respectivos archivos
			read_buffer_from_sd("voice_1.bin", voice_1, BLOCK_SIZE, i * BLOCK_SIZE);
 800344a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800344e:	02db      	lsls	r3, r3, #11
 8003450:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003454:	6a39      	ldr	r1, [r7, #32]
 8003456:	4868      	ldr	r0, [pc, #416]	@ (80035f8 <sd_task+0x344>)
 8003458:	f7ff fd56 	bl	8002f08 <read_buffer_from_sd>
			read_buffer_from_sd("voice_2.bin", voice_2, BLOCK_SIZE, i * BLOCK_SIZE);
 800345c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003460:	02db      	lsls	r3, r3, #11
 8003462:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003466:	69f9      	ldr	r1, [r7, #28]
 8003468:	4864      	ldr	r0, [pc, #400]	@ (80035fc <sd_task+0x348>)
 800346a:	f7ff fd4d 	bl	8002f08 <read_buffer_from_sd>
			read_buffer_from_sd("voice_3.bin", voice_3, BLOCK_SIZE, i * BLOCK_SIZE);
 800346e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003472:	02db      	lsls	r3, r3, #11
 8003474:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003478:	69b9      	ldr	r1, [r7, #24]
 800347a:	4861      	ldr	r0, [pc, #388]	@ (8003600 <sd_task+0x34c>)
 800347c:	f7ff fd44 	bl	8002f08 <read_buffer_from_sd>
			read_buffer_from_sd("voice_4.bin", voice_4, BLOCK_SIZE, i * BLOCK_SIZE);
 8003480:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003484:	02db      	lsls	r3, r3, #11
 8003486:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800348a:	6979      	ldr	r1, [r7, #20]
 800348c:	485d      	ldr	r0, [pc, #372]	@ (8003604 <sd_task+0x350>)
 800348e:	f7ff fd3b 	bl	8002f08 <read_buffer_from_sd>
			read_buffer_from_sd("voice_5.bin", voice_5, BLOCK_SIZE, i * BLOCK_SIZE);
 8003492:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003496:	02db      	lsls	r3, r3, #11
 8003498:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800349c:	6939      	ldr	r1, [r7, #16]
 800349e:	485a      	ldr	r0, [pc, #360]	@ (8003608 <sd_task+0x354>)
 80034a0:	f7ff fd32 	bl	8002f08 <read_buffer_from_sd>

			//Proceso y sumo voz 1
			process_signal(voice_1, aux, BLOCK_SIZE);
 80034a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034aa:	6a38      	ldr	r0, [r7, #32]
 80034ac:	f7ff fc32 	bl	8002d14 <process_signal>
			arm_add_f32(template, aux, template, BLOCK_SIZE / 2);
 80034b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034ba:	f00d fdbb 	bl	8011034 <arm_add_f32>
			arm_fill_f32(0.0f, aux, BLOCK_SIZE / 2);
 80034be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80034c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80034c4:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 80035f4 <sd_task+0x340>
 80034c8:	f00c fc00 	bl	800fccc <arm_fill_f32>

			//Proceso y sumo voz 2
			process_signal(voice_2, aux, BLOCK_SIZE);
 80034cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034d2:	69f8      	ldr	r0, [r7, #28]
 80034d4:	f7ff fc1e 	bl	8002d14 <process_signal>
			arm_add_f32(template, aux, template, BLOCK_SIZE / 2);
 80034d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034e2:	f00d fda7 	bl	8011034 <arm_add_f32>
			arm_fill_f32(0.0f, aux, BLOCK_SIZE / 2);
 80034e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80034ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80034ec:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 80035f4 <sd_task+0x340>
 80034f0:	f00c fbec 	bl	800fccc <arm_fill_f32>

			//Proceso y sumo voz 3
			process_signal(voice_3, aux, BLOCK_SIZE);
 80034f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034fa:	69b8      	ldr	r0, [r7, #24]
 80034fc:	f7ff fc0a 	bl	8002d14 <process_signal>
			arm_add_f32(template, aux, template, BLOCK_SIZE / 2);
 8003500:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003504:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003506:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003508:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800350a:	f00d fd93 	bl	8011034 <arm_add_f32>
			arm_fill_f32(0.0f, aux, BLOCK_SIZE / 2);
 800350e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003512:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003514:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 80035f4 <sd_task+0x340>
 8003518:	f00c fbd8 	bl	800fccc <arm_fill_f32>

			//Proceso y sumo voz 4
			process_signal(voice_4, aux, BLOCK_SIZE);
 800351c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003520:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003522:	6978      	ldr	r0, [r7, #20]
 8003524:	f7ff fbf6 	bl	8002d14 <process_signal>
			arm_add_f32(template, aux, template, BLOCK_SIZE / 2);
 8003528:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800352c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800352e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003530:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003532:	f00d fd7f 	bl	8011034 <arm_add_f32>

			//Proceso y sumo voz 5
			process_signal(voice_5, aux, BLOCK_SIZE);
 8003536:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800353a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800353c:	6938      	ldr	r0, [r7, #16]
 800353e:	f7ff fbe9 	bl	8002d14 <process_signal>
			arm_add_f32(template, aux, template, BLOCK_SIZE / 2);
 8003542:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003546:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003548:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800354a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800354c:	f00d fd72 	bl	8011034 <arm_add_f32>
			arm_fill_f32(0.0f, aux, BLOCK_SIZE / 2);
 8003550:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003554:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003556:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 80035f4 <sd_task+0x340>
 800355a:	f00c fbb7 	bl	800fccc <arm_fill_f32>

			//Escalo el vector para obtener el promedio
			arm_scale_f32(template, TEMPLATE_SAMPLES, template, BLOCK_SIZE / 2);
 800355e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003562:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003564:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8003568:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800356a:	f00d fd2d 	bl	8010fc8 <arm_scale_f32>

			save_buffer_on_sd("current_template.bin", template, BLOCK_SIZE / 2);
 800356e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003572:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003574:	4825      	ldr	r0, [pc, #148]	@ (800360c <sd_task+0x358>)
 8003576:	f7ff fc5b 	bl	8002e30 <save_buffer_on_sd>
		for(uint8_t i = 0; i < NUM_OF_BLOCKS; i++){
 800357a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800357e:	3301      	adds	r3, #1
 8003580:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8003584:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003588:	2b08      	cmp	r3, #8
 800358a:	f67f af5e 	bls.w	800344a <sd_task+0x196>

		}

		current_message = PANTALLA_TEMPLATE_GUARDADO;
 800358e:	230f      	movs	r3, #15
 8003590:	73fb      	strb	r3, [r7, #15]
		xQueueSend(display_queue, &current_message, portMAX_DELAY);
 8003592:	4b15      	ldr	r3, [pc, #84]	@ (80035e8 <sd_task+0x334>)
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	f107 010f 	add.w	r1, r7, #15
 800359a:	2300      	movs	r3, #0
 800359c:	f04f 32ff 	mov.w	r2, #4294967295
 80035a0:	f004 ff66 	bl	8008470 <xQueueGenericSend>

		unmount_sd("");
 80035a4:	480e      	ldr	r0, [pc, #56]	@ (80035e0 <sd_task+0x32c>)
 80035a6:	f7ff fc25 	bl	8002df4 <unmount_sd>
		//Libero memoria
		vPortFree(voice_1);
 80035aa:	6a38      	ldr	r0, [r7, #32]
 80035ac:	f006 fe6a 	bl	800a284 <vPortFree>
		vPortFree(voice_2);
 80035b0:	69f8      	ldr	r0, [r7, #28]
 80035b2:	f006 fe67 	bl	800a284 <vPortFree>
		vPortFree(voice_3);
 80035b6:	69b8      	ldr	r0, [r7, #24]
 80035b8:	f006 fe64 	bl	800a284 <vPortFree>
		vPortFree(voice_4);
 80035bc:	6978      	ldr	r0, [r7, #20]
 80035be:	f006 fe61 	bl	800a284 <vPortFree>
		vPortFree(voice_5);
 80035c2:	6938      	ldr	r0, [r7, #16]
 80035c4:	f006 fe5e 	bl	800a284 <vPortFree>
		vPortFree(aux);
 80035c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035ca:	f006 fe5b 	bl	800a284 <vPortFree>
		vPortFree(template);
 80035ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035d0:	f006 fe58 	bl	800a284 <vPortFree>
	}

	while(1){
 80035d4:	bf00      	nop
 80035d6:	bf00      	nop
 80035d8:	e7fd      	b.n	80035d6 <sd_task+0x322>
 80035da:	bf00      	nop
 80035dc:	08012234 	.word	0x08012234
 80035e0:	08012244 	.word	0x08012244
 80035e4:	20000500 	.word	0x20000500
 80035e8:	200004f8 	.word	0x200004f8
 80035ec:	20000504 	.word	0x20000504
 80035f0:	08012248 	.word	0x08012248
 80035f4:	00000000 	.word	0x00000000
 80035f8:	08012258 	.word	0x08012258
 80035fc:	08012264 	.word	0x08012264
 8003600:	08012270 	.word	0x08012270
 8003604:	0801227c 	.word	0x0801227c
 8003608:	08012288 	.word	0x08012288
 800360c:	08012294 	.word	0x08012294

08003610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003614:	4b0e      	ldr	r3, [pc, #56]	@ (8003650 <HAL_Init+0x40>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a0d      	ldr	r2, [pc, #52]	@ (8003650 <HAL_Init+0x40>)
 800361a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800361e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003620:	4b0b      	ldr	r3, [pc, #44]	@ (8003650 <HAL_Init+0x40>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a0a      	ldr	r2, [pc, #40]	@ (8003650 <HAL_Init+0x40>)
 8003626:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800362a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800362c:	4b08      	ldr	r3, [pc, #32]	@ (8003650 <HAL_Init+0x40>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a07      	ldr	r2, [pc, #28]	@ (8003650 <HAL_Init+0x40>)
 8003632:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003636:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003638:	2003      	movs	r0, #3
 800363a:	f000 fe62 	bl	8004302 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800363e:	200f      	movs	r0, #15
 8003640:	f7fe f962 	bl	8001908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003644:	f7fd ff8a 	bl	800155c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40023c00 	.word	0x40023c00

08003654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003658:	4b06      	ldr	r3, [pc, #24]	@ (8003674 <HAL_IncTick+0x20>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <HAL_IncTick+0x24>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4413      	add	r3, r2
 8003664:	4a04      	ldr	r2, [pc, #16]	@ (8003678 <HAL_IncTick+0x24>)
 8003666:	6013      	str	r3, [r2, #0]
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	20000024 	.word	0x20000024
 8003678:	20000e3c 	.word	0x20000e3c

0800367c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return uwTick;
 8003680:	4b03      	ldr	r3, [pc, #12]	@ (8003690 <HAL_GetTick+0x14>)
 8003682:	681b      	ldr	r3, [r3, #0]
}
 8003684:	4618      	mov	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	20000e3c 	.word	0x20000e3c

08003694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800369c:	f7ff ffee 	bl	800367c <HAL_GetTick>
 80036a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ac:	d005      	beq.n	80036ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036ae:	4b0a      	ldr	r3, [pc, #40]	@ (80036d8 <HAL_Delay+0x44>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4413      	add	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036ba:	bf00      	nop
 80036bc:	f7ff ffde 	bl	800367c <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d8f7      	bhi.n	80036bc <HAL_Delay+0x28>
  {
  }
}
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000024 	.word	0x20000024

080036dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e033      	b.n	800375a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7fd ff5a 	bl	80015b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	2b00      	cmp	r3, #0
 8003718:	d118      	bne.n	800374c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003722:	f023 0302 	bic.w	r3, r3, #2
 8003726:	f043 0202 	orr.w	r2, r3, #2
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 fbb2 	bl	8003e98 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	f023 0303 	bic.w	r3, r3, #3
 8003742:	f043 0201 	orr.w	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	641a      	str	r2, [r3, #64]	@ 0x40
 800374a:	e001      	b.n	8003750 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003758:	7bfb      	ldrb	r3, [r7, #15]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b086      	sub	sp, #24
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	2300      	movs	r3, #0
 8003770:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f003 0320 	and.w	r3, r3, #32
 8003790:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d049      	beq.n	800382c <HAL_ADC_IRQHandler+0xca>
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d046      	beq.n	800382c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d105      	bne.n	80037b6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d12b      	bne.n	800381c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d127      	bne.n	800381c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d006      	beq.n	80037e8 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d119      	bne.n	800381c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0220 	bic.w	r2, r2, #32
 80037f6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003808:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d105      	bne.n	800381c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003814:	f043 0201 	orr.w	r2, r3, #1
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7fd fe6f 	bl	8001500 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f06f 0212 	mvn.w	r2, #18
 800382a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800383a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d057      	beq.n	80038f2 <HAL_ADC_IRQHandler+0x190>
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d054      	beq.n	80038f2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b00      	cmp	r3, #0
 8003852:	d105      	bne.n	8003860 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003858:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d139      	bne.n	80038e2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003874:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003878:	2b00      	cmp	r3, #0
 800387a:	d006      	beq.n	800388a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003886:	2b00      	cmp	r3, #0
 8003888:	d12b      	bne.n	80038e2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003894:	2b00      	cmp	r3, #0
 8003896:	d124      	bne.n	80038e2 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d11d      	bne.n	80038e2 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d119      	bne.n	80038e2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038bc:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d105      	bne.n	80038e2 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038da:	f043 0201 	orr.w	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fc56 	bl	8004194 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 020c 	mvn.w	r2, #12
 80038f0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003900:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d017      	beq.n	8003938 <HAL_ADC_IRQHandler+0x1d6>
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d014      	beq.n	8003938 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b01      	cmp	r3, #1
 800391a:	d10d      	bne.n	8003938 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003920:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f97f 	bl	8003c2c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f06f 0201 	mvn.w	r2, #1
 8003936:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 0320 	and.w	r3, r3, #32
 800393e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003946:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d015      	beq.n	800397a <HAL_ADC_IRQHandler+0x218>
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d012      	beq.n	800397a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003958:	f043 0202 	orr.w	r2, r3, #2
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0220 	mvn.w	r2, #32
 8003968:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f968 	bl	8003c40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0220 	mvn.w	r2, #32
 8003978:	601a      	str	r2, [r3, #0]
  }
}
 800397a:	bf00      	nop
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_ADC_Start_DMA+0x1e>
 800399e:	2302      	movs	r3, #2
 80039a0:	e0ce      	b.n	8003b40 <HAL_ADC_Start_DMA+0x1bc>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d018      	beq.n	80039ea <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80039c8:	4b5f      	ldr	r3, [pc, #380]	@ (8003b48 <HAL_ADC_Start_DMA+0x1c4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a5f      	ldr	r2, [pc, #380]	@ (8003b4c <HAL_ADC_Start_DMA+0x1c8>)
 80039ce:	fba2 2303 	umull	r2, r3, r2, r3
 80039d2:	0c9a      	lsrs	r2, r3, #18
 80039d4:	4613      	mov	r3, r2
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	4413      	add	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80039dc:	e002      	b.n	80039e4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f9      	bne.n	80039de <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039f8:	d107      	bne.n	8003a0a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a08:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	f040 8086 	bne.w	8003b26 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003a22:	f023 0301 	bic.w	r3, r3, #1
 8003a26:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d007      	beq.n	8003a4c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a40:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003a44:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a58:	d106      	bne.n	8003a68 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5e:	f023 0206 	bic.w	r2, r3, #6
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	645a      	str	r2, [r3, #68]	@ 0x44
 8003a66:	e002      	b.n	8003a6e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a76:	4b36      	ldr	r3, [pc, #216]	@ (8003b50 <HAL_ADC_Start_DMA+0x1cc>)
 8003a78:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a7e:	4a35      	ldr	r2, [pc, #212]	@ (8003b54 <HAL_ADC_Start_DMA+0x1d0>)
 8003a80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a86:	4a34      	ldr	r2, [pc, #208]	@ (8003b58 <HAL_ADC_Start_DMA+0x1d4>)
 8003a88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a8e:	4a33      	ldr	r2, [pc, #204]	@ (8003b5c <HAL_ADC_Start_DMA+0x1d8>)
 8003a90:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003a9a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003aaa:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003aba:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	334c      	adds	r3, #76	@ 0x4c
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f000 fcfc 	bl	80044c8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 031f 	and.w	r3, r3, #31
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10f      	bne.n	8003afc <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d129      	bne.n	8003b3e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003af8:	609a      	str	r2, [r3, #8]
 8003afa:	e020      	b.n	8003b3e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a17      	ldr	r2, [pc, #92]	@ (8003b60 <HAL_ADC_Start_DMA+0x1dc>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d11b      	bne.n	8003b3e <HAL_ADC_Start_DMA+0x1ba>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d114      	bne.n	8003b3e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003b22:	609a      	str	r2, [r3, #8]
 8003b24:	e00b      	b.n	8003b3e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2a:	f043 0210 	orr.w	r2, r3, #16
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b36:	f043 0201 	orr.w	r2, r3, #1
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	20000000 	.word	0x20000000
 8003b4c:	431bde83 	.word	0x431bde83
 8003b50:	40012300 	.word	0x40012300
 8003b54:	08004091 	.word	0x08004091
 8003b58:	0800414b 	.word	0x0800414b
 8003b5c:	08004167 	.word	0x08004167
 8003b60:	40012000 	.word	0x40012000

08003b64 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_ADC_Stop_DMA+0x1a>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e048      	b.n	8003c10 <HAL_ADC_Stop_DMA+0xac>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0201 	bic.w	r2, r2, #1
 8003b94:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d130      	bne.n	8003c06 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bb2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d10f      	bne.n	8003be2 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 fcd6 	bl	8004578 <HAL_DMA_Abort>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d005      	beq.n	8003be2 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8003bf0:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003bfa:	f023 0301 	bic.w	r3, r3, #1
 8003bfe:	f043 0201 	orr.w	r2, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_ADC_ConfigChannel+0x1c>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e105      	b.n	8003e7c <HAL_ADC_ConfigChannel+0x228>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b09      	cmp	r3, #9
 8003c7e:	d925      	bls.n	8003ccc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68d9      	ldr	r1, [r3, #12]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4613      	mov	r3, r2
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	4413      	add	r3, r2
 8003c94:	3b1e      	subs	r3, #30
 8003c96:	2207      	movs	r2, #7
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	43da      	mvns	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	400a      	ands	r2, r1
 8003ca4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68d9      	ldr	r1, [r3, #12]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	4603      	mov	r3, r0
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	4403      	add	r3, r0
 8003cbe:	3b1e      	subs	r3, #30
 8003cc0:	409a      	lsls	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	60da      	str	r2, [r3, #12]
 8003cca:	e022      	b.n	8003d12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6919      	ldr	r1, [r3, #16]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4613      	mov	r3, r2
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	4413      	add	r3, r2
 8003ce0:	2207      	movs	r2, #7
 8003ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce6:	43da      	mvns	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	400a      	ands	r2, r1
 8003cee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6919      	ldr	r1, [r3, #16]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	4618      	mov	r0, r3
 8003d02:	4603      	mov	r3, r0
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	4403      	add	r3, r0
 8003d08:	409a      	lsls	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b06      	cmp	r3, #6
 8003d18:	d824      	bhi.n	8003d64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	3b05      	subs	r3, #5
 8003d2c:	221f      	movs	r2, #31
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	43da      	mvns	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	400a      	ands	r2, r1
 8003d3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	4618      	mov	r0, r3
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	3b05      	subs	r3, #5
 8003d56:	fa00 f203 	lsl.w	r2, r0, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	635a      	str	r2, [r3, #52]	@ 0x34
 8003d62:	e04c      	b.n	8003dfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b0c      	cmp	r3, #12
 8003d6a:	d824      	bhi.n	8003db6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	4613      	mov	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	3b23      	subs	r3, #35	@ 0x23
 8003d7e:	221f      	movs	r2, #31
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	43da      	mvns	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	400a      	ands	r2, r1
 8003d8c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	3b23      	subs	r3, #35	@ 0x23
 8003da8:	fa00 f203 	lsl.w	r2, r0, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003db4:	e023      	b.n	8003dfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	3b41      	subs	r3, #65	@ 0x41
 8003dc8:	221f      	movs	r2, #31
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	43da      	mvns	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	400a      	ands	r2, r1
 8003dd6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	4618      	mov	r0, r3
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	4613      	mov	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	3b41      	subs	r3, #65	@ 0x41
 8003df2:	fa00 f203 	lsl.w	r2, r0, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003dfe:	4b22      	ldr	r3, [pc, #136]	@ (8003e88 <HAL_ADC_ConfigChannel+0x234>)
 8003e00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a21      	ldr	r2, [pc, #132]	@ (8003e8c <HAL_ADC_ConfigChannel+0x238>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d109      	bne.n	8003e20 <HAL_ADC_ConfigChannel+0x1cc>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b12      	cmp	r3, #18
 8003e12:	d105      	bne.n	8003e20 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a19      	ldr	r2, [pc, #100]	@ (8003e8c <HAL_ADC_ConfigChannel+0x238>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d123      	bne.n	8003e72 <HAL_ADC_ConfigChannel+0x21e>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b10      	cmp	r3, #16
 8003e30:	d003      	beq.n	8003e3a <HAL_ADC_ConfigChannel+0x1e6>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b11      	cmp	r3, #17
 8003e38:	d11b      	bne.n	8003e72 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b10      	cmp	r3, #16
 8003e4c:	d111      	bne.n	8003e72 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e4e:	4b10      	ldr	r3, [pc, #64]	@ (8003e90 <HAL_ADC_ConfigChannel+0x23c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a10      	ldr	r2, [pc, #64]	@ (8003e94 <HAL_ADC_ConfigChannel+0x240>)
 8003e54:	fba2 2303 	umull	r2, r3, r2, r3
 8003e58:	0c9a      	lsrs	r2, r3, #18
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003e64:	e002      	b.n	8003e6c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f9      	bne.n	8003e66 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	40012300 	.word	0x40012300
 8003e8c:	40012000 	.word	0x40012000
 8003e90:	20000000 	.word	0x20000000
 8003e94:	431bde83 	.word	0x431bde83

08003e98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ea0:	4b79      	ldr	r3, [pc, #484]	@ (8004088 <ADC_Init+0x1f0>)
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ecc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6859      	ldr	r1, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	021a      	lsls	r2, r3, #8
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003ef0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6859      	ldr	r1, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6899      	ldr	r1, [r3, #8]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2a:	4a58      	ldr	r2, [pc, #352]	@ (800408c <ADC_Init+0x1f4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d022      	beq.n	8003f76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6899      	ldr	r1, [r3, #8]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003f60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6899      	ldr	r1, [r3, #8]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	609a      	str	r2, [r3, #8]
 8003f74:	e00f      	b.n	8003f96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003f94:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0202 	bic.w	r2, r2, #2
 8003fa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6899      	ldr	r1, [r3, #8]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	7e1b      	ldrb	r3, [r3, #24]
 8003fb0:	005a      	lsls	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d01b      	beq.n	8003ffc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fd2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003fe2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6859      	ldr	r1, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	035a      	lsls	r2, r3, #13
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	605a      	str	r2, [r3, #4]
 8003ffa:	e007      	b.n	800400c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800400a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800401a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	3b01      	subs	r3, #1
 8004028:	051a      	lsls	r2, r3, #20
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004040:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6899      	ldr	r1, [r3, #8]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800404e:	025a      	lsls	r2, r3, #9
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004066:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6899      	ldr	r1, [r3, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	029a      	lsls	r2, r3, #10
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	609a      	str	r2, [r3, #8]
}
 800407c:	bf00      	nop
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	40012300 	.word	0x40012300
 800408c:	0f000001 	.word	0x0f000001

08004090 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d13c      	bne.n	8004124 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d12b      	bne.n	800411c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d127      	bne.n	800411c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d006      	beq.n	80040e8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d119      	bne.n	800411c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0220 	bic.w	r2, r2, #32
 80040f6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004108:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d105      	bne.n	800411c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004114:	f043 0201 	orr.w	r2, r3, #1
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f7fd f9ef 	bl	8001500 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004122:	e00e      	b.n	8004142 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f7ff fd85 	bl	8003c40 <HAL_ADC_ErrorCallback>
}
 8004136:	e004      	b.n	8004142 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	4798      	blx	r3
}
 8004142:	bf00      	nop
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b084      	sub	sp, #16
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004156:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f7ff fd5d 	bl	8003c18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800415e:	bf00      	nop
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b084      	sub	sp, #16
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004172:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2240      	movs	r2, #64	@ 0x40
 8004178:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800417e:	f043 0204 	orr.w	r2, r3, #4
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f7ff fd5a 	bl	8003c40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800418c:	bf00      	nop
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041b8:	4b0c      	ldr	r3, [pc, #48]	@ (80041ec <__NVIC_SetPriorityGrouping+0x44>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041c4:	4013      	ands	r3, r2
 80041c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80041d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041da:	4a04      	ldr	r2, [pc, #16]	@ (80041ec <__NVIC_SetPriorityGrouping+0x44>)
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	60d3      	str	r3, [r2, #12]
}
 80041e0:	bf00      	nop
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	e000ed00 	.word	0xe000ed00

080041f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041f4:	4b04      	ldr	r3, [pc, #16]	@ (8004208 <__NVIC_GetPriorityGrouping+0x18>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	0a1b      	lsrs	r3, r3, #8
 80041fa:	f003 0307 	and.w	r3, r3, #7
}
 80041fe:	4618      	mov	r0, r3
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	e000ed00 	.word	0xe000ed00

0800420c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800421a:	2b00      	cmp	r3, #0
 800421c:	db0b      	blt.n	8004236 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	f003 021f 	and.w	r2, r3, #31
 8004224:	4907      	ldr	r1, [pc, #28]	@ (8004244 <__NVIC_EnableIRQ+0x38>)
 8004226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	2001      	movs	r0, #1
 800422e:	fa00 f202 	lsl.w	r2, r0, r2
 8004232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	e000e100 	.word	0xe000e100

08004248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	4603      	mov	r3, r0
 8004250:	6039      	str	r1, [r7, #0]
 8004252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004258:	2b00      	cmp	r3, #0
 800425a:	db0a      	blt.n	8004272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	b2da      	uxtb	r2, r3
 8004260:	490c      	ldr	r1, [pc, #48]	@ (8004294 <__NVIC_SetPriority+0x4c>)
 8004262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004266:	0112      	lsls	r2, r2, #4
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	440b      	add	r3, r1
 800426c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004270:	e00a      	b.n	8004288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	b2da      	uxtb	r2, r3
 8004276:	4908      	ldr	r1, [pc, #32]	@ (8004298 <__NVIC_SetPriority+0x50>)
 8004278:	79fb      	ldrb	r3, [r7, #7]
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	3b04      	subs	r3, #4
 8004280:	0112      	lsls	r2, r2, #4
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	440b      	add	r3, r1
 8004286:	761a      	strb	r2, [r3, #24]
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	e000e100 	.word	0xe000e100
 8004298:	e000ed00 	.word	0xe000ed00

0800429c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800429c:	b480      	push	{r7}
 800429e:	b089      	sub	sp, #36	@ 0x24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	f1c3 0307 	rsb	r3, r3, #7
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	bf28      	it	cs
 80042ba:	2304      	movcs	r3, #4
 80042bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	3304      	adds	r3, #4
 80042c2:	2b06      	cmp	r3, #6
 80042c4:	d902      	bls.n	80042cc <NVIC_EncodePriority+0x30>
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	3b03      	subs	r3, #3
 80042ca:	e000      	b.n	80042ce <NVIC_EncodePriority+0x32>
 80042cc:	2300      	movs	r3, #0
 80042ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d0:	f04f 32ff 	mov.w	r2, #4294967295
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	43da      	mvns	r2, r3
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	401a      	ands	r2, r3
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042e4:	f04f 31ff 	mov.w	r1, #4294967295
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	fa01 f303 	lsl.w	r3, r1, r3
 80042ee:	43d9      	mvns	r1, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f4:	4313      	orrs	r3, r2
         );
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3724      	adds	r7, #36	@ 0x24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b082      	sub	sp, #8
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7ff ff4c 	bl	80041a8 <__NVIC_SetPriorityGrouping>
}
 8004310:	bf00      	nop
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
 8004324:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004326:	2300      	movs	r3, #0
 8004328:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800432a:	f7ff ff61 	bl	80041f0 <__NVIC_GetPriorityGrouping>
 800432e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	6978      	ldr	r0, [r7, #20]
 8004336:	f7ff ffb1 	bl	800429c <NVIC_EncodePriority>
 800433a:	4602      	mov	r2, r0
 800433c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004340:	4611      	mov	r1, r2
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff ff80 	bl	8004248 <__NVIC_SetPriority>
}
 8004348:	bf00      	nop
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800435a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff ff54 	bl	800420c <__NVIC_EnableIRQ>
}
 8004364:	bf00      	nop
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004378:	f7ff f980 	bl	800367c <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e099      	b.n	80044bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0201 	bic.w	r2, r2, #1
 80043a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043a8:	e00f      	b.n	80043ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043aa:	f7ff f967 	bl	800367c <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b05      	cmp	r3, #5
 80043b6:	d908      	bls.n	80043ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2220      	movs	r2, #32
 80043bc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2203      	movs	r2, #3
 80043c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e078      	b.n	80044bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1e8      	bne.n	80043aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	4b38      	ldr	r3, [pc, #224]	@ (80044c4 <HAL_DMA_Init+0x158>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004402:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800440e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	4313      	orrs	r3, r2
 800441a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004420:	2b04      	cmp	r3, #4
 8004422:	d107      	bne.n	8004434 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442c:	4313      	orrs	r3, r2
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	4313      	orrs	r3, r2
 8004432:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f023 0307 	bic.w	r3, r3, #7
 800444a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	4313      	orrs	r3, r2
 8004454:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445a:	2b04      	cmp	r3, #4
 800445c:	d117      	bne.n	800448e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00e      	beq.n	800448e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 fadf 	bl	8004a34 <DMA_CheckFifoParam>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d008      	beq.n	800448e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2240      	movs	r2, #64	@ 0x40
 8004480:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800448a:	2301      	movs	r3, #1
 800448c:	e016      	b.n	80044bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fa96 	bl	80049c8 <DMA_CalcBaseAndBitshift>
 800449c:	4603      	mov	r3, r0
 800449e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a4:	223f      	movs	r2, #63	@ 0x3f
 80044a6:	409a      	lsls	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3718      	adds	r7, #24
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	f010803f 	.word	0xf010803f

080044c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
 80044d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044d6:	2300      	movs	r3, #0
 80044d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_DMA_Start_IT+0x26>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e040      	b.n	8004570 <HAL_DMA_Start_IT+0xa8>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d12f      	bne.n	8004562 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2202      	movs	r2, #2
 8004506:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	68b9      	ldr	r1, [r7, #8]
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 fa28 	bl	800496c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004520:	223f      	movs	r2, #63	@ 0x3f
 8004522:	409a      	lsls	r2, r3
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0216 	orr.w	r2, r2, #22
 8004536:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453c:	2b00      	cmp	r3, #0
 800453e:	d007      	beq.n	8004550 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0208 	orr.w	r2, r2, #8
 800454e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0201 	orr.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	e005      	b.n	800456e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800456a:	2302      	movs	r3, #2
 800456c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800456e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004584:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004586:	f7ff f879 	bl	800367c <HAL_GetTick>
 800458a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d008      	beq.n	80045aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2280      	movs	r2, #128	@ 0x80
 800459c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e052      	b.n	8004650 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0216 	bic.w	r2, r2, #22
 80045b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695a      	ldr	r2, [r3, #20]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d103      	bne.n	80045da <HAL_DMA_Abort+0x62>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d007      	beq.n	80045ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0208 	bic.w	r2, r2, #8
 80045e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0201 	bic.w	r2, r2, #1
 80045f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045fa:	e013      	b.n	8004624 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045fc:	f7ff f83e 	bl	800367c <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b05      	cmp	r3, #5
 8004608:	d90c      	bls.n	8004624 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2220      	movs	r2, #32
 800460e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2203      	movs	r2, #3
 8004614:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e015      	b.n	8004650 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1e4      	bne.n	80045fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004636:	223f      	movs	r2, #63	@ 0x3f
 8004638:	409a      	lsls	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004664:	4b8e      	ldr	r3, [pc, #568]	@ (80048a0 <HAL_DMA_IRQHandler+0x248>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a8e      	ldr	r2, [pc, #568]	@ (80048a4 <HAL_DMA_IRQHandler+0x24c>)
 800466a:	fba2 2303 	umull	r2, r3, r2, r3
 800466e:	0a9b      	lsrs	r3, r3, #10
 8004670:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004676:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004682:	2208      	movs	r2, #8
 8004684:	409a      	lsls	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4013      	ands	r3, r2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d01a      	beq.n	80046c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	d013      	beq.n	80046c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0204 	bic.w	r2, r2, #4
 80046aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046b0:	2208      	movs	r2, #8
 80046b2:	409a      	lsls	r2, r3
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046bc:	f043 0201 	orr.w	r2, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c8:	2201      	movs	r2, #1
 80046ca:	409a      	lsls	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4013      	ands	r3, r2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d012      	beq.n	80046fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00b      	beq.n	80046fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e6:	2201      	movs	r2, #1
 80046e8:	409a      	lsls	r2, r3
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f2:	f043 0202 	orr.w	r2, r3, #2
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046fe:	2204      	movs	r2, #4
 8004700:	409a      	lsls	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4013      	ands	r3, r2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d012      	beq.n	8004730 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00b      	beq.n	8004730 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800471c:	2204      	movs	r2, #4
 800471e:	409a      	lsls	r2, r3
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004728:	f043 0204 	orr.w	r2, r3, #4
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004734:	2210      	movs	r2, #16
 8004736:	409a      	lsls	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4013      	ands	r3, r2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d043      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d03c      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004752:	2210      	movs	r2, #16
 8004754:	409a      	lsls	r2, r3
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d018      	beq.n	800479a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d108      	bne.n	8004788 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477a:	2b00      	cmp	r3, #0
 800477c:	d024      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	4798      	blx	r3
 8004786:	e01f      	b.n	80047c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800478c:	2b00      	cmp	r3, #0
 800478e:	d01b      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	4798      	blx	r3
 8004798:	e016      	b.n	80047c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d107      	bne.n	80047b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0208 	bic.w	r2, r2, #8
 80047b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047cc:	2220      	movs	r2, #32
 80047ce:	409a      	lsls	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4013      	ands	r3, r2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 808f 	beq.w	80048f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0310 	and.w	r3, r3, #16
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 8087 	beq.w	80048f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ee:	2220      	movs	r2, #32
 80047f0:	409a      	lsls	r2, r3
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b05      	cmp	r3, #5
 8004800:	d136      	bne.n	8004870 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0216 	bic.w	r2, r2, #22
 8004810:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695a      	ldr	r2, [r3, #20]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004820:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004826:	2b00      	cmp	r3, #0
 8004828:	d103      	bne.n	8004832 <HAL_DMA_IRQHandler+0x1da>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800482e:	2b00      	cmp	r3, #0
 8004830:	d007      	beq.n	8004842 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0208 	bic.w	r2, r2, #8
 8004840:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004846:	223f      	movs	r2, #63	@ 0x3f
 8004848:	409a      	lsls	r2, r3
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004862:	2b00      	cmp	r3, #0
 8004864:	d07e      	beq.n	8004964 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	4798      	blx	r3
        }
        return;
 800486e:	e079      	b.n	8004964 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d01d      	beq.n	80048ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10d      	bne.n	80048a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004890:	2b00      	cmp	r3, #0
 8004892:	d031      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	4798      	blx	r3
 800489c:	e02c      	b.n	80048f8 <HAL_DMA_IRQHandler+0x2a0>
 800489e:	bf00      	nop
 80048a0:	20000000 	.word	0x20000000
 80048a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d023      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	4798      	blx	r3
 80048b8:	e01e      	b.n	80048f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10f      	bne.n	80048e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0210 	bic.w	r2, r2, #16
 80048d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d032      	beq.n	8004966 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d022      	beq.n	8004952 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2205      	movs	r2, #5
 8004910:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0201 	bic.w	r2, r2, #1
 8004922:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	3301      	adds	r3, #1
 8004928:	60bb      	str	r3, [r7, #8]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	429a      	cmp	r2, r3
 800492e:	d307      	bcc.n	8004940 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f2      	bne.n	8004924 <HAL_DMA_IRQHandler+0x2cc>
 800493e:	e000      	b.n	8004942 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004940:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004956:	2b00      	cmp	r3, #0
 8004958:	d005      	beq.n	8004966 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	4798      	blx	r3
 8004962:	e000      	b.n	8004966 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004964:	bf00      	nop
    }
  }
}
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
 8004978:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004988:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	2b40      	cmp	r3, #64	@ 0x40
 8004998:	d108      	bne.n	80049ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80049aa:	e007      	b.n	80049bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	60da      	str	r2, [r3, #12]
}
 80049bc:	bf00      	nop
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	3b10      	subs	r3, #16
 80049d8:	4a14      	ldr	r2, [pc, #80]	@ (8004a2c <DMA_CalcBaseAndBitshift+0x64>)
 80049da:	fba2 2303 	umull	r2, r3, r2, r3
 80049de:	091b      	lsrs	r3, r3, #4
 80049e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80049e2:	4a13      	ldr	r2, [pc, #76]	@ (8004a30 <DMA_CalcBaseAndBitshift+0x68>)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4413      	add	r3, r2
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	461a      	mov	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d909      	bls.n	8004a0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80049fe:	f023 0303 	bic.w	r3, r3, #3
 8004a02:	1d1a      	adds	r2, r3, #4
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	659a      	str	r2, [r3, #88]	@ 0x58
 8004a08:	e007      	b.n	8004a1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004a12:	f023 0303 	bic.w	r3, r3, #3
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	aaaaaaab 	.word	0xaaaaaaab
 8004a30:	08014480 	.word	0x08014480

08004a34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d11f      	bne.n	8004a8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2b03      	cmp	r3, #3
 8004a52:	d856      	bhi.n	8004b02 <DMA_CheckFifoParam+0xce>
 8004a54:	a201      	add	r2, pc, #4	@ (adr r2, 8004a5c <DMA_CheckFifoParam+0x28>)
 8004a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5a:	bf00      	nop
 8004a5c:	08004a6d 	.word	0x08004a6d
 8004a60:	08004a7f 	.word	0x08004a7f
 8004a64:	08004a6d 	.word	0x08004a6d
 8004a68:	08004b03 	.word	0x08004b03
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d046      	beq.n	8004b06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a7c:	e043      	b.n	8004b06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a82:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004a86:	d140      	bne.n	8004b0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a8c:	e03d      	b.n	8004b0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a96:	d121      	bne.n	8004adc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d837      	bhi.n	8004b0e <DMA_CheckFifoParam+0xda>
 8004a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa4 <DMA_CheckFifoParam+0x70>)
 8004aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa4:	08004ab5 	.word	0x08004ab5
 8004aa8:	08004abb 	.word	0x08004abb
 8004aac:	08004ab5 	.word	0x08004ab5
 8004ab0:	08004acd 	.word	0x08004acd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ab8:	e030      	b.n	8004b1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004abe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d025      	beq.n	8004b12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aca:	e022      	b.n	8004b12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ad4:	d11f      	bne.n	8004b16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ada:	e01c      	b.n	8004b16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d903      	bls.n	8004aea <DMA_CheckFifoParam+0xb6>
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2b03      	cmp	r3, #3
 8004ae6:	d003      	beq.n	8004af0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ae8:	e018      	b.n	8004b1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	73fb      	strb	r3, [r7, #15]
      break;
 8004aee:	e015      	b.n	8004b1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00e      	beq.n	8004b1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	73fb      	strb	r3, [r7, #15]
      break;
 8004b00:	e00b      	b.n	8004b1a <DMA_CheckFifoParam+0xe6>
      break;
 8004b02:	bf00      	nop
 8004b04:	e00a      	b.n	8004b1c <DMA_CheckFifoParam+0xe8>
      break;
 8004b06:	bf00      	nop
 8004b08:	e008      	b.n	8004b1c <DMA_CheckFifoParam+0xe8>
      break;
 8004b0a:	bf00      	nop
 8004b0c:	e006      	b.n	8004b1c <DMA_CheckFifoParam+0xe8>
      break;
 8004b0e:	bf00      	nop
 8004b10:	e004      	b.n	8004b1c <DMA_CheckFifoParam+0xe8>
      break;
 8004b12:	bf00      	nop
 8004b14:	e002      	b.n	8004b1c <DMA_CheckFifoParam+0xe8>
      break;   
 8004b16:	bf00      	nop
 8004b18:	e000      	b.n	8004b1c <DMA_CheckFifoParam+0xe8>
      break;
 8004b1a:	bf00      	nop
    }
  } 
  
  return status; 
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop

08004b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b089      	sub	sp, #36	@ 0x24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b42:	2300      	movs	r3, #0
 8004b44:	61fb      	str	r3, [r7, #28]
 8004b46:	e159      	b.n	8004dfc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b48:	2201      	movs	r2, #1
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	f040 8148 	bne.w	8004df6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d005      	beq.n	8004b7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d130      	bne.n	8004be0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	2203      	movs	r2, #3
 8004b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8e:	43db      	mvns	r3, r3
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	4013      	ands	r3, r2
 8004b94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbc:	43db      	mvns	r3, r3
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	091b      	lsrs	r3, r3, #4
 8004bca:	f003 0201 	and.w	r2, r3, #1
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f003 0303 	and.w	r3, r3, #3
 8004be8:	2b03      	cmp	r3, #3
 8004bea:	d017      	beq.n	8004c1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	2203      	movs	r2, #3
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	4013      	ands	r3, r2
 8004c02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f003 0303 	and.w	r3, r3, #3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d123      	bne.n	8004c70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	08da      	lsrs	r2, r3, #3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3208      	adds	r2, #8
 8004c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	220f      	movs	r2, #15
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	43db      	mvns	r3, r3
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	691a      	ldr	r2, [r3, #16]
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	08da      	lsrs	r2, r3, #3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3208      	adds	r2, #8
 8004c6a:	69b9      	ldr	r1, [r7, #24]
 8004c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	2203      	movs	r2, #3
 8004c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c80:	43db      	mvns	r3, r3
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	4013      	ands	r3, r2
 8004c86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f003 0203 	and.w	r2, r3, #3
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	fa02 f303 	lsl.w	r3, r2, r3
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 80a2 	beq.w	8004df6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	4b57      	ldr	r3, [pc, #348]	@ (8004e14 <HAL_GPIO_Init+0x2e8>)
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cba:	4a56      	ldr	r2, [pc, #344]	@ (8004e14 <HAL_GPIO_Init+0x2e8>)
 8004cbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004cc2:	4b54      	ldr	r3, [pc, #336]	@ (8004e14 <HAL_GPIO_Init+0x2e8>)
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cce:	4a52      	ldr	r2, [pc, #328]	@ (8004e18 <HAL_GPIO_Init+0x2ec>)
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	089b      	lsrs	r3, r3, #2
 8004cd4:	3302      	adds	r3, #2
 8004cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	220f      	movs	r2, #15
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	43db      	mvns	r3, r3
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a49      	ldr	r2, [pc, #292]	@ (8004e1c <HAL_GPIO_Init+0x2f0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d019      	beq.n	8004d2e <HAL_GPIO_Init+0x202>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a48      	ldr	r2, [pc, #288]	@ (8004e20 <HAL_GPIO_Init+0x2f4>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d013      	beq.n	8004d2a <HAL_GPIO_Init+0x1fe>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a47      	ldr	r2, [pc, #284]	@ (8004e24 <HAL_GPIO_Init+0x2f8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d00d      	beq.n	8004d26 <HAL_GPIO_Init+0x1fa>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a46      	ldr	r2, [pc, #280]	@ (8004e28 <HAL_GPIO_Init+0x2fc>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d007      	beq.n	8004d22 <HAL_GPIO_Init+0x1f6>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a45      	ldr	r2, [pc, #276]	@ (8004e2c <HAL_GPIO_Init+0x300>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d101      	bne.n	8004d1e <HAL_GPIO_Init+0x1f2>
 8004d1a:	2304      	movs	r3, #4
 8004d1c:	e008      	b.n	8004d30 <HAL_GPIO_Init+0x204>
 8004d1e:	2307      	movs	r3, #7
 8004d20:	e006      	b.n	8004d30 <HAL_GPIO_Init+0x204>
 8004d22:	2303      	movs	r3, #3
 8004d24:	e004      	b.n	8004d30 <HAL_GPIO_Init+0x204>
 8004d26:	2302      	movs	r3, #2
 8004d28:	e002      	b.n	8004d30 <HAL_GPIO_Init+0x204>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <HAL_GPIO_Init+0x204>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	69fa      	ldr	r2, [r7, #28]
 8004d32:	f002 0203 	and.w	r2, r2, #3
 8004d36:	0092      	lsls	r2, r2, #2
 8004d38:	4093      	lsls	r3, r2
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d40:	4935      	ldr	r1, [pc, #212]	@ (8004e18 <HAL_GPIO_Init+0x2ec>)
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	089b      	lsrs	r3, r3, #2
 8004d46:	3302      	adds	r3, #2
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d4e:	4b38      	ldr	r3, [pc, #224]	@ (8004e30 <HAL_GPIO_Init+0x304>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	43db      	mvns	r3, r3
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d72:	4a2f      	ldr	r2, [pc, #188]	@ (8004e30 <HAL_GPIO_Init+0x304>)
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d78:	4b2d      	ldr	r3, [pc, #180]	@ (8004e30 <HAL_GPIO_Init+0x304>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	43db      	mvns	r3, r3
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	4013      	ands	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d9c:	4a24      	ldr	r2, [pc, #144]	@ (8004e30 <HAL_GPIO_Init+0x304>)
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004da2:	4b23      	ldr	r3, [pc, #140]	@ (8004e30 <HAL_GPIO_Init+0x304>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	43db      	mvns	r3, r3
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4013      	ands	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004dc6:	4a1a      	ldr	r2, [pc, #104]	@ (8004e30 <HAL_GPIO_Init+0x304>)
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dcc:	4b18      	ldr	r3, [pc, #96]	@ (8004e30 <HAL_GPIO_Init+0x304>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004df0:	4a0f      	ldr	r2, [pc, #60]	@ (8004e30 <HAL_GPIO_Init+0x304>)
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	61fb      	str	r3, [r7, #28]
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	2b0f      	cmp	r3, #15
 8004e00:	f67f aea2 	bls.w	8004b48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e04:	bf00      	nop
 8004e06:	bf00      	nop
 8004e08:	3724      	adds	r7, #36	@ 0x24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40023800 	.word	0x40023800
 8004e18:	40013800 	.word	0x40013800
 8004e1c:	40020000 	.word	0x40020000
 8004e20:	40020400 	.word	0x40020400
 8004e24:	40020800 	.word	0x40020800
 8004e28:	40020c00 	.word	0x40020c00
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	40013c00 	.word	0x40013c00

08004e34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	887b      	ldrh	r3, [r7, #2]
 8004e46:	4013      	ands	r3, r2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	73fb      	strb	r3, [r7, #15]
 8004e50:	e001      	b.n	8004e56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e52:	2300      	movs	r3, #0
 8004e54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	807b      	strh	r3, [r7, #2]
 8004e70:	4613      	mov	r3, r2
 8004e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e74:	787b      	ldrb	r3, [r7, #1]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e7a:	887a      	ldrh	r2, [r7, #2]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e80:	e003      	b.n	8004e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e82:	887b      	ldrh	r3, [r7, #2]
 8004e84:	041a      	lsls	r2, r3, #16
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	619a      	str	r2, [r3, #24]
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
	...

08004e98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e12b      	b.n	8005102 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7fc fbf6 	bl	80016b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2224      	movs	r2, #36	@ 0x24
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0201 	bic.w	r2, r2, #1
 8004eda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004eea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004efa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004efc:	f001 f8ea 	bl	80060d4 <HAL_RCC_GetPCLK1Freq>
 8004f00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	4a81      	ldr	r2, [pc, #516]	@ (800510c <HAL_I2C_Init+0x274>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d807      	bhi.n	8004f1c <HAL_I2C_Init+0x84>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4a80      	ldr	r2, [pc, #512]	@ (8005110 <HAL_I2C_Init+0x278>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	bf94      	ite	ls
 8004f14:	2301      	movls	r3, #1
 8004f16:	2300      	movhi	r3, #0
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	e006      	b.n	8004f2a <HAL_I2C_Init+0x92>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4a7d      	ldr	r2, [pc, #500]	@ (8005114 <HAL_I2C_Init+0x27c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	bf94      	ite	ls
 8004f24:	2301      	movls	r3, #1
 8004f26:	2300      	movhi	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e0e7      	b.n	8005102 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4a78      	ldr	r2, [pc, #480]	@ (8005118 <HAL_I2C_Init+0x280>)
 8004f36:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3a:	0c9b      	lsrs	r3, r3, #18
 8004f3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	4a6a      	ldr	r2, [pc, #424]	@ (800510c <HAL_I2C_Init+0x274>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d802      	bhi.n	8004f6c <HAL_I2C_Init+0xd4>
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	e009      	b.n	8004f80 <HAL_I2C_Init+0xe8>
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004f72:	fb02 f303 	mul.w	r3, r2, r3
 8004f76:	4a69      	ldr	r2, [pc, #420]	@ (800511c <HAL_I2C_Init+0x284>)
 8004f78:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7c:	099b      	lsrs	r3, r3, #6
 8004f7e:	3301      	adds	r3, #1
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6812      	ldr	r2, [r2, #0]
 8004f84:	430b      	orrs	r3, r1
 8004f86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004f92:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	495c      	ldr	r1, [pc, #368]	@ (800510c <HAL_I2C_Init+0x274>)
 8004f9c:	428b      	cmp	r3, r1
 8004f9e:	d819      	bhi.n	8004fd4 <HAL_I2C_Init+0x13c>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	1e59      	subs	r1, r3, #1
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fae:	1c59      	adds	r1, r3, #1
 8004fb0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004fb4:	400b      	ands	r3, r1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <HAL_I2C_Init+0x138>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	1e59      	subs	r1, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fc8:	3301      	adds	r3, #1
 8004fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fce:	e051      	b.n	8005074 <HAL_I2C_Init+0x1dc>
 8004fd0:	2304      	movs	r3, #4
 8004fd2:	e04f      	b.n	8005074 <HAL_I2C_Init+0x1dc>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d111      	bne.n	8005000 <HAL_I2C_Init+0x168>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	1e58      	subs	r0, r3, #1
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6859      	ldr	r1, [r3, #4]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	440b      	add	r3, r1
 8004fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fee:	3301      	adds	r3, #1
 8004ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	bf0c      	ite	eq
 8004ff8:	2301      	moveq	r3, #1
 8004ffa:	2300      	movne	r3, #0
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	e012      	b.n	8005026 <HAL_I2C_Init+0x18e>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	1e58      	subs	r0, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6859      	ldr	r1, [r3, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	0099      	lsls	r1, r3, #2
 8005010:	440b      	add	r3, r1
 8005012:	fbb0 f3f3 	udiv	r3, r0, r3
 8005016:	3301      	adds	r3, #1
 8005018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800501c:	2b00      	cmp	r3, #0
 800501e:	bf0c      	ite	eq
 8005020:	2301      	moveq	r3, #1
 8005022:	2300      	movne	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <HAL_I2C_Init+0x196>
 800502a:	2301      	movs	r3, #1
 800502c:	e022      	b.n	8005074 <HAL_I2C_Init+0x1dc>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10e      	bne.n	8005054 <HAL_I2C_Init+0x1bc>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	1e58      	subs	r0, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6859      	ldr	r1, [r3, #4]
 800503e:	460b      	mov	r3, r1
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	440b      	add	r3, r1
 8005044:	fbb0 f3f3 	udiv	r3, r0, r3
 8005048:	3301      	adds	r3, #1
 800504a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800504e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005052:	e00f      	b.n	8005074 <HAL_I2C_Init+0x1dc>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	1e58      	subs	r0, r3, #1
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6859      	ldr	r1, [r3, #4]
 800505c:	460b      	mov	r3, r1
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	440b      	add	r3, r1
 8005062:	0099      	lsls	r1, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	fbb0 f3f3 	udiv	r3, r0, r3
 800506a:	3301      	adds	r3, #1
 800506c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005070:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	6809      	ldr	r1, [r1, #0]
 8005078:	4313      	orrs	r3, r2
 800507a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69da      	ldr	r2, [r3, #28]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80050a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6911      	ldr	r1, [r2, #16]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	68d2      	ldr	r2, [r2, #12]
 80050ae:	4311      	orrs	r1, r2
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6812      	ldr	r2, [r2, #0]
 80050b4:	430b      	orrs	r3, r1
 80050b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	695a      	ldr	r2, [r3, #20]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	430a      	orrs	r2, r1
 80050d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0201 	orr.w	r2, r2, #1
 80050e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	000186a0 	.word	0x000186a0
 8005110:	001e847f 	.word	0x001e847f
 8005114:	003d08ff 	.word	0x003d08ff
 8005118:	431bde83 	.word	0x431bde83
 800511c:	10624dd3 	.word	0x10624dd3

08005120 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af02      	add	r7, sp, #8
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	4608      	mov	r0, r1
 800512a:	4611      	mov	r1, r2
 800512c:	461a      	mov	r2, r3
 800512e:	4603      	mov	r3, r0
 8005130:	817b      	strh	r3, [r7, #10]
 8005132:	460b      	mov	r3, r1
 8005134:	813b      	strh	r3, [r7, #8]
 8005136:	4613      	mov	r3, r2
 8005138:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800513a:	f7fe fa9f 	bl	800367c <HAL_GetTick>
 800513e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b20      	cmp	r3, #32
 800514a:	f040 80d9 	bne.w	8005300 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	2319      	movs	r3, #25
 8005154:	2201      	movs	r2, #1
 8005156:	496d      	ldr	r1, [pc, #436]	@ (800530c <HAL_I2C_Mem_Write+0x1ec>)
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 f971 	bl	8005440 <I2C_WaitOnFlagUntilTimeout>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005164:	2302      	movs	r3, #2
 8005166:	e0cc      	b.n	8005302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800516e:	2b01      	cmp	r3, #1
 8005170:	d101      	bne.n	8005176 <HAL_I2C_Mem_Write+0x56>
 8005172:	2302      	movs	r3, #2
 8005174:	e0c5      	b.n	8005302 <HAL_I2C_Mem_Write+0x1e2>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b01      	cmp	r3, #1
 800518a:	d007      	beq.n	800519c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0201 	orr.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2221      	movs	r2, #33	@ 0x21
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2240      	movs	r2, #64	@ 0x40
 80051b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a3a      	ldr	r2, [r7, #32]
 80051c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80051cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4a4d      	ldr	r2, [pc, #308]	@ (8005310 <HAL_I2C_Mem_Write+0x1f0>)
 80051dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051de:	88f8      	ldrh	r0, [r7, #6]
 80051e0:	893a      	ldrh	r2, [r7, #8]
 80051e2:	8979      	ldrh	r1, [r7, #10]
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	9301      	str	r3, [sp, #4]
 80051e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	4603      	mov	r3, r0
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 f890 	bl	8005314 <I2C_RequestMemoryWrite>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d052      	beq.n	80052a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e081      	b.n	8005302 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 fa36 	bl	8005674 <I2C_WaitOnTXEFlagUntilTimeout>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00d      	beq.n	800522a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005212:	2b04      	cmp	r3, #4
 8005214:	d107      	bne.n	8005226 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005224:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e06b      	b.n	8005302 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522e:	781a      	ldrb	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005250:	b29b      	uxth	r3, r3
 8005252:	3b01      	subs	r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b04      	cmp	r3, #4
 8005266:	d11b      	bne.n	80052a0 <HAL_I2C_Mem_Write+0x180>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800526c:	2b00      	cmp	r3, #0
 800526e:	d017      	beq.n	80052a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005274:	781a      	ldrb	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800528a:	3b01      	subs	r3, #1
 800528c:	b29a      	uxth	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005296:	b29b      	uxth	r3, r3
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1aa      	bne.n	80051fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 fa29 	bl	8005704 <I2C_WaitOnBTFFlagUntilTimeout>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00d      	beq.n	80052d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d107      	bne.n	80052d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e016      	b.n	8005302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80052fc:	2300      	movs	r3, #0
 80052fe:	e000      	b.n	8005302 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005300:	2302      	movs	r3, #2
  }
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	00100002 	.word	0x00100002
 8005310:	ffff0000 	.word	0xffff0000

08005314 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b088      	sub	sp, #32
 8005318:	af02      	add	r7, sp, #8
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	4608      	mov	r0, r1
 800531e:	4611      	mov	r1, r2
 8005320:	461a      	mov	r2, r3
 8005322:	4603      	mov	r3, r0
 8005324:	817b      	strh	r3, [r7, #10]
 8005326:	460b      	mov	r3, r1
 8005328:	813b      	strh	r3, [r7, #8]
 800532a:	4613      	mov	r3, r2
 800532c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800533c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	2200      	movs	r2, #0
 8005346:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 f878 	bl	8005440 <I2C_WaitOnFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00d      	beq.n	8005372 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005360:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005364:	d103      	bne.n	800536e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800536c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e05f      	b.n	8005432 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005372:	897b      	ldrh	r3, [r7, #10]
 8005374:	b2db      	uxtb	r3, r3
 8005376:	461a      	mov	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005380:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005384:	6a3a      	ldr	r2, [r7, #32]
 8005386:	492d      	ldr	r1, [pc, #180]	@ (800543c <I2C_RequestMemoryWrite+0x128>)
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 f8d3 	bl	8005534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e04c      	b.n	8005432 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005398:	2300      	movs	r3, #0
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053b0:	6a39      	ldr	r1, [r7, #32]
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 f95e 	bl	8005674 <I2C_WaitOnTXEFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00d      	beq.n	80053da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d107      	bne.n	80053d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e02b      	b.n	8005432 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053da:	88fb      	ldrh	r3, [r7, #6]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d105      	bne.n	80053ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053e0:	893b      	ldrh	r3, [r7, #8]
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	611a      	str	r2, [r3, #16]
 80053ea:	e021      	b.n	8005430 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053ec:	893b      	ldrh	r3, [r7, #8]
 80053ee:	0a1b      	lsrs	r3, r3, #8
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053fc:	6a39      	ldr	r1, [r7, #32]
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f938 	bl	8005674 <I2C_WaitOnTXEFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00d      	beq.n	8005426 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540e:	2b04      	cmp	r3, #4
 8005410:	d107      	bne.n	8005422 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005420:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e005      	b.n	8005432 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005426:	893b      	ldrh	r3, [r7, #8]
 8005428:	b2da      	uxtb	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3718      	adds	r7, #24
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	00010002 	.word	0x00010002

08005440 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	603b      	str	r3, [r7, #0]
 800544c:	4613      	mov	r3, r2
 800544e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005450:	e048      	b.n	80054e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005458:	d044      	beq.n	80054e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800545a:	f7fe f90f 	bl	800367c <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d302      	bcc.n	8005470 <I2C_WaitOnFlagUntilTimeout+0x30>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d139      	bne.n	80054e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	0c1b      	lsrs	r3, r3, #16
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b01      	cmp	r3, #1
 8005478:	d10d      	bne.n	8005496 <I2C_WaitOnFlagUntilTimeout+0x56>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	43da      	mvns	r2, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	4013      	ands	r3, r2
 8005486:	b29b      	uxth	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	bf0c      	ite	eq
 800548c:	2301      	moveq	r3, #1
 800548e:	2300      	movne	r3, #0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	461a      	mov	r2, r3
 8005494:	e00c      	b.n	80054b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	43da      	mvns	r2, r3
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	4013      	ands	r3, r2
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	bf0c      	ite	eq
 80054a8:	2301      	moveq	r3, #1
 80054aa:	2300      	movne	r3, #0
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	461a      	mov	r2, r3
 80054b0:	79fb      	ldrb	r3, [r7, #7]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d116      	bne.n	80054e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2220      	movs	r2, #32
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d0:	f043 0220 	orr.w	r2, r3, #32
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e023      	b.n	800552c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	0c1b      	lsrs	r3, r3, #16
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d10d      	bne.n	800550a <I2C_WaitOnFlagUntilTimeout+0xca>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	43da      	mvns	r2, r3
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	4013      	ands	r3, r2
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	bf0c      	ite	eq
 8005500:	2301      	moveq	r3, #1
 8005502:	2300      	movne	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	461a      	mov	r2, r3
 8005508:	e00c      	b.n	8005524 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	43da      	mvns	r2, r3
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	4013      	ands	r3, r2
 8005516:	b29b      	uxth	r3, r3
 8005518:	2b00      	cmp	r3, #0
 800551a:	bf0c      	ite	eq
 800551c:	2301      	moveq	r3, #1
 800551e:	2300      	movne	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	461a      	mov	r2, r3
 8005524:	79fb      	ldrb	r3, [r7, #7]
 8005526:	429a      	cmp	r2, r3
 8005528:	d093      	beq.n	8005452 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
 8005540:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005542:	e071      	b.n	8005628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800554e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005552:	d123      	bne.n	800559c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005562:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800556c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2220      	movs	r2, #32
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005588:	f043 0204 	orr.w	r2, r3, #4
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e067      	b.n	800566c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a2:	d041      	beq.n	8005628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a4:	f7fe f86a 	bl	800367c <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d302      	bcc.n	80055ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d136      	bne.n	8005628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	0c1b      	lsrs	r3, r3, #16
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d10c      	bne.n	80055de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	43da      	mvns	r2, r3
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4013      	ands	r3, r2
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	bf14      	ite	ne
 80055d6:	2301      	movne	r3, #1
 80055d8:	2300      	moveq	r3, #0
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	e00b      	b.n	80055f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	43da      	mvns	r2, r3
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	4013      	ands	r3, r2
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	bf14      	ite	ne
 80055f0:	2301      	movne	r3, #1
 80055f2:	2300      	moveq	r3, #0
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d016      	beq.n	8005628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005614:	f043 0220 	orr.w	r2, r3, #32
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e021      	b.n	800566c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	0c1b      	lsrs	r3, r3, #16
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b01      	cmp	r3, #1
 8005630:	d10c      	bne.n	800564c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	43da      	mvns	r2, r3
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	4013      	ands	r3, r2
 800563e:	b29b      	uxth	r3, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	bf14      	ite	ne
 8005644:	2301      	movne	r3, #1
 8005646:	2300      	moveq	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	e00b      	b.n	8005664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	43da      	mvns	r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	4013      	ands	r3, r2
 8005658:	b29b      	uxth	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	bf14      	ite	ne
 800565e:	2301      	movne	r3, #1
 8005660:	2300      	moveq	r3, #0
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	f47f af6d 	bne.w	8005544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005680:	e034      	b.n	80056ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 f886 	bl	8005794 <I2C_IsAcknowledgeFailed>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e034      	b.n	80056fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005698:	d028      	beq.n	80056ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800569a:	f7fd ffef 	bl	800367c <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d302      	bcc.n	80056b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d11d      	bne.n	80056ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ba:	2b80      	cmp	r3, #128	@ 0x80
 80056bc:	d016      	beq.n	80056ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d8:	f043 0220 	orr.w	r2, r3, #32
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e007      	b.n	80056fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056f6:	2b80      	cmp	r3, #128	@ 0x80
 80056f8:	d1c3      	bne.n	8005682 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005710:	e034      	b.n	800577c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 f83e 	bl	8005794 <I2C_IsAcknowledgeFailed>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e034      	b.n	800578c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005728:	d028      	beq.n	800577c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800572a:	f7fd ffa7 	bl	800367c <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	429a      	cmp	r2, r3
 8005738:	d302      	bcc.n	8005740 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d11d      	bne.n	800577c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	f003 0304 	and.w	r3, r3, #4
 800574a:	2b04      	cmp	r3, #4
 800574c:	d016      	beq.n	800577c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2220      	movs	r2, #32
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005768:	f043 0220 	orr.w	r2, r3, #32
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e007      	b.n	800578c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	f003 0304 	and.w	r3, r3, #4
 8005786:	2b04      	cmp	r3, #4
 8005788:	d1c3      	bne.n	8005712 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057aa:	d11b      	bne.n	80057e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d0:	f043 0204 	orr.w	r2, r3, #4
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e000      	b.n	80057e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
	...

080057f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e267      	b.n	8005cd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d075      	beq.n	80058fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005812:	4b88      	ldr	r3, [pc, #544]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 030c 	and.w	r3, r3, #12
 800581a:	2b04      	cmp	r3, #4
 800581c:	d00c      	beq.n	8005838 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800581e:	4b85      	ldr	r3, [pc, #532]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005826:	2b08      	cmp	r3, #8
 8005828:	d112      	bne.n	8005850 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800582a:	4b82      	ldr	r3, [pc, #520]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005832:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005836:	d10b      	bne.n	8005850 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005838:	4b7e      	ldr	r3, [pc, #504]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d05b      	beq.n	80058fc <HAL_RCC_OscConfig+0x108>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d157      	bne.n	80058fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e242      	b.n	8005cd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005858:	d106      	bne.n	8005868 <HAL_RCC_OscConfig+0x74>
 800585a:	4b76      	ldr	r3, [pc, #472]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a75      	ldr	r2, [pc, #468]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 8005860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005864:	6013      	str	r3, [r2, #0]
 8005866:	e01d      	b.n	80058a4 <HAL_RCC_OscConfig+0xb0>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005870:	d10c      	bne.n	800588c <HAL_RCC_OscConfig+0x98>
 8005872:	4b70      	ldr	r3, [pc, #448]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a6f      	ldr	r2, [pc, #444]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 8005878:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	4b6d      	ldr	r3, [pc, #436]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a6c      	ldr	r2, [pc, #432]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 8005884:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	e00b      	b.n	80058a4 <HAL_RCC_OscConfig+0xb0>
 800588c:	4b69      	ldr	r3, [pc, #420]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a68      	ldr	r2, [pc, #416]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 8005892:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005896:	6013      	str	r3, [r2, #0]
 8005898:	4b66      	ldr	r3, [pc, #408]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a65      	ldr	r2, [pc, #404]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 800589e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d013      	beq.n	80058d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ac:	f7fd fee6 	bl	800367c <HAL_GetTick>
 80058b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058b4:	f7fd fee2 	bl	800367c <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b64      	cmp	r3, #100	@ 0x64
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e207      	b.n	8005cd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058c6:	4b5b      	ldr	r3, [pc, #364]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0f0      	beq.n	80058b4 <HAL_RCC_OscConfig+0xc0>
 80058d2:	e014      	b.n	80058fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058d4:	f7fd fed2 	bl	800367c <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058dc:	f7fd fece 	bl	800367c <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b64      	cmp	r3, #100	@ 0x64
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e1f3      	b.n	8005cd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058ee:	4b51      	ldr	r3, [pc, #324]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1f0      	bne.n	80058dc <HAL_RCC_OscConfig+0xe8>
 80058fa:	e000      	b.n	80058fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d063      	beq.n	80059d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800590a:	4b4a      	ldr	r3, [pc, #296]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 030c 	and.w	r3, r3, #12
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00b      	beq.n	800592e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005916:	4b47      	ldr	r3, [pc, #284]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800591e:	2b08      	cmp	r3, #8
 8005920:	d11c      	bne.n	800595c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005922:	4b44      	ldr	r3, [pc, #272]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d116      	bne.n	800595c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800592e:	4b41      	ldr	r3, [pc, #260]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d005      	beq.n	8005946 <HAL_RCC_OscConfig+0x152>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d001      	beq.n	8005946 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e1c7      	b.n	8005cd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005946:	4b3b      	ldr	r3, [pc, #236]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	4937      	ldr	r1, [pc, #220]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 8005956:	4313      	orrs	r3, r2
 8005958:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800595a:	e03a      	b.n	80059d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d020      	beq.n	80059a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005964:	4b34      	ldr	r3, [pc, #208]	@ (8005a38 <HAL_RCC_OscConfig+0x244>)
 8005966:	2201      	movs	r2, #1
 8005968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800596a:	f7fd fe87 	bl	800367c <HAL_GetTick>
 800596e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005970:	e008      	b.n	8005984 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005972:	f7fd fe83 	bl	800367c <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d901      	bls.n	8005984 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e1a8      	b.n	8005cd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005984:	4b2b      	ldr	r3, [pc, #172]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0f0      	beq.n	8005972 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005990:	4b28      	ldr	r3, [pc, #160]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	4925      	ldr	r1, [pc, #148]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	600b      	str	r3, [r1, #0]
 80059a4:	e015      	b.n	80059d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059a6:	4b24      	ldr	r3, [pc, #144]	@ (8005a38 <HAL_RCC_OscConfig+0x244>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ac:	f7fd fe66 	bl	800367c <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059b4:	f7fd fe62 	bl	800367c <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e187      	b.n	8005cd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1f0      	bne.n	80059b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0308 	and.w	r3, r3, #8
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d036      	beq.n	8005a4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d016      	beq.n	8005a14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059e6:	4b15      	ldr	r3, [pc, #84]	@ (8005a3c <HAL_RCC_OscConfig+0x248>)
 80059e8:	2201      	movs	r2, #1
 80059ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ec:	f7fd fe46 	bl	800367c <HAL_GetTick>
 80059f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059f2:	e008      	b.n	8005a06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059f4:	f7fd fe42 	bl	800367c <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e167      	b.n	8005cd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a06:	4b0b      	ldr	r3, [pc, #44]	@ (8005a34 <HAL_RCC_OscConfig+0x240>)
 8005a08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0f0      	beq.n	80059f4 <HAL_RCC_OscConfig+0x200>
 8005a12:	e01b      	b.n	8005a4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a14:	4b09      	ldr	r3, [pc, #36]	@ (8005a3c <HAL_RCC_OscConfig+0x248>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a1a:	f7fd fe2f 	bl	800367c <HAL_GetTick>
 8005a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a20:	e00e      	b.n	8005a40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a22:	f7fd fe2b 	bl	800367c <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d907      	bls.n	8005a40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e150      	b.n	8005cd6 <HAL_RCC_OscConfig+0x4e2>
 8005a34:	40023800 	.word	0x40023800
 8005a38:	42470000 	.word	0x42470000
 8005a3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a40:	4b88      	ldr	r3, [pc, #544]	@ (8005c64 <HAL_RCC_OscConfig+0x470>)
 8005a42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1ea      	bne.n	8005a22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 8097 	beq.w	8005b88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a5e:	4b81      	ldr	r3, [pc, #516]	@ (8005c64 <HAL_RCC_OscConfig+0x470>)
 8005a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10f      	bne.n	8005a8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60bb      	str	r3, [r7, #8]
 8005a6e:	4b7d      	ldr	r3, [pc, #500]	@ (8005c64 <HAL_RCC_OscConfig+0x470>)
 8005a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a72:	4a7c      	ldr	r2, [pc, #496]	@ (8005c64 <HAL_RCC_OscConfig+0x470>)
 8005a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a7a:	4b7a      	ldr	r3, [pc, #488]	@ (8005c64 <HAL_RCC_OscConfig+0x470>)
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a82:	60bb      	str	r3, [r7, #8]
 8005a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a86:	2301      	movs	r3, #1
 8005a88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a8a:	4b77      	ldr	r3, [pc, #476]	@ (8005c68 <HAL_RCC_OscConfig+0x474>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d118      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a96:	4b74      	ldr	r3, [pc, #464]	@ (8005c68 <HAL_RCC_OscConfig+0x474>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a73      	ldr	r2, [pc, #460]	@ (8005c68 <HAL_RCC_OscConfig+0x474>)
 8005a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005aa2:	f7fd fdeb 	bl	800367c <HAL_GetTick>
 8005aa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aa8:	e008      	b.n	8005abc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aaa:	f7fd fde7 	bl	800367c <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d901      	bls.n	8005abc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e10c      	b.n	8005cd6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005abc:	4b6a      	ldr	r3, [pc, #424]	@ (8005c68 <HAL_RCC_OscConfig+0x474>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d0f0      	beq.n	8005aaa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d106      	bne.n	8005ade <HAL_RCC_OscConfig+0x2ea>
 8005ad0:	4b64      	ldr	r3, [pc, #400]	@ (8005c64 <HAL_RCC_OscConfig+0x470>)
 8005ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ad4:	4a63      	ldr	r2, [pc, #396]	@ (8005c64 <HAL_RCC_OscConfig+0x470>)
 8005ad6:	f043 0301 	orr.w	r3, r3, #1
 8005ada:	6713      	str	r3, [r2, #112]	@ 0x70
 8005adc:	e01c      	b.n	8005b18 <HAL_RCC_OscConfig+0x324>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	2b05      	cmp	r3, #5
 8005ae4:	d10c      	bne.n	8005b00 <HAL_RCC_OscConfig+0x30c>
 8005ae6:	4b5f      	ldr	r3, [pc, #380]	@ (8005c64 <HAL_RCC_OscConfig+0x470>)
 8005ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aea:	4a5e      	ldr	r2, [pc, #376]	@ (8005c64 <HAL_RCC_OscConfig+0x470>)
 8005aec:	f043 0304 	orr.w	r3, r3, #4
 8005af0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005af2:	4b5c      	ldr	r3, [pc, #368]	@ (8005c64 <HAL_RCC_OscConfig+0x470>)
 8005af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005af6:	4a5b      	ldr	r2, [pc, #364]	@ (8005c64 <HAL_RCC_OscConfig+0x470>)
 8005af8:	f043 0301 	orr.w	r3, r3, #1
 8005afc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005afe:	e00b      	b.n	8005b18 <HAL_RCC_OscConfig+0x324>
 8005b00:	4b58      	ldr	r3, [pc, #352]	@ (8005c64 <HAL_RCC_OscConfig+0x470>)
 8005b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b04:	4a57      	ldr	r2, [pc, #348]	@ (8005c64 <HAL_RCC_OscConfig+0x470>)
 8005b06:	f023 0301 	bic.w	r3, r3, #1
 8005b0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b0c:	4b55      	ldr	r3, [pc, #340]	@ (8005c64 <HAL_RCC_OscConfig+0x470>)
 8005b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b10:	4a54      	ldr	r2, [pc, #336]	@ (8005c64 <HAL_RCC_OscConfig+0x470>)
 8005b12:	f023 0304 	bic.w	r3, r3, #4
 8005b16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d015      	beq.n	8005b4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b20:	f7fd fdac 	bl	800367c <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b26:	e00a      	b.n	8005b3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b28:	f7fd fda8 	bl	800367c <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e0cb      	b.n	8005cd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b3e:	4b49      	ldr	r3, [pc, #292]	@ (8005c64 <HAL_RCC_OscConfig+0x470>)
 8005b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d0ee      	beq.n	8005b28 <HAL_RCC_OscConfig+0x334>
 8005b4a:	e014      	b.n	8005b76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b4c:	f7fd fd96 	bl	800367c <HAL_GetTick>
 8005b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b52:	e00a      	b.n	8005b6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b54:	f7fd fd92 	bl	800367c <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d901      	bls.n	8005b6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e0b5      	b.n	8005cd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b6a:	4b3e      	ldr	r3, [pc, #248]	@ (8005c64 <HAL_RCC_OscConfig+0x470>)
 8005b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1ee      	bne.n	8005b54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b76:	7dfb      	ldrb	r3, [r7, #23]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d105      	bne.n	8005b88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b7c:	4b39      	ldr	r3, [pc, #228]	@ (8005c64 <HAL_RCC_OscConfig+0x470>)
 8005b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b80:	4a38      	ldr	r2, [pc, #224]	@ (8005c64 <HAL_RCC_OscConfig+0x470>)
 8005b82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 80a1 	beq.w	8005cd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b92:	4b34      	ldr	r3, [pc, #208]	@ (8005c64 <HAL_RCC_OscConfig+0x470>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f003 030c 	and.w	r3, r3, #12
 8005b9a:	2b08      	cmp	r3, #8
 8005b9c:	d05c      	beq.n	8005c58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d141      	bne.n	8005c2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ba6:	4b31      	ldr	r3, [pc, #196]	@ (8005c6c <HAL_RCC_OscConfig+0x478>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bac:	f7fd fd66 	bl	800367c <HAL_GetTick>
 8005bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bb4:	f7fd fd62 	bl	800367c <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e087      	b.n	8005cd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bc6:	4b27      	ldr	r3, [pc, #156]	@ (8005c64 <HAL_RCC_OscConfig+0x470>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1f0      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	69da      	ldr	r2, [r3, #28]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be0:	019b      	lsls	r3, r3, #6
 8005be2:	431a      	orrs	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be8:	085b      	lsrs	r3, r3, #1
 8005bea:	3b01      	subs	r3, #1
 8005bec:	041b      	lsls	r3, r3, #16
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf4:	061b      	lsls	r3, r3, #24
 8005bf6:	491b      	ldr	r1, [pc, #108]	@ (8005c64 <HAL_RCC_OscConfig+0x470>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8005c6c <HAL_RCC_OscConfig+0x478>)
 8005bfe:	2201      	movs	r2, #1
 8005c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c02:	f7fd fd3b 	bl	800367c <HAL_GetTick>
 8005c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c08:	e008      	b.n	8005c1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c0a:	f7fd fd37 	bl	800367c <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d901      	bls.n	8005c1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e05c      	b.n	8005cd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c1c:	4b11      	ldr	r3, [pc, #68]	@ (8005c64 <HAL_RCC_OscConfig+0x470>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0f0      	beq.n	8005c0a <HAL_RCC_OscConfig+0x416>
 8005c28:	e054      	b.n	8005cd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c2a:	4b10      	ldr	r3, [pc, #64]	@ (8005c6c <HAL_RCC_OscConfig+0x478>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c30:	f7fd fd24 	bl	800367c <HAL_GetTick>
 8005c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c36:	e008      	b.n	8005c4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c38:	f7fd fd20 	bl	800367c <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e045      	b.n	8005cd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c4a:	4b06      	ldr	r3, [pc, #24]	@ (8005c64 <HAL_RCC_OscConfig+0x470>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1f0      	bne.n	8005c38 <HAL_RCC_OscConfig+0x444>
 8005c56:	e03d      	b.n	8005cd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d107      	bne.n	8005c70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e038      	b.n	8005cd6 <HAL_RCC_OscConfig+0x4e2>
 8005c64:	40023800 	.word	0x40023800
 8005c68:	40007000 	.word	0x40007000
 8005c6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c70:	4b1b      	ldr	r3, [pc, #108]	@ (8005ce0 <HAL_RCC_OscConfig+0x4ec>)
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d028      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d121      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d11a      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ca6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d111      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb6:	085b      	lsrs	r3, r3, #1
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d107      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d001      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e000      	b.n	8005cd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3718      	adds	r7, #24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	40023800 	.word	0x40023800

08005ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d101      	bne.n	8005cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e0cc      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cf8:	4b68      	ldr	r3, [pc, #416]	@ (8005e9c <HAL_RCC_ClockConfig+0x1b8>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0307 	and.w	r3, r3, #7
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d90c      	bls.n	8005d20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d06:	4b65      	ldr	r3, [pc, #404]	@ (8005e9c <HAL_RCC_ClockConfig+0x1b8>)
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	b2d2      	uxtb	r2, r2
 8005d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d0e:	4b63      	ldr	r3, [pc, #396]	@ (8005e9c <HAL_RCC_ClockConfig+0x1b8>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d001      	beq.n	8005d20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e0b8      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d020      	beq.n	8005d6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d005      	beq.n	8005d44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d38:	4b59      	ldr	r3, [pc, #356]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	4a58      	ldr	r2, [pc, #352]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005d42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0308 	and.w	r3, r3, #8
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d005      	beq.n	8005d5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d50:	4b53      	ldr	r3, [pc, #332]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	4a52      	ldr	r2, [pc, #328]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005d5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d5c:	4b50      	ldr	r3, [pc, #320]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	494d      	ldr	r1, [pc, #308]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d044      	beq.n	8005e04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d107      	bne.n	8005d92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d82:	4b47      	ldr	r3, [pc, #284]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d119      	bne.n	8005dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e07f      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d003      	beq.n	8005da2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d9e:	2b03      	cmp	r3, #3
 8005da0:	d107      	bne.n	8005db2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005da2:	4b3f      	ldr	r3, [pc, #252]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d109      	bne.n	8005dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e06f      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005db2:	4b3b      	ldr	r3, [pc, #236]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e067      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dc2:	4b37      	ldr	r3, [pc, #220]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f023 0203 	bic.w	r2, r3, #3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	4934      	ldr	r1, [pc, #208]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005dd4:	f7fd fc52 	bl	800367c <HAL_GetTick>
 8005dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dda:	e00a      	b.n	8005df2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ddc:	f7fd fc4e 	bl	800367c <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e04f      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005df2:	4b2b      	ldr	r3, [pc, #172]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f003 020c 	and.w	r2, r3, #12
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d1eb      	bne.n	8005ddc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e04:	4b25      	ldr	r3, [pc, #148]	@ (8005e9c <HAL_RCC_ClockConfig+0x1b8>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d20c      	bcs.n	8005e2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e12:	4b22      	ldr	r3, [pc, #136]	@ (8005e9c <HAL_RCC_ClockConfig+0x1b8>)
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	b2d2      	uxtb	r2, r2
 8005e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e1a:	4b20      	ldr	r3, [pc, #128]	@ (8005e9c <HAL_RCC_ClockConfig+0x1b8>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d001      	beq.n	8005e2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e032      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0304 	and.w	r3, r3, #4
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d008      	beq.n	8005e4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e38:	4b19      	ldr	r3, [pc, #100]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	4916      	ldr	r1, [pc, #88]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0308 	and.w	r3, r3, #8
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d009      	beq.n	8005e6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e56:	4b12      	ldr	r3, [pc, #72]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	00db      	lsls	r3, r3, #3
 8005e64:	490e      	ldr	r1, [pc, #56]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e6a:	f000 f821 	bl	8005eb0 <HAL_RCC_GetSysClockFreq>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	4b0b      	ldr	r3, [pc, #44]	@ (8005ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	091b      	lsrs	r3, r3, #4
 8005e76:	f003 030f 	and.w	r3, r3, #15
 8005e7a:	490a      	ldr	r1, [pc, #40]	@ (8005ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8005e7c:	5ccb      	ldrb	r3, [r1, r3]
 8005e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e82:	4a09      	ldr	r2, [pc, #36]	@ (8005ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8005e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e86:	4b09      	ldr	r3, [pc, #36]	@ (8005eac <HAL_RCC_ClockConfig+0x1c8>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fb fd3c 	bl	8001908 <HAL_InitTick>

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	40023c00 	.word	0x40023c00
 8005ea0:	40023800 	.word	0x40023800
 8005ea4:	080122e0 	.word	0x080122e0
 8005ea8:	20000000 	.word	0x20000000
 8005eac:	20000020 	.word	0x20000020

08005eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005eb4:	b094      	sub	sp, #80	@ 0x50
 8005eb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ec8:	4b79      	ldr	r3, [pc, #484]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f003 030c 	and.w	r3, r3, #12
 8005ed0:	2b08      	cmp	r3, #8
 8005ed2:	d00d      	beq.n	8005ef0 <HAL_RCC_GetSysClockFreq+0x40>
 8005ed4:	2b08      	cmp	r3, #8
 8005ed6:	f200 80e1 	bhi.w	800609c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d002      	beq.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x34>
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	d003      	beq.n	8005eea <HAL_RCC_GetSysClockFreq+0x3a>
 8005ee2:	e0db      	b.n	800609c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ee4:	4b73      	ldr	r3, [pc, #460]	@ (80060b4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005ee8:	e0db      	b.n	80060a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005eea:	4b73      	ldr	r3, [pc, #460]	@ (80060b8 <HAL_RCC_GetSysClockFreq+0x208>)
 8005eec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005eee:	e0d8      	b.n	80060a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ef0:	4b6f      	ldr	r3, [pc, #444]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ef8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005efa:	4b6d      	ldr	r3, [pc, #436]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d063      	beq.n	8005fce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f06:	4b6a      	ldr	r3, [pc, #424]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	099b      	lsrs	r3, r3, #6
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f18:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005f22:	4622      	mov	r2, r4
 8005f24:	462b      	mov	r3, r5
 8005f26:	f04f 0000 	mov.w	r0, #0
 8005f2a:	f04f 0100 	mov.w	r1, #0
 8005f2e:	0159      	lsls	r1, r3, #5
 8005f30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f34:	0150      	lsls	r0, r2, #5
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	1a51      	subs	r1, r2, r1
 8005f3e:	6139      	str	r1, [r7, #16]
 8005f40:	4629      	mov	r1, r5
 8005f42:	eb63 0301 	sbc.w	r3, r3, r1
 8005f46:	617b      	str	r3, [r7, #20]
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	f04f 0300 	mov.w	r3, #0
 8005f50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f54:	4659      	mov	r1, fp
 8005f56:	018b      	lsls	r3, r1, #6
 8005f58:	4651      	mov	r1, sl
 8005f5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f5e:	4651      	mov	r1, sl
 8005f60:	018a      	lsls	r2, r1, #6
 8005f62:	4651      	mov	r1, sl
 8005f64:	ebb2 0801 	subs.w	r8, r2, r1
 8005f68:	4659      	mov	r1, fp
 8005f6a:	eb63 0901 	sbc.w	r9, r3, r1
 8005f6e:	f04f 0200 	mov.w	r2, #0
 8005f72:	f04f 0300 	mov.w	r3, #0
 8005f76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f82:	4690      	mov	r8, r2
 8005f84:	4699      	mov	r9, r3
 8005f86:	4623      	mov	r3, r4
 8005f88:	eb18 0303 	adds.w	r3, r8, r3
 8005f8c:	60bb      	str	r3, [r7, #8]
 8005f8e:	462b      	mov	r3, r5
 8005f90:	eb49 0303 	adc.w	r3, r9, r3
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	f04f 0200 	mov.w	r2, #0
 8005f9a:	f04f 0300 	mov.w	r3, #0
 8005f9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	024b      	lsls	r3, r1, #9
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005fac:	4621      	mov	r1, r4
 8005fae:	024a      	lsls	r2, r1, #9
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005fc0:	f7fa fde4 	bl	8000b8c <__aeabi_uldivmod>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4613      	mov	r3, r2
 8005fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fcc:	e058      	b.n	8006080 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fce:	4b38      	ldr	r3, [pc, #224]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	099b      	lsrs	r3, r3, #6
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	4611      	mov	r1, r2
 8005fda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005fde:	623b      	str	r3, [r7, #32]
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fe4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005fe8:	4642      	mov	r2, r8
 8005fea:	464b      	mov	r3, r9
 8005fec:	f04f 0000 	mov.w	r0, #0
 8005ff0:	f04f 0100 	mov.w	r1, #0
 8005ff4:	0159      	lsls	r1, r3, #5
 8005ff6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ffa:	0150      	lsls	r0, r2, #5
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	4641      	mov	r1, r8
 8006002:	ebb2 0a01 	subs.w	sl, r2, r1
 8006006:	4649      	mov	r1, r9
 8006008:	eb63 0b01 	sbc.w	fp, r3, r1
 800600c:	f04f 0200 	mov.w	r2, #0
 8006010:	f04f 0300 	mov.w	r3, #0
 8006014:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006018:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800601c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006020:	ebb2 040a 	subs.w	r4, r2, sl
 8006024:	eb63 050b 	sbc.w	r5, r3, fp
 8006028:	f04f 0200 	mov.w	r2, #0
 800602c:	f04f 0300 	mov.w	r3, #0
 8006030:	00eb      	lsls	r3, r5, #3
 8006032:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006036:	00e2      	lsls	r2, r4, #3
 8006038:	4614      	mov	r4, r2
 800603a:	461d      	mov	r5, r3
 800603c:	4643      	mov	r3, r8
 800603e:	18e3      	adds	r3, r4, r3
 8006040:	603b      	str	r3, [r7, #0]
 8006042:	464b      	mov	r3, r9
 8006044:	eb45 0303 	adc.w	r3, r5, r3
 8006048:	607b      	str	r3, [r7, #4]
 800604a:	f04f 0200 	mov.w	r2, #0
 800604e:	f04f 0300 	mov.w	r3, #0
 8006052:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006056:	4629      	mov	r1, r5
 8006058:	028b      	lsls	r3, r1, #10
 800605a:	4621      	mov	r1, r4
 800605c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006060:	4621      	mov	r1, r4
 8006062:	028a      	lsls	r2, r1, #10
 8006064:	4610      	mov	r0, r2
 8006066:	4619      	mov	r1, r3
 8006068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800606a:	2200      	movs	r2, #0
 800606c:	61bb      	str	r3, [r7, #24]
 800606e:	61fa      	str	r2, [r7, #28]
 8006070:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006074:	f7fa fd8a 	bl	8000b8c <__aeabi_uldivmod>
 8006078:	4602      	mov	r2, r0
 800607a:	460b      	mov	r3, r1
 800607c:	4613      	mov	r3, r2
 800607e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006080:	4b0b      	ldr	r3, [pc, #44]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	0c1b      	lsrs	r3, r3, #16
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	3301      	adds	r3, #1
 800608c:	005b      	lsls	r3, r3, #1
 800608e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006090:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006094:	fbb2 f3f3 	udiv	r3, r2, r3
 8006098:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800609a:	e002      	b.n	80060a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800609c:	4b05      	ldr	r3, [pc, #20]	@ (80060b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800609e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80060a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3750      	adds	r7, #80	@ 0x50
 80060a8:	46bd      	mov	sp, r7
 80060aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060ae:	bf00      	nop
 80060b0:	40023800 	.word	0x40023800
 80060b4:	00f42400 	.word	0x00f42400
 80060b8:	007a1200 	.word	0x007a1200

080060bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060bc:	b480      	push	{r7}
 80060be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060c0:	4b03      	ldr	r3, [pc, #12]	@ (80060d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80060c2:	681b      	ldr	r3, [r3, #0]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	20000000 	.word	0x20000000

080060d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80060d8:	f7ff fff0 	bl	80060bc <HAL_RCC_GetHCLKFreq>
 80060dc:	4602      	mov	r2, r0
 80060de:	4b05      	ldr	r3, [pc, #20]	@ (80060f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	0a9b      	lsrs	r3, r3, #10
 80060e4:	f003 0307 	and.w	r3, r3, #7
 80060e8:	4903      	ldr	r1, [pc, #12]	@ (80060f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060ea:	5ccb      	ldrb	r3, [r1, r3]
 80060ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	40023800 	.word	0x40023800
 80060f8:	080122f0 	.word	0x080122f0

080060fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006100:	f7ff ffdc 	bl	80060bc <HAL_RCC_GetHCLKFreq>
 8006104:	4602      	mov	r2, r0
 8006106:	4b05      	ldr	r3, [pc, #20]	@ (800611c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	0b5b      	lsrs	r3, r3, #13
 800610c:	f003 0307 	and.w	r3, r3, #7
 8006110:	4903      	ldr	r1, [pc, #12]	@ (8006120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006112:	5ccb      	ldrb	r3, [r1, r3]
 8006114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006118:	4618      	mov	r0, r3
 800611a:	bd80      	pop	{r7, pc}
 800611c:	40023800 	.word	0x40023800
 8006120:	080122f0 	.word	0x080122f0

08006124 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	220f      	movs	r2, #15
 8006132:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006134:	4b12      	ldr	r3, [pc, #72]	@ (8006180 <HAL_RCC_GetClockConfig+0x5c>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f003 0203 	and.w	r2, r3, #3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006140:	4b0f      	ldr	r3, [pc, #60]	@ (8006180 <HAL_RCC_GetClockConfig+0x5c>)
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800614c:	4b0c      	ldr	r3, [pc, #48]	@ (8006180 <HAL_RCC_GetClockConfig+0x5c>)
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006158:	4b09      	ldr	r3, [pc, #36]	@ (8006180 <HAL_RCC_GetClockConfig+0x5c>)
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	08db      	lsrs	r3, r3, #3
 800615e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006166:	4b07      	ldr	r3, [pc, #28]	@ (8006184 <HAL_RCC_GetClockConfig+0x60>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0207 	and.w	r2, r3, #7
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	601a      	str	r2, [r3, #0]
}
 8006172:	bf00      	nop
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	40023800 	.word	0x40023800
 8006184:	40023c00 	.word	0x40023c00

08006188 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006194:	2300      	movs	r3, #0
 8006196:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d105      	bne.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d035      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80061b0:	4b67      	ldr	r3, [pc, #412]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061b6:	f7fd fa61 	bl	800367c <HAL_GetTick>
 80061ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061bc:	e008      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80061be:	f7fd fa5d 	bl	800367c <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d901      	bls.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e0ba      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061d0:	4b60      	ldr	r3, [pc, #384]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1f0      	bne.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	019a      	lsls	r2, r3, #6
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	071b      	lsls	r3, r3, #28
 80061e8:	495a      	ldr	r1, [pc, #360]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80061f0:	4b57      	ldr	r3, [pc, #348]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80061f2:	2201      	movs	r2, #1
 80061f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061f6:	f7fd fa41 	bl	800367c <HAL_GetTick>
 80061fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061fc:	e008      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80061fe:	f7fd fa3d 	bl	800367c <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d901      	bls.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e09a      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006210:	4b50      	ldr	r3, [pc, #320]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0f0      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 8083 	beq.w	8006330 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800622a:	2300      	movs	r3, #0
 800622c:	60fb      	str	r3, [r7, #12]
 800622e:	4b49      	ldr	r3, [pc, #292]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006232:	4a48      	ldr	r2, [pc, #288]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006238:	6413      	str	r3, [r2, #64]	@ 0x40
 800623a:	4b46      	ldr	r3, [pc, #280]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800623c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006246:	4b44      	ldr	r3, [pc, #272]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a43      	ldr	r2, [pc, #268]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800624c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006250:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006252:	f7fd fa13 	bl	800367c <HAL_GetTick>
 8006256:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006258:	e008      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800625a:	f7fd fa0f 	bl	800367c <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d901      	bls.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e06c      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800626c:	4b3a      	ldr	r3, [pc, #232]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0f0      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006278:	4b36      	ldr	r3, [pc, #216]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800627a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800627c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006280:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d02f      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	429a      	cmp	r2, r3
 8006294:	d028      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006296:	4b2f      	ldr	r3, [pc, #188]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800629a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800629e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062a0:	4b2e      	ldr	r3, [pc, #184]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062a2:	2201      	movs	r2, #1
 80062a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062a6:	4b2d      	ldr	r3, [pc, #180]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80062ac:	4a29      	ldr	r2, [pc, #164]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80062b2:	4b28      	ldr	r3, [pc, #160]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80062b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d114      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80062be:	f7fd f9dd 	bl	800367c <HAL_GetTick>
 80062c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062c4:	e00a      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062c6:	f7fd f9d9 	bl	800367c <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d901      	bls.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e034      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062dc:	4b1d      	ldr	r3, [pc, #116]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80062de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d0ee      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062f4:	d10d      	bne.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80062f6:	4b17      	ldr	r3, [pc, #92]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006306:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800630a:	4912      	ldr	r1, [pc, #72]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800630c:	4313      	orrs	r3, r2
 800630e:	608b      	str	r3, [r1, #8]
 8006310:	e005      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006312:	4b10      	ldr	r3, [pc, #64]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	4a0f      	ldr	r2, [pc, #60]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006318:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800631c:	6093      	str	r3, [r2, #8]
 800631e:	4b0d      	ldr	r3, [pc, #52]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006320:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800632a:	490a      	ldr	r1, [pc, #40]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800632c:	4313      	orrs	r3, r2
 800632e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0308 	and.w	r3, r3, #8
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	7c1a      	ldrb	r2, [r3, #16]
 8006340:	4b07      	ldr	r3, [pc, #28]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006342:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3718      	adds	r7, #24
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	42470068 	.word	0x42470068
 8006354:	40023800 	.word	0x40023800
 8006358:	40007000 	.word	0x40007000
 800635c:	42470e40 	.word	0x42470e40
 8006360:	424711e0 	.word	0x424711e0

08006364 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e073      	b.n	8006462 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	7f5b      	ldrb	r3, [r3, #29]
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b00      	cmp	r3, #0
 8006382:	d105      	bne.n	8006390 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7fb f9d8 	bl	8001740 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2202      	movs	r2, #2
 8006394:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f003 0310 	and.w	r3, r3, #16
 80063a0:	2b10      	cmp	r3, #16
 80063a2:	d055      	beq.n	8006450 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	22ca      	movs	r2, #202	@ 0xca
 80063aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2253      	movs	r2, #83	@ 0x53
 80063b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f99d 	bl	80066f4 <RTC_EnterInitMode>
 80063ba:	4603      	mov	r3, r0
 80063bc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80063be:	7bfb      	ldrb	r3, [r7, #15]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d12c      	bne.n	800641e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	6812      	ldr	r2, [r2, #0]
 80063ce:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80063d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063d6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6899      	ldr	r1, [r3, #8]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	695b      	ldr	r3, [r3, #20]
 80063ec:	431a      	orrs	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	68d2      	ldr	r2, [r2, #12]
 80063fe:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6919      	ldr	r1, [r3, #16]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	041a      	lsls	r2, r3, #16
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	430a      	orrs	r2, r1
 8006412:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 f9a4 	bl	8006762 <RTC_ExitInitMode>
 800641a:	4603      	mov	r3, r0
 800641c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800641e:	7bfb      	ldrb	r3, [r7, #15]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d110      	bne.n	8006446 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006432:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	699a      	ldr	r2, [r3, #24]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	22ff      	movs	r2, #255	@ 0xff
 800644c:	625a      	str	r2, [r3, #36]	@ 0x24
 800644e:	e001      	b.n	8006454 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006454:	7bfb      	ldrb	r3, [r7, #15]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d102      	bne.n	8006460 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006460:	7bfb      	ldrb	r3, [r7, #15]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800646a:	b590      	push	{r4, r7, lr}
 800646c:	b087      	sub	sp, #28
 800646e:	af00      	add	r7, sp, #0
 8006470:	60f8      	str	r0, [r7, #12]
 8006472:	60b9      	str	r1, [r7, #8]
 8006474:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006476:	2300      	movs	r3, #0
 8006478:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	7f1b      	ldrb	r3, [r3, #28]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d101      	bne.n	8006486 <HAL_RTC_SetTime+0x1c>
 8006482:	2302      	movs	r3, #2
 8006484:	e087      	b.n	8006596 <HAL_RTC_SetTime+0x12c>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2201      	movs	r2, #1
 800648a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2202      	movs	r2, #2
 8006490:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d126      	bne.n	80064e6 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d102      	bne.n	80064ac <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2200      	movs	r2, #0
 80064aa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	4618      	mov	r0, r3
 80064b2:	f000 f97b 	bl	80067ac <RTC_ByteToBcd2>
 80064b6:	4603      	mov	r3, r0
 80064b8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	785b      	ldrb	r3, [r3, #1]
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 f974 	bl	80067ac <RTC_ByteToBcd2>
 80064c4:	4603      	mov	r3, r0
 80064c6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80064c8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	789b      	ldrb	r3, [r3, #2]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 f96c 	bl	80067ac <RTC_ByteToBcd2>
 80064d4:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80064d6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	78db      	ldrb	r3, [r3, #3]
 80064de:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80064e0:	4313      	orrs	r3, r2
 80064e2:	617b      	str	r3, [r7, #20]
 80064e4:	e018      	b.n	8006518 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d102      	bne.n	80064fa <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2200      	movs	r2, #0
 80064f8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	785b      	ldrb	r3, [r3, #1]
 8006504:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006506:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800650c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	78db      	ldrb	r3, [r3, #3]
 8006512:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	22ca      	movs	r2, #202	@ 0xca
 800651e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2253      	movs	r2, #83	@ 0x53
 8006526:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f000 f8e3 	bl	80066f4 <RTC_EnterInitMode>
 800652e:	4603      	mov	r3, r0
 8006530:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006532:	7cfb      	ldrb	r3, [r7, #19]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d120      	bne.n	800657a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006542:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006546:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689a      	ldr	r2, [r3, #8]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006556:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6899      	ldr	r1, [r3, #8]
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	68da      	ldr	r2, [r3, #12]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	431a      	orrs	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 f8f6 	bl	8006762 <RTC_ExitInitMode>
 8006576:	4603      	mov	r3, r0
 8006578:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800657a:	7cfb      	ldrb	r3, [r7, #19]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d102      	bne.n	8006586 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2201      	movs	r2, #1
 8006584:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	22ff      	movs	r2, #255	@ 0xff
 800658c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	771a      	strb	r2, [r3, #28]

  return status;
 8006594:	7cfb      	ldrb	r3, [r7, #19]
}
 8006596:	4618      	mov	r0, r3
 8006598:	371c      	adds	r7, #28
 800659a:	46bd      	mov	sp, r7
 800659c:	bd90      	pop	{r4, r7, pc}

0800659e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800659e:	b590      	push	{r4, r7, lr}
 80065a0:	b087      	sub	sp, #28
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	60f8      	str	r0, [r7, #12]
 80065a6:	60b9      	str	r1, [r7, #8]
 80065a8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	7f1b      	ldrb	r3, [r3, #28]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d101      	bne.n	80065ba <HAL_RTC_SetDate+0x1c>
 80065b6:	2302      	movs	r3, #2
 80065b8:	e071      	b.n	800669e <HAL_RTC_SetDate+0x100>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2201      	movs	r2, #1
 80065be:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2202      	movs	r2, #2
 80065c4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10e      	bne.n	80065ea <HAL_RTC_SetDate+0x4c>
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	785b      	ldrb	r3, [r3, #1]
 80065d0:	f003 0310 	and.w	r3, r3, #16
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d008      	beq.n	80065ea <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	785b      	ldrb	r3, [r3, #1]
 80065dc:	f023 0310 	bic.w	r3, r3, #16
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	330a      	adds	r3, #10
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d11c      	bne.n	800662a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	78db      	ldrb	r3, [r3, #3]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 f8d9 	bl	80067ac <RTC_ByteToBcd2>
 80065fa:	4603      	mov	r3, r0
 80065fc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	785b      	ldrb	r3, [r3, #1]
 8006602:	4618      	mov	r0, r3
 8006604:	f000 f8d2 	bl	80067ac <RTC_ByteToBcd2>
 8006608:	4603      	mov	r3, r0
 800660a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800660c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	789b      	ldrb	r3, [r3, #2]
 8006612:	4618      	mov	r0, r3
 8006614:	f000 f8ca 	bl	80067ac <RTC_ByteToBcd2>
 8006618:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800661a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006624:	4313      	orrs	r3, r2
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	e00e      	b.n	8006648 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	78db      	ldrb	r3, [r3, #3]
 800662e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	785b      	ldrb	r3, [r3, #1]
 8006634:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006636:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800663c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006644:	4313      	orrs	r3, r2
 8006646:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	22ca      	movs	r2, #202	@ 0xca
 800664e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2253      	movs	r2, #83	@ 0x53
 8006656:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f000 f84b 	bl	80066f4 <RTC_EnterInitMode>
 800665e:	4603      	mov	r3, r0
 8006660:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006662:	7cfb      	ldrb	r3, [r7, #19]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10c      	bne.n	8006682 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006672:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006676:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 f872 	bl	8006762 <RTC_ExitInitMode>
 800667e:	4603      	mov	r3, r0
 8006680:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006682:	7cfb      	ldrb	r3, [r7, #19]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d102      	bne.n	800668e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2201      	movs	r2, #1
 800668c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	22ff      	movs	r2, #255	@ 0xff
 8006694:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	771a      	strb	r2, [r3, #28]

  return status;
 800669c:	7cfb      	ldrb	r3, [r7, #19]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	371c      	adds	r7, #28
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd90      	pop	{r4, r7, pc}
	...

080066a8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066b0:	2300      	movs	r3, #0
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a0d      	ldr	r2, [pc, #52]	@ (80066f0 <HAL_RTC_WaitForSynchro+0x48>)
 80066ba:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066bc:	f7fc ffde 	bl	800367c <HAL_GetTick>
 80066c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80066c2:	e009      	b.n	80066d8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80066c4:	f7fc ffda 	bl	800367c <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80066d2:	d901      	bls.n	80066d8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e007      	b.n	80066e8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d0ee      	beq.n	80066c4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	00013f5f 	.word	0x00013f5f

080066f4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006700:	2300      	movs	r3, #0
 8006702:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800670e:	2b00      	cmp	r3, #0
 8006710:	d122      	bne.n	8006758 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006720:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006722:	f7fc ffab 	bl	800367c <HAL_GetTick>
 8006726:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006728:	e00c      	b.n	8006744 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800672a:	f7fc ffa7 	bl	800367c <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006738:	d904      	bls.n	8006744 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2204      	movs	r2, #4
 800673e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800674e:	2b00      	cmp	r3, #0
 8006750:	d102      	bne.n	8006758 <RTC_EnterInitMode+0x64>
 8006752:	7bfb      	ldrb	r3, [r7, #15]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d1e8      	bne.n	800672a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006758:	7bfb      	ldrb	r3, [r7, #15]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b084      	sub	sp, #16
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68da      	ldr	r2, [r3, #12]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800677c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f003 0320 	and.w	r3, r3, #32
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10a      	bne.n	80067a2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f7ff ff8b 	bl	80066a8 <HAL_RTC_WaitForSynchro>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d004      	beq.n	80067a2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2204      	movs	r2, #4
 800679c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	4603      	mov	r3, r0
 80067b4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80067ba:	e005      	b.n	80067c8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	3301      	adds	r3, #1
 80067c0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80067c2:	79fb      	ldrb	r3, [r7, #7]
 80067c4:	3b0a      	subs	r3, #10
 80067c6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80067c8:	79fb      	ldrb	r3, [r7, #7]
 80067ca:	2b09      	cmp	r3, #9
 80067cc:	d8f6      	bhi.n	80067bc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	011b      	lsls	r3, r3, #4
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	79fb      	ldrb	r3, [r7, #7]
 80067d8:	4313      	orrs	r3, r2
 80067da:	b2db      	uxtb	r3, r3
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e07b      	b.n	80068f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d108      	bne.n	8006814 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800680a:	d009      	beq.n	8006820 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	61da      	str	r2, [r3, #28]
 8006812:	e005      	b.n	8006820 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d106      	bne.n	8006840 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fa ffac 	bl	8001798 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006856:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006868:	431a      	orrs	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006872:	431a      	orrs	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	f003 0302 	and.w	r3, r3, #2
 800687c:	431a      	orrs	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	431a      	orrs	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006890:	431a      	orrs	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068a4:	ea42 0103 	orr.w	r1, r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	0c1b      	lsrs	r3, r3, #16
 80068be:	f003 0104 	and.w	r1, r3, #4
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c6:	f003 0210 	and.w	r2, r3, #16
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69da      	ldr	r2, [r3, #28]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b088      	sub	sp, #32
 80068fe:	af00      	add	r7, sp, #0
 8006900:	60f8      	str	r0, [r7, #12]
 8006902:	60b9      	str	r1, [r7, #8]
 8006904:	603b      	str	r3, [r7, #0]
 8006906:	4613      	mov	r3, r2
 8006908:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006914:	2b01      	cmp	r3, #1
 8006916:	d101      	bne.n	800691c <HAL_SPI_Transmit+0x22>
 8006918:	2302      	movs	r3, #2
 800691a:	e12d      	b.n	8006b78 <HAL_SPI_Transmit+0x27e>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006924:	f7fc feaa 	bl	800367c <HAL_GetTick>
 8006928:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800692a:	88fb      	ldrh	r3, [r7, #6]
 800692c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b01      	cmp	r3, #1
 8006938:	d002      	beq.n	8006940 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800693a:	2302      	movs	r3, #2
 800693c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800693e:	e116      	b.n	8006b6e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <HAL_SPI_Transmit+0x52>
 8006946:	88fb      	ldrh	r3, [r7, #6]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d102      	bne.n	8006952 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006950:	e10d      	b.n	8006b6e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2203      	movs	r2, #3
 8006956:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	88fa      	ldrh	r2, [r7, #6]
 800696a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	88fa      	ldrh	r2, [r7, #6]
 8006970:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006998:	d10f      	bne.n	80069ba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069c4:	2b40      	cmp	r3, #64	@ 0x40
 80069c6:	d007      	beq.n	80069d8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069e0:	d14f      	bne.n	8006a82 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d002      	beq.n	80069f0 <HAL_SPI_Transmit+0xf6>
 80069ea:	8afb      	ldrh	r3, [r7, #22]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d142      	bne.n	8006a76 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f4:	881a      	ldrh	r2, [r3, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a00:	1c9a      	adds	r2, r3, #2
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a14:	e02f      	b.n	8006a76 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d112      	bne.n	8006a4a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a28:	881a      	ldrh	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a34:	1c9a      	adds	r2, r3, #2
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	3b01      	subs	r3, #1
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006a48:	e015      	b.n	8006a76 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a4a:	f7fc fe17 	bl	800367c <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d803      	bhi.n	8006a62 <HAL_SPI_Transmit+0x168>
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a60:	d102      	bne.n	8006a68 <HAL_SPI_Transmit+0x16e>
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d106      	bne.n	8006a76 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006a74:	e07b      	b.n	8006b6e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1ca      	bne.n	8006a16 <HAL_SPI_Transmit+0x11c>
 8006a80:	e050      	b.n	8006b24 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <HAL_SPI_Transmit+0x196>
 8006a8a:	8afb      	ldrh	r3, [r7, #22]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d144      	bne.n	8006b1a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	330c      	adds	r3, #12
 8006a9a:	7812      	ldrb	r2, [r2, #0]
 8006a9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006ab6:	e030      	b.n	8006b1a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f003 0302 	and.w	r3, r3, #2
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d113      	bne.n	8006aee <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	330c      	adds	r3, #12
 8006ad0:	7812      	ldrb	r2, [r2, #0]
 8006ad2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad8:	1c5a      	adds	r2, r3, #1
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006aec:	e015      	b.n	8006b1a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aee:	f7fc fdc5 	bl	800367c <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d803      	bhi.n	8006b06 <HAL_SPI_Transmit+0x20c>
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b04:	d102      	bne.n	8006b0c <HAL_SPI_Transmit+0x212>
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d106      	bne.n	8006b1a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006b18:	e029      	b.n	8006b6e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1c9      	bne.n	8006ab8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 fa61 	bl	8006ff0 <SPI_EndRxTxTransaction>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d002      	beq.n	8006b3a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2220      	movs	r2, #32
 8006b38:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10a      	bne.n	8006b58 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b42:	2300      	movs	r3, #0
 8006b44:	613b      	str	r3, [r7, #16]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	613b      	str	r3, [r7, #16]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	613b      	str	r3, [r7, #16]
 8006b56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	77fb      	strb	r3, [r7, #31]
 8006b64:	e003      	b.n	8006b6e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006b76:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3720      	adds	r7, #32
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b08c      	sub	sp, #48	@ 0x30
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d101      	bne.n	8006ba6 <HAL_SPI_TransmitReceive+0x26>
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	e198      	b.n	8006ed8 <HAL_SPI_TransmitReceive+0x358>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bae:	f7fc fd65 	bl	800367c <HAL_GetTick>
 8006bb2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006bc4:	887b      	ldrh	r3, [r7, #2]
 8006bc6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006bc8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d00f      	beq.n	8006bf0 <HAL_SPI_TransmitReceive+0x70>
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bd6:	d107      	bne.n	8006be8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d103      	bne.n	8006be8 <HAL_SPI_TransmitReceive+0x68>
 8006be0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006be4:	2b04      	cmp	r3, #4
 8006be6:	d003      	beq.n	8006bf0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006be8:	2302      	movs	r3, #2
 8006bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006bee:	e16d      	b.n	8006ecc <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d005      	beq.n	8006c02 <HAL_SPI_TransmitReceive+0x82>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d002      	beq.n	8006c02 <HAL_SPI_TransmitReceive+0x82>
 8006bfc:	887b      	ldrh	r3, [r7, #2]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d103      	bne.n	8006c0a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006c08:	e160      	b.n	8006ecc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b04      	cmp	r3, #4
 8006c14:	d003      	beq.n	8006c1e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2205      	movs	r2, #5
 8006c1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	887a      	ldrh	r2, [r7, #2]
 8006c2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	887a      	ldrh	r2, [r7, #2]
 8006c34:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	68ba      	ldr	r2, [r7, #8]
 8006c3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	887a      	ldrh	r2, [r7, #2]
 8006c40:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	887a      	ldrh	r2, [r7, #2]
 8006c46:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c5e:	2b40      	cmp	r3, #64	@ 0x40
 8006c60:	d007      	beq.n	8006c72 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c7a:	d17c      	bne.n	8006d76 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <HAL_SPI_TransmitReceive+0x10a>
 8006c84:	8b7b      	ldrh	r3, [r7, #26]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d16a      	bne.n	8006d60 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c8e:	881a      	ldrh	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c9a:	1c9a      	adds	r2, r3, #2
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cae:	e057      	b.n	8006d60 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d11b      	bne.n	8006cf6 <HAL_SPI_TransmitReceive+0x176>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d016      	beq.n	8006cf6 <HAL_SPI_TransmitReceive+0x176>
 8006cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d113      	bne.n	8006cf6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd2:	881a      	ldrh	r2, [r3, #0]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cde:	1c9a      	adds	r2, r3, #2
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	3b01      	subs	r3, #1
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d119      	bne.n	8006d38 <HAL_SPI_TransmitReceive+0x1b8>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d014      	beq.n	8006d38 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68da      	ldr	r2, [r3, #12]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d18:	b292      	uxth	r2, r2
 8006d1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d20:	1c9a      	adds	r2, r3, #2
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d34:	2301      	movs	r3, #1
 8006d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006d38:	f7fc fca0 	bl	800367c <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d80b      	bhi.n	8006d60 <HAL_SPI_TransmitReceive+0x1e0>
 8006d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4e:	d007      	beq.n	8006d60 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006d5e:	e0b5      	b.n	8006ecc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1a2      	bne.n	8006cb0 <HAL_SPI_TransmitReceive+0x130>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d19d      	bne.n	8006cb0 <HAL_SPI_TransmitReceive+0x130>
 8006d74:	e080      	b.n	8006e78 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <HAL_SPI_TransmitReceive+0x204>
 8006d7e:	8b7b      	ldrh	r3, [r7, #26]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d16f      	bne.n	8006e64 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	330c      	adds	r3, #12
 8006d8e:	7812      	ldrb	r2, [r2, #0]
 8006d90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d96:	1c5a      	adds	r2, r3, #1
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	3b01      	subs	r3, #1
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006daa:	e05b      	b.n	8006e64 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f003 0302 	and.w	r3, r3, #2
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d11c      	bne.n	8006df4 <HAL_SPI_TransmitReceive+0x274>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d017      	beq.n	8006df4 <HAL_SPI_TransmitReceive+0x274>
 8006dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d114      	bne.n	8006df4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	330c      	adds	r3, #12
 8006dd4:	7812      	ldrb	r2, [r2, #0]
 8006dd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ddc:	1c5a      	adds	r2, r3, #1
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	3b01      	subs	r3, #1
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d119      	bne.n	8006e36 <HAL_SPI_TransmitReceive+0x2b6>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d014      	beq.n	8006e36 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68da      	ldr	r2, [r3, #12]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e16:	b2d2      	uxtb	r2, r2
 8006e18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e1e:	1c5a      	adds	r2, r3, #1
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e32:	2301      	movs	r3, #1
 8006e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e36:	f7fc fc21 	bl	800367c <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d803      	bhi.n	8006e4e <HAL_SPI_TransmitReceive+0x2ce>
 8006e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4c:	d102      	bne.n	8006e54 <HAL_SPI_TransmitReceive+0x2d4>
 8006e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d107      	bne.n	8006e64 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006e62:	e033      	b.n	8006ecc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d19e      	bne.n	8006dac <HAL_SPI_TransmitReceive+0x22c>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d199      	bne.n	8006dac <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 f8b7 	bl	8006ff0 <SPI_EndRxTxTransaction>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d006      	beq.n	8006e96 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2220      	movs	r2, #32
 8006e92:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006e94:	e01a      	b.n	8006ecc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10a      	bne.n	8006eb4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	617b      	str	r3, [r7, #20]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	617b      	str	r3, [r7, #20]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	617b      	str	r3, [r7, #20]
 8006eb2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ec2:	e003      	b.n	8006ecc <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006ed4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3730      	adds	r7, #48	@ 0x30
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b088      	sub	sp, #32
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	603b      	str	r3, [r7, #0]
 8006eec:	4613      	mov	r3, r2
 8006eee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ef0:	f7fc fbc4 	bl	800367c <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef8:	1a9b      	subs	r3, r3, r2
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	4413      	add	r3, r2
 8006efe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f00:	f7fc fbbc 	bl	800367c <HAL_GetTick>
 8006f04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f06:	4b39      	ldr	r3, [pc, #228]	@ (8006fec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	015b      	lsls	r3, r3, #5
 8006f0c:	0d1b      	lsrs	r3, r3, #20
 8006f0e:	69fa      	ldr	r2, [r7, #28]
 8006f10:	fb02 f303 	mul.w	r3, r2, r3
 8006f14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f16:	e054      	b.n	8006fc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1e:	d050      	beq.n	8006fc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f20:	f7fc fbac 	bl	800367c <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	69fa      	ldr	r2, [r7, #28]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d902      	bls.n	8006f36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d13d      	bne.n	8006fb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f4e:	d111      	bne.n	8006f74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f58:	d004      	beq.n	8006f64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f62:	d107      	bne.n	8006f74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f7c:	d10f      	bne.n	8006f9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e017      	b.n	8006fe2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d101      	bne.n	8006fbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	bf0c      	ite	eq
 8006fd2:	2301      	moveq	r3, #1
 8006fd4:	2300      	movne	r3, #0
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	461a      	mov	r2, r3
 8006fda:	79fb      	ldrb	r3, [r7, #7]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d19b      	bne.n	8006f18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3720      	adds	r7, #32
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	20000000 	.word	0x20000000

08006ff0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b088      	sub	sp, #32
 8006ff4:	af02      	add	r7, sp, #8
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2201      	movs	r2, #1
 8007004:	2102      	movs	r1, #2
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f7ff ff6a 	bl	8006ee0 <SPI_WaitFlagStateUntilTimeout>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d007      	beq.n	8007022 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007016:	f043 0220 	orr.w	r2, r3, #32
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e032      	b.n	8007088 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007022:	4b1b      	ldr	r3, [pc, #108]	@ (8007090 <SPI_EndRxTxTransaction+0xa0>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a1b      	ldr	r2, [pc, #108]	@ (8007094 <SPI_EndRxTxTransaction+0xa4>)
 8007028:	fba2 2303 	umull	r2, r3, r2, r3
 800702c:	0d5b      	lsrs	r3, r3, #21
 800702e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007032:	fb02 f303 	mul.w	r3, r2, r3
 8007036:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007040:	d112      	bne.n	8007068 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	2200      	movs	r2, #0
 800704a:	2180      	movs	r1, #128	@ 0x80
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f7ff ff47 	bl	8006ee0 <SPI_WaitFlagStateUntilTimeout>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d016      	beq.n	8007086 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800705c:	f043 0220 	orr.w	r2, r3, #32
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e00f      	b.n	8007088 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00a      	beq.n	8007084 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	3b01      	subs	r3, #1
 8007072:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800707e:	2b80      	cmp	r3, #128	@ 0x80
 8007080:	d0f2      	beq.n	8007068 <SPI_EndRxTxTransaction+0x78>
 8007082:	e000      	b.n	8007086 <SPI_EndRxTxTransaction+0x96>
        break;
 8007084:	bf00      	nop
  }

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	20000000 	.word	0x20000000
 8007094:	165e9f81 	.word	0x165e9f81

08007098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e041      	b.n	800712e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d106      	bne.n	80070c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7fa fbb2 	bl	8001828 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	3304      	adds	r3, #4
 80070d4:	4619      	mov	r1, r3
 80070d6:	4610      	mov	r0, r2
 80070d8:	f000 fa9e 	bl	8007618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
	...

08007138 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b01      	cmp	r3, #1
 800714a:	d001      	beq.n	8007150 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e044      	b.n	80071da <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68da      	ldr	r2, [r3, #12]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f042 0201 	orr.w	r2, r2, #1
 8007166:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a1e      	ldr	r2, [pc, #120]	@ (80071e8 <HAL_TIM_Base_Start_IT+0xb0>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d018      	beq.n	80071a4 <HAL_TIM_Base_Start_IT+0x6c>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800717a:	d013      	beq.n	80071a4 <HAL_TIM_Base_Start_IT+0x6c>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a1a      	ldr	r2, [pc, #104]	@ (80071ec <HAL_TIM_Base_Start_IT+0xb4>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d00e      	beq.n	80071a4 <HAL_TIM_Base_Start_IT+0x6c>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a19      	ldr	r2, [pc, #100]	@ (80071f0 <HAL_TIM_Base_Start_IT+0xb8>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d009      	beq.n	80071a4 <HAL_TIM_Base_Start_IT+0x6c>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a17      	ldr	r2, [pc, #92]	@ (80071f4 <HAL_TIM_Base_Start_IT+0xbc>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d004      	beq.n	80071a4 <HAL_TIM_Base_Start_IT+0x6c>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a16      	ldr	r2, [pc, #88]	@ (80071f8 <HAL_TIM_Base_Start_IT+0xc0>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d111      	bne.n	80071c8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f003 0307 	and.w	r3, r3, #7
 80071ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2b06      	cmp	r3, #6
 80071b4:	d010      	beq.n	80071d8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f042 0201 	orr.w	r2, r2, #1
 80071c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071c6:	e007      	b.n	80071d8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f042 0201 	orr.w	r2, r2, #1
 80071d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	40010000 	.word	0x40010000
 80071ec:	40000400 	.word	0x40000400
 80071f0:	40000800 	.word	0x40000800
 80071f4:	40000c00 	.word	0x40000c00
 80071f8:	40014000 	.word	0x40014000

080071fc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68da      	ldr	r2, [r3, #12]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f022 0201 	bic.w	r2, r2, #1
 8007212:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6a1a      	ldr	r2, [r3, #32]
 800721a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800721e:	4013      	ands	r3, r2
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10f      	bne.n	8007244 <HAL_TIM_Base_Stop_IT+0x48>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6a1a      	ldr	r2, [r3, #32]
 800722a:	f240 4344 	movw	r3, #1092	@ 0x444
 800722e:	4013      	ands	r3, r2
 8007230:	2b00      	cmp	r3, #0
 8007232:	d107      	bne.n	8007244 <HAL_TIM_Base_Stop_IT+0x48>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 0201 	bic.w	r2, r2, #1
 8007242:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	370c      	adds	r7, #12
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b084      	sub	sp, #16
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	f003 0302 	and.w	r3, r3, #2
 8007278:	2b00      	cmp	r3, #0
 800727a:	d020      	beq.n	80072be <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f003 0302 	and.w	r3, r3, #2
 8007282:	2b00      	cmp	r3, #0
 8007284:	d01b      	beq.n	80072be <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f06f 0202 	mvn.w	r2, #2
 800728e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	f003 0303 	and.w	r3, r3, #3
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d003      	beq.n	80072ac <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f999 	bl	80075dc <HAL_TIM_IC_CaptureCallback>
 80072aa:	e005      	b.n	80072b8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f98b 	bl	80075c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f99c 	bl	80075f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d020      	beq.n	800730a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f003 0304 	and.w	r3, r3, #4
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d01b      	beq.n	800730a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f06f 0204 	mvn.w	r2, #4
 80072da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d003      	beq.n	80072f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f973 	bl	80075dc <HAL_TIM_IC_CaptureCallback>
 80072f6:	e005      	b.n	8007304 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f965 	bl	80075c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f976 	bl	80075f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f003 0308 	and.w	r3, r3, #8
 8007310:	2b00      	cmp	r3, #0
 8007312:	d020      	beq.n	8007356 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f003 0308 	and.w	r3, r3, #8
 800731a:	2b00      	cmp	r3, #0
 800731c:	d01b      	beq.n	8007356 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f06f 0208 	mvn.w	r2, #8
 8007326:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2204      	movs	r2, #4
 800732c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	f003 0303 	and.w	r3, r3, #3
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 f94d 	bl	80075dc <HAL_TIM_IC_CaptureCallback>
 8007342:	e005      	b.n	8007350 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f93f 	bl	80075c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f950 	bl	80075f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	f003 0310 	and.w	r3, r3, #16
 800735c:	2b00      	cmp	r3, #0
 800735e:	d020      	beq.n	80073a2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f003 0310 	and.w	r3, r3, #16
 8007366:	2b00      	cmp	r3, #0
 8007368:	d01b      	beq.n	80073a2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f06f 0210 	mvn.w	r2, #16
 8007372:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2208      	movs	r2, #8
 8007378:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f927 	bl	80075dc <HAL_TIM_IC_CaptureCallback>
 800738e:	e005      	b.n	800739c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f919 	bl	80075c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f92a 	bl	80075f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00c      	beq.n	80073c6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d007      	beq.n	80073c6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f06f 0201 	mvn.w	r2, #1
 80073be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7fa f8b5 	bl	8001530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00c      	beq.n	80073ea <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d007      	beq.n	80073ea <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80073e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fab5 	bl	8007954 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00c      	beq.n	800740e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d007      	beq.n	800740e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f8fb 	bl	8007604 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	f003 0320 	and.w	r3, r3, #32
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00c      	beq.n	8007432 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f003 0320 	and.w	r3, r3, #32
 800741e:	2b00      	cmp	r3, #0
 8007420:	d007      	beq.n	8007432 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f06f 0220 	mvn.w	r2, #32
 800742a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fa87 	bl	8007940 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007432:	bf00      	nop
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b084      	sub	sp, #16
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007444:	2300      	movs	r3, #0
 8007446:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800744e:	2b01      	cmp	r3, #1
 8007450:	d101      	bne.n	8007456 <HAL_TIM_ConfigClockSource+0x1c>
 8007452:	2302      	movs	r3, #2
 8007454:	e0b4      	b.n	80075c0 <HAL_TIM_ConfigClockSource+0x186>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2202      	movs	r2, #2
 8007462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007474:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800747c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800748e:	d03e      	beq.n	800750e <HAL_TIM_ConfigClockSource+0xd4>
 8007490:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007494:	f200 8087 	bhi.w	80075a6 <HAL_TIM_ConfigClockSource+0x16c>
 8007498:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800749c:	f000 8086 	beq.w	80075ac <HAL_TIM_ConfigClockSource+0x172>
 80074a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074a4:	d87f      	bhi.n	80075a6 <HAL_TIM_ConfigClockSource+0x16c>
 80074a6:	2b70      	cmp	r3, #112	@ 0x70
 80074a8:	d01a      	beq.n	80074e0 <HAL_TIM_ConfigClockSource+0xa6>
 80074aa:	2b70      	cmp	r3, #112	@ 0x70
 80074ac:	d87b      	bhi.n	80075a6 <HAL_TIM_ConfigClockSource+0x16c>
 80074ae:	2b60      	cmp	r3, #96	@ 0x60
 80074b0:	d050      	beq.n	8007554 <HAL_TIM_ConfigClockSource+0x11a>
 80074b2:	2b60      	cmp	r3, #96	@ 0x60
 80074b4:	d877      	bhi.n	80075a6 <HAL_TIM_ConfigClockSource+0x16c>
 80074b6:	2b50      	cmp	r3, #80	@ 0x50
 80074b8:	d03c      	beq.n	8007534 <HAL_TIM_ConfigClockSource+0xfa>
 80074ba:	2b50      	cmp	r3, #80	@ 0x50
 80074bc:	d873      	bhi.n	80075a6 <HAL_TIM_ConfigClockSource+0x16c>
 80074be:	2b40      	cmp	r3, #64	@ 0x40
 80074c0:	d058      	beq.n	8007574 <HAL_TIM_ConfigClockSource+0x13a>
 80074c2:	2b40      	cmp	r3, #64	@ 0x40
 80074c4:	d86f      	bhi.n	80075a6 <HAL_TIM_ConfigClockSource+0x16c>
 80074c6:	2b30      	cmp	r3, #48	@ 0x30
 80074c8:	d064      	beq.n	8007594 <HAL_TIM_ConfigClockSource+0x15a>
 80074ca:	2b30      	cmp	r3, #48	@ 0x30
 80074cc:	d86b      	bhi.n	80075a6 <HAL_TIM_ConfigClockSource+0x16c>
 80074ce:	2b20      	cmp	r3, #32
 80074d0:	d060      	beq.n	8007594 <HAL_TIM_ConfigClockSource+0x15a>
 80074d2:	2b20      	cmp	r3, #32
 80074d4:	d867      	bhi.n	80075a6 <HAL_TIM_ConfigClockSource+0x16c>
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d05c      	beq.n	8007594 <HAL_TIM_ConfigClockSource+0x15a>
 80074da:	2b10      	cmp	r3, #16
 80074dc:	d05a      	beq.n	8007594 <HAL_TIM_ConfigClockSource+0x15a>
 80074de:	e062      	b.n	80075a6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80074f0:	f000 f998 	bl	8007824 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007502:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	609a      	str	r2, [r3, #8]
      break;
 800750c:	e04f      	b.n	80075ae <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800751e:	f000 f981 	bl	8007824 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	689a      	ldr	r2, [r3, #8]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007530:	609a      	str	r2, [r3, #8]
      break;
 8007532:	e03c      	b.n	80075ae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007540:	461a      	mov	r2, r3
 8007542:	f000 f8f5 	bl	8007730 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2150      	movs	r1, #80	@ 0x50
 800754c:	4618      	mov	r0, r3
 800754e:	f000 f94e 	bl	80077ee <TIM_ITRx_SetConfig>
      break;
 8007552:	e02c      	b.n	80075ae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007560:	461a      	mov	r2, r3
 8007562:	f000 f914 	bl	800778e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2160      	movs	r1, #96	@ 0x60
 800756c:	4618      	mov	r0, r3
 800756e:	f000 f93e 	bl	80077ee <TIM_ITRx_SetConfig>
      break;
 8007572:	e01c      	b.n	80075ae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007580:	461a      	mov	r2, r3
 8007582:	f000 f8d5 	bl	8007730 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2140      	movs	r1, #64	@ 0x40
 800758c:	4618      	mov	r0, r3
 800758e:	f000 f92e 	bl	80077ee <TIM_ITRx_SetConfig>
      break;
 8007592:	e00c      	b.n	80075ae <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4619      	mov	r1, r3
 800759e:	4610      	mov	r0, r2
 80075a0:	f000 f925 	bl	80077ee <TIM_ITRx_SetConfig>
      break;
 80075a4:	e003      	b.n	80075ae <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	73fb      	strb	r3, [r7, #15]
      break;
 80075aa:	e000      	b.n	80075ae <HAL_TIM_ConfigClockSource+0x174>
      break;
 80075ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80075be:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a3a      	ldr	r2, [pc, #232]	@ (8007714 <TIM_Base_SetConfig+0xfc>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d00f      	beq.n	8007650 <TIM_Base_SetConfig+0x38>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007636:	d00b      	beq.n	8007650 <TIM_Base_SetConfig+0x38>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a37      	ldr	r2, [pc, #220]	@ (8007718 <TIM_Base_SetConfig+0x100>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d007      	beq.n	8007650 <TIM_Base_SetConfig+0x38>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a36      	ldr	r2, [pc, #216]	@ (800771c <TIM_Base_SetConfig+0x104>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d003      	beq.n	8007650 <TIM_Base_SetConfig+0x38>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a35      	ldr	r2, [pc, #212]	@ (8007720 <TIM_Base_SetConfig+0x108>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d108      	bne.n	8007662 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	4313      	orrs	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a2b      	ldr	r2, [pc, #172]	@ (8007714 <TIM_Base_SetConfig+0xfc>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d01b      	beq.n	80076a2 <TIM_Base_SetConfig+0x8a>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007670:	d017      	beq.n	80076a2 <TIM_Base_SetConfig+0x8a>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a28      	ldr	r2, [pc, #160]	@ (8007718 <TIM_Base_SetConfig+0x100>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d013      	beq.n	80076a2 <TIM_Base_SetConfig+0x8a>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a27      	ldr	r2, [pc, #156]	@ (800771c <TIM_Base_SetConfig+0x104>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d00f      	beq.n	80076a2 <TIM_Base_SetConfig+0x8a>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a26      	ldr	r2, [pc, #152]	@ (8007720 <TIM_Base_SetConfig+0x108>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d00b      	beq.n	80076a2 <TIM_Base_SetConfig+0x8a>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a25      	ldr	r2, [pc, #148]	@ (8007724 <TIM_Base_SetConfig+0x10c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d007      	beq.n	80076a2 <TIM_Base_SetConfig+0x8a>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a24      	ldr	r2, [pc, #144]	@ (8007728 <TIM_Base_SetConfig+0x110>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d003      	beq.n	80076a2 <TIM_Base_SetConfig+0x8a>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a23      	ldr	r2, [pc, #140]	@ (800772c <TIM_Base_SetConfig+0x114>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d108      	bne.n	80076b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	4313      	orrs	r3, r2
 80076c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	689a      	ldr	r2, [r3, #8]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a0e      	ldr	r2, [pc, #56]	@ (8007714 <TIM_Base_SetConfig+0xfc>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d103      	bne.n	80076e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	691a      	ldr	r2, [r3, #16]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	f003 0301 	and.w	r3, r3, #1
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d105      	bne.n	8007706 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	f023 0201 	bic.w	r2, r3, #1
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	611a      	str	r2, [r3, #16]
  }
}
 8007706:	bf00      	nop
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	40010000 	.word	0x40010000
 8007718:	40000400 	.word	0x40000400
 800771c:	40000800 	.word	0x40000800
 8007720:	40000c00 	.word	0x40000c00
 8007724:	40014000 	.word	0x40014000
 8007728:	40014400 	.word	0x40014400
 800772c:	40014800 	.word	0x40014800

08007730 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007730:	b480      	push	{r7}
 8007732:	b087      	sub	sp, #28
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6a1b      	ldr	r3, [r3, #32]
 8007740:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	f023 0201 	bic.w	r2, r3, #1
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800775a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	011b      	lsls	r3, r3, #4
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	4313      	orrs	r3, r2
 8007764:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	f023 030a 	bic.w	r3, r3, #10
 800776c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	4313      	orrs	r3, r2
 8007774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	621a      	str	r2, [r3, #32]
}
 8007782:	bf00      	nop
 8007784:	371c      	adds	r7, #28
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800778e:	b480      	push	{r7}
 8007790:	b087      	sub	sp, #28
 8007792:	af00      	add	r7, sp, #0
 8007794:	60f8      	str	r0, [r7, #12]
 8007796:	60b9      	str	r1, [r7, #8]
 8007798:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6a1b      	ldr	r3, [r3, #32]
 80077a4:	f023 0210 	bic.w	r2, r3, #16
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80077b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	031b      	lsls	r3, r3, #12
 80077be:	693a      	ldr	r2, [r7, #16]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80077ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	011b      	lsls	r3, r3, #4
 80077d0:	697a      	ldr	r2, [r7, #20]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	621a      	str	r2, [r3, #32]
}
 80077e2:	bf00      	nop
 80077e4:	371c      	adds	r7, #28
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077ee:	b480      	push	{r7}
 80077f0:	b085      	sub	sp, #20
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
 80077f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007804:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	4313      	orrs	r3, r2
 800780c:	f043 0307 	orr.w	r3, r3, #7
 8007810:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	609a      	str	r2, [r3, #8]
}
 8007818:	bf00      	nop
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007824:	b480      	push	{r7}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
 8007830:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800783e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	021a      	lsls	r2, r3, #8
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	431a      	orrs	r2, r3
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	4313      	orrs	r3, r2
 800784c:	697a      	ldr	r2, [r7, #20]
 800784e:	4313      	orrs	r3, r2
 8007850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	609a      	str	r2, [r3, #8]
}
 8007858:	bf00      	nop
 800785a:	371c      	adds	r7, #28
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007874:	2b01      	cmp	r3, #1
 8007876:	d101      	bne.n	800787c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007878:	2302      	movs	r3, #2
 800787a:	e050      	b.n	800791e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2202      	movs	r2, #2
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a1c      	ldr	r2, [pc, #112]	@ (800792c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d018      	beq.n	80078f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078c8:	d013      	beq.n	80078f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a18      	ldr	r2, [pc, #96]	@ (8007930 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d00e      	beq.n	80078f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a16      	ldr	r2, [pc, #88]	@ (8007934 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d009      	beq.n	80078f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a15      	ldr	r2, [pc, #84]	@ (8007938 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d004      	beq.n	80078f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a13      	ldr	r2, [pc, #76]	@ (800793c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d10c      	bne.n	800790c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	4313      	orrs	r3, r2
 8007902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	40010000 	.word	0x40010000
 8007930:	40000400 	.word	0x40000400
 8007934:	40000800 	.word	0x40000800
 8007938:	40000c00 	.word	0x40000c00
 800793c:	40014000 	.word	0x40014000

08007940 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e042      	b.n	8007a00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d106      	bne.n	8007994 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7f9 ff72 	bl	8001878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2224      	movs	r2, #36	@ 0x24
 8007998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68da      	ldr	r2, [r3, #12]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80079aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f973 	bl	8007c98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	691a      	ldr	r2, [r3, #16]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80079c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	695a      	ldr	r2, [r3, #20]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80079d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68da      	ldr	r2, [r3, #12]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80079e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2220      	movs	r2, #32
 80079ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2220      	movs	r2, #32
 80079f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08a      	sub	sp, #40	@ 0x28
 8007a0c:	af02      	add	r7, sp, #8
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	603b      	str	r3, [r7, #0]
 8007a14:	4613      	mov	r3, r2
 8007a16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2b20      	cmp	r3, #32
 8007a26:	d175      	bne.n	8007b14 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d002      	beq.n	8007a34 <HAL_UART_Transmit+0x2c>
 8007a2e:	88fb      	ldrh	r3, [r7, #6]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d101      	bne.n	8007a38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e06e      	b.n	8007b16 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2221      	movs	r2, #33	@ 0x21
 8007a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a46:	f7fb fe19 	bl	800367c <HAL_GetTick>
 8007a4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	88fa      	ldrh	r2, [r7, #6]
 8007a50:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	88fa      	ldrh	r2, [r7, #6]
 8007a56:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a60:	d108      	bne.n	8007a74 <HAL_UART_Transmit+0x6c>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d104      	bne.n	8007a74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	61bb      	str	r3, [r7, #24]
 8007a72:	e003      	b.n	8007a7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007a7c:	e02e      	b.n	8007adc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	2200      	movs	r2, #0
 8007a86:	2180      	movs	r1, #128	@ 0x80
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f000 f848 	bl	8007b1e <UART_WaitOnFlagUntilTimeout>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d005      	beq.n	8007aa0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2220      	movs	r2, #32
 8007a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e03a      	b.n	8007b16 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10b      	bne.n	8007abe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	881b      	ldrh	r3, [r3, #0]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ab4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	3302      	adds	r3, #2
 8007aba:	61bb      	str	r3, [r7, #24]
 8007abc:	e007      	b.n	8007ace <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	781a      	ldrb	r2, [r3, #0]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	3301      	adds	r3, #1
 8007acc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1cb      	bne.n	8007a7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	2200      	movs	r2, #0
 8007aee:	2140      	movs	r1, #64	@ 0x40
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 f814 	bl	8007b1e <UART_WaitOnFlagUntilTimeout>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d005      	beq.n	8007b08 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2220      	movs	r2, #32
 8007b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e006      	b.n	8007b16 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	e000      	b.n	8007b16 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007b14:	2302      	movs	r3, #2
  }
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3720      	adds	r7, #32
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b086      	sub	sp, #24
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	60f8      	str	r0, [r7, #12]
 8007b26:	60b9      	str	r1, [r7, #8]
 8007b28:	603b      	str	r3, [r7, #0]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b2e:	e03b      	b.n	8007ba8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b30:	6a3b      	ldr	r3, [r7, #32]
 8007b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b36:	d037      	beq.n	8007ba8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b38:	f7fb fda0 	bl	800367c <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	6a3a      	ldr	r2, [r7, #32]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d302      	bcc.n	8007b4e <UART_WaitOnFlagUntilTimeout+0x30>
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d101      	bne.n	8007b52 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e03a      	b.n	8007bc8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	f003 0304 	and.w	r3, r3, #4
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d023      	beq.n	8007ba8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	2b80      	cmp	r3, #128	@ 0x80
 8007b64:	d020      	beq.n	8007ba8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	2b40      	cmp	r3, #64	@ 0x40
 8007b6a:	d01d      	beq.n	8007ba8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 0308 	and.w	r3, r3, #8
 8007b76:	2b08      	cmp	r3, #8
 8007b78:	d116      	bne.n	8007ba8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	617b      	str	r3, [r7, #20]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	617b      	str	r3, [r7, #20]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	617b      	str	r3, [r7, #20]
 8007b8e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 f81d 	bl	8007bd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2208      	movs	r2, #8
 8007b9a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e00f      	b.n	8007bc8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	bf0c      	ite	eq
 8007bb8:	2301      	moveq	r3, #1
 8007bba:	2300      	movne	r3, #0
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	79fb      	ldrb	r3, [r7, #7]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d0b4      	beq.n	8007b30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3718      	adds	r7, #24
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b095      	sub	sp, #84	@ 0x54
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	330c      	adds	r3, #12
 8007bde:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007be2:	e853 3f00 	ldrex	r3, [r3]
 8007be6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	330c      	adds	r3, #12
 8007bf6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007bf8:	643a      	str	r2, [r7, #64]	@ 0x40
 8007bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007bfe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c00:	e841 2300 	strex	r3, r2, [r1]
 8007c04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1e5      	bne.n	8007bd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	3314      	adds	r3, #20
 8007c12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	e853 3f00 	ldrex	r3, [r3]
 8007c1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	f023 0301 	bic.w	r3, r3, #1
 8007c22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3314      	adds	r3, #20
 8007c2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c34:	e841 2300 	strex	r3, r2, [r1]
 8007c38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1e5      	bne.n	8007c0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d119      	bne.n	8007c7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	330c      	adds	r3, #12
 8007c4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	e853 3f00 	ldrex	r3, [r3]
 8007c56:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	f023 0310 	bic.w	r3, r3, #16
 8007c5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	330c      	adds	r3, #12
 8007c66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c68:	61ba      	str	r2, [r7, #24]
 8007c6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6c:	6979      	ldr	r1, [r7, #20]
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	e841 2300 	strex	r3, r2, [r1]
 8007c74:	613b      	str	r3, [r7, #16]
   return(result);
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1e5      	bne.n	8007c48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007c8a:	bf00      	nop
 8007c8c:	3754      	adds	r7, #84	@ 0x54
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
	...

08007c98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c9c:	b0c0      	sub	sp, #256	@ 0x100
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cb4:	68d9      	ldr	r1, [r3, #12]
 8007cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	ea40 0301 	orr.w	r3, r0, r1
 8007cc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cc6:	689a      	ldr	r2, [r3, #8]
 8007cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	431a      	orrs	r2, r3
 8007cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	431a      	orrs	r2, r3
 8007cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007cf0:	f021 010c 	bic.w	r1, r1, #12
 8007cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007cfe:	430b      	orrs	r3, r1
 8007d00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d12:	6999      	ldr	r1, [r3, #24]
 8007d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	ea40 0301 	orr.w	r3, r0, r1
 8007d1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	4b8f      	ldr	r3, [pc, #572]	@ (8007f64 <UART_SetConfig+0x2cc>)
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d005      	beq.n	8007d38 <UART_SetConfig+0xa0>
 8007d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	4b8d      	ldr	r3, [pc, #564]	@ (8007f68 <UART_SetConfig+0x2d0>)
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d104      	bne.n	8007d42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d38:	f7fe f9e0 	bl	80060fc <HAL_RCC_GetPCLK2Freq>
 8007d3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007d40:	e003      	b.n	8007d4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d42:	f7fe f9c7 	bl	80060d4 <HAL_RCC_GetPCLK1Freq>
 8007d46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d4e:	69db      	ldr	r3, [r3, #28]
 8007d50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d54:	f040 810c 	bne.w	8007f70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007d66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007d6a:	4622      	mov	r2, r4
 8007d6c:	462b      	mov	r3, r5
 8007d6e:	1891      	adds	r1, r2, r2
 8007d70:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007d72:	415b      	adcs	r3, r3
 8007d74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007d7a:	4621      	mov	r1, r4
 8007d7c:	eb12 0801 	adds.w	r8, r2, r1
 8007d80:	4629      	mov	r1, r5
 8007d82:	eb43 0901 	adc.w	r9, r3, r1
 8007d86:	f04f 0200 	mov.w	r2, #0
 8007d8a:	f04f 0300 	mov.w	r3, #0
 8007d8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d9a:	4690      	mov	r8, r2
 8007d9c:	4699      	mov	r9, r3
 8007d9e:	4623      	mov	r3, r4
 8007da0:	eb18 0303 	adds.w	r3, r8, r3
 8007da4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007da8:	462b      	mov	r3, r5
 8007daa:	eb49 0303 	adc.w	r3, r9, r3
 8007dae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007dbe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007dc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	18db      	adds	r3, r3, r3
 8007dca:	653b      	str	r3, [r7, #80]	@ 0x50
 8007dcc:	4613      	mov	r3, r2
 8007dce:	eb42 0303 	adc.w	r3, r2, r3
 8007dd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007dd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007dd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007ddc:	f7f8 fed6 	bl	8000b8c <__aeabi_uldivmod>
 8007de0:	4602      	mov	r2, r0
 8007de2:	460b      	mov	r3, r1
 8007de4:	4b61      	ldr	r3, [pc, #388]	@ (8007f6c <UART_SetConfig+0x2d4>)
 8007de6:	fba3 2302 	umull	r2, r3, r3, r2
 8007dea:	095b      	lsrs	r3, r3, #5
 8007dec:	011c      	lsls	r4, r3, #4
 8007dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007df2:	2200      	movs	r2, #0
 8007df4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007df8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007dfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007e00:	4642      	mov	r2, r8
 8007e02:	464b      	mov	r3, r9
 8007e04:	1891      	adds	r1, r2, r2
 8007e06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007e08:	415b      	adcs	r3, r3
 8007e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007e10:	4641      	mov	r1, r8
 8007e12:	eb12 0a01 	adds.w	sl, r2, r1
 8007e16:	4649      	mov	r1, r9
 8007e18:	eb43 0b01 	adc.w	fp, r3, r1
 8007e1c:	f04f 0200 	mov.w	r2, #0
 8007e20:	f04f 0300 	mov.w	r3, #0
 8007e24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e30:	4692      	mov	sl, r2
 8007e32:	469b      	mov	fp, r3
 8007e34:	4643      	mov	r3, r8
 8007e36:	eb1a 0303 	adds.w	r3, sl, r3
 8007e3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e3e:	464b      	mov	r3, r9
 8007e40:	eb4b 0303 	adc.w	r3, fp, r3
 8007e44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007e58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	18db      	adds	r3, r3, r3
 8007e60:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e62:	4613      	mov	r3, r2
 8007e64:	eb42 0303 	adc.w	r3, r2, r3
 8007e68:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007e6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007e72:	f7f8 fe8b 	bl	8000b8c <__aeabi_uldivmod>
 8007e76:	4602      	mov	r2, r0
 8007e78:	460b      	mov	r3, r1
 8007e7a:	4611      	mov	r1, r2
 8007e7c:	4b3b      	ldr	r3, [pc, #236]	@ (8007f6c <UART_SetConfig+0x2d4>)
 8007e7e:	fba3 2301 	umull	r2, r3, r3, r1
 8007e82:	095b      	lsrs	r3, r3, #5
 8007e84:	2264      	movs	r2, #100	@ 0x64
 8007e86:	fb02 f303 	mul.w	r3, r2, r3
 8007e8a:	1acb      	subs	r3, r1, r3
 8007e8c:	00db      	lsls	r3, r3, #3
 8007e8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007e92:	4b36      	ldr	r3, [pc, #216]	@ (8007f6c <UART_SetConfig+0x2d4>)
 8007e94:	fba3 2302 	umull	r2, r3, r3, r2
 8007e98:	095b      	lsrs	r3, r3, #5
 8007e9a:	005b      	lsls	r3, r3, #1
 8007e9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007ea0:	441c      	add	r4, r3
 8007ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007eac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007eb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007eb4:	4642      	mov	r2, r8
 8007eb6:	464b      	mov	r3, r9
 8007eb8:	1891      	adds	r1, r2, r2
 8007eba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007ebc:	415b      	adcs	r3, r3
 8007ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ec0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007ec4:	4641      	mov	r1, r8
 8007ec6:	1851      	adds	r1, r2, r1
 8007ec8:	6339      	str	r1, [r7, #48]	@ 0x30
 8007eca:	4649      	mov	r1, r9
 8007ecc:	414b      	adcs	r3, r1
 8007ece:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ed0:	f04f 0200 	mov.w	r2, #0
 8007ed4:	f04f 0300 	mov.w	r3, #0
 8007ed8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007edc:	4659      	mov	r1, fp
 8007ede:	00cb      	lsls	r3, r1, #3
 8007ee0:	4651      	mov	r1, sl
 8007ee2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ee6:	4651      	mov	r1, sl
 8007ee8:	00ca      	lsls	r2, r1, #3
 8007eea:	4610      	mov	r0, r2
 8007eec:	4619      	mov	r1, r3
 8007eee:	4603      	mov	r3, r0
 8007ef0:	4642      	mov	r2, r8
 8007ef2:	189b      	adds	r3, r3, r2
 8007ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ef8:	464b      	mov	r3, r9
 8007efa:	460a      	mov	r2, r1
 8007efc:	eb42 0303 	adc.w	r3, r2, r3
 8007f00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007f10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007f14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007f18:	460b      	mov	r3, r1
 8007f1a:	18db      	adds	r3, r3, r3
 8007f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f1e:	4613      	mov	r3, r2
 8007f20:	eb42 0303 	adc.w	r3, r2, r3
 8007f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007f2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007f2e:	f7f8 fe2d 	bl	8000b8c <__aeabi_uldivmod>
 8007f32:	4602      	mov	r2, r0
 8007f34:	460b      	mov	r3, r1
 8007f36:	4b0d      	ldr	r3, [pc, #52]	@ (8007f6c <UART_SetConfig+0x2d4>)
 8007f38:	fba3 1302 	umull	r1, r3, r3, r2
 8007f3c:	095b      	lsrs	r3, r3, #5
 8007f3e:	2164      	movs	r1, #100	@ 0x64
 8007f40:	fb01 f303 	mul.w	r3, r1, r3
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	00db      	lsls	r3, r3, #3
 8007f48:	3332      	adds	r3, #50	@ 0x32
 8007f4a:	4a08      	ldr	r2, [pc, #32]	@ (8007f6c <UART_SetConfig+0x2d4>)
 8007f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f50:	095b      	lsrs	r3, r3, #5
 8007f52:	f003 0207 	and.w	r2, r3, #7
 8007f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4422      	add	r2, r4
 8007f5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f60:	e106      	b.n	8008170 <UART_SetConfig+0x4d8>
 8007f62:	bf00      	nop
 8007f64:	40011000 	.word	0x40011000
 8007f68:	40011400 	.word	0x40011400
 8007f6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f74:	2200      	movs	r2, #0
 8007f76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007f7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007f7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007f82:	4642      	mov	r2, r8
 8007f84:	464b      	mov	r3, r9
 8007f86:	1891      	adds	r1, r2, r2
 8007f88:	6239      	str	r1, [r7, #32]
 8007f8a:	415b      	adcs	r3, r3
 8007f8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f92:	4641      	mov	r1, r8
 8007f94:	1854      	adds	r4, r2, r1
 8007f96:	4649      	mov	r1, r9
 8007f98:	eb43 0501 	adc.w	r5, r3, r1
 8007f9c:	f04f 0200 	mov.w	r2, #0
 8007fa0:	f04f 0300 	mov.w	r3, #0
 8007fa4:	00eb      	lsls	r3, r5, #3
 8007fa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007faa:	00e2      	lsls	r2, r4, #3
 8007fac:	4614      	mov	r4, r2
 8007fae:	461d      	mov	r5, r3
 8007fb0:	4643      	mov	r3, r8
 8007fb2:	18e3      	adds	r3, r4, r3
 8007fb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fb8:	464b      	mov	r3, r9
 8007fba:	eb45 0303 	adc.w	r3, r5, r3
 8007fbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007fce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007fd2:	f04f 0200 	mov.w	r2, #0
 8007fd6:	f04f 0300 	mov.w	r3, #0
 8007fda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007fde:	4629      	mov	r1, r5
 8007fe0:	008b      	lsls	r3, r1, #2
 8007fe2:	4621      	mov	r1, r4
 8007fe4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fe8:	4621      	mov	r1, r4
 8007fea:	008a      	lsls	r2, r1, #2
 8007fec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007ff0:	f7f8 fdcc 	bl	8000b8c <__aeabi_uldivmod>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	4b60      	ldr	r3, [pc, #384]	@ (800817c <UART_SetConfig+0x4e4>)
 8007ffa:	fba3 2302 	umull	r2, r3, r3, r2
 8007ffe:	095b      	lsrs	r3, r3, #5
 8008000:	011c      	lsls	r4, r3, #4
 8008002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008006:	2200      	movs	r2, #0
 8008008:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800800c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008010:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008014:	4642      	mov	r2, r8
 8008016:	464b      	mov	r3, r9
 8008018:	1891      	adds	r1, r2, r2
 800801a:	61b9      	str	r1, [r7, #24]
 800801c:	415b      	adcs	r3, r3
 800801e:	61fb      	str	r3, [r7, #28]
 8008020:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008024:	4641      	mov	r1, r8
 8008026:	1851      	adds	r1, r2, r1
 8008028:	6139      	str	r1, [r7, #16]
 800802a:	4649      	mov	r1, r9
 800802c:	414b      	adcs	r3, r1
 800802e:	617b      	str	r3, [r7, #20]
 8008030:	f04f 0200 	mov.w	r2, #0
 8008034:	f04f 0300 	mov.w	r3, #0
 8008038:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800803c:	4659      	mov	r1, fp
 800803e:	00cb      	lsls	r3, r1, #3
 8008040:	4651      	mov	r1, sl
 8008042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008046:	4651      	mov	r1, sl
 8008048:	00ca      	lsls	r2, r1, #3
 800804a:	4610      	mov	r0, r2
 800804c:	4619      	mov	r1, r3
 800804e:	4603      	mov	r3, r0
 8008050:	4642      	mov	r2, r8
 8008052:	189b      	adds	r3, r3, r2
 8008054:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008058:	464b      	mov	r3, r9
 800805a:	460a      	mov	r2, r1
 800805c:	eb42 0303 	adc.w	r3, r2, r3
 8008060:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800806e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008070:	f04f 0200 	mov.w	r2, #0
 8008074:	f04f 0300 	mov.w	r3, #0
 8008078:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800807c:	4649      	mov	r1, r9
 800807e:	008b      	lsls	r3, r1, #2
 8008080:	4641      	mov	r1, r8
 8008082:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008086:	4641      	mov	r1, r8
 8008088:	008a      	lsls	r2, r1, #2
 800808a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800808e:	f7f8 fd7d 	bl	8000b8c <__aeabi_uldivmod>
 8008092:	4602      	mov	r2, r0
 8008094:	460b      	mov	r3, r1
 8008096:	4611      	mov	r1, r2
 8008098:	4b38      	ldr	r3, [pc, #224]	@ (800817c <UART_SetConfig+0x4e4>)
 800809a:	fba3 2301 	umull	r2, r3, r3, r1
 800809e:	095b      	lsrs	r3, r3, #5
 80080a0:	2264      	movs	r2, #100	@ 0x64
 80080a2:	fb02 f303 	mul.w	r3, r2, r3
 80080a6:	1acb      	subs	r3, r1, r3
 80080a8:	011b      	lsls	r3, r3, #4
 80080aa:	3332      	adds	r3, #50	@ 0x32
 80080ac:	4a33      	ldr	r2, [pc, #204]	@ (800817c <UART_SetConfig+0x4e4>)
 80080ae:	fba2 2303 	umull	r2, r3, r2, r3
 80080b2:	095b      	lsrs	r3, r3, #5
 80080b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80080b8:	441c      	add	r4, r3
 80080ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080be:	2200      	movs	r2, #0
 80080c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80080c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80080c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80080c8:	4642      	mov	r2, r8
 80080ca:	464b      	mov	r3, r9
 80080cc:	1891      	adds	r1, r2, r2
 80080ce:	60b9      	str	r1, [r7, #8]
 80080d0:	415b      	adcs	r3, r3
 80080d2:	60fb      	str	r3, [r7, #12]
 80080d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080d8:	4641      	mov	r1, r8
 80080da:	1851      	adds	r1, r2, r1
 80080dc:	6039      	str	r1, [r7, #0]
 80080de:	4649      	mov	r1, r9
 80080e0:	414b      	adcs	r3, r1
 80080e2:	607b      	str	r3, [r7, #4]
 80080e4:	f04f 0200 	mov.w	r2, #0
 80080e8:	f04f 0300 	mov.w	r3, #0
 80080ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80080f0:	4659      	mov	r1, fp
 80080f2:	00cb      	lsls	r3, r1, #3
 80080f4:	4651      	mov	r1, sl
 80080f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080fa:	4651      	mov	r1, sl
 80080fc:	00ca      	lsls	r2, r1, #3
 80080fe:	4610      	mov	r0, r2
 8008100:	4619      	mov	r1, r3
 8008102:	4603      	mov	r3, r0
 8008104:	4642      	mov	r2, r8
 8008106:	189b      	adds	r3, r3, r2
 8008108:	66bb      	str	r3, [r7, #104]	@ 0x68
 800810a:	464b      	mov	r3, r9
 800810c:	460a      	mov	r2, r1
 800810e:	eb42 0303 	adc.w	r3, r2, r3
 8008112:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	663b      	str	r3, [r7, #96]	@ 0x60
 800811e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008120:	f04f 0200 	mov.w	r2, #0
 8008124:	f04f 0300 	mov.w	r3, #0
 8008128:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800812c:	4649      	mov	r1, r9
 800812e:	008b      	lsls	r3, r1, #2
 8008130:	4641      	mov	r1, r8
 8008132:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008136:	4641      	mov	r1, r8
 8008138:	008a      	lsls	r2, r1, #2
 800813a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800813e:	f7f8 fd25 	bl	8000b8c <__aeabi_uldivmod>
 8008142:	4602      	mov	r2, r0
 8008144:	460b      	mov	r3, r1
 8008146:	4b0d      	ldr	r3, [pc, #52]	@ (800817c <UART_SetConfig+0x4e4>)
 8008148:	fba3 1302 	umull	r1, r3, r3, r2
 800814c:	095b      	lsrs	r3, r3, #5
 800814e:	2164      	movs	r1, #100	@ 0x64
 8008150:	fb01 f303 	mul.w	r3, r1, r3
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	011b      	lsls	r3, r3, #4
 8008158:	3332      	adds	r3, #50	@ 0x32
 800815a:	4a08      	ldr	r2, [pc, #32]	@ (800817c <UART_SetConfig+0x4e4>)
 800815c:	fba2 2303 	umull	r2, r3, r2, r3
 8008160:	095b      	lsrs	r3, r3, #5
 8008162:	f003 020f 	and.w	r2, r3, #15
 8008166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4422      	add	r2, r4
 800816e:	609a      	str	r2, [r3, #8]
}
 8008170:	bf00      	nop
 8008172:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008176:	46bd      	mov	sp, r7
 8008178:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800817c:	51eb851f 	.word	0x51eb851f

08008180 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f103 0208 	add.w	r2, r3, #8
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f04f 32ff 	mov.w	r2, #4294967295
 8008198:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f103 0208 	add.w	r2, r3, #8
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f103 0208 	add.w	r2, r3, #8
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80081ce:	bf00      	nop
 80081d0:	370c      	adds	r7, #12
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081da:	b480      	push	{r7}
 80081dc:	b085      	sub	sp, #20
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	689a      	ldr	r2, [r3, #8]
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	683a      	ldr	r2, [r7, #0]
 80081fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	683a      	ldr	r2, [r7, #0]
 8008204:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	1c5a      	adds	r2, r3, #1
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	601a      	str	r2, [r3, #0]
}
 8008216:	bf00      	nop
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008222:	b480      	push	{r7}
 8008224:	b085      	sub	sp, #20
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008238:	d103      	bne.n	8008242 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	60fb      	str	r3, [r7, #12]
 8008240:	e00c      	b.n	800825c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	3308      	adds	r3, #8
 8008246:	60fb      	str	r3, [r7, #12]
 8008248:	e002      	b.n	8008250 <vListInsert+0x2e>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	60fb      	str	r3, [r7, #12]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	429a      	cmp	r2, r3
 800825a:	d2f6      	bcs.n	800824a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	601a      	str	r2, [r3, #0]
}
 8008288:	bf00      	nop
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	6892      	ldr	r2, [r2, #8]
 80082aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	6852      	ldr	r2, [r2, #4]
 80082b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d103      	bne.n	80082c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	689a      	ldr	r2, [r3, #8]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	1e5a      	subs	r2, r3, #1
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3714      	adds	r7, #20
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10b      	bne.n	8008314 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80082fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008300:	f383 8811 	msr	BASEPRI, r3
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800830e:	bf00      	nop
 8008310:	bf00      	nop
 8008312:	e7fd      	b.n	8008310 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008314:	f001 fe08 	bl	8009f28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008320:	68f9      	ldr	r1, [r7, #12]
 8008322:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008324:	fb01 f303 	mul.w	r3, r1, r3
 8008328:	441a      	add	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008344:	3b01      	subs	r3, #1
 8008346:	68f9      	ldr	r1, [r7, #12]
 8008348:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800834a:	fb01 f303 	mul.w	r3, r1, r3
 800834e:	441a      	add	r2, r3
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	22ff      	movs	r2, #255	@ 0xff
 8008358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	22ff      	movs	r2, #255	@ 0xff
 8008360:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d114      	bne.n	8008394 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d01a      	beq.n	80083a8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	3310      	adds	r3, #16
 8008376:	4618      	mov	r0, r3
 8008378:	f001 f8be 	bl	80094f8 <xTaskRemoveFromEventList>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d012      	beq.n	80083a8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008382:	4b0d      	ldr	r3, [pc, #52]	@ (80083b8 <xQueueGenericReset+0xd0>)
 8008384:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008388:	601a      	str	r2, [r3, #0]
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	e009      	b.n	80083a8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	3310      	adds	r3, #16
 8008398:	4618      	mov	r0, r3
 800839a:	f7ff fef1 	bl	8008180 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	3324      	adds	r3, #36	@ 0x24
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7ff feec 	bl	8008180 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80083a8:	f001 fdf0 	bl	8009f8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80083ac:	2301      	movs	r3, #1
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	e000ed04 	.word	0xe000ed04

080083bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b08a      	sub	sp, #40	@ 0x28
 80083c0:	af02      	add	r7, sp, #8
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	4613      	mov	r3, r2
 80083c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10b      	bne.n	80083e8 <xQueueGenericCreate+0x2c>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	613b      	str	r3, [r7, #16]
}
 80083e2:	bf00      	nop
 80083e4:	bf00      	nop
 80083e6:	e7fd      	b.n	80083e4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	fb02 f303 	mul.w	r3, r2, r3
 80083f0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	3348      	adds	r3, #72	@ 0x48
 80083f6:	4618      	mov	r0, r3
 80083f8:	f001 fe76 	bl	800a0e8 <pvPortMalloc>
 80083fc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d011      	beq.n	8008428 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	3348      	adds	r3, #72	@ 0x48
 800840c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	2200      	movs	r2, #0
 8008412:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008416:	79fa      	ldrb	r2, [r7, #7]
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	4613      	mov	r3, r2
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	68b9      	ldr	r1, [r7, #8]
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f000 f805 	bl	8008432 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008428:	69bb      	ldr	r3, [r7, #24]
	}
 800842a:	4618      	mov	r0, r3
 800842c:	3720      	adds	r7, #32
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b084      	sub	sp, #16
 8008436:	af00      	add	r7, sp, #0
 8008438:	60f8      	str	r0, [r7, #12]
 800843a:	60b9      	str	r1, [r7, #8]
 800843c:	607a      	str	r2, [r7, #4]
 800843e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d103      	bne.n	800844e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	69ba      	ldr	r2, [r7, #24]
 800844a:	601a      	str	r2, [r3, #0]
 800844c:	e002      	b.n	8008454 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008460:	2101      	movs	r1, #1
 8008462:	69b8      	ldr	r0, [r7, #24]
 8008464:	f7ff ff40 	bl	80082e8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008468:	bf00      	nop
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b08e      	sub	sp, #56	@ 0x38
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
 800847c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800847e:	2300      	movs	r3, #0
 8008480:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008488:	2b00      	cmp	r3, #0
 800848a:	d10b      	bne.n	80084a4 <xQueueGenericSend+0x34>
	__asm volatile
 800848c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008490:	f383 8811 	msr	BASEPRI, r3
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800849e:	bf00      	nop
 80084a0:	bf00      	nop
 80084a2:	e7fd      	b.n	80084a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d103      	bne.n	80084b2 <xQueueGenericSend+0x42>
 80084aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d101      	bne.n	80084b6 <xQueueGenericSend+0x46>
 80084b2:	2301      	movs	r3, #1
 80084b4:	e000      	b.n	80084b8 <xQueueGenericSend+0x48>
 80084b6:	2300      	movs	r3, #0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10b      	bne.n	80084d4 <xQueueGenericSend+0x64>
	__asm volatile
 80084bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80084ce:	bf00      	nop
 80084d0:	bf00      	nop
 80084d2:	e7fd      	b.n	80084d0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d103      	bne.n	80084e2 <xQueueGenericSend+0x72>
 80084da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d101      	bne.n	80084e6 <xQueueGenericSend+0x76>
 80084e2:	2301      	movs	r3, #1
 80084e4:	e000      	b.n	80084e8 <xQueueGenericSend+0x78>
 80084e6:	2300      	movs	r3, #0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10b      	bne.n	8008504 <xQueueGenericSend+0x94>
	__asm volatile
 80084ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f0:	f383 8811 	msr	BASEPRI, r3
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	623b      	str	r3, [r7, #32]
}
 80084fe:	bf00      	nop
 8008500:	bf00      	nop
 8008502:	e7fd      	b.n	8008500 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008504:	f001 f9b8 	bl	8009878 <xTaskGetSchedulerState>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d102      	bne.n	8008514 <xQueueGenericSend+0xa4>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <xQueueGenericSend+0xa8>
 8008514:	2301      	movs	r3, #1
 8008516:	e000      	b.n	800851a <xQueueGenericSend+0xaa>
 8008518:	2300      	movs	r3, #0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10b      	bne.n	8008536 <xQueueGenericSend+0xc6>
	__asm volatile
 800851e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	61fb      	str	r3, [r7, #28]
}
 8008530:	bf00      	nop
 8008532:	bf00      	nop
 8008534:	e7fd      	b.n	8008532 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008536:	f001 fcf7 	bl	8009f28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800853a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800853e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008542:	429a      	cmp	r2, r3
 8008544:	d302      	bcc.n	800854c <xQueueGenericSend+0xdc>
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	2b02      	cmp	r3, #2
 800854a:	d129      	bne.n	80085a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	68b9      	ldr	r1, [r7, #8]
 8008550:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008552:	f000 fa99 	bl	8008a88 <prvCopyDataToQueue>
 8008556:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800855c:	2b00      	cmp	r3, #0
 800855e:	d010      	beq.n	8008582 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008562:	3324      	adds	r3, #36	@ 0x24
 8008564:	4618      	mov	r0, r3
 8008566:	f000 ffc7 	bl	80094f8 <xTaskRemoveFromEventList>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d013      	beq.n	8008598 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008570:	4b3f      	ldr	r3, [pc, #252]	@ (8008670 <xQueueGenericSend+0x200>)
 8008572:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008576:	601a      	str	r2, [r3, #0]
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	e00a      	b.n	8008598 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008584:	2b00      	cmp	r3, #0
 8008586:	d007      	beq.n	8008598 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008588:	4b39      	ldr	r3, [pc, #228]	@ (8008670 <xQueueGenericSend+0x200>)
 800858a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800858e:	601a      	str	r2, [r3, #0]
 8008590:	f3bf 8f4f 	dsb	sy
 8008594:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008598:	f001 fcf8 	bl	8009f8c <vPortExitCritical>
				return pdPASS;
 800859c:	2301      	movs	r3, #1
 800859e:	e063      	b.n	8008668 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d103      	bne.n	80085ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80085a6:	f001 fcf1 	bl	8009f8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80085aa:	2300      	movs	r3, #0
 80085ac:	e05c      	b.n	8008668 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d106      	bne.n	80085c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085b4:	f107 0314 	add.w	r3, r7, #20
 80085b8:	4618      	mov	r0, r3
 80085ba:	f001 f801 	bl	80095c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085be:	2301      	movs	r3, #1
 80085c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085c2:	f001 fce3 	bl	8009f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085c6:	f000 fd9f 	bl	8009108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085ca:	f001 fcad 	bl	8009f28 <vPortEnterCritical>
 80085ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80085d4:	b25b      	sxtb	r3, r3
 80085d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085da:	d103      	bne.n	80085e4 <xQueueGenericSend+0x174>
 80085dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085ea:	b25b      	sxtb	r3, r3
 80085ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f0:	d103      	bne.n	80085fa <xQueueGenericSend+0x18a>
 80085f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80085fa:	f001 fcc7 	bl	8009f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085fe:	1d3a      	adds	r2, r7, #4
 8008600:	f107 0314 	add.w	r3, r7, #20
 8008604:	4611      	mov	r1, r2
 8008606:	4618      	mov	r0, r3
 8008608:	f000 fff0 	bl	80095ec <xTaskCheckForTimeOut>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d124      	bne.n	800865c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008612:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008614:	f000 fb30 	bl	8008c78 <prvIsQueueFull>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d018      	beq.n	8008650 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800861e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008620:	3310      	adds	r3, #16
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	4611      	mov	r1, r2
 8008626:	4618      	mov	r0, r3
 8008628:	f000 ff40 	bl	80094ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800862c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800862e:	f000 fabb 	bl	8008ba8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008632:	f000 fd77 	bl	8009124 <xTaskResumeAll>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	f47f af7c 	bne.w	8008536 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800863e:	4b0c      	ldr	r3, [pc, #48]	@ (8008670 <xQueueGenericSend+0x200>)
 8008640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008644:	601a      	str	r2, [r3, #0]
 8008646:	f3bf 8f4f 	dsb	sy
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	e772      	b.n	8008536 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008650:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008652:	f000 faa9 	bl	8008ba8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008656:	f000 fd65 	bl	8009124 <xTaskResumeAll>
 800865a:	e76c      	b.n	8008536 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800865c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800865e:	f000 faa3 	bl	8008ba8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008662:	f000 fd5f 	bl	8009124 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008666:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008668:	4618      	mov	r0, r3
 800866a:	3738      	adds	r7, #56	@ 0x38
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	e000ed04 	.word	0xe000ed04

08008674 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b08c      	sub	sp, #48	@ 0x30
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008680:	2300      	movs	r3, #0
 8008682:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800868a:	2b00      	cmp	r3, #0
 800868c:	d10b      	bne.n	80086a6 <xQueueReceive+0x32>
	__asm volatile
 800868e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	623b      	str	r3, [r7, #32]
}
 80086a0:	bf00      	nop
 80086a2:	bf00      	nop
 80086a4:	e7fd      	b.n	80086a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d103      	bne.n	80086b4 <xQueueReceive+0x40>
 80086ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d101      	bne.n	80086b8 <xQueueReceive+0x44>
 80086b4:	2301      	movs	r3, #1
 80086b6:	e000      	b.n	80086ba <xQueueReceive+0x46>
 80086b8:	2300      	movs	r3, #0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10b      	bne.n	80086d6 <xQueueReceive+0x62>
	__asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	61fb      	str	r3, [r7, #28]
}
 80086d0:	bf00      	nop
 80086d2:	bf00      	nop
 80086d4:	e7fd      	b.n	80086d2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086d6:	f001 f8cf 	bl	8009878 <xTaskGetSchedulerState>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d102      	bne.n	80086e6 <xQueueReceive+0x72>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d101      	bne.n	80086ea <xQueueReceive+0x76>
 80086e6:	2301      	movs	r3, #1
 80086e8:	e000      	b.n	80086ec <xQueueReceive+0x78>
 80086ea:	2300      	movs	r3, #0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10b      	bne.n	8008708 <xQueueReceive+0x94>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	61bb      	str	r3, [r7, #24]
}
 8008702:	bf00      	nop
 8008704:	bf00      	nop
 8008706:	e7fd      	b.n	8008704 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008708:	f001 fc0e 	bl	8009f28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800870c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800870e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008710:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008714:	2b00      	cmp	r3, #0
 8008716:	d01f      	beq.n	8008758 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008718:	68b9      	ldr	r1, [r7, #8]
 800871a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800871c:	f000 fa1e 	bl	8008b5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008722:	1e5a      	subs	r2, r3, #1
 8008724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008726:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00f      	beq.n	8008750 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008732:	3310      	adds	r3, #16
 8008734:	4618      	mov	r0, r3
 8008736:	f000 fedf 	bl	80094f8 <xTaskRemoveFromEventList>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d007      	beq.n	8008750 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008740:	4b3c      	ldr	r3, [pc, #240]	@ (8008834 <xQueueReceive+0x1c0>)
 8008742:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008750:	f001 fc1c 	bl	8009f8c <vPortExitCritical>
				return pdPASS;
 8008754:	2301      	movs	r3, #1
 8008756:	e069      	b.n	800882c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d103      	bne.n	8008766 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800875e:	f001 fc15 	bl	8009f8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008762:	2300      	movs	r3, #0
 8008764:	e062      	b.n	800882c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008768:	2b00      	cmp	r3, #0
 800876a:	d106      	bne.n	800877a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800876c:	f107 0310 	add.w	r3, r7, #16
 8008770:	4618      	mov	r0, r3
 8008772:	f000 ff25 	bl	80095c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008776:	2301      	movs	r3, #1
 8008778:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800877a:	f001 fc07 	bl	8009f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800877e:	f000 fcc3 	bl	8009108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008782:	f001 fbd1 	bl	8009f28 <vPortEnterCritical>
 8008786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008788:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800878c:	b25b      	sxtb	r3, r3
 800878e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008792:	d103      	bne.n	800879c <xQueueReceive+0x128>
 8008794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008796:	2200      	movs	r2, #0
 8008798:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800879c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800879e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087a2:	b25b      	sxtb	r3, r3
 80087a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a8:	d103      	bne.n	80087b2 <xQueueReceive+0x13e>
 80087aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087b2:	f001 fbeb 	bl	8009f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087b6:	1d3a      	adds	r2, r7, #4
 80087b8:	f107 0310 	add.w	r3, r7, #16
 80087bc:	4611      	mov	r1, r2
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 ff14 	bl	80095ec <xTaskCheckForTimeOut>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d123      	bne.n	8008812 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087cc:	f000 fa3e 	bl	8008c4c <prvIsQueueEmpty>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d017      	beq.n	8008806 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80087d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d8:	3324      	adds	r3, #36	@ 0x24
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	4611      	mov	r1, r2
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 fe64 	bl	80094ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80087e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087e6:	f000 f9df 	bl	8008ba8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087ea:	f000 fc9b 	bl	8009124 <xTaskResumeAll>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d189      	bne.n	8008708 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80087f4:	4b0f      	ldr	r3, [pc, #60]	@ (8008834 <xQueueReceive+0x1c0>)
 80087f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	e780      	b.n	8008708 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008806:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008808:	f000 f9ce 	bl	8008ba8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800880c:	f000 fc8a 	bl	8009124 <xTaskResumeAll>
 8008810:	e77a      	b.n	8008708 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008812:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008814:	f000 f9c8 	bl	8008ba8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008818:	f000 fc84 	bl	8009124 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800881c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800881e:	f000 fa15 	bl	8008c4c <prvIsQueueEmpty>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	f43f af6f 	beq.w	8008708 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800882a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800882c:	4618      	mov	r0, r3
 800882e:	3730      	adds	r7, #48	@ 0x30
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	e000ed04 	.word	0xe000ed04

08008838 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b08e      	sub	sp, #56	@ 0x38
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008842:	2300      	movs	r3, #0
 8008844:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800884a:	2300      	movs	r3, #0
 800884c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800884e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10b      	bne.n	800886c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008858:	f383 8811 	msr	BASEPRI, r3
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	623b      	str	r3, [r7, #32]
}
 8008866:	bf00      	nop
 8008868:	bf00      	nop
 800886a:	e7fd      	b.n	8008868 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800886c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800886e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00b      	beq.n	800888c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	61fb      	str	r3, [r7, #28]
}
 8008886:	bf00      	nop
 8008888:	bf00      	nop
 800888a:	e7fd      	b.n	8008888 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800888c:	f000 fff4 	bl	8009878 <xTaskGetSchedulerState>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d102      	bne.n	800889c <xQueueSemaphoreTake+0x64>
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d101      	bne.n	80088a0 <xQueueSemaphoreTake+0x68>
 800889c:	2301      	movs	r3, #1
 800889e:	e000      	b.n	80088a2 <xQueueSemaphoreTake+0x6a>
 80088a0:	2300      	movs	r3, #0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d10b      	bne.n	80088be <xQueueSemaphoreTake+0x86>
	__asm volatile
 80088a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088aa:	f383 8811 	msr	BASEPRI, r3
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	61bb      	str	r3, [r7, #24]
}
 80088b8:	bf00      	nop
 80088ba:	bf00      	nop
 80088bc:	e7fd      	b.n	80088ba <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088be:	f001 fb33 	bl	8009f28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80088c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088c6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80088c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d024      	beq.n	8008918 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80088ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d0:	1e5a      	subs	r2, r3, #1
 80088d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088d4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d104      	bne.n	80088e8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80088de:	f001 f977 	bl	8009bd0 <pvTaskIncrementMutexHeldCount>
 80088e2:	4602      	mov	r2, r0
 80088e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ea:	691b      	ldr	r3, [r3, #16]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00f      	beq.n	8008910 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f2:	3310      	adds	r3, #16
 80088f4:	4618      	mov	r0, r3
 80088f6:	f000 fdff 	bl	80094f8 <xTaskRemoveFromEventList>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d007      	beq.n	8008910 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008900:	4b54      	ldr	r3, [pc, #336]	@ (8008a54 <xQueueSemaphoreTake+0x21c>)
 8008902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008906:	601a      	str	r2, [r3, #0]
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008910:	f001 fb3c 	bl	8009f8c <vPortExitCritical>
				return pdPASS;
 8008914:	2301      	movs	r3, #1
 8008916:	e098      	b.n	8008a4a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d112      	bne.n	8008944 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800891e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00b      	beq.n	800893c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008928:	f383 8811 	msr	BASEPRI, r3
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	617b      	str	r3, [r7, #20]
}
 8008936:	bf00      	nop
 8008938:	bf00      	nop
 800893a:	e7fd      	b.n	8008938 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800893c:	f001 fb26 	bl	8009f8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008940:	2300      	movs	r3, #0
 8008942:	e082      	b.n	8008a4a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008946:	2b00      	cmp	r3, #0
 8008948:	d106      	bne.n	8008958 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800894a:	f107 030c 	add.w	r3, r7, #12
 800894e:	4618      	mov	r0, r3
 8008950:	f000 fe36 	bl	80095c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008954:	2301      	movs	r3, #1
 8008956:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008958:	f001 fb18 	bl	8009f8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800895c:	f000 fbd4 	bl	8009108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008960:	f001 fae2 	bl	8009f28 <vPortEnterCritical>
 8008964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008966:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800896a:	b25b      	sxtb	r3, r3
 800896c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008970:	d103      	bne.n	800897a <xQueueSemaphoreTake+0x142>
 8008972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008974:	2200      	movs	r2, #0
 8008976:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800897a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800897c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008980:	b25b      	sxtb	r3, r3
 8008982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008986:	d103      	bne.n	8008990 <xQueueSemaphoreTake+0x158>
 8008988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898a:	2200      	movs	r2, #0
 800898c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008990:	f001 fafc 	bl	8009f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008994:	463a      	mov	r2, r7
 8008996:	f107 030c 	add.w	r3, r7, #12
 800899a:	4611      	mov	r1, r2
 800899c:	4618      	mov	r0, r3
 800899e:	f000 fe25 	bl	80095ec <xTaskCheckForTimeOut>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d132      	bne.n	8008a0e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80089aa:	f000 f94f 	bl	8008c4c <prvIsQueueEmpty>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d026      	beq.n	8008a02 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d109      	bne.n	80089d0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80089bc:	f001 fab4 	bl	8009f28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80089c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	4618      	mov	r0, r3
 80089c6:	f000 ff75 	bl	80098b4 <xTaskPriorityInherit>
 80089ca:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80089cc:	f001 fade 	bl	8009f8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80089d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d2:	3324      	adds	r3, #36	@ 0x24
 80089d4:	683a      	ldr	r2, [r7, #0]
 80089d6:	4611      	mov	r1, r2
 80089d8:	4618      	mov	r0, r3
 80089da:	f000 fd67 	bl	80094ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80089de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80089e0:	f000 f8e2 	bl	8008ba8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80089e4:	f000 fb9e 	bl	8009124 <xTaskResumeAll>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f47f af67 	bne.w	80088be <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80089f0:	4b18      	ldr	r3, [pc, #96]	@ (8008a54 <xQueueSemaphoreTake+0x21c>)
 80089f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089f6:	601a      	str	r2, [r3, #0]
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	f3bf 8f6f 	isb	sy
 8008a00:	e75d      	b.n	80088be <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008a02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a04:	f000 f8d0 	bl	8008ba8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a08:	f000 fb8c 	bl	8009124 <xTaskResumeAll>
 8008a0c:	e757      	b.n	80088be <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008a0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a10:	f000 f8ca 	bl	8008ba8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a14:	f000 fb86 	bl	8009124 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a1a:	f000 f917 	bl	8008c4c <prvIsQueueEmpty>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f43f af4c 	beq.w	80088be <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00d      	beq.n	8008a48 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008a2c:	f001 fa7c 	bl	8009f28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008a30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a32:	f000 f811 	bl	8008a58 <prvGetDisinheritPriorityAfterTimeout>
 8008a36:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f001 f836 	bl	8009ab0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008a44:	f001 faa2 	bl	8009f8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008a48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3738      	adds	r7, #56	@ 0x38
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	e000ed04 	.word	0xe000ed04

08008a58 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d006      	beq.n	8008a76 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f1c3 0307 	rsb	r3, r3, #7
 8008a72:	60fb      	str	r3, [r7, #12]
 8008a74:	e001      	b.n	8008a7a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008a76:	2300      	movs	r3, #0
 8008a78:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
	}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3714      	adds	r7, #20
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008a94:	2300      	movs	r3, #0
 8008a96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10d      	bne.n	8008ac2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d14d      	bne.n	8008b4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 ff74 	bl	80099a0 <xTaskPriorityDisinherit>
 8008ab8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	609a      	str	r2, [r3, #8]
 8008ac0:	e043      	b.n	8008b4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d119      	bne.n	8008afc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6858      	ldr	r0, [r3, #4]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	68b9      	ldr	r1, [r7, #8]
 8008ad4:	f008 fe76 	bl	80117c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ae0:	441a      	add	r2, r3
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	685a      	ldr	r2, [r3, #4]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d32b      	bcc.n	8008b4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	605a      	str	r2, [r3, #4]
 8008afa:	e026      	b.n	8008b4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	68d8      	ldr	r0, [r3, #12]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b04:	461a      	mov	r2, r3
 8008b06:	68b9      	ldr	r1, [r7, #8]
 8008b08:	f008 fe5c 	bl	80117c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	68da      	ldr	r2, [r3, #12]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b14:	425b      	negs	r3, r3
 8008b16:	441a      	add	r2, r3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	68da      	ldr	r2, [r3, #12]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d207      	bcs.n	8008b38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	689a      	ldr	r2, [r3, #8]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b30:	425b      	negs	r3, r3
 8008b32:	441a      	add	r2, r3
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d105      	bne.n	8008b4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d002      	beq.n	8008b4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	3b01      	subs	r3, #1
 8008b48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	1c5a      	adds	r2, r3, #1
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008b52:	697b      	ldr	r3, [r7, #20]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3718      	adds	r7, #24
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d018      	beq.n	8008ba0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	68da      	ldr	r2, [r3, #12]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b76:	441a      	add	r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	68da      	ldr	r2, [r3, #12]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d303      	bcc.n	8008b90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	68d9      	ldr	r1, [r3, #12]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b98:	461a      	mov	r2, r3
 8008b9a:	6838      	ldr	r0, [r7, #0]
 8008b9c:	f008 fe12 	bl	80117c4 <memcpy>
	}
}
 8008ba0:	bf00      	nop
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008bb0:	f001 f9ba 	bl	8009f28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008bba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008bbc:	e011      	b.n	8008be2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d012      	beq.n	8008bec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	3324      	adds	r3, #36	@ 0x24
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 fc94 	bl	80094f8 <xTaskRemoveFromEventList>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d001      	beq.n	8008bda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008bd6:	f000 fd6d 	bl	80096b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008bda:	7bfb      	ldrb	r3, [r7, #15]
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	dce9      	bgt.n	8008bbe <prvUnlockQueue+0x16>
 8008bea:	e000      	b.n	8008bee <prvUnlockQueue+0x46>
					break;
 8008bec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	22ff      	movs	r2, #255	@ 0xff
 8008bf2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008bf6:	f001 f9c9 	bl	8009f8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008bfa:	f001 f995 	bl	8009f28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c06:	e011      	b.n	8008c2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d012      	beq.n	8008c36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	3310      	adds	r3, #16
 8008c14:	4618      	mov	r0, r3
 8008c16:	f000 fc6f 	bl	80094f8 <xTaskRemoveFromEventList>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d001      	beq.n	8008c24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008c20:	f000 fd48 	bl	80096b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008c24:	7bbb      	ldrb	r3, [r7, #14]
 8008c26:	3b01      	subs	r3, #1
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	dce9      	bgt.n	8008c08 <prvUnlockQueue+0x60>
 8008c34:	e000      	b.n	8008c38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	22ff      	movs	r2, #255	@ 0xff
 8008c3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008c40:	f001 f9a4 	bl	8009f8c <vPortExitCritical>
}
 8008c44:	bf00      	nop
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c54:	f001 f968 	bl	8009f28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d102      	bne.n	8008c66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008c60:	2301      	movs	r3, #1
 8008c62:	60fb      	str	r3, [r7, #12]
 8008c64:	e001      	b.n	8008c6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008c66:	2300      	movs	r3, #0
 8008c68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c6a:	f001 f98f 	bl	8009f8c <vPortExitCritical>

	return xReturn;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c80:	f001 f952 	bl	8009f28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d102      	bne.n	8008c96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008c90:	2301      	movs	r3, #1
 8008c92:	60fb      	str	r3, [r7, #12]
 8008c94:	e001      	b.n	8008c9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008c96:	2300      	movs	r3, #0
 8008c98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c9a:	f001 f977 	bl	8009f8c <vPortExitCritical>

	return xReturn;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b08e      	sub	sp, #56	@ 0x38
 8008cac:	af04      	add	r7, sp, #16
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
 8008cb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d10b      	bne.n	8008cd4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc0:	f383 8811 	msr	BASEPRI, r3
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	623b      	str	r3, [r7, #32]
}
 8008cce:	bf00      	nop
 8008cd0:	bf00      	nop
 8008cd2:	e7fd      	b.n	8008cd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d10b      	bne.n	8008cf2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cde:	f383 8811 	msr	BASEPRI, r3
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	61fb      	str	r3, [r7, #28]
}
 8008cec:	bf00      	nop
 8008cee:	bf00      	nop
 8008cf0:	e7fd      	b.n	8008cee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008cf2:	2354      	movs	r3, #84	@ 0x54
 8008cf4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	2b54      	cmp	r3, #84	@ 0x54
 8008cfa:	d00b      	beq.n	8008d14 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	61bb      	str	r3, [r7, #24]
}
 8008d0e:	bf00      	nop
 8008d10:	bf00      	nop
 8008d12:	e7fd      	b.n	8008d10 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d01e      	beq.n	8008d5a <xTaskCreateStatic+0xb2>
 8008d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d01b      	beq.n	8008d5a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d24:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d2a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2e:	2202      	movs	r2, #2
 8008d30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d34:	2300      	movs	r3, #0
 8008d36:	9303      	str	r3, [sp, #12]
 8008d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d3a:	9302      	str	r3, [sp, #8]
 8008d3c:	f107 0314 	add.w	r3, r7, #20
 8008d40:	9301      	str	r3, [sp, #4]
 8008d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	68b9      	ldr	r1, [r7, #8]
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f000 f850 	bl	8008df2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008d54:	f000 f8d6 	bl	8008f04 <prvAddNewTaskToReadyList>
 8008d58:	e001      	b.n	8008d5e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d5e:	697b      	ldr	r3, [r7, #20]
	}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3728      	adds	r7, #40	@ 0x28
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b08c      	sub	sp, #48	@ 0x30
 8008d6c:	af04      	add	r7, sp, #16
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	603b      	str	r3, [r7, #0]
 8008d74:	4613      	mov	r3, r2
 8008d76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d78:	88fb      	ldrh	r3, [r7, #6]
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f001 f9b3 	bl	800a0e8 <pvPortMalloc>
 8008d82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00e      	beq.n	8008da8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d8a:	2054      	movs	r0, #84	@ 0x54
 8008d8c:	f001 f9ac 	bl	800a0e8 <pvPortMalloc>
 8008d90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d003      	beq.n	8008da0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	697a      	ldr	r2, [r7, #20]
 8008d9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8008d9e:	e005      	b.n	8008dac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008da0:	6978      	ldr	r0, [r7, #20]
 8008da2:	f001 fa6f 	bl	800a284 <vPortFree>
 8008da6:	e001      	b.n	8008dac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008da8:	2300      	movs	r3, #0
 8008daa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d017      	beq.n	8008de2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008dba:	88fa      	ldrh	r2, [r7, #6]
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	9303      	str	r3, [sp, #12]
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	9302      	str	r3, [sp, #8]
 8008dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc6:	9301      	str	r3, [sp, #4]
 8008dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	68b9      	ldr	r1, [r7, #8]
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f000 f80e 	bl	8008df2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008dd6:	69f8      	ldr	r0, [r7, #28]
 8008dd8:	f000 f894 	bl	8008f04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	61bb      	str	r3, [r7, #24]
 8008de0:	e002      	b.n	8008de8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008de2:	f04f 33ff 	mov.w	r3, #4294967295
 8008de6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008de8:	69bb      	ldr	r3, [r7, #24]
	}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3720      	adds	r7, #32
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b088      	sub	sp, #32
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	60f8      	str	r0, [r7, #12]
 8008dfa:	60b9      	str	r1, [r7, #8]
 8008dfc:	607a      	str	r2, [r7, #4]
 8008dfe:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	f023 0307 	bic.w	r3, r3, #7
 8008e18:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	f003 0307 	and.w	r3, r3, #7
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00b      	beq.n	8008e3c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	617b      	str	r3, [r7, #20]
}
 8008e36:	bf00      	nop
 8008e38:	bf00      	nop
 8008e3a:	e7fd      	b.n	8008e38 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d01f      	beq.n	8008e82 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e42:	2300      	movs	r3, #0
 8008e44:	61fb      	str	r3, [r7, #28]
 8008e46:	e012      	b.n	8008e6e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	7819      	ldrb	r1, [r3, #0]
 8008e50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	4413      	add	r3, r2
 8008e56:	3334      	adds	r3, #52	@ 0x34
 8008e58:	460a      	mov	r2, r1
 8008e5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	4413      	add	r3, r2
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d006      	beq.n	8008e76 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	61fb      	str	r3, [r7, #28]
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	2b0f      	cmp	r3, #15
 8008e72:	d9e9      	bls.n	8008e48 <prvInitialiseNewTask+0x56>
 8008e74:	e000      	b.n	8008e78 <prvInitialiseNewTask+0x86>
			{
				break;
 8008e76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008e80:	e003      	b.n	8008e8a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e84:	2200      	movs	r2, #0
 8008e86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e8c:	2b06      	cmp	r3, #6
 8008e8e:	d901      	bls.n	8008e94 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e90:	2306      	movs	r3, #6
 8008e92:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e98:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e9e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea8:	3304      	adds	r3, #4
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7ff f988 	bl	80081c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb2:	3318      	adds	r3, #24
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7ff f983 	bl	80081c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ebc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ebe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec2:	f1c3 0207 	rsb	r2, r3, #7
 8008ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ecc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ece:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ede:	683a      	ldr	r2, [r7, #0]
 8008ee0:	68f9      	ldr	r1, [r7, #12]
 8008ee2:	69b8      	ldr	r0, [r7, #24]
 8008ee4:	f000 feee 	bl	8009cc4 <pxPortInitialiseStack>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d002      	beq.n	8008efa <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ef8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008efa:	bf00      	nop
 8008efc:	3720      	adds	r7, #32
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
	...

08008f04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f0c:	f001 f80c 	bl	8009f28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f10:	4b2a      	ldr	r3, [pc, #168]	@ (8008fbc <prvAddNewTaskToReadyList+0xb8>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	3301      	adds	r3, #1
 8008f16:	4a29      	ldr	r2, [pc, #164]	@ (8008fbc <prvAddNewTaskToReadyList+0xb8>)
 8008f18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f1a:	4b29      	ldr	r3, [pc, #164]	@ (8008fc0 <prvAddNewTaskToReadyList+0xbc>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d109      	bne.n	8008f36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f22:	4a27      	ldr	r2, [pc, #156]	@ (8008fc0 <prvAddNewTaskToReadyList+0xbc>)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f28:	4b24      	ldr	r3, [pc, #144]	@ (8008fbc <prvAddNewTaskToReadyList+0xb8>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d110      	bne.n	8008f52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f30:	f000 fbe4 	bl	80096fc <prvInitialiseTaskLists>
 8008f34:	e00d      	b.n	8008f52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f36:	4b23      	ldr	r3, [pc, #140]	@ (8008fc4 <prvAddNewTaskToReadyList+0xc0>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d109      	bne.n	8008f52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f3e:	4b20      	ldr	r3, [pc, #128]	@ (8008fc0 <prvAddNewTaskToReadyList+0xbc>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d802      	bhi.n	8008f52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f4c:	4a1c      	ldr	r2, [pc, #112]	@ (8008fc0 <prvAddNewTaskToReadyList+0xbc>)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f52:	4b1d      	ldr	r3, [pc, #116]	@ (8008fc8 <prvAddNewTaskToReadyList+0xc4>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	3301      	adds	r3, #1
 8008f58:	4a1b      	ldr	r2, [pc, #108]	@ (8008fc8 <prvAddNewTaskToReadyList+0xc4>)
 8008f5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f60:	2201      	movs	r2, #1
 8008f62:	409a      	lsls	r2, r3
 8008f64:	4b19      	ldr	r3, [pc, #100]	@ (8008fcc <prvAddNewTaskToReadyList+0xc8>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	4a18      	ldr	r2, [pc, #96]	@ (8008fcc <prvAddNewTaskToReadyList+0xc8>)
 8008f6c:	6013      	str	r3, [r2, #0]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f72:	4613      	mov	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	4413      	add	r3, r2
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	4a15      	ldr	r2, [pc, #84]	@ (8008fd0 <prvAddNewTaskToReadyList+0xcc>)
 8008f7c:	441a      	add	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	3304      	adds	r3, #4
 8008f82:	4619      	mov	r1, r3
 8008f84:	4610      	mov	r0, r2
 8008f86:	f7ff f928 	bl	80081da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f8a:	f000 ffff 	bl	8009f8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8008fc4 <prvAddNewTaskToReadyList+0xc0>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00e      	beq.n	8008fb4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f96:	4b0a      	ldr	r3, [pc, #40]	@ (8008fc0 <prvAddNewTaskToReadyList+0xbc>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d207      	bcs.n	8008fb4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8008fd4 <prvAddNewTaskToReadyList+0xd0>)
 8008fa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008faa:	601a      	str	r2, [r3, #0]
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fb4:	bf00      	nop
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	20000f40 	.word	0x20000f40
 8008fc0:	20000e40 	.word	0x20000e40
 8008fc4:	20000f4c 	.word	0x20000f4c
 8008fc8:	20000f5c 	.word	0x20000f5c
 8008fcc:	20000f48 	.word	0x20000f48
 8008fd0:	20000e44 	.word	0x20000e44
 8008fd4:	e000ed04 	.word	0xe000ed04

08008fd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d018      	beq.n	800901c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008fea:	4b14      	ldr	r3, [pc, #80]	@ (800903c <vTaskDelay+0x64>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00b      	beq.n	800900a <vTaskDelay+0x32>
	__asm volatile
 8008ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff6:	f383 8811 	msr	BASEPRI, r3
 8008ffa:	f3bf 8f6f 	isb	sy
 8008ffe:	f3bf 8f4f 	dsb	sy
 8009002:	60bb      	str	r3, [r7, #8]
}
 8009004:	bf00      	nop
 8009006:	bf00      	nop
 8009008:	e7fd      	b.n	8009006 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800900a:	f000 f87d 	bl	8009108 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800900e:	2100      	movs	r1, #0
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 fdf1 	bl	8009bf8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009016:	f000 f885 	bl	8009124 <xTaskResumeAll>
 800901a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d107      	bne.n	8009032 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009022:	4b07      	ldr	r3, [pc, #28]	@ (8009040 <vTaskDelay+0x68>)
 8009024:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009028:	601a      	str	r2, [r3, #0]
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009032:	bf00      	nop
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	20000f68 	.word	0x20000f68
 8009040:	e000ed04 	.word	0xe000ed04

08009044 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b08a      	sub	sp, #40	@ 0x28
 8009048:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800904a:	2300      	movs	r3, #0
 800904c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800904e:	2300      	movs	r3, #0
 8009050:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009052:	463a      	mov	r2, r7
 8009054:	1d39      	adds	r1, r7, #4
 8009056:	f107 0308 	add.w	r3, r7, #8
 800905a:	4618      	mov	r0, r3
 800905c:	f7f7 ff0e 	bl	8000e7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009060:	6839      	ldr	r1, [r7, #0]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	9202      	str	r2, [sp, #8]
 8009068:	9301      	str	r3, [sp, #4]
 800906a:	2300      	movs	r3, #0
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	2300      	movs	r3, #0
 8009070:	460a      	mov	r2, r1
 8009072:	491f      	ldr	r1, [pc, #124]	@ (80090f0 <vTaskStartScheduler+0xac>)
 8009074:	481f      	ldr	r0, [pc, #124]	@ (80090f4 <vTaskStartScheduler+0xb0>)
 8009076:	f7ff fe17 	bl	8008ca8 <xTaskCreateStatic>
 800907a:	4603      	mov	r3, r0
 800907c:	4a1e      	ldr	r2, [pc, #120]	@ (80090f8 <vTaskStartScheduler+0xb4>)
 800907e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009080:	4b1d      	ldr	r3, [pc, #116]	@ (80090f8 <vTaskStartScheduler+0xb4>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d002      	beq.n	800908e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009088:	2301      	movs	r3, #1
 800908a:	617b      	str	r3, [r7, #20]
 800908c:	e001      	b.n	8009092 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800908e:	2300      	movs	r3, #0
 8009090:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	2b01      	cmp	r3, #1
 8009096:	d116      	bne.n	80090c6 <vTaskStartScheduler+0x82>
	__asm volatile
 8009098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800909c:	f383 8811 	msr	BASEPRI, r3
 80090a0:	f3bf 8f6f 	isb	sy
 80090a4:	f3bf 8f4f 	dsb	sy
 80090a8:	613b      	str	r3, [r7, #16]
}
 80090aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80090ac:	4b13      	ldr	r3, [pc, #76]	@ (80090fc <vTaskStartScheduler+0xb8>)
 80090ae:	f04f 32ff 	mov.w	r2, #4294967295
 80090b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80090b4:	4b12      	ldr	r3, [pc, #72]	@ (8009100 <vTaskStartScheduler+0xbc>)
 80090b6:	2201      	movs	r2, #1
 80090b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80090ba:	4b12      	ldr	r3, [pc, #72]	@ (8009104 <vTaskStartScheduler+0xc0>)
 80090bc:	2200      	movs	r2, #0
 80090be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80090c0:	f000 fe8e 	bl	8009de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80090c4:	e00f      	b.n	80090e6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090cc:	d10b      	bne.n	80090e6 <vTaskStartScheduler+0xa2>
	__asm volatile
 80090ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d2:	f383 8811 	msr	BASEPRI, r3
 80090d6:	f3bf 8f6f 	isb	sy
 80090da:	f3bf 8f4f 	dsb	sy
 80090de:	60fb      	str	r3, [r7, #12]
}
 80090e0:	bf00      	nop
 80090e2:	bf00      	nop
 80090e4:	e7fd      	b.n	80090e2 <vTaskStartScheduler+0x9e>
}
 80090e6:	bf00      	nop
 80090e8:	3718      	adds	r7, #24
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	080122ac 	.word	0x080122ac
 80090f4:	080096cd 	.word	0x080096cd
 80090f8:	20000f64 	.word	0x20000f64
 80090fc:	20000f60 	.word	0x20000f60
 8009100:	20000f4c 	.word	0x20000f4c
 8009104:	20000f44 	.word	0x20000f44

08009108 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009108:	b480      	push	{r7}
 800910a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800910c:	4b04      	ldr	r3, [pc, #16]	@ (8009120 <vTaskSuspendAll+0x18>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3301      	adds	r3, #1
 8009112:	4a03      	ldr	r2, [pc, #12]	@ (8009120 <vTaskSuspendAll+0x18>)
 8009114:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009116:	bf00      	nop
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr
 8009120:	20000f68 	.word	0x20000f68

08009124 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800912a:	2300      	movs	r3, #0
 800912c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800912e:	2300      	movs	r3, #0
 8009130:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009132:	4b42      	ldr	r3, [pc, #264]	@ (800923c <xTaskResumeAll+0x118>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10b      	bne.n	8009152 <xTaskResumeAll+0x2e>
	__asm volatile
 800913a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800913e:	f383 8811 	msr	BASEPRI, r3
 8009142:	f3bf 8f6f 	isb	sy
 8009146:	f3bf 8f4f 	dsb	sy
 800914a:	603b      	str	r3, [r7, #0]
}
 800914c:	bf00      	nop
 800914e:	bf00      	nop
 8009150:	e7fd      	b.n	800914e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009152:	f000 fee9 	bl	8009f28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009156:	4b39      	ldr	r3, [pc, #228]	@ (800923c <xTaskResumeAll+0x118>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	3b01      	subs	r3, #1
 800915c:	4a37      	ldr	r2, [pc, #220]	@ (800923c <xTaskResumeAll+0x118>)
 800915e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009160:	4b36      	ldr	r3, [pc, #216]	@ (800923c <xTaskResumeAll+0x118>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d161      	bne.n	800922c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009168:	4b35      	ldr	r3, [pc, #212]	@ (8009240 <xTaskResumeAll+0x11c>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d05d      	beq.n	800922c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009170:	e02e      	b.n	80091d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009172:	4b34      	ldr	r3, [pc, #208]	@ (8009244 <xTaskResumeAll+0x120>)
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	3318      	adds	r3, #24
 800917e:	4618      	mov	r0, r3
 8009180:	f7ff f888 	bl	8008294 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	3304      	adds	r3, #4
 8009188:	4618      	mov	r0, r3
 800918a:	f7ff f883 	bl	8008294 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009192:	2201      	movs	r2, #1
 8009194:	409a      	lsls	r2, r3
 8009196:	4b2c      	ldr	r3, [pc, #176]	@ (8009248 <xTaskResumeAll+0x124>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4313      	orrs	r3, r2
 800919c:	4a2a      	ldr	r2, [pc, #168]	@ (8009248 <xTaskResumeAll+0x124>)
 800919e:	6013      	str	r3, [r2, #0]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091a4:	4613      	mov	r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	4413      	add	r3, r2
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	4a27      	ldr	r2, [pc, #156]	@ (800924c <xTaskResumeAll+0x128>)
 80091ae:	441a      	add	r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	3304      	adds	r3, #4
 80091b4:	4619      	mov	r1, r3
 80091b6:	4610      	mov	r0, r2
 80091b8:	f7ff f80f 	bl	80081da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091c0:	4b23      	ldr	r3, [pc, #140]	@ (8009250 <xTaskResumeAll+0x12c>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d302      	bcc.n	80091d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80091ca:	4b22      	ldr	r3, [pc, #136]	@ (8009254 <xTaskResumeAll+0x130>)
 80091cc:	2201      	movs	r2, #1
 80091ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091d0:	4b1c      	ldr	r3, [pc, #112]	@ (8009244 <xTaskResumeAll+0x120>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1cc      	bne.n	8009172 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d001      	beq.n	80091e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80091de:	f000 fb2b 	bl	8009838 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80091e2:	4b1d      	ldr	r3, [pc, #116]	@ (8009258 <xTaskResumeAll+0x134>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d010      	beq.n	8009210 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80091ee:	f000 f847 	bl	8009280 <xTaskIncrementTick>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d002      	beq.n	80091fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80091f8:	4b16      	ldr	r3, [pc, #88]	@ (8009254 <xTaskResumeAll+0x130>)
 80091fa:	2201      	movs	r2, #1
 80091fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	3b01      	subs	r3, #1
 8009202:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1f1      	bne.n	80091ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800920a:	4b13      	ldr	r3, [pc, #76]	@ (8009258 <xTaskResumeAll+0x134>)
 800920c:	2200      	movs	r2, #0
 800920e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009210:	4b10      	ldr	r3, [pc, #64]	@ (8009254 <xTaskResumeAll+0x130>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d009      	beq.n	800922c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009218:	2301      	movs	r3, #1
 800921a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800921c:	4b0f      	ldr	r3, [pc, #60]	@ (800925c <xTaskResumeAll+0x138>)
 800921e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009222:	601a      	str	r2, [r3, #0]
 8009224:	f3bf 8f4f 	dsb	sy
 8009228:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800922c:	f000 feae 	bl	8009f8c <vPortExitCritical>

	return xAlreadyYielded;
 8009230:	68bb      	ldr	r3, [r7, #8]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	20000f68 	.word	0x20000f68
 8009240:	20000f40 	.word	0x20000f40
 8009244:	20000f00 	.word	0x20000f00
 8009248:	20000f48 	.word	0x20000f48
 800924c:	20000e44 	.word	0x20000e44
 8009250:	20000e40 	.word	0x20000e40
 8009254:	20000f54 	.word	0x20000f54
 8009258:	20000f50 	.word	0x20000f50
 800925c:	e000ed04 	.word	0xe000ed04

08009260 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009266:	4b05      	ldr	r3, [pc, #20]	@ (800927c <xTaskGetTickCount+0x1c>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800926c:	687b      	ldr	r3, [r7, #4]
}
 800926e:	4618      	mov	r0, r3
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	20000f44 	.word	0x20000f44

08009280 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009286:	2300      	movs	r3, #0
 8009288:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800928a:	4b4f      	ldr	r3, [pc, #316]	@ (80093c8 <xTaskIncrementTick+0x148>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	f040 808f 	bne.w	80093b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009294:	4b4d      	ldr	r3, [pc, #308]	@ (80093cc <xTaskIncrementTick+0x14c>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	3301      	adds	r3, #1
 800929a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800929c:	4a4b      	ldr	r2, [pc, #300]	@ (80093cc <xTaskIncrementTick+0x14c>)
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d121      	bne.n	80092ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80092a8:	4b49      	ldr	r3, [pc, #292]	@ (80093d0 <xTaskIncrementTick+0x150>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00b      	beq.n	80092ca <xTaskIncrementTick+0x4a>
	__asm volatile
 80092b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	603b      	str	r3, [r7, #0]
}
 80092c4:	bf00      	nop
 80092c6:	bf00      	nop
 80092c8:	e7fd      	b.n	80092c6 <xTaskIncrementTick+0x46>
 80092ca:	4b41      	ldr	r3, [pc, #260]	@ (80093d0 <xTaskIncrementTick+0x150>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	60fb      	str	r3, [r7, #12]
 80092d0:	4b40      	ldr	r3, [pc, #256]	@ (80093d4 <xTaskIncrementTick+0x154>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a3e      	ldr	r2, [pc, #248]	@ (80093d0 <xTaskIncrementTick+0x150>)
 80092d6:	6013      	str	r3, [r2, #0]
 80092d8:	4a3e      	ldr	r2, [pc, #248]	@ (80093d4 <xTaskIncrementTick+0x154>)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6013      	str	r3, [r2, #0]
 80092de:	4b3e      	ldr	r3, [pc, #248]	@ (80093d8 <xTaskIncrementTick+0x158>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	3301      	adds	r3, #1
 80092e4:	4a3c      	ldr	r2, [pc, #240]	@ (80093d8 <xTaskIncrementTick+0x158>)
 80092e6:	6013      	str	r3, [r2, #0]
 80092e8:	f000 faa6 	bl	8009838 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80092ec:	4b3b      	ldr	r3, [pc, #236]	@ (80093dc <xTaskIncrementTick+0x15c>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	693a      	ldr	r2, [r7, #16]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d348      	bcc.n	8009388 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092f6:	4b36      	ldr	r3, [pc, #216]	@ (80093d0 <xTaskIncrementTick+0x150>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d104      	bne.n	800930a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009300:	4b36      	ldr	r3, [pc, #216]	@ (80093dc <xTaskIncrementTick+0x15c>)
 8009302:	f04f 32ff 	mov.w	r2, #4294967295
 8009306:	601a      	str	r2, [r3, #0]
					break;
 8009308:	e03e      	b.n	8009388 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800930a:	4b31      	ldr	r3, [pc, #196]	@ (80093d0 <xTaskIncrementTick+0x150>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800931a:	693a      	ldr	r2, [r7, #16]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	429a      	cmp	r2, r3
 8009320:	d203      	bcs.n	800932a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009322:	4a2e      	ldr	r2, [pc, #184]	@ (80093dc <xTaskIncrementTick+0x15c>)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009328:	e02e      	b.n	8009388 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	3304      	adds	r3, #4
 800932e:	4618      	mov	r0, r3
 8009330:	f7fe ffb0 	bl	8008294 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009338:	2b00      	cmp	r3, #0
 800933a:	d004      	beq.n	8009346 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	3318      	adds	r3, #24
 8009340:	4618      	mov	r0, r3
 8009342:	f7fe ffa7 	bl	8008294 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800934a:	2201      	movs	r2, #1
 800934c:	409a      	lsls	r2, r3
 800934e:	4b24      	ldr	r3, [pc, #144]	@ (80093e0 <xTaskIncrementTick+0x160>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4313      	orrs	r3, r2
 8009354:	4a22      	ldr	r2, [pc, #136]	@ (80093e0 <xTaskIncrementTick+0x160>)
 8009356:	6013      	str	r3, [r2, #0]
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800935c:	4613      	mov	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	4a1f      	ldr	r2, [pc, #124]	@ (80093e4 <xTaskIncrementTick+0x164>)
 8009366:	441a      	add	r2, r3
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	3304      	adds	r3, #4
 800936c:	4619      	mov	r1, r3
 800936e:	4610      	mov	r0, r2
 8009370:	f7fe ff33 	bl	80081da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009378:	4b1b      	ldr	r3, [pc, #108]	@ (80093e8 <xTaskIncrementTick+0x168>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800937e:	429a      	cmp	r2, r3
 8009380:	d3b9      	bcc.n	80092f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009382:	2301      	movs	r3, #1
 8009384:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009386:	e7b6      	b.n	80092f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009388:	4b17      	ldr	r3, [pc, #92]	@ (80093e8 <xTaskIncrementTick+0x168>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800938e:	4915      	ldr	r1, [pc, #84]	@ (80093e4 <xTaskIncrementTick+0x164>)
 8009390:	4613      	mov	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4413      	add	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	440b      	add	r3, r1
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2b01      	cmp	r3, #1
 800939e:	d901      	bls.n	80093a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80093a0:	2301      	movs	r3, #1
 80093a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80093a4:	4b11      	ldr	r3, [pc, #68]	@ (80093ec <xTaskIncrementTick+0x16c>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d007      	beq.n	80093bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80093ac:	2301      	movs	r3, #1
 80093ae:	617b      	str	r3, [r7, #20]
 80093b0:	e004      	b.n	80093bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80093b2:	4b0f      	ldr	r3, [pc, #60]	@ (80093f0 <xTaskIncrementTick+0x170>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	3301      	adds	r3, #1
 80093b8:	4a0d      	ldr	r2, [pc, #52]	@ (80093f0 <xTaskIncrementTick+0x170>)
 80093ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80093bc:	697b      	ldr	r3, [r7, #20]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3718      	adds	r7, #24
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	20000f68 	.word	0x20000f68
 80093cc:	20000f44 	.word	0x20000f44
 80093d0:	20000ef8 	.word	0x20000ef8
 80093d4:	20000efc 	.word	0x20000efc
 80093d8:	20000f58 	.word	0x20000f58
 80093dc:	20000f60 	.word	0x20000f60
 80093e0:	20000f48 	.word	0x20000f48
 80093e4:	20000e44 	.word	0x20000e44
 80093e8:	20000e40 	.word	0x20000e40
 80093ec:	20000f54 	.word	0x20000f54
 80093f0:	20000f50 	.word	0x20000f50

080093f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80093f4:	b480      	push	{r7}
 80093f6:	b087      	sub	sp, #28
 80093f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80093fa:	4b27      	ldr	r3, [pc, #156]	@ (8009498 <vTaskSwitchContext+0xa4>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d003      	beq.n	800940a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009402:	4b26      	ldr	r3, [pc, #152]	@ (800949c <vTaskSwitchContext+0xa8>)
 8009404:	2201      	movs	r2, #1
 8009406:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009408:	e040      	b.n	800948c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800940a:	4b24      	ldr	r3, [pc, #144]	@ (800949c <vTaskSwitchContext+0xa8>)
 800940c:	2200      	movs	r2, #0
 800940e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009410:	4b23      	ldr	r3, [pc, #140]	@ (80094a0 <vTaskSwitchContext+0xac>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	fab3 f383 	clz	r3, r3
 800941c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800941e:	7afb      	ldrb	r3, [r7, #11]
 8009420:	f1c3 031f 	rsb	r3, r3, #31
 8009424:	617b      	str	r3, [r7, #20]
 8009426:	491f      	ldr	r1, [pc, #124]	@ (80094a4 <vTaskSwitchContext+0xb0>)
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	4613      	mov	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4413      	add	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	440b      	add	r3, r1
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10b      	bne.n	8009452 <vTaskSwitchContext+0x5e>
	__asm volatile
 800943a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800943e:	f383 8811 	msr	BASEPRI, r3
 8009442:	f3bf 8f6f 	isb	sy
 8009446:	f3bf 8f4f 	dsb	sy
 800944a:	607b      	str	r3, [r7, #4]
}
 800944c:	bf00      	nop
 800944e:	bf00      	nop
 8009450:	e7fd      	b.n	800944e <vTaskSwitchContext+0x5a>
 8009452:	697a      	ldr	r2, [r7, #20]
 8009454:	4613      	mov	r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4413      	add	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	4a11      	ldr	r2, [pc, #68]	@ (80094a4 <vTaskSwitchContext+0xb0>)
 800945e:	4413      	add	r3, r2
 8009460:	613b      	str	r3, [r7, #16]
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	685a      	ldr	r2, [r3, #4]
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	605a      	str	r2, [r3, #4]
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	3308      	adds	r3, #8
 8009474:	429a      	cmp	r2, r3
 8009476:	d104      	bne.n	8009482 <vTaskSwitchContext+0x8e>
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	685a      	ldr	r2, [r3, #4]
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	605a      	str	r2, [r3, #4]
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	4a07      	ldr	r2, [pc, #28]	@ (80094a8 <vTaskSwitchContext+0xb4>)
 800948a:	6013      	str	r3, [r2, #0]
}
 800948c:	bf00      	nop
 800948e:	371c      	adds	r7, #28
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	20000f68 	.word	0x20000f68
 800949c:	20000f54 	.word	0x20000f54
 80094a0:	20000f48 	.word	0x20000f48
 80094a4:	20000e44 	.word	0x20000e44
 80094a8:	20000e40 	.word	0x20000e40

080094ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10b      	bne.n	80094d4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80094bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	60fb      	str	r3, [r7, #12]
}
 80094ce:	bf00      	nop
 80094d0:	bf00      	nop
 80094d2:	e7fd      	b.n	80094d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094d4:	4b07      	ldr	r3, [pc, #28]	@ (80094f4 <vTaskPlaceOnEventList+0x48>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	3318      	adds	r3, #24
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f7fe fea0 	bl	8008222 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80094e2:	2101      	movs	r1, #1
 80094e4:	6838      	ldr	r0, [r7, #0]
 80094e6:	f000 fb87 	bl	8009bf8 <prvAddCurrentTaskToDelayedList>
}
 80094ea:	bf00      	nop
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	20000e40 	.word	0x20000e40

080094f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b086      	sub	sp, #24
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10b      	bne.n	8009526 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800950e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	60fb      	str	r3, [r7, #12]
}
 8009520:	bf00      	nop
 8009522:	bf00      	nop
 8009524:	e7fd      	b.n	8009522 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	3318      	adds	r3, #24
 800952a:	4618      	mov	r0, r3
 800952c:	f7fe feb2 	bl	8008294 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009530:	4b1d      	ldr	r3, [pc, #116]	@ (80095a8 <xTaskRemoveFromEventList+0xb0>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d11c      	bne.n	8009572 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	3304      	adds	r3, #4
 800953c:	4618      	mov	r0, r3
 800953e:	f7fe fea9 	bl	8008294 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009546:	2201      	movs	r2, #1
 8009548:	409a      	lsls	r2, r3
 800954a:	4b18      	ldr	r3, [pc, #96]	@ (80095ac <xTaskRemoveFromEventList+0xb4>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4313      	orrs	r3, r2
 8009550:	4a16      	ldr	r2, [pc, #88]	@ (80095ac <xTaskRemoveFromEventList+0xb4>)
 8009552:	6013      	str	r3, [r2, #0]
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009558:	4613      	mov	r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	4413      	add	r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4a13      	ldr	r2, [pc, #76]	@ (80095b0 <xTaskRemoveFromEventList+0xb8>)
 8009562:	441a      	add	r2, r3
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	3304      	adds	r3, #4
 8009568:	4619      	mov	r1, r3
 800956a:	4610      	mov	r0, r2
 800956c:	f7fe fe35 	bl	80081da <vListInsertEnd>
 8009570:	e005      	b.n	800957e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	3318      	adds	r3, #24
 8009576:	4619      	mov	r1, r3
 8009578:	480e      	ldr	r0, [pc, #56]	@ (80095b4 <xTaskRemoveFromEventList+0xbc>)
 800957a:	f7fe fe2e 	bl	80081da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009582:	4b0d      	ldr	r3, [pc, #52]	@ (80095b8 <xTaskRemoveFromEventList+0xc0>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009588:	429a      	cmp	r2, r3
 800958a:	d905      	bls.n	8009598 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800958c:	2301      	movs	r3, #1
 800958e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009590:	4b0a      	ldr	r3, [pc, #40]	@ (80095bc <xTaskRemoveFromEventList+0xc4>)
 8009592:	2201      	movs	r2, #1
 8009594:	601a      	str	r2, [r3, #0]
 8009596:	e001      	b.n	800959c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009598:	2300      	movs	r3, #0
 800959a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800959c:	697b      	ldr	r3, [r7, #20]
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3718      	adds	r7, #24
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	20000f68 	.word	0x20000f68
 80095ac:	20000f48 	.word	0x20000f48
 80095b0:	20000e44 	.word	0x20000e44
 80095b4:	20000f00 	.word	0x20000f00
 80095b8:	20000e40 	.word	0x20000e40
 80095bc:	20000f54 	.word	0x20000f54

080095c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80095c8:	4b06      	ldr	r3, [pc, #24]	@ (80095e4 <vTaskInternalSetTimeOutState+0x24>)
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80095d0:	4b05      	ldr	r3, [pc, #20]	@ (80095e8 <vTaskInternalSetTimeOutState+0x28>)
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	605a      	str	r2, [r3, #4]
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	20000f58 	.word	0x20000f58
 80095e8:	20000f44 	.word	0x20000f44

080095ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b088      	sub	sp, #32
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10b      	bne.n	8009614 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80095fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	613b      	str	r3, [r7, #16]
}
 800960e:	bf00      	nop
 8009610:	bf00      	nop
 8009612:	e7fd      	b.n	8009610 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d10b      	bne.n	8009632 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800961a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800961e:	f383 8811 	msr	BASEPRI, r3
 8009622:	f3bf 8f6f 	isb	sy
 8009626:	f3bf 8f4f 	dsb	sy
 800962a:	60fb      	str	r3, [r7, #12]
}
 800962c:	bf00      	nop
 800962e:	bf00      	nop
 8009630:	e7fd      	b.n	800962e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009632:	f000 fc79 	bl	8009f28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009636:	4b1d      	ldr	r3, [pc, #116]	@ (80096ac <xTaskCheckForTimeOut+0xc0>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	69ba      	ldr	r2, [r7, #24]
 8009642:	1ad3      	subs	r3, r2, r3
 8009644:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800964e:	d102      	bne.n	8009656 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009650:	2300      	movs	r3, #0
 8009652:	61fb      	str	r3, [r7, #28]
 8009654:	e023      	b.n	800969e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	4b15      	ldr	r3, [pc, #84]	@ (80096b0 <xTaskCheckForTimeOut+0xc4>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	429a      	cmp	r2, r3
 8009660:	d007      	beq.n	8009672 <xTaskCheckForTimeOut+0x86>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	69ba      	ldr	r2, [r7, #24]
 8009668:	429a      	cmp	r2, r3
 800966a:	d302      	bcc.n	8009672 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800966c:	2301      	movs	r3, #1
 800966e:	61fb      	str	r3, [r7, #28]
 8009670:	e015      	b.n	800969e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	697a      	ldr	r2, [r7, #20]
 8009678:	429a      	cmp	r2, r3
 800967a:	d20b      	bcs.n	8009694 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	1ad2      	subs	r2, r2, r3
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f7ff ff99 	bl	80095c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800968e:	2300      	movs	r3, #0
 8009690:	61fb      	str	r3, [r7, #28]
 8009692:	e004      	b.n	800969e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	2200      	movs	r2, #0
 8009698:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800969a:	2301      	movs	r3, #1
 800969c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800969e:	f000 fc75 	bl	8009f8c <vPortExitCritical>

	return xReturn;
 80096a2:	69fb      	ldr	r3, [r7, #28]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3720      	adds	r7, #32
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	20000f44 	.word	0x20000f44
 80096b0:	20000f58 	.word	0x20000f58

080096b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80096b4:	b480      	push	{r7}
 80096b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80096b8:	4b03      	ldr	r3, [pc, #12]	@ (80096c8 <vTaskMissedYield+0x14>)
 80096ba:	2201      	movs	r2, #1
 80096bc:	601a      	str	r2, [r3, #0]
}
 80096be:	bf00      	nop
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	20000f54 	.word	0x20000f54

080096cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80096d4:	f000 f852 	bl	800977c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80096d8:	4b06      	ldr	r3, [pc, #24]	@ (80096f4 <prvIdleTask+0x28>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d9f9      	bls.n	80096d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80096e0:	4b05      	ldr	r3, [pc, #20]	@ (80096f8 <prvIdleTask+0x2c>)
 80096e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096e6:	601a      	str	r2, [r3, #0]
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80096f0:	e7f0      	b.n	80096d4 <prvIdleTask+0x8>
 80096f2:	bf00      	nop
 80096f4:	20000e44 	.word	0x20000e44
 80096f8:	e000ed04 	.word	0xe000ed04

080096fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009702:	2300      	movs	r3, #0
 8009704:	607b      	str	r3, [r7, #4]
 8009706:	e00c      	b.n	8009722 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	4613      	mov	r3, r2
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	4413      	add	r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	4a12      	ldr	r2, [pc, #72]	@ (800975c <prvInitialiseTaskLists+0x60>)
 8009714:	4413      	add	r3, r2
 8009716:	4618      	mov	r0, r3
 8009718:	f7fe fd32 	bl	8008180 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	3301      	adds	r3, #1
 8009720:	607b      	str	r3, [r7, #4]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2b06      	cmp	r3, #6
 8009726:	d9ef      	bls.n	8009708 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009728:	480d      	ldr	r0, [pc, #52]	@ (8009760 <prvInitialiseTaskLists+0x64>)
 800972a:	f7fe fd29 	bl	8008180 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800972e:	480d      	ldr	r0, [pc, #52]	@ (8009764 <prvInitialiseTaskLists+0x68>)
 8009730:	f7fe fd26 	bl	8008180 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009734:	480c      	ldr	r0, [pc, #48]	@ (8009768 <prvInitialiseTaskLists+0x6c>)
 8009736:	f7fe fd23 	bl	8008180 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800973a:	480c      	ldr	r0, [pc, #48]	@ (800976c <prvInitialiseTaskLists+0x70>)
 800973c:	f7fe fd20 	bl	8008180 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009740:	480b      	ldr	r0, [pc, #44]	@ (8009770 <prvInitialiseTaskLists+0x74>)
 8009742:	f7fe fd1d 	bl	8008180 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009746:	4b0b      	ldr	r3, [pc, #44]	@ (8009774 <prvInitialiseTaskLists+0x78>)
 8009748:	4a05      	ldr	r2, [pc, #20]	@ (8009760 <prvInitialiseTaskLists+0x64>)
 800974a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800974c:	4b0a      	ldr	r3, [pc, #40]	@ (8009778 <prvInitialiseTaskLists+0x7c>)
 800974e:	4a05      	ldr	r2, [pc, #20]	@ (8009764 <prvInitialiseTaskLists+0x68>)
 8009750:	601a      	str	r2, [r3, #0]
}
 8009752:	bf00      	nop
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	20000e44 	.word	0x20000e44
 8009760:	20000ed0 	.word	0x20000ed0
 8009764:	20000ee4 	.word	0x20000ee4
 8009768:	20000f00 	.word	0x20000f00
 800976c:	20000f14 	.word	0x20000f14
 8009770:	20000f2c 	.word	0x20000f2c
 8009774:	20000ef8 	.word	0x20000ef8
 8009778:	20000efc 	.word	0x20000efc

0800977c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009782:	e019      	b.n	80097b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009784:	f000 fbd0 	bl	8009f28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009788:	4b10      	ldr	r3, [pc, #64]	@ (80097cc <prvCheckTasksWaitingTermination+0x50>)
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	3304      	adds	r3, #4
 8009794:	4618      	mov	r0, r3
 8009796:	f7fe fd7d 	bl	8008294 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800979a:	4b0d      	ldr	r3, [pc, #52]	@ (80097d0 <prvCheckTasksWaitingTermination+0x54>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	3b01      	subs	r3, #1
 80097a0:	4a0b      	ldr	r2, [pc, #44]	@ (80097d0 <prvCheckTasksWaitingTermination+0x54>)
 80097a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80097a4:	4b0b      	ldr	r3, [pc, #44]	@ (80097d4 <prvCheckTasksWaitingTermination+0x58>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	3b01      	subs	r3, #1
 80097aa:	4a0a      	ldr	r2, [pc, #40]	@ (80097d4 <prvCheckTasksWaitingTermination+0x58>)
 80097ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80097ae:	f000 fbed 	bl	8009f8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f810 	bl	80097d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097b8:	4b06      	ldr	r3, [pc, #24]	@ (80097d4 <prvCheckTasksWaitingTermination+0x58>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1e1      	bne.n	8009784 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80097c0:	bf00      	nop
 80097c2:	bf00      	nop
 80097c4:	3708      	adds	r7, #8
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	20000f14 	.word	0x20000f14
 80097d0:	20000f40 	.word	0x20000f40
 80097d4:	20000f28 	.word	0x20000f28

080097d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d108      	bne.n	80097fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ee:	4618      	mov	r0, r3
 80097f0:	f000 fd48 	bl	800a284 <vPortFree>
				vPortFree( pxTCB );
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fd45 	bl	800a284 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80097fa:	e019      	b.n	8009830 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009802:	2b01      	cmp	r3, #1
 8009804:	d103      	bne.n	800980e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 fd3c 	bl	800a284 <vPortFree>
	}
 800980c:	e010      	b.n	8009830 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009814:	2b02      	cmp	r3, #2
 8009816:	d00b      	beq.n	8009830 <prvDeleteTCB+0x58>
	__asm volatile
 8009818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800981c:	f383 8811 	msr	BASEPRI, r3
 8009820:	f3bf 8f6f 	isb	sy
 8009824:	f3bf 8f4f 	dsb	sy
 8009828:	60fb      	str	r3, [r7, #12]
}
 800982a:	bf00      	nop
 800982c:	bf00      	nop
 800982e:	e7fd      	b.n	800982c <prvDeleteTCB+0x54>
	}
 8009830:	bf00      	nop
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800983e:	4b0c      	ldr	r3, [pc, #48]	@ (8009870 <prvResetNextTaskUnblockTime+0x38>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d104      	bne.n	8009852 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009848:	4b0a      	ldr	r3, [pc, #40]	@ (8009874 <prvResetNextTaskUnblockTime+0x3c>)
 800984a:	f04f 32ff 	mov.w	r2, #4294967295
 800984e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009850:	e008      	b.n	8009864 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009852:	4b07      	ldr	r3, [pc, #28]	@ (8009870 <prvResetNextTaskUnblockTime+0x38>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	4a04      	ldr	r2, [pc, #16]	@ (8009874 <prvResetNextTaskUnblockTime+0x3c>)
 8009862:	6013      	str	r3, [r2, #0]
}
 8009864:	bf00      	nop
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr
 8009870:	20000ef8 	.word	0x20000ef8
 8009874:	20000f60 	.word	0x20000f60

08009878 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800987e:	4b0b      	ldr	r3, [pc, #44]	@ (80098ac <xTaskGetSchedulerState+0x34>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d102      	bne.n	800988c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009886:	2301      	movs	r3, #1
 8009888:	607b      	str	r3, [r7, #4]
 800988a:	e008      	b.n	800989e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800988c:	4b08      	ldr	r3, [pc, #32]	@ (80098b0 <xTaskGetSchedulerState+0x38>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d102      	bne.n	800989a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009894:	2302      	movs	r3, #2
 8009896:	607b      	str	r3, [r7, #4]
 8009898:	e001      	b.n	800989e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800989a:	2300      	movs	r3, #0
 800989c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800989e:	687b      	ldr	r3, [r7, #4]
	}
 80098a0:	4618      	mov	r0, r3
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	20000f4c 	.word	0x20000f4c
 80098b0:	20000f68 	.word	0x20000f68

080098b4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80098c0:	2300      	movs	r3, #0
 80098c2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d05e      	beq.n	8009988 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098ce:	4b31      	ldr	r3, [pc, #196]	@ (8009994 <xTaskPriorityInherit+0xe0>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d24e      	bcs.n	8009976 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	699b      	ldr	r3, [r3, #24]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	db06      	blt.n	80098ee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098e0:	4b2c      	ldr	r3, [pc, #176]	@ (8009994 <xTaskPriorityInherit+0xe0>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e6:	f1c3 0207 	rsb	r2, r3, #7
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	6959      	ldr	r1, [r3, #20]
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098f6:	4613      	mov	r3, r2
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	4413      	add	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4a26      	ldr	r2, [pc, #152]	@ (8009998 <xTaskPriorityInherit+0xe4>)
 8009900:	4413      	add	r3, r2
 8009902:	4299      	cmp	r1, r3
 8009904:	d12f      	bne.n	8009966 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	3304      	adds	r3, #4
 800990a:	4618      	mov	r0, r3
 800990c:	f7fe fcc2 	bl	8008294 <uxListRemove>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10a      	bne.n	800992c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800991a:	2201      	movs	r2, #1
 800991c:	fa02 f303 	lsl.w	r3, r2, r3
 8009920:	43da      	mvns	r2, r3
 8009922:	4b1e      	ldr	r3, [pc, #120]	@ (800999c <xTaskPriorityInherit+0xe8>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4013      	ands	r3, r2
 8009928:	4a1c      	ldr	r2, [pc, #112]	@ (800999c <xTaskPriorityInherit+0xe8>)
 800992a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800992c:	4b19      	ldr	r3, [pc, #100]	@ (8009994 <xTaskPriorityInherit+0xe0>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800993a:	2201      	movs	r2, #1
 800993c:	409a      	lsls	r2, r3
 800993e:	4b17      	ldr	r3, [pc, #92]	@ (800999c <xTaskPriorityInherit+0xe8>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4313      	orrs	r3, r2
 8009944:	4a15      	ldr	r2, [pc, #84]	@ (800999c <xTaskPriorityInherit+0xe8>)
 8009946:	6013      	str	r3, [r2, #0]
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800994c:	4613      	mov	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	4a10      	ldr	r2, [pc, #64]	@ (8009998 <xTaskPriorityInherit+0xe4>)
 8009956:	441a      	add	r2, r3
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	3304      	adds	r3, #4
 800995c:	4619      	mov	r1, r3
 800995e:	4610      	mov	r0, r2
 8009960:	f7fe fc3b 	bl	80081da <vListInsertEnd>
 8009964:	e004      	b.n	8009970 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009966:	4b0b      	ldr	r3, [pc, #44]	@ (8009994 <xTaskPriorityInherit+0xe0>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009970:	2301      	movs	r3, #1
 8009972:	60fb      	str	r3, [r7, #12]
 8009974:	e008      	b.n	8009988 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800997a:	4b06      	ldr	r3, [pc, #24]	@ (8009994 <xTaskPriorityInherit+0xe0>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009980:	429a      	cmp	r2, r3
 8009982:	d201      	bcs.n	8009988 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009984:	2301      	movs	r3, #1
 8009986:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009988:	68fb      	ldr	r3, [r7, #12]
	}
 800998a:	4618      	mov	r0, r3
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	20000e40 	.word	0x20000e40
 8009998:	20000e44 	.word	0x20000e44
 800999c:	20000f48 	.word	0x20000f48

080099a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b086      	sub	sp, #24
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80099ac:	2300      	movs	r3, #0
 80099ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d070      	beq.n	8009a98 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80099b6:	4b3b      	ldr	r3, [pc, #236]	@ (8009aa4 <xTaskPriorityDisinherit+0x104>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	693a      	ldr	r2, [r7, #16]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d00b      	beq.n	80099d8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80099c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	60fb      	str	r3, [r7, #12]
}
 80099d2:	bf00      	nop
 80099d4:	bf00      	nop
 80099d6:	e7fd      	b.n	80099d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10b      	bne.n	80099f8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80099e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	60bb      	str	r3, [r7, #8]
}
 80099f2:	bf00      	nop
 80099f4:	bf00      	nop
 80099f6:	e7fd      	b.n	80099f4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099fc:	1e5a      	subs	r2, r3, #1
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d044      	beq.n	8009a98 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d140      	bne.n	8009a98 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	3304      	adds	r3, #4
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7fe fc3a 	bl	8008294 <uxListRemove>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d115      	bne.n	8009a52 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a2a:	491f      	ldr	r1, [pc, #124]	@ (8009aa8 <xTaskPriorityDisinherit+0x108>)
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	4413      	add	r3, r2
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	440b      	add	r3, r1
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d10a      	bne.n	8009a52 <xTaskPriorityDisinherit+0xb2>
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a40:	2201      	movs	r2, #1
 8009a42:	fa02 f303 	lsl.w	r3, r2, r3
 8009a46:	43da      	mvns	r2, r3
 8009a48:	4b18      	ldr	r3, [pc, #96]	@ (8009aac <xTaskPriorityDisinherit+0x10c>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	4a17      	ldr	r2, [pc, #92]	@ (8009aac <xTaskPriorityDisinherit+0x10c>)
 8009a50:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a5e:	f1c3 0207 	rsb	r2, r3, #7
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	409a      	lsls	r2, r3
 8009a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8009aac <xTaskPriorityDisinherit+0x10c>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	4a0d      	ldr	r2, [pc, #52]	@ (8009aac <xTaskPriorityDisinherit+0x10c>)
 8009a76:	6013      	str	r3, [r2, #0]
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	4413      	add	r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	4a08      	ldr	r2, [pc, #32]	@ (8009aa8 <xTaskPriorityDisinherit+0x108>)
 8009a86:	441a      	add	r2, r3
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	3304      	adds	r3, #4
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	4610      	mov	r0, r2
 8009a90:	f7fe fba3 	bl	80081da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a94:	2301      	movs	r3, #1
 8009a96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a98:	697b      	ldr	r3, [r7, #20]
	}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3718      	adds	r7, #24
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	20000e40 	.word	0x20000e40
 8009aa8:	20000e44 	.word	0x20000e44
 8009aac:	20000f48 	.word	0x20000f48

08009ab0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b088      	sub	sp, #32
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d079      	beq.n	8009bbc <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009ac8:	69bb      	ldr	r3, [r7, #24]
 8009aca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10b      	bne.n	8009ae8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	60fb      	str	r3, [r7, #12]
}
 8009ae2:	bf00      	nop
 8009ae4:	bf00      	nop
 8009ae6:	e7fd      	b.n	8009ae4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aec:	683a      	ldr	r2, [r7, #0]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d902      	bls.n	8009af8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	61fb      	str	r3, [r7, #28]
 8009af6:	e002      	b.n	8009afe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009afc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b02:	69fa      	ldr	r2, [r7, #28]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d059      	beq.n	8009bbc <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b0c:	697a      	ldr	r2, [r7, #20]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d154      	bne.n	8009bbc <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009b12:	4b2c      	ldr	r3, [pc, #176]	@ (8009bc4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	69ba      	ldr	r2, [r7, #24]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d10b      	bne.n	8009b34 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b20:	f383 8811 	msr	BASEPRI, r3
 8009b24:	f3bf 8f6f 	isb	sy
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	60bb      	str	r3, [r7, #8]
}
 8009b2e:	bf00      	nop
 8009b30:	bf00      	nop
 8009b32:	e7fd      	b.n	8009b30 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b38:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	69fa      	ldr	r2, [r7, #28]
 8009b3e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	699b      	ldr	r3, [r3, #24]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	db04      	blt.n	8009b52 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	f1c3 0207 	rsb	r2, r3, #7
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	6959      	ldr	r1, [r3, #20]
 8009b56:	693a      	ldr	r2, [r7, #16]
 8009b58:	4613      	mov	r3, r2
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	4413      	add	r3, r2
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	4a19      	ldr	r2, [pc, #100]	@ (8009bc8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009b62:	4413      	add	r3, r2
 8009b64:	4299      	cmp	r1, r3
 8009b66:	d129      	bne.n	8009bbc <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	3304      	adds	r3, #4
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7fe fb91 	bl	8008294 <uxListRemove>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10a      	bne.n	8009b8e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b82:	43da      	mvns	r2, r3
 8009b84:	4b11      	ldr	r3, [pc, #68]	@ (8009bcc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4013      	ands	r3, r2
 8009b8a:	4a10      	ldr	r2, [pc, #64]	@ (8009bcc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009b8c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b92:	2201      	movs	r2, #1
 8009b94:	409a      	lsls	r2, r3
 8009b96:	4b0d      	ldr	r3, [pc, #52]	@ (8009bcc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	4a0b      	ldr	r2, [pc, #44]	@ (8009bcc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009b9e:	6013      	str	r3, [r2, #0]
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	4413      	add	r3, r2
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	4a06      	ldr	r2, [pc, #24]	@ (8009bc8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009bae:	441a      	add	r2, r3
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	3304      	adds	r3, #4
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	4610      	mov	r0, r2
 8009bb8:	f7fe fb0f 	bl	80081da <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009bbc:	bf00      	nop
 8009bbe:	3720      	adds	r7, #32
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	20000e40 	.word	0x20000e40
 8009bc8:	20000e44 	.word	0x20000e44
 8009bcc:	20000f48 	.word	0x20000f48

08009bd0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009bd0:	b480      	push	{r7}
 8009bd2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009bd4:	4b07      	ldr	r3, [pc, #28]	@ (8009bf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d004      	beq.n	8009be6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009bdc:	4b05      	ldr	r3, [pc, #20]	@ (8009bf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009be2:	3201      	adds	r2, #1
 8009be4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8009be6:	4b03      	ldr	r3, [pc, #12]	@ (8009bf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009be8:	681b      	ldr	r3, [r3, #0]
	}
 8009bea:	4618      	mov	r0, r3
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr
 8009bf4:	20000e40 	.word	0x20000e40

08009bf8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009c02:	4b29      	ldr	r3, [pc, #164]	@ (8009ca8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c08:	4b28      	ldr	r3, [pc, #160]	@ (8009cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	3304      	adds	r3, #4
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7fe fb40 	bl	8008294 <uxListRemove>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d10b      	bne.n	8009c32 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009c1a:	4b24      	ldr	r3, [pc, #144]	@ (8009cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c20:	2201      	movs	r2, #1
 8009c22:	fa02 f303 	lsl.w	r3, r2, r3
 8009c26:	43da      	mvns	r2, r3
 8009c28:	4b21      	ldr	r3, [pc, #132]	@ (8009cb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	4a20      	ldr	r2, [pc, #128]	@ (8009cb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009c30:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c38:	d10a      	bne.n	8009c50 <prvAddCurrentTaskToDelayedList+0x58>
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d007      	beq.n	8009c50 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c40:	4b1a      	ldr	r3, [pc, #104]	@ (8009cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	3304      	adds	r3, #4
 8009c46:	4619      	mov	r1, r3
 8009c48:	481a      	ldr	r0, [pc, #104]	@ (8009cb4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009c4a:	f7fe fac6 	bl	80081da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009c4e:	e026      	b.n	8009c9e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4413      	add	r3, r2
 8009c56:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c58:	4b14      	ldr	r3, [pc, #80]	@ (8009cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c60:	68ba      	ldr	r2, [r7, #8]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d209      	bcs.n	8009c7c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c68:	4b13      	ldr	r3, [pc, #76]	@ (8009cb8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8009cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	3304      	adds	r3, #4
 8009c72:	4619      	mov	r1, r3
 8009c74:	4610      	mov	r0, r2
 8009c76:	f7fe fad4 	bl	8008222 <vListInsert>
}
 8009c7a:	e010      	b.n	8009c9e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8009cbc <prvAddCurrentTaskToDelayedList+0xc4>)
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	4b0a      	ldr	r3, [pc, #40]	@ (8009cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	3304      	adds	r3, #4
 8009c86:	4619      	mov	r1, r3
 8009c88:	4610      	mov	r0, r2
 8009c8a:	f7fe faca 	bl	8008222 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8009cc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d202      	bcs.n	8009c9e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009c98:	4a09      	ldr	r2, [pc, #36]	@ (8009cc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	6013      	str	r3, [r2, #0]
}
 8009c9e:	bf00      	nop
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	20000f44 	.word	0x20000f44
 8009cac:	20000e40 	.word	0x20000e40
 8009cb0:	20000f48 	.word	0x20000f48
 8009cb4:	20000f2c 	.word	0x20000f2c
 8009cb8:	20000efc 	.word	0x20000efc
 8009cbc:	20000ef8 	.word	0x20000ef8
 8009cc0:	20000f60 	.word	0x20000f60

08009cc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	3b04      	subs	r3, #4
 8009cd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009cdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	3b04      	subs	r3, #4
 8009ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	f023 0201 	bic.w	r2, r3, #1
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	3b04      	subs	r3, #4
 8009cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009cf4:	4a0c      	ldr	r2, [pc, #48]	@ (8009d28 <pxPortInitialiseStack+0x64>)
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	3b14      	subs	r3, #20
 8009cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	3b04      	subs	r3, #4
 8009d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f06f 0202 	mvn.w	r2, #2
 8009d12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	3b20      	subs	r3, #32
 8009d18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3714      	adds	r7, #20
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr
 8009d28:	08009d2d 	.word	0x08009d2d

08009d2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d32:	2300      	movs	r3, #0
 8009d34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d36:	4b13      	ldr	r3, [pc, #76]	@ (8009d84 <prvTaskExitError+0x58>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d3e:	d00b      	beq.n	8009d58 <prvTaskExitError+0x2c>
	__asm volatile
 8009d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d44:	f383 8811 	msr	BASEPRI, r3
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	f3bf 8f4f 	dsb	sy
 8009d50:	60fb      	str	r3, [r7, #12]
}
 8009d52:	bf00      	nop
 8009d54:	bf00      	nop
 8009d56:	e7fd      	b.n	8009d54 <prvTaskExitError+0x28>
	__asm volatile
 8009d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d5c:	f383 8811 	msr	BASEPRI, r3
 8009d60:	f3bf 8f6f 	isb	sy
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	60bb      	str	r3, [r7, #8]
}
 8009d6a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d6c:	bf00      	nop
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d0fc      	beq.n	8009d6e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d74:	bf00      	nop
 8009d76:	bf00      	nop
 8009d78:	3714      	adds	r7, #20
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	20000028 	.word	0x20000028
	...

08009d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d90:	4b07      	ldr	r3, [pc, #28]	@ (8009db0 <pxCurrentTCBConst2>)
 8009d92:	6819      	ldr	r1, [r3, #0]
 8009d94:	6808      	ldr	r0, [r1, #0]
 8009d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d9a:	f380 8809 	msr	PSP, r0
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	f04f 0000 	mov.w	r0, #0
 8009da6:	f380 8811 	msr	BASEPRI, r0
 8009daa:	4770      	bx	lr
 8009dac:	f3af 8000 	nop.w

08009db0 <pxCurrentTCBConst2>:
 8009db0:	20000e40 	.word	0x20000e40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009db4:	bf00      	nop
 8009db6:	bf00      	nop

08009db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009db8:	4808      	ldr	r0, [pc, #32]	@ (8009ddc <prvPortStartFirstTask+0x24>)
 8009dba:	6800      	ldr	r0, [r0, #0]
 8009dbc:	6800      	ldr	r0, [r0, #0]
 8009dbe:	f380 8808 	msr	MSP, r0
 8009dc2:	f04f 0000 	mov.w	r0, #0
 8009dc6:	f380 8814 	msr	CONTROL, r0
 8009dca:	b662      	cpsie	i
 8009dcc:	b661      	cpsie	f
 8009dce:	f3bf 8f4f 	dsb	sy
 8009dd2:	f3bf 8f6f 	isb	sy
 8009dd6:	df00      	svc	0
 8009dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009dda:	bf00      	nop
 8009ddc:	e000ed08 	.word	0xe000ed08

08009de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b086      	sub	sp, #24
 8009de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009de6:	4b47      	ldr	r3, [pc, #284]	@ (8009f04 <xPortStartScheduler+0x124>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a47      	ldr	r2, [pc, #284]	@ (8009f08 <xPortStartScheduler+0x128>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d10b      	bne.n	8009e08 <xPortStartScheduler+0x28>
	__asm volatile
 8009df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009df4:	f383 8811 	msr	BASEPRI, r3
 8009df8:	f3bf 8f6f 	isb	sy
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	613b      	str	r3, [r7, #16]
}
 8009e02:	bf00      	nop
 8009e04:	bf00      	nop
 8009e06:	e7fd      	b.n	8009e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009e08:	4b3e      	ldr	r3, [pc, #248]	@ (8009f04 <xPortStartScheduler+0x124>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a3f      	ldr	r2, [pc, #252]	@ (8009f0c <xPortStartScheduler+0x12c>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d10b      	bne.n	8009e2a <xPortStartScheduler+0x4a>
	__asm volatile
 8009e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e16:	f383 8811 	msr	BASEPRI, r3
 8009e1a:	f3bf 8f6f 	isb	sy
 8009e1e:	f3bf 8f4f 	dsb	sy
 8009e22:	60fb      	str	r3, [r7, #12]
}
 8009e24:	bf00      	nop
 8009e26:	bf00      	nop
 8009e28:	e7fd      	b.n	8009e26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009e2a:	4b39      	ldr	r3, [pc, #228]	@ (8009f10 <xPortStartScheduler+0x130>)
 8009e2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	22ff      	movs	r2, #255	@ 0xff
 8009e3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e44:	78fb      	ldrb	r3, [r7, #3]
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009e4c:	b2da      	uxtb	r2, r3
 8009e4e:	4b31      	ldr	r3, [pc, #196]	@ (8009f14 <xPortStartScheduler+0x134>)
 8009e50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e52:	4b31      	ldr	r3, [pc, #196]	@ (8009f18 <xPortStartScheduler+0x138>)
 8009e54:	2207      	movs	r2, #7
 8009e56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e58:	e009      	b.n	8009e6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8009f18 <xPortStartScheduler+0x138>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	4a2d      	ldr	r2, [pc, #180]	@ (8009f18 <xPortStartScheduler+0x138>)
 8009e62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e64:	78fb      	ldrb	r3, [r7, #3]
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	005b      	lsls	r3, r3, #1
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e6e:	78fb      	ldrb	r3, [r7, #3]
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e76:	2b80      	cmp	r3, #128	@ 0x80
 8009e78:	d0ef      	beq.n	8009e5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e7a:	4b27      	ldr	r3, [pc, #156]	@ (8009f18 <xPortStartScheduler+0x138>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f1c3 0307 	rsb	r3, r3, #7
 8009e82:	2b04      	cmp	r3, #4
 8009e84:	d00b      	beq.n	8009e9e <xPortStartScheduler+0xbe>
	__asm volatile
 8009e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e8a:	f383 8811 	msr	BASEPRI, r3
 8009e8e:	f3bf 8f6f 	isb	sy
 8009e92:	f3bf 8f4f 	dsb	sy
 8009e96:	60bb      	str	r3, [r7, #8]
}
 8009e98:	bf00      	nop
 8009e9a:	bf00      	nop
 8009e9c:	e7fd      	b.n	8009e9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8009f18 <xPortStartScheduler+0x138>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	021b      	lsls	r3, r3, #8
 8009ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8009f18 <xPortStartScheduler+0x138>)
 8009ea6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8009f18 <xPortStartScheduler+0x138>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009eb0:	4a19      	ldr	r2, [pc, #100]	@ (8009f18 <xPortStartScheduler+0x138>)
 8009eb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	b2da      	uxtb	r2, r3
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ebc:	4b17      	ldr	r3, [pc, #92]	@ (8009f1c <xPortStartScheduler+0x13c>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a16      	ldr	r2, [pc, #88]	@ (8009f1c <xPortStartScheduler+0x13c>)
 8009ec2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009ec6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ec8:	4b14      	ldr	r3, [pc, #80]	@ (8009f1c <xPortStartScheduler+0x13c>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a13      	ldr	r2, [pc, #76]	@ (8009f1c <xPortStartScheduler+0x13c>)
 8009ece:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009ed2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ed4:	f000 f8da 	bl	800a08c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ed8:	4b11      	ldr	r3, [pc, #68]	@ (8009f20 <xPortStartScheduler+0x140>)
 8009eda:	2200      	movs	r2, #0
 8009edc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ede:	f000 f8f9 	bl	800a0d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ee2:	4b10      	ldr	r3, [pc, #64]	@ (8009f24 <xPortStartScheduler+0x144>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8009f24 <xPortStartScheduler+0x144>)
 8009ee8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009eec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009eee:	f7ff ff63 	bl	8009db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009ef2:	f7ff fa7f 	bl	80093f4 <vTaskSwitchContext>
	prvTaskExitError();
 8009ef6:	f7ff ff19 	bl	8009d2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009efa:	2300      	movs	r3, #0
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3718      	adds	r7, #24
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	e000ed00 	.word	0xe000ed00
 8009f08:	410fc271 	.word	0x410fc271
 8009f0c:	410fc270 	.word	0x410fc270
 8009f10:	e000e400 	.word	0xe000e400
 8009f14:	20000f6c 	.word	0x20000f6c
 8009f18:	20000f70 	.word	0x20000f70
 8009f1c:	e000ed20 	.word	0xe000ed20
 8009f20:	20000028 	.word	0x20000028
 8009f24:	e000ef34 	.word	0xe000ef34

08009f28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f32:	f383 8811 	msr	BASEPRI, r3
 8009f36:	f3bf 8f6f 	isb	sy
 8009f3a:	f3bf 8f4f 	dsb	sy
 8009f3e:	607b      	str	r3, [r7, #4]
}
 8009f40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009f42:	4b10      	ldr	r3, [pc, #64]	@ (8009f84 <vPortEnterCritical+0x5c>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	3301      	adds	r3, #1
 8009f48:	4a0e      	ldr	r2, [pc, #56]	@ (8009f84 <vPortEnterCritical+0x5c>)
 8009f4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8009f84 <vPortEnterCritical+0x5c>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d110      	bne.n	8009f76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f54:	4b0c      	ldr	r3, [pc, #48]	@ (8009f88 <vPortEnterCritical+0x60>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00b      	beq.n	8009f76 <vPortEnterCritical+0x4e>
	__asm volatile
 8009f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f62:	f383 8811 	msr	BASEPRI, r3
 8009f66:	f3bf 8f6f 	isb	sy
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	603b      	str	r3, [r7, #0]
}
 8009f70:	bf00      	nop
 8009f72:	bf00      	nop
 8009f74:	e7fd      	b.n	8009f72 <vPortEnterCritical+0x4a>
	}
}
 8009f76:	bf00      	nop
 8009f78:	370c      	adds	r7, #12
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	20000028 	.word	0x20000028
 8009f88:	e000ed04 	.word	0xe000ed04

08009f8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f92:	4b12      	ldr	r3, [pc, #72]	@ (8009fdc <vPortExitCritical+0x50>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d10b      	bne.n	8009fb2 <vPortExitCritical+0x26>
	__asm volatile
 8009f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f9e:	f383 8811 	msr	BASEPRI, r3
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	607b      	str	r3, [r7, #4]
}
 8009fac:	bf00      	nop
 8009fae:	bf00      	nop
 8009fb0:	e7fd      	b.n	8009fae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8009fdc <vPortExitCritical+0x50>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	4a08      	ldr	r2, [pc, #32]	@ (8009fdc <vPortExitCritical+0x50>)
 8009fba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009fbc:	4b07      	ldr	r3, [pc, #28]	@ (8009fdc <vPortExitCritical+0x50>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d105      	bne.n	8009fd0 <vPortExitCritical+0x44>
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009fce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	20000028 	.word	0x20000028

08009fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009fe0:	f3ef 8009 	mrs	r0, PSP
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	4b15      	ldr	r3, [pc, #84]	@ (800a040 <pxCurrentTCBConst>)
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	f01e 0f10 	tst.w	lr, #16
 8009ff0:	bf08      	it	eq
 8009ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ffa:	6010      	str	r0, [r2, #0]
 8009ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a000:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a004:	f380 8811 	msr	BASEPRI, r0
 800a008:	f3bf 8f4f 	dsb	sy
 800a00c:	f3bf 8f6f 	isb	sy
 800a010:	f7ff f9f0 	bl	80093f4 <vTaskSwitchContext>
 800a014:	f04f 0000 	mov.w	r0, #0
 800a018:	f380 8811 	msr	BASEPRI, r0
 800a01c:	bc09      	pop	{r0, r3}
 800a01e:	6819      	ldr	r1, [r3, #0]
 800a020:	6808      	ldr	r0, [r1, #0]
 800a022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a026:	f01e 0f10 	tst.w	lr, #16
 800a02a:	bf08      	it	eq
 800a02c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a030:	f380 8809 	msr	PSP, r0
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop
 800a03c:	f3af 8000 	nop.w

0800a040 <pxCurrentTCBConst>:
 800a040:	20000e40 	.word	0x20000e40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a044:	bf00      	nop
 800a046:	bf00      	nop

0800a048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	607b      	str	r3, [r7, #4]
}
 800a060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a062:	f7ff f90d 	bl	8009280 <xTaskIncrementTick>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d003      	beq.n	800a074 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a06c:	4b06      	ldr	r3, [pc, #24]	@ (800a088 <SysTick_Handler+0x40>)
 800a06e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a072:	601a      	str	r2, [r3, #0]
 800a074:	2300      	movs	r3, #0
 800a076:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	f383 8811 	msr	BASEPRI, r3
}
 800a07e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a080:	bf00      	nop
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	e000ed04 	.word	0xe000ed04

0800a08c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a08c:	b480      	push	{r7}
 800a08e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a090:	4b0b      	ldr	r3, [pc, #44]	@ (800a0c0 <vPortSetupTimerInterrupt+0x34>)
 800a092:	2200      	movs	r2, #0
 800a094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a096:	4b0b      	ldr	r3, [pc, #44]	@ (800a0c4 <vPortSetupTimerInterrupt+0x38>)
 800a098:	2200      	movs	r2, #0
 800a09a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a09c:	4b0a      	ldr	r3, [pc, #40]	@ (800a0c8 <vPortSetupTimerInterrupt+0x3c>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a0a      	ldr	r2, [pc, #40]	@ (800a0cc <vPortSetupTimerInterrupt+0x40>)
 800a0a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0a6:	099b      	lsrs	r3, r3, #6
 800a0a8:	4a09      	ldr	r2, [pc, #36]	@ (800a0d0 <vPortSetupTimerInterrupt+0x44>)
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a0ae:	4b04      	ldr	r3, [pc, #16]	@ (800a0c0 <vPortSetupTimerInterrupt+0x34>)
 800a0b0:	2207      	movs	r2, #7
 800a0b2:	601a      	str	r2, [r3, #0]
}
 800a0b4:	bf00      	nop
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	e000e010 	.word	0xe000e010
 800a0c4:	e000e018 	.word	0xe000e018
 800a0c8:	20000000 	.word	0x20000000
 800a0cc:	10624dd3 	.word	0x10624dd3
 800a0d0:	e000e014 	.word	0xe000e014

0800a0d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a0d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a0e4 <vPortEnableVFP+0x10>
 800a0d8:	6801      	ldr	r1, [r0, #0]
 800a0da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a0de:	6001      	str	r1, [r0, #0]
 800a0e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a0e2:	bf00      	nop
 800a0e4:	e000ed88 	.word	0xe000ed88

0800a0e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b08a      	sub	sp, #40	@ 0x28
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a0f4:	f7ff f808 	bl	8009108 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a0f8:	4b5c      	ldr	r3, [pc, #368]	@ (800a26c <pvPortMalloc+0x184>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d101      	bne.n	800a104 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a100:	f000 f924 	bl	800a34c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a104:	4b5a      	ldr	r3, [pc, #360]	@ (800a270 <pvPortMalloc+0x188>)
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4013      	ands	r3, r2
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f040 8095 	bne.w	800a23c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d01e      	beq.n	800a156 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a118:	2208      	movs	r2, #8
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4413      	add	r3, r2
 800a11e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f003 0307 	and.w	r3, r3, #7
 800a126:	2b00      	cmp	r3, #0
 800a128:	d015      	beq.n	800a156 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f023 0307 	bic.w	r3, r3, #7
 800a130:	3308      	adds	r3, #8
 800a132:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f003 0307 	and.w	r3, r3, #7
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00b      	beq.n	800a156 <pvPortMalloc+0x6e>
	__asm volatile
 800a13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	617b      	str	r3, [r7, #20]
}
 800a150:	bf00      	nop
 800a152:	bf00      	nop
 800a154:	e7fd      	b.n	800a152 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d06f      	beq.n	800a23c <pvPortMalloc+0x154>
 800a15c:	4b45      	ldr	r3, [pc, #276]	@ (800a274 <pvPortMalloc+0x18c>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	429a      	cmp	r2, r3
 800a164:	d86a      	bhi.n	800a23c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a166:	4b44      	ldr	r3, [pc, #272]	@ (800a278 <pvPortMalloc+0x190>)
 800a168:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a16a:	4b43      	ldr	r3, [pc, #268]	@ (800a278 <pvPortMalloc+0x190>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a170:	e004      	b.n	800a17c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a174:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	429a      	cmp	r2, r3
 800a184:	d903      	bls.n	800a18e <pvPortMalloc+0xa6>
 800a186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1f1      	bne.n	800a172 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a18e:	4b37      	ldr	r3, [pc, #220]	@ (800a26c <pvPortMalloc+0x184>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a194:	429a      	cmp	r2, r3
 800a196:	d051      	beq.n	800a23c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a198:	6a3b      	ldr	r3, [r7, #32]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2208      	movs	r2, #8
 800a19e:	4413      	add	r3, r2
 800a1a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	6a3b      	ldr	r3, [r7, #32]
 800a1a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ac:	685a      	ldr	r2, [r3, #4]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	1ad2      	subs	r2, r2, r3
 800a1b2:	2308      	movs	r3, #8
 800a1b4:	005b      	lsls	r3, r3, #1
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d920      	bls.n	800a1fc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a1ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4413      	add	r3, r2
 800a1c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	f003 0307 	and.w	r3, r3, #7
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00b      	beq.n	800a1e4 <pvPortMalloc+0xfc>
	__asm volatile
 800a1cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d0:	f383 8811 	msr	BASEPRI, r3
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	613b      	str	r3, [r7, #16]
}
 800a1de:	bf00      	nop
 800a1e0:	bf00      	nop
 800a1e2:	e7fd      	b.n	800a1e0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e6:	685a      	ldr	r2, [r3, #4]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	1ad2      	subs	r2, r2, r3
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a1f6:	69b8      	ldr	r0, [r7, #24]
 800a1f8:	f000 f90a 	bl	800a410 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a1fc:	4b1d      	ldr	r3, [pc, #116]	@ (800a274 <pvPortMalloc+0x18c>)
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	1ad3      	subs	r3, r2, r3
 800a206:	4a1b      	ldr	r2, [pc, #108]	@ (800a274 <pvPortMalloc+0x18c>)
 800a208:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a20a:	4b1a      	ldr	r3, [pc, #104]	@ (800a274 <pvPortMalloc+0x18c>)
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	4b1b      	ldr	r3, [pc, #108]	@ (800a27c <pvPortMalloc+0x194>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	429a      	cmp	r2, r3
 800a214:	d203      	bcs.n	800a21e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a216:	4b17      	ldr	r3, [pc, #92]	@ (800a274 <pvPortMalloc+0x18c>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a18      	ldr	r2, [pc, #96]	@ (800a27c <pvPortMalloc+0x194>)
 800a21c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a220:	685a      	ldr	r2, [r3, #4]
 800a222:	4b13      	ldr	r3, [pc, #76]	@ (800a270 <pvPortMalloc+0x188>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	431a      	orrs	r2, r3
 800a228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a22a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a22e:	2200      	movs	r2, #0
 800a230:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a232:	4b13      	ldr	r3, [pc, #76]	@ (800a280 <pvPortMalloc+0x198>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	3301      	adds	r3, #1
 800a238:	4a11      	ldr	r2, [pc, #68]	@ (800a280 <pvPortMalloc+0x198>)
 800a23a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a23c:	f7fe ff72 	bl	8009124 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	f003 0307 	and.w	r3, r3, #7
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00b      	beq.n	800a262 <pvPortMalloc+0x17a>
	__asm volatile
 800a24a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	60fb      	str	r3, [r7, #12]
}
 800a25c:	bf00      	nop
 800a25e:	bf00      	nop
 800a260:	e7fd      	b.n	800a25e <pvPortMalloc+0x176>
	return pvReturn;
 800a262:	69fb      	ldr	r3, [r7, #28]
}
 800a264:	4618      	mov	r0, r3
 800a266:	3728      	adds	r7, #40	@ 0x28
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	2000e654 	.word	0x2000e654
 800a270:	2000e668 	.word	0x2000e668
 800a274:	2000e658 	.word	0x2000e658
 800a278:	2000e64c 	.word	0x2000e64c
 800a27c:	2000e65c 	.word	0x2000e65c
 800a280:	2000e660 	.word	0x2000e660

0800a284 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b086      	sub	sp, #24
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d04f      	beq.n	800a336 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a296:	2308      	movs	r3, #8
 800a298:	425b      	negs	r3, r3
 800a29a:	697a      	ldr	r2, [r7, #20]
 800a29c:	4413      	add	r3, r2
 800a29e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	685a      	ldr	r2, [r3, #4]
 800a2a8:	4b25      	ldr	r3, [pc, #148]	@ (800a340 <vPortFree+0xbc>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4013      	ands	r3, r2
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d10b      	bne.n	800a2ca <vPortFree+0x46>
	__asm volatile
 800a2b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b6:	f383 8811 	msr	BASEPRI, r3
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	60fb      	str	r3, [r7, #12]
}
 800a2c4:	bf00      	nop
 800a2c6:	bf00      	nop
 800a2c8:	e7fd      	b.n	800a2c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00b      	beq.n	800a2ea <vPortFree+0x66>
	__asm volatile
 800a2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	60bb      	str	r3, [r7, #8]
}
 800a2e4:	bf00      	nop
 800a2e6:	bf00      	nop
 800a2e8:	e7fd      	b.n	800a2e6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	685a      	ldr	r2, [r3, #4]
 800a2ee:	4b14      	ldr	r3, [pc, #80]	@ (800a340 <vPortFree+0xbc>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4013      	ands	r3, r2
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d01e      	beq.n	800a336 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d11a      	bne.n	800a336 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	685a      	ldr	r2, [r3, #4]
 800a304:	4b0e      	ldr	r3, [pc, #56]	@ (800a340 <vPortFree+0xbc>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	43db      	mvns	r3, r3
 800a30a:	401a      	ands	r2, r3
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a310:	f7fe fefa 	bl	8009108 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	685a      	ldr	r2, [r3, #4]
 800a318:	4b0a      	ldr	r3, [pc, #40]	@ (800a344 <vPortFree+0xc0>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4413      	add	r3, r2
 800a31e:	4a09      	ldr	r2, [pc, #36]	@ (800a344 <vPortFree+0xc0>)
 800a320:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a322:	6938      	ldr	r0, [r7, #16]
 800a324:	f000 f874 	bl	800a410 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a328:	4b07      	ldr	r3, [pc, #28]	@ (800a348 <vPortFree+0xc4>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	3301      	adds	r3, #1
 800a32e:	4a06      	ldr	r2, [pc, #24]	@ (800a348 <vPortFree+0xc4>)
 800a330:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a332:	f7fe fef7 	bl	8009124 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a336:	bf00      	nop
 800a338:	3718      	adds	r7, #24
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	2000e668 	.word	0x2000e668
 800a344:	2000e658 	.word	0x2000e658
 800a348:	2000e664 	.word	0x2000e664

0800a34c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a34c:	b480      	push	{r7}
 800a34e:	b085      	sub	sp, #20
 800a350:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a352:	f24d 63d8 	movw	r3, #55000	@ 0xd6d8
 800a356:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a358:	4b27      	ldr	r3, [pc, #156]	@ (800a3f8 <prvHeapInit+0xac>)
 800a35a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f003 0307 	and.w	r3, r3, #7
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00c      	beq.n	800a380 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	3307      	adds	r3, #7
 800a36a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f023 0307 	bic.w	r3, r3, #7
 800a372:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a374:	68ba      	ldr	r2, [r7, #8]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	1ad3      	subs	r3, r2, r3
 800a37a:	4a1f      	ldr	r2, [pc, #124]	@ (800a3f8 <prvHeapInit+0xac>)
 800a37c:	4413      	add	r3, r2
 800a37e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a384:	4a1d      	ldr	r2, [pc, #116]	@ (800a3fc <prvHeapInit+0xb0>)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a38a:	4b1c      	ldr	r3, [pc, #112]	@ (800a3fc <prvHeapInit+0xb0>)
 800a38c:	2200      	movs	r2, #0
 800a38e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	68ba      	ldr	r2, [r7, #8]
 800a394:	4413      	add	r3, r2
 800a396:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a398:	2208      	movs	r2, #8
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	1a9b      	subs	r3, r3, r2
 800a39e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f023 0307 	bic.w	r3, r3, #7
 800a3a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	4a15      	ldr	r2, [pc, #84]	@ (800a400 <prvHeapInit+0xb4>)
 800a3ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a3ae:	4b14      	ldr	r3, [pc, #80]	@ (800a400 <prvHeapInit+0xb4>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a3b6:	4b12      	ldr	r3, [pc, #72]	@ (800a400 <prvHeapInit+0xb4>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	1ad2      	subs	r2, r2, r3
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a3cc:	4b0c      	ldr	r3, [pc, #48]	@ (800a400 <prvHeapInit+0xb4>)
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	4a0a      	ldr	r2, [pc, #40]	@ (800a404 <prvHeapInit+0xb8>)
 800a3da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	4a09      	ldr	r2, [pc, #36]	@ (800a408 <prvHeapInit+0xbc>)
 800a3e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a3e4:	4b09      	ldr	r3, [pc, #36]	@ (800a40c <prvHeapInit+0xc0>)
 800a3e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a3ea:	601a      	str	r2, [r3, #0]
}
 800a3ec:	bf00      	nop
 800a3ee:	3714      	adds	r7, #20
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr
 800a3f8:	20000f74 	.word	0x20000f74
 800a3fc:	2000e64c 	.word	0x2000e64c
 800a400:	2000e654 	.word	0x2000e654
 800a404:	2000e65c 	.word	0x2000e65c
 800a408:	2000e658 	.word	0x2000e658
 800a40c:	2000e668 	.word	0x2000e668

0800a410 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a418:	4b28      	ldr	r3, [pc, #160]	@ (800a4bc <prvInsertBlockIntoFreeList+0xac>)
 800a41a:	60fb      	str	r3, [r7, #12]
 800a41c:	e002      	b.n	800a424 <prvInsertBlockIntoFreeList+0x14>
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	60fb      	str	r3, [r7, #12]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d8f7      	bhi.n	800a41e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	4413      	add	r3, r2
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d108      	bne.n	800a452 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	685a      	ldr	r2, [r3, #4]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	441a      	add	r2, r3
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	441a      	add	r2, r3
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	429a      	cmp	r2, r3
 800a464:	d118      	bne.n	800a498 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	4b15      	ldr	r3, [pc, #84]	@ (800a4c0 <prvInsertBlockIntoFreeList+0xb0>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d00d      	beq.n	800a48e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	685a      	ldr	r2, [r3, #4]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	441a      	add	r2, r3
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	601a      	str	r2, [r3, #0]
 800a48c:	e008      	b.n	800a4a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a48e:	4b0c      	ldr	r3, [pc, #48]	@ (800a4c0 <prvInsertBlockIntoFreeList+0xb0>)
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	601a      	str	r2, [r3, #0]
 800a496:	e003      	b.n	800a4a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d002      	beq.n	800a4ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4ae:	bf00      	nop
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	2000e64c 	.word	0x2000e64c
 800a4c0:	2000e654 	.word	0x2000e654

0800a4c4 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	71fb      	strb	r3, [r7, #7]
	return SD_disk_status(pdrv);
 800a4ce:	79fb      	ldrb	r3, [r7, #7]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f000 faf3 	bl	800aabc <SD_disk_status>
 800a4d6:	4603      	mov	r3, r0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	71fb      	strb	r3, [r7, #7]


	return SD_disk_initialize(pdrv);
 800a4ea:	79fb      	ldrb	r3, [r7, #7]
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f000 f9f9 	bl	800a8e4 <SD_disk_initialize>
 800a4f2:	4603      	mov	r3, r0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3708      	adds	r7, #8
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	60b9      	str	r1, [r7, #8]
 800a504:	607a      	str	r2, [r7, #4]
 800a506:	603b      	str	r3, [r7, #0]
 800a508:	4603      	mov	r3, r0
 800a50a:	73fb      	strb	r3, [r7, #15]

	return SD_disk_read(pdrv, buff, sector, count);
 800a50c:	7bf8      	ldrb	r0, [r7, #15]
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	68b9      	ldr	r1, [r7, #8]
 800a514:	f000 fae8 	bl	800aae8 <SD_disk_read>
 800a518:	4603      	mov	r3, r0

}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b084      	sub	sp, #16
 800a526:	af00      	add	r7, sp, #0
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
 800a52c:	603b      	str	r3, [r7, #0]
 800a52e:	4603      	mov	r3, r0
 800a530:	73fb      	strb	r3, [r7, #15]

	return SD_disk_write(pdrv, buff, sector, count);
 800a532:	7bf8      	ldrb	r0, [r7, #15]
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	68b9      	ldr	r1, [r7, #8]
 800a53a:	f000 fb43 	bl	800abc4 <SD_disk_write>
 800a53e:	4603      	mov	r3, r0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3710      	adds	r7, #16
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	4603      	mov	r3, r0
 800a550:	603a      	str	r2, [r7, #0]
 800a552:	71fb      	strb	r3, [r7, #7]
 800a554:	460b      	mov	r3, r1
 800a556:	71bb      	strb	r3, [r7, #6]
	return SD_disk_ioctl(pdrv, cmd, buff);
 800a558:	79b9      	ldrb	r1, [r7, #6]
 800a55a:	79fb      	ldrb	r3, [r7, #7]
 800a55c:	683a      	ldr	r2, [r7, #0]
 800a55e:	4618      	mov	r0, r3
 800a560:	f000 fbba 	bl	800acd8 <SD_disk_ioctl>
 800a564:	4603      	mov	r3, r0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3708      	adds	r7, #8
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
	...

0800a570 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800a574:	2200      	movs	r2, #0
 800a576:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a57a:	4804      	ldr	r0, [pc, #16]	@ (800a58c <SELECT+0x1c>)
 800a57c:	f7fa fc72 	bl	8004e64 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800a580:	2001      	movs	r0, #1
 800a582:	f7f9 f887 	bl	8003694 <HAL_Delay>
}
 800a586:	bf00      	nop
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	40020000 	.word	0x40020000

0800a590 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800a594:	2201      	movs	r2, #1
 800a596:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a59a:	4804      	ldr	r0, [pc, #16]	@ (800a5ac <DESELECT+0x1c>)
 800a59c:	f7fa fc62 	bl	8004e64 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800a5a0:	2001      	movs	r0, #1
 800a5a2:	f7f9 f877 	bl	8003694 <HAL_Delay>
}
 800a5a6:	bf00      	nop
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	40020000 	.word	0x40020000

0800a5b0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800a5ba:	bf00      	nop
 800a5bc:	4b08      	ldr	r3, [pc, #32]	@ (800a5e0 <SPI_TxByte+0x30>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	f003 0302 	and.w	r3, r3, #2
 800a5c6:	2b02      	cmp	r3, #2
 800a5c8:	d1f8      	bne.n	800a5bc <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800a5ca:	1df9      	adds	r1, r7, #7
 800a5cc:	2364      	movs	r3, #100	@ 0x64
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	4803      	ldr	r0, [pc, #12]	@ (800a5e0 <SPI_TxByte+0x30>)
 800a5d2:	f7fc f992 	bl	80068fa <HAL_SPI_Transmit>
}
 800a5d6:	bf00      	nop
 800a5d8:	3708      	adds	r7, #8
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	2000040c 	.word	0x2000040c

0800a5e4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800a5f0:	bf00      	nop
 800a5f2:	4b08      	ldr	r3, [pc, #32]	@ (800a614 <SPI_TxBuffer+0x30>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	f003 0302 	and.w	r3, r3, #2
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	d1f8      	bne.n	800a5f2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800a600:	887a      	ldrh	r2, [r7, #2]
 800a602:	2364      	movs	r3, #100	@ 0x64
 800a604:	6879      	ldr	r1, [r7, #4]
 800a606:	4803      	ldr	r0, [pc, #12]	@ (800a614 <SPI_TxBuffer+0x30>)
 800a608:	f7fc f977 	bl	80068fa <HAL_SPI_Transmit>
}
 800a60c:	bf00      	nop
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	2000040c 	.word	0x2000040c

0800a618 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800a61e:	23ff      	movs	r3, #255	@ 0xff
 800a620:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800a622:	bf00      	nop
 800a624:	4b09      	ldr	r3, [pc, #36]	@ (800a64c <SPI_RxByte+0x34>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	f003 0302 	and.w	r3, r3, #2
 800a62e:	2b02      	cmp	r3, #2
 800a630:	d1f8      	bne.n	800a624 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800a632:	1dba      	adds	r2, r7, #6
 800a634:	1df9      	adds	r1, r7, #7
 800a636:	2364      	movs	r3, #100	@ 0x64
 800a638:	9300      	str	r3, [sp, #0]
 800a63a:	2301      	movs	r3, #1
 800a63c:	4803      	ldr	r0, [pc, #12]	@ (800a64c <SPI_RxByte+0x34>)
 800a63e:	f7fc fa9f 	bl	8006b80 <HAL_SPI_TransmitReceive>

	return data;
 800a642:	79bb      	ldrb	r3, [r7, #6]
}
 800a644:	4618      	mov	r0, r3
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	2000040c 	.word	0x2000040c

0800a650 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800a658:	f7ff ffde 	bl	800a618 <SPI_RxByte>
 800a65c:	4603      	mov	r3, r0
 800a65e:	461a      	mov	r2, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	701a      	strb	r2, [r3, #0]
}
 800a664:	bf00      	nop
 800a666:	3708      	adds	r7, #8
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800a672:	4b0a      	ldr	r3, [pc, #40]	@ (800a69c <SD_ReadyWait+0x30>)
 800a674:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800a678:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800a67a:	f7ff ffcd 	bl	800a618 <SPI_RxByte>
 800a67e:	4603      	mov	r3, r0
 800a680:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800a682:	79fb      	ldrb	r3, [r7, #7]
 800a684:	2bff      	cmp	r3, #255	@ 0xff
 800a686:	d004      	beq.n	800a692 <SD_ReadyWait+0x26>
 800a688:	4b04      	ldr	r3, [pc, #16]	@ (800a69c <SD_ReadyWait+0x30>)
 800a68a:	881b      	ldrh	r3, [r3, #0]
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d1f3      	bne.n	800a67a <SD_ReadyWait+0xe>

	return res;
 800a692:	79fb      	ldrb	r3, [r7, #7]
}
 800a694:	4618      	mov	r0, r3
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	20000552 	.word	0x20000552

0800a6a0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800a6a6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800a6aa:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800a6ac:	f7ff ff70 	bl	800a590 <DESELECT>
	for(int i = 0; i < 10; i++)
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	60bb      	str	r3, [r7, #8]
 800a6b4:	e005      	b.n	800a6c2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800a6b6:	20ff      	movs	r0, #255	@ 0xff
 800a6b8:	f7ff ff7a 	bl	800a5b0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	60bb      	str	r3, [r7, #8]
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	2b09      	cmp	r3, #9
 800a6c6:	ddf6      	ble.n	800a6b6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800a6c8:	f7ff ff52 	bl	800a570 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800a6cc:	2340      	movs	r3, #64	@ 0x40
 800a6ce:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800a6e0:	2395      	movs	r3, #149	@ 0x95
 800a6e2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800a6e4:	463b      	mov	r3, r7
 800a6e6:	2106      	movs	r1, #6
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7ff ff7b 	bl	800a5e4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800a6ee:	e002      	b.n	800a6f6 <SD_PowerOn+0x56>
	{
		cnt--;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	3b01      	subs	r3, #1
 800a6f4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800a6f6:	f7ff ff8f 	bl	800a618 <SPI_RxByte>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d002      	beq.n	800a706 <SD_PowerOn+0x66>
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d1f4      	bne.n	800a6f0 <SD_PowerOn+0x50>
	}

	DESELECT();
 800a706:	f7ff ff43 	bl	800a590 <DESELECT>
	SPI_TxByte(0XFF);
 800a70a:	20ff      	movs	r0, #255	@ 0xff
 800a70c:	f7ff ff50 	bl	800a5b0 <SPI_TxByte>

	PowerFlag = 1;
 800a710:	4b03      	ldr	r3, [pc, #12]	@ (800a720 <SD_PowerOn+0x80>)
 800a712:	2201      	movs	r2, #1
 800a714:	701a      	strb	r2, [r3, #0]
}
 800a716:	bf00      	nop
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	2000e66d 	.word	0x2000e66d

0800a724 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 800a724:	b480      	push	{r7}
 800a726:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800a728:	4b03      	ldr	r3, [pc, #12]	@ (800a738 <SD_PowerOff+0x14>)
 800a72a:	2200      	movs	r2, #0
 800a72c:	701a      	strb	r2, [r3, #0]
}
 800a72e:	bf00      	nop
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr
 800a738:	2000e66d 	.word	0x2000e66d

0800a73c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800a73c:	b480      	push	{r7}
 800a73e:	af00      	add	r7, sp, #0
	return PowerFlag;
 800a740:	4b03      	ldr	r3, [pc, #12]	@ (800a750 <SD_CheckPower+0x14>)
 800a742:	781b      	ldrb	r3, [r3, #0]
}
 800a744:	4618      	mov	r0, r3
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	2000e66d 	.word	0x2000e66d

0800a754 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800a75e:	4b14      	ldr	r3, [pc, #80]	@ (800a7b0 <SD_RxDataBlock+0x5c>)
 800a760:	22c8      	movs	r2, #200	@ 0xc8
 800a762:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800a764:	f7ff ff58 	bl	800a618 <SPI_RxByte>
 800a768:	4603      	mov	r3, r0
 800a76a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800a76c:	7bfb      	ldrb	r3, [r7, #15]
 800a76e:	2bff      	cmp	r3, #255	@ 0xff
 800a770:	d104      	bne.n	800a77c <SD_RxDataBlock+0x28>
 800a772:	4b0f      	ldr	r3, [pc, #60]	@ (800a7b0 <SD_RxDataBlock+0x5c>)
 800a774:	881b      	ldrh	r3, [r3, #0]
 800a776:	b29b      	uxth	r3, r3
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d1f3      	bne.n	800a764 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800a77c:	7bfb      	ldrb	r3, [r7, #15]
 800a77e:	2bfe      	cmp	r3, #254	@ 0xfe
 800a780:	d001      	beq.n	800a786 <SD_RxDataBlock+0x32>
 800a782:	2300      	movs	r3, #0
 800a784:	e00f      	b.n	800a7a6 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	1c5a      	adds	r2, r3, #1
 800a78a:	607a      	str	r2, [r7, #4]
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7ff ff5f 	bl	800a650 <SPI_RxBytePtr>
	} while(len--);
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	1e5a      	subs	r2, r3, #1
 800a796:	603a      	str	r2, [r7, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d1f4      	bne.n	800a786 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 800a79c:	f7ff ff3c 	bl	800a618 <SPI_RxByte>
	SPI_RxByte();
 800a7a0:	f7ff ff3a 	bl	800a618 <SPI_RxByte>

	return TRUE;
 800a7a4:	2301      	movs	r3, #1
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	20000551 	.word	0x20000551

0800a7b4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	460b      	mov	r3, r1
 800a7be:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800a7c4:	f7ff ff52 	bl	800a66c <SD_ReadyWait>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2bff      	cmp	r3, #255	@ 0xff
 800a7cc:	d001      	beq.n	800a7d2 <SD_TxDataBlock+0x1e>
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	e02f      	b.n	800a832 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800a7d2:	78fb      	ldrb	r3, [r7, #3]
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7ff feeb 	bl	800a5b0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800a7da:	78fb      	ldrb	r3, [r7, #3]
 800a7dc:	2bfd      	cmp	r3, #253	@ 0xfd
 800a7de:	d020      	beq.n	800a822 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800a7e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f7ff fefd 	bl	800a5e4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800a7ea:	f7ff ff15 	bl	800a618 <SPI_RxByte>
		SPI_RxByte();
 800a7ee:	f7ff ff13 	bl	800a618 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800a7f2:	e00b      	b.n	800a80c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800a7f4:	f7ff ff10 	bl	800a618 <SPI_RxByte>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800a7fc:	7bfb      	ldrb	r3, [r7, #15]
 800a7fe:	f003 031f 	and.w	r3, r3, #31
 800a802:	2b05      	cmp	r3, #5
 800a804:	d006      	beq.n	800a814 <SD_TxDataBlock+0x60>
			i++;
 800a806:	7bbb      	ldrb	r3, [r7, #14]
 800a808:	3301      	adds	r3, #1
 800a80a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800a80c:	7bbb      	ldrb	r3, [r7, #14]
 800a80e:	2b40      	cmp	r3, #64	@ 0x40
 800a810:	d9f0      	bls.n	800a7f4 <SD_TxDataBlock+0x40>
 800a812:	e000      	b.n	800a816 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800a814:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800a816:	bf00      	nop
 800a818:	f7ff fefe 	bl	800a618 <SPI_RxByte>
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d0fa      	beq.n	800a818 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800a822:	7bfb      	ldrb	r3, [r7, #15]
 800a824:	f003 031f 	and.w	r3, r3, #31
 800a828:	2b05      	cmp	r3, #5
 800a82a:	d101      	bne.n	800a830 <SD_TxDataBlock+0x7c>
 800a82c:	2301      	movs	r3, #1
 800a82e:	e000      	b.n	800a832 <SD_TxDataBlock+0x7e>

	return FALSE;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b084      	sub	sp, #16
 800a83e:	af00      	add	r7, sp, #0
 800a840:	4603      	mov	r3, r0
 800a842:	6039      	str	r1, [r7, #0]
 800a844:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800a846:	f7ff ff11 	bl	800a66c <SD_ReadyWait>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2bff      	cmp	r3, #255	@ 0xff
 800a84e:	d001      	beq.n	800a854 <SD_SendCmd+0x1a>
 800a850:	23ff      	movs	r3, #255	@ 0xff
 800a852:	e042      	b.n	800a8da <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800a854:	79fb      	ldrb	r3, [r7, #7]
 800a856:	4618      	mov	r0, r3
 800a858:	f7ff feaa 	bl	800a5b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	0e1b      	lsrs	r3, r3, #24
 800a860:	b2db      	uxtb	r3, r3
 800a862:	4618      	mov	r0, r3
 800a864:	f7ff fea4 	bl	800a5b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	0c1b      	lsrs	r3, r3, #16
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	4618      	mov	r0, r3
 800a870:	f7ff fe9e 	bl	800a5b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	0a1b      	lsrs	r3, r3, #8
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7ff fe98 	bl	800a5b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	b2db      	uxtb	r3, r3
 800a884:	4618      	mov	r0, r3
 800a886:	f7ff fe93 	bl	800a5b0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800a88a:	79fb      	ldrb	r3, [r7, #7]
 800a88c:	2b40      	cmp	r3, #64	@ 0x40
 800a88e:	d102      	bne.n	800a896 <SD_SendCmd+0x5c>
 800a890:	2395      	movs	r3, #149	@ 0x95
 800a892:	73fb      	strb	r3, [r7, #15]
 800a894:	e007      	b.n	800a8a6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800a896:	79fb      	ldrb	r3, [r7, #7]
 800a898:	2b48      	cmp	r3, #72	@ 0x48
 800a89a:	d102      	bne.n	800a8a2 <SD_SendCmd+0x68>
 800a89c:	2387      	movs	r3, #135	@ 0x87
 800a89e:	73fb      	strb	r3, [r7, #15]
 800a8a0:	e001      	b.n	800a8a6 <SD_SendCmd+0x6c>
	else crc = 1;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800a8a6:	7bfb      	ldrb	r3, [r7, #15]
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f7ff fe81 	bl	800a5b0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800a8ae:	79fb      	ldrb	r3, [r7, #7]
 800a8b0:	2b4c      	cmp	r3, #76	@ 0x4c
 800a8b2:	d101      	bne.n	800a8b8 <SD_SendCmd+0x7e>
 800a8b4:	f7ff feb0 	bl	800a618 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800a8b8:	230a      	movs	r3, #10
 800a8ba:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800a8bc:	f7ff feac 	bl	800a618 <SPI_RxByte>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800a8c4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	da05      	bge.n	800a8d8 <SD_SendCmd+0x9e>
 800a8cc:	7bbb      	ldrb	r3, [r7, #14]
 800a8ce:	3b01      	subs	r3, #1
 800a8d0:	73bb      	strb	r3, [r7, #14]
 800a8d2:	7bbb      	ldrb	r3, [r7, #14]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d1f1      	bne.n	800a8bc <SD_SendCmd+0x82>

	return res;
 800a8d8:	7b7b      	ldrb	r3, [r7, #13]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
	...

0800a8e4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800a8e4:	b590      	push	{r4, r7, lr}
 800a8e6:	b085      	sub	sp, #20
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800a8ee:	79fb      	ldrb	r3, [r7, #7]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d001      	beq.n	800a8f8 <SD_disk_initialize+0x14>
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e0d6      	b.n	800aaa6 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800a8f8:	4b6d      	ldr	r3, [pc, #436]	@ (800aab0 <SD_disk_initialize+0x1cc>)
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	f003 0302 	and.w	r3, r3, #2
 800a902:	2b00      	cmp	r3, #0
 800a904:	d003      	beq.n	800a90e <SD_disk_initialize+0x2a>
 800a906:	4b6a      	ldr	r3, [pc, #424]	@ (800aab0 <SD_disk_initialize+0x1cc>)
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	e0cb      	b.n	800aaa6 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800a90e:	f7ff fec7 	bl	800a6a0 <SD_PowerOn>

	/* slave select */
	SELECT();
 800a912:	f7ff fe2d 	bl	800a570 <SELECT>

	/* check disk type */
	type = 0;
 800a916:	2300      	movs	r3, #0
 800a918:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800a91a:	2100      	movs	r1, #0
 800a91c:	2040      	movs	r0, #64	@ 0x40
 800a91e:	f7ff ff8c 	bl	800a83a <SD_SendCmd>
 800a922:	4603      	mov	r3, r0
 800a924:	2b01      	cmp	r3, #1
 800a926:	f040 80a6 	bne.w	800aa76 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800a92a:	4b62      	ldr	r3, [pc, #392]	@ (800aab4 <SD_disk_initialize+0x1d0>)
 800a92c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a930:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800a932:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800a936:	2048      	movs	r0, #72	@ 0x48
 800a938:	f7ff ff7f 	bl	800a83a <SD_SendCmd>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d158      	bne.n	800a9f4 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800a942:	2300      	movs	r3, #0
 800a944:	73fb      	strb	r3, [r7, #15]
 800a946:	e00c      	b.n	800a962 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800a948:	7bfc      	ldrb	r4, [r7, #15]
 800a94a:	f7ff fe65 	bl	800a618 <SPI_RxByte>
 800a94e:	4603      	mov	r3, r0
 800a950:	461a      	mov	r2, r3
 800a952:	f104 0310 	add.w	r3, r4, #16
 800a956:	443b      	add	r3, r7
 800a958:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800a95c:	7bfb      	ldrb	r3, [r7, #15]
 800a95e:	3301      	adds	r3, #1
 800a960:	73fb      	strb	r3, [r7, #15]
 800a962:	7bfb      	ldrb	r3, [r7, #15]
 800a964:	2b03      	cmp	r3, #3
 800a966:	d9ef      	bls.n	800a948 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800a968:	7abb      	ldrb	r3, [r7, #10]
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	f040 8083 	bne.w	800aa76 <SD_disk_initialize+0x192>
 800a970:	7afb      	ldrb	r3, [r7, #11]
 800a972:	2baa      	cmp	r3, #170	@ 0xaa
 800a974:	d17f      	bne.n	800aa76 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800a976:	2100      	movs	r1, #0
 800a978:	2077      	movs	r0, #119	@ 0x77
 800a97a:	f7ff ff5e 	bl	800a83a <SD_SendCmd>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b01      	cmp	r3, #1
 800a982:	d807      	bhi.n	800a994 <SD_disk_initialize+0xb0>
 800a984:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800a988:	2069      	movs	r0, #105	@ 0x69
 800a98a:	f7ff ff56 	bl	800a83a <SD_SendCmd>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d005      	beq.n	800a9a0 <SD_disk_initialize+0xbc>
				} while (Timer1);
 800a994:	4b47      	ldr	r3, [pc, #284]	@ (800aab4 <SD_disk_initialize+0x1d0>)
 800a996:	881b      	ldrh	r3, [r3, #0]
 800a998:	b29b      	uxth	r3, r3
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d1eb      	bne.n	800a976 <SD_disk_initialize+0x92>
 800a99e:	e000      	b.n	800a9a2 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800a9a0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800a9a2:	4b44      	ldr	r3, [pc, #272]	@ (800aab4 <SD_disk_initialize+0x1d0>)
 800a9a4:	881b      	ldrh	r3, [r3, #0]
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d064      	beq.n	800aa76 <SD_disk_initialize+0x192>
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	207a      	movs	r0, #122	@ 0x7a
 800a9b0:	f7ff ff43 	bl	800a83a <SD_SendCmd>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d15d      	bne.n	800aa76 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	73fb      	strb	r3, [r7, #15]
 800a9be:	e00c      	b.n	800a9da <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 800a9c0:	7bfc      	ldrb	r4, [r7, #15]
 800a9c2:	f7ff fe29 	bl	800a618 <SPI_RxByte>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	f104 0310 	add.w	r3, r4, #16
 800a9ce:	443b      	add	r3, r7
 800a9d0:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800a9d4:	7bfb      	ldrb	r3, [r7, #15]
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	73fb      	strb	r3, [r7, #15]
 800a9da:	7bfb      	ldrb	r3, [r7, #15]
 800a9dc:	2b03      	cmp	r3, #3
 800a9de:	d9ef      	bls.n	800a9c0 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800a9e0:	7a3b      	ldrb	r3, [r7, #8]
 800a9e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d001      	beq.n	800a9ee <SD_disk_initialize+0x10a>
 800a9ea:	230c      	movs	r3, #12
 800a9ec:	e000      	b.n	800a9f0 <SD_disk_initialize+0x10c>
 800a9ee:	2304      	movs	r3, #4
 800a9f0:	73bb      	strb	r3, [r7, #14]
 800a9f2:	e040      	b.n	800aa76 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	2077      	movs	r0, #119	@ 0x77
 800a9f8:	f7ff ff1f 	bl	800a83a <SD_SendCmd>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d808      	bhi.n	800aa14 <SD_disk_initialize+0x130>
 800aa02:	2100      	movs	r1, #0
 800aa04:	2069      	movs	r0, #105	@ 0x69
 800aa06:	f7ff ff18 	bl	800a83a <SD_SendCmd>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d801      	bhi.n	800aa14 <SD_disk_initialize+0x130>
 800aa10:	2302      	movs	r3, #2
 800aa12:	e000      	b.n	800aa16 <SD_disk_initialize+0x132>
 800aa14:	2301      	movs	r3, #1
 800aa16:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800aa18:	7bbb      	ldrb	r3, [r7, #14]
 800aa1a:	2b02      	cmp	r3, #2
 800aa1c:	d10e      	bne.n	800aa3c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800aa1e:	2100      	movs	r1, #0
 800aa20:	2077      	movs	r0, #119	@ 0x77
 800aa22:	f7ff ff0a 	bl	800a83a <SD_SendCmd>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b01      	cmp	r3, #1
 800aa2a:	d80e      	bhi.n	800aa4a <SD_disk_initialize+0x166>
 800aa2c:	2100      	movs	r1, #0
 800aa2e:	2069      	movs	r0, #105	@ 0x69
 800aa30:	f7ff ff03 	bl	800a83a <SD_SendCmd>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d107      	bne.n	800aa4a <SD_disk_initialize+0x166>
 800aa3a:	e00d      	b.n	800aa58 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	2041      	movs	r0, #65	@ 0x41
 800aa40:	f7ff fefb 	bl	800a83a <SD_SendCmd>
 800aa44:	4603      	mov	r3, r0
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d005      	beq.n	800aa56 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800aa4a:	4b1a      	ldr	r3, [pc, #104]	@ (800aab4 <SD_disk_initialize+0x1d0>)
 800aa4c:	881b      	ldrh	r3, [r3, #0]
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d1e1      	bne.n	800aa18 <SD_disk_initialize+0x134>
 800aa54:	e000      	b.n	800aa58 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800aa56:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800aa58:	4b16      	ldr	r3, [pc, #88]	@ (800aab4 <SD_disk_initialize+0x1d0>)
 800aa5a:	881b      	ldrh	r3, [r3, #0]
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d007      	beq.n	800aa72 <SD_disk_initialize+0x18e>
 800aa62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800aa66:	2050      	movs	r0, #80	@ 0x50
 800aa68:	f7ff fee7 	bl	800a83a <SD_SendCmd>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d001      	beq.n	800aa76 <SD_disk_initialize+0x192>
 800aa72:	2300      	movs	r3, #0
 800aa74:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800aa76:	4a10      	ldr	r2, [pc, #64]	@ (800aab8 <SD_disk_initialize+0x1d4>)
 800aa78:	7bbb      	ldrb	r3, [r7, #14]
 800aa7a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800aa7c:	f7ff fd88 	bl	800a590 <DESELECT>
	SPI_RxByte();
 800aa80:	f7ff fdca 	bl	800a618 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800aa84:	7bbb      	ldrb	r3, [r7, #14]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d008      	beq.n	800aa9c <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800aa8a:	4b09      	ldr	r3, [pc, #36]	@ (800aab0 <SD_disk_initialize+0x1cc>)
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	f023 0301 	bic.w	r3, r3, #1
 800aa94:	b2da      	uxtb	r2, r3
 800aa96:	4b06      	ldr	r3, [pc, #24]	@ (800aab0 <SD_disk_initialize+0x1cc>)
 800aa98:	701a      	strb	r2, [r3, #0]
 800aa9a:	e001      	b.n	800aaa0 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800aa9c:	f7ff fe42 	bl	800a724 <SD_PowerOff>
	}

	return Stat;
 800aaa0:	4b03      	ldr	r3, [pc, #12]	@ (800aab0 <SD_disk_initialize+0x1cc>)
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	b2db      	uxtb	r3, r3
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3714      	adds	r7, #20
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd90      	pop	{r4, r7, pc}
 800aaae:	bf00      	nop
 800aab0:	2000002c 	.word	0x2000002c
 800aab4:	20000551 	.word	0x20000551
 800aab8:	2000e66c 	.word	0x2000e66c

0800aabc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	4603      	mov	r3, r0
 800aac4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800aac6:	79fb      	ldrb	r3, [r7, #7]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d001      	beq.n	800aad0 <SD_disk_status+0x14>
 800aacc:	2301      	movs	r3, #1
 800aace:	e002      	b.n	800aad6 <SD_disk_status+0x1a>
	return Stat;
 800aad0:	4b04      	ldr	r3, [pc, #16]	@ (800aae4 <SD_disk_status+0x28>)
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	b2db      	uxtb	r3, r3
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	370c      	adds	r7, #12
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	2000002c 	.word	0x2000002c

0800aae8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	60b9      	str	r1, [r7, #8]
 800aaf0:	607a      	str	r2, [r7, #4]
 800aaf2:	603b      	str	r3, [r7, #0]
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800aaf8:	7bfb      	ldrb	r3, [r7, #15]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d102      	bne.n	800ab04 <SD_disk_read+0x1c>
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d101      	bne.n	800ab08 <SD_disk_read+0x20>
 800ab04:	2304      	movs	r3, #4
 800ab06:	e054      	b.n	800abb2 <SD_disk_read+0xca>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ab08:	4b2c      	ldr	r3, [pc, #176]	@ (800abbc <SD_disk_read+0xd4>)
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	f003 0301 	and.w	r3, r3, #1
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d001      	beq.n	800ab1a <SD_disk_read+0x32>
 800ab16:	2303      	movs	r3, #3
 800ab18:	e04b      	b.n	800abb2 <SD_disk_read+0xca>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800ab1a:	4b29      	ldr	r3, [pc, #164]	@ (800abc0 <SD_disk_read+0xd8>)
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	f003 0304 	and.w	r3, r3, #4
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d102      	bne.n	800ab2c <SD_disk_read+0x44>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	025b      	lsls	r3, r3, #9
 800ab2a:	607b      	str	r3, [r7, #4]

	SELECT();
 800ab2c:	f7ff fd20 	bl	800a570 <SELECT>

	if (count == 1)
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d111      	bne.n	800ab5a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800ab36:	6879      	ldr	r1, [r7, #4]
 800ab38:	2051      	movs	r0, #81	@ 0x51
 800ab3a:	f7ff fe7e 	bl	800a83a <SD_SendCmd>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d12c      	bne.n	800ab9e <SD_disk_read+0xb6>
 800ab44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ab48:	68b8      	ldr	r0, [r7, #8]
 800ab4a:	f7ff fe03 	bl	800a754 <SD_RxDataBlock>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d024      	beq.n	800ab9e <SD_disk_read+0xb6>
 800ab54:	2300      	movs	r3, #0
 800ab56:	603b      	str	r3, [r7, #0]
 800ab58:	e021      	b.n	800ab9e <SD_disk_read+0xb6>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800ab5a:	6879      	ldr	r1, [r7, #4]
 800ab5c:	2052      	movs	r0, #82	@ 0x52
 800ab5e:	f7ff fe6c 	bl	800a83a <SD_SendCmd>
 800ab62:	4603      	mov	r3, r0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d11a      	bne.n	800ab9e <SD_disk_read+0xb6>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800ab68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ab6c:	68b8      	ldr	r0, [r7, #8]
 800ab6e:	f7ff fdf1 	bl	800a754 <SD_RxDataBlock>
 800ab72:	4603      	mov	r3, r0
 800ab74:	f083 0301 	eor.w	r3, r3, #1
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d10a      	bne.n	800ab94 <SD_disk_read+0xac>
				buff += 512;
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800ab84:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	603b      	str	r3, [r7, #0]
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d1ea      	bne.n	800ab68 <SD_disk_read+0x80>
 800ab92:	e000      	b.n	800ab96 <SD_disk_read+0xae>
				if (!SD_RxDataBlock(buff, 512)) break;
 800ab94:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800ab96:	2100      	movs	r1, #0
 800ab98:	204c      	movs	r0, #76	@ 0x4c
 800ab9a:	f7ff fe4e 	bl	800a83a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800ab9e:	f7ff fcf7 	bl	800a590 <DESELECT>
	SPI_RxByte();
 800aba2:	f7ff fd39 	bl	800a618 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	bf14      	ite	ne
 800abac:	2301      	movne	r3, #1
 800abae:	2300      	moveq	r3, #0
 800abb0:	b2db      	uxtb	r3, r3
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	2000002c 	.word	0x2000002c
 800abc0:	2000e66c 	.word	0x2000e66c

0800abc4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	60b9      	str	r1, [r7, #8]
 800abcc:	607a      	str	r2, [r7, #4]
 800abce:	603b      	str	r3, [r7, #0]
 800abd0:	4603      	mov	r3, r0
 800abd2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800abd4:	7bfb      	ldrb	r3, [r7, #15]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d102      	bne.n	800abe0 <SD_disk_write+0x1c>
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d101      	bne.n	800abe4 <SD_disk_write+0x20>
 800abe0:	2304      	movs	r3, #4
 800abe2:	e071      	b.n	800acc8 <SD_disk_write+0x104>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800abe4:	4b3a      	ldr	r3, [pc, #232]	@ (800acd0 <SD_disk_write+0x10c>)
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	f003 0301 	and.w	r3, r3, #1
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d001      	beq.n	800abf6 <SD_disk_write+0x32>
 800abf2:	2303      	movs	r3, #3
 800abf4:	e068      	b.n	800acc8 <SD_disk_write+0x104>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800abf6:	4b36      	ldr	r3, [pc, #216]	@ (800acd0 <SD_disk_write+0x10c>)
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	f003 0304 	and.w	r3, r3, #4
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d001      	beq.n	800ac08 <SD_disk_write+0x44>
 800ac04:	2302      	movs	r3, #2
 800ac06:	e05f      	b.n	800acc8 <SD_disk_write+0x104>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800ac08:	4b32      	ldr	r3, [pc, #200]	@ (800acd4 <SD_disk_write+0x110>)
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	f003 0304 	and.w	r3, r3, #4
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d102      	bne.n	800ac1a <SD_disk_write+0x56>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	025b      	lsls	r3, r3, #9
 800ac18:	607b      	str	r3, [r7, #4]

	SELECT();
 800ac1a:	f7ff fca9 	bl	800a570 <SELECT>

	if (count == 1)
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d110      	bne.n	800ac46 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800ac24:	6879      	ldr	r1, [r7, #4]
 800ac26:	2058      	movs	r0, #88	@ 0x58
 800ac28:	f7ff fe07 	bl	800a83a <SD_SendCmd>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d140      	bne.n	800acb4 <SD_disk_write+0xf0>
 800ac32:	21fe      	movs	r1, #254	@ 0xfe
 800ac34:	68b8      	ldr	r0, [r7, #8]
 800ac36:	f7ff fdbd 	bl	800a7b4 <SD_TxDataBlock>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d039      	beq.n	800acb4 <SD_disk_write+0xf0>
			count = 0;
 800ac40:	2300      	movs	r3, #0
 800ac42:	603b      	str	r3, [r7, #0]
 800ac44:	e036      	b.n	800acb4 <SD_disk_write+0xf0>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800ac46:	4b23      	ldr	r3, [pc, #140]	@ (800acd4 <SD_disk_write+0x110>)
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	f003 0302 	and.w	r3, r3, #2
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d007      	beq.n	800ac62 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800ac52:	2100      	movs	r1, #0
 800ac54:	2077      	movs	r0, #119	@ 0x77
 800ac56:	f7ff fdf0 	bl	800a83a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800ac5a:	6839      	ldr	r1, [r7, #0]
 800ac5c:	2057      	movs	r0, #87	@ 0x57
 800ac5e:	f7ff fdec 	bl	800a83a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800ac62:	6879      	ldr	r1, [r7, #4]
 800ac64:	2059      	movs	r0, #89	@ 0x59
 800ac66:	f7ff fde8 	bl	800a83a <SD_SendCmd>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d121      	bne.n	800acb4 <SD_disk_write+0xf0>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800ac70:	21fc      	movs	r1, #252	@ 0xfc
 800ac72:	68b8      	ldr	r0, [r7, #8]
 800ac74:	f7ff fd9e 	bl	800a7b4 <SD_TxDataBlock>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	f083 0301 	eor.w	r3, r3, #1
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d10a      	bne.n	800ac9a <SD_disk_write+0xd6>
				buff += 512;
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800ac8a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	603b      	str	r3, [r7, #0]
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d1eb      	bne.n	800ac70 <SD_disk_write+0xac>
 800ac98:	e000      	b.n	800ac9c <SD_disk_write+0xd8>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800ac9a:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800ac9c:	21fd      	movs	r1, #253	@ 0xfd
 800ac9e:	2000      	movs	r0, #0
 800aca0:	f7ff fd88 	bl	800a7b4 <SD_TxDataBlock>
 800aca4:	4603      	mov	r3, r0
 800aca6:	f083 0301 	eor.w	r3, r3, #1
 800acaa:	b2db      	uxtb	r3, r3
 800acac:	2b00      	cmp	r3, #0
 800acae:	d001      	beq.n	800acb4 <SD_disk_write+0xf0>
			{
				count = 1;
 800acb0:	2301      	movs	r3, #1
 800acb2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800acb4:	f7ff fc6c 	bl	800a590 <DESELECT>
	SPI_RxByte();
 800acb8:	f7ff fcae 	bl	800a618 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	bf14      	ite	ne
 800acc2:	2301      	movne	r3, #1
 800acc4:	2300      	moveq	r3, #0
 800acc6:	b2db      	uxtb	r3, r3
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3710      	adds	r7, #16
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	2000002c 	.word	0x2000002c
 800acd4:	2000e66c 	.word	0x2000e66c

0800acd8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800acd8:	b590      	push	{r4, r7, lr}
 800acda:	b08b      	sub	sp, #44	@ 0x2c
 800acdc:	af00      	add	r7, sp, #0
 800acde:	4603      	mov	r3, r0
 800ace0:	603a      	str	r2, [r7, #0]
 800ace2:	71fb      	strb	r3, [r7, #7]
 800ace4:	460b      	mov	r3, r1
 800ace6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800acec:	79fb      	ldrb	r3, [r7, #7]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d001      	beq.n	800acf6 <SD_disk_ioctl+0x1e>
 800acf2:	2304      	movs	r3, #4
 800acf4:	e113      	b.n	800af1e <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 800acf6:	2301      	movs	r3, #1
 800acf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 800acfc:	79bb      	ldrb	r3, [r7, #6]
 800acfe:	2b05      	cmp	r3, #5
 800ad00:	d124      	bne.n	800ad4c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800ad02:	6a3b      	ldr	r3, [r7, #32]
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	d012      	beq.n	800ad30 <SD_disk_ioctl+0x58>
 800ad0a:	2b02      	cmp	r3, #2
 800ad0c:	dc1a      	bgt.n	800ad44 <SD_disk_ioctl+0x6c>
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d002      	beq.n	800ad18 <SD_disk_ioctl+0x40>
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d006      	beq.n	800ad24 <SD_disk_ioctl+0x4c>
 800ad16:	e015      	b.n	800ad44 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800ad18:	f7ff fd04 	bl	800a724 <SD_PowerOff>
			res = RES_OK;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800ad22:	e0fa      	b.n	800af1a <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 800ad24:	f7ff fcbc 	bl	800a6a0 <SD_PowerOn>
			res = RES_OK;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800ad2e:	e0f4      	b.n	800af1a <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800ad30:	6a3b      	ldr	r3, [r7, #32]
 800ad32:	1c5c      	adds	r4, r3, #1
 800ad34:	f7ff fd02 	bl	800a73c <SD_CheckPower>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800ad42:	e0ea      	b.n	800af1a <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 800ad44:	2304      	movs	r3, #4
 800ad46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ad4a:	e0e6      	b.n	800af1a <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ad4c:	4b76      	ldr	r3, [pc, #472]	@ (800af28 <SD_disk_ioctl+0x250>)
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	f003 0301 	and.w	r3, r3, #1
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d001      	beq.n	800ad5e <SD_disk_ioctl+0x86>
 800ad5a:	2303      	movs	r3, #3
 800ad5c:	e0df      	b.n	800af1e <SD_disk_ioctl+0x246>

		SELECT();
 800ad5e:	f7ff fc07 	bl	800a570 <SELECT>

		switch (ctrl)
 800ad62:	79bb      	ldrb	r3, [r7, #6]
 800ad64:	2b0d      	cmp	r3, #13
 800ad66:	f200 80c9 	bhi.w	800aefc <SD_disk_ioctl+0x224>
 800ad6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ad70 <SD_disk_ioctl+0x98>)
 800ad6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad70:	0800ae67 	.word	0x0800ae67
 800ad74:	0800ada9 	.word	0x0800ada9
 800ad78:	0800ae57 	.word	0x0800ae57
 800ad7c:	0800aefd 	.word	0x0800aefd
 800ad80:	0800aefd 	.word	0x0800aefd
 800ad84:	0800aefd 	.word	0x0800aefd
 800ad88:	0800aefd 	.word	0x0800aefd
 800ad8c:	0800aefd 	.word	0x0800aefd
 800ad90:	0800aefd 	.word	0x0800aefd
 800ad94:	0800aefd 	.word	0x0800aefd
 800ad98:	0800aefd 	.word	0x0800aefd
 800ad9c:	0800ae79 	.word	0x0800ae79
 800ada0:	0800ae9d 	.word	0x0800ae9d
 800ada4:	0800aec1 	.word	0x0800aec1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800ada8:	2100      	movs	r1, #0
 800adaa:	2049      	movs	r0, #73	@ 0x49
 800adac:	f7ff fd45 	bl	800a83a <SD_SendCmd>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	f040 80a6 	bne.w	800af04 <SD_disk_ioctl+0x22c>
 800adb8:	f107 030c 	add.w	r3, r7, #12
 800adbc:	2110      	movs	r1, #16
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7ff fcc8 	bl	800a754 <SD_RxDataBlock>
 800adc4:	4603      	mov	r3, r0
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f000 809c 	beq.w	800af04 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 800adcc:	7b3b      	ldrb	r3, [r7, #12]
 800adce:	099b      	lsrs	r3, r3, #6
 800add0:	b2db      	uxtb	r3, r3
 800add2:	2b01      	cmp	r3, #1
 800add4:	d10d      	bne.n	800adf2 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800add6:	7d7b      	ldrb	r3, [r7, #21]
 800add8:	461a      	mov	r2, r3
 800adda:	7d3b      	ldrb	r3, [r7, #20]
 800addc:	021b      	lsls	r3, r3, #8
 800adde:	b29b      	uxth	r3, r3
 800ade0:	4413      	add	r3, r2
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	3301      	adds	r3, #1
 800ade6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800ade8:	8bfb      	ldrh	r3, [r7, #30]
 800adea:	029a      	lsls	r2, r3, #10
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	601a      	str	r2, [r3, #0]
 800adf0:	e02d      	b.n	800ae4e <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800adf2:	7c7b      	ldrb	r3, [r7, #17]
 800adf4:	f003 030f 	and.w	r3, r3, #15
 800adf8:	b2da      	uxtb	r2, r3
 800adfa:	7dbb      	ldrb	r3, [r7, #22]
 800adfc:	09db      	lsrs	r3, r3, #7
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	4413      	add	r3, r2
 800ae02:	b2da      	uxtb	r2, r3
 800ae04:	7d7b      	ldrb	r3, [r7, #21]
 800ae06:	005b      	lsls	r3, r3, #1
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	f003 0306 	and.w	r3, r3, #6
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	4413      	add	r3, r2
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	3302      	adds	r3, #2
 800ae16:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800ae1a:	7d3b      	ldrb	r3, [r7, #20]
 800ae1c:	099b      	lsrs	r3, r3, #6
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	461a      	mov	r2, r3
 800ae22:	7cfb      	ldrb	r3, [r7, #19]
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	4413      	add	r3, r2
 800ae2a:	b29a      	uxth	r2, r3
 800ae2c:	7cbb      	ldrb	r3, [r7, #18]
 800ae2e:	029b      	lsls	r3, r3, #10
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	4413      	add	r3, r2
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800ae40:	8bfa      	ldrh	r2, [r7, #30]
 800ae42:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ae46:	3b09      	subs	r3, #9
 800ae48:	409a      	lsls	r2, r3
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 800ae54:	e056      	b.n	800af04 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae5c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800ae64:	e055      	b.n	800af12 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800ae66:	f7ff fc01 	bl	800a66c <SD_ReadyWait>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2bff      	cmp	r3, #255	@ 0xff
 800ae6e:	d14b      	bne.n	800af08 <SD_disk_ioctl+0x230>
 800ae70:	2300      	movs	r3, #0
 800ae72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800ae76:	e047      	b.n	800af08 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800ae78:	2100      	movs	r1, #0
 800ae7a:	2049      	movs	r0, #73	@ 0x49
 800ae7c:	f7ff fcdd 	bl	800a83a <SD_SendCmd>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d142      	bne.n	800af0c <SD_disk_ioctl+0x234>
 800ae86:	2110      	movs	r1, #16
 800ae88:	6a38      	ldr	r0, [r7, #32]
 800ae8a:	f7ff fc63 	bl	800a754 <SD_RxDataBlock>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d03b      	beq.n	800af0c <SD_disk_ioctl+0x234>
 800ae94:	2300      	movs	r3, #0
 800ae96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800ae9a:	e037      	b.n	800af0c <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	204a      	movs	r0, #74	@ 0x4a
 800aea0:	f7ff fccb 	bl	800a83a <SD_SendCmd>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d132      	bne.n	800af10 <SD_disk_ioctl+0x238>
 800aeaa:	2110      	movs	r1, #16
 800aeac:	6a38      	ldr	r0, [r7, #32]
 800aeae:	f7ff fc51 	bl	800a754 <SD_RxDataBlock>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d02b      	beq.n	800af10 <SD_disk_ioctl+0x238>
 800aeb8:	2300      	movs	r3, #0
 800aeba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800aebe:	e027      	b.n	800af10 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800aec0:	2100      	movs	r1, #0
 800aec2:	207a      	movs	r0, #122	@ 0x7a
 800aec4:	f7ff fcb9 	bl	800a83a <SD_SendCmd>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d116      	bne.n	800aefc <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800aece:	2300      	movs	r3, #0
 800aed0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800aed4:	e00b      	b.n	800aeee <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 800aed6:	6a3c      	ldr	r4, [r7, #32]
 800aed8:	1c63      	adds	r3, r4, #1
 800aeda:	623b      	str	r3, [r7, #32]
 800aedc:	f7ff fb9c 	bl	800a618 <SPI_RxByte>
 800aee0:	4603      	mov	r3, r0
 800aee2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800aee4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aee8:	3301      	adds	r3, #1
 800aeea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800aeee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aef2:	2b03      	cmp	r3, #3
 800aef4:	d9ef      	bls.n	800aed6 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 800aef6:	2300      	movs	r3, #0
 800aef8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 800aefc:	2304      	movs	r3, #4
 800aefe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800af02:	e006      	b.n	800af12 <SD_disk_ioctl+0x23a>
			break;
 800af04:	bf00      	nop
 800af06:	e004      	b.n	800af12 <SD_disk_ioctl+0x23a>
			break;
 800af08:	bf00      	nop
 800af0a:	e002      	b.n	800af12 <SD_disk_ioctl+0x23a>
			break;
 800af0c:	bf00      	nop
 800af0e:	e000      	b.n	800af12 <SD_disk_ioctl+0x23a>
			break;
 800af10:	bf00      	nop
		}

		DESELECT();
 800af12:	f7ff fb3d 	bl	800a590 <DESELECT>
		SPI_RxByte();
 800af16:	f7ff fb7f 	bl	800a618 <SPI_RxByte>
	}

	return res;
 800af1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800af1e:	4618      	mov	r0, r3
 800af20:	372c      	adds	r7, #44	@ 0x2c
 800af22:	46bd      	mov	sp, r7
 800af24:	bd90      	pop	{r4, r7, pc}
 800af26:	bf00      	nop
 800af28:	2000002c 	.word	0x2000002c

0800af2c <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800af2c:	b480      	push	{r7}
 800af2e:	b085      	sub	sp, #20
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	3301      	adds	r3, #1
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800af3c:	89fb      	ldrh	r3, [r7, #14]
 800af3e:	021b      	lsls	r3, r3, #8
 800af40:	b21a      	sxth	r2, r3
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	b21b      	sxth	r3, r3
 800af48:	4313      	orrs	r3, r2
 800af4a:	b21b      	sxth	r3, r3
 800af4c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800af4e:	89fb      	ldrh	r3, [r7, #14]
}
 800af50:	4618      	mov	r0, r3
 800af52:	3714      	adds	r7, #20
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800af5c:	b480      	push	{r7}
 800af5e:	b085      	sub	sp, #20
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	3303      	adds	r3, #3
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	021b      	lsls	r3, r3, #8
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	3202      	adds	r2, #2
 800af74:	7812      	ldrb	r2, [r2, #0]
 800af76:	4313      	orrs	r3, r2
 800af78:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	021b      	lsls	r3, r3, #8
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	3201      	adds	r2, #1
 800af82:	7812      	ldrb	r2, [r2, #0]
 800af84:	4313      	orrs	r3, r2
 800af86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	021b      	lsls	r3, r3, #8
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	7812      	ldrb	r2, [r2, #0]
 800af90:	4313      	orrs	r3, r2
 800af92:	60fb      	str	r3, [r7, #12]
	return rv;
 800af94:	68fb      	ldr	r3, [r7, #12]
}
 800af96:	4618      	mov	r0, r3
 800af98:	3714      	adds	r7, #20
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr

0800afa2 <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800afa2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800afa6:	b09d      	sub	sp, #116	@ 0x74
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 800afac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800afae:	3307      	adds	r3, #7
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	2200      	movs	r2, #0
 800afb6:	469a      	mov	sl, r3
 800afb8:	4693      	mov	fp, r2
 800afba:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 800afbe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800afc2:	f04f 0000 	mov.w	r0, #0
 800afc6:	f04f 0100 	mov.w	r1, #0
 800afca:	0219      	lsls	r1, r3, #8
 800afcc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800afd0:	0210      	lsls	r0, r2, #8
 800afd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800afd4:	3306      	adds	r3, #6
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	2200      	movs	r2, #0
 800afdc:	461c      	mov	r4, r3
 800afde:	4615      	mov	r5, r2
 800afe0:	ea40 0804 	orr.w	r8, r0, r4
 800afe4:	ea41 0905 	orr.w	r9, r1, r5
 800afe8:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 800afec:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800aff0:	f04f 0000 	mov.w	r0, #0
 800aff4:	f04f 0100 	mov.w	r1, #0
 800aff8:	0219      	lsls	r1, r3, #8
 800affa:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800affe:	0210      	lsls	r0, r2, #8
 800b000:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b002:	3305      	adds	r3, #5
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	b2db      	uxtb	r3, r3
 800b008:	2200      	movs	r2, #0
 800b00a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b00c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800b00e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800b012:	4623      	mov	r3, r4
 800b014:	4303      	orrs	r3, r0
 800b016:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b018:	462b      	mov	r3, r5
 800b01a:	430b      	orrs	r3, r1
 800b01c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b01e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800b022:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 800b026:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800b02a:	f04f 0000 	mov.w	r0, #0
 800b02e:	f04f 0100 	mov.w	r1, #0
 800b032:	0219      	lsls	r1, r3, #8
 800b034:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b038:	0210      	lsls	r0, r2, #8
 800b03a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b03c:	3304      	adds	r3, #4
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	b2db      	uxtb	r3, r3
 800b042:	2200      	movs	r2, #0
 800b044:	653b      	str	r3, [r7, #80]	@ 0x50
 800b046:	657a      	str	r2, [r7, #84]	@ 0x54
 800b048:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800b04c:	4623      	mov	r3, r4
 800b04e:	4303      	orrs	r3, r0
 800b050:	623b      	str	r3, [r7, #32]
 800b052:	462b      	mov	r3, r5
 800b054:	430b      	orrs	r3, r1
 800b056:	627b      	str	r3, [r7, #36]	@ 0x24
 800b058:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800b05c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 800b060:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800b064:	f04f 0000 	mov.w	r0, #0
 800b068:	f04f 0100 	mov.w	r1, #0
 800b06c:	0219      	lsls	r1, r3, #8
 800b06e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b072:	0210      	lsls	r0, r2, #8
 800b074:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b076:	3303      	adds	r3, #3
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	2200      	movs	r2, #0
 800b07e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b080:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800b082:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800b086:	4623      	mov	r3, r4
 800b088:	4303      	orrs	r3, r0
 800b08a:	61bb      	str	r3, [r7, #24]
 800b08c:	462b      	mov	r3, r5
 800b08e:	430b      	orrs	r3, r1
 800b090:	61fb      	str	r3, [r7, #28]
 800b092:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800b096:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 800b09a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800b09e:	f04f 0000 	mov.w	r0, #0
 800b0a2:	f04f 0100 	mov.w	r1, #0
 800b0a6:	0219      	lsls	r1, r3, #8
 800b0a8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b0ac:	0210      	lsls	r0, r2, #8
 800b0ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b0b0:	3302      	adds	r3, #2
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0ba:	647a      	str	r2, [r7, #68]	@ 0x44
 800b0bc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800b0c0:	4623      	mov	r3, r4
 800b0c2:	4303      	orrs	r3, r0
 800b0c4:	613b      	str	r3, [r7, #16]
 800b0c6:	462b      	mov	r3, r5
 800b0c8:	430b      	orrs	r3, r1
 800b0ca:	617b      	str	r3, [r7, #20]
 800b0cc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b0d0:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 800b0d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b0d8:	f04f 0200 	mov.w	r2, #0
 800b0dc:	f04f 0300 	mov.w	r3, #0
 800b0e0:	020b      	lsls	r3, r1, #8
 800b0e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b0e6:	0202      	lsls	r2, r0, #8
 800b0e8:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b0ea:	3101      	adds	r1, #1
 800b0ec:	7809      	ldrb	r1, [r1, #0]
 800b0ee:	b2c9      	uxtb	r1, r1
 800b0f0:	2000      	movs	r0, #0
 800b0f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b0f4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800b0f6:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800b0fa:	4621      	mov	r1, r4
 800b0fc:	4311      	orrs	r1, r2
 800b0fe:	60b9      	str	r1, [r7, #8]
 800b100:	4629      	mov	r1, r5
 800b102:	4319      	orrs	r1, r3
 800b104:	60f9      	str	r1, [r7, #12]
 800b106:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800b10a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 800b10e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b112:	f04f 0200 	mov.w	r2, #0
 800b116:	f04f 0300 	mov.w	r3, #0
 800b11a:	020b      	lsls	r3, r1, #8
 800b11c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b120:	0202      	lsls	r2, r0, #8
 800b122:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b124:	7809      	ldrb	r1, [r1, #0]
 800b126:	b2c9      	uxtb	r1, r1
 800b128:	2000      	movs	r0, #0
 800b12a:	6339      	str	r1, [r7, #48]	@ 0x30
 800b12c:	6378      	str	r0, [r7, #52]	@ 0x34
 800b12e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800b132:	4621      	mov	r1, r4
 800b134:	4311      	orrs	r1, r2
 800b136:	6039      	str	r1, [r7, #0]
 800b138:	4629      	mov	r1, r5
 800b13a:	4319      	orrs	r1, r3
 800b13c:	6079      	str	r1, [r7, #4]
 800b13e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b142:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 800b146:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 800b14a:	4610      	mov	r0, r2
 800b14c:	4619      	mov	r1, r3
 800b14e:	3774      	adds	r7, #116	@ 0x74
 800b150:	46bd      	mov	sp, r7
 800b152:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b156:	4770      	bx	lr

0800b158 <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b158:	b480      	push	{r7}
 800b15a:	b083      	sub	sp, #12
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	460b      	mov	r3, r1
 800b162:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	1c5a      	adds	r2, r3, #1
 800b168:	607a      	str	r2, [r7, #4]
 800b16a:	887a      	ldrh	r2, [r7, #2]
 800b16c:	b2d2      	uxtb	r2, r2
 800b16e:	701a      	strb	r2, [r3, #0]
 800b170:	887b      	ldrh	r3, [r7, #2]
 800b172:	0a1b      	lsrs	r3, r3, #8
 800b174:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	1c5a      	adds	r2, r3, #1
 800b17a:	607a      	str	r2, [r7, #4]
 800b17c:	887a      	ldrh	r2, [r7, #2]
 800b17e:	b2d2      	uxtb	r2, r2
 800b180:	701a      	strb	r2, [r3, #0]
}
 800b182:	bf00      	nop
 800b184:	370c      	adds	r7, #12
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr

0800b18e <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b18e:	b480      	push	{r7}
 800b190:	b083      	sub	sp, #12
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
 800b196:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	1c5a      	adds	r2, r3, #1
 800b19c:	607a      	str	r2, [r7, #4]
 800b19e:	683a      	ldr	r2, [r7, #0]
 800b1a0:	b2d2      	uxtb	r2, r2
 800b1a2:	701a      	strb	r2, [r3, #0]
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	0a1b      	lsrs	r3, r3, #8
 800b1a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	1c5a      	adds	r2, r3, #1
 800b1ae:	607a      	str	r2, [r7, #4]
 800b1b0:	683a      	ldr	r2, [r7, #0]
 800b1b2:	b2d2      	uxtb	r2, r2
 800b1b4:	701a      	strb	r2, [r3, #0]
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	0a1b      	lsrs	r3, r3, #8
 800b1ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	1c5a      	adds	r2, r3, #1
 800b1c0:	607a      	str	r2, [r7, #4]
 800b1c2:	683a      	ldr	r2, [r7, #0]
 800b1c4:	b2d2      	uxtb	r2, r2
 800b1c6:	701a      	strb	r2, [r3, #0]
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	0a1b      	lsrs	r3, r3, #8
 800b1cc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	1c5a      	adds	r2, r3, #1
 800b1d2:	607a      	str	r2, [r7, #4]
 800b1d4:	683a      	ldr	r2, [r7, #0]
 800b1d6:	b2d2      	uxtb	r2, r2
 800b1d8:	701a      	strb	r2, [r3, #0]
}
 800b1da:	bf00      	nop
 800b1dc:	370c      	adds	r7, #12
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr

0800b1e6 <st_qword>:

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800b1e6:	b480      	push	{r7}
 800b1e8:	b085      	sub	sp, #20
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	60f8      	str	r0, [r7, #12]
 800b1ee:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	1c5a      	adds	r2, r3, #1
 800b1f6:	60fa      	str	r2, [r7, #12]
 800b1f8:	783a      	ldrb	r2, [r7, #0]
 800b1fa:	701a      	strb	r2, [r3, #0]
 800b1fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b200:	f04f 0200 	mov.w	r2, #0
 800b204:	f04f 0300 	mov.w	r3, #0
 800b208:	0a02      	lsrs	r2, r0, #8
 800b20a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b20e:	0a0b      	lsrs	r3, r1, #8
 800b210:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	1c5a      	adds	r2, r3, #1
 800b218:	60fa      	str	r2, [r7, #12]
 800b21a:	783a      	ldrb	r2, [r7, #0]
 800b21c:	701a      	strb	r2, [r3, #0]
 800b21e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b222:	f04f 0200 	mov.w	r2, #0
 800b226:	f04f 0300 	mov.w	r3, #0
 800b22a:	0a02      	lsrs	r2, r0, #8
 800b22c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b230:	0a0b      	lsrs	r3, r1, #8
 800b232:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	1c5a      	adds	r2, r3, #1
 800b23a:	60fa      	str	r2, [r7, #12]
 800b23c:	783a      	ldrb	r2, [r7, #0]
 800b23e:	701a      	strb	r2, [r3, #0]
 800b240:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b244:	f04f 0200 	mov.w	r2, #0
 800b248:	f04f 0300 	mov.w	r3, #0
 800b24c:	0a02      	lsrs	r2, r0, #8
 800b24e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b252:	0a0b      	lsrs	r3, r1, #8
 800b254:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	1c5a      	adds	r2, r3, #1
 800b25c:	60fa      	str	r2, [r7, #12]
 800b25e:	783a      	ldrb	r2, [r7, #0]
 800b260:	701a      	strb	r2, [r3, #0]
 800b262:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b266:	f04f 0200 	mov.w	r2, #0
 800b26a:	f04f 0300 	mov.w	r3, #0
 800b26e:	0a02      	lsrs	r2, r0, #8
 800b270:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b274:	0a0b      	lsrs	r3, r1, #8
 800b276:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	1c5a      	adds	r2, r3, #1
 800b27e:	60fa      	str	r2, [r7, #12]
 800b280:	783a      	ldrb	r2, [r7, #0]
 800b282:	701a      	strb	r2, [r3, #0]
 800b284:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b288:	f04f 0200 	mov.w	r2, #0
 800b28c:	f04f 0300 	mov.w	r3, #0
 800b290:	0a02      	lsrs	r2, r0, #8
 800b292:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b296:	0a0b      	lsrs	r3, r1, #8
 800b298:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	1c5a      	adds	r2, r3, #1
 800b2a0:	60fa      	str	r2, [r7, #12]
 800b2a2:	783a      	ldrb	r2, [r7, #0]
 800b2a4:	701a      	strb	r2, [r3, #0]
 800b2a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b2aa:	f04f 0200 	mov.w	r2, #0
 800b2ae:	f04f 0300 	mov.w	r3, #0
 800b2b2:	0a02      	lsrs	r2, r0, #8
 800b2b4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b2b8:	0a0b      	lsrs	r3, r1, #8
 800b2ba:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	1c5a      	adds	r2, r3, #1
 800b2c2:	60fa      	str	r2, [r7, #12]
 800b2c4:	783a      	ldrb	r2, [r7, #0]
 800b2c6:	701a      	strb	r2, [r3, #0]
 800b2c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b2cc:	f04f 0200 	mov.w	r2, #0
 800b2d0:	f04f 0300 	mov.w	r3, #0
 800b2d4:	0a02      	lsrs	r2, r0, #8
 800b2d6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b2da:	0a0b      	lsrs	r3, r1, #8
 800b2dc:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	1c5a      	adds	r2, r3, #1
 800b2e4:	60fa      	str	r2, [r7, #12]
 800b2e6:	783a      	ldrb	r2, [r7, #0]
 800b2e8:	701a      	strb	r2, [r3, #0]
}
 800b2ea:	bf00      	nop
 800b2ec:	3714      	adds	r7, #20
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr

0800b2f6 <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 800b2f6:	b480      	push	{r7}
 800b2f8:	b083      	sub	sp, #12
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 800b300:	2281      	movs	r2, #129	@ 0x81
 800b302:	79fb      	ldrb	r3, [r7, #7]
 800b304:	4293      	cmp	r3, r2
 800b306:	d30f      	bcc.n	800b328 <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 800b308:	229f      	movs	r2, #159	@ 0x9f
 800b30a:	79fb      	ldrb	r3, [r7, #7]
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d801      	bhi.n	800b314 <dbc_1st+0x1e>
 800b310:	2301      	movs	r3, #1
 800b312:	e00a      	b.n	800b32a <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 800b314:	22e0      	movs	r2, #224	@ 0xe0
 800b316:	79fb      	ldrb	r3, [r7, #7]
 800b318:	4293      	cmp	r3, r2
 800b31a:	d305      	bcc.n	800b328 <dbc_1st+0x32>
 800b31c:	22fc      	movs	r2, #252	@ 0xfc
 800b31e:	79fb      	ldrb	r3, [r7, #7]
 800b320:	4293      	cmp	r3, r2
 800b322:	d801      	bhi.n	800b328 <dbc_1st+0x32>
 800b324:	2301      	movs	r3, #1
 800b326:	e000      	b.n	800b32a <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	370c      	adds	r7, #12
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr

0800b336 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 800b336:	b480      	push	{r7}
 800b338:	b083      	sub	sp, #12
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	4603      	mov	r3, r0
 800b33e:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 800b340:	2240      	movs	r2, #64	@ 0x40
 800b342:	79fb      	ldrb	r3, [r7, #7]
 800b344:	4293      	cmp	r3, r2
 800b346:	d319      	bcc.n	800b37c <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 800b348:	227e      	movs	r2, #126	@ 0x7e
 800b34a:	79fb      	ldrb	r3, [r7, #7]
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d801      	bhi.n	800b354 <dbc_2nd+0x1e>
 800b350:	2301      	movs	r3, #1
 800b352:	e014      	b.n	800b37e <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 800b354:	2280      	movs	r2, #128	@ 0x80
 800b356:	79fb      	ldrb	r3, [r7, #7]
 800b358:	4293      	cmp	r3, r2
 800b35a:	d305      	bcc.n	800b368 <dbc_2nd+0x32>
 800b35c:	22fc      	movs	r2, #252	@ 0xfc
 800b35e:	79fb      	ldrb	r3, [r7, #7]
 800b360:	4293      	cmp	r3, r2
 800b362:	d801      	bhi.n	800b368 <dbc_2nd+0x32>
 800b364:	2301      	movs	r3, #1
 800b366:	e00a      	b.n	800b37e <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 800b368:	2200      	movs	r2, #0
 800b36a:	79fb      	ldrb	r3, [r7, #7]
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d305      	bcc.n	800b37c <dbc_2nd+0x46>
 800b370:	2200      	movs	r2, #0
 800b372:	79fb      	ldrb	r3, [r7, #7]
 800b374:	4293      	cmp	r3, r2
 800b376:	d801      	bhi.n	800b37c <dbc_2nd+0x46>
 800b378:	2301      	movs	r3, #1
 800b37a:	e000      	b.n	800b37e <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	370c      	adds	r7, #12
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr

0800b38a <tchar2uni>:

/* Get a Unicode code point from the TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns a character in UTF-16 encoding (>=0x10000 on surrogate pair, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b086      	sub	sp, #24
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
	DWORD uc;
	const TCHAR *p = *str;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	617b      	str	r3, [r7, #20]

#else		/* ANSI/OEM input */
	BYTE sb;
	WCHAR wc;

	wc = (BYTE)*p++;			/* Get a byte */
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	1c5a      	adds	r2, r3, #1
 800b39c:	617a      	str	r2, [r7, #20]
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	827b      	strh	r3, [r7, #18]
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 800b3a2:	8a7b      	ldrh	r3, [r7, #18]
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7ff ffa5 	bl	800b2f6 <dbc_1st>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d015      	beq.n	800b3de <tchar2uni+0x54>
		sb = (BYTE)*p++;		/* Get 2nd byte */
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	1c5a      	adds	r2, r3, #1
 800b3b6:	617a      	str	r2, [r7, #20]
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	747b      	strb	r3, [r7, #17]
		if (!dbc_2nd(sb)) return 0xFFFFFFFF;	/* Invalid code? */
 800b3bc:	7c7b      	ldrb	r3, [r7, #17]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7ff ffb9 	bl	800b336 <dbc_2nd>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d102      	bne.n	800b3d0 <tchar2uni+0x46>
 800b3ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b3ce:	e01d      	b.n	800b40c <tchar2uni+0x82>
		wc = (wc << 8) + sb;	/* Make a DBC */
 800b3d0:	8a7b      	ldrh	r3, [r7, #18]
 800b3d2:	021b      	lsls	r3, r3, #8
 800b3d4:	b29a      	uxth	r2, r3
 800b3d6:	7c7b      	ldrb	r3, [r7, #17]
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	4413      	add	r3, r2
 800b3dc:	827b      	strh	r3, [r7, #18]
	}
	if (wc != 0) {
 800b3de:	8a7b      	ldrh	r3, [r7, #18]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d00d      	beq.n	800b400 <tchar2uni+0x76>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 800b3e4:	8a7b      	ldrh	r3, [r7, #18]
 800b3e6:	f44f 7169 	mov.w	r1, #932	@ 0x3a4
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f004 fb84 	bl	800faf8 <ff_oem2uni>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	827b      	strh	r3, [r7, #18]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 800b3f4:	8a7b      	ldrh	r3, [r7, #18]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d102      	bne.n	800b400 <tchar2uni+0x76>
 800b3fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b3fe:	e005      	b.n	800b40c <tchar2uni+0x82>
	}
	uc = wc;
 800b400:	8a7b      	ldrh	r3, [r7, #18]
 800b402:	60fb      	str	r3, [r7, #12]

#endif
	*str = p;	/* Next read pointer */
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	697a      	ldr	r2, [r7, #20]
 800b408:	601a      	str	r2, [r3, #0]
	return uc;
 800b40a:	68fb      	ldr	r3, [r7, #12]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3718      	adds	r7, #24
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 800b41c:	2300      	movs	r3, #0
 800b41e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	791b      	ldrb	r3, [r3, #4]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d02c      	beq.n	800b482 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	7858      	ldrb	r0, [r3, #1]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b436:	2301      	movs	r3, #1
 800b438:	f7ff f873 	bl	800a522 <disk_write>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d11d      	bne.n	800b47e <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2200      	movs	r2, #0
 800b446:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b450:	1ad2      	subs	r2, r2, r3
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6a1b      	ldr	r3, [r3, #32]
 800b456:	429a      	cmp	r2, r3
 800b458:	d213      	bcs.n	800b482 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	78db      	ldrb	r3, [r3, #3]
 800b45e:	2b02      	cmp	r3, #2
 800b460:	d10f      	bne.n	800b482 <sync_window+0x6e>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	7858      	ldrb	r0, [r3, #1]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6a1b      	ldr	r3, [r3, #32]
 800b474:	441a      	add	r2, r3
 800b476:	2301      	movs	r3, #1
 800b478:	f7ff f853 	bl	800a522 <disk_write>
 800b47c:	e001      	b.n	800b482 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 800b47e:	2301      	movs	r3, #1
 800b480:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 800b482:	7bfb      	ldrb	r3, [r7, #15]
}
 800b484:	4618      	mov	r0, r3
 800b486:	3710      	adds	r7, #16
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b084      	sub	sp, #16
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b496:	2300      	movs	r3, #0
 800b498:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b49e:	683a      	ldr	r2, [r7, #0]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d01b      	beq.n	800b4dc <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f7ff ffb5 	bl	800b414 <sync_window>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b4ae:	7bfb      	ldrb	r3, [r7, #15]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d113      	bne.n	800b4dc <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	7858      	ldrb	r0, [r3, #1]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800b4be:	2301      	movs	r3, #1
 800b4c0:	683a      	ldr	r2, [r7, #0]
 800b4c2:	f7ff f81b 	bl	800a4fc <disk_read>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d004      	beq.n	800b4d6 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 800b4cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b4d0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	683a      	ldr	r2, [r7, #0]
 800b4da:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 800b4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3710      	adds	r7, #16
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
	...

0800b4e8 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 800b4e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b4ec:	b08a      	sub	sp, #40	@ 0x28
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	61f8      	str	r0, [r7, #28]
	FRESULT res;


	res = sync_window(fs);
 800b4f2:	69f8      	ldr	r0, [r7, #28]
 800b4f4:	f7ff ff8e 	bl	800b414 <sync_window>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (res == FR_OK) {
 800b4fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b502:	2b00      	cmp	r3, #0
 800b504:	f040 80c7 	bne.w	800b696 <sync_fs+0x1ae>
		if (fs->fsi_flag == 1) {	/* Allocation changed? */
 800b508:	69fb      	ldr	r3, [r7, #28]
 800b50a:	795b      	ldrb	r3, [r3, #5]
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	f040 80b5 	bne.w	800b67c <sync_fs+0x194>
			fs->fsi_flag = 0;
 800b512:	69fa      	ldr	r2, [r7, #28]
 800b514:	2300      	movs	r3, #0
 800b516:	7153      	strb	r3, [r2, #5]
			if (fs->fs_type == FS_FAT32) {	/* FAT32: Update FSInfo sector */
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	2b03      	cmp	r3, #3
 800b51e:	d141      	bne.n	800b5a4 <sync_fs+0xbc>
				/* Create FSInfo structure */
				memset(fs->win, 0, sizeof fs->win);
 800b520:	69fb      	ldr	r3, [r7, #28]
 800b522:	333c      	adds	r3, #60	@ 0x3c
 800b524:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b528:	2100      	movs	r1, #0
 800b52a:	4618      	mov	r0, r3
 800b52c:	f006 f908 	bl	8011740 <memset>
				st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 800b530:	69fb      	ldr	r3, [r7, #28]
 800b532:	333c      	adds	r3, #60	@ 0x3c
 800b534:	495b      	ldr	r1, [pc, #364]	@ (800b6a4 <sync_fs+0x1bc>)
 800b536:	4618      	mov	r0, r3
 800b538:	f7ff fe29 	bl	800b18e <st_dword>
				st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 800b53c:	69fb      	ldr	r3, [r7, #28]
 800b53e:	333c      	adds	r3, #60	@ 0x3c
 800b540:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b544:	4958      	ldr	r1, [pc, #352]	@ (800b6a8 <sync_fs+0x1c0>)
 800b546:	4618      	mov	r0, r3
 800b548:	f7ff fe21 	bl	800b18e <st_dword>
				st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	333c      	adds	r3, #60	@ 0x3c
 800b550:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b554:	69fb      	ldr	r3, [r7, #28]
 800b556:	699b      	ldr	r3, [r3, #24]
 800b558:	4619      	mov	r1, r3
 800b55a:	4610      	mov	r0, r2
 800b55c:	f7ff fe17 	bl	800b18e <st_dword>
				st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 800b560:	69fb      	ldr	r3, [r7, #28]
 800b562:	333c      	adds	r3, #60	@ 0x3c
 800b564:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b568:	69fb      	ldr	r3, [r7, #28]
 800b56a:	695b      	ldr	r3, [r3, #20]
 800b56c:	4619      	mov	r1, r3
 800b56e:	4610      	mov	r0, r2
 800b570:	f7ff fe0d 	bl	800b18e <st_dword>
				st_dword(fs->win + FSI_TrailSig, 0xAA550000);		/* Trailing signature */
 800b574:	69fb      	ldr	r3, [r7, #28]
 800b576:	333c      	adds	r3, #60	@ 0x3c
 800b578:	f503 73f9 	add.w	r3, r3, #498	@ 0x1f2
 800b57c:	494b      	ldr	r1, [pc, #300]	@ (800b6ac <sync_fs+0x1c4>)
 800b57e:	4618      	mov	r0, r3
 800b580:	f7ff fe05 	bl	800b18e <st_dword>
				disk_write(fs->pdrv, fs->win, fs->winsect = fs->volbase + 1, 1);	/* Write it into the FSInfo sector (Next to VBR) */
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	7858      	ldrb	r0, [r3, #1]
 800b588:	69fb      	ldr	r3, [r7, #28]
 800b58a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800b58e:	69fb      	ldr	r3, [r7, #28]
 800b590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b592:	1c5a      	adds	r2, r3, #1
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	639a      	str	r2, [r3, #56]	@ 0x38
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b59c:	2301      	movs	r3, #1
 800b59e:	f7fe ffc0 	bl	800a522 <disk_write>
 800b5a2:	e06b      	b.n	800b67c <sync_fs+0x194>
			}
#if FF_FS_EXFAT
			else if (fs->fs_type == FS_EXFAT) {	/* exFAT: Update PercInUse field in BPB */
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	2b04      	cmp	r3, #4
 800b5aa:	d167      	bne.n	800b67c <sync_fs+0x194>
				if (disk_read(fs->pdrv, fs->win, fs->winsect = fs->volbase, 1) == RES_OK) {	/* Load VBR */
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	7858      	ldrb	r0, [r3, #1]
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800b5b6:	69fb      	ldr	r3, [r7, #28]
 800b5b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b5ba:	69fb      	ldr	r3, [r7, #28]
 800b5bc:	639a      	str	r2, [r3, #56]	@ 0x38
 800b5be:	69fb      	ldr	r3, [r7, #28]
 800b5c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	f7fe ff9a 	bl	800a4fc <disk_read>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d156      	bne.n	800b67c <sync_fs+0x194>
					BYTE perc_inuse = (fs->free_clst <= fs->n_fatent - 2) ? (BYTE)((QWORD)(fs->n_fatent - 2 - fs->free_clst) * 100 / (fs->n_fatent - 2)) : 0xFF;	/* Precent in use 0-100 or 0xFF(unknown) */
 800b5ce:	69fb      	ldr	r3, [r7, #28]
 800b5d0:	699a      	ldr	r2, [r3, #24]
 800b5d2:	69fb      	ldr	r3, [r7, #28]
 800b5d4:	69db      	ldr	r3, [r3, #28]
 800b5d6:	3b02      	subs	r3, #2
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d836      	bhi.n	800b64a <sync_fs+0x162>
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	69da      	ldr	r2, [r3, #28]
 800b5e0:	69fb      	ldr	r3, [r7, #28]
 800b5e2:	699b      	ldr	r3, [r3, #24]
 800b5e4:	1ad3      	subs	r3, r2, r3
 800b5e6:	3b02      	subs	r3, #2
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	4698      	mov	r8, r3
 800b5ec:	4691      	mov	r9, r2
 800b5ee:	4642      	mov	r2, r8
 800b5f0:	464b      	mov	r3, r9
 800b5f2:	1891      	adds	r1, r2, r2
 800b5f4:	6039      	str	r1, [r7, #0]
 800b5f6:	415b      	adcs	r3, r3
 800b5f8:	607b      	str	r3, [r7, #4]
 800b5fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5fe:	eb12 0408 	adds.w	r4, r2, r8
 800b602:	eb43 0509 	adc.w	r5, r3, r9
 800b606:	f04f 0200 	mov.w	r2, #0
 800b60a:	f04f 0300 	mov.w	r3, #0
 800b60e:	016b      	lsls	r3, r5, #5
 800b610:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800b614:	0162      	lsls	r2, r4, #5
 800b616:	eb14 0a02 	adds.w	sl, r4, r2
 800b61a:	eb45 0b03 	adc.w	fp, r5, r3
 800b61e:	eb1a 0308 	adds.w	r3, sl, r8
 800b622:	613b      	str	r3, [r7, #16]
 800b624:	eb4b 0309 	adc.w	r3, fp, r9
 800b628:	617b      	str	r3, [r7, #20]
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	69db      	ldr	r3, [r3, #28]
 800b62e:	3b02      	subs	r3, #2
 800b630:	2200      	movs	r2, #0
 800b632:	60bb      	str	r3, [r7, #8]
 800b634:	60fa      	str	r2, [r7, #12]
 800b636:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b63a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b63e:	f7f5 faa5 	bl	8000b8c <__aeabi_uldivmod>
 800b642:	4602      	mov	r2, r0
 800b644:	460b      	mov	r3, r1
 800b646:	b2d3      	uxtb	r3, r2
 800b648:	e000      	b.n	800b64c <sync_fs+0x164>
 800b64a:	23ff      	movs	r3, #255	@ 0xff
 800b64c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

					if (fs->win[BPB_PercInUseEx] != perc_inuse) {	/* Write it back into VBR if needed */
 800b650:	69fb      	ldr	r3, [r7, #28]
 800b652:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b656:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d00e      	beq.n	800b67c <sync_fs+0x194>
						fs->win[BPB_PercInUseEx] = perc_inuse;
 800b65e:	69fb      	ldr	r3, [r7, #28]
 800b660:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b664:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
						disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	7858      	ldrb	r0, [r3, #1]
 800b66c:	69fb      	ldr	r3, [r7, #28]
 800b66e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b676:	2301      	movs	r3, #1
 800b678:	f7fe ff53 	bl	800a522 <disk_write>
				}
			}
#endif
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	785b      	ldrb	r3, [r3, #1]
 800b680:	2200      	movs	r2, #0
 800b682:	2100      	movs	r1, #0
 800b684:	4618      	mov	r0, r3
 800b686:	f7fe ff5f 	bl	800a548 <disk_ioctl>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d002      	beq.n	800b696 <sync_fs+0x1ae>
 800b690:	2301      	movs	r3, #1
 800b692:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return res;
 800b696:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3728      	adds	r7, #40	@ 0x28
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b6a4:	41615252 	.word	0x41615252
 800b6a8:	61417272 	.word	0x61417272
 800b6ac:	aa550000 	.word	0xaa550000

0800b6b0 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	3b02      	subs	r3, #2
 800b6be:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	69db      	ldr	r3, [r3, #28]
 800b6c4:	3b02      	subs	r3, #2
 800b6c6:	683a      	ldr	r2, [r7, #0]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d301      	bcc.n	800b6d0 <clst2sect+0x20>
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	e008      	b.n	800b6e2 <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	895b      	ldrh	r3, [r3, #10]
 800b6d8:	4619      	mov	r1, r3
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	fb01 f303 	mul.w	r3, r1, r3
 800b6e0:	4413      	add	r3, r2
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	370c      	adds	r7, #12
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr
	...

0800b6f0 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b088      	sub	sp, #32
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b6fa:	6879      	ldr	r1, [r7, #4]
 800b6fc:	6809      	ldr	r1, [r1, #0]
 800b6fe:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b700:	6839      	ldr	r1, [r7, #0]
 800b702:	2901      	cmp	r1, #1
 800b704:	d904      	bls.n	800b710 <get_fat+0x20>
 800b706:	69b9      	ldr	r1, [r7, #24]
 800b708:	69c9      	ldr	r1, [r1, #28]
 800b70a:	6838      	ldr	r0, [r7, #0]
 800b70c:	4288      	cmp	r0, r1
 800b70e:	d302      	bcc.n	800b716 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b710:	2301      	movs	r3, #1
 800b712:	61fb      	str	r3, [r7, #28]
 800b714:	e10c      	b.n	800b930 <get_fat+0x240>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b716:	f04f 31ff 	mov.w	r1, #4294967295
 800b71a:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800b71c:	69b9      	ldr	r1, [r7, #24]
 800b71e:	7809      	ldrb	r1, [r1, #0]
 800b720:	3901      	subs	r1, #1
 800b722:	2903      	cmp	r1, #3
 800b724:	f200 80f8 	bhi.w	800b918 <get_fat+0x228>
 800b728:	a001      	add	r0, pc, #4	@ (adr r0, 800b730 <get_fat+0x40>)
 800b72a:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b72e:	bf00      	nop
 800b730:	0800b741 	.word	0x0800b741
 800b734:	0800b7c7 	.word	0x0800b7c7
 800b738:	0800b7fd 	.word	0x0800b7fd
 800b73c:	0800b837 	.word	0x0800b837
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	60fb      	str	r3, [r7, #12]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	085b      	lsrs	r3, r3, #1
 800b748:	68fa      	ldr	r2, [r7, #12]
 800b74a:	4413      	add	r3, r2
 800b74c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	0a5b      	lsrs	r3, r3, #9
 800b756:	4413      	add	r3, r2
 800b758:	4619      	mov	r1, r3
 800b75a:	69b8      	ldr	r0, [r7, #24]
 800b75c:	f7ff fe96 	bl	800b48c <move_window>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	f040 80db 	bne.w	800b91e <get_fat+0x22e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	1c5a      	adds	r2, r3, #1
 800b76c:	60fa      	str	r2, [r7, #12]
 800b76e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b772:	69ba      	ldr	r2, [r7, #24]
 800b774:	4413      	add	r3, r2
 800b776:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b77a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b77c:	69bb      	ldr	r3, [r7, #24]
 800b77e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	0a5b      	lsrs	r3, r3, #9
 800b784:	4413      	add	r3, r2
 800b786:	4619      	mov	r1, r3
 800b788:	69b8      	ldr	r0, [r7, #24]
 800b78a:	f7ff fe7f 	bl	800b48c <move_window>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	f040 80c6 	bne.w	800b922 <get_fat+0x232>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b79c:	69ba      	ldr	r2, [r7, #24]
 800b79e:	4413      	add	r3, r2
 800b7a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b7a4:	021b      	lsls	r3, r3, #8
 800b7a6:	68ba      	ldr	r2, [r7, #8]
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	f003 0301 	and.w	r3, r3, #1
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d002      	beq.n	800b7bc <get_fat+0xcc>
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	091b      	lsrs	r3, r3, #4
 800b7ba:	e002      	b.n	800b7c2 <get_fat+0xd2>
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b7c2:	61fb      	str	r3, [r7, #28]
			break;
 800b7c4:	e0b4      	b.n	800b930 <get_fat+0x240>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b7c6:	69bb      	ldr	r3, [r7, #24]
 800b7c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	0a1b      	lsrs	r3, r3, #8
 800b7ce:	4413      	add	r3, r2
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	69b8      	ldr	r0, [r7, #24]
 800b7d4:	f7ff fe5a 	bl	800b48c <move_window>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	f040 80a3 	bne.w	800b926 <get_fat+0x236>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800b7e0:	69bb      	ldr	r3, [r7, #24]
 800b7e2:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	005b      	lsls	r3, r3, #1
 800b7ea:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b7ee:	4413      	add	r3, r2
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7ff fb9b 	bl	800af2c <ld_word>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	61fb      	str	r3, [r7, #28]
			break;
 800b7fa:	e099      	b.n	800b930 <get_fat+0x240>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b7fc:	69bb      	ldr	r3, [r7, #24]
 800b7fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	09db      	lsrs	r3, r3, #7
 800b804:	4413      	add	r3, r2
 800b806:	4619      	mov	r1, r3
 800b808:	69b8      	ldr	r0, [r7, #24]
 800b80a:	f7ff fe3f 	bl	800b48c <move_window>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	f040 808a 	bne.w	800b92a <get_fat+0x23a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800b816:	69bb      	ldr	r3, [r7, #24]
 800b818:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b824:	4413      	add	r3, r2
 800b826:	4618      	mov	r0, r3
 800b828:	f7ff fb98 	bl	800af5c <ld_dword>
 800b82c:	4603      	mov	r3, r0
 800b82e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b832:	61fb      	str	r3, [r7, #28]
			break;
 800b834:	e07c      	b.n	800b930 <get_fat+0x240>
#if FF_FS_EXFAT
		case FS_EXFAT :
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800b836:	6879      	ldr	r1, [r7, #4]
 800b838:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800b83c:	4301      	orrs	r1, r0
 800b83e:	d003      	beq.n	800b848 <get_fat+0x158>
 800b840:	6879      	ldr	r1, [r7, #4]
 800b842:	6889      	ldr	r1, [r1, #8]
 800b844:	2900      	cmp	r1, #0
 800b846:	d103      	bne.n	800b850 <get_fat+0x160>
 800b848:	6879      	ldr	r1, [r7, #4]
 800b84a:	79c9      	ldrb	r1, [r1, #7]
 800b84c:	2900      	cmp	r1, #0
 800b84e:	d160      	bne.n	800b912 <get_fat+0x222>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800b850:	6879      	ldr	r1, [r7, #4]
 800b852:	6889      	ldr	r1, [r1, #8]
 800b854:	6838      	ldr	r0, [r7, #0]
 800b856:	1a41      	subs	r1, r0, r1
 800b858:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800b85a:	6879      	ldr	r1, [r7, #4]
 800b85c:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800b860:	1e42      	subs	r2, r0, #1
 800b862:	f141 33ff 	adc.w	r3, r1, #4294967295
 800b866:	f04f 0000 	mov.w	r0, #0
 800b86a:	f04f 0100 	mov.w	r1, #0
 800b86e:	0a50      	lsrs	r0, r2, #9
 800b870:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800b874:	0a59      	lsrs	r1, r3, #9
 800b876:	4602      	mov	r2, r0
 800b878:	69bb      	ldr	r3, [r7, #24]
 800b87a:	895b      	ldrh	r3, [r3, #10]
 800b87c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b880:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	79db      	ldrb	r3, [r3, #7]
 800b886:	2b02      	cmp	r3, #2
 800b888:	d10e      	bne.n	800b8a8 <get_fat+0x1b8>
 800b88a:	697a      	ldr	r2, [r7, #20]
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d80a      	bhi.n	800b8a8 <get_fat+0x1b8>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 800b892:	697a      	ldr	r2, [r7, #20]
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	429a      	cmp	r2, r3
 800b898:	d002      	beq.n	800b8a0 <get_fat+0x1b0>
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	3301      	adds	r3, #1
 800b89e:	e001      	b.n	800b8a4 <get_fat+0x1b4>
 800b8a0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800b8a4:	61fb      	str	r3, [r7, #28]
					break;
 800b8a6:	e043      	b.n	800b930 <get_fat+0x240>
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	79db      	ldrb	r3, [r3, #7]
 800b8ac:	2b03      	cmp	r3, #3
 800b8ae:	d108      	bne.n	800b8c2 <get_fat+0x1d2>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	699b      	ldr	r3, [r3, #24]
 800b8b4:	697a      	ldr	r2, [r7, #20]
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d203      	bcs.n	800b8c2 <get_fat+0x1d2>
					val = clst + 1; 	/* Generate the value */
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	3301      	adds	r3, #1
 800b8be:	61fb      	str	r3, [r7, #28]
					break;
 800b8c0:	e036      	b.n	800b930 <get_fat+0x240>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	79db      	ldrb	r3, [r3, #7]
 800b8c6:	2b02      	cmp	r3, #2
 800b8c8:	d023      	beq.n	800b912 <get_fat+0x222>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	69db      	ldr	r3, [r3, #28]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d003      	beq.n	800b8da <get_fat+0x1ea>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800b8d2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800b8d6:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800b8d8:	e02a      	b.n	800b930 <get_fat+0x240>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	09db      	lsrs	r3, r3, #7
 800b8e2:	4413      	add	r3, r2
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	69b8      	ldr	r0, [r7, #24]
 800b8e8:	f7ff fdd0 	bl	800b48c <move_window>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d11d      	bne.n	800b92e <get_fat+0x23e>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800b8f2:	69bb      	ldr	r3, [r7, #24]
 800b8f4:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	009b      	lsls	r3, r3, #2
 800b8fc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b900:	4413      	add	r3, r2
 800b902:	4618      	mov	r0, r3
 800b904:	f7ff fb2a 	bl	800af5c <ld_dword>
 800b908:	4603      	mov	r3, r0
 800b90a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b90e:	61fb      	str	r3, [r7, #28]
					break;
 800b910:	e00e      	b.n	800b930 <get_fat+0x240>
				}
			}
			val = 1;	/* Internal error */
 800b912:	2301      	movs	r3, #1
 800b914:	61fb      	str	r3, [r7, #28]
			break;
 800b916:	e00b      	b.n	800b930 <get_fat+0x240>
#endif
		default:
			val = 1;	/* Internal error */
 800b918:	2301      	movs	r3, #1
 800b91a:	61fb      	str	r3, [r7, #28]
 800b91c:	e008      	b.n	800b930 <get_fat+0x240>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b91e:	bf00      	nop
 800b920:	e006      	b.n	800b930 <get_fat+0x240>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b922:	bf00      	nop
 800b924:	e004      	b.n	800b930 <get_fat+0x240>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b926:	bf00      	nop
 800b928:	e002      	b.n	800b930 <get_fat+0x240>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b92a:	bf00      	nop
 800b92c:	e000      	b.n	800b930 <get_fat+0x240>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b92e:	bf00      	nop
		}
	}

	return val;
 800b930:	69fb      	ldr	r3, [r7, #28]
}
 800b932:	4618      	mov	r0, r3
 800b934:	3720      	adds	r7, #32
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop

0800b93c <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b93c:	b590      	push	{r4, r7, lr}
 800b93e:	b089      	sub	sp, #36	@ 0x24
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b948:	2302      	movs	r3, #2
 800b94a:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	2b01      	cmp	r3, #1
 800b950:	f240 80dd 	bls.w	800bb0e <put_fat+0x1d2>
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	69db      	ldr	r3, [r3, #28]
 800b958:	68ba      	ldr	r2, [r7, #8]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	f080 80d7 	bcs.w	800bb0e <put_fat+0x1d2>
		switch (fs->fs_type) {
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	2b04      	cmp	r3, #4
 800b966:	f300 80d2 	bgt.w	800bb0e <put_fat+0x1d2>
 800b96a:	2b03      	cmp	r3, #3
 800b96c:	f280 8093 	bge.w	800ba96 <put_fat+0x15a>
 800b970:	2b01      	cmp	r3, #1
 800b972:	d002      	beq.n	800b97a <put_fat+0x3e>
 800b974:	2b02      	cmp	r3, #2
 800b976:	d06e      	beq.n	800ba56 <put_fat+0x11a>
 800b978:	e0c9      	b.n	800bb0e <put_fat+0x1d2>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	61bb      	str	r3, [r7, #24]
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	085b      	lsrs	r3, r3, #1
 800b982:	69ba      	ldr	r2, [r7, #24]
 800b984:	4413      	add	r3, r2
 800b986:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	0a5b      	lsrs	r3, r3, #9
 800b990:	4413      	add	r3, r2
 800b992:	4619      	mov	r1, r3
 800b994:	68f8      	ldr	r0, [r7, #12]
 800b996:	f7ff fd79 	bl	800b48c <move_window>
 800b99a:	4603      	mov	r3, r0
 800b99c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b99e:	7ffb      	ldrb	r3, [r7, #31]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f040 80ad 	bne.w	800bb00 <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800b9ac:	69bb      	ldr	r3, [r7, #24]
 800b9ae:	1c59      	adds	r1, r3, #1
 800b9b0:	61b9      	str	r1, [r7, #24]
 800b9b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9b6:	4413      	add	r3, r2
 800b9b8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	f003 0301 	and.w	r3, r3, #1
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d00d      	beq.n	800b9e0 <put_fat+0xa4>
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	b25b      	sxtb	r3, r3
 800b9ca:	f003 030f 	and.w	r3, r3, #15
 800b9ce:	b25a      	sxtb	r2, r3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	011b      	lsls	r3, r3, #4
 800b9d6:	b25b      	sxtb	r3, r3
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	b25b      	sxtb	r3, r3
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	e001      	b.n	800b9e4 <put_fat+0xa8>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	697a      	ldr	r2, [r7, #20]
 800b9e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b9f2:	69bb      	ldr	r3, [r7, #24]
 800b9f4:	0a5b      	lsrs	r3, r3, #9
 800b9f6:	4413      	add	r3, r2
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	68f8      	ldr	r0, [r7, #12]
 800b9fc:	f7ff fd46 	bl	800b48c <move_window>
 800ba00:	4603      	mov	r3, r0
 800ba02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ba04:	7ffb      	ldrb	r3, [r7, #31]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d17c      	bne.n	800bb04 <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800ba10:	69bb      	ldr	r3, [r7, #24]
 800ba12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba16:	4413      	add	r3, r2
 800ba18:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	f003 0301 	and.w	r3, r3, #1
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d003      	beq.n	800ba2c <put_fat+0xf0>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	091b      	lsrs	r3, r3, #4
 800ba28:	b2db      	uxtb	r3, r3
 800ba2a:	e00e      	b.n	800ba4a <put_fat+0x10e>
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	b25b      	sxtb	r3, r3
 800ba32:	f023 030f 	bic.w	r3, r3, #15
 800ba36:	b25a      	sxtb	r2, r3
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	0a1b      	lsrs	r3, r3, #8
 800ba3c:	b25b      	sxtb	r3, r3
 800ba3e:	f003 030f 	and.w	r3, r3, #15
 800ba42:	b25b      	sxtb	r3, r3
 800ba44:	4313      	orrs	r3, r2
 800ba46:	b25b      	sxtb	r3, r3
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	697a      	ldr	r2, [r7, #20]
 800ba4c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2201      	movs	r2, #1
 800ba52:	711a      	strb	r2, [r3, #4]
			break;
 800ba54:	e05b      	b.n	800bb0e <put_fat+0x1d2>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	0a1b      	lsrs	r3, r3, #8
 800ba5e:	4413      	add	r3, r2
 800ba60:	4619      	mov	r1, r3
 800ba62:	68f8      	ldr	r0, [r7, #12]
 800ba64:	f7ff fd12 	bl	800b48c <move_window>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ba6c:	7ffb      	ldrb	r3, [r7, #31]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d14a      	bne.n	800bb08 <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	005b      	lsls	r3, r3, #1
 800ba7c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ba80:	4413      	add	r3, r2
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	b292      	uxth	r2, r2
 800ba86:	4611      	mov	r1, r2
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7ff fb65 	bl	800b158 <st_word>
			fs->wflag = 1;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2201      	movs	r2, #1
 800ba92:	711a      	strb	r2, [r3, #4]
			break;
 800ba94:	e03b      	b.n	800bb0e <put_fat+0x1d2>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	09db      	lsrs	r3, r3, #7
 800ba9e:	4413      	add	r3, r2
 800baa0:	4619      	mov	r1, r3
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f7ff fcf2 	bl	800b48c <move_window>
 800baa8:	4603      	mov	r3, r0
 800baaa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800baac:	7ffb      	ldrb	r3, [r7, #31]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d12c      	bne.n	800bb0c <put_fat+0x1d0>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	2b04      	cmp	r3, #4
 800bab8:	d012      	beq.n	800bae0 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	009b      	lsls	r3, r3, #2
 800baca:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bace:	4413      	add	r3, r2
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7ff fa43 	bl	800af5c <ld_dword>
 800bad6:	4603      	mov	r3, r0
 800bad8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800badc:	4323      	orrs	r3, r4
 800bade:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800baee:	4413      	add	r3, r2
 800baf0:	6879      	ldr	r1, [r7, #4]
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7ff fb4b 	bl	800b18e <st_dword>
			fs->wflag = 1;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2201      	movs	r2, #1
 800bafc:	711a      	strb	r2, [r3, #4]
			break;
 800bafe:	e006      	b.n	800bb0e <put_fat+0x1d2>
			if (res != FR_OK) break;
 800bb00:	bf00      	nop
 800bb02:	e004      	b.n	800bb0e <put_fat+0x1d2>
			if (res != FR_OK) break;
 800bb04:	bf00      	nop
 800bb06:	e002      	b.n	800bb0e <put_fat+0x1d2>
			if (res != FR_OK) break;
 800bb08:	bf00      	nop
 800bb0a:	e000      	b.n	800bb0e <put_fat+0x1d2>
			if (res != FR_OK) break;
 800bb0c:	bf00      	nop
		}
	}
	return res;
 800bb0e:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3724      	adds	r7, #36	@ 0x24
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd90      	pop	{r4, r7, pc}

0800bb18 <find_bitmap>:
static DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b08a      	sub	sp, #40	@ 0x28
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	60b9      	str	r1, [r7, #8]
 800bb22:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	3b02      	subs	r3, #2
 800bb28:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	69db      	ldr	r3, [r3, #28]
 800bb2e:	3b02      	subs	r3, #2
 800bb30:	68ba      	ldr	r2, [r7, #8]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d301      	bcc.n	800bb3a <find_bitmap+0x22>
 800bb36:	2300      	movs	r3, #0
 800bb38:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	61fb      	str	r3, [r7, #28]
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	61bb      	str	r3, [r7, #24]
 800bb42:	2300      	movs	r3, #0
 800bb44:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bb4a:	69fb      	ldr	r3, [r7, #28]
 800bb4c:	0b1b      	lsrs	r3, r3, #12
 800bb4e:	4413      	add	r3, r2
 800bb50:	4619      	mov	r1, r3
 800bb52:	68f8      	ldr	r0, [r7, #12]
 800bb54:	f7ff fc9a 	bl	800b48c <move_window>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d002      	beq.n	800bb64 <find_bitmap+0x4c>
 800bb5e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb62:	e051      	b.n	800bc08 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	08db      	lsrs	r3, r3, #3
 800bb68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb6c:	623b      	str	r3, [r7, #32]
 800bb6e:	69fb      	ldr	r3, [r7, #28]
 800bb70:	f003 0307 	and.w	r3, r3, #7
 800bb74:	2201      	movs	r2, #1
 800bb76:	fa02 f303 	lsl.w	r3, r2, r3
 800bb7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	6a3b      	ldr	r3, [r7, #32]
 800bb82:	4413      	add	r3, r2
 800bb84:	333c      	adds	r3, #60	@ 0x3c
 800bb86:	781a      	ldrb	r2, [r3, #0]
 800bb88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb8c:	4013      	ands	r3, r2
 800bb8e:	74fb      	strb	r3, [r7, #19]
 800bb90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb94:	005b      	lsls	r3, r3, #1
 800bb96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	61fb      	str	r3, [r7, #28]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	69db      	ldr	r3, [r3, #28]
 800bba4:	3b02      	subs	r3, #2
 800bba6:	69fa      	ldr	r2, [r7, #28]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d307      	bcc.n	800bbbc <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800bbac:	2300      	movs	r3, #0
 800bbae:	61fb      	str	r3, [r7, #28]
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bbb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bbba:	623b      	str	r3, [r7, #32]
				}
				if (bv == 0) {	/* Is it a free cluster? */
 800bbbc:	7cfb      	ldrb	r3, [r7, #19]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d109      	bne.n	800bbd6 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	617b      	str	r3, [r7, #20]
 800bbc8:	697a      	ldr	r2, [r7, #20]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d106      	bne.n	800bbde <find_bitmap+0xc6>
 800bbd0:	69bb      	ldr	r3, [r7, #24]
 800bbd2:	3302      	adds	r3, #2
 800bbd4:	e018      	b.n	800bc08 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800bbd6:	69fb      	ldr	r3, [r7, #28]
 800bbd8:	61bb      	str	r3, [r7, #24]
 800bbda:	2300      	movs	r3, #0
 800bbdc:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800bbde:	69fa      	ldr	r2, [r7, #28]
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d101      	bne.n	800bbea <find_bitmap+0xd2>
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	e00e      	b.n	800bc08 <find_bitmap+0xf0>
			} while (bm != 0);
 800bbea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d1c5      	bne.n	800bb7e <find_bitmap+0x66>
			bm = 1;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 800bbf8:	6a3b      	ldr	r3, [r7, #32]
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	623b      	str	r3, [r7, #32]
 800bbfe:	6a3b      	ldr	r3, [r7, #32]
 800bc00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc04:	d3bb      	bcc.n	800bb7e <find_bitmap+0x66>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 800bc06:	e79e      	b.n	800bb46 <find_bitmap+0x2e>
	}
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3728      	adds	r7, #40	@ 0x28
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <change_bitmap>:
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b088      	sub	sp, #32
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	60b9      	str	r1, [r7, #8]
 800bc1a:	607a      	str	r2, [r7, #4]
 800bc1c:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	LBA_t sect;


	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	3b02      	subs	r3, #2
 800bc22:	60bb      	str	r3, [r7, #8]
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	0b1b      	lsrs	r3, r3, #12
 800bc2c:	4413      	add	r3, r2
 800bc2e:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	08db      	lsrs	r3, r3, #3
 800bc34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc38:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	f003 0307 	and.w	r3, r3, #7
 800bc40:	2201      	movs	r2, #1
 800bc42:	fa02 f303 	lsl.w	r3, r2, r3
 800bc46:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	1c5a      	adds	r2, r3, #1
 800bc4c:	617a      	str	r2, [r7, #20]
 800bc4e:	4619      	mov	r1, r3
 800bc50:	68f8      	ldr	r0, [r7, #12]
 800bc52:	f7ff fc1b 	bl	800b48c <move_window>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d001      	beq.n	800bc60 <change_bitmap+0x50>
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	e03d      	b.n	800bcdc <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800bc60:	68fa      	ldr	r2, [r7, #12]
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	4413      	add	r3, r2
 800bc66:	333c      	adds	r3, #60	@ 0x3c
 800bc68:	781a      	ldrb	r2, [r3, #0]
 800bc6a:	7ffb      	ldrb	r3, [r7, #31]
 800bc6c:	4013      	ands	r3, r2
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	bf14      	ite	ne
 800bc74:	2301      	movne	r3, #1
 800bc76:	2300      	moveq	r3, #0
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d101      	bne.n	800bc86 <change_bitmap+0x76>
 800bc82:	2302      	movs	r3, #2
 800bc84:	e02a      	b.n	800bcdc <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800bc86:	68fa      	ldr	r2, [r7, #12]
 800bc88:	69bb      	ldr	r3, [r7, #24]
 800bc8a:	4413      	add	r3, r2
 800bc8c:	333c      	adds	r3, #60	@ 0x3c
 800bc8e:	781a      	ldrb	r2, [r3, #0]
 800bc90:	7ffb      	ldrb	r3, [r7, #31]
 800bc92:	4053      	eors	r3, r2
 800bc94:	b2d9      	uxtb	r1, r3
 800bc96:	68fa      	ldr	r2, [r7, #12]
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	4413      	add	r3, r2
 800bc9c:	333c      	adds	r3, #60	@ 0x3c
 800bc9e:	460a      	mov	r2, r1
 800bca0:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2201      	movs	r2, #1
 800bca6:	711a      	strb	r2, [r3, #4]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	3b01      	subs	r3, #1
 800bcac:	607b      	str	r3, [r7, #4]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d101      	bne.n	800bcb8 <change_bitmap+0xa8>
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	e011      	b.n	800bcdc <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800bcb8:	7ffb      	ldrb	r3, [r7, #31]
 800bcba:	005b      	lsls	r3, r3, #1
 800bcbc:	77fb      	strb	r3, [r7, #31]
 800bcbe:	7ffb      	ldrb	r3, [r7, #31]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d1cd      	bne.n	800bc60 <change_bitmap+0x50>
			bm = 1;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800bcc8:	69bb      	ldr	r3, [r7, #24]
 800bcca:	3301      	adds	r3, #1
 800bccc:	61bb      	str	r3, [r7, #24]
 800bcce:	69bb      	ldr	r3, [r7, #24]
 800bcd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bcd4:	d3c4      	bcc.n	800bc60 <change_bitmap+0x50>
		i = 0;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800bcda:	e7b5      	b.n	800bc48 <change_bitmap+0x38>
	}
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3720      	adds	r7, #32
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <fill_first_frag>:
/*---------------------------------------------*/

static FRESULT fill_first_frag (
	FFOBJID* obj	/* Pointer to the corresponding object */
)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b086      	sub	sp, #24
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;


	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	79db      	ldrb	r3, [r3, #7]
 800bcf0:	2b03      	cmp	r3, #3
 800bcf2:	d121      	bne.n	800bd38 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	689b      	ldr	r3, [r3, #8]
 800bcf8:	617b      	str	r3, [r7, #20]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	699b      	ldr	r3, [r3, #24]
 800bcfe:	613b      	str	r3, [r7, #16]
 800bd00:	e014      	b.n	800bd2c <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6818      	ldr	r0, [r3, #0]
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	3301      	adds	r3, #1
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	6979      	ldr	r1, [r7, #20]
 800bd0e:	f7ff fe15 	bl	800b93c <put_fat>
 800bd12:	4603      	mov	r3, r0
 800bd14:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800bd16:	7bfb      	ldrb	r3, [r7, #15]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d001      	beq.n	800bd20 <fill_first_frag+0x3c>
 800bd1c:	7bfb      	ldrb	r3, [r7, #15]
 800bd1e:	e00c      	b.n	800bd3a <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	3301      	adds	r3, #1
 800bd24:	617b      	str	r3, [r7, #20]
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	3b01      	subs	r3, #1
 800bd2a:	613b      	str	r3, [r7, #16]
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d1e7      	bne.n	800bd02 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2200      	movs	r2, #0
 800bd36:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800bd38:	2300      	movs	r3, #0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3718      	adds	r7, #24
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <fill_last_frag>:
static FRESULT fill_last_frag (
	FFOBJID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,		/* Last cluster of the fragment */
	DWORD term		/* Value to set the last FAT entry */
)
{
 800bd42:	b580      	push	{r7, lr}
 800bd44:	b086      	sub	sp, #24
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	60f8      	str	r0, [r7, #12]
 800bd4a:	60b9      	str	r1, [r7, #8]
 800bd4c:	607a      	str	r2, [r7, #4]
	FRESULT res;


	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800bd4e:	e020      	b.n	800bd92 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	6818      	ldr	r0, [r3, #0]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	69db      	ldr	r3, [r3, #28]
 800bd58:	68ba      	ldr	r2, [r7, #8]
 800bd5a:	1ad3      	subs	r3, r2, r3
 800bd5c:	1c59      	adds	r1, r3, #1
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	69db      	ldr	r3, [r3, #28]
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	d905      	bls.n	800bd72 <fill_last_frag+0x30>
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	69db      	ldr	r3, [r3, #28]
 800bd6a:	68ba      	ldr	r2, [r7, #8]
 800bd6c:	1ad3      	subs	r3, r2, r3
 800bd6e:	3302      	adds	r3, #2
 800bd70:	e000      	b.n	800bd74 <fill_last_frag+0x32>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	461a      	mov	r2, r3
 800bd76:	f7ff fde1 	bl	800b93c <put_fat>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800bd7e:	7dfb      	ldrb	r3, [r7, #23]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d001      	beq.n	800bd88 <fill_last_frag+0x46>
 800bd84:	7dfb      	ldrb	r3, [r7, #23]
 800bd86:	e009      	b.n	800bd9c <fill_last_frag+0x5a>
		obj->n_frag--;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	69db      	ldr	r3, [r3, #28]
 800bd8c:	1e5a      	subs	r2, r3, #1
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	69db      	ldr	r3, [r3, #28]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d1da      	bne.n	800bd50 <fill_last_frag+0xe>
	}
	return FR_OK;
 800bd9a:	2300      	movs	r3, #0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3718      	adds	r7, #24
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b08a      	sub	sp, #40	@ 0x28
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	61bb      	str	r3, [r7, #24]
#if FF_FS_EXFAT || FF_USE_TRIM
	DWORD scl = clst, ecl = clst;
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	623b      	str	r3, [r7, #32]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d904      	bls.n	800bdd2 <remove_chain+0x2e>
 800bdc8:	69bb      	ldr	r3, [r7, #24]
 800bdca:	69db      	ldr	r3, [r3, #28]
 800bdcc:	68ba      	ldr	r2, [r7, #8]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d301      	bcc.n	800bdd6 <remove_chain+0x32>
 800bdd2:	2302      	movs	r3, #2
 800bdd4:	e0c4      	b.n	800bf60 <remove_chain+0x1bc>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d014      	beq.n	800be06 <remove_chain+0x62>
 800bddc:	69bb      	ldr	r3, [r7, #24]
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	2b04      	cmp	r3, #4
 800bde2:	d103      	bne.n	800bdec <remove_chain+0x48>
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	79db      	ldrb	r3, [r3, #7]
 800bde8:	2b02      	cmp	r3, #2
 800bdea:	d00c      	beq.n	800be06 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bdec:	f04f 32ff 	mov.w	r2, #4294967295
 800bdf0:	6879      	ldr	r1, [r7, #4]
 800bdf2:	69b8      	ldr	r0, [r7, #24]
 800bdf4:	f7ff fda2 	bl	800b93c <put_fat>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bdfc:	7ffb      	ldrb	r3, [r7, #31]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d001      	beq.n	800be06 <remove_chain+0x62>
 800be02:	7ffb      	ldrb	r3, [r7, #31]
 800be04:	e0ac      	b.n	800bf60 <remove_chain+0x1bc>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800be06:	68b9      	ldr	r1, [r7, #8]
 800be08:	68f8      	ldr	r0, [r7, #12]
 800be0a:	f7ff fc71 	bl	800b6f0 <get_fat>
 800be0e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d055      	beq.n	800bec2 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d101      	bne.n	800be20 <remove_chain+0x7c>
 800be1c:	2302      	movs	r3, #2
 800be1e:	e09f      	b.n	800bf60 <remove_chain+0x1bc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be26:	d101      	bne.n	800be2c <remove_chain+0x88>
 800be28:	2301      	movs	r3, #1
 800be2a:	e099      	b.n	800bf60 <remove_chain+0x1bc>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	2b04      	cmp	r3, #4
 800be32:	d00b      	beq.n	800be4c <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800be34:	2200      	movs	r2, #0
 800be36:	68b9      	ldr	r1, [r7, #8]
 800be38:	69b8      	ldr	r0, [r7, #24]
 800be3a:	f7ff fd7f 	bl	800b93c <put_fat>
 800be3e:	4603      	mov	r3, r0
 800be40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800be42:	7ffb      	ldrb	r3, [r7, #31]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d001      	beq.n	800be4c <remove_chain+0xa8>
 800be48:	7ffb      	ldrb	r3, [r7, #31]
 800be4a:	e089      	b.n	800bf60 <remove_chain+0x1bc>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update allocation information if it is valid */
 800be4c:	69bb      	ldr	r3, [r7, #24]
 800be4e:	699a      	ldr	r2, [r3, #24]
 800be50:	69bb      	ldr	r3, [r7, #24]
 800be52:	69db      	ldr	r3, [r3, #28]
 800be54:	3b02      	subs	r3, #2
 800be56:	429a      	cmp	r2, r3
 800be58:	d20b      	bcs.n	800be72 <remove_chain+0xce>
			fs->free_clst++;
 800be5a:	69bb      	ldr	r3, [r7, #24]
 800be5c:	699b      	ldr	r3, [r3, #24]
 800be5e:	1c5a      	adds	r2, r3, #1
 800be60:	69bb      	ldr	r3, [r7, #24]
 800be62:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	795b      	ldrb	r3, [r3, #5]
 800be68:	f043 0301 	orr.w	r3, r3, #1
 800be6c:	b2da      	uxtb	r2, r3
 800be6e:	69bb      	ldr	r3, [r7, #24]
 800be70:	715a      	strb	r2, [r3, #5]
		}
#if FF_FS_EXFAT || FF_USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800be72:	6a3b      	ldr	r3, [r7, #32]
 800be74:	3301      	adds	r3, #1
 800be76:	697a      	ldr	r2, [r7, #20]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d102      	bne.n	800be82 <remove_chain+0xde>
			ecl = nxt;
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	623b      	str	r3, [r7, #32]
 800be80:	e017      	b.n	800beb2 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800be82:	69bb      	ldr	r3, [r7, #24]
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	2b04      	cmp	r3, #4
 800be88:	d10f      	bne.n	800beaa <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800be8a:	6a3a      	ldr	r2, [r7, #32]
 800be8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be8e:	1ad3      	subs	r3, r2, r3
 800be90:	1c5a      	adds	r2, r3, #1
 800be92:	2300      	movs	r3, #0
 800be94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800be96:	69b8      	ldr	r0, [r7, #24]
 800be98:	f7ff feba 	bl	800bc10 <change_bitmap>
 800be9c:	4603      	mov	r3, r0
 800be9e:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800bea0:	7ffb      	ldrb	r3, [r7, #31]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d001      	beq.n	800beaa <remove_chain+0x106>
 800bea6:	7ffb      	ldrb	r3, [r7, #31]
 800bea8:	e05a      	b.n	800bf60 <remove_chain+0x1bc>
#if FF_USE_TRIM
			rt[0] = clst2sect(fs, scl);					/* Start of data area to be freed */
			rt[1] = clst2sect(fs, ecl) + fs->csize - 1;	/* End of data area to be freed */
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	623b      	str	r3, [r7, #32]
 800beae:	6a3b      	ldr	r3, [r7, #32]
 800beb0:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat until the last link */
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	69db      	ldr	r3, [r3, #28]
 800beba:	68ba      	ldr	r2, [r7, #8]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	d3a2      	bcc.n	800be06 <remove_chain+0x62>
 800bec0:	e000      	b.n	800bec4 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800bec2:	bf00      	nop

#if FF_FS_EXFAT
	/* Some post processes for chain status */
	if (fs->fs_type == FS_EXFAT) {
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	2b04      	cmp	r3, #4
 800beca:	d148      	bne.n	800bf5e <remove_chain+0x1ba>
		if (pclst == 0) {	/* Has the entire chain been removed? */
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d103      	bne.n	800beda <remove_chain+0x136>
			obj->stat = 0;		/* Change the chain status 'initial' */
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2200      	movs	r2, #0
 800bed6:	71da      	strb	r2, [r3, #7]
 800bed8:	e041      	b.n	800bf5e <remove_chain+0x1ba>
		} else {
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	79db      	ldrb	r3, [r3, #7]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d129      	bne.n	800bf36 <remove_chain+0x192>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	689b      	ldr	r3, [r3, #8]
 800bee6:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 800bee8:	e017      	b.n	800bf1a <remove_chain+0x176>
					nxt = get_fat(obj, clst);
 800beea:	68b9      	ldr	r1, [r7, #8]
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	f7ff fbff 	bl	800b6f0 <get_fat>
 800bef2:	6178      	str	r0, [r7, #20]
					if (nxt < 2) return FR_INT_ERR;
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d801      	bhi.n	800befe <remove_chain+0x15a>
 800befa:	2302      	movs	r3, #2
 800befc:	e030      	b.n	800bf60 <remove_chain+0x1bc>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf04:	d101      	bne.n	800bf0a <remove_chain+0x166>
 800bf06:	2301      	movs	r3, #1
 800bf08:	e02a      	b.n	800bf60 <remove_chain+0x1bc>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	697a      	ldr	r2, [r7, #20]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d107      	bne.n	800bf24 <remove_chain+0x180>
					clst++;
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	3301      	adds	r3, #1
 800bf18:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 800bf1a:	68ba      	ldr	r2, [r7, #8]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d1e3      	bne.n	800beea <remove_chain+0x146>
 800bf22:	e000      	b.n	800bf26 <remove_chain+0x182>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 800bf24:	bf00      	nop
				}
				if (clst == pclst) {	/* Has the chain got contiguous again? */
 800bf26:	68ba      	ldr	r2, [r7, #8]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d117      	bne.n	800bf5e <remove_chain+0x1ba>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2202      	movs	r2, #2
 800bf32:	71da      	strb	r2, [r3, #7]
 800bf34:	e013      	b.n	800bf5e <remove_chain+0x1ba>
				}
			} else {
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	79db      	ldrb	r3, [r3, #7]
 800bf3a:	2b03      	cmp	r3, #3
 800bf3c:	d10f      	bne.n	800bf5e <remove_chain+0x1ba>
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	689b      	ldr	r3, [r3, #8]
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d30a      	bcc.n	800bf5e <remove_chain+0x1ba>
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	689a      	ldr	r2, [r3, #8]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	699b      	ldr	r3, [r3, #24]
 800bf50:	4413      	add	r3, r2
 800bf52:	687a      	ldr	r2, [r7, #4]
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d802      	bhi.n	800bf5e <remove_chain+0x1ba>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2202      	movs	r2, #2
 800bf5c:	71da      	strb	r2, [r3, #7]
				}
			}
		}
	}
#endif
	return FR_OK;
 800bf5e:	2300      	movs	r3, #0
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3728      	adds	r7, #40	@ 0x28
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}

0800bf68 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b088      	sub	sp, #32
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d10d      	bne.n	800bf9a <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	695b      	ldr	r3, [r3, #20]
 800bf82:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d004      	beq.n	800bf94 <create_chain+0x2c>
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	69db      	ldr	r3, [r3, #28]
 800bf8e:	69ba      	ldr	r2, [r7, #24]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d31b      	bcc.n	800bfcc <create_chain+0x64>
 800bf94:	2301      	movs	r3, #1
 800bf96:	61bb      	str	r3, [r7, #24]
 800bf98:	e018      	b.n	800bfcc <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bf9a:	6839      	ldr	r1, [r7, #0]
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f7ff fba7 	bl	800b6f0 <get_fat>
 800bfa2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2b01      	cmp	r3, #1
 800bfa8:	d801      	bhi.n	800bfae <create_chain+0x46>
 800bfaa:	2301      	movs	r3, #1
 800bfac:	e117      	b.n	800c1de <create_chain+0x276>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfb4:	d101      	bne.n	800bfba <create_chain+0x52>
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	e111      	b.n	800c1de <create_chain+0x276>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	69db      	ldr	r3, [r3, #28]
 800bfbe:	68fa      	ldr	r2, [r7, #12]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d201      	bcs.n	800bfc8 <create_chain+0x60>
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	e10a      	b.n	800c1de <create_chain+0x276>
		scl = clst;							/* Cluster to start to find */
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	699b      	ldr	r3, [r3, #24]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d101      	bne.n	800bfd8 <create_chain+0x70>
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	e102      	b.n	800c1de <create_chain+0x276>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	2b04      	cmp	r3, #4
 800bfde:	d165      	bne.n	800c0ac <create_chain+0x144>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	69b9      	ldr	r1, [r7, #24]
 800bfe4:	6938      	ldr	r0, [r7, #16]
 800bfe6:	f7ff fd97 	bl	800bb18 <find_bitmap>
 800bfea:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800bfec:	69fb      	ldr	r3, [r7, #28]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d003      	beq.n	800bffa <create_chain+0x92>
 800bff2:	69fb      	ldr	r3, [r7, #28]
 800bff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff8:	d101      	bne.n	800bffe <create_chain+0x96>
 800bffa:	69fb      	ldr	r3, [r7, #28]
 800bffc:	e0ef      	b.n	800c1de <create_chain+0x276>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800bffe:	2301      	movs	r3, #1
 800c000:	2201      	movs	r2, #1
 800c002:	69f9      	ldr	r1, [r7, #28]
 800c004:	6938      	ldr	r0, [r7, #16]
 800c006:	f7ff fe03 	bl	800bc10 <change_bitmap>
 800c00a:	4603      	mov	r3, r0
 800c00c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800c00e:	7dfb      	ldrb	r3, [r7, #23]
 800c010:	2b02      	cmp	r3, #2
 800c012:	d101      	bne.n	800c018 <create_chain+0xb0>
 800c014:	2301      	movs	r3, #1
 800c016:	e0e2      	b.n	800c1de <create_chain+0x276>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800c018:	7dfb      	ldrb	r3, [r7, #23]
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d102      	bne.n	800c024 <create_chain+0xbc>
 800c01e:	f04f 33ff 	mov.w	r3, #4294967295
 800c022:	e0dc      	b.n	800c1de <create_chain+0x276>
		if (clst == 0) {							/* Is it a new chain? */
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d103      	bne.n	800c032 <create_chain+0xca>
			obj->stat = 2;							/* Set status 'contiguous' */
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2202      	movs	r2, #2
 800c02e:	71da      	strb	r2, [r3, #7]
 800c030:	e011      	b.n	800c056 <create_chain+0xee>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	79db      	ldrb	r3, [r3, #7]
 800c036:	2b02      	cmp	r3, #2
 800c038:	d10d      	bne.n	800c056 <create_chain+0xee>
 800c03a:	69bb      	ldr	r3, [r7, #24]
 800c03c:	3301      	adds	r3, #1
 800c03e:	69fa      	ldr	r2, [r7, #28]
 800c040:	429a      	cmp	r2, r3
 800c042:	d008      	beq.n	800c056 <create_chain+0xee>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	69ba      	ldr	r2, [r7, #24]
 800c04a:	1ad2      	subs	r2, r2, r3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2203      	movs	r2, #3
 800c054:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	79db      	ldrb	r3, [r3, #7]
 800c05a:	2b02      	cmp	r3, #2
 800c05c:	f000 8098 	beq.w	800c190 <create_chain+0x228>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	3301      	adds	r3, #1
 800c064:	69fa      	ldr	r2, [r7, #28]
 800c066:	429a      	cmp	r2, r3
 800c068:	d10b      	bne.n	800c082 <create_chain+0x11a>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	69db      	ldr	r3, [r3, #28]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d003      	beq.n	800c07a <create_chain+0x112>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	69db      	ldr	r3, [r3, #28]
 800c076:	3301      	adds	r3, #1
 800c078:	e000      	b.n	800c07c <create_chain+0x114>
 800c07a:	2302      	movs	r3, #2
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	61d3      	str	r3, [r2, #28]
 800c080:	e086      	b.n	800c190 <create_chain+0x228>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	69db      	ldr	r3, [r3, #28]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d102      	bne.n	800c090 <create_chain+0x128>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2201      	movs	r2, #1
 800c08e:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800c090:	69fa      	ldr	r2, [r7, #28]
 800c092:	6839      	ldr	r1, [r7, #0]
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f7ff fe54 	bl	800bd42 <fill_last_frag>
 800c09a:	4603      	mov	r3, r0
 800c09c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800c09e:	7dfb      	ldrb	r3, [r7, #23]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d175      	bne.n	800c190 <create_chain+0x228>
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	61da      	str	r2, [r3, #28]
 800c0aa:	e071      	b.n	800c190 <create_chain+0x228>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 800c0b0:	69ba      	ldr	r2, [r7, #24]
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d129      	bne.n	800c10c <create_chain+0x1a4>
			ncl = scl + 1;						/* Test if next cluster is free */
 800c0b8:	69bb      	ldr	r3, [r7, #24]
 800c0ba:	3301      	adds	r3, #1
 800c0bc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	69db      	ldr	r3, [r3, #28]
 800c0c2:	69fa      	ldr	r2, [r7, #28]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d301      	bcc.n	800c0cc <create_chain+0x164>
 800c0c8:	2302      	movs	r3, #2
 800c0ca:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800c0cc:	69f9      	ldr	r1, [r7, #28]
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f7ff fb0e 	bl	800b6f0 <get_fat>
 800c0d4:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d003      	beq.n	800c0e4 <create_chain+0x17c>
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e2:	d101      	bne.n	800c0e8 <create_chain+0x180>
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	e07a      	b.n	800c1de <create_chain+0x276>
			if (cs != 0) {						/* Not free? */
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d00e      	beq.n	800c10c <create_chain+0x1a4>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	695b      	ldr	r3, [r3, #20]
 800c0f2:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d906      	bls.n	800c108 <create_chain+0x1a0>
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	69db      	ldr	r3, [r3, #28]
 800c0fe:	68fa      	ldr	r2, [r7, #12]
 800c100:	429a      	cmp	r2, r3
 800c102:	d201      	bcs.n	800c108 <create_chain+0x1a0>
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 800c108:	2300      	movs	r3, #0
 800c10a:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 800c10c:	69fb      	ldr	r3, [r7, #28]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d129      	bne.n	800c166 <create_chain+0x1fe>
			ncl = scl;	/* Start cluster */
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 800c116:	69fb      	ldr	r3, [r7, #28]
 800c118:	3301      	adds	r3, #1
 800c11a:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	69db      	ldr	r3, [r3, #28]
 800c120:	69fa      	ldr	r2, [r7, #28]
 800c122:	429a      	cmp	r2, r3
 800c124:	d307      	bcc.n	800c136 <create_chain+0x1ce>
					ncl = 2;
 800c126:	2302      	movs	r3, #2
 800c128:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 800c12a:	69fa      	ldr	r2, [r7, #28]
 800c12c:	69bb      	ldr	r3, [r7, #24]
 800c12e:	429a      	cmp	r2, r3
 800c130:	d901      	bls.n	800c136 <create_chain+0x1ce>
 800c132:	2300      	movs	r3, #0
 800c134:	e053      	b.n	800c1de <create_chain+0x276>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c136:	69f9      	ldr	r1, [r7, #28]
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f7ff fad9 	bl	800b6f0 <get_fat>
 800c13e:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d00e      	beq.n	800c164 <create_chain+0x1fc>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d003      	beq.n	800c154 <create_chain+0x1ec>
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c152:	d101      	bne.n	800c158 <create_chain+0x1f0>
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	e042      	b.n	800c1de <create_chain+0x276>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800c158:	69fa      	ldr	r2, [r7, #28]
 800c15a:	69bb      	ldr	r3, [r7, #24]
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d1da      	bne.n	800c116 <create_chain+0x1ae>
 800c160:	2300      	movs	r3, #0
 800c162:	e03c      	b.n	800c1de <create_chain+0x276>
				if (cs == 0) break;				/* Found a free cluster? */
 800c164:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 800c166:	f04f 32ff 	mov.w	r2, #4294967295
 800c16a:	69f9      	ldr	r1, [r7, #28]
 800c16c:	6938      	ldr	r0, [r7, #16]
 800c16e:	f7ff fbe5 	bl	800b93c <put_fat>
 800c172:	4603      	mov	r3, r0
 800c174:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c176:	7dfb      	ldrb	r3, [r7, #23]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d109      	bne.n	800c190 <create_chain+0x228>
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d006      	beq.n	800c190 <create_chain+0x228>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 800c182:	69fa      	ldr	r2, [r7, #28]
 800c184:	6839      	ldr	r1, [r7, #0]
 800c186:	6938      	ldr	r0, [r7, #16]
 800c188:	f7ff fbd8 	bl	800b93c <put_fat>
 800c18c:	4603      	mov	r3, r0
 800c18e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update allocation information if the function succeeded */
 800c190:	7dfb      	ldrb	r3, [r7, #23]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d11a      	bne.n	800c1cc <create_chain+0x264>
		fs->last_clst = ncl;
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	69fa      	ldr	r2, [r7, #28]
 800c19a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst > 0 && fs->free_clst <= fs->n_fatent - 2) {
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	699b      	ldr	r3, [r3, #24]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d01b      	beq.n	800c1dc <create_chain+0x274>
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	699a      	ldr	r2, [r3, #24]
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	69db      	ldr	r3, [r3, #28]
 800c1ac:	3b02      	subs	r3, #2
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d814      	bhi.n	800c1dc <create_chain+0x274>
			fs->free_clst--;
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	699b      	ldr	r3, [r3, #24]
 800c1b6:	1e5a      	subs	r2, r3, #1
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	795b      	ldrb	r3, [r3, #5]
 800c1c0:	f043 0301 	orr.w	r3, r3, #1
 800c1c4:	b2da      	uxtb	r2, r3
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	715a      	strb	r2, [r3, #5]
 800c1ca:	e007      	b.n	800c1dc <create_chain+0x274>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c1cc:	7dfb      	ldrb	r3, [r7, #23]
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d102      	bne.n	800c1d8 <create_chain+0x270>
 800c1d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c1d6:	e000      	b.n	800c1da <create_chain+0x272>
 800c1d8:	2301      	movs	r3, #1
 800c1da:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c1dc:	69fb      	ldr	r3, [r7, #28]
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3720      	adds	r7, #32
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}

0800c1e6 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b086      	sub	sp, #24
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
 800c1ee:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f7ff f90f 	bl	800b414 <sync_window>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d001      	beq.n	800c200 <dir_clear+0x1a>
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	e036      	b.n	800c26e <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 800c200:	6839      	ldr	r1, [r7, #0]
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f7ff fa54 	bl	800b6b0 <clst2sect>
 800c208:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	693a      	ldr	r2, [r7, #16]
 800c20e:	639a      	str	r2, [r3, #56]	@ 0x38
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	333c      	adds	r3, #60	@ 0x3c
 800c214:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c218:	2100      	movs	r1, #0
 800c21a:	4618      	mov	r0, r3
 800c21c:	f005 fa90 	bl	8011740 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	333c      	adds	r3, #60	@ 0x3c
 800c224:	60fb      	str	r3, [r7, #12]
 800c226:	2301      	movs	r3, #1
 800c228:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800c22a:	2300      	movs	r3, #0
 800c22c:	617b      	str	r3, [r7, #20]
 800c22e:	e003      	b.n	800c238 <dir_clear+0x52>
 800c230:	697a      	ldr	r2, [r7, #20]
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	4413      	add	r3, r2
 800c236:	617b      	str	r3, [r7, #20]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	895b      	ldrh	r3, [r3, #10]
 800c23c:	461a      	mov	r2, r3
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	4293      	cmp	r3, r2
 800c242:	d20b      	bcs.n	800c25c <dir_clear+0x76>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	7858      	ldrb	r0, [r3, #1]
 800c248:	693a      	ldr	r2, [r7, #16]
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	441a      	add	r2, r3
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	68f9      	ldr	r1, [r7, #12]
 800c252:	f7fe f966 	bl	800a522 <disk_write>
 800c256:	4603      	mov	r3, r0
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d0e9      	beq.n	800c230 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	895b      	ldrh	r3, [r3, #10]
 800c260:	461a      	mov	r2, r3
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	4293      	cmp	r3, r2
 800c266:	bf14      	ite	ne
 800c268:	2301      	movne	r3, #1
 800c26a:	2300      	moveq	r3, #0
 800c26c:	b2db      	uxtb	r3, r3
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3718      	adds	r7, #24
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}

0800c276 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c276:	b580      	push	{r7, lr}
 800c278:	b086      	sub	sp, #24
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
 800c27e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	2b04      	cmp	r3, #4
 800c28c:	d102      	bne.n	800c294 <dir_sdi+0x1e>
 800c28e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c292:	e001      	b.n	800c298 <dir_sdi+0x22>
 800c294:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d904      	bls.n	800c2a8 <dir_sdi+0x32>
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	f003 031f 	and.w	r3, r3, #31
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d001      	beq.n	800c2ac <dir_sdi+0x36>
		return FR_INT_ERR;
 800c2a8:	2302      	movs	r3, #2
 800c2aa:	e066      	b.n	800c37a <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	683a      	ldr	r2, [r7, #0]
 800c2b0:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	689b      	ldr	r3, [r3, #8]
 800c2b6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d109      	bne.n	800c2d2 <dir_sdi+0x5c>
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	2b02      	cmp	r3, #2
 800c2c4:	d905      	bls.n	800c2d2 <dir_sdi+0x5c>
		clst = (DWORD)fs->dirbase;
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ca:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d10c      	bne.n	800c2f2 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	095b      	lsrs	r3, r3, #5
 800c2dc:	693a      	ldr	r2, [r7, #16]
 800c2de:	8912      	ldrh	r2, [r2, #8]
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d301      	bcc.n	800c2e8 <dir_sdi+0x72>
 800c2e4:	2302      	movs	r3, #2
 800c2e6:	e048      	b.n	800c37a <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	639a      	str	r2, [r3, #56]	@ 0x38
 800c2f0:	e029      	b.n	800c346 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	895b      	ldrh	r3, [r3, #10]
 800c2f6:	025b      	lsls	r3, r3, #9
 800c2f8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c2fa:	e019      	b.n	800c330 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6979      	ldr	r1, [r7, #20]
 800c300:	4618      	mov	r0, r3
 800c302:	f7ff f9f5 	bl	800b6f0 <get_fat>
 800c306:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c30e:	d101      	bne.n	800c314 <dir_sdi+0x9e>
 800c310:	2301      	movs	r3, #1
 800c312:	e032      	b.n	800c37a <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	2b01      	cmp	r3, #1
 800c318:	d904      	bls.n	800c324 <dir_sdi+0xae>
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	69db      	ldr	r3, [r3, #28]
 800c31e:	697a      	ldr	r2, [r7, #20]
 800c320:	429a      	cmp	r2, r3
 800c322:	d301      	bcc.n	800c328 <dir_sdi+0xb2>
 800c324:	2302      	movs	r3, #2
 800c326:	e028      	b.n	800c37a <dir_sdi+0x104>
			ofs -= csz;
 800c328:	683a      	ldr	r2, [r7, #0]
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	1ad3      	subs	r3, r2, r3
 800c32e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c330:	683a      	ldr	r2, [r7, #0]
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	429a      	cmp	r2, r3
 800c336:	d2e1      	bcs.n	800c2fc <dir_sdi+0x86>
		}
		dp->sect = clst2sect(fs, clst);
 800c338:	6979      	ldr	r1, [r7, #20]
 800c33a:	6938      	ldr	r0, [r7, #16]
 800c33c:	f7ff f9b8 	bl	800b6b0 <clst2sect>
 800c340:	4602      	mov	r2, r0
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	697a      	ldr	r2, [r7, #20]
 800c34a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c350:	2b00      	cmp	r3, #0
 800c352:	d101      	bne.n	800c358 <dir_sdi+0xe2>
 800c354:	2302      	movs	r3, #2
 800c356:	e010      	b.n	800c37a <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	0a5b      	lsrs	r3, r3, #9
 800c360:	441a      	add	r2, r3
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c372:	441a      	add	r2, r3
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800c378:	2300      	movs	r3, #0
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3718      	adds	r7, #24
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}

0800c382 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c382:	b580      	push	{r7, lr}
 800c384:	b086      	sub	sp, #24
 800c386:	af00      	add	r7, sp, #0
 800c388:	6078      	str	r0, [r7, #4]
 800c38a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c396:	3320      	adds	r3, #32
 800c398:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	2b04      	cmp	r3, #4
 800c3a0:	d102      	bne.n	800c3a8 <dir_next+0x26>
 800c3a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3a6:	e001      	b.n	800c3ac <dir_next+0x2a>
 800c3a8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d802      	bhi.n	800c3b8 <dir_next+0x36>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	639a      	str	r2, [r3, #56]	@ 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d101      	bne.n	800c3c4 <dir_next+0x42>
 800c3c0:	2304      	movs	r3, #4
 800c3c2:	e07f      	b.n	800c4c4 <dir_next+0x142>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d16d      	bne.n	800c4aa <dir_next+0x128>
		dp->sect++;				/* Next sector */
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3d2:	1c5a      	adds	r2, r3, #1
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	639a      	str	r2, [r3, #56]	@ 0x38

		if (dp->clust == 0) {	/* Static table */
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d10a      	bne.n	800c3f6 <dir_next+0x74>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	095b      	lsrs	r3, r3, #5
 800c3e4:	693a      	ldr	r2, [r7, #16]
 800c3e6:	8912      	ldrh	r2, [r2, #8]
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d35e      	bcc.n	800c4aa <dir_next+0x128>
				dp->sect = 0; return FR_NO_FILE;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	639a      	str	r2, [r3, #56]	@ 0x38
 800c3f2:	2304      	movs	r3, #4
 800c3f4:	e066      	b.n	800c4c4 <dir_next+0x142>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	0a5b      	lsrs	r3, r3, #9
 800c3fa:	693a      	ldr	r2, [r7, #16]
 800c3fc:	8952      	ldrh	r2, [r2, #10]
 800c3fe:	3a01      	subs	r2, #1
 800c400:	4013      	ands	r3, r2
 800c402:	2b00      	cmp	r3, #0
 800c404:	d151      	bne.n	800c4aa <dir_next+0x128>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c40c:	4619      	mov	r1, r3
 800c40e:	4610      	mov	r0, r2
 800c410:	f7ff f96e 	bl	800b6f0 <get_fat>
 800c414:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d801      	bhi.n	800c420 <dir_next+0x9e>
 800c41c:	2302      	movs	r3, #2
 800c41e:	e051      	b.n	800c4c4 <dir_next+0x142>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c426:	d101      	bne.n	800c42c <dir_next+0xaa>
 800c428:	2301      	movs	r3, #1
 800c42a:	e04b      	b.n	800c4c4 <dir_next+0x142>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	69db      	ldr	r3, [r3, #28]
 800c430:	697a      	ldr	r2, [r7, #20]
 800c432:	429a      	cmp	r2, r3
 800c434:	d32f      	bcc.n	800c496 <dir_next+0x114>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d104      	bne.n	800c446 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2200      	movs	r2, #0
 800c440:	639a      	str	r2, [r3, #56]	@ 0x38
 800c442:	2304      	movs	r3, #4
 800c444:	e03e      	b.n	800c4c4 <dir_next+0x142>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c44c:	4619      	mov	r1, r3
 800c44e:	4610      	mov	r0, r2
 800c450:	f7ff fd8a 	bl	800bf68 <create_chain>
 800c454:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d101      	bne.n	800c460 <dir_next+0xde>
 800c45c:	2307      	movs	r3, #7
 800c45e:	e031      	b.n	800c4c4 <dir_next+0x142>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	2b01      	cmp	r3, #1
 800c464:	d101      	bne.n	800c46a <dir_next+0xe8>
 800c466:	2302      	movs	r3, #2
 800c468:	e02c      	b.n	800c4c4 <dir_next+0x142>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c470:	d101      	bne.n	800c476 <dir_next+0xf4>
 800c472:	2301      	movs	r3, #1
 800c474:	e026      	b.n	800c4c4 <dir_next+0x142>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 800c476:	6979      	ldr	r1, [r7, #20]
 800c478:	6938      	ldr	r0, [r7, #16]
 800c47a:	f7ff feb4 	bl	800c1e6 <dir_clear>
 800c47e:	4603      	mov	r3, r0
 800c480:	2b00      	cmp	r3, #0
 800c482:	d001      	beq.n	800c488 <dir_next+0x106>
 800c484:	2301      	movs	r3, #1
 800c486:	e01d      	b.n	800c4c4 <dir_next+0x142>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	79db      	ldrb	r3, [r3, #7]
 800c48c:	f043 0304 	orr.w	r3, r3, #4
 800c490:	b2da      	uxtb	r2, r3
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	71da      	strb	r2, [r3, #7]
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	697a      	ldr	r2, [r7, #20]
 800c49a:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clst2sect(fs, clst);
 800c49c:	6979      	ldr	r1, [r7, #20]
 800c49e:	6938      	ldr	r0, [r7, #16]
 800c4a0:	f7ff f906 	bl	800b6b0 <clst2sect>
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	68fa      	ldr	r2, [r7, #12]
 800c4ae:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4bc:	441a      	add	r2, r3
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800c4c2:	2300      	movs	r3, #0
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3718      	adds	r7, #24
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b086      	sub	sp, #24
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c4dc:	2100      	movs	r1, #0
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f7ff fec9 	bl	800c276 <dir_sdi>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c4e8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d140      	bne.n	800c570 <dir_alloc+0xa4>
		n = 0;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	68f8      	ldr	r0, [r7, #12]
 800c4fa:	f7fe ffc7 	bl	800b48c <move_window>
 800c4fe:	4603      	mov	r3, r0
 800c500:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c502:	7dfb      	ldrb	r3, [r7, #23]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d132      	bne.n	800c56e <dir_alloc+0xa2>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	2b04      	cmp	r3, #4
 800c50e:	d108      	bne.n	800c522 <dir_alloc+0x56>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	b25b      	sxtb	r3, r3
 800c518:	43db      	mvns	r3, r3
 800c51a:	b2db      	uxtb	r3, r3
 800c51c:	09db      	lsrs	r3, r3, #7
 800c51e:	b2db      	uxtb	r3, r3
 800c520:	e00f      	b.n	800c542 <dir_alloc+0x76>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	2be5      	cmp	r3, #229	@ 0xe5
 800c52a:	d004      	beq.n	800c536 <dir_alloc+0x6a>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d101      	bne.n	800c53a <dir_alloc+0x6e>
 800c536:	2301      	movs	r3, #1
 800c538:	e000      	b.n	800c53c <dir_alloc+0x70>
 800c53a:	2300      	movs	r3, #0
 800c53c:	f003 0301 	and.w	r3, r3, #1
 800c540:	b2db      	uxtb	r3, r3
 800c542:	2b00      	cmp	r3, #0
 800c544:	d007      	beq.n	800c556 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	3301      	adds	r3, #1
 800c54a:	613b      	str	r3, [r7, #16]
 800c54c:	693a      	ldr	r2, [r7, #16]
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	429a      	cmp	r2, r3
 800c552:	d102      	bne.n	800c55a <dir_alloc+0x8e>
 800c554:	e00c      	b.n	800c570 <dir_alloc+0xa4>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 800c556:	2300      	movs	r3, #0
 800c558:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 800c55a:	2101      	movs	r1, #1
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f7ff ff10 	bl	800c382 <dir_next>
 800c562:	4603      	mov	r3, r0
 800c564:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800c566:	7dfb      	ldrb	r3, [r7, #23]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d0c2      	beq.n	800c4f2 <dir_alloc+0x26>
 800c56c:	e000      	b.n	800c570 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800c56e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c570:	7dfb      	ldrb	r3, [r7, #23]
 800c572:	2b04      	cmp	r3, #4
 800c574:	d101      	bne.n	800c57a <dir_alloc+0xae>
 800c576:	2307      	movs	r3, #7
 800c578:	75fb      	strb	r3, [r7, #23]
	return res;
 800c57a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3718      	adds	r7, #24
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	331a      	adds	r3, #26
 800c592:	4618      	mov	r0, r3
 800c594:	f7fe fcca 	bl	800af2c <ld_word>
 800c598:	4603      	mov	r3, r0
 800c59a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	2b03      	cmp	r3, #3
 800c5a2:	d109      	bne.n	800c5b8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	3314      	adds	r3, #20
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7fe fcbf 	bl	800af2c <ld_word>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	041b      	lsls	r3, r3, #16
 800c5b2:	68fa      	ldr	r2, [r7, #12]
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3710      	adds	r7, #16
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c5c2:	b580      	push	{r7, lr}
 800c5c4:	b084      	sub	sp, #16
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	60f8      	str	r0, [r7, #12]
 800c5ca:	60b9      	str	r1, [r7, #8]
 800c5cc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	331a      	adds	r3, #26
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	b292      	uxth	r2, r2
 800c5d6:	4611      	mov	r1, r2
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7fe fdbd 	bl	800b158 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	2b03      	cmp	r3, #3
 800c5e4:	d109      	bne.n	800c5fa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	f103 0214 	add.w	r2, r3, #20
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	0c1b      	lsrs	r3, r3, #16
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	4610      	mov	r0, r2
 800c5f6:	f7fe fdaf 	bl	800b158 <st_word>
	}
}
 800c5fa:	bf00      	nop
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
	...

0800c604 <cmp_lfn>:

static int cmp_lfn (		/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN to be compared */
	BYTE* dir				/* Pointer to the LFN entry */
)
{
 800c604:	b590      	push	{r4, r7, lr}
 800c606:	b087      	sub	sp, #28
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
	UINT ni, di;
	WCHAR pchr, chr;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check if LDIR_FstClusLO is 0 */
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	331a      	adds	r3, #26
 800c612:	4618      	mov	r0, r3
 800c614:	f7fe fc8a 	bl	800af2c <ld_word>
 800c618:	4603      	mov	r3, r0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d001      	beq.n	800c622 <cmp_lfn+0x1e>
 800c61e:	2300      	movs	r3, #0
 800c620:	e059      	b.n	800c6d6 <cmp_lfn+0xd2>

	ni = (UINT)((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the name to be compared */
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c62a:	3b01      	subs	r3, #1
 800c62c:	461a      	mov	r2, r3
 800c62e:	4613      	mov	r3, r2
 800c630:	005b      	lsls	r3, r3, #1
 800c632:	4413      	add	r3, r2
 800c634:	009b      	lsls	r3, r3, #2
 800c636:	4413      	add	r3, r2
 800c638:	617b      	str	r3, [r7, #20]

	for (pchr = 1, di = 0; di < 13; di++) {	/* Process all characters in the entry */
 800c63a:	2301      	movs	r3, #1
 800c63c:	81fb      	strh	r3, [r7, #14]
 800c63e:	2300      	movs	r3, #0
 800c640:	613b      	str	r3, [r7, #16]
 800c642:	e032      	b.n	800c6aa <cmp_lfn+0xa6>
		chr = ld_word(dir + LfnOfs[di]);	/* Pick a character from the entry */
 800c644:	4a26      	ldr	r2, [pc, #152]	@ (800c6e0 <cmp_lfn+0xdc>)
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	4413      	add	r3, r2
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	461a      	mov	r2, r3
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	4413      	add	r3, r2
 800c652:	4618      	mov	r0, r3
 800c654:	f7fe fc6a 	bl	800af2c <ld_word>
 800c658:	4603      	mov	r3, r0
 800c65a:	81bb      	strh	r3, [r7, #12]
		if (pchr != 0) {
 800c65c:	89fb      	ldrh	r3, [r7, #14]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d019      	beq.n	800c696 <cmp_lfn+0x92>
			if (ni >= FF_MAX_LFN + 1 || ff_wtoupper(chr) != ff_wtoupper(lfnbuf[ni++])) {	/* Compare it with name */
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	2bff      	cmp	r3, #255	@ 0xff
 800c666:	d811      	bhi.n	800c68c <cmp_lfn+0x88>
 800c668:	89bb      	ldrh	r3, [r7, #12]
 800c66a:	4618      	mov	r0, r3
 800c66c:	f003 fa9c 	bl	800fba8 <ff_wtoupper>
 800c670:	4604      	mov	r4, r0
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	1c5a      	adds	r2, r3, #1
 800c676:	617a      	str	r2, [r7, #20]
 800c678:	005b      	lsls	r3, r3, #1
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	4413      	add	r3, r2
 800c67e:	881b      	ldrh	r3, [r3, #0]
 800c680:	4618      	mov	r0, r3
 800c682:	f003 fa91 	bl	800fba8 <ff_wtoupper>
 800c686:	4603      	mov	r3, r0
 800c688:	429c      	cmp	r4, r3
 800c68a:	d001      	beq.n	800c690 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c68c:	2300      	movs	r3, #0
 800c68e:	e022      	b.n	800c6d6 <cmp_lfn+0xd2>
			}
			pchr = chr;
 800c690:	89bb      	ldrh	r3, [r7, #12]
 800c692:	81fb      	strh	r3, [r7, #14]
 800c694:	e006      	b.n	800c6a4 <cmp_lfn+0xa0>
		} else {
			if (chr != 0xFFFF) return 0;	/* Check filler */
 800c696:	89bb      	ldrh	r3, [r7, #12]
 800c698:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d001      	beq.n	800c6a4 <cmp_lfn+0xa0>
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	e018      	b.n	800c6d6 <cmp_lfn+0xd2>
	for (pchr = 1, di = 0; di < 13; di++) {	/* Process all characters in the entry */
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	613b      	str	r3, [r7, #16]
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	2b0c      	cmp	r3, #12
 800c6ae:	d9c9      	bls.n	800c644 <cmp_lfn+0x40>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && pchr && lfnbuf[ni]) return 0;	/* Last name segment matched but different length */
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d00b      	beq.n	800c6d4 <cmp_lfn+0xd0>
 800c6bc:	89fb      	ldrh	r3, [r7, #14]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d008      	beq.n	800c6d4 <cmp_lfn+0xd0>
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	005b      	lsls	r3, r3, #1
 800c6c6:	687a      	ldr	r2, [r7, #4]
 800c6c8:	4413      	add	r3, r2
 800c6ca:	881b      	ldrh	r3, [r3, #0]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d001      	beq.n	800c6d4 <cmp_lfn+0xd0>
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	e000      	b.n	800c6d6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c6d4:	2301      	movs	r3, #1
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	371c      	adds	r7, #28
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd90      	pop	{r4, r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	08014488 	.word	0x08014488

0800c6e4 <pick_lfn>:

static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the name buffer to be stored */
	const BYTE* dir		/* Pointer to the LFN entry */
)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b086      	sub	sp, #24
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	6039      	str	r1, [r7, #0]
	UINT ni, di;
	WCHAR pchr, chr;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check if LDIR_FstClusLO is 0 */
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	331a      	adds	r3, #26
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7fe fc1a 	bl	800af2c <ld_word>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d001      	beq.n	800c702 <pick_lfn+0x1e>
 800c6fe:	2300      	movs	r3, #0
 800c700:	e051      	b.n	800c7a6 <pick_lfn+0xc2>

	ni = (UINT)((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the name buffer */
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c70a:	3b01      	subs	r3, #1
 800c70c:	461a      	mov	r2, r3
 800c70e:	4613      	mov	r3, r2
 800c710:	005b      	lsls	r3, r3, #1
 800c712:	4413      	add	r3, r2
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	4413      	add	r3, r2
 800c718:	617b      	str	r3, [r7, #20]

	for (pchr = 1, di = 0; di < 13; di++) {		/* Process all characters in the entry */
 800c71a:	2301      	movs	r3, #1
 800c71c:	81fb      	strh	r3, [r7, #14]
 800c71e:	2300      	movs	r3, #0
 800c720:	613b      	str	r3, [r7, #16]
 800c722:	e028      	b.n	800c776 <pick_lfn+0x92>
		chr = ld_word(dir + LfnOfs[di]);		/* Pick a character from the entry */
 800c724:	4a22      	ldr	r2, [pc, #136]	@ (800c7b0 <pick_lfn+0xcc>)
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	4413      	add	r3, r2
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	461a      	mov	r2, r3
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	4413      	add	r3, r2
 800c732:	4618      	mov	r0, r3
 800c734:	f7fe fbfa 	bl	800af2c <ld_word>
 800c738:	4603      	mov	r3, r0
 800c73a:	81bb      	strh	r3, [r7, #12]
		if (pchr != 0) {
 800c73c:	89fb      	ldrh	r3, [r7, #14]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d00f      	beq.n	800c762 <pick_lfn+0x7e>
			if (ni >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	2bff      	cmp	r3, #255	@ 0xff
 800c746:	d901      	bls.n	800c74c <pick_lfn+0x68>
 800c748:	2300      	movs	r3, #0
 800c74a:	e02c      	b.n	800c7a6 <pick_lfn+0xc2>
			lfnbuf[ni++] = pchr = chr;			/* Store it */
 800c74c:	89bb      	ldrh	r3, [r7, #12]
 800c74e:	81fb      	strh	r3, [r7, #14]
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	1c5a      	adds	r2, r3, #1
 800c754:	617a      	str	r2, [r7, #20]
 800c756:	005b      	lsls	r3, r3, #1
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	4413      	add	r3, r2
 800c75c:	89fa      	ldrh	r2, [r7, #14]
 800c75e:	801a      	strh	r2, [r3, #0]
 800c760:	e006      	b.n	800c770 <pick_lfn+0x8c>
		} else {
			if (chr != 0xFFFF) return 0;		/* Check filler */
 800c762:	89bb      	ldrh	r3, [r7, #12]
 800c764:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c768:	4293      	cmp	r3, r2
 800c76a:	d001      	beq.n	800c770 <pick_lfn+0x8c>
 800c76c:	2300      	movs	r3, #0
 800c76e:	e01a      	b.n	800c7a6 <pick_lfn+0xc2>
	for (pchr = 1, di = 0; di < 13; di++) {		/* Process all characters in the entry */
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	3301      	adds	r3, #1
 800c774:	613b      	str	r3, [r7, #16]
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	2b0c      	cmp	r3, #12
 800c77a:	d9d3      	bls.n	800c724 <pick_lfn+0x40>
		}
	}

	if (dir[LDIR_Ord] & LLEF && pchr != 0) {	/* Put terminator if it is the last LFN part and not terminated */
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c784:	2b00      	cmp	r3, #0
 800c786:	d00d      	beq.n	800c7a4 <pick_lfn+0xc0>
 800c788:	89fb      	ldrh	r3, [r7, #14]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d00a      	beq.n	800c7a4 <pick_lfn+0xc0>
		if (ni >= FF_MAX_LFN + 1) return 0;		/* Buffer overflow? */
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	2bff      	cmp	r3, #255	@ 0xff
 800c792:	d901      	bls.n	800c798 <pick_lfn+0xb4>
 800c794:	2300      	movs	r3, #0
 800c796:	e006      	b.n	800c7a6 <pick_lfn+0xc2>
		lfnbuf[ni] = 0;
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	005b      	lsls	r3, r3, #1
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	4413      	add	r3, r2
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800c7a4:	2301      	movs	r3, #1
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3718      	adds	r7, #24
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	08014488 	.word	0x08014488

0800c7b4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b088      	sub	sp, #32
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	60f8      	str	r0, [r7, #12]
 800c7bc:	60b9      	str	r1, [r7, #8]
 800c7be:	4611      	mov	r1, r2
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	460b      	mov	r3, r1
 800c7c4:	71fb      	strb	r3, [r7, #7]
 800c7c6:	4613      	mov	r3, r2
 800c7c8:	71bb      	strb	r3, [r7, #6]
	UINT ni, di;
	WCHAR chr;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	330d      	adds	r3, #13
 800c7ce:	79ba      	ldrb	r2, [r7, #6]
 800c7d0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute */
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	330b      	adds	r3, #11
 800c7d6:	220f      	movs	r2, #15
 800c7d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	330c      	adds	r3, #12
 800c7de:	2200      	movs	r2, #0
 800c7e0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	331a      	adds	r3, #26
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f7fe fcb5 	bl	800b158 <st_word>

	ni = (UINT)(ord - 1) * 13;		/* Offset in the name */
 800c7ee:	79fb      	ldrb	r3, [r7, #7]
 800c7f0:	3b01      	subs	r3, #1
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	4613      	mov	r3, r2
 800c7f6:	005b      	lsls	r3, r3, #1
 800c7f8:	4413      	add	r3, r2
 800c7fa:	009b      	lsls	r3, r3, #2
 800c7fc:	4413      	add	r3, r2
 800c7fe:	61fb      	str	r3, [r7, #28]
	di = chr = 0;
 800c800:	2300      	movs	r3, #0
 800c802:	82fb      	strh	r3, [r7, #22]
 800c804:	2300      	movs	r3, #0
 800c806:	61bb      	str	r3, [r7, #24]
	do {	/* Fill the directory entry */
		if (chr != 0xFFFF) chr = lfn[ni++];	/* Get an effective character */
 800c808:	8afb      	ldrh	r3, [r7, #22]
 800c80a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c80e:	4293      	cmp	r3, r2
 800c810:	d007      	beq.n	800c822 <put_lfn+0x6e>
 800c812:	69fb      	ldr	r3, [r7, #28]
 800c814:	1c5a      	adds	r2, r3, #1
 800c816:	61fa      	str	r2, [r7, #28]
 800c818:	005b      	lsls	r3, r3, #1
 800c81a:	68fa      	ldr	r2, [r7, #12]
 800c81c:	4413      	add	r3, r2
 800c81e:	881b      	ldrh	r3, [r3, #0]
 800c820:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[di], chr);	/* Set it */
 800c822:	4a17      	ldr	r2, [pc, #92]	@ (800c880 <put_lfn+0xcc>)
 800c824:	69bb      	ldr	r3, [r7, #24]
 800c826:	4413      	add	r3, r2
 800c828:	781b      	ldrb	r3, [r3, #0]
 800c82a:	461a      	mov	r2, r3
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	4413      	add	r3, r2
 800c830:	8afa      	ldrh	r2, [r7, #22]
 800c832:	4611      	mov	r1, r2
 800c834:	4618      	mov	r0, r3
 800c836:	f7fe fc8f 	bl	800b158 <st_word>
		if (chr == 0) chr = 0xFFFF;		/* Padding characters after the terminator */
 800c83a:	8afb      	ldrh	r3, [r7, #22]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d102      	bne.n	800c846 <put_lfn+0x92>
 800c840:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c844:	82fb      	strh	r3, [r7, #22]
	} while (++di < 13);
 800c846:	69bb      	ldr	r3, [r7, #24]
 800c848:	3301      	adds	r3, #1
 800c84a:	61bb      	str	r3, [r7, #24]
 800c84c:	69bb      	ldr	r3, [r7, #24]
 800c84e:	2b0c      	cmp	r3, #12
 800c850:	d9da      	bls.n	800c808 <put_lfn+0x54>
	if (chr == 0xFFFF || !lfn[ni]) ord |= LLEF;	/* Last LFN part is the start of an enrty set */
 800c852:	8afb      	ldrh	r3, [r7, #22]
 800c854:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c858:	4293      	cmp	r3, r2
 800c85a:	d006      	beq.n	800c86a <put_lfn+0xb6>
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	005b      	lsls	r3, r3, #1
 800c860:	68fa      	ldr	r2, [r7, #12]
 800c862:	4413      	add	r3, r2
 800c864:	881b      	ldrh	r3, [r3, #0]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d103      	bne.n	800c872 <put_lfn+0xbe>
 800c86a:	79fb      	ldrb	r3, [r7, #7]
 800c86c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c870:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set order in the entry set */
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	79fa      	ldrb	r2, [r7, #7]
 800c876:	701a      	strb	r2, [r3, #0]
}
 800c878:	bf00      	nop
 800c87a:	3720      	adds	r7, #32
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	08014488 	.word	0x08014488

0800c884 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN in directory form */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b08c      	sub	sp, #48	@ 0x30
 800c888:	af00      	add	r7, sp, #0
 800c88a:	60f8      	str	r0, [r7, #12]
 800c88c:	60b9      	str	r1, [r7, #8]
 800c88e:	607a      	str	r2, [r7, #4]
 800c890:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD crc_sreg;


	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 800c892:	220b      	movs	r2, #11
 800c894:	68b9      	ldr	r1, [r7, #8]
 800c896:	68f8      	ldr	r0, [r7, #12]
 800c898:	f004 ff94 	bl	80117c4 <memcpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	2b05      	cmp	r3, #5
 800c8a0:	d92b      	bls.n	800c8fa <gen_numname+0x76>
		crc_sreg = seq;
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC value as a hash of LFN */
 800c8a6:	e022      	b.n	800c8ee <gen_numname+0x6a>
			wc = *lfn++;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	1c9a      	adds	r2, r3, #2
 800c8ac:	607a      	str	r2, [r7, #4]
 800c8ae:	881b      	ldrh	r3, [r3, #0]
 800c8b0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c8b6:	e017      	b.n	800c8e8 <gen_numname+0x64>
				crc_sreg = (crc_sreg << 1) + (wc & 1);
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	005a      	lsls	r2, r3, #1
 800c8bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c8be:	f003 0301 	and.w	r3, r3, #1
 800c8c2:	4413      	add	r3, r2
 800c8c4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c8c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c8c8:	085b      	lsrs	r3, r3, #1
 800c8ca:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (crc_sreg & 0x10000) crc_sreg ^= 0x11021;
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d005      	beq.n	800c8e2 <gen_numname+0x5e>
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800c8dc:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800c8e0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ea:	2b0f      	cmp	r3, #15
 800c8ec:	d9e4      	bls.n	800c8b8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC value as a hash of LFN */
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	881b      	ldrh	r3, [r3, #0]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d1d8      	bne.n	800c8a8 <gen_numname+0x24>
			}
		}
		seq = (UINT)crc_sreg;
 800c8f6:	69fb      	ldr	r3, [r7, #28]
 800c8f8:	603b      	str	r3, [r7, #0]
	}

	/* Make suffix (~ + hexdecimal) */
	i = 7;
 800c8fa:	2307      	movs	r3, #7
 800c8fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	b2db      	uxtb	r3, r3
 800c902:	f003 030f 	and.w	r3, r3, #15
 800c906:	b2db      	uxtb	r3, r3
 800c908:	3330      	adds	r3, #48	@ 0x30
 800c90a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	091b      	lsrs	r3, r3, #4
 800c912:	603b      	str	r3, [r7, #0]
		if (c > '9') c += 7;
 800c914:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c918:	2b39      	cmp	r3, #57	@ 0x39
 800c91a:	d904      	bls.n	800c926 <gen_numname+0xa2>
 800c91c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c920:	3307      	adds	r3, #7
 800c922:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800c926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c928:	1e5a      	subs	r2, r3, #1
 800c92a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c92c:	3330      	adds	r3, #48	@ 0x30
 800c92e:	443b      	add	r3, r7
 800c930:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c934:	f803 2c1c 	strb.w	r2, [r3, #-28]
	} while (i && seq);
 800c938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d002      	beq.n	800c944 <gen_numname+0xc0>
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d1dc      	bne.n	800c8fe <gen_numname+0x7a>
	ns[i] = '~';
 800c944:	f107 0214 	add.w	r2, r7, #20
 800c948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c94a:	4413      	add	r3, r2
 800c94c:	227e      	movs	r2, #126	@ 0x7e
 800c94e:	701a      	strb	r2, [r3, #0]

	/* Append the suffix to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800c950:	2300      	movs	r3, #0
 800c952:	627b      	str	r3, [r7, #36]	@ 0x24
 800c954:	e014      	b.n	800c980 <gen_numname+0xfc>
		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
 800c956:	68fa      	ldr	r2, [r7, #12]
 800c958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c95a:	4413      	add	r3, r2
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	4618      	mov	r0, r3
 800c960:	f7fe fcc9 	bl	800b2f6 <dbc_1st>
 800c964:	4603      	mov	r3, r0
 800c966:	2b00      	cmp	r3, #0
 800c968:	d007      	beq.n	800c97a <gen_numname+0xf6>
			if (j == i - 1) break;
 800c96a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c96c:	3b01      	subs	r3, #1
 800c96e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c970:	429a      	cmp	r2, r3
 800c972:	d010      	beq.n	800c996 <gen_numname+0x112>
			j++;
 800c974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c976:	3301      	adds	r3, #1
 800c978:	627b      	str	r3, [r7, #36]	@ 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800c97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c97c:	3301      	adds	r3, #1
 800c97e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c984:	429a      	cmp	r2, r3
 800c986:	d207      	bcs.n	800c998 <gen_numname+0x114>
 800c988:	68fa      	ldr	r2, [r7, #12]
 800c98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c98c:	4413      	add	r3, r2
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	2b20      	cmp	r3, #32
 800c992:	d1e0      	bne.n	800c956 <gen_numname+0xd2>
 800c994:	e000      	b.n	800c998 <gen_numname+0x114>
			if (j == i - 1) break;
 800c996:	bf00      	nop
		}
	}
	do {	/* Append the suffix */
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c99a:	2b07      	cmp	r3, #7
 800c99c:	d807      	bhi.n	800c9ae <gen_numname+0x12a>
 800c99e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9a0:	1c5a      	adds	r2, r3, #1
 800c9a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c9a4:	3330      	adds	r3, #48	@ 0x30
 800c9a6:	443b      	add	r3, r7
 800c9a8:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c9ac:	e000      	b.n	800c9b0 <gen_numname+0x12c>
 800c9ae:	2120      	movs	r1, #32
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b2:	1c5a      	adds	r2, r3, #1
 800c9b4:	627a      	str	r2, [r7, #36]	@ 0x24
 800c9b6:	68fa      	ldr	r2, [r7, #12]
 800c9b8:	4413      	add	r3, r2
 800c9ba:	460a      	mov	r2, r1
 800c9bc:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c0:	2b07      	cmp	r3, #7
 800c9c2:	d9e9      	bls.n	800c998 <gen_numname+0x114>
}
 800c9c4:	bf00      	nop
 800c9c6:	bf00      	nop
 800c9c8:	3730      	adds	r7, #48	@ 0x30
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}

0800c9ce <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c9ce:	b480      	push	{r7}
 800c9d0:	b085      	sub	sp, #20
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c9da:	230b      	movs	r3, #11
 800c9dc:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c9de:	7bfb      	ldrb	r3, [r7, #15]
 800c9e0:	b2da      	uxtb	r2, r3
 800c9e2:	0852      	lsrs	r2, r2, #1
 800c9e4:	01db      	lsls	r3, r3, #7
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	b2da      	uxtb	r2, r3
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	1c59      	adds	r1, r3, #1
 800c9ee:	6079      	str	r1, [r7, #4]
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	4413      	add	r3, r2
 800c9f4:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	60bb      	str	r3, [r7, #8]
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d1ed      	bne.n	800c9de <sum_sfn+0x10>
	return sum;
 800ca02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3714      	adds	r7, #20
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr

0800ca10 <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b087      	sub	sp, #28
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = ((UINT)dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	015b      	lsls	r3, r3, #5
 800ca22:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800ca24:	2300      	movs	r3, #0
 800ca26:	827b      	strh	r3, [r7, #18]
 800ca28:	2300      	movs	r3, #0
 800ca2a:	617b      	str	r3, [r7, #20]
 800ca2c:	e017      	b.n	800ca5e <xdir_sum+0x4e>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	2b02      	cmp	r3, #2
 800ca32:	d103      	bne.n	800ca3c <xdir_sum+0x2c>
			i++;
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	3301      	adds	r3, #1
 800ca38:	617b      	str	r3, [r7, #20]
 800ca3a:	e00d      	b.n	800ca58 <xdir_sum+0x48>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800ca3c:	8a7b      	ldrh	r3, [r7, #18]
 800ca3e:	03db      	lsls	r3, r3, #15
 800ca40:	b29a      	uxth	r2, r3
 800ca42:	8a7b      	ldrh	r3, [r7, #18]
 800ca44:	085b      	lsrs	r3, r3, #1
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	4413      	add	r3, r2
 800ca4a:	b29b      	uxth	r3, r3
 800ca4c:	6879      	ldr	r1, [r7, #4]
 800ca4e:	697a      	ldr	r2, [r7, #20]
 800ca50:	440a      	add	r2, r1
 800ca52:	7812      	ldrb	r2, [r2, #0]
 800ca54:	4413      	add	r3, r2
 800ca56:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	617b      	str	r3, [r7, #20]
 800ca5e:	697a      	ldr	r2, [r7, #20]
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d3e3      	bcc.n	800ca2e <xdir_sum+0x1e>
		}
	}
	return sum;
 800ca66:	8a7b      	ldrh	r3, [r7, #18]
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	371c      	adds	r7, #28
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr

0800ca74 <xname_sum>:


static WORD xname_sum (	/* Get check sum (to be used as hash) of the file name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b084      	sub	sp, #16
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800ca80:	e01f      	b.n	800cac2 <xname_sum+0x4e>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 800ca82:	89bb      	ldrh	r3, [r7, #12]
 800ca84:	4618      	mov	r0, r3
 800ca86:	f003 f88f 	bl	800fba8 <ff_wtoupper>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800ca8e:	89fb      	ldrh	r3, [r7, #14]
 800ca90:	03db      	lsls	r3, r3, #15
 800ca92:	b29a      	uxth	r2, r3
 800ca94:	89fb      	ldrh	r3, [r7, #14]
 800ca96:	085b      	lsrs	r3, r3, #1
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	4413      	add	r3, r2
 800ca9c:	b29a      	uxth	r2, r3
 800ca9e:	89bb      	ldrh	r3, [r7, #12]
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	4413      	add	r3, r2
 800caa6:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800caa8:	89fb      	ldrh	r3, [r7, #14]
 800caaa:	03db      	lsls	r3, r3, #15
 800caac:	b29a      	uxth	r2, r3
 800caae:	89fb      	ldrh	r3, [r7, #14]
 800cab0:	085b      	lsrs	r3, r3, #1
 800cab2:	b29b      	uxth	r3, r3
 800cab4:	4413      	add	r3, r2
 800cab6:	b29a      	uxth	r2, r3
 800cab8:	89bb      	ldrh	r3, [r7, #12]
 800caba:	0a1b      	lsrs	r3, r3, #8
 800cabc:	b29b      	uxth	r3, r3
 800cabe:	4413      	add	r3, r2
 800cac0:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	1c9a      	adds	r2, r3, #2
 800cac6:	607a      	str	r2, [r7, #4]
 800cac8:	881b      	ldrh	r3, [r3, #0]
 800caca:	81bb      	strh	r3, [r7, #12]
 800cacc:	89bb      	ldrh	r3, [r7, #12]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d1d7      	bne.n	800ca82 <xname_sum+0xe>
	}
	return sum;
 800cad2:	89fb      	ldrh	r3, [r7, #14]
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3710      	adds	r7, #16
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <load_xdir>:
/*------------------------------------*/

static FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp					/* Reading directory object pointing top of the entry block to load */
)
{
 800cadc:	b590      	push	{r4, r7, lr}
 800cade:	b087      	sub	sp, #28
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory directory entry block 85+C0+C1s */
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	691b      	ldr	r3, [r3, #16]
 800caea:	60fb      	str	r3, [r7, #12]


	/* Load file-directory entry */
	res = move_window(dp->obj.fs, dp->sect);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681a      	ldr	r2, [r3, #0]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caf4:	4619      	mov	r1, r3
 800caf6:	4610      	mov	r0, r2
 800caf8:	f7fe fcc8 	bl	800b48c <move_window>
 800cafc:	4603      	mov	r3, r0
 800cafe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cb00:	7dfb      	ldrb	r3, [r7, #23]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d001      	beq.n	800cb0a <load_xdir+0x2e>
 800cb06:	7dfb      	ldrb	r3, [r7, #23]
 800cb08:	e0a9      	b.n	800cc5e <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order? */
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	2b85      	cmp	r3, #133	@ 0x85
 800cb12:	d001      	beq.n	800cb18 <load_xdir+0x3c>
 800cb14:	2302      	movs	r3, #2
 800cb16:	e0a2      	b.n	800cc5e <load_xdir+0x182>
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb1c:	2220      	movs	r2, #32
 800cb1e:	4619      	mov	r1, r3
 800cb20:	68f8      	ldr	r0, [r7, #12]
 800cb22:	f004 fe4f 	bl	80117c4 <memcpy>
	sz_ent = ((UINT)dirb[XDIR_NumSec] + 1) * SZDIRE;	/* Size of this entry block */
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	015b      	lsls	r3, r3, #5
 800cb30:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;	/* Invalid block size? */
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	2b5f      	cmp	r3, #95	@ 0x5f
 800cb36:	d903      	bls.n	800cb40 <load_xdir+0x64>
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800cb3e:	d901      	bls.n	800cb44 <load_xdir+0x68>
 800cb40:	2302      	movs	r3, #2
 800cb42:	e08c      	b.n	800cc5e <load_xdir+0x182>

	/* Load stream extension entry */
	res = dir_next(dp, 0);
 800cb44:	2100      	movs	r1, #0
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f7ff fc1b 	bl	800c382 <dir_next>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800cb50:	7dfb      	ldrb	r3, [r7, #23]
 800cb52:	2b04      	cmp	r3, #4
 800cb54:	d101      	bne.n	800cb5a <load_xdir+0x7e>
 800cb56:	2302      	movs	r3, #2
 800cb58:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cb5a:	7dfb      	ldrb	r3, [r7, #23]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d001      	beq.n	800cb64 <load_xdir+0x88>
 800cb60:	7dfb      	ldrb	r3, [r7, #23]
 800cb62:	e07c      	b.n	800cc5e <load_xdir+0x182>
	res = move_window(dp->obj.fs, dp->sect);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681a      	ldr	r2, [r3, #0]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb6c:	4619      	mov	r1, r3
 800cb6e:	4610      	mov	r0, r2
 800cb70:	f7fe fc8c 	bl	800b48c <move_window>
 800cb74:	4603      	mov	r3, r0
 800cb76:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cb78:	7dfb      	ldrb	r3, [r7, #23]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d001      	beq.n	800cb82 <load_xdir+0xa6>
 800cb7e:	7dfb      	ldrb	r3, [r7, #23]
 800cb80:	e06d      	b.n	800cc5e <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order? */
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	2bc0      	cmp	r3, #192	@ 0xc0
 800cb8a:	d001      	beq.n	800cb90 <load_xdir+0xb4>
 800cb8c:	2302      	movs	r3, #2
 800cb8e:	e066      	b.n	800cc5e <load_xdir+0x182>
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f103 0020 	add.w	r0, r3, #32
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb9a:	2220      	movs	r2, #32
 800cb9c:	4619      	mov	r1, r3
 800cb9e:	f004 fe11 	bl	80117c4 <memcpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;	/* Invalid block size for the name? */
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	3323      	adds	r3, #35	@ 0x23
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	332c      	adds	r3, #44	@ 0x2c
 800cbaa:	4a2f      	ldr	r2, [pc, #188]	@ (800cc68 <load_xdir+0x18c>)
 800cbac:	fba2 2303 	umull	r2, r3, r2, r3
 800cbb0:	08db      	lsrs	r3, r3, #3
 800cbb2:	015b      	lsls	r3, r3, #5
 800cbb4:	68ba      	ldr	r2, [r7, #8]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d201      	bcs.n	800cbbe <load_xdir+0xe2>
 800cbba:	2302      	movs	r3, #2
 800cbbc:	e04f      	b.n	800cc5e <load_xdir+0x182>

	/* Load file name entries */
	i = 2 * SZDIRE;	/* Name offset to load */
 800cbbe:	2340      	movs	r3, #64	@ 0x40
 800cbc0:	613b      	str	r3, [r7, #16]
	do {
		res = dir_next(dp, 0);
 800cbc2:	2100      	movs	r1, #0
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f7ff fbdc 	bl	800c382 <dir_next>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800cbce:	7dfb      	ldrb	r3, [r7, #23]
 800cbd0:	2b04      	cmp	r3, #4
 800cbd2:	d101      	bne.n	800cbd8 <load_xdir+0xfc>
 800cbd4:	2302      	movs	r3, #2
 800cbd6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800cbd8:	7dfb      	ldrb	r3, [r7, #23]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d001      	beq.n	800cbe2 <load_xdir+0x106>
 800cbde:	7dfb      	ldrb	r3, [r7, #23]
 800cbe0:	e03d      	b.n	800cc5e <load_xdir+0x182>
		res = move_window(dp->obj.fs, dp->sect);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681a      	ldr	r2, [r3, #0]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbea:	4619      	mov	r1, r3
 800cbec:	4610      	mov	r0, r2
 800cbee:	f7fe fc4d 	bl	800b48c <move_window>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800cbf6:	7dfb      	ldrb	r3, [r7, #23]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d001      	beq.n	800cc00 <load_xdir+0x124>
 800cbfc:	7dfb      	ldrb	r3, [r7, #23]
 800cbfe:	e02e      	b.n	800cc5e <load_xdir+0x182>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order? */
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc04:	781b      	ldrb	r3, [r3, #0]
 800cc06:	2bc1      	cmp	r3, #193	@ 0xc1
 800cc08:	d001      	beq.n	800cc0e <load_xdir+0x132>
 800cc0a:	2302      	movs	r3, #2
 800cc0c:	e027      	b.n	800cc5e <load_xdir+0x182>
		if (i < MAXDIRB(FF_MAX_LFN)) memcpy(dirb + i, dp->dir, SZDIRE);	/* Load name entries only if the object is accessible */
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800cc14:	d208      	bcs.n	800cc28 <load_xdir+0x14c>
 800cc16:	68fa      	ldr	r2, [r7, #12]
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	18d0      	adds	r0, r2, r3
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc20:	2220      	movs	r2, #32
 800cc22:	4619      	mov	r1, r3
 800cc24:	f004 fdce 	bl	80117c4 <memcpy>
	} while ((i += SZDIRE) < sz_ent);
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	3320      	adds	r3, #32
 800cc2c:	613b      	str	r3, [r7, #16]
 800cc2e:	693a      	ldr	r2, [r7, #16]
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d3c5      	bcc.n	800cbc2 <load_xdir+0xe6>

	/* Sanity check (do it for only accessible object) */
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800cc3c:	d80e      	bhi.n	800cc5c <load_xdir+0x180>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800cc3e:	68f8      	ldr	r0, [r7, #12]
 800cc40:	f7ff fee6 	bl	800ca10 <xdir_sum>
 800cc44:	4603      	mov	r3, r0
 800cc46:	461c      	mov	r4, r3
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	3302      	adds	r3, #2
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7fe f96d 	bl	800af2c <ld_word>
 800cc52:	4603      	mov	r3, r0
 800cc54:	429c      	cmp	r4, r3
 800cc56:	d001      	beq.n	800cc5c <load_xdir+0x180>
 800cc58:	2302      	movs	r3, #2
 800cc5a:	e000      	b.n	800cc5e <load_xdir+0x182>
	}

	return FR_OK;
 800cc5c:	2300      	movs	r3, #0
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	371c      	adds	r7, #28
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd90      	pop	{r4, r7, pc}
 800cc66:	bf00      	nop
 800cc68:	88888889 	.word	0x88888889

0800cc6c <init_alloc_info>:

static void init_alloc_info (
	FATFS* fs,		/* Filesystem object */
	FFOBJID* obj	/* Object allocation information to be initialized */
)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	691b      	ldr	r3, [r3, #16]
 800cc7a:	3334      	adds	r3, #52	@ 0x34
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7fe f96d 	bl	800af5c <ld_dword>
 800cc82:	4602      	mov	r2, r0
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	609a      	str	r2, [r3, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	691b      	ldr	r3, [r3, #16]
 800cc8c:	3338      	adds	r3, #56	@ 0x38
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7fe f987 	bl	800afa2 <ld_qword>
 800cc94:	4602      	mov	r2, r0
 800cc96:	460b      	mov	r3, r1
 800cc98:	6839      	ldr	r1, [r7, #0]
 800cc9a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	691b      	ldr	r3, [r3, #16]
 800cca2:	3321      	adds	r3, #33	@ 0x21
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	f003 0302 	and.w	r3, r3, #2
 800ccaa:	b2da      	uxtb	r2, r3
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	71da      	strb	r2, [r3, #7]
	obj->n_frag = 0;										/* No last fragment info */
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	61da      	str	r2, [r3, #28]
}
 800ccb6:	bf00      	nop
 800ccb8:	3708      	adds	r7, #8
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}

0800ccbe <load_obj_xdir>:

static FRESULT load_obj_xdir (
	DIR* dp,			/* Blank directory object to be used to access containing directory */
	const FFOBJID* obj	/* Object with its containing directory information */
)
{
 800ccbe:	b5b0      	push	{r4, r5, r7, lr}
 800ccc0:	b084      	sub	sp, #16
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
 800ccc6:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800ccc8:	6839      	ldr	r1, [r7, #0]
 800ccca:	6808      	ldr	r0, [r1, #0]
 800cccc:	6879      	ldr	r1, [r7, #4]
 800ccce:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800ccd0:	6839      	ldr	r1, [r7, #0]
 800ccd2:	6a08      	ldr	r0, [r1, #32]
 800ccd4:	6879      	ldr	r1, [r7, #4]
 800ccd6:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800ccd8:	6839      	ldr	r1, [r7, #0]
 800ccda:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800ccdc:	b2c8      	uxtb	r0, r1
 800ccde:	6879      	ldr	r1, [r7, #4]
 800cce0:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800cce2:	6839      	ldr	r1, [r7, #0]
 800cce4:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800cce6:	2000      	movs	r0, #0
 800cce8:	460c      	mov	r4, r1
 800ccea:	4605      	mov	r5, r0
 800ccec:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	6879      	ldr	r1, [r7, #4]
 800ccf4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->obj.n_frag = 0;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	61da      	str	r2, [r3, #28]
	dp->blk_ofs = obj->c_ofs;
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f7ff fab2 	bl	800c276 <dir_sdi>
 800cd12:	4603      	mov	r3, r0
 800cd14:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cd16:	7bfb      	ldrb	r3, [r7, #15]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d104      	bne.n	800cd26 <load_obj_xdir+0x68>
		res = load_xdir(dp);		/* Load the object's entry block */
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f7ff fedd 	bl	800cadc <load_xdir>
 800cd22:	4603      	mov	r3, r0
 800cd24:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800cd26:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3710      	adds	r7, #16
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bdb0      	pop	{r4, r5, r7, pc}

0800cd30 <store_xdir>:
/*----------------------------------------*/

static FRESULT store_xdir (
	DIR* dp				/* Pointer to the directory object */
)
{
 800cd30:	b590      	push	{r4, r7, lr}
 800cd32:	b087      	sub	sp, #28
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the entry set 85+C0+C1s */
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	691b      	ldr	r3, [r3, #16]
 800cd3e:	60fb      	str	r3, [r7, #12]


	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));	/* Create check sum */
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	1c9c      	adds	r4, r3, #2
 800cd44:	68f8      	ldr	r0, [r7, #12]
 800cd46:	f7ff fe63 	bl	800ca10 <xdir_sum>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	4620      	mov	r0, r4
 800cd50:	f7fe fa02 	bl	800b158 <st_word>

	/* Store the entry set to the directory */
	nent = dirb[XDIR_NumSec] + 1;	/* Number of entries */
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	3301      	adds	r3, #1
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	613b      	str	r3, [r7, #16]
	res = dir_sdi(dp, dp->blk_ofs);	/* Top of the entry set */
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd62:	4619      	mov	r1, r3
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f7ff fa86 	bl	800c276 <dir_sdi>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800cd6e:	e026      	b.n	800cdbe <store_xdir+0x8e>
		/* Set an entry to the directory */
		res = move_window(dp->obj.fs, dp->sect);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681a      	ldr	r2, [r3, #0]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd78:	4619      	mov	r1, r3
 800cd7a:	4610      	mov	r0, r2
 800cd7c:	f7fe fb86 	bl	800b48c <move_window>
 800cd80:	4603      	mov	r3, r0
 800cd82:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cd84:	7dfb      	ldrb	r3, [r7, #23]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d11d      	bne.n	800cdc6 <store_xdir+0x96>
		memcpy(dp->dir, dirb, SZDIRE);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd8e:	2220      	movs	r2, #32
 800cd90:	68f9      	ldr	r1, [r7, #12]
 800cd92:	4618      	mov	r0, r3
 800cd94:	f004 fd16 	bl	80117c4 <memcpy>
		dp->obj.fs->wflag = 1;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	711a      	strb	r2, [r3, #4]

		if (--nent == 0) break;	/* All done? */
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	3b01      	subs	r3, #1
 800cda4:	613b      	str	r3, [r7, #16]
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d00e      	beq.n	800cdca <store_xdir+0x9a>
		dirb += SZDIRE;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	3320      	adds	r3, #32
 800cdb0:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);	/* Next entry */
 800cdb2:	2100      	movs	r1, #0
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f7ff fae4 	bl	800c382 <dir_next>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800cdbe:	7dfb      	ldrb	r3, [r7, #23]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d0d5      	beq.n	800cd70 <store_xdir+0x40>
 800cdc4:	e002      	b.n	800cdcc <store_xdir+0x9c>
		if (res != FR_OK) break;
 800cdc6:	bf00      	nop
 800cdc8:	e000      	b.n	800cdcc <store_xdir+0x9c>
		if (--nent == 0) break;	/* All done? */
 800cdca:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800cdcc:	7dfb      	ldrb	r3, [r7, #23]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d002      	beq.n	800cdd8 <store_xdir+0xa8>
 800cdd2:	7dfb      	ldrb	r3, [r7, #23]
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d101      	bne.n	800cddc <store_xdir+0xac>
 800cdd8:	7dfb      	ldrb	r3, [r7, #23]
 800cdda:	e000      	b.n	800cdde <store_xdir+0xae>
 800cddc:	2302      	movs	r3, #2
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	371c      	adds	r7, #28
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd90      	pop	{r4, r7, pc}

0800cde6 <create_xdir>:

static void create_xdir (
	BYTE* dirb,			/* Pointer to the directory entry block buffer */
	const WCHAR* lfn	/* Pointer to the object name */
)
{
 800cde6:	b590      	push	{r4, r7, lr}
 800cde8:	b085      	sub	sp, #20
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
 800cdee:	6039      	str	r1, [r7, #0]
	BYTE n_c1, nlen;
	WCHAR chr;


	/* Create file-directory and stream-extension entry (1st and 2nd entry) */
	memset(dirb, 0, 2 * SZDIRE);
 800cdf0:	2240      	movs	r2, #64	@ 0x40
 800cdf2:	2100      	movs	r1, #0
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f004 fca3 	bl	8011740 <memset>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2285      	movs	r2, #133	@ 0x85
 800cdfe:	701a      	strb	r2, [r3, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	3320      	adds	r3, #32
 800ce04:	22c0      	movs	r2, #192	@ 0xc0
 800ce06:	701a      	strb	r2, [r3, #0]

	/* Create file name entries (3rd enrty and follows) */
	i = SZDIRE * 2;	/* Top of file name entries */
 800ce08:	2340      	movs	r3, #64	@ 0x40
 800ce0a:	60fb      	str	r3, [r7, #12]
	nlen = n_c1 = 0; chr = 1;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	72fb      	strb	r3, [r7, #11]
 800ce10:	7afb      	ldrb	r3, [r7, #11]
 800ce12:	72bb      	strb	r3, [r7, #10]
 800ce14:	2301      	movs	r3, #1
 800ce16:	813b      	strh	r3, [r7, #8]
	do {
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	1c5a      	adds	r2, r3, #1
 800ce1c:	60fa      	str	r2, [r7, #12]
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	4413      	add	r3, r2
 800ce22:	22c1      	movs	r2, #193	@ 0xc1
 800ce24:	701a      	strb	r2, [r3, #0]
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	1c5a      	adds	r2, r3, #1
 800ce2a:	60fa      	str	r2, [r7, #12]
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	4413      	add	r3, r2
 800ce30:	2200      	movs	r2, #0
 800ce32:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr != 0 && (chr = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 800ce34:	893b      	ldrh	r3, [r7, #8]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d00b      	beq.n	800ce52 <create_xdir+0x6c>
 800ce3a:	7abb      	ldrb	r3, [r7, #10]
 800ce3c:	005b      	lsls	r3, r3, #1
 800ce3e:	683a      	ldr	r2, [r7, #0]
 800ce40:	4413      	add	r3, r2
 800ce42:	881b      	ldrh	r3, [r3, #0]
 800ce44:	813b      	strh	r3, [r7, #8]
 800ce46:	893b      	ldrh	r3, [r7, #8]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d002      	beq.n	800ce52 <create_xdir+0x6c>
 800ce4c:	7abb      	ldrb	r3, [r7, #10]
 800ce4e:	3301      	adds	r3, #1
 800ce50:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 	/* Store it */
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	4413      	add	r3, r2
 800ce58:	893a      	ldrh	r2, [r7, #8]
 800ce5a:	4611      	mov	r1, r2
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7fe f97b 	bl	800b158 <st_word>
			i += 2;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	3302      	adds	r3, #2
 800ce66:	60fb      	str	r3, [r7, #12]
		} while (i % SZDIRE != 0);
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f003 031f 	and.w	r3, r3, #31
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d1e0      	bne.n	800ce34 <create_xdir+0x4e>
		n_c1++;
 800ce72:	7afb      	ldrb	r3, [r7, #11]
 800ce74:	3301      	adds	r3, #1
 800ce76:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nlen]);	/* Fill next C1 entry if any char follows */
 800ce78:	7abb      	ldrb	r3, [r7, #10]
 800ce7a:	005b      	lsls	r3, r3, #1
 800ce7c:	683a      	ldr	r2, [r7, #0]
 800ce7e:	4413      	add	r3, r2
 800ce80:	881b      	ldrh	r3, [r3, #0]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d1c8      	bne.n	800ce18 <create_xdir+0x32>

	dirb[XDIR_NumName] = nlen;		/* Set name length */
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	3323      	adds	r3, #35	@ 0x23
 800ce8a:	7aba      	ldrb	r2, [r7, #10]
 800ce8c:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = 1 + n_c1;	/* Set secondary count (C0 + C1s) */
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	3301      	adds	r3, #1
 800ce92:	7afa      	ldrb	r2, [r7, #11]
 800ce94:	3201      	adds	r2, #1
 800ce96:	b2d2      	uxtb	r2, r2
 800ce98:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800cea0:	6838      	ldr	r0, [r7, #0]
 800cea2:	f7ff fde7 	bl	800ca74 <xname_sum>
 800cea6:	4603      	mov	r3, r0
 800cea8:	4619      	mov	r1, r3
 800ceaa:	4620      	mov	r0, r4
 800ceac:	f7fe f954 	bl	800b158 <st_word>
}
 800ceb0:	bf00      	nop
 800ceb2:	3714      	adds	r7, #20
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd90      	pop	{r4, r7, pc}

0800ceb8 <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b086      	sub	sp, #24
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800cec2:	2304      	movs	r3, #4
 800cec4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	613b      	str	r3, [r7, #16]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 800cecc:	23ff      	movs	r3, #255	@ 0xff
 800cece:	757b      	strb	r3, [r7, #21]
 800ced0:	23ff      	movs	r3, #255	@ 0xff
 800ced2:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800ced4:	e09f      	b.n	800d016 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ceda:	4619      	mov	r1, r3
 800cedc:	6938      	ldr	r0, [r7, #16]
 800cede:	f7fe fad5 	bl	800b48c <move_window>
 800cee2:	4603      	mov	r3, r0
 800cee4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cee6:	7dfb      	ldrb	r3, [r7, #23]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	f040 809a 	bne.w	800d022 <dir_read+0x16a>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	75bb      	strb	r3, [r7, #22]
		if (b == 0) {
 800cef6:	7dbb      	ldrb	r3, [r7, #22]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d102      	bne.n	800cf02 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800cefc:	2304      	movs	r3, #4
 800cefe:	75fb      	strb	r3, [r7, #23]
 800cf00:	e096      	b.n	800d030 <dir_read+0x178>
		}
#if FF_FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	2b04      	cmp	r3, #4
 800cf08:	d118      	bne.n	800cf3c <dir_read+0x84>
			if (FF_USE_LABEL && vol) {
				if (b == ET_VLABEL) break;	/* Volume label entry? */
			} else {
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 800cf0a:	7dbb      	ldrb	r3, [r7, #22]
 800cf0c:	2b85      	cmp	r3, #133	@ 0x85
 800cf0e:	d179      	bne.n	800d004 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f7ff fddf 	bl	800cadc <load_xdir>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800cf22:	7dfb      	ldrb	r3, [r7, #23]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d17e      	bne.n	800d026 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	691b      	ldr	r3, [r3, #16]
 800cf2c:	3304      	adds	r3, #4
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cf34:	b2da      	uxtb	r2, r3
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	719a      	strb	r2, [r3, #6]
					}
					break;
 800cf3a:	e074      	b.n	800d026 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf40:	330b      	adds	r3, #11
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cf48:	73fb      	strb	r3, [r7, #15]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	7bfa      	ldrb	r2, [r7, #15]
 800cf4e:	719a      	strb	r2, [r3, #6]
#if FF_USE_LFN		/* LFN configuration */
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800cf50:	7dbb      	ldrb	r3, [r7, #22]
 800cf52:	2be5      	cmp	r3, #229	@ 0xe5
 800cf54:	d00e      	beq.n	800cf74 <dir_read+0xbc>
 800cf56:	7dbb      	ldrb	r3, [r7, #22]
 800cf58:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf5a:	d00b      	beq.n	800cf74 <dir_read+0xbc>
 800cf5c:	7bfb      	ldrb	r3, [r7, #15]
 800cf5e:	f023 0320 	bic.w	r3, r3, #32
 800cf62:	2b08      	cmp	r3, #8
 800cf64:	bf0c      	ite	eq
 800cf66:	2301      	moveq	r3, #1
 800cf68:	2300      	movne	r3, #0
 800cf6a:	b2db      	uxtb	r3, r3
 800cf6c:	461a      	mov	r2, r3
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d002      	beq.n	800cf7a <dir_read+0xc2>
				ord = 0xFF;
 800cf74:	23ff      	movs	r3, #255	@ 0xff
 800cf76:	757b      	strb	r3, [r7, #21]
 800cf78:	e044      	b.n	800d004 <dir_read+0x14c>
			} else {
				if (attr == AM_LFN) {	/* An LFN entry is found */
 800cf7a:	7bfb      	ldrb	r3, [r7, #15]
 800cf7c:	2b0f      	cmp	r3, #15
 800cf7e:	d12f      	bne.n	800cfe0 <dir_read+0x128>
					if (b & LLEF) {		/* Is it start of an LFN sequence? */
 800cf80:	7dbb      	ldrb	r3, [r7, #22]
 800cf82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d00d      	beq.n	800cfa6 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf8e:	7b5b      	ldrb	r3, [r3, #13]
 800cf90:	753b      	strb	r3, [r7, #20]
						b &= (BYTE)~LLEF; ord = b;
 800cf92:	7dbb      	ldrb	r3, [r7, #22]
 800cf94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf98:	75bb      	strb	r3, [r7, #22]
 800cf9a:	7dbb      	ldrb	r3, [r7, #22]
 800cf9c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cfa6:	7dba      	ldrb	r2, [r7, #22]
 800cfa8:	7d7b      	ldrb	r3, [r7, #21]
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d115      	bne.n	800cfda <dir_read+0x122>
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfb2:	330d      	adds	r3, #13
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	7d3a      	ldrb	r2, [r7, #20]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d10e      	bne.n	800cfda <dir_read+0x122>
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	68da      	ldr	r2, [r3, #12]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	4610      	mov	r0, r2
 800cfc8:	f7ff fb8c 	bl	800c6e4 <pick_lfn>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d003      	beq.n	800cfda <dir_read+0x122>
 800cfd2:	7d7b      	ldrb	r3, [r7, #21]
 800cfd4:	3b01      	subs	r3, #1
 800cfd6:	b2db      	uxtb	r3, r3
 800cfd8:	e000      	b.n	800cfdc <dir_read+0x124>
 800cfda:	23ff      	movs	r3, #255	@ 0xff
 800cfdc:	757b      	strb	r3, [r7, #21]
 800cfde:	e011      	b.n	800d004 <dir_read+0x14c>
				} else {				/* An SFN entry is found */
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800cfe0:	7d7b      	ldrb	r3, [r7, #21]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d109      	bne.n	800cffa <dir_read+0x142>
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7ff fcef 	bl	800c9ce <sum_sfn>
 800cff0:	4603      	mov	r3, r0
 800cff2:	461a      	mov	r2, r3
 800cff4:	7d3b      	ldrb	r3, [r7, #20]
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d017      	beq.n	800d02a <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f04f 32ff 	mov.w	r2, #4294967295
 800d000:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800d002:	e012      	b.n	800d02a <dir_read+0x172>
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d004:	2100      	movs	r1, #0
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f7ff f9bb 	bl	800c382 <dir_next>
 800d00c:	4603      	mov	r3, r0
 800d00e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d010:	7dfb      	ldrb	r3, [r7, #23]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d10b      	bne.n	800d02e <dir_read+0x176>
	while (dp->sect) {
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	f47f af5b 	bne.w	800ced6 <dir_read+0x1e>
 800d020:	e006      	b.n	800d030 <dir_read+0x178>
		if (res != FR_OK) break;
 800d022:	bf00      	nop
 800d024:	e004      	b.n	800d030 <dir_read+0x178>
					break;
 800d026:	bf00      	nop
 800d028:	e002      	b.n	800d030 <dir_read+0x178>
					break;
 800d02a:	bf00      	nop
 800d02c:	e000      	b.n	800d030 <dir_read+0x178>
		if (res != FR_OK) break;
 800d02e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d030:	7dfb      	ldrb	r3, [r7, #23]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d002      	beq.n	800d03c <dir_read+0x184>
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2200      	movs	r2, #0
 800d03a:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800d03c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3718      	adds	r7, #24
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}

0800d046 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 800d046:	b590      	push	{r4, r7, lr}
 800d048:	b089      	sub	sp, #36	@ 0x24
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d054:	2100      	movs	r1, #0
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f7ff f90d 	bl	800c276 <dir_sdi>
 800d05c:	4603      	mov	r3, r0
 800d05e:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800d060:	7ffb      	ldrb	r3, [r7, #31]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d001      	beq.n	800d06a <dir_find+0x24>
 800d066:	7ffb      	ldrb	r3, [r7, #31]
 800d068:	e112      	b.n	800d290 <dir_find+0x24a>
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	2b04      	cmp	r3, #4
 800d070:	d164      	bne.n	800d13c <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	68db      	ldr	r3, [r3, #12]
 800d076:	4618      	mov	r0, r3
 800d078:	f7ff fcfc 	bl	800ca74 <xname_sum>
 800d07c:	4603      	mov	r3, r0
 800d07e:	813b      	strh	r3, [r7, #8]

		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 800d080:	e04f      	b.n	800d122 <dir_find+0xdc>
#if FF_MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > FF_MAX_LFN) continue;		/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	691b      	ldr	r3, [r3, #16]
 800d086:	3324      	adds	r3, #36	@ 0x24
 800d088:	4618      	mov	r0, r3
 800d08a:	f7fd ff4f 	bl	800af2c <ld_word>
 800d08e:	4603      	mov	r3, r0
 800d090:	461a      	mov	r2, r3
 800d092:	893b      	ldrh	r3, [r7, #8]
 800d094:	4293      	cmp	r3, r2
 800d096:	d143      	bne.n	800d120 <dir_find+0xda>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	691b      	ldr	r3, [r3, #16]
 800d09c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800d0a0:	76fb      	strb	r3, [r7, #27]
 800d0a2:	2340      	movs	r3, #64	@ 0x40
 800d0a4:	617b      	str	r3, [r7, #20]
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	613b      	str	r3, [r7, #16]
 800d0aa:	e028      	b.n	800d0fe <dir_find+0xb8>
				if ((di % SZDIRE) == 0) di += 2;
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	f003 031f 	and.w	r3, r3, #31
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d102      	bne.n	800d0bc <dir_find+0x76>
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	3302      	adds	r3, #2
 800d0ba:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	691a      	ldr	r2, [r3, #16]
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	4413      	add	r3, r2
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7fd ff31 	bl	800af2c <ld_word>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f002 fd6b 	bl	800fba8 <ff_wtoupper>
 800d0d2:	4604      	mov	r4, r0
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	68da      	ldr	r2, [r3, #12]
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	005b      	lsls	r3, r3, #1
 800d0dc:	4413      	add	r3, r2
 800d0de:	881b      	ldrh	r3, [r3, #0]
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f002 fd61 	bl	800fba8 <ff_wtoupper>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	429c      	cmp	r4, r3
 800d0ea:	d10c      	bne.n	800d106 <dir_find+0xc0>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800d0ec:	7efb      	ldrb	r3, [r7, #27]
 800d0ee:	3b01      	subs	r3, #1
 800d0f0:	76fb      	strb	r3, [r7, #27]
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	3302      	adds	r3, #2
 800d0f6:	617b      	str	r3, [r7, #20]
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	613b      	str	r3, [r7, #16]
 800d0fe:	7efb      	ldrb	r3, [r7, #27]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d1d3      	bne.n	800d0ac <dir_find+0x66>
 800d104:	e000      	b.n	800d108 <dir_find+0xc2>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800d106:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800d108:	7efb      	ldrb	r3, [r7, #27]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d109      	bne.n	800d122 <dir_find+0xdc>
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	68da      	ldr	r2, [r3, #12]
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	005b      	lsls	r3, r3, #1
 800d116:	4413      	add	r3, r2
 800d118:	881b      	ldrh	r3, [r3, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d00b      	beq.n	800d136 <dir_find+0xf0>
 800d11e:	e000      	b.n	800d122 <dir_find+0xdc>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800d120:	bf00      	nop
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 800d122:	2100      	movs	r1, #0
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f7ff fec7 	bl	800ceb8 <dir_read>
 800d12a:	4603      	mov	r3, r0
 800d12c:	77fb      	strb	r3, [r7, #31]
 800d12e:	7ffb      	ldrb	r3, [r7, #31]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d0a6      	beq.n	800d082 <dir_find+0x3c>
 800d134:	e000      	b.n	800d138 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800d136:	bf00      	nop
		}
		return res;
 800d138:	7ffb      	ldrb	r3, [r7, #31]
 800d13a:	e0a9      	b.n	800d290 <dir_find+0x24a>
	}
#endif
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d13c:	23ff      	movs	r3, #255	@ 0xff
 800d13e:	773b      	strb	r3, [r7, #28]
 800d140:	7f3b      	ldrb	r3, [r7, #28]
 800d142:	777b      	strb	r3, [r7, #29]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f04f 32ff 	mov.w	r2, #4294967295
 800d14a:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d150:	4619      	mov	r1, r3
 800d152:	68f8      	ldr	r0, [r7, #12]
 800d154:	f7fe f99a 	bl	800b48c <move_window>
 800d158:	4603      	mov	r3, r0
 800d15a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800d15c:	7ffb      	ldrb	r3, [r7, #31]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	f040 8090 	bne.w	800d284 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached end of directory table */
 800d16c:	7fbb      	ldrb	r3, [r7, #30]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d102      	bne.n	800d178 <dir_find+0x132>
 800d172:	2304      	movs	r3, #4
 800d174:	77fb      	strb	r3, [r7, #31]
 800d176:	e08a      	b.n	800d28e <dir_find+0x248>
#if FF_USE_LFN		/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d17c:	330b      	adds	r3, #11
 800d17e:	781b      	ldrb	r3, [r3, #0]
 800d180:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d184:	72fb      	strb	r3, [r7, #11]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	7afa      	ldrb	r2, [r7, #11]
 800d18a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d18c:	7fbb      	ldrb	r3, [r7, #30]
 800d18e:	2be5      	cmp	r3, #229	@ 0xe5
 800d190:	d007      	beq.n	800d1a2 <dir_find+0x15c>
 800d192:	7afb      	ldrb	r3, [r7, #11]
 800d194:	f003 0308 	and.w	r3, r3, #8
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d009      	beq.n	800d1b0 <dir_find+0x16a>
 800d19c:	7afb      	ldrb	r3, [r7, #11]
 800d19e:	2b0f      	cmp	r3, #15
 800d1a0:	d006      	beq.n	800d1b0 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d1a2:	23ff      	movs	r3, #255	@ 0xff
 800d1a4:	777b      	strb	r3, [r7, #29]
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ac:	64da      	str	r2, [r3, #76]	@ 0x4c
 800d1ae:	e05e      	b.n	800d26e <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* Is it an LFN entry? */
 800d1b0:	7afb      	ldrb	r3, [r7, #11]
 800d1b2:	2b0f      	cmp	r3, #15
 800d1b4:	d136      	bne.n	800d224 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800d1bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d154      	bne.n	800d26e <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of an entry set? */
 800d1c4:	7fbb      	ldrb	r3, [r7, #30]
 800d1c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d00d      	beq.n	800d1ea <dir_find+0x1a4>
						c &= (BYTE)~LLEF;
 800d1ce:	7fbb      	ldrb	r3, [r7, #30]
 800d1d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d1d4:	77bb      	strb	r3, [r7, #30]
						ord = c;					/* Number of LFN entries */
 800d1d6:	7fbb      	ldrb	r3, [r7, #30]
 800d1d8:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;		/* Start offset of LFN */
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	64da      	str	r2, [r3, #76]	@ 0x4c
						sum = dp->dir[LDIR_Chksum];	/* Sum of the SFN */
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1e6:	7b5b      	ldrb	r3, [r3, #13]
 800d1e8:	773b      	strb	r3, [r7, #28]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d1ea:	7fba      	ldrb	r2, [r7, #30]
 800d1ec:	7f7b      	ldrb	r3, [r7, #29]
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	d115      	bne.n	800d21e <dir_find+0x1d8>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1f6:	330d      	adds	r3, #13
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	7f3a      	ldrb	r2, [r7, #28]
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d10e      	bne.n	800d21e <dir_find+0x1d8>
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	68da      	ldr	r2, [r3, #12]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d208:	4619      	mov	r1, r3
 800d20a:	4610      	mov	r0, r2
 800d20c:	f7ff f9fa 	bl	800c604 <cmp_lfn>
 800d210:	4603      	mov	r3, r0
 800d212:	2b00      	cmp	r3, #0
 800d214:	d003      	beq.n	800d21e <dir_find+0x1d8>
 800d216:	7f7b      	ldrb	r3, [r7, #29]
 800d218:	3b01      	subs	r3, #1
 800d21a:	b2db      	uxtb	r3, r3
 800d21c:	e000      	b.n	800d220 <dir_find+0x1da>
 800d21e:	23ff      	movs	r3, #255	@ 0xff
 800d220:	777b      	strb	r3, [r7, #29]
 800d222:	e024      	b.n	800d26e <dir_find+0x228>
				}
			} else {					/* SFN entry */
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d224:	7f7b      	ldrb	r3, [r7, #29]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d109      	bne.n	800d23e <dir_find+0x1f8>
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d22e:	4618      	mov	r0, r3
 800d230:	f7ff fbcd 	bl	800c9ce <sum_sfn>
 800d234:	4603      	mov	r3, r0
 800d236:	461a      	mov	r2, r3
 800d238:	7f3b      	ldrb	r3, [r7, #28]
 800d23a:	4293      	cmp	r3, r2
 800d23c:	d024      	beq.n	800d288 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800d244:	f003 0301 	and.w	r3, r3, #1
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d10a      	bne.n	800d262 <dir_find+0x21c>
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	3340      	adds	r3, #64	@ 0x40
 800d254:	220b      	movs	r2, #11
 800d256:	4619      	mov	r1, r3
 800d258:	f004 fa48 	bl	80116ec <memcmp>
 800d25c:	4603      	mov	r3, r0
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d014      	beq.n	800d28c <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Not matched, reset LFN sequence */
 800d262:	23ff      	movs	r3, #255	@ 0xff
 800d264:	777b      	strb	r3, [r7, #29]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f04f 32ff 	mov.w	r2, #4294967295
 800d26c:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d26e:	2100      	movs	r1, #0
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f7ff f886 	bl	800c382 <dir_next>
 800d276:	4603      	mov	r3, r0
 800d278:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800d27a:	7ffb      	ldrb	r3, [r7, #31]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	f43f af65 	beq.w	800d14c <dir_find+0x106>
 800d282:	e004      	b.n	800d28e <dir_find+0x248>
		if (res != FR_OK) break;
 800d284:	bf00      	nop
 800d286:	e002      	b.n	800d28e <dir_find+0x248>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d288:	bf00      	nop
 800d28a:	e000      	b.n	800d28e <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d28c:	bf00      	nop

	return res;
 800d28e:	7ffb      	ldrb	r3, [r7, #31]
}
 800d290:	4618      	mov	r0, r3
 800d292:	3724      	adds	r7, #36	@ 0x24
 800d294:	46bd      	mov	sp, r7
 800d296:	bd90      	pop	{r4, r7, pc}

0800d298 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 800d298:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d29c:	b0a0      	sub	sp, #128	@ 0x80
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if FF_USE_LFN		/* LFN configuration */
	UINT n, len, n_ent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800d2ae:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d001      	beq.n	800d2ba <dir_register+0x22>
 800d2b6:	2306      	movs	r3, #6
 800d2b8:	e194      	b.n	800d5e4 <dir_register+0x34c>
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	677b      	str	r3, [r7, #116]	@ 0x74
 800d2be:	e002      	b.n	800d2c6 <dir_register+0x2e>
 800d2c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	677b      	str	r3, [r7, #116]	@ 0x74
 800d2c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d2c8:	68da      	ldr	r2, [r3, #12]
 800d2ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d2cc:	005b      	lsls	r3, r3, #1
 800d2ce:	4413      	add	r3, r2
 800d2d0:	881b      	ldrh	r3, [r3, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d1f4      	bne.n	800d2c0 <dir_register+0x28>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d2d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	2b04      	cmp	r3, #4
 800d2dc:	f040 80a6 	bne.w	800d42c <dir_register+0x194>
		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800d2e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d2e2:	330e      	adds	r3, #14
 800d2e4:	4aa5      	ldr	r2, [pc, #660]	@ (800d57c <dir_register+0x2e4>)
 800d2e6:	fba2 2303 	umull	r2, r3, r2, r3
 800d2ea:	08db      	lsrs	r3, r3, #3
 800d2ec:	3302      	adds	r3, #2
 800d2ee:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
 800d2f0:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f7ff f8ea 	bl	800c4cc <dir_alloc>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 800d2fe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d302:	2b00      	cmp	r3, #0
 800d304:	d002      	beq.n	800d30c <dir_register+0x74>
 800d306:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d30a:	e16b      	b.n	800d5e4 <dir_register+0x34c>
		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d310:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d312:	3b01      	subs	r3, #1
 800d314:	015b      	lsls	r3, r3, #5
 800d316:	1ad2      	subs	r2, r2, r3
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	79db      	ldrb	r3, [r3, #7]
 800d320:	f003 0304 	and.w	r3, r3, #4
 800d324:	2b00      	cmp	r3, #0
 800d326:	d077      	beq.n	800d418 <dir_register+0x180>
			dp->obj.stat &= ~4;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	79db      	ldrb	r3, [r3, #7]
 800d32c:	f023 0304 	bic.w	r3, r3, #4
 800d330:	b2da      	uxtb	r2, r3
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	71da      	strb	r2, [r3, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	4618      	mov	r0, r3
 800d33a:	f7fe fcd3 	bl	800bce4 <fill_first_frag>
 800d33e:	4603      	mov	r3, r0
 800d340:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800d344:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d002      	beq.n	800d352 <dir_register+0xba>
 800d34c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d350:	e148      	b.n	800d5e4 <dir_register+0x34c>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d358:	f04f 32ff 	mov.w	r2, #4294967295
 800d35c:	4619      	mov	r1, r3
 800d35e:	f7fe fcf0 	bl	800bd42 <fill_last_frag>
 800d362:	4603      	mov	r3, r0
 800d364:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800d368:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d002      	beq.n	800d376 <dir_register+0xde>
 800d370:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d374:	e136      	b.n	800d5e4 <dir_register+0x34c>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	689b      	ldr	r3, [r3, #8]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d04c      	beq.n	800d418 <dir_register+0x180>
				DIR dj;

				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
 800d37e:	687a      	ldr	r2, [r7, #4]
 800d380:	f107 0308 	add.w	r3, r7, #8
 800d384:	4611      	mov	r1, r2
 800d386:	4618      	mov	r0, r3
 800d388:	f7ff fc99 	bl	800ccbe <load_obj_xdir>
 800d38c:	4603      	mov	r3, r0
 800d38e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) return res;
 800d392:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d396:	2b00      	cmp	r3, #0
 800d398:	d002      	beq.n	800d3a0 <dir_register+0x108>
 800d39a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d39e:	e121      	b.n	800d5e4 <dir_register+0x34c>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d3a6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d3a8:	8949      	ldrh	r1, [r1, #10]
 800d3aa:	0249      	lsls	r1, r1, #9
 800d3ac:	2000      	movs	r0, #0
 800d3ae:	460c      	mov	r4, r1
 800d3b0:	4605      	mov	r5, r0
 800d3b2:	eb12 0804 	adds.w	r8, r2, r4
 800d3b6:	eb43 0905 	adc.w	r9, r3, r5
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	e9c3 8904 	strd	r8, r9, [r3, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 800d3c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3c2:	691b      	ldr	r3, [r3, #16]
 800d3c4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d3ce:	4608      	mov	r0, r1
 800d3d0:	f7fd ff09 	bl	800b1e6 <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800d3d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3d6:	691b      	ldr	r3, [r3, #16]
 800d3d8:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d3e2:	4608      	mov	r0, r1
 800d3e4:	f7fd feff 	bl	800b1e6 <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;		/* Update the allocation status */
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	79da      	ldrb	r2, [r3, #7]
 800d3ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3ee:	691b      	ldr	r3, [r3, #16]
 800d3f0:	3321      	adds	r3, #33	@ 0x21
 800d3f2:	f042 0201 	orr.w	r2, r2, #1
 800d3f6:	b2d2      	uxtb	r2, r2
 800d3f8:	701a      	strb	r2, [r3, #0]
				res = store_xdir(&dj);				/* Store the object status */
 800d3fa:	f107 0308 	add.w	r3, r7, #8
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7ff fc96 	bl	800cd30 <store_xdir>
 800d404:	4603      	mov	r3, r0
 800d406:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) return res;
 800d40a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d002      	beq.n	800d418 <dir_register+0x180>
 800d412:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d416:	e0e5      	b.n	800d5e4 <dir_register+0x34c>
			}
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800d418:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d41a:	691a      	ldr	r2, [r3, #16]
 800d41c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d41e:	68db      	ldr	r3, [r3, #12]
 800d420:	4619      	mov	r1, r3
 800d422:	4610      	mov	r0, r2
 800d424:	f7ff fcdf 	bl	800cde6 <create_xdir>
		return FR_OK;
 800d428:	2300      	movs	r3, #0
 800d42a:	e0db      	b.n	800d5e4 <dir_register+0x34c>
	}
#endif
	/* On the FAT/FAT32 volume */
	memcpy(sn, dp->fn, 12);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800d432:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800d436:	6810      	ldr	r0, [r2, #0]
 800d438:	6851      	ldr	r1, [r2, #4]
 800d43a:	6892      	ldr	r2, [r2, #8]
 800d43c:	c307      	stmia	r3!, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d43e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d442:	f003 0301 	and.w	r3, r3, #1
 800d446:	2b00      	cmp	r3, #0
 800d448:	d033      	beq.n	800d4b2 <dir_register+0x21a>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2240      	movs	r2, #64	@ 0x40
 800d44e:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 800d452:	2301      	movs	r3, #1
 800d454:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d456:	e016      	b.n	800d486 <dir_register+0x1ee>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800d45e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d460:	68da      	ldr	r2, [r3, #12]
 800d462:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800d466:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d468:	f7ff fa0c 	bl	800c884 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f7ff fdea 	bl	800d046 <dir_find>
 800d472:	4603      	mov	r3, r0
 800d474:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 800d478:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d106      	bne.n	800d48e <dir_register+0x1f6>
		for (n = 1; n < 100; n++) {
 800d480:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d482:	3301      	adds	r3, #1
 800d484:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d486:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d488:	2b63      	cmp	r3, #99	@ 0x63
 800d48a:	d9e5      	bls.n	800d458 <dir_register+0x1c0>
 800d48c:	e000      	b.n	800d490 <dir_register+0x1f8>
			if (res != FR_OK) break;
 800d48e:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d490:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d492:	2b64      	cmp	r3, #100	@ 0x64
 800d494:	d101      	bne.n	800d49a <dir_register+0x202>
 800d496:	2307      	movs	r3, #7
 800d498:	e0a4      	b.n	800d5e4 <dir_register+0x34c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d49a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d49e:	2b04      	cmp	r3, #4
 800d4a0:	d002      	beq.n	800d4a8 <dir_register+0x210>
 800d4a2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d4a6:	e09d      	b.n	800d5e4 <dir_register+0x34c>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d4a8:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d4b2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d4b6:	f003 0302 	and.w	r3, r3, #2
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d007      	beq.n	800d4ce <dir_register+0x236>
 800d4be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d4c0:	330c      	adds	r3, #12
 800d4c2:	4a2f      	ldr	r2, [pc, #188]	@ (800d580 <dir_register+0x2e8>)
 800d4c4:	fba2 2303 	umull	r2, r3, r2, r3
 800d4c8:	089b      	lsrs	r3, r3, #2
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	e000      	b.n	800d4d0 <dir_register+0x238>
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 800d4d2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f7fe fff9 	bl	800c4cc <dir_alloc>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
 800d4e0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d14e      	bne.n	800d586 <dir_register+0x2ee>
 800d4e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d4ea:	3b01      	subs	r3, #1
 800d4ec:	673b      	str	r3, [r7, #112]	@ 0x70
 800d4ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d048      	beq.n	800d586 <dir_register+0x2ee>
		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d4f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d4fa:	015b      	lsls	r3, r3, #5
 800d4fc:	1ad3      	subs	r3, r2, r3
 800d4fe:	4619      	mov	r1, r3
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f7fe feb8 	bl	800c276 <dir_sdi>
 800d506:	4603      	mov	r3, r0
 800d508:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800d50c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d510:	2b00      	cmp	r3, #0
 800d512:	d138      	bne.n	800d586 <dir_register+0x2ee>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	3340      	adds	r3, #64	@ 0x40
 800d518:	4618      	mov	r0, r3
 800d51a:	f7ff fa58 	bl	800c9ce <sum_sfn>
 800d51e:	4603      	mov	r3, r0
 800d520:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d528:	4619      	mov	r1, r3
 800d52a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d52c:	f7fd ffae 	bl	800b48c <move_window>
 800d530:	4603      	mov	r3, r0
 800d532:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 800d536:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d122      	bne.n	800d584 <dir_register+0x2ec>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 800d53e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d540:	68d8      	ldr	r0, [r3, #12]
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800d546:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d548:	b2da      	uxtb	r2, r3
 800d54a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800d54e:	f7ff f931 	bl	800c7b4 <put_lfn>
				fs->wflag = 1;
 800d552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d554:	2201      	movs	r2, #1
 800d556:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 800d558:	2100      	movs	r1, #0
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f7fe ff11 	bl	800c382 <dir_next>
 800d560:	4603      	mov	r3, r0
 800d562:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --n_ent);
 800d566:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d10b      	bne.n	800d586 <dir_register+0x2ee>
 800d56e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d570:	3b01      	subs	r3, #1
 800d572:	673b      	str	r3, [r7, #112]	@ 0x70
 800d574:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d576:	2b00      	cmp	r3, #0
 800d578:	d1d4      	bne.n	800d524 <dir_register+0x28c>
 800d57a:	e004      	b.n	800d586 <dir_register+0x2ee>
 800d57c:	88888889 	.word	0x88888889
 800d580:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800d584:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d586:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d128      	bne.n	800d5e0 <dir_register+0x348>
		res = move_window(fs, dp->sect);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d592:	4619      	mov	r1, r3
 800d594:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d596:	f7fd ff79 	bl	800b48c <move_window>
 800d59a:	4603      	mov	r3, r0
 800d59c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800d5a0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d11b      	bne.n	800d5e0 <dir_register+0x348>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5ac:	2220      	movs	r2, #32
 800d5ae:	2100      	movs	r1, #0
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f004 f8c5 	bl	8011740 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	3340      	adds	r3, #64	@ 0x40
 800d5be:	220b      	movs	r2, #11
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	f004 f8ff 	bl	80117c4 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5d0:	330c      	adds	r3, #12
 800d5d2:	f002 0218 	and.w	r2, r2, #24
 800d5d6:	b2d2      	uxtb	r2, r2
 800d5d8:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d5da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5dc:	2201      	movs	r2, #1
 800d5de:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 800d5e0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3780      	adds	r7, #128	@ 0x80
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d5ee:	bf00      	nop

0800d5f0 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b08a      	sub	sp, #40	@ 0x28
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
	DWORD uc;
	UINT i, ni, si, di;


	/* Create LFN into LFN working buffer */
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	60bb      	str	r3, [r7, #8]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	68db      	ldr	r3, [r3, #12]
 800d606:	613b      	str	r3, [r7, #16]
 800d608:	2300      	movs	r3, #0
 800d60a:	617b      	str	r3, [r7, #20]
	for (;;) {
		uc = tchar2uni(&p);			/* Get a character */
 800d60c:	f107 0308 	add.w	r3, r7, #8
 800d610:	4618      	mov	r0, r3
 800d612:	f7fd feba 	bl	800b38a <tchar2uni>
 800d616:	60f8      	str	r0, [r7, #12]
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d61e:	d101      	bne.n	800d624 <create_name+0x34>
 800d620:	2306      	movs	r3, #6
 800d622:	e1b5      	b.n	800d990 <create_name+0x3a0>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d62a:	d309      	bcc.n	800d640 <create_name+0x50>
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	0c19      	lsrs	r1, r3, #16
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	1c5a      	adds	r2, r3, #1
 800d634:	617a      	str	r2, [r7, #20]
 800d636:	005b      	lsls	r3, r3, #1
 800d638:	693a      	ldr	r2, [r7, #16]
 800d63a:	4413      	add	r3, r2
 800d63c:	b28a      	uxth	r2, r1
 800d63e:	801a      	strh	r2, [r3, #0]
		wc = (WCHAR)uc;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 800d644:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d646:	2b1f      	cmp	r3, #31
 800d648:	d920      	bls.n	800d68c <create_name+0x9c>
 800d64a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d64c:	2b2f      	cmp	r3, #47	@ 0x2f
 800d64e:	d01d      	beq.n	800d68c <create_name+0x9c>
 800d650:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d652:	2b5c      	cmp	r3, #92	@ 0x5c
 800d654:	d01a      	beq.n	800d68c <create_name+0x9c>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d656:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d658:	2b7f      	cmp	r3, #127	@ 0x7f
 800d65a:	d809      	bhi.n	800d670 <create_name+0x80>
 800d65c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d65e:	4619      	mov	r1, r3
 800d660:	4891      	ldr	r0, [pc, #580]	@ (800d8a8 <create_name+0x2b8>)
 800d662:	f004 f875 	bl	8011750 <strchr>
 800d666:	4603      	mov	r3, r0
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d001      	beq.n	800d670 <create_name+0x80>
 800d66c:	2306      	movs	r3, #6
 800d66e:	e18f      	b.n	800d990 <create_name+0x3a0>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	2bfe      	cmp	r3, #254	@ 0xfe
 800d674:	d901      	bls.n	800d67a <create_name+0x8a>
 800d676:	2306      	movs	r3, #6
 800d678:	e18a      	b.n	800d990 <create_name+0x3a0>
		lfn[di++] = wc;				/* Store the Unicode character */
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	1c5a      	adds	r2, r3, #1
 800d67e:	617a      	str	r2, [r7, #20]
 800d680:	005b      	lsls	r3, r3, #1
 800d682:	693a      	ldr	r2, [r7, #16]
 800d684:	4413      	add	r3, r2
 800d686:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d688:	801a      	strh	r2, [r3, #0]
		uc = tchar2uni(&p);			/* Get a character */
 800d68a:	e7bf      	b.n	800d60c <create_name+0x1c>
	}
	if (wc < ' ') {				/* Stopped at end of the path? */
 800d68c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d68e:	2b1f      	cmp	r3, #31
 800d690:	d806      	bhi.n	800d6a0 <create_name+0xb0>
		cf = NS_LAST;			/* Last segment */
 800d692:	2304      	movs	r3, #4
 800d694:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d698:	e014      	b.n	800d6c4 <create_name+0xd4>
	} else {					/* Stopped at a separator */
		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	3301      	adds	r3, #1
 800d69e:	60bb      	str	r3, [r7, #8]
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	2b2f      	cmp	r3, #47	@ 0x2f
 800d6a6:	d0f8      	beq.n	800d69a <create_name+0xaa>
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	2b5c      	cmp	r3, #92	@ 0x5c
 800d6ae:	d0f4      	beq.n	800d69a <create_name+0xaa>
		cf = 0;					/* Next segment may follow */
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	2b1f      	cmp	r3, #31
 800d6bc:	d802      	bhi.n	800d6c4 <create_name+0xd4>
 800d6be:	2304      	movs	r3, #4
 800d6c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}
	*path = p;					/* Return pointer to the next segment */
 800d6c4:	68ba      	ldr	r2, [r7, #8]
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	601a      	str	r2, [r3, #0]
		}
		dp->fn[i] = cf | NS_DOT;	/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {					/* Snip off trailing spaces and dots if exist */
 800d6ca:	e011      	b.n	800d6f0 <create_name+0x100>
		wc = lfn[di - 1];
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d6d2:	3b01      	subs	r3, #1
 800d6d4:	005b      	lsls	r3, r3, #1
 800d6d6:	693a      	ldr	r2, [r7, #16]
 800d6d8:	4413      	add	r3, r2
 800d6da:	881b      	ldrh	r3, [r3, #0]
 800d6dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc != ' ' && wc != '.') break;
 800d6de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d6e0:	2b20      	cmp	r3, #32
 800d6e2:	d002      	beq.n	800d6ea <create_name+0xfa>
 800d6e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d6e6:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6e8:	d106      	bne.n	800d6f8 <create_name+0x108>
		di--;
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	3b01      	subs	r3, #1
 800d6ee:	617b      	str	r3, [r7, #20]
	while (di) {					/* Snip off trailing spaces and dots if exist */
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d1ea      	bne.n	800d6cc <create_name+0xdc>
 800d6f6:	e000      	b.n	800d6fa <create_name+0x10a>
		if (wc != ' ' && wc != '.') break;
 800d6f8:	bf00      	nop
	}
	lfn[di] = 0;							/* LFN is created into the working buffer */
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	005b      	lsls	r3, r3, #1
 800d6fe:	693a      	ldr	r2, [r7, #16]
 800d700:	4413      	add	r3, r2
 800d702:	2200      	movs	r2, #0
 800d704:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d101      	bne.n	800d710 <create_name+0x120>
 800d70c:	2306      	movs	r3, #6
 800d70e:	e13f      	b.n	800d990 <create_name+0x3a0>

	/* Create SFN in directory form */
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 800d710:	2300      	movs	r3, #0
 800d712:	61bb      	str	r3, [r7, #24]
 800d714:	e002      	b.n	800d71c <create_name+0x12c>
 800d716:	69bb      	ldr	r3, [r7, #24]
 800d718:	3301      	adds	r3, #1
 800d71a:	61bb      	str	r3, [r7, #24]
 800d71c:	69bb      	ldr	r3, [r7, #24]
 800d71e:	005b      	lsls	r3, r3, #1
 800d720:	693a      	ldr	r2, [r7, #16]
 800d722:	4413      	add	r3, r2
 800d724:	881b      	ldrh	r3, [r3, #0]
 800d726:	2b20      	cmp	r3, #32
 800d728:	d0f5      	beq.n	800d716 <create_name+0x126>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 800d72a:	69bb      	ldr	r3, [r7, #24]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d106      	bne.n	800d73e <create_name+0x14e>
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	005b      	lsls	r3, r3, #1
 800d734:	693a      	ldr	r2, [r7, #16]
 800d736:	4413      	add	r3, r2
 800d738:	881b      	ldrh	r3, [r3, #0]
 800d73a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d73c:	d109      	bne.n	800d752 <create_name+0x162>
 800d73e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d742:	f043 0303 	orr.w	r3, r3, #3
 800d746:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 800d74a:	e002      	b.n	800d752 <create_name+0x162>
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	3b01      	subs	r3, #1
 800d750:	617b      	str	r3, [r7, #20]
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d009      	beq.n	800d76c <create_name+0x17c>
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d75e:	3b01      	subs	r3, #1
 800d760:	005b      	lsls	r3, r3, #1
 800d762:	693a      	ldr	r2, [r7, #16]
 800d764:	4413      	add	r3, r2
 800d766:	881b      	ldrh	r3, [r3, #0]
 800d768:	2b2e      	cmp	r3, #46	@ 0x2e
 800d76a:	d1ef      	bne.n	800d74c <create_name+0x15c>

	memset(dp->fn, ' ', 11);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	3340      	adds	r3, #64	@ 0x40
 800d770:	220b      	movs	r2, #11
 800d772:	2120      	movs	r1, #32
 800d774:	4618      	mov	r0, r3
 800d776:	f003 ffe3 	bl	8011740 <memset>
	i = b = 0; ni = 8;
 800d77a:	2300      	movs	r3, #0
 800d77c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d780:	2300      	movs	r3, #0
 800d782:	623b      	str	r3, [r7, #32]
 800d784:	2308      	movs	r3, #8
 800d786:	61fb      	str	r3, [r7, #28]
	for (;;) {
		wc = lfn[si++];					/* Get an LFN character */
 800d788:	69bb      	ldr	r3, [r7, #24]
 800d78a:	1c5a      	adds	r2, r3, #1
 800d78c:	61ba      	str	r2, [r7, #24]
 800d78e:	005b      	lsls	r3, r3, #1
 800d790:	693a      	ldr	r2, [r7, #16]
 800d792:	4413      	add	r3, r2
 800d794:	881b      	ldrh	r3, [r3, #0]
 800d796:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc == 0) break;				/* Break on end of the LFN */
 800d798:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	f000 80ae 	beq.w	800d8fc <create_name+0x30c>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 800d7a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7a2:	2b20      	cmp	r3, #32
 800d7a4:	d006      	beq.n	800d7b4 <create_name+0x1c4>
 800d7a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7a8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7aa:	d10a      	bne.n	800d7c2 <create_name+0x1d2>
 800d7ac:	69ba      	ldr	r2, [r7, #24]
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d006      	beq.n	800d7c2 <create_name+0x1d2>
			cf |= NS_LOSS | NS_LFN;
 800d7b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d7b8:	f043 0303 	orr.w	r3, r3, #3
 800d7bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			continue;
 800d7c0:	e09b      	b.n	800d8fa <create_name+0x30a>
		}

		if (i >= ni || si == di) {		/* End of field? */
 800d7c2:	6a3a      	ldr	r2, [r7, #32]
 800d7c4:	69fb      	ldr	r3, [r7, #28]
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d203      	bcs.n	800d7d2 <create_name+0x1e2>
 800d7ca:	69ba      	ldr	r2, [r7, #24]
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d123      	bne.n	800d81a <create_name+0x22a>
			if (ni == 11) {				/* Name extension overflow? */
 800d7d2:	69fb      	ldr	r3, [r7, #28]
 800d7d4:	2b0b      	cmp	r3, #11
 800d7d6:	d106      	bne.n	800d7e6 <create_name+0x1f6>
				cf |= NS_LOSS | NS_LFN;
 800d7d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d7dc:	f043 0303 	orr.w	r3, r3, #3
 800d7e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				break;
 800d7e4:	e08d      	b.n	800d902 <create_name+0x312>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 800d7e6:	69ba      	ldr	r2, [r7, #24]
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d005      	beq.n	800d7fa <create_name+0x20a>
 800d7ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d7f2:	f043 0303 	orr.w	r3, r3, #3
 800d7f6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			if (si > di) break;						/* No name extension? */
 800d7fa:	69ba      	ldr	r2, [r7, #24]
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d87e      	bhi.n	800d900 <create_name+0x310>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	61bb      	str	r3, [r7, #24]
 800d806:	2308      	movs	r3, #8
 800d808:	623b      	str	r3, [r7, #32]
 800d80a:	230b      	movs	r3, #11
 800d80c:	61fb      	str	r3, [r7, #28]
 800d80e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d812:	009b      	lsls	r3, r3, #2
 800d814:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			continue;
 800d818:	e06f      	b.n	800d8fa <create_name+0x30a>
		}

		if (wc >= 0x80) {	/* Is this an extended character? */
 800d81a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d81c:	2b7f      	cmp	r3, #127	@ 0x7f
 800d81e:	d911      	bls.n	800d844 <create_name+0x254>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 800d820:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d824:	f043 0302 	orr.w	r3, r3, #2
 800d828:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			}
#elif FF_CODE_PAGE < 900	/* In SBCS cfg */
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
#else						/* In DBCS cfg */
			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
 800d82c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d82e:	4618      	mov	r0, r3
 800d830:	f002 f9ba 	bl	800fba8 <ff_wtoupper>
 800d834:	4603      	mov	r3, r0
 800d836:	f44f 7169 	mov.w	r1, #932	@ 0x3a4
 800d83a:	4618      	mov	r0, r3
 800d83c:	f002 f900 	bl	800fa40 <ff_uni2oem>
 800d840:	4603      	mov	r3, r0
 800d842:	84bb      	strh	r3, [r7, #36]	@ 0x24
#endif
		}

		if (wc >= 0x100) {				/* Is this a DBC? */
 800d844:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d846:	2bff      	cmp	r3, #255	@ 0xff
 800d848:	d91a      	bls.n	800d880 <create_name+0x290>
			if (i >= ni - 1) {			/* Field overflow? */
 800d84a:	69fb      	ldr	r3, [r7, #28]
 800d84c:	3b01      	subs	r3, #1
 800d84e:	6a3a      	ldr	r2, [r7, #32]
 800d850:	429a      	cmp	r2, r3
 800d852:	d308      	bcc.n	800d866 <create_name+0x276>
				cf |= NS_LOSS | NS_LFN;
 800d854:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d858:	f043 0303 	orr.w	r3, r3, #3
 800d85c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				i = ni; continue;		/* Next field */
 800d860:	69fb      	ldr	r3, [r7, #28]
 800d862:	623b      	str	r3, [r7, #32]
 800d864:	e049      	b.n	800d8fa <create_name+0x30a>
			}
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 800d866:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d868:	0a1b      	lsrs	r3, r3, #8
 800d86a:	b299      	uxth	r1, r3
 800d86c:	6a3b      	ldr	r3, [r7, #32]
 800d86e:	1c5a      	adds	r2, r3, #1
 800d870:	623a      	str	r2, [r7, #32]
 800d872:	b2c9      	uxtb	r1, r1
 800d874:	687a      	ldr	r2, [r7, #4]
 800d876:	4413      	add	r3, r2
 800d878:	460a      	mov	r2, r1
 800d87a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d87e:	e032      	b.n	800d8e6 <create_name+0x2f6>
		} else {						/* SBC */
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
 800d880:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d882:	2b00      	cmp	r3, #0
 800d884:	d007      	beq.n	800d896 <create_name+0x2a6>
 800d886:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d888:	4619      	mov	r1, r3
 800d88a:	4808      	ldr	r0, [pc, #32]	@ (800d8ac <create_name+0x2bc>)
 800d88c:	f003 ff60 	bl	8011750 <strchr>
 800d890:	4603      	mov	r3, r0
 800d892:	2b00      	cmp	r3, #0
 800d894:	d00c      	beq.n	800d8b0 <create_name+0x2c0>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d896:	235f      	movs	r3, #95	@ 0x5f
 800d898:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d89a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d89e:	f043 0303 	orr.w	r3, r3, #3
 800d8a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d8a6:	e01e      	b.n	800d8e6 <create_name+0x2f6>
 800d8a8:	080122b4 	.word	0x080122b4
 800d8ac:	080122c0 	.word	0x080122c0
			} else {
				if (IsUpper(wc)) {		/* ASCII upper case? */
 800d8b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d8b2:	2b40      	cmp	r3, #64	@ 0x40
 800d8b4:	d908      	bls.n	800d8c8 <create_name+0x2d8>
 800d8b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d8b8:	2b5a      	cmp	r3, #90	@ 0x5a
 800d8ba:	d805      	bhi.n	800d8c8 <create_name+0x2d8>
					b |= 2;
 800d8bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8c0:	f043 0302 	orr.w	r3, r3, #2
 800d8c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				}
				if (IsLower(wc)) {		/* ASCII lower case? */
 800d8c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d8ca:	2b60      	cmp	r3, #96	@ 0x60
 800d8cc:	d90b      	bls.n	800d8e6 <create_name+0x2f6>
 800d8ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d8d0:	2b7a      	cmp	r3, #122	@ 0x7a
 800d8d2:	d808      	bhi.n	800d8e6 <create_name+0x2f6>
					b |= 1; wc -= 0x20;
 800d8d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8d8:	f043 0301 	orr.w	r3, r3, #1
 800d8dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d8e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d8e2:	3b20      	subs	r3, #32
 800d8e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
				}
			}
		}
		dp->fn[i++] = (BYTE)wc;
 800d8e6:	6a3b      	ldr	r3, [r7, #32]
 800d8e8:	1c5a      	adds	r2, r3, #1
 800d8ea:	623a      	str	r2, [r7, #32]
 800d8ec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d8ee:	b2d1      	uxtb	r1, r2
 800d8f0:	687a      	ldr	r2, [r7, #4]
 800d8f2:	4413      	add	r3, r2
 800d8f4:	460a      	mov	r2, r1
 800d8f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		wc = lfn[si++];					/* Get an LFN character */
 800d8fa:	e745      	b.n	800d788 <create_name+0x198>
		if (wc == 0) break;				/* Break on end of the LFN */
 800d8fc:	bf00      	nop
 800d8fe:	e000      	b.n	800d902 <create_name+0x312>
			if (si > di) break;						/* No name extension? */
 800d900:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d908:	2be5      	cmp	r3, #229	@ 0xe5
 800d90a:	d103      	bne.n	800d914 <create_name+0x324>
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2205      	movs	r2, #5
 800d910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 800d914:	69fb      	ldr	r3, [r7, #28]
 800d916:	2b08      	cmp	r3, #8
 800d918:	d104      	bne.n	800d924 <create_name+0x334>
 800d91a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d91e:	009b      	lsls	r3, r3, #2
 800d920:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 800d924:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d928:	f003 030c 	and.w	r3, r3, #12
 800d92c:	2b0c      	cmp	r3, #12
 800d92e:	d005      	beq.n	800d93c <create_name+0x34c>
 800d930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d934:	f003 0303 	and.w	r3, r3, #3
 800d938:	2b03      	cmp	r3, #3
 800d93a:	d105      	bne.n	800d948 <create_name+0x358>
 800d93c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d940:	f043 0302 	orr.w	r3, r3, #2
 800d944:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d948:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d94c:	f003 0302 	and.w	r3, r3, #2
 800d950:	2b00      	cmp	r3, #0
 800d952:	d117      	bne.n	800d984 <create_name+0x394>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 800d954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d958:	f003 0301 	and.w	r3, r3, #1
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d005      	beq.n	800d96c <create_name+0x37c>
 800d960:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d964:	f043 0310 	orr.w	r3, r3, #16
 800d968:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 800d96c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d970:	f003 0304 	and.w	r3, r3, #4
 800d974:	2b00      	cmp	r3, #0
 800d976:	d005      	beq.n	800d984 <create_name+0x394>
 800d978:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d97c:	f043 0308 	orr.w	r3, r3, #8
 800d980:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d98a:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800d98e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* FF_USE_LFN */
}
 800d990:	4618      	mov	r0, r3
 800d992:	3728      	adds	r7, #40	@ 0x28
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b086      	sub	sp, #24
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 800d9a8:	e002      	b.n	800d9b0 <follow_path+0x18>
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	3301      	adds	r3, #1
 800d9ae:	603b      	str	r3, [r7, #0]
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	781b      	ldrb	r3, [r3, #0]
 800d9b4:	2b2f      	cmp	r3, #47	@ 0x2f
 800d9b6:	d0f8      	beq.n	800d9aa <follow_path+0x12>
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	2b5c      	cmp	r3, #92	@ 0x5c
 800d9be:	d0f4      	beq.n	800d9aa <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	609a      	str	r2, [r3, #8]
	}
#if FF_FS_EXFAT
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	61da      	str	r2, [r3, #28]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	781b      	ldrb	r3, [r3, #0]
 800d9d0:	2b1f      	cmp	r3, #31
 800d9d2:	d80a      	bhi.n	800d9ea <follow_path+0x52>
		dp->fn[NSFLAG] = NS_NONAME;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2280      	movs	r2, #128	@ 0x80
 800d9d8:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800d9dc:	2100      	movs	r1, #0
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f7fe fc49 	bl	800c276 <dir_sdi>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	75fb      	strb	r3, [r7, #23]
 800d9e8:	e060      	b.n	800daac <follow_path+0x114>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d9ea:	463b      	mov	r3, r7
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f7ff fdfe 	bl	800d5f0 <create_name>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d9f8:	7dfb      	ldrb	r3, [r7, #23]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d151      	bne.n	800daa2 <follow_path+0x10a>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f7ff fb21 	bl	800d046 <dir_find>
 800da04:	4603      	mov	r3, r0
 800da06:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800da0e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 800da10:	7dfb      	ldrb	r3, [r7, #23]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d00a      	beq.n	800da2c <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800da16:	7dfb      	ldrb	r3, [r7, #23]
 800da18:	2b04      	cmp	r3, #4
 800da1a:	d144      	bne.n	800daa6 <follow_path+0x10e>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800da1c:	7bfb      	ldrb	r3, [r7, #15]
 800da1e:	f003 0304 	and.w	r3, r3, #4
 800da22:	2b00      	cmp	r3, #0
 800da24:	d13f      	bne.n	800daa6 <follow_path+0x10e>
 800da26:	2305      	movs	r3, #5
 800da28:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800da2a:	e03c      	b.n	800daa6 <follow_path+0x10e>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800da2c:	7bfb      	ldrb	r3, [r7, #15]
 800da2e:	f003 0304 	and.w	r3, r3, #4
 800da32:	2b00      	cmp	r3, #0
 800da34:	d139      	bne.n	800daaa <follow_path+0x112>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	799b      	ldrb	r3, [r3, #6]
 800da3a:	f003 0310 	and.w	r3, r3, #16
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d102      	bne.n	800da48 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800da42:	2305      	movs	r3, #5
 800da44:	75fb      	strb	r3, [r7, #23]
 800da46:	e031      	b.n	800daac <follow_path+0x114>
			}
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {	/* Save containing directory information for next dir */
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	2b04      	cmp	r3, #4
 800da4e:	d118      	bne.n	800da82 <follow_path+0xea>
				dp->obj.c_scl = dp->obj.sclust;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	689a      	ldr	r2, [r3, #8]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	621a      	str	r2, [r3, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800da5e:	4613      	mov	r3, r2
 800da60:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	79d2      	ldrb	r2, [r2, #7]
 800da68:	431a      	orrs	r2, r3
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	625a      	str	r2, [r3, #36]	@ 0x24
				dp->obj.c_ofs = dp->blk_ofs;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	629a      	str	r2, [r3, #40]	@ 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	4619      	mov	r1, r3
 800da7a:	6938      	ldr	r0, [r7, #16]
 800da7c:	f7ff f8f6 	bl	800cc6c <init_alloc_info>
 800da80:	e7b3      	b.n	800d9ea <follow_path+0x52>
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da90:	4413      	add	r3, r2
 800da92:	4619      	mov	r1, r3
 800da94:	6938      	ldr	r0, [r7, #16]
 800da96:	f7fe fd75 	bl	800c584 <ld_clust>
 800da9a:	4602      	mov	r2, r0
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800daa0:	e7a3      	b.n	800d9ea <follow_path+0x52>
			if (res != FR_OK) break;
 800daa2:	bf00      	nop
 800daa4:	e002      	b.n	800daac <follow_path+0x114>
				break;
 800daa6:	bf00      	nop
 800daa8:	e000      	b.n	800daac <follow_path+0x114>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800daaa:	bf00      	nop
			}
		}
	}

	return res;
 800daac:	7dfb      	ldrb	r3, [r7, #23]
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3718      	adds	r7, #24
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}

0800dab6 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 800dab6:	b480      	push	{r7}
 800dab8:	b087      	sub	sp, #28
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6078      	str	r0, [r7, #4]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *vsp;
	char vchr;
#endif

	tt = tp = *path;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	60fb      	str	r3, [r7, #12]
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	617b      	str	r3, [r7, #20]
	if (!tp) return -1;		/* Invalid path name? */
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d102      	bne.n	800dad4 <get_ldnumber+0x1e>
 800dace:	f04f 33ff 	mov.w	r3, #4294967295
 800dad2:	e02c      	b.n	800db2e <get_ldnumber+0x78>
	do {					/* Find a colon in the path */
		chr = *tt++;
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	1c5a      	adds	r2, r3, #1
 800dad8:	617a      	str	r2, [r7, #20]
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	72fb      	strb	r3, [r7, #11]
	} while (!IsTerminator(chr) && chr != ':');
 800dade:	7afb      	ldrb	r3, [r7, #11]
 800dae0:	2b1f      	cmp	r3, #31
 800dae2:	d902      	bls.n	800daea <get_ldnumber+0x34>
 800dae4:	7afb      	ldrb	r3, [r7, #11]
 800dae6:	2b3a      	cmp	r3, #58	@ 0x3a
 800dae8:	d1f4      	bne.n	800dad4 <get_ldnumber+0x1e>

	if (chr == ':') {	/* Is there a DOS/Windows style volume ID? */
 800daea:	7afb      	ldrb	r3, [r7, #11]
 800daec:	2b3a      	cmp	r3, #58	@ 0x3a
 800daee:	d11d      	bne.n	800db2c <get_ldnumber+0x76>
		i = FF_VOLUMES;
 800daf0:	2301      	movs	r3, #1
 800daf2:	613b      	str	r3, [r7, #16]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is it a numeric volume ID + colon? */
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	2b2f      	cmp	r3, #47	@ 0x2f
 800dafa:	d90c      	bls.n	800db16 <get_ldnumber+0x60>
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	781b      	ldrb	r3, [r3, #0]
 800db00:	2b39      	cmp	r3, #57	@ 0x39
 800db02:	d808      	bhi.n	800db16 <get_ldnumber+0x60>
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	3302      	adds	r3, #2
 800db08:	697a      	ldr	r2, [r7, #20]
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d103      	bne.n	800db16 <get_ldnumber+0x60>
			i = (int)*tp - '0';	/* Get the logical drive number */
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	3b30      	subs	r3, #48	@ 0x30
 800db14:	613b      	str	r3, [r7, #16]
					if (IsLower(chr)) chr -= 0x20;
				} while (vchr && (TCHAR)vchr == chr);
			} while ((vchr || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i >= FF_VOLUMES) return -1;	/* Not found or invalid volume ID */
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	dd02      	ble.n	800db22 <get_ldnumber+0x6c>
 800db1c:	f04f 33ff 	mov.w	r3, #4294967295
 800db20:	e005      	b.n	800db2e <get_ldnumber+0x78>
		*path = tt;		/* Snip the drive prefix off */
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	697a      	ldr	r2, [r7, #20]
 800db26:	601a      	str	r2, [r3, #0]
		return i;		/* Return the found drive number */
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	e000      	b.n	800db2e <get_ldnumber+0x78>
#endif
	/* No drive prefix */
#if FF_FS_RPATH != 0
	return (int)CurrVol;	/* Default drive is current drive */
#else
	return 0;				/* Default drive is 0 */
 800db2c:	2300      	movs	r3, #0
#endif
}
 800db2e:	4618      	mov	r0, r3
 800db30:	371c      	adds	r7, #28
 800db32:	46bd      	mov	sp, r7
 800db34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db38:	4770      	bx	lr
	...

0800db3c <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b084      	sub	sp, #16
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2200      	movs	r2, #0
 800db4a:	711a      	strb	r2, [r3, #4]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f04f 32ff 	mov.w	r2, #4294967295
 800db52:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 800db54:	6839      	ldr	r1, [r7, #0]
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f7fd fc98 	bl	800b48c <move_window>
 800db5c:	4603      	mov	r3, r0
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d001      	beq.n	800db66 <check_fs+0x2a>
 800db62:	2304      	movs	r3, #4
 800db64:	e099      	b.n	800dc9a <check_fs+0x15e>
	sign = ld_word(fs->win + BS_55AA);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	333c      	adds	r3, #60	@ 0x3c
 800db6a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800db6e:	4618      	mov	r0, r3
 800db70:	f7fd f9dc 	bl	800af2c <ld_word>
 800db74:	4603      	mov	r3, r0
 800db76:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 800db78:	89fb      	ldrh	r3, [r7, #14]
 800db7a:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800db7e:	4293      	cmp	r3, r2
 800db80:	d10b      	bne.n	800db9a <check_fs+0x5e>
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	333c      	adds	r3, #60	@ 0x3c
 800db86:	220b      	movs	r2, #11
 800db88:	4946      	ldr	r1, [pc, #280]	@ (800dca4 <check_fs+0x168>)
 800db8a:	4618      	mov	r0, r3
 800db8c:	f003 fdae 	bl	80116ec <memcmp>
 800db90:	4603      	mov	r3, r0
 800db92:	2b00      	cmp	r3, #0
 800db94:	d101      	bne.n	800db9a <check_fs+0x5e>
 800db96:	2301      	movs	r3, #1
 800db98:	e07f      	b.n	800dc9a <check_fs+0x15e>
#endif
	b = fs->win[BS_JmpBoot];
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dba0:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 800dba2:	7b7b      	ldrb	r3, [r7, #13]
 800dba4:	2beb      	cmp	r3, #235	@ 0xeb
 800dba6:	d005      	beq.n	800dbb4 <check_fs+0x78>
 800dba8:	7b7b      	ldrb	r3, [r7, #13]
 800dbaa:	2be9      	cmp	r3, #233	@ 0xe9
 800dbac:	d002      	beq.n	800dbb4 <check_fs+0x78>
 800dbae:	7b7b      	ldrb	r3, [r7, #13]
 800dbb0:	2be8      	cmp	r3, #232	@ 0xe8
 800dbb2:	d16a      	bne.n	800dc8a <check_fs+0x14e>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 800dbb4:	89fb      	ldrh	r3, [r7, #14]
 800dbb6:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d10c      	bne.n	800dbd8 <check_fs+0x9c>
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	333c      	adds	r3, #60	@ 0x3c
 800dbc2:	3352      	adds	r3, #82	@ 0x52
 800dbc4:	2208      	movs	r2, #8
 800dbc6:	4938      	ldr	r1, [pc, #224]	@ (800dca8 <check_fs+0x16c>)
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f003 fd8f 	bl	80116ec <memcmp>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d101      	bne.n	800dbd8 <check_fs+0x9c>
			return 0;	/* It is an FAT32 VBR */
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	e060      	b.n	800dc9a <check_fs+0x15e>
		}
		/* FAT volumes created in the early MS-DOS era lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	333c      	adds	r3, #60	@ 0x3c
 800dbdc:	330b      	adds	r3, #11
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7fd f9a4 	bl	800af2c <ld_word>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800dbee:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 800dbf0:	897a      	ldrh	r2, [r7, #10]
 800dbf2:	897b      	ldrh	r3, [r7, #10]
 800dbf4:	3b01      	subs	r3, #1
 800dbf6:	4013      	ands	r3, r2
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d146      	bne.n	800dc8a <check_fs+0x14e>
 800dbfc:	897b      	ldrh	r3, [r7, #10]
 800dbfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc02:	d342      	bcc.n	800dc8a <check_fs+0x14e>
 800dc04:	897b      	ldrh	r3, [r7, #10]
 800dc06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc0a:	d83e      	bhi.n	800dc8a <check_fs+0x14e>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800dc0c:	7b7b      	ldrb	r3, [r7, #13]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d03b      	beq.n	800dc8a <check_fs+0x14e>
 800dc12:	7b7a      	ldrb	r2, [r7, #13]
 800dc14:	7b7b      	ldrb	r3, [r7, #13]
 800dc16:	3b01      	subs	r3, #1
 800dc18:	4013      	ands	r3, r2
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d135      	bne.n	800dc8a <check_fs+0x14e>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of number of reserved sectors (MNBZ) */
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	333c      	adds	r3, #60	@ 0x3c
 800dc22:	330e      	adds	r3, #14
 800dc24:	4618      	mov	r0, r3
 800dc26:	f7fd f981 	bl	800af2c <ld_word>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d02c      	beq.n	800dc8a <check_fs+0x14e>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of number of FATs (1 or 2) */
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800dc36:	3b01      	subs	r3, #1
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d826      	bhi.n	800dc8a <check_fs+0x14e>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir size (MNBZ) */
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	333c      	adds	r3, #60	@ 0x3c
 800dc40:	3311      	adds	r3, #17
 800dc42:	4618      	mov	r0, r3
 800dc44:	f7fd f972 	bl	800af2c <ld_word>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d01d      	beq.n	800dc8a <check_fs+0x14e>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume size (>=128) */
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	333c      	adds	r3, #60	@ 0x3c
 800dc52:	3313      	adds	r3, #19
 800dc54:	4618      	mov	r0, r3
 800dc56:	f7fd f969 	bl	800af2c <ld_word>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b7f      	cmp	r3, #127	@ 0x7f
 800dc5e:	d809      	bhi.n	800dc74 <check_fs+0x138>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	333c      	adds	r3, #60	@ 0x3c
 800dc64:	3320      	adds	r3, #32
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7fd f978 	bl	800af5c <ld_dword>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc72:	d30a      	bcc.n	800dc8a <check_fs+0x14e>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	333c      	adds	r3, #60	@ 0x3c
 800dc78:	3316      	adds	r3, #22
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7fd f956 	bl	800af2c <ld_word>
 800dc80:	4603      	mov	r3, r0
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d001      	beq.n	800dc8a <check_fs+0x14e>
				return 0;	/* It can be presumed an FAT VBR */
 800dc86:	2300      	movs	r3, #0
 800dc88:	e007      	b.n	800dc9a <check_fs+0x15e>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (with valid or invalid BS) */
 800dc8a:	89fb      	ldrh	r3, [r7, #14]
 800dc8c:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d101      	bne.n	800dc98 <check_fs+0x15c>
 800dc94:	2302      	movs	r3, #2
 800dc96:	e000      	b.n	800dc9a <check_fs+0x15e>
 800dc98:	2303      	movs	r3, #3
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	3710      	adds	r7, #16
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}
 800dca2:	bf00      	nop
 800dca4:	080122c8 	.word	0x080122c8
 800dca8:	080122d4 	.word	0x080122d4

0800dcac <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b088      	sub	sp, #32
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 800dcb6:	2100      	movs	r1, #0
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f7ff ff3f 	bl	800db3c <check_fs>
 800dcbe:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 800dcc0:	69bb      	ldr	r3, [r7, #24]
 800dcc2:	2b02      	cmp	r3, #2
 800dcc4:	d007      	beq.n	800dcd6 <find_volume+0x2a>
 800dcc6:	69bb      	ldr	r3, [r7, #24]
 800dcc8:	2b02      	cmp	r3, #2
 800dcca:	d802      	bhi.n	800dcd2 <find_volume+0x26>
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d101      	bne.n	800dcd6 <find_volume+0x2a>
 800dcd2:	69bb      	ldr	r3, [r7, #24]
 800dcd4:	e045      	b.n	800dd62 <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	61fb      	str	r3, [r7, #28]
 800dcda:	e014      	b.n	800dd06 <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800dce2:	69fb      	ldr	r3, [r7, #28]
 800dce4:	011b      	lsls	r3, r3, #4
 800dce6:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 800dcea:	4413      	add	r3, r2
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7fd f935 	bl	800af5c <ld_dword>
 800dcf2:	4602      	mov	r2, r0
 800dcf4:	69fb      	ldr	r3, [r7, #28]
 800dcf6:	009b      	lsls	r3, r3, #2
 800dcf8:	3320      	adds	r3, #32
 800dcfa:	443b      	add	r3, r7
 800dcfc:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800dd00:	69fb      	ldr	r3, [r7, #28]
 800dd02:	3301      	adds	r3, #1
 800dd04:	61fb      	str	r3, [r7, #28]
 800dd06:	69fb      	ldr	r3, [r7, #28]
 800dd08:	2b03      	cmp	r3, #3
 800dd0a:	d9e7      	bls.n	800dcdc <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d002      	beq.n	800dd18 <find_volume+0x6c>
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	3b01      	subs	r3, #1
 800dd16:	e000      	b.n	800dd1a <find_volume+0x6e>
 800dd18:	2300      	movs	r3, #0
 800dd1a:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800dd1c:	69fb      	ldr	r3, [r7, #28]
 800dd1e:	009b      	lsls	r3, r3, #2
 800dd20:	3320      	adds	r3, #32
 800dd22:	443b      	add	r3, r7
 800dd24:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d00b      	beq.n	800dd44 <find_volume+0x98>
 800dd2c:	69fb      	ldr	r3, [r7, #28]
 800dd2e:	009b      	lsls	r3, r3, #2
 800dd30:	3320      	adds	r3, #32
 800dd32:	443b      	add	r3, r7
 800dd34:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800dd38:	4619      	mov	r1, r3
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f7ff fefe 	bl	800db3c <check_fs>
 800dd40:	4603      	mov	r3, r0
 800dd42:	e000      	b.n	800dd46 <find_volume+0x9a>
 800dd44:	2303      	movs	r3, #3
 800dd46:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d108      	bne.n	800dd60 <find_volume+0xb4>
 800dd4e:	69bb      	ldr	r3, [r7, #24]
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	d905      	bls.n	800dd60 <find_volume+0xb4>
 800dd54:	69fb      	ldr	r3, [r7, #28]
 800dd56:	3301      	adds	r3, #1
 800dd58:	61fb      	str	r3, [r7, #28]
 800dd5a:	69fb      	ldr	r3, [r7, #28]
 800dd5c:	2b03      	cmp	r3, #3
 800dd5e:	d9dd      	bls.n	800dd1c <find_volume+0x70>
	return fmt;
 800dd60:	69bb      	ldr	r3, [r7, #24]
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3720      	adds	r7, #32
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
	...

0800dd6c <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 800dd6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dd70:	b09a      	sub	sp, #104	@ 0x68
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	61f8      	str	r0, [r7, #28]
 800dd76:	61b9      	str	r1, [r7, #24]
 800dd78:	4613      	mov	r3, r2
 800dd7a:	75fb      	strb	r3, [r7, #23]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 800dd7c:	69bb      	ldr	r3, [r7, #24]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dd82:	69f8      	ldr	r0, [r7, #28]
 800dd84:	f7ff fe97 	bl	800dab6 <get_ldnumber>
 800dd88:	64b8      	str	r0, [r7, #72]	@ 0x48
	if (vol < 0) return FR_INVALID_DRIVE;
 800dd8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	da01      	bge.n	800dd94 <mount_volume+0x28>
 800dd90:	230b      	movs	r3, #11
 800dd92:	e320      	b.n	800e3d6 <mount_volume+0x66a>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800dd94:	4aa4      	ldr	r2, [pc, #656]	@ (800e028 <mount_volume+0x2bc>)
 800dd96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd9c:	647b      	str	r3, [r7, #68]	@ 0x44
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800dd9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d101      	bne.n	800dda8 <mount_volume+0x3c>
 800dda4:	230c      	movs	r3, #12
 800dda6:	e316      	b.n	800e3d6 <mount_volume+0x66a>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 800dda8:	69bb      	ldr	r3, [r7, #24]
 800ddaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ddac:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ddae:	7dfb      	ldrb	r3, [r7, #23]
 800ddb0:	f023 0301 	bic.w	r3, r3, #1
 800ddb4:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800ddb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d01a      	beq.n	800ddf4 <mount_volume+0x88>
		stat = disk_status(fs->pdrv);
 800ddbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ddc0:	785b      	ldrb	r3, [r3, #1]
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7fc fb7e 	bl	800a4c4 <disk_status>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ddce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ddd2:	f003 0301 	and.w	r3, r3, #1
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d10c      	bne.n	800ddf4 <mount_volume+0x88>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ddda:	7dfb      	ldrb	r3, [r7, #23]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d007      	beq.n	800ddf0 <mount_volume+0x84>
 800dde0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dde4:	f003 0304 	and.w	r3, r3, #4
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d001      	beq.n	800ddf0 <mount_volume+0x84>
				return FR_WRITE_PROTECTED;
 800ddec:	230a      	movs	r3, #10
 800ddee:	e2f2      	b.n	800e3d6 <mount_volume+0x66a>
			}
			return FR_OK;				/* The filesystem object is already valid */
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	e2f0      	b.n	800e3d6 <mount_volume+0x66a>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 800ddf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 800ddfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ddfc:	785b      	ldrb	r3, [r3, #1]
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7fc fb6e 	bl	800a4e0 <disk_initialize>
 800de04:	4603      	mov	r3, r0
 800de06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800de0a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800de0e:	f003 0301 	and.w	r3, r3, #1
 800de12:	2b00      	cmp	r3, #0
 800de14:	d001      	beq.n	800de1a <mount_volume+0xae>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800de16:	2303      	movs	r3, #3
 800de18:	e2dd      	b.n	800e3d6 <mount_volume+0x66a>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800de1a:	7dfb      	ldrb	r3, [r7, #23]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d007      	beq.n	800de30 <mount_volume+0xc4>
 800de20:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800de24:	f003 0304 	and.w	r3, r3, #4
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d001      	beq.n	800de30 <mount_volume+0xc4>
		return FR_WRITE_PROTECTED;
 800de2c:	230a      	movs	r3, #10
 800de2e:	e2d2      	b.n	800e3d6 <mount_volume+0x66a>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 800de30:	2100      	movs	r1, #0
 800de32:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800de34:	f7ff ff3a 	bl	800dcac <find_volume>
 800de38:	65b8      	str	r0, [r7, #88]	@ 0x58
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 800de3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800de3c:	2b04      	cmp	r3, #4
 800de3e:	d101      	bne.n	800de44 <mount_volume+0xd8>
 800de40:	2301      	movs	r3, #1
 800de42:	e2c8      	b.n	800e3d6 <mount_volume+0x66a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800de44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800de46:	2b01      	cmp	r3, #1
 800de48:	d901      	bls.n	800de4e <mount_volume+0xe2>
 800de4a:	230d      	movs	r3, #13
 800de4c:	e2c3      	b.n	800e3d6 <mount_volume+0x66a>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 800de4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de52:	63fb      	str	r3, [r7, #60]	@ 0x3c

	/* An FAT volume is found (bsect). Following code initializes the filesystem object */

#if FF_FS_EXFAT
	if (fmt == 1) {
 800de54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800de56:	2b01      	cmp	r3, #1
 800de58:	f040 8141 	bne.w	800e0de <mount_volume+0x372>
		QWORD maxlba;
		DWORD so, cv, bcl, i;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800de5c:	230b      	movs	r3, #11
 800de5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800de60:	e002      	b.n	800de68 <mount_volume+0xfc>
 800de62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de64:	3301      	adds	r3, #1
 800de66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800de68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de6a:	2b3f      	cmp	r3, #63	@ 0x3f
 800de6c:	d806      	bhi.n	800de7c <mount_volume+0x110>
 800de6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800de70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de72:	4413      	add	r3, r2
 800de74:	333c      	adds	r3, #60	@ 0x3c
 800de76:	781b      	ldrb	r3, [r3, #0]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d0f2      	beq.n	800de62 <mount_volume+0xf6>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800de7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de7e:	2b3f      	cmp	r3, #63	@ 0x3f
 800de80:	d801      	bhi.n	800de86 <mount_volume+0x11a>
 800de82:	230d      	movs	r3, #13
 800de84:	e2a7      	b.n	800e3d6 <mount_volume+0x66a>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 800de86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de88:	333c      	adds	r3, #60	@ 0x3c
 800de8a:	3368      	adds	r3, #104	@ 0x68
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7fd f84d 	bl	800af2c <ld_word>
 800de92:	4603      	mov	r3, r0
 800de94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800de98:	d001      	beq.n	800de9e <mount_volume+0x132>
 800de9a:	230d      	movs	r3, #13
 800de9c:	e29b      	b.n	800e3d6 <mount_volume+0x66a>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800de9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dea0:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800dea4:	2b09      	cmp	r3, #9
 800dea6:	d001      	beq.n	800deac <mount_volume+0x140>
			return FR_NO_FILESYSTEM;
 800dea8:	230d      	movs	r3, #13
 800deaa:	e294      	b.n	800e3d6 <mount_volume+0x66a>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
 800deac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800deae:	333c      	adds	r3, #60	@ 0x3c
 800deb0:	3348      	adds	r3, #72	@ 0x48
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7fd f875 	bl	800afa2 <ld_qword>
 800deb8:	4602      	mov	r2, r0
 800deba:	460b      	mov	r3, r1
 800debc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800debe:	2000      	movs	r0, #0
 800dec0:	60b9      	str	r1, [r7, #8]
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	68b9      	ldr	r1, [r7, #8]
 800dec6:	1851      	adds	r1, r2, r1
 800dec8:	6039      	str	r1, [r7, #0]
 800deca:	68f9      	ldr	r1, [r7, #12]
 800decc:	eb43 0101 	adc.w	r1, r3, r1
 800ded0:	6079      	str	r1, [r7, #4]
 800ded2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ded6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
 800deda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800dede:	2b01      	cmp	r3, #1
 800dee0:	d301      	bcc.n	800dee6 <mount_volume+0x17a>
 800dee2:	230d      	movs	r3, #13
 800dee4:	e277      	b.n	800e3d6 <mount_volume+0x66a>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800dee6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dee8:	333c      	adds	r3, #60	@ 0x3c
 800deea:	3354      	adds	r3, #84	@ 0x54
 800deec:	4618      	mov	r0, r3
 800deee:	f7fd f835 	bl	800af5c <ld_dword>
 800def2:	4602      	mov	r2, r0
 800def4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800def6:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800def8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800defa:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 800defe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df00:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800df02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df04:	78db      	ldrb	r3, [r3, #3]
 800df06:	2b01      	cmp	r3, #1
 800df08:	d001      	beq.n	800df0e <mount_volume+0x1a2>
 800df0a:	230d      	movs	r3, #13
 800df0c:	e263      	b.n	800e3d6 <mount_volume+0x66a>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800df0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df10:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800df14:	461a      	mov	r2, r3
 800df16:	2301      	movs	r3, #1
 800df18:	4093      	lsls	r3, r2
 800df1a:	b29a      	uxth	r2, r3
 800df1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df1e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768 sectors) */
 800df20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df22:	895b      	ldrh	r3, [r3, #10]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d101      	bne.n	800df2c <mount_volume+0x1c0>
 800df28:	230d      	movs	r3, #13
 800df2a:	e254      	b.n	800e3d6 <mount_volume+0x66a>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800df2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df2e:	333c      	adds	r3, #60	@ 0x3c
 800df30:	335c      	adds	r3, #92	@ 0x5c
 800df32:	4618      	mov	r0, r3
 800df34:	f7fd f812 	bl	800af5c <ld_dword>
 800df38:	6338      	str	r0, [r7, #48]	@ 0x30
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800df3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df3c:	4a3b      	ldr	r2, [pc, #236]	@ (800e02c <mount_volume+0x2c0>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d901      	bls.n	800df46 <mount_volume+0x1da>
 800df42:	230d      	movs	r3, #13
 800df44:	e247      	b.n	800e3d6 <mount_volume+0x66a>
		fs->n_fatent = nclst + 2;
 800df46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df48:	1c9a      	adds	r2, r3, #2
 800df4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df4c:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800df4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800df52:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800df54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df56:	333c      	adds	r3, #60	@ 0x3c
 800df58:	3358      	adds	r3, #88	@ 0x58
 800df5a:	4618      	mov	r0, r3
 800df5c:	f7fc fffe 	bl	800af5c <ld_dword>
 800df60:	4602      	mov	r2, r0
 800df62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df64:	441a      	add	r2, r3
 800df66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df68:	631a      	str	r2, [r3, #48]	@ 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800df6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df6c:	333c      	adds	r3, #60	@ 0x3c
 800df6e:	3350      	adds	r3, #80	@ 0x50
 800df70:	4618      	mov	r0, r3
 800df72:	f7fc fff3 	bl	800af5c <ld_dword>
 800df76:	4602      	mov	r2, r0
 800df78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df7a:	441a      	add	r2, r3
 800df7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df7e:	629a      	str	r2, [r3, #40]	@ 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 800df80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df84:	2200      	movs	r2, #0
 800df86:	469a      	mov	sl, r3
 800df88:	4693      	mov	fp, r2
 800df8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df8c:	895b      	ldrh	r3, [r3, #10]
 800df8e:	461a      	mov	r2, r3
 800df90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df92:	fb02 f303 	mul.w	r3, r2, r3
 800df96:	2200      	movs	r2, #0
 800df98:	4698      	mov	r8, r3
 800df9a:	4691      	mov	r9, r2
 800df9c:	eb1a 0408 	adds.w	r4, sl, r8
 800dfa0:	eb4b 0509 	adc.w	r5, fp, r9
 800dfa4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800dfa8:	42a2      	cmp	r2, r4
 800dfaa:	41ab      	sbcs	r3, r5
 800dfac:	d201      	bcs.n	800dfb2 <mount_volume+0x246>
 800dfae:	230d      	movs	r3, #13
 800dfb0:	e211      	b.n	800e3d6 <mount_volume+0x66a>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800dfb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfb4:	333c      	adds	r3, #60	@ 0x3c
 800dfb6:	3360      	adds	r3, #96	@ 0x60
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f7fc ffcf 	bl	800af5c <ld_dword>
 800dfbe:	4602      	mov	r2, r0
 800dfc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfc2:	62da      	str	r2, [r3, #44]	@ 0x2c

		/* Get bitmap location and check if it is contiguous (implementation assumption) */
		so = i = 0;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dfc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfca:	657b      	str	r3, [r7, #84]	@ 0x54
		for (;;) {	/* Find the bitmap entry in the root directory (in only first cluster) */
			if (i == 0) {
 800dfcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d11c      	bne.n	800e00c <mount_volume+0x2a0>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 800dfd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfd4:	895b      	ldrh	r3, [r3, #10]
 800dfd6:	461a      	mov	r2, r3
 800dfd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	d301      	bcc.n	800dfe2 <mount_volume+0x276>
 800dfde:	230d      	movs	r3, #13
 800dfe0:	e1f9      	b.n	800e3d6 <mount_volume+0x66a>
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 800dfe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800dfea:	f7fd fb61 	bl	800b6b0 <clst2sect>
 800dfee:	4602      	mov	r2, r0
 800dff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dff2:	4413      	add	r3, r2
 800dff4:	4619      	mov	r1, r3
 800dff6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800dff8:	f7fd fa48 	bl	800b48c <move_window>
 800dffc:	4603      	mov	r3, r0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d001      	beq.n	800e006 <mount_volume+0x29a>
 800e002:	2301      	movs	r3, #1
 800e004:	e1e7      	b.n	800e3d6 <mount_volume+0x66a>
				so++;
 800e006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e008:	3301      	adds	r3, #1
 800e00a:	657b      	str	r3, [r7, #84]	@ 0x54
			}
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 800e00c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e00e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e010:	4413      	add	r3, r2
 800e012:	333c      	adds	r3, #60	@ 0x3c
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	2b81      	cmp	r3, #129	@ 0x81
 800e018:	d00a      	beq.n	800e030 <mount_volume+0x2c4>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 800e01a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e01c:	3320      	adds	r3, #32
 800e01e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e022:	64fb      	str	r3, [r7, #76]	@ 0x4c
			if (i == 0) {
 800e024:	e7d2      	b.n	800dfcc <mount_volume+0x260>
 800e026:	bf00      	nop
 800e028:	2000e670 	.word	0x2000e670
 800e02c:	7ffffffd 	.word	0x7ffffffd
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 800e030:	bf00      	nop
		}
		bcl = ld_dword(fs->win + i + 20);				/* Bitmap cluster */
 800e032:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e034:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800e038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e03a:	3314      	adds	r3, #20
 800e03c:	4413      	add	r3, r2
 800e03e:	4618      	mov	r0, r3
 800e040:	f7fc ff8c 	bl	800af5c <ld_dword>
 800e044:	6538      	str	r0, [r7, #80]	@ 0x50
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
 800e046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e048:	2b01      	cmp	r3, #1
 800e04a:	d904      	bls.n	800e056 <mount_volume+0x2ea>
 800e04c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e04e:	69db      	ldr	r3, [r3, #28]
 800e050:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e052:	429a      	cmp	r2, r3
 800e054:	d301      	bcc.n	800e05a <mount_volume+0x2ee>
 800e056:	230d      	movs	r3, #13
 800e058:	e1bd      	b.n	800e3d6 <mount_volume+0x66a>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 800e05a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e05c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e05e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e060:	895b      	ldrh	r3, [r3, #10]
 800e062:	4619      	mov	r1, r3
 800e064:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e066:	3b02      	subs	r3, #2
 800e068:	fb01 f303 	mul.w	r3, r1, r3
 800e06c:	441a      	add	r2, r3
 800e06e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e070:	635a      	str	r2, [r3, #52]	@ 0x34
		for (;;) {	/* Check if bitmap is contiguous */
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 800e072:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e074:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e076:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e078:	09db      	lsrs	r3, r3, #7
 800e07a:	4413      	add	r3, r2
 800e07c:	4619      	mov	r1, r3
 800e07e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e080:	f7fd fa04 	bl	800b48c <move_window>
 800e084:	4603      	mov	r3, r0
 800e086:	2b00      	cmp	r3, #0
 800e088:	d001      	beq.n	800e08e <mount_volume+0x322>
 800e08a:	2301      	movs	r3, #1
 800e08c:	e1a3      	b.n	800e3d6 <mount_volume+0x66a>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
 800e08e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e090:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800e094:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e096:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e09a:	009b      	lsls	r3, r3, #2
 800e09c:	4413      	add	r3, r2
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7fc ff5c 	bl	800af5c <ld_dword>
 800e0a4:	6278      	str	r0, [r7, #36]	@ 0x24
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 800e0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0ac:	d008      	beq.n	800e0c0 <mount_volume+0x354>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented bitmap? */
 800e0ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0b0:	3301      	adds	r3, #1
 800e0b2:	653b      	str	r3, [r7, #80]	@ 0x50
 800e0b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d0da      	beq.n	800e072 <mount_volume+0x306>
 800e0bc:	230d      	movs	r3, #13
 800e0be:	e18a      	b.n	800e3d6 <mount_volume+0x66a>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 800e0c0:	bf00      	nop
		}

#if !FF_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Invalidate cluster allocation information */
 800e0c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0c4:	f04f 32ff 	mov.w	r2, #4294967295
 800e0c8:	619a      	str	r2, [r3, #24]
 800e0ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0cc:	699a      	ldr	r2, [r3, #24]
 800e0ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0d0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0;	/* Enable to sync PercInUse value in VBR */
 800e0d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	715a      	strb	r2, [r3, #5]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800e0d8:	2304      	movs	r3, #4
 800e0da:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e0dc:	e166      	b.n	800e3ac <mount_volume+0x640>
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e0de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0e0:	333c      	adds	r3, #60	@ 0x3c
 800e0e2:	330b      	adds	r3, #11
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f7fc ff21 	bl	800af2c <ld_word>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e0f0:	d001      	beq.n	800e0f6 <mount_volume+0x38a>
 800e0f2:	230d      	movs	r3, #13
 800e0f4:	e16f      	b.n	800e3d6 <mount_volume+0x66a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e0f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0f8:	333c      	adds	r3, #60	@ 0x3c
 800e0fa:	3316      	adds	r3, #22
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7fc ff15 	bl	800af2c <ld_word>
 800e102:	4603      	mov	r3, r0
 800e104:	663b      	str	r3, [r7, #96]	@ 0x60
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e106:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d106      	bne.n	800e11a <mount_volume+0x3ae>
 800e10c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e10e:	333c      	adds	r3, #60	@ 0x3c
 800e110:	3324      	adds	r3, #36	@ 0x24
 800e112:	4618      	mov	r0, r3
 800e114:	f7fc ff22 	bl	800af5c <ld_dword>
 800e118:	6638      	str	r0, [r7, #96]	@ 0x60
		fs->fsize = fasize;
 800e11a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e11c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e11e:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e122:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 800e126:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e128:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e12a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e12c:	78db      	ldrb	r3, [r3, #3]
 800e12e:	2b01      	cmp	r3, #1
 800e130:	d005      	beq.n	800e13e <mount_volume+0x3d2>
 800e132:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e134:	78db      	ldrb	r3, [r3, #3]
 800e136:	2b02      	cmp	r3, #2
 800e138:	d001      	beq.n	800e13e <mount_volume+0x3d2>
 800e13a:	230d      	movs	r3, #13
 800e13c:	e14b      	b.n	800e3d6 <mount_volume+0x66a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e13e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e140:	78db      	ldrb	r3, [r3, #3]
 800e142:	461a      	mov	r2, r3
 800e144:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e146:	fb02 f303 	mul.w	r3, r2, r3
 800e14a:	663b      	str	r3, [r7, #96]	@ 0x60

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e14c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e14e:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800e152:	461a      	mov	r2, r3
 800e154:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e156:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e158:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e15a:	895b      	ldrh	r3, [r3, #10]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d008      	beq.n	800e172 <mount_volume+0x406>
 800e160:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e162:	895b      	ldrh	r3, [r3, #10]
 800e164:	461a      	mov	r2, r3
 800e166:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e168:	895b      	ldrh	r3, [r3, #10]
 800e16a:	3b01      	subs	r3, #1
 800e16c:	4013      	ands	r3, r2
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d001      	beq.n	800e176 <mount_volume+0x40a>
 800e172:	230d      	movs	r3, #13
 800e174:	e12f      	b.n	800e3d6 <mount_volume+0x66a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e176:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e178:	333c      	adds	r3, #60	@ 0x3c
 800e17a:	3311      	adds	r3, #17
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7fc fed5 	bl	800af2c <ld_word>
 800e182:	4603      	mov	r3, r0
 800e184:	461a      	mov	r2, r3
 800e186:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e188:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e18a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e18c:	891b      	ldrh	r3, [r3, #8]
 800e18e:	f003 030f 	and.w	r3, r3, #15
 800e192:	b29b      	uxth	r3, r3
 800e194:	2b00      	cmp	r3, #0
 800e196:	d001      	beq.n	800e19c <mount_volume+0x430>
 800e198:	230d      	movs	r3, #13
 800e19a:	e11c      	b.n	800e3d6 <mount_volume+0x66a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e19c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e19e:	333c      	adds	r3, #60	@ 0x3c
 800e1a0:	3313      	adds	r3, #19
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7fc fec2 	bl	800af2c <ld_word>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	667b      	str	r3, [r7, #100]	@ 0x64
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e1ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d106      	bne.n	800e1c0 <mount_volume+0x454>
 800e1b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1b4:	333c      	adds	r3, #60	@ 0x3c
 800e1b6:	3320      	adds	r3, #32
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7fc fecf 	bl	800af5c <ld_dword>
 800e1be:	6678      	str	r0, [r7, #100]	@ 0x64

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e1c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1c2:	333c      	adds	r3, #60	@ 0x3c
 800e1c4:	330e      	adds	r3, #14
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fc feb0 	bl	800af2c <ld_word>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	877b      	strh	r3, [r7, #58]	@ 0x3a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e1d0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d101      	bne.n	800e1da <mount_volume+0x46e>
 800e1d6:	230d      	movs	r3, #13
 800e1d8:	e0fd      	b.n	800e3d6 <mount_volume+0x66a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e1da:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800e1dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e1de:	4413      	add	r3, r2
 800e1e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e1e2:	8912      	ldrh	r2, [r2, #8]
 800e1e4:	0912      	lsrs	r2, r2, #4
 800e1e6:	b292      	uxth	r2, r2
 800e1e8:	4413      	add	r3, r2
 800e1ea:	637b      	str	r3, [r7, #52]	@ 0x34
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e1ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e1ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	d201      	bcs.n	800e1f8 <mount_volume+0x48c>
 800e1f4:	230d      	movs	r3, #13
 800e1f6:	e0ee      	b.n	800e3d6 <mount_volume+0x66a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e1f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e1fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1fc:	1ad3      	subs	r3, r2, r3
 800e1fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e200:	8952      	ldrh	r2, [r2, #10]
 800e202:	fbb3 f3f2 	udiv	r3, r3, r2
 800e206:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d101      	bne.n	800e212 <mount_volume+0x4a6>
 800e20e:	230d      	movs	r3, #13
 800e210:	e0e1      	b.n	800e3d6 <mount_volume+0x66a>
		fmt = 0;
 800e212:	2300      	movs	r3, #0
 800e214:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800e216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e218:	4a71      	ldr	r2, [pc, #452]	@ (800e3e0 <mount_volume+0x674>)
 800e21a:	4293      	cmp	r3, r2
 800e21c:	d801      	bhi.n	800e222 <mount_volume+0x4b6>
 800e21e:	2303      	movs	r3, #3
 800e220:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e224:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e228:	4293      	cmp	r3, r2
 800e22a:	d801      	bhi.n	800e230 <mount_volume+0x4c4>
 800e22c:	2302      	movs	r3, #2
 800e22e:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e232:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e236:	4293      	cmp	r3, r2
 800e238:	d801      	bhi.n	800e23e <mount_volume+0x4d2>
 800e23a:	2301      	movs	r3, #1
 800e23c:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (fmt == 0) return FR_NO_FILESYSTEM;
 800e23e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e240:	2b00      	cmp	r3, #0
 800e242:	d101      	bne.n	800e248 <mount_volume+0x4dc>
 800e244:	230d      	movs	r3, #13
 800e246:	e0c6      	b.n	800e3d6 <mount_volume+0x66a>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e24a:	1c9a      	adds	r2, r3, #2
 800e24c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e24e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800e250:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e252:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e254:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e256:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800e258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e25a:	441a      	add	r2, r3
 800e25c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e25e:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800e260:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e264:	441a      	add	r2, r3
 800e266:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e268:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800e26a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e26c:	2b03      	cmp	r3, #3
 800e26e:	d11e      	bne.n	800e2ae <mount_volume+0x542>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e270:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e272:	333c      	adds	r3, #60	@ 0x3c
 800e274:	332a      	adds	r3, #42	@ 0x2a
 800e276:	4618      	mov	r0, r3
 800e278:	f7fc fe58 	bl	800af2c <ld_word>
 800e27c:	4603      	mov	r3, r0
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d001      	beq.n	800e286 <mount_volume+0x51a>
 800e282:	230d      	movs	r3, #13
 800e284:	e0a7      	b.n	800e3d6 <mount_volume+0x66a>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e286:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e288:	891b      	ldrh	r3, [r3, #8]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d001      	beq.n	800e292 <mount_volume+0x526>
 800e28e:	230d      	movs	r3, #13
 800e290:	e0a1      	b.n	800e3d6 <mount_volume+0x66a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e294:	333c      	adds	r3, #60	@ 0x3c
 800e296:	332c      	adds	r3, #44	@ 0x2c
 800e298:	4618      	mov	r0, r3
 800e29a:	f7fc fe5f 	bl	800af5c <ld_dword>
 800e29e:	4602      	mov	r2, r0
 800e2a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2a2:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e2a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2a6:	69db      	ldr	r3, [r3, #28]
 800e2a8:	009b      	lsls	r3, r3, #2
 800e2aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e2ac:	e01e      	b.n	800e2ec <mount_volume+0x580>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800e2ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2b0:	891b      	ldrh	r3, [r3, #8]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d101      	bne.n	800e2ba <mount_volume+0x54e>
 800e2b6:	230d      	movs	r3, #13
 800e2b8:	e08d      	b.n	800e3d6 <mount_volume+0x66a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e2ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e2be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e2c0:	441a      	add	r2, r3
 800e2c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2c4:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e2c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e2c8:	2b02      	cmp	r3, #2
 800e2ca:	d103      	bne.n	800e2d4 <mount_volume+0x568>
 800e2cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2ce:	69db      	ldr	r3, [r3, #28]
 800e2d0:	005b      	lsls	r3, r3, #1
 800e2d2:	e00a      	b.n	800e2ea <mount_volume+0x57e>
 800e2d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2d6:	69da      	ldr	r2, [r3, #28]
 800e2d8:	4613      	mov	r3, r2
 800e2da:	005b      	lsls	r3, r3, #1
 800e2dc:	4413      	add	r3, r2
 800e2de:	085a      	lsrs	r2, r3, #1
 800e2e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2e2:	69db      	ldr	r3, [r3, #28]
 800e2e4:	f003 0301 	and.w	r3, r3, #1
 800e2e8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e2ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e2ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2ee:	6a1a      	ldr	r2, [r3, #32]
 800e2f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e2f2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e2f6:	0a5b      	lsrs	r3, r3, #9
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d201      	bcs.n	800e300 <mount_volume+0x594>
 800e2fc:	230d      	movs	r3, #13
 800e2fe:	e06a      	b.n	800e3d6 <mount_volume+0x66a>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Invalidate cluster allocation information */
 800e300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e302:	f04f 32ff 	mov.w	r2, #4294967295
 800e306:	619a      	str	r2, [r3, #24]
 800e308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e30a:	699a      	ldr	r2, [r3, #24]
 800e30c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e30e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;	/* Disable FSInfo by default */
 800e310:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e312:	2280      	movs	r2, #128	@ 0x80
 800e314:	715a      	strb	r2, [r3, #5]
		if (fmt == FS_FAT32
 800e316:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e318:	2b03      	cmp	r3, #3
 800e31a:	d147      	bne.n	800e3ac <mount_volume+0x640>
			&& ld_word(fs->win + BPB_FSInfo32) == 1	/* FAT32: Enable FSInfo feature only if FSInfo sector is next to VBR */
 800e31c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e31e:	333c      	adds	r3, #60	@ 0x3c
 800e320:	3330      	adds	r3, #48	@ 0x30
 800e322:	4618      	mov	r0, r3
 800e324:	f7fc fe02 	bl	800af2c <ld_word>
 800e328:	4603      	mov	r3, r0
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	d13e      	bne.n	800e3ac <mount_volume+0x640>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e32e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e330:	3301      	adds	r3, #1
 800e332:	4619      	mov	r1, r3
 800e334:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e336:	f7fd f8a9 	bl	800b48c <move_window>
 800e33a:	4603      	mov	r3, r0
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d135      	bne.n	800e3ac <mount_volume+0x640>
		{
			fs->fsi_flag = 0;
 800e340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e342:	2200      	movs	r2, #0
 800e344:	715a      	strb	r2, [r3, #5]
			if (   ld_dword(fs->win + FSI_LeadSig) == 0x41615252	/* Load FSInfo data if available */
 800e346:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e348:	333c      	adds	r3, #60	@ 0x3c
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fc fe06 	bl	800af5c <ld_dword>
 800e350:	4603      	mov	r3, r0
 800e352:	4a24      	ldr	r2, [pc, #144]	@ (800e3e4 <mount_volume+0x678>)
 800e354:	4293      	cmp	r3, r2
 800e356:	d129      	bne.n	800e3ac <mount_volume+0x640>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272
 800e358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e35a:	333c      	adds	r3, #60	@ 0x3c
 800e35c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e360:	4618      	mov	r0, r3
 800e362:	f7fc fdfb 	bl	800af5c <ld_dword>
 800e366:	4603      	mov	r3, r0
 800e368:	4a1f      	ldr	r2, [pc, #124]	@ (800e3e8 <mount_volume+0x67c>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d11e      	bne.n	800e3ac <mount_volume+0x640>
				&& ld_dword(fs->win + FSI_TrailSig) == 0xAA550000)
 800e36e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e370:	333c      	adds	r3, #60	@ 0x3c
 800e372:	f503 73f9 	add.w	r3, r3, #498	@ 0x1f2
 800e376:	4618      	mov	r0, r3
 800e378:	f7fc fdf0 	bl	800af5c <ld_dword>
 800e37c:	4603      	mov	r3, r0
 800e37e:	4a1b      	ldr	r2, [pc, #108]	@ (800e3ec <mount_volume+0x680>)
 800e380:	4293      	cmp	r3, r2
 800e382:	d113      	bne.n	800e3ac <mount_volume+0x640>
			{
#if (FF_FS_NOFSINFO & 1) == 0	/* Get free cluster count if trust it */
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e386:	333c      	adds	r3, #60	@ 0x3c
 800e388:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7fc fde5 	bl	800af5c <ld_dword>
 800e392:	4602      	mov	r2, r0
 800e394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e396:	619a      	str	r2, [r3, #24]
#endif
#if (FF_FS_NOFSINFO & 2) == 0	/* Get next free cluster if rtust it */
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e398:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e39a:	333c      	adds	r3, #60	@ 0x3c
 800e39c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7fc fddb 	bl	800af5c <ld_dword>
 800e3a6:	4602      	mov	r2, r0
 800e3a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3aa:	615a      	str	r2, [r3, #20]
			}
		}
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 800e3ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e3ae:	b2da      	uxtb	r2, r3
 800e3b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3b2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800e3b4:	4b0e      	ldr	r3, [pc, #56]	@ (800e3f0 <mount_volume+0x684>)
 800e3b6:	881b      	ldrh	r3, [r3, #0]
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	b29a      	uxth	r2, r3
 800e3bc:	4b0c      	ldr	r3, [pc, #48]	@ (800e3f0 <mount_volume+0x684>)
 800e3be:	801a      	strh	r2, [r3, #0]
 800e3c0:	4b0b      	ldr	r3, [pc, #44]	@ (800e3f0 <mount_volume+0x684>)
 800e3c2:	881a      	ldrh	r2, [r3, #0]
 800e3c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3c6:	80da      	strh	r2, [r3, #6]
#if FF_USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e3c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3ca:	4a0a      	ldr	r2, [pc, #40]	@ (800e3f4 <mount_volume+0x688>)
 800e3cc:	60da      	str	r2, [r3, #12]
#if FF_FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800e3ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3d0:	4a09      	ldr	r2, [pc, #36]	@ (800e3f8 <mount_volume+0x68c>)
 800e3d2:	611a      	str	r2, [r3, #16]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 800e3d4:	2300      	movs	r3, #0
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3768      	adds	r7, #104	@ 0x68
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e3e0:	0ffffff5 	.word	0x0ffffff5
 800e3e4:	41615252 	.word	0x41615252
 800e3e8:	61417272 	.word	0x61417272
 800e3ec:	aa550000 	.word	0xaa550000
 800e3f0:	2000e674 	.word	0x2000e674
 800e3f4:	2000e8d8 	.word	0x2000e8d8
 800e3f8:	2000e678 	.word	0x2000e678

0800e3fc <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e406:	2309      	movs	r3, #9
 800e408:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d01c      	beq.n	800e44a <validate+0x4e>
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d018      	beq.n	800e44a <validate+0x4e>
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d013      	beq.n	800e44a <validate+0x4e>
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	889a      	ldrh	r2, [r3, #4]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	88db      	ldrh	r3, [r3, #6]
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d10c      	bne.n	800e44a <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting physical drive is kept initialized */
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	785b      	ldrb	r3, [r3, #1]
 800e436:	4618      	mov	r0, r3
 800e438:	f7fc f844 	bl	800a4c4 <disk_status>
 800e43c:	4603      	mov	r3, r0
 800e43e:	f003 0301 	and.w	r3, r3, #1
 800e442:	2b00      	cmp	r3, #0
 800e444:	d101      	bne.n	800e44a <validate+0x4e>
			res = FR_OK;
 800e446:	2300      	movs	r3, #0
 800e448:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 800e44a:	7bfb      	ldrb	r3, [r7, #15]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d102      	bne.n	800e456 <validate+0x5a>
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	e000      	b.n	800e458 <validate+0x5c>
 800e456:	2300      	movs	r3, #0
 800e458:	683a      	ldr	r2, [r7, #0]
 800e45a:	6013      	str	r3, [r2, #0]
	return res;
 800e45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e45e:	4618      	mov	r0, r3
 800e460:	3710      	adds	r7, #16
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
	...

0800e468 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b088      	sub	sp, #32
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	60f8      	str	r0, [r7, #12]
 800e470:	60b9      	str	r1, [r7, #8]
 800e472:	4613      	mov	r3, r2
 800e474:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 800e47a:	f107 0310 	add.w	r3, r7, #16
 800e47e:	4618      	mov	r0, r3
 800e480:	f7ff fb19 	bl	800dab6 <get_ldnumber>
 800e484:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e486:	69fb      	ldr	r3, [r7, #28]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	da01      	bge.n	800e490 <f_mount+0x28>
 800e48c:	230b      	movs	r3, #11
 800e48e:	e02e      	b.n	800e4ee <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 800e490:	4a19      	ldr	r2, [pc, #100]	@ (800e4f8 <f_mount+0x90>)
 800e492:	69fb      	ldr	r3, [r7, #28]
 800e494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e498:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if registered */
 800e49a:	69bb      	ldr	r3, [r7, #24]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d007      	beq.n	800e4b0 <f_mount+0x48>
		FatFs[vol] = 0;
 800e4a0:	4a15      	ldr	r2, [pc, #84]	@ (800e4f8 <f_mount+0x90>)
 800e4a2:	69fb      	ldr	r3, [r7, #28]
 800e4a4:	2100      	movs	r1, #0
 800e4a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 800e4aa:	69bb      	ldr	r3, [r7, #24]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d00b      	beq.n	800e4ce <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	69fa      	ldr	r2, [r7, #28]
 800e4ba:	b2d2      	uxtb	r2, r2
 800e4bc:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 800e4c4:	68fa      	ldr	r2, [r7, #12]
 800e4c6:	490c      	ldr	r1, [pc, #48]	@ (800e4f8 <f_mount+0x90>)
 800e4c8:	69fb      	ldr	r3, [r7, #28]
 800e4ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 800e4ce:	79fb      	ldrb	r3, [r7, #7]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d101      	bne.n	800e4d8 <f_mount+0x70>
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	e00a      	b.n	800e4ee <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e4d8:	f107 010c 	add.w	r1, r7, #12
 800e4dc:	f107 0308 	add.w	r3, r7, #8
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f7ff fc42 	bl	800dd6c <mount_volume>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e4ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3720      	adds	r7, #32
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
 800e4f6:	bf00      	nop
 800e4f8:	2000e670 	.word	0x2000e670

0800e4fc <get_fattime>:

DWORD get_fattime(void) {
 800e4fc:	b480      	push	{r7}
 800e4fe:	af00      	add	r7, sp, #0
    return 0; // Sin fecha ni hora
 800e500:	2300      	movs	r3, #0
}
 800e502:	4618      	mov	r0, r3
 800e504:	46bd      	mov	sp, r7
 800e506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50a:	4770      	bx	lr

0800e50c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 800e50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e510:	b0a7      	sub	sp, #156	@ 0x9c
 800e512:	af00      	add	r7, sp, #0
 800e514:	61f8      	str	r0, [r7, #28]
 800e516:	61b9      	str	r1, [r7, #24]
 800e518:	4613      	mov	r3, r2
 800e51a:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e51c:	69fb      	ldr	r3, [r7, #28]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d101      	bne.n	800e526 <f_open+0x1a>
 800e522:	2309      	movs	r3, #9
 800e524:	e229      	b.n	800e97a <f_open+0x46e>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 800e526:	7dfb      	ldrb	r3, [r7, #23]
 800e528:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e52c:	75fb      	strb	r3, [r7, #23]
	res = mount_volume(&path, &fs, mode);
 800e52e:	7dfa      	ldrb	r2, [r7, #23]
 800e530:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800e534:	f107 0318 	add.w	r3, r7, #24
 800e538:	4618      	mov	r0, r3
 800e53a:	f7ff fc17 	bl	800dd6c <mount_volume>
 800e53e:	4603      	mov	r3, r0
 800e540:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	if (res == FR_OK) {
 800e544:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e548:	2b00      	cmp	r3, #0
 800e54a:	f040 820d 	bne.w	800e968 <f_open+0x45c>
		dj.obj.fs = fs;
 800e54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e550:	62bb      	str	r3, [r7, #40]	@ 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e552:	69ba      	ldr	r2, [r7, #24]
 800e554:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e558:	4611      	mov	r1, r2
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7ff fa1c 	bl	800d998 <follow_path>
 800e560:	4603      	mov	r3, r0
 800e562:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 800e566:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d107      	bne.n	800e57e <f_open+0x72>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e56e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800e572:	b25b      	sxtb	r3, r3
 800e574:	2b00      	cmp	r3, #0
 800e576:	da02      	bge.n	800e57e <f_open+0x72>
				res = FR_INVALID_NAME;
 800e578:	2306      	movs	r3, #6
 800e57a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e57e:	7dfb      	ldrb	r3, [r7, #23]
 800e580:	f003 031c 	and.w	r3, r3, #28
 800e584:	2b00      	cmp	r3, #0
 800e586:	f000 80d6 	beq.w	800e736 <f_open+0x22a>
			if (res != FR_OK) {					/* No file, create new */
 800e58a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d010      	beq.n	800e5b4 <f_open+0xa8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e592:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e596:	2b04      	cmp	r3, #4
 800e598:	d107      	bne.n	800e5aa <f_open+0x9e>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800e59a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f7fe fe7a 	bl	800d298 <dir_register>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e5aa:	7dfb      	ldrb	r3, [r7, #23]
 800e5ac:	f043 0308 	orr.w	r3, r3, #8
 800e5b0:	75fb      	strb	r3, [r7, #23]
 800e5b2:	e011      	b.n	800e5d8 <f_open+0xcc>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e5b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e5b8:	f003 0311 	and.w	r3, r3, #17
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d003      	beq.n	800e5c8 <f_open+0xbc>
					res = FR_DENIED;
 800e5c0:	2307      	movs	r3, #7
 800e5c2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800e5c6:	e007      	b.n	800e5d8 <f_open+0xcc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e5c8:	7dfb      	ldrb	r3, [r7, #23]
 800e5ca:	f003 0304 	and.w	r3, r3, #4
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d002      	beq.n	800e5d8 <f_open+0xcc>
 800e5d2:	2308      	movs	r3, #8
 800e5d4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800e5d8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	f040 80c6 	bne.w	800e76e <f_open+0x262>
 800e5e2:	7dfb      	ldrb	r3, [r7, #23]
 800e5e4:	f003 0308 	and.w	r3, r3, #8
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	f000 80c0 	beq.w	800e76e <f_open+0x262>
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800e5ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5f0:	781b      	ldrb	r3, [r3, #0]
 800e5f2:	2b04      	cmp	r3, #4
 800e5f4:	d14e      	bne.n	800e694 <f_open+0x188>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800e5f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5f8:	69fb      	ldr	r3, [r7, #28]
 800e5fa:	601a      	str	r2, [r3, #0]
					init_alloc_info(fs, &fp->obj);
 800e5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5fe:	69fa      	ldr	r2, [r7, #28]
 800e600:	4611      	mov	r1, r2
 800e602:	4618      	mov	r0, r3
 800e604:	f7fe fb32 	bl	800cc6c <init_alloc_info>
					/* Set directory entry block initial state */
					memset(fs->dirbuf + 2, 0, 30);	/* Clear 85 entry except for NumSec */
 800e608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e60a:	691b      	ldr	r3, [r3, #16]
 800e60c:	3302      	adds	r3, #2
 800e60e:	221e      	movs	r2, #30
 800e610:	2100      	movs	r1, #0
 800e612:	4618      	mov	r0, r3
 800e614:	f003 f894 	bl	8011740 <memset>
					memset(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
 800e618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e61a:	691b      	ldr	r3, [r3, #16]
 800e61c:	3326      	adds	r3, #38	@ 0x26
 800e61e:	221a      	movs	r2, #26
 800e620:	2100      	movs	r1, #0
 800e622:	4618      	mov	r0, r3
 800e624:	f003 f88c 	bl	8011740 <memset>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 800e628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e62a:	691b      	ldr	r3, [r3, #16]
 800e62c:	3304      	adds	r3, #4
 800e62e:	2220      	movs	r2, #32
 800e630:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
 800e632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e634:	691b      	ldr	r3, [r3, #16]
 800e636:	f103 0408 	add.w	r4, r3, #8
 800e63a:	f7ff ff5f 	bl	800e4fc <get_fattime>
 800e63e:	4603      	mov	r3, r0
 800e640:	4619      	mov	r1, r3
 800e642:	4620      	mov	r0, r4
 800e644:	f7fc fda3 	bl	800b18e <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800e648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e64a:	691b      	ldr	r3, [r3, #16]
 800e64c:	3321      	adds	r3, #33	@ 0x21
 800e64e:	2201      	movs	r2, #1
 800e650:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800e652:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e656:	4618      	mov	r0, r3
 800e658:	f7fe fb6a 	bl	800cd30 <store_xdir>
 800e65c:	4603      	mov	r3, r0
 800e65e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
 800e662:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e666:	2b00      	cmp	r3, #0
 800e668:	f040 8081 	bne.w	800e76e <f_open+0x262>
 800e66c:	69fb      	ldr	r3, [r7, #28]
 800e66e:	689b      	ldr	r3, [r3, #8]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d07c      	beq.n	800e76e <f_open+0x262>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800e674:	69f8      	ldr	r0, [r7, #28]
 800e676:	69fb      	ldr	r3, [r7, #28]
 800e678:	689b      	ldr	r3, [r3, #8]
 800e67a:	2200      	movs	r2, #0
 800e67c:	4619      	mov	r1, r3
 800e67e:	f7fd fb91 	bl	800bda4 <remove_chain>
 800e682:	4603      	mov	r3, r0
 800e684:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800e688:	69fb      	ldr	r3, [r7, #28]
 800e68a:	689a      	ldr	r2, [r3, #8]
 800e68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e68e:	3a01      	subs	r2, #1
 800e690:	615a      	str	r2, [r3, #20]
 800e692:	e06c      	b.n	800e76e <f_open+0x262>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 800e694:	f7ff ff32 	bl	800e4fc <get_fattime>
 800e698:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
					st_dword(dj.dir + DIR_CrtTime, tm);
 800e69c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e69e:	330e      	adds	r3, #14
 800e6a0:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f7fc fd72 	bl	800b18e <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 800e6aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e6ac:	3316      	adds	r3, #22
 800e6ae:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7fc fd6b 	bl	800b18e <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 800e6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6ba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e6bc:	4611      	mov	r1, r2
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f7fd ff60 	bl	800c584 <ld_clust>
 800e6c4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e6c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e6ca:	330b      	adds	r3, #11
 800e6cc:	2220      	movs	r2, #32
 800e6ce:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6d2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f7fd ff73 	bl	800c5c2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e6dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e6de:	331c      	adds	r3, #28
 800e6e0:	2100      	movs	r1, #0
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7fc fd53 	bl	800b18e <st_dword>
					fs->wflag = 1;
 800e6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 800e6ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d03b      	beq.n	800e76e <f_open+0x262>
						sc = fs->winsect;
 800e6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
						res = remove_chain(&dj.obj, cl, 0);
 800e6fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e700:	2200      	movs	r2, #0
 800e702:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800e706:	4618      	mov	r0, r3
 800e708:	f7fd fb4c 	bl	800bda4 <remove_chain>
 800e70c:	4603      	mov	r3, r0
 800e70e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						if (res == FR_OK) {
 800e712:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e716:	2b00      	cmp	r3, #0
 800e718:	d129      	bne.n	800e76e <f_open+0x262>
							res = move_window(fs, sc);
 800e71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e71c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e71e:	4618      	mov	r0, r3
 800e720:	f7fc feb4 	bl	800b48c <move_window>
 800e724:	4603      	mov	r3, r0
 800e726:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e72c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e730:	3a01      	subs	r2, #1
 800e732:	615a      	str	r2, [r3, #20]
 800e734:	e01b      	b.n	800e76e <f_open+0x262>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 800e736:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d117      	bne.n	800e76e <f_open+0x262>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 800e73e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e742:	f003 0310 	and.w	r3, r3, #16
 800e746:	2b00      	cmp	r3, #0
 800e748:	d003      	beq.n	800e752 <f_open+0x246>
					res = FR_NO_FILE;
 800e74a:	2304      	movs	r3, #4
 800e74c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800e750:	e00d      	b.n	800e76e <f_open+0x262>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 800e752:	7dfb      	ldrb	r3, [r7, #23]
 800e754:	f003 0302 	and.w	r3, r3, #2
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d008      	beq.n	800e76e <f_open+0x262>
 800e75c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e760:	f003 0301 	and.w	r3, r3, #1
 800e764:	2b00      	cmp	r3, #0
 800e766:	d002      	beq.n	800e76e <f_open+0x262>
						res = FR_DENIED;
 800e768:	2307      	movs	r3, #7
 800e76a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 800e76e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e772:	2b00      	cmp	r3, #0
 800e774:	d10f      	bne.n	800e796 <f_open+0x28a>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800e776:	7dfb      	ldrb	r3, [r7, #23]
 800e778:	f003 0308 	and.w	r3, r3, #8
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d003      	beq.n	800e788 <f_open+0x27c>
 800e780:	7dfb      	ldrb	r3, [r7, #23]
 800e782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e786:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e78a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e78c:	69fb      	ldr	r3, [r7, #28]
 800e78e:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800e790:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e792:	69fb      	ldr	r3, [r7, #28]
 800e794:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e796:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	f040 80e4 	bne.w	800e968 <f_open+0x45c>
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800e7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7a2:	781b      	ldrb	r3, [r3, #0]
 800e7a4:	2b04      	cmp	r3, #4
 800e7a6:	d116      	bne.n	800e7d6 <f_open+0x2ca>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800e7a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e7aa:	69fb      	ldr	r3, [r7, #28]
 800e7ac:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800e7ae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800e7b2:	4613      	mov	r3, r2
 800e7b4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e7b8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e7bc:	431a      	orrs	r2, r3
 800e7be:	69fb      	ldr	r3, [r7, #28]
 800e7c0:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800e7c2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800e7c4:	69fb      	ldr	r3, [r7, #28]
 800e7c6:	629a      	str	r2, [r3, #40]	@ 0x28
				init_alloc_info(fs, &fp->obj);
 800e7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7ca:	69fa      	ldr	r2, [r7, #28]
 800e7cc:	4611      	mov	r1, r2
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f7fe fa4c 	bl	800cc6c <init_alloc_info>
 800e7d4:	e016      	b.n	800e804 <f_open+0x2f8>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7d8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e7da:	4611      	mov	r1, r2
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f7fd fed1 	bl	800c584 <ld_clust>
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	69fb      	ldr	r3, [r7, #28]
 800e7e6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e7e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e7ea:	331c      	adds	r3, #28
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f7fc fbb5 	bl	800af5c <ld_dword>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	60bb      	str	r3, [r7, #8]
 800e7f8:	60fa      	str	r2, [r7, #12]
 800e7fa:	69fb      	ldr	r3, [r7, #28]
 800e7fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e800:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 800e804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e806:	69fb      	ldr	r3, [r7, #28]
 800e808:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e80c:	88da      	ldrh	r2, [r3, #6]
 800e80e:	69fb      	ldr	r3, [r7, #28]
 800e810:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 800e812:	69fb      	ldr	r3, [r7, #28]
 800e814:	7dfa      	ldrb	r2, [r7, #23]
 800e816:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;		/* Clear error flag */
 800e81a:	69fb      	ldr	r3, [r7, #28]
 800e81c:	2200      	movs	r2, #0
 800e81e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;		/* Invalidate current data sector */
 800e822:	69fb      	ldr	r3, [r7, #28]
 800e824:	2200      	movs	r2, #0
 800e826:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;		/* Set file pointer top of the file */
 800e828:	69f9      	ldr	r1, [r7, #28]
 800e82a:	f04f 0200 	mov.w	r2, #0
 800e82e:	f04f 0300 	mov.w	r3, #0
 800e832:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800e836:	69fb      	ldr	r3, [r7, #28]
 800e838:	3350      	adds	r3, #80	@ 0x50
 800e83a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e83e:	2100      	movs	r1, #0
 800e840:	4618      	mov	r0, r3
 800e842:	f002 ff7d 	bl	8011740 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e846:	7dfb      	ldrb	r3, [r7, #23]
 800e848:	f003 0320 	and.w	r3, r3, #32
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	f000 808b 	beq.w	800e968 <f_open+0x45c>
 800e852:	69fb      	ldr	r3, [r7, #28]
 800e854:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e858:	4313      	orrs	r3, r2
 800e85a:	f000 8085 	beq.w	800e968 <f_open+0x45c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e85e:	69fb      	ldr	r3, [r7, #28]
 800e860:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e864:	69f9      	ldr	r1, [r7, #28]
 800e866:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e86c:	895b      	ldrh	r3, [r3, #10]
 800e86e:	025b      	lsls	r3, r3, #9
 800e870:	67bb      	str	r3, [r7, #120]	@ 0x78
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e872:	69fb      	ldr	r3, [r7, #28]
 800e874:	689b      	ldr	r3, [r3, #8]
 800e876:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e87a:	69fb      	ldr	r3, [r7, #28]
 800e87c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e880:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 800e884:	e025      	b.n	800e8d2 <f_open+0x3c6>
					clst = get_fat(&fp->obj, clst);
 800e886:	69fb      	ldr	r3, [r7, #28]
 800e888:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7fc ff2f 	bl	800b6f0 <get_fat>
 800e892:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
					if (clst <= 1) res = FR_INT_ERR;
 800e896:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e89a:	2b01      	cmp	r3, #1
 800e89c:	d802      	bhi.n	800e8a4 <f_open+0x398>
 800e89e:	2302      	movs	r3, #2
 800e8a0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e8a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ac:	d102      	bne.n	800e8b4 <f_open+0x3a8>
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e8b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	461d      	mov	r5, r3
 800e8ba:	4616      	mov	r6, r2
 800e8bc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800e8c0:	1b51      	subs	r1, r2, r5
 800e8c2:	6039      	str	r1, [r7, #0]
 800e8c4:	eb63 0306 	sbc.w	r3, r3, r6
 800e8c8:	607b      	str	r3, [r7, #4]
 800e8ca:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e8ce:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
 800e8d2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d109      	bne.n	800e8ee <f_open+0x3e2>
 800e8da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e8dc:	2200      	movs	r2, #0
 800e8de:	469a      	mov	sl, r3
 800e8e0:	4693      	mov	fp, r2
 800e8e2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800e8e6:	4592      	cmp	sl, r2
 800e8e8:	eb7b 0303 	sbcs.w	r3, fp, r3
 800e8ec:	d3cb      	bcc.n	800e886 <f_open+0x37a>
				}
				fp->clust = clst;
 800e8ee:	69fb      	ldr	r3, [r7, #28]
 800e8f0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800e8f4:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e8f6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d134      	bne.n	800e968 <f_open+0x45c>
 800e8fe:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800e902:	f3c2 0808 	ubfx	r8, r2, #0, #9
 800e906:	f04f 0900 	mov.w	r9, #0
 800e90a:	ea58 0309 	orrs.w	r3, r8, r9
 800e90e:	d02b      	beq.n	800e968 <f_open+0x45c>
					sc = clst2sect(fs, clst);
 800e910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e912:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e916:	4618      	mov	r0, r3
 800e918:	f7fc feca 	bl	800b6b0 <clst2sect>
 800e91c:	67f8      	str	r0, [r7, #124]	@ 0x7c
					if (sc == 0) {
 800e91e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e920:	2b00      	cmp	r3, #0
 800e922:	d103      	bne.n	800e92c <f_open+0x420>
						res = FR_INT_ERR;
 800e924:	2302      	movs	r3, #2
 800e926:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800e92a:	e01d      	b.n	800e968 <f_open+0x45c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e92c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800e930:	f04f 0200 	mov.w	r2, #0
 800e934:	f04f 0300 	mov.w	r3, #0
 800e938:	0a42      	lsrs	r2, r0, #9
 800e93a:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800e93e:	0a4b      	lsrs	r3, r1, #9
 800e940:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e942:	441a      	add	r2, r3
 800e944:	69fb      	ldr	r3, [r7, #28]
 800e946:	645a      	str	r2, [r3, #68]	@ 0x44
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e94a:	7858      	ldrb	r0, [r3, #1]
 800e94c:	69fb      	ldr	r3, [r7, #28]
 800e94e:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800e952:	69fb      	ldr	r3, [r7, #28]
 800e954:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e956:	2301      	movs	r3, #1
 800e958:	f7fb fdd0 	bl	800a4fc <disk_read>
 800e95c:	4603      	mov	r3, r0
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d002      	beq.n	800e968 <f_open+0x45c>
 800e962:	2301      	movs	r3, #1
 800e964:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e968:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d002      	beq.n	800e976 <f_open+0x46a>
 800e970:	69fb      	ldr	r3, [r7, #28]
 800e972:	2200      	movs	r2, #0
 800e974:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e976:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800e97a:	4618      	mov	r0, r3
 800e97c:	379c      	adds	r7, #156	@ 0x9c
 800e97e:	46bd      	mov	sp, r7
 800e980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e984 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 800e984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e988:	b095      	sub	sp, #84	@ 0x54
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	61f8      	str	r0, [r7, #28]
 800e98e:	61b9      	str	r1, [r7, #24]
 800e990:	617a      	str	r2, [r7, #20]
 800e992:	613b      	str	r3, [r7, #16]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e994:	69bb      	ldr	r3, [r7, #24]
 800e996:	63fb      	str	r3, [r7, #60]	@ 0x3c


	*br = 0;	/* Clear read byte counter */
 800e998:	693b      	ldr	r3, [r7, #16]
 800e99a:	2200      	movs	r2, #0
 800e99c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e99e:	69fb      	ldr	r3, [r7, #28]
 800e9a0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800e9a4:	4611      	mov	r1, r2
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f7ff fd28 	bl	800e3fc <validate>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e9b2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d108      	bne.n	800e9cc <f_read+0x48>
 800e9ba:	69fb      	ldr	r3, [r7, #28]
 800e9bc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e9c0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800e9c4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d002      	beq.n	800e9d2 <f_read+0x4e>
 800e9cc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e9d0:	e13f      	b.n	800ec52 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e9d2:	69fb      	ldr	r3, [r7, #28]
 800e9d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e9d8:	f003 0301 	and.w	r3, r3, #1
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d101      	bne.n	800e9e4 <f_read+0x60>
 800e9e0:	2307      	movs	r3, #7
 800e9e2:	e136      	b.n	800ec52 <f_read+0x2ce>
	remain = fp->obj.objsize - fp->fptr;
 800e9e4:	69fb      	ldr	r3, [r7, #28]
 800e9e6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800e9ea:	69fb      	ldr	r3, [r7, #28]
 800e9ec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e9f0:	1a86      	subs	r6, r0, r2
 800e9f2:	603e      	str	r6, [r7, #0]
 800e9f4:	eb61 0303 	sbc.w	r3, r1, r3
 800e9f8:	607b      	str	r3, [r7, #4]
 800e9fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e9fe:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	2200      	movs	r2, #0
 800ea06:	469a      	mov	sl, r3
 800ea08:	4693      	mov	fp, r2
 800ea0a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800ea0e:	4552      	cmp	r2, sl
 800ea10:	eb73 030b 	sbcs.w	r3, r3, fp
 800ea14:	f080 8118 	bcs.w	800ec48 <f_read+0x2c4>
 800ea18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea1a:	617b      	str	r3, [r7, #20]

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800ea1c:	e114      	b.n	800ec48 <f_read+0x2c4>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ea1e:	69fb      	ldr	r3, [r7, #28]
 800ea20:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ea24:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800ea28:	2500      	movs	r5, #0
 800ea2a:	ea54 0305 	orrs.w	r3, r4, r5
 800ea2e:	f040 80cd 	bne.w	800ebcc <f_read+0x248>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ea32:	69fb      	ldr	r3, [r7, #28]
 800ea34:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ea38:	f04f 0200 	mov.w	r2, #0
 800ea3c:	f04f 0300 	mov.w	r3, #0
 800ea40:	0a42      	lsrs	r2, r0, #9
 800ea42:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800ea46:	0a4b      	lsrs	r3, r1, #9
 800ea48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea4a:	895b      	ldrh	r3, [r3, #10]
 800ea4c:	3b01      	subs	r3, #1
 800ea4e:	4013      	ands	r3, r2
 800ea50:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (csect == 0) {					/* On the cluster boundary? */
 800ea52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d126      	bne.n	800eaa6 <f_read+0x122>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ea58:	69fb      	ldr	r3, [r7, #28]
 800ea5a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ea5e:	4313      	orrs	r3, r2
 800ea60:	d103      	bne.n	800ea6a <f_read+0xe6>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ea62:	69fb      	ldr	r3, [r7, #28]
 800ea64:	689b      	ldr	r3, [r3, #8]
 800ea66:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ea68:	e007      	b.n	800ea7a <f_read+0xf6>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ea6a:	69fa      	ldr	r2, [r7, #28]
 800ea6c:	69fb      	ldr	r3, [r7, #28]
 800ea6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea70:	4619      	mov	r1, r3
 800ea72:	4610      	mov	r0, r2
 800ea74:	f7fc fe3c 	bl	800b6f0 <get_fat>
 800ea78:	64b8      	str	r0, [r7, #72]	@ 0x48
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ea7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea7c:	2b01      	cmp	r3, #1
 800ea7e:	d805      	bhi.n	800ea8c <f_read+0x108>
 800ea80:	69fb      	ldr	r3, [r7, #28]
 800ea82:	2202      	movs	r2, #2
 800ea84:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ea88:	2302      	movs	r3, #2
 800ea8a:	e0e2      	b.n	800ec52 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ea8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea92:	d105      	bne.n	800eaa0 <f_read+0x11c>
 800ea94:	69fb      	ldr	r3, [r7, #28]
 800ea96:	2201      	movs	r2, #1
 800ea98:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	e0d8      	b.n	800ec52 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 800eaa0:	69fb      	ldr	r3, [r7, #28]
 800eaa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eaa4:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800eaa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eaa8:	69fb      	ldr	r3, [r7, #28]
 800eaaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eaac:	4619      	mov	r1, r3
 800eaae:	4610      	mov	r0, r2
 800eab0:	f7fc fdfe 	bl	800b6b0 <clst2sect>
 800eab4:	62b8      	str	r0, [r7, #40]	@ 0x28
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800eab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d105      	bne.n	800eac8 <f_read+0x144>
 800eabc:	69fb      	ldr	r3, [r7, #28]
 800eabe:	2202      	movs	r2, #2
 800eac0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800eac4:	2302      	movs	r3, #2
 800eac6:	e0c4      	b.n	800ec52 <f_read+0x2ce>
			sect += csect;
 800eac8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eaca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eacc:	4413      	add	r3, r2
 800eace:	62bb      	str	r3, [r7, #40]	@ 0x28
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	0a5b      	lsrs	r3, r3, #9
 800ead4:	643b      	str	r3, [r7, #64]	@ 0x40
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 800ead6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d03b      	beq.n	800eb54 <f_read+0x1d0>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800eadc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eae0:	4413      	add	r3, r2
 800eae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eae4:	8952      	ldrh	r2, [r2, #10]
 800eae6:	4293      	cmp	r3, r2
 800eae8:	d905      	bls.n	800eaf6 <f_read+0x172>
					cc = fs->csize - csect;
 800eaea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaec:	895b      	ldrh	r3, [r3, #10]
 800eaee:	461a      	mov	r2, r3
 800eaf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaf2:	1ad3      	subs	r3, r2, r3
 800eaf4:	643b      	str	r3, [r7, #64]	@ 0x40
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eaf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf8:	7858      	ldrb	r0, [r3, #1]
 800eafa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eafc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eafe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800eb00:	f7fb fcfc 	bl	800a4fc <disk_read>
 800eb04:	4603      	mov	r3, r0
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d005      	beq.n	800eb16 <f_read+0x192>
 800eb0a:	69fb      	ldr	r3, [r7, #28]
 800eb0c:	2201      	movs	r2, #1
 800eb0e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800eb12:	2301      	movs	r3, #1
 800eb14:	e09d      	b.n	800ec52 <f_read+0x2ce>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800eb16:	69fb      	ldr	r3, [r7, #28]
 800eb18:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800eb1c:	b25b      	sxtb	r3, r3
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	da14      	bge.n	800eb4c <f_read+0x1c8>
 800eb22:	69fb      	ldr	r3, [r7, #28]
 800eb24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eb26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb28:	1ad3      	subs	r3, r2, r3
 800eb2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d90d      	bls.n	800eb4c <f_read+0x1c8>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800eb30:	69fb      	ldr	r3, [r7, #28]
 800eb32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eb34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb36:	1ad3      	subs	r3, r2, r3
 800eb38:	025b      	lsls	r3, r3, #9
 800eb3a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800eb3c:	18d0      	adds	r0, r2, r3
 800eb3e:	69fb      	ldr	r3, [r7, #28]
 800eb40:	3350      	adds	r3, #80	@ 0x50
 800eb42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb46:	4619      	mov	r1, r3
 800eb48:	f002 fe3c 	bl	80117c4 <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800eb4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eb4e:	025b      	lsls	r3, r3, #9
 800eb50:	647b      	str	r3, [r7, #68]	@ 0x44
				continue;
 800eb52:	e059      	b.n	800ec08 <f_read+0x284>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800eb54:	69fb      	ldr	r3, [r7, #28]
 800eb56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d033      	beq.n	800ebc6 <f_read+0x242>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800eb5e:	69fb      	ldr	r3, [r7, #28]
 800eb60:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800eb64:	b25b      	sxtb	r3, r3
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	da1b      	bge.n	800eba2 <f_read+0x21e>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eb6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb6c:	7858      	ldrb	r0, [r3, #1]
 800eb6e:	69fb      	ldr	r3, [r7, #28]
 800eb70:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800eb74:	69fb      	ldr	r3, [r7, #28]
 800eb76:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eb78:	2301      	movs	r3, #1
 800eb7a:	f7fb fcd2 	bl	800a522 <disk_write>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d005      	beq.n	800eb90 <f_read+0x20c>
 800eb84:	69fb      	ldr	r3, [r7, #28]
 800eb86:	2201      	movs	r2, #1
 800eb88:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	e060      	b.n	800ec52 <f_read+0x2ce>
					fp->flag &= (BYTE)~FA_DIRTY;
 800eb90:	69fb      	ldr	r3, [r7, #28]
 800eb92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800eb96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eb9a:	b2da      	uxtb	r2, r3
 800eb9c:	69fb      	ldr	r3, [r7, #28]
 800eb9e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800eba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eba4:	7858      	ldrb	r0, [r3, #1]
 800eba6:	69fb      	ldr	r3, [r7, #28]
 800eba8:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800ebac:	2301      	movs	r3, #1
 800ebae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ebb0:	f7fb fca4 	bl	800a4fc <disk_read>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d005      	beq.n	800ebc6 <f_read+0x242>
 800ebba:	69fb      	ldr	r3, [r7, #28]
 800ebbc:	2201      	movs	r2, #1
 800ebbe:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	e045      	b.n	800ec52 <f_read+0x2ce>
			}
#endif
			fp->sect = sect;
 800ebc6:	69fb      	ldr	r3, [r7, #28]
 800ebc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ebca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800ebcc:	69fb      	ldr	r3, [r7, #28]
 800ebce:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ebd2:	4613      	mov	r3, r2
 800ebd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebd8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ebdc:	647b      	str	r3, [r7, #68]	@ 0x44
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ebde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	429a      	cmp	r2, r3
 800ebe4:	d901      	bls.n	800ebea <f_read+0x266>
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	647b      	str	r3, [r7, #68]	@ 0x44
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800ebf0:	69fb      	ldr	r3, [r7, #28]
 800ebf2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ebf6:	4613      	mov	r3, r2
 800ebf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebfc:	440b      	add	r3, r1
 800ebfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ec00:	4619      	mov	r1, r3
 800ec02:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ec04:	f002 fdde 	bl	80117c4 <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800ec08:	697a      	ldr	r2, [r7, #20]
 800ec0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec0c:	1ad3      	subs	r3, r2, r3
 800ec0e:	617b      	str	r3, [r7, #20]
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	681a      	ldr	r2, [r3, #0]
 800ec14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec16:	441a      	add	r2, r3
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	601a      	str	r2, [r3, #0]
 800ec1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ec1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec20:	4413      	add	r3, r2
 800ec22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec24:	69fb      	ldr	r3, [r7, #28]
 800ec26:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ec2a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ec2c:	2000      	movs	r0, #0
 800ec2e:	4688      	mov	r8, r1
 800ec30:	4681      	mov	r9, r0
 800ec32:	eb12 0108 	adds.w	r1, r2, r8
 800ec36:	60b9      	str	r1, [r7, #8]
 800ec38:	eb43 0309 	adc.w	r3, r3, r9
 800ec3c:	60fb      	str	r3, [r7, #12]
 800ec3e:	69fb      	ldr	r3, [r7, #28]
 800ec40:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ec44:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	f47f aee7 	bne.w	800ea1e <f_read+0x9a>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ec50:	2300      	movs	r3, #0
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3754      	adds	r7, #84	@ 0x54
 800ec56:	46bd      	mov	sp, r7
 800ec58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ec5c <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 800ec5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec60:	b08d      	sub	sp, #52	@ 0x34
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	60f8      	str	r0, [r7, #12]
 800ec66:	60b9      	str	r1, [r7, #8]
 800ec68:	607a      	str	r2, [r7, #4]
 800ec6a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	2200      	movs	r2, #0
 800ec74:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	f107 0210 	add.w	r2, r7, #16
 800ec7c:	4611      	mov	r1, r2
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f7ff fbbc 	bl	800e3fc <validate>
 800ec84:	4603      	mov	r3, r0
 800ec86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ec8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d108      	bne.n	800eca4 <f_write+0x48>
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ec98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800ec9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d002      	beq.n	800ecaa <f_write+0x4e>
 800eca4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eca8:	e17b      	b.n	800efa2 <f_write+0x346>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ecb0:	f003 0302 	and.w	r3, r3, #2
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d101      	bne.n	800ecbc <f_write+0x60>
 800ecb8:	2307      	movs	r3, #7
 800ecba:	e172      	b.n	800efa2 <f_write+0x346>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ecbc:	693b      	ldr	r3, [r7, #16]
 800ecbe:	781b      	ldrb	r3, [r3, #0]
 800ecc0:	2b04      	cmp	r3, #4
 800ecc2:	f000 815e 	beq.w	800ef82 <f_write+0x326>
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	18d1      	adds	r1, r2, r3
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ecd6:	4613      	mov	r3, r2
 800ecd8:	4299      	cmp	r1, r3
 800ecda:	f080 8152 	bcs.w	800ef82 <f_write+0x326>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ece4:	4613      	mov	r3, r2
 800ece6:	43db      	mvns	r3, r3
 800ece8:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800ecea:	e14a      	b.n	800ef82 <f_write+0x326>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ecf2:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800ecf6:	2500      	movs	r5, #0
 800ecf8:	ea54 0305 	orrs.w	r3, r4, r5
 800ecfc:	f040 80ef 	bne.w	800eede <f_write+0x282>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ed06:	f04f 0200 	mov.w	r2, #0
 800ed0a:	f04f 0300 	mov.w	r3, #0
 800ed0e:	0a42      	lsrs	r2, r0, #9
 800ed10:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800ed14:	0a4b      	lsrs	r3, r1, #9
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	895b      	ldrh	r3, [r3, #10]
 800ed1a:	3b01      	subs	r3, #1
 800ed1c:	4013      	ands	r3, r2
 800ed1e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ed20:	69bb      	ldr	r3, [r7, #24]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d13a      	bne.n	800ed9c <f_write+0x140>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ed2c:	4313      	orrs	r3, r2
 800ed2e:	d10c      	bne.n	800ed4a <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	689b      	ldr	r3, [r3, #8]
 800ed34:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ed36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d10e      	bne.n	800ed5a <f_write+0xfe>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	2100      	movs	r1, #0
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7fd f911 	bl	800bf68 <create_chain>
 800ed46:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ed48:	e007      	b.n	800ed5a <f_write+0xfe>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ed4a:	68fa      	ldr	r2, [r7, #12]
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed50:	4619      	mov	r1, r3
 800ed52:	4610      	mov	r0, r2
 800ed54:	f7fd f908 	bl	800bf68 <create_chain>
 800ed58:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ed5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	f000 8115 	beq.w	800ef8c <f_write+0x330>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ed62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed64:	2b01      	cmp	r3, #1
 800ed66:	d105      	bne.n	800ed74 <f_write+0x118>
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	2202      	movs	r2, #2
 800ed6c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ed70:	2302      	movs	r3, #2
 800ed72:	e116      	b.n	800efa2 <f_write+0x346>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ed74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed7a:	d105      	bne.n	800ed88 <f_write+0x12c>
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	2201      	movs	r2, #1
 800ed80:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ed84:	2301      	movs	r3, #1
 800ed86:	e10c      	b.n	800efa2 <f_write+0x346>
				fp->clust = clst;			/* Update current cluster */
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ed8c:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	689b      	ldr	r3, [r3, #8]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d102      	bne.n	800ed9c <f_write+0x140>
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ed9a:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800eda2:	b25b      	sxtb	r3, r3
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	da1b      	bge.n	800ede0 <f_write+0x184>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	7858      	ldrb	r0, [r3, #1]
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800edb6:	2301      	movs	r3, #1
 800edb8:	f7fb fbb3 	bl	800a522 <disk_write>
 800edbc:	4603      	mov	r3, r0
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d005      	beq.n	800edce <f_write+0x172>
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	2201      	movs	r2, #1
 800edc6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800edca:	2301      	movs	r3, #1
 800edcc:	e0e9      	b.n	800efa2 <f_write+0x346>
				fp->flag &= (BYTE)~FA_DIRTY;
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800edd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800edd8:	b2da      	uxtb	r2, r3
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800ede0:	693a      	ldr	r2, [r7, #16]
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ede6:	4619      	mov	r1, r3
 800ede8:	4610      	mov	r0, r2
 800edea:	f7fc fc61 	bl	800b6b0 <clst2sect>
 800edee:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d105      	bne.n	800ee02 <f_write+0x1a6>
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	2202      	movs	r2, #2
 800edfa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800edfe:	2302      	movs	r3, #2
 800ee00:	e0cf      	b.n	800efa2 <f_write+0x346>
			sect += csect;
 800ee02:	697a      	ldr	r2, [r7, #20]
 800ee04:	69bb      	ldr	r3, [r7, #24]
 800ee06:	4413      	add	r3, r2
 800ee08:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	0a5b      	lsrs	r3, r3, #9
 800ee0e:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 800ee10:	6a3b      	ldr	r3, [r7, #32]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d03f      	beq.n	800ee96 <f_write+0x23a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ee16:	69ba      	ldr	r2, [r7, #24]
 800ee18:	6a3b      	ldr	r3, [r7, #32]
 800ee1a:	4413      	add	r3, r2
 800ee1c:	693a      	ldr	r2, [r7, #16]
 800ee1e:	8952      	ldrh	r2, [r2, #10]
 800ee20:	4293      	cmp	r3, r2
 800ee22:	d905      	bls.n	800ee30 <f_write+0x1d4>
					cc = fs->csize - csect;
 800ee24:	693b      	ldr	r3, [r7, #16]
 800ee26:	895b      	ldrh	r3, [r3, #10]
 800ee28:	461a      	mov	r2, r3
 800ee2a:	69bb      	ldr	r3, [r7, #24]
 800ee2c:	1ad3      	subs	r3, r2, r3
 800ee2e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ee30:	693b      	ldr	r3, [r7, #16]
 800ee32:	7858      	ldrb	r0, [r3, #1]
 800ee34:	6a3b      	ldr	r3, [r7, #32]
 800ee36:	697a      	ldr	r2, [r7, #20]
 800ee38:	69f9      	ldr	r1, [r7, #28]
 800ee3a:	f7fb fb72 	bl	800a522 <disk_write>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d005      	beq.n	800ee50 <f_write+0x1f4>
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	2201      	movs	r2, #1
 800ee48:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	e0a8      	b.n	800efa2 <f_write+0x346>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	1ad3      	subs	r3, r2, r3
 800ee58:	6a3a      	ldr	r2, [r7, #32]
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d917      	bls.n	800ee8e <f_write+0x232>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	1ad3      	subs	r3, r2, r3
 800ee6c:	025b      	lsls	r3, r3, #9
 800ee6e:	69fa      	ldr	r2, [r7, #28]
 800ee70:	4413      	add	r3, r2
 800ee72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ee76:	4619      	mov	r1, r3
 800ee78:	f002 fca4 	bl	80117c4 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ee82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ee86:	b2da      	uxtb	r2, r3
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ee8e:	6a3b      	ldr	r3, [r7, #32]
 800ee90:	025b      	lsls	r3, r3, #9
 800ee92:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800ee94:	e04a      	b.n	800ef2c <f_write+0x2d0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee9a:	697a      	ldr	r2, [r7, #20]
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d01b      	beq.n	800eed8 <f_write+0x27c>
				fp->fptr < fp->obj.objsize &&
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800eeac:	4290      	cmp	r0, r2
 800eeae:	eb71 0303 	sbcs.w	r3, r1, r3
 800eeb2:	d211      	bcs.n	800eed8 <f_write+0x27c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 800eeb4:	693b      	ldr	r3, [r7, #16]
 800eeb6:	7858      	ldrb	r0, [r3, #1]
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800eebe:	2301      	movs	r3, #1
 800eec0:	697a      	ldr	r2, [r7, #20]
 800eec2:	f7fb fb1b 	bl	800a4fc <disk_read>
 800eec6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d005      	beq.n	800eed8 <f_write+0x27c>
					ABORT(fs, FR_DISK_ERR);
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	2201      	movs	r2, #1
 800eed0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800eed4:	2301      	movs	r3, #1
 800eed6:	e064      	b.n	800efa2 <f_write+0x346>
			}
#endif
			fp->sect = sect;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	697a      	ldr	r2, [r7, #20]
 800eedc:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800eee4:	4613      	mov	r3, r2
 800eee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eeea:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800eeee:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800eef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d901      	bls.n	800eefc <f_write+0x2a0>
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	627b      	str	r3, [r7, #36]	@ 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ef08:	4613      	mov	r3, r2
 800ef0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef0e:	440b      	add	r3, r1
 800ef10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef12:	69f9      	ldr	r1, [r7, #28]
 800ef14:	4618      	mov	r0, r3
 800ef16:	f002 fc55 	bl	80117c4 <memcpy>
		fp->flag |= FA_DIRTY;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ef20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ef24:	b2da      	uxtb	r2, r3
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800ef2c:	687a      	ldr	r2, [r7, #4]
 800ef2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef30:	1ad3      	subs	r3, r2, r3
 800ef32:	607b      	str	r3, [r7, #4]
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	681a      	ldr	r2, [r3, #0]
 800ef38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef3a:	441a      	add	r2, r3
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	601a      	str	r2, [r3, #0]
 800ef40:	69fa      	ldr	r2, [r7, #28]
 800ef42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef44:	4413      	add	r3, r2
 800ef46:	61fb      	str	r3, [r7, #28]
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ef4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ef50:	2000      	movs	r0, #0
 800ef52:	4688      	mov	r8, r1
 800ef54:	4681      	mov	r9, r0
 800ef56:	eb12 0a08 	adds.w	sl, r2, r8
 800ef5a:	eb43 0b09 	adc.w	fp, r3, r9
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ef6a:	68f9      	ldr	r1, [r7, #12]
 800ef6c:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 800ef70:	4282      	cmp	r2, r0
 800ef72:	eb73 0601 	sbcs.w	r6, r3, r1
 800ef76:	d201      	bcs.n	800ef7c <f_write+0x320>
 800ef78:	4602      	mov	r2, r0
 800ef7a:	460b      	mov	r3, r1
 800ef7c:	68f9      	ldr	r1, [r7, #12]
 800ef7e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	f47f aeb1 	bne.w	800ecec <f_write+0x90>
 800ef8a:	e000      	b.n	800ef8e <f_write+0x332>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ef8c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ef94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef98:	b2da      	uxtb	r2, r3
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 800efa0:	2300      	movs	r3, #0
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	3734      	adds	r7, #52	@ 0x34
 800efa6:	46bd      	mov	sp, r7
 800efa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800efac <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b09a      	sub	sp, #104	@ 0x68
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800efba:	4611      	mov	r1, r2
 800efbc:	4618      	mov	r0, r3
 800efbe:	f7ff fa1d 	bl	800e3fc <validate>
 800efc2:	4603      	mov	r3, r0
 800efc4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800efc8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800efcc:	2b00      	cmp	r3, #0
 800efce:	f040 8105 	bne.w	800f1dc <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800efd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efdc:	2b00      	cmp	r3, #0
 800efde:	f000 80fd 	beq.w	800f1dc <f_sync+0x230>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800efe8:	b25b      	sxtb	r3, r3
 800efea:	2b00      	cmp	r3, #0
 800efec:	da17      	bge.n	800f01e <f_sync+0x72>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800efee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eff0:	7858      	ldrb	r0, [r3, #1]
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800effc:	2301      	movs	r3, #1
 800effe:	f7fb fa90 	bl	800a522 <disk_write>
 800f002:	4603      	mov	r3, r0
 800f004:	2b00      	cmp	r3, #0
 800f006:	d001      	beq.n	800f00c <f_sync+0x60>
 800f008:	2301      	movs	r3, #1
 800f00a:	e0e9      	b.n	800f1e0 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f016:	b2da      	uxtb	r2, r3
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f01e:	f7ff fa6d 	bl	800e4fc <get_fattime>
 800f022:	6638      	str	r0, [r7, #96]	@ 0x60
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800f024:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	2b04      	cmp	r3, #4
 800f02a:	f040 808c 	bne.w	800f146 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	4618      	mov	r0, r3
 800f032:	f7fc fe57 	bl	800bce4 <fill_first_frag>
 800f036:	4603      	mov	r3, r0
 800f038:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800f03c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f040:	2b00      	cmp	r3, #0
 800f042:	d10a      	bne.n	800f05a <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f04a:	f04f 32ff 	mov.w	r2, #4294967295
 800f04e:	4619      	mov	r1, r3
 800f050:	f7fc fe77 	bl	800bd42 <fill_last_frag>
 800f054:	4603      	mov	r3, r0
 800f056:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
				if (res == FR_OK) {
 800f05a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f05e:	2b00      	cmp	r3, #0
 800f060:	f040 80bc 	bne.w	800f1dc <f_sync+0x230>
					DIR dj;
					DEF_NAMBUF

					INIT_NAMBUF(fs);
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	f107 0308 	add.w	r3, r7, #8
 800f06a:	4611      	mov	r1, r2
 800f06c:	4618      	mov	r0, r3
 800f06e:	f7fd fe26 	bl	800ccbe <load_obj_xdir>
 800f072:	4603      	mov	r3, r0
 800f074:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (res == FR_OK) {
 800f078:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	f040 80ad 	bne.w	800f1dc <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
 800f082:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f084:	691b      	ldr	r3, [r3, #16]
 800f086:	3304      	adds	r3, #4
 800f088:	781a      	ldrb	r2, [r3, #0]
 800f08a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f08c:	691b      	ldr	r3, [r3, #16]
 800f08e:	3304      	adds	r3, #4
 800f090:	f042 0220 	orr.w	r2, r2, #32
 800f094:	b2d2      	uxtb	r2, r2
 800f096:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	79da      	ldrb	r2, [r3, #7]
 800f09c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f09e:	691b      	ldr	r3, [r3, #16]
 800f0a0:	3321      	adds	r3, #33	@ 0x21
 800f0a2:	f042 0201 	orr.w	r2, r2, #1
 800f0a6:	b2d2      	uxtb	r2, r2
 800f0a8:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
 800f0aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f0ac:	691b      	ldr	r3, [r3, #16]
 800f0ae:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	689b      	ldr	r3, [r3, #8]
 800f0b6:	4619      	mov	r1, r3
 800f0b8:	4610      	mov	r0, r2
 800f0ba:	f7fc f868 	bl	800b18e <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
 800f0be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f0c0:	691b      	ldr	r3, [r3, #16]
 800f0c2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f0cc:	4608      	mov	r0, r1
 800f0ce:	f7fc f88a 	bl	800b1e6 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
 800f0d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f0d4:	691b      	ldr	r3, [r3, #16]
 800f0d6:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f0e0:	4608      	mov	r0, r1
 800f0e2:	f7fc f880 	bl	800b1e6 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800f0e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f0e8:	691b      	ldr	r3, [r3, #16]
 800f0ea:	330c      	adds	r3, #12
 800f0ec:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7fc f84d 	bl	800b18e <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800f0f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f0f6:	691b      	ldr	r3, [r3, #16]
 800f0f8:	3315      	adds	r3, #21
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800f0fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f100:	691b      	ldr	r3, [r3, #16]
 800f102:	3310      	adds	r3, #16
 800f104:	2100      	movs	r1, #0
 800f106:	4618      	mov	r0, r3
 800f108:	f7fc f841 	bl	800b18e <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800f10c:	f107 0308 	add.w	r3, r7, #8
 800f110:	4618      	mov	r0, r3
 800f112:	f7fd fe0d 	bl	800cd30 <store_xdir>
 800f116:	4603      	mov	r3, r0
 800f118:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800f11c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f120:	2b00      	cmp	r3, #0
 800f122:	d15b      	bne.n	800f1dc <f_sync+0x230>
							res = sync_fs(fs);
 800f124:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f126:	4618      	mov	r0, r3
 800f128:	f7fc f9de 	bl	800b4e8 <sync_fs>
 800f12c:	4603      	mov	r3, r0
 800f12e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f138:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f13c:	b2da      	uxtb	r2, r3
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800f144:	e04a      	b.n	800f1dc <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f146:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f14c:	4619      	mov	r1, r3
 800f14e:	4610      	mov	r0, r2
 800f150:	f7fc f99c 	bl	800b48c <move_window>
 800f154:	4603      	mov	r3, r0
 800f156:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800f15a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d13c      	bne.n	800f1dc <f_sync+0x230>
					dir = fp->dir_ptr;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f166:	65fb      	str	r3, [r7, #92]	@ 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800f168:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f16a:	330b      	adds	r3, #11
 800f16c:	781a      	ldrb	r2, [r3, #0]
 800f16e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f170:	330b      	adds	r3, #11
 800f172:	f042 0220 	orr.w	r2, r2, #32
 800f176:	b2d2      	uxtb	r2, r2
 800f178:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6818      	ldr	r0, [r3, #0]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	689b      	ldr	r3, [r3, #8]
 800f182:	461a      	mov	r2, r3
 800f184:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800f186:	f7fd fa1c 	bl	800c5c2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f18a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f18c:	f103 001c 	add.w	r0, r3, #28
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f196:	4613      	mov	r3, r2
 800f198:	4619      	mov	r1, r3
 800f19a:	f7fb fff8 	bl	800b18e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f19e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f1a0:	3316      	adds	r3, #22
 800f1a2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f7fb fff2 	bl	800b18e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f1aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f1ac:	3312      	adds	r3, #18
 800f1ae:	2100      	movs	r1, #0
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f7fb ffd1 	bl	800b158 <st_word>
					fs->wflag = 1;
 800f1b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f1b8:	2201      	movs	r2, #1
 800f1ba:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f1bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7fc f992 	bl	800b4e8 <sync_fs>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f1d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f1d4:	b2da      	uxtb	r2, r3
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f1dc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3768      	adds	r7, #104	@ 0x68
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b084      	sub	sp, #16
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f7ff fedb 	bl	800efac <f_sync>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f1fa:	7bfb      	ldrb	r3, [r7, #15]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d10e      	bne.n	800f21e <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f107 0208 	add.w	r2, r7, #8
 800f206:	4611      	mov	r1, r2
 800f208:	4618      	mov	r0, r3
 800f20a:	f7ff f8f7 	bl	800e3fc <validate>
 800f20e:	4603      	mov	r3, r0
 800f210:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f212:	7bfb      	ldrb	r3, [r7, #15]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d102      	bne.n	800f21e <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2200      	movs	r2, #0
 800f21c:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f220:	4618      	mov	r0, r3
 800f222:	3710      	adds	r7, #16
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}

0800f228 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f22c:	b0a8      	sub	sp, #160	@ 0xa0
 800f22e:	af00      	add	r7, sp, #0
 800f230:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800f232:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	DWORD cl, pcl, ncl, tcl, tlen, ulen;
	DWORD *tbl;
	LBA_t dsc;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f236:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f238:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800f23c:	4619      	mov	r1, r3
 800f23e:	4610      	mov	r0, r2
 800f240:	f7ff f8dc 	bl	800e3fc <validate>
 800f244:	4603      	mov	r3, r0
 800f246:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f24a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d104      	bne.n	800f25c <f_lseek+0x34>
 800f252:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f254:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f258:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 800f25c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800f260:	2b00      	cmp	r3, #0
 800f262:	d10f      	bne.n	800f284 <f_lseek+0x5c>
 800f264:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f268:	781b      	ldrb	r3, [r3, #0]
 800f26a:	2b04      	cmp	r3, #4
 800f26c:	d10a      	bne.n	800f284 <f_lseek+0x5c>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800f26e:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800f270:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f274:	f04f 32ff 	mov.w	r2, #4294967295
 800f278:	4619      	mov	r1, r3
 800f27a:	f7fc fd62 	bl	800bd42 <fill_last_frag>
 800f27e:	4603      	mov	r3, r0
 800f280:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f284:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d002      	beq.n	800f292 <f_lseek+0x6a>
 800f28c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800f290:	e20a      	b.n	800f6a8 <f_lseek+0x480>
#endif

	/* Normal Seek */
	{
#if FF_FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
 800f292:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f296:	781b      	ldrb	r3, [r3, #0]
 800f298:	2b04      	cmp	r3, #4
 800f29a:	d009      	beq.n	800f2b0 <f_lseek+0x88>
 800f29c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800f2a0:	2b01      	cmp	r3, #1
 800f2a2:	d305      	bcc.n	800f2b0 <f_lseek+0x88>
 800f2a4:	f04f 32ff 	mov.w	r2, #4294967295
 800f2a8:	f04f 0300 	mov.w	r3, #0
 800f2ac:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f2b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f2b2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800f2b6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800f2ba:	4290      	cmp	r0, r2
 800f2bc:	eb71 0303 	sbcs.w	r3, r1, r3
 800f2c0:	d20b      	bcs.n	800f2da <f_lseek+0xb2>
 800f2c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f2c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f2c8:	f003 0302 	and.w	r3, r3, #2
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d104      	bne.n	800f2da <f_lseek+0xb2>
			ofs = fp->obj.objsize;
 800f2d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f2d2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f2d6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
		}
		ifptr = fp->fptr;
 800f2da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f2dc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f2e0:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
		fp->fptr = nsect = 0;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f2ea:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f2ec:	f04f 0200 	mov.w	r2, #0
 800f2f0:	f04f 0300 	mov.w	r3, #0
 800f2f4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		if (ofs > 0) {
 800f2f8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800f2fc:	4313      	orrs	r3, r2
 800f2fe:	f000 816a 	beq.w	800f5d6 <f_lseek+0x3ae>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f302:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f306:	895b      	ldrh	r3, [r3, #10]
 800f308:	025b      	lsls	r3, r3, #9
 800f30a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (ifptr > 0 &&
 800f30e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800f312:	4313      	orrs	r3, r2
 800f314:	d05d      	beq.n	800f3d2 <f_lseek+0x1aa>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f316:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800f31a:	1e54      	subs	r4, r2, #1
 800f31c:	f143 35ff 	adc.w	r5, r3, #4294967295
 800f320:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f324:	2200      	movs	r2, #0
 800f326:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f328:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f32a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800f32e:	4620      	mov	r0, r4
 800f330:	4629      	mov	r1, r5
 800f332:	f7f1 fc2b 	bl	8000b8c <__aeabi_uldivmod>
 800f336:	4602      	mov	r2, r0
 800f338:	460b      	mov	r3, r1
 800f33a:	4614      	mov	r4, r2
 800f33c:	461d      	mov	r5, r3
 800f33e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800f342:	1e51      	subs	r1, r2, #1
 800f344:	6639      	str	r1, [r7, #96]	@ 0x60
 800f346:	f143 33ff 	adc.w	r3, r3, #4294967295
 800f34a:	667b      	str	r3, [r7, #100]	@ 0x64
 800f34c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f350:	2200      	movs	r2, #0
 800f352:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f354:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800f356:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800f35a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800f35e:	f7f1 fc15 	bl	8000b8c <__aeabi_uldivmod>
 800f362:	4602      	mov	r2, r0
 800f364:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 800f366:	4294      	cmp	r4, r2
 800f368:	eb75 0303 	sbcs.w	r3, r5, r3
 800f36c:	d331      	bcc.n	800f3d2 <f_lseek+0x1aa>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f36e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800f372:	f112 3aff 	adds.w	sl, r2, #4294967295
 800f376:	f143 3bff 	adc.w	fp, r3, #4294967295
 800f37a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f37e:	3b01      	subs	r3, #1
 800f380:	2200      	movs	r2, #0
 800f382:	653b      	str	r3, [r7, #80]	@ 0x50
 800f384:	657a      	str	r2, [r7, #84]	@ 0x54
 800f386:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800f38a:	460b      	mov	r3, r1
 800f38c:	ea6f 0803 	mvn.w	r8, r3
 800f390:	4613      	mov	r3, r2
 800f392:	ea6f 0903 	mvn.w	r9, r3
 800f396:	ea0a 0308 	and.w	r3, sl, r8
 800f39a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f39c:	ea0b 0309 	and.w	r3, fp, r9
 800f3a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f3a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f3a4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800f3a8:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
				ofs -= fp->fptr;
 800f3ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f3ae:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800f3b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800f3b6:	1a14      	subs	r4, r2, r0
 800f3b8:	60bc      	str	r4, [r7, #8]
 800f3ba:	eb63 0301 	sbc.w	r3, r3, r1
 800f3be:	60fb      	str	r3, [r7, #12]
 800f3c0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f3c4:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
				clst = fp->clust;
 800f3c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f3ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f3d0:	e02b      	b.n	800f42a <f_lseek+0x202>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f3d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f3d4:	689b      	ldr	r3, [r3, #8]
 800f3d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
#if !FF_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f3da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d11f      	bne.n	800f422 <f_lseek+0x1fa>
					clst = create_chain(&fp->obj, 0);
 800f3e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f3e4:	2100      	movs	r1, #0
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7fc fdbe 	bl	800bf68 <create_chain>
 800f3ec:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f3f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f3f4:	2b01      	cmp	r3, #1
 800f3f6:	d105      	bne.n	800f404 <f_lseek+0x1dc>
 800f3f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f3fa:	2202      	movs	r2, #2
 800f3fc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f400:	2302      	movs	r3, #2
 800f402:	e151      	b.n	800f6a8 <f_lseek+0x480>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f404:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f40c:	d105      	bne.n	800f41a <f_lseek+0x1f2>
 800f40e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f410:	2201      	movs	r2, #1
 800f412:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f416:	2301      	movs	r3, #1
 800f418:	e146      	b.n	800f6a8 <f_lseek+0x480>
					fp->obj.sclust = clst;
 800f41a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f41c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f420:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 800f422:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f424:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f428:	6413      	str	r3, [r2, #64]	@ 0x40
			}
			if (clst != 0) {
 800f42a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f42e:	2b00      	cmp	r3, #0
 800f430:	f000 80d1 	beq.w	800f5d6 <f_lseek+0x3ae>
				while (ofs > bcs) {						/* Cluster following loop */
 800f434:	e082      	b.n	800f53c <f_lseek+0x314>
					ofs -= bcs; fp->fptr += bcs;
 800f436:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f43a:	2200      	movs	r2, #0
 800f43c:	643b      	str	r3, [r7, #64]	@ 0x40
 800f43e:	647a      	str	r2, [r7, #68]	@ 0x44
 800f440:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800f444:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800f448:	4621      	mov	r1, r4
 800f44a:	1a51      	subs	r1, r2, r1
 800f44c:	6039      	str	r1, [r7, #0]
 800f44e:	4629      	mov	r1, r5
 800f450:	eb63 0301 	sbc.w	r3, r3, r1
 800f454:	607b      	str	r3, [r7, #4]
 800f456:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f45a:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
 800f45e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f460:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f464:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800f468:	2000      	movs	r0, #0
 800f46a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800f46c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800f46e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800f472:	4621      	mov	r1, r4
 800f474:	1851      	adds	r1, r2, r1
 800f476:	6339      	str	r1, [r7, #48]	@ 0x30
 800f478:	4629      	mov	r1, r5
 800f47a:	414b      	adcs	r3, r1
 800f47c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f47e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f480:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800f484:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
#if !FF_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f488:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f48a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f48e:	f003 0302 	and.w	r3, r3, #2
 800f492:	2b00      	cmp	r3, #0
 800f494:	d02a      	beq.n	800f4ec <f_lseek+0x2c4>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 800f496:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f498:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800f49c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f49e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f4a2:	4282      	cmp	r2, r0
 800f4a4:	418b      	sbcs	r3, r1
 800f4a6:	d20e      	bcs.n	800f4c6 <f_lseek+0x29e>
							fp->obj.objsize = fp->fptr;
 800f4a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f4aa:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800f4ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f4b0:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 800f4b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f4b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f4ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4be:	b2db      	uxtb	r3, r3
 800f4c0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f4c2:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f4c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f4c8:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f7fc fd4b 	bl	800bf68 <create_chain>
 800f4d2:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f4d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d10e      	bne.n	800f4fc <f_lseek+0x2d4>
							ofs = 0; break;
 800f4de:	f04f 0200 	mov.w	r2, #0
 800f4e2:	f04f 0300 	mov.w	r3, #0
 800f4e6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 800f4ea:	e037      	b.n	800f55c <f_lseek+0x334>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f4ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f4ee:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f7fc f8fc 	bl	800b6f0 <get_fat>
 800f4f8:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f4fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f500:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f504:	d105      	bne.n	800f512 <f_lseek+0x2ea>
 800f506:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f508:	2201      	movs	r2, #1
 800f50a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f50e:	2301      	movs	r3, #1
 800f510:	e0ca      	b.n	800f6a8 <f_lseek+0x480>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f512:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f516:	2b01      	cmp	r3, #1
 800f518:	d906      	bls.n	800f528 <f_lseek+0x300>
 800f51a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f51e:	69da      	ldr	r2, [r3, #28]
 800f520:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f524:	4293      	cmp	r3, r2
 800f526:	d305      	bcc.n	800f534 <f_lseek+0x30c>
 800f528:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f52a:	2202      	movs	r2, #2
 800f52c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f530:	2302      	movs	r3, #2
 800f532:	e0b9      	b.n	800f6a8 <f_lseek+0x480>
					fp->clust = clst;
 800f534:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f536:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f53a:	6413      	str	r3, [r2, #64]	@ 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 800f53c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f540:	2200      	movs	r2, #0
 800f542:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f544:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f546:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800f54a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800f54e:	4621      	mov	r1, r4
 800f550:	4291      	cmp	r1, r2
 800f552:	4629      	mov	r1, r5
 800f554:	eb71 0303 	sbcs.w	r3, r1, r3
 800f558:	f4ff af6d 	bcc.w	800f436 <f_lseek+0x20e>
				}
				fp->fptr += ofs;
 800f55c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f55e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800f562:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800f566:	1884      	adds	r4, r0, r2
 800f568:	623c      	str	r4, [r7, #32]
 800f56a:	eb41 0303 	adc.w	r3, r1, r3
 800f56e:	627b      	str	r3, [r7, #36]	@ 0x24
 800f570:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f572:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800f576:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
				if (ofs % SS(fs)) {
 800f57a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800f57e:	f3c2 0308 	ubfx	r3, r2, #0, #9
 800f582:	61bb      	str	r3, [r7, #24]
 800f584:	2300      	movs	r3, #0
 800f586:	61fb      	str	r3, [r7, #28]
 800f588:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800f58c:	460b      	mov	r3, r1
 800f58e:	4313      	orrs	r3, r2
 800f590:	d021      	beq.n	800f5d6 <f_lseek+0x3ae>
					nsect = clst2sect(fs, clst);	/* Current sector */
 800f592:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f596:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7fc f888 	bl	800b6b0 <clst2sect>
 800f5a0:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 800f5a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d105      	bne.n	800f5b8 <f_lseek+0x390>
 800f5ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f5ae:	2202      	movs	r2, #2
 800f5b0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f5b4:	2302      	movs	r3, #2
 800f5b6:	e077      	b.n	800f6a8 <f_lseek+0x480>
					nsect += (DWORD)(ofs / SS(fs));
 800f5b8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800f5bc:	f04f 0200 	mov.w	r2, #0
 800f5c0:	f04f 0300 	mov.w	r3, #0
 800f5c4:	0a42      	lsrs	r2, r0, #9
 800f5c6:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800f5ca:	0a4b      	lsrs	r3, r1, #9
 800f5cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f5d0:	4413      	add	r3, r2
 800f5d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
				}
			}
		}
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
 800f5d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f5d8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f5dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f5de:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800f5e2:	4290      	cmp	r0, r2
 800f5e4:	eb71 0303 	sbcs.w	r3, r1, r3
 800f5e8:	d20e      	bcs.n	800f608 <f_lseek+0x3e0>
			fp->obj.objsize = fp->fptr;
 800f5ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f5ec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f5f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f5f2:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 800f5f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f5f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f5fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f600:	b2da      	uxtb	r2, r3
 800f602:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f604:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f608:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f60a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f60e:	f3c2 0308 	ubfx	r3, r2, #0, #9
 800f612:	613b      	str	r3, [r7, #16]
 800f614:	2300      	movs	r3, #0
 800f616:	617b      	str	r3, [r7, #20]
 800f618:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f61c:	460b      	mov	r3, r1
 800f61e:	4313      	orrs	r3, r2
 800f620:	d040      	beq.n	800f6a4 <f_lseek+0x47c>
 800f622:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f626:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f62a:	429a      	cmp	r2, r3
 800f62c:	d03a      	beq.n	800f6a4 <f_lseek+0x47c>
#if !FF_FS_TINY
#if !FF_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f62e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f630:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f634:	b25b      	sxtb	r3, r3
 800f636:	2b00      	cmp	r3, #0
 800f638:	da1c      	bge.n	800f674 <f_lseek+0x44c>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f63a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f63e:	7858      	ldrb	r0, [r3, #1]
 800f640:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f642:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800f646:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f648:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f64a:	2301      	movs	r3, #1
 800f64c:	f7fa ff69 	bl	800a522 <disk_write>
 800f650:	4603      	mov	r3, r0
 800f652:	2b00      	cmp	r3, #0
 800f654:	d005      	beq.n	800f662 <f_lseek+0x43a>
 800f656:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f658:	2201      	movs	r2, #1
 800f65a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f65e:	2301      	movs	r3, #1
 800f660:	e022      	b.n	800f6a8 <f_lseek+0x480>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f662:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f664:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f668:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f66c:	b2da      	uxtb	r2, r3
 800f66e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f670:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f674:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f678:	7858      	ldrb	r0, [r3, #1]
 800f67a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f67c:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800f680:	2301      	movs	r3, #1
 800f682:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f686:	f7fa ff39 	bl	800a4fc <disk_read>
 800f68a:	4603      	mov	r3, r0
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d005      	beq.n	800f69c <f_lseek+0x474>
 800f690:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f692:	2201      	movs	r2, #1
 800f694:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f698:	2301      	movs	r3, #1
 800f69a:	e005      	b.n	800f6a8 <f_lseek+0x480>
#endif
			fp->sect = nsect;
 800f69c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f69e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f6a2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
	}

	LEAVE_FF(fs, res);
 800f6a4:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	37a0      	adds	r7, #160	@ 0xa0
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f6b2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f6b2:	b580      	push	{r7, lr}
 800f6b4:	b084      	sub	sp, #16
 800f6b6:	af00      	add	r7, sp, #0
 800f6b8:	6078      	str	r0, [r7, #4]
 800f6ba:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d101      	bne.n	800f6c6 <f_opendir+0x14>
 800f6c2:	2309      	movs	r3, #9
 800f6c4:	e068      	b.n	800f798 <f_opendir+0xe6>

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
 800f6c6:	f107 0108 	add.w	r1, r7, #8
 800f6ca:	463b      	mov	r3, r7
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7fe fb4c 	bl	800dd6c <mount_volume>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f6d8:	7bfb      	ldrb	r3, [r7, #15]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d155      	bne.n	800f78a <f_opendir+0xd8>
		dp->obj.fs = fs;
 800f6de:	68ba      	ldr	r2, [r7, #8]
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	4619      	mov	r1, r3
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f7fe f955 	bl	800d998 <follow_path>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {						/* Follow completed */
 800f6f2:	7bfb      	ldrb	r3, [r7, #15]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d143      	bne.n	800f780 <f_opendir+0xce>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800f6fe:	b25b      	sxtb	r3, r3
 800f700:	2b00      	cmp	r3, #0
 800f702:	db30      	blt.n	800f766 <f_opendir+0xb4>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	799b      	ldrb	r3, [r3, #6]
 800f708:	f003 0310 	and.w	r3, r3, #16
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d028      	beq.n	800f762 <f_opendir+0xb0>
#if FF_FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	2b04      	cmp	r3, #4
 800f716:	d119      	bne.n	800f74c <f_opendir+0x9a>
						dp->obj.c_scl = dp->obj.sclust;	/* Get containing directory information */
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	689a      	ldr	r2, [r3, #8]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	621a      	str	r2, [r3, #32]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f726:	4613      	mov	r3, r2
 800f728:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f72c:	687a      	ldr	r2, [r7, #4]
 800f72e:	79d2      	ldrb	r2, [r2, #7]
 800f730:	431a      	orrs	r2, r3
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	625a      	str	r2, [r3, #36]	@ 0x24
						dp->obj.c_ofs = dp->blk_ofs;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	629a      	str	r2, [r3, #40]	@ 0x28
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	687a      	ldr	r2, [r7, #4]
 800f742:	4611      	mov	r1, r2
 800f744:	4618      	mov	r0, r3
 800f746:	f7fd fa91 	bl	800cc6c <init_alloc_info>
 800f74a:	e00c      	b.n	800f766 <f_opendir+0xb4>
					} else
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f74c:	68ba      	ldr	r2, [r7, #8]
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f752:	4619      	mov	r1, r3
 800f754:	4610      	mov	r0, r2
 800f756:	f7fc ff15 	bl	800c584 <ld_clust>
 800f75a:	4602      	mov	r2, r0
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	609a      	str	r2, [r3, #8]
 800f760:	e001      	b.n	800f766 <f_opendir+0xb4>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800f762:	2305      	movs	r3, #5
 800f764:	73fb      	strb	r3, [r7, #15]
				}
			}
			if (res == FR_OK) {
 800f766:	7bfb      	ldrb	r3, [r7, #15]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d109      	bne.n	800f780 <f_opendir+0xce>
				dp->obj.id = fs->id;
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	88da      	ldrh	r2, [r3, #6]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f774:	2100      	movs	r1, #0
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f7fc fd7d 	bl	800c276 <dir_sdi>
 800f77c:	4603      	mov	r3, r0
 800f77e:	73fb      	strb	r3, [r7, #15]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f780:	7bfb      	ldrb	r3, [r7, #15]
 800f782:	2b04      	cmp	r3, #4
 800f784:	d101      	bne.n	800f78a <f_opendir+0xd8>
 800f786:	2305      	movs	r3, #5
 800f788:	73fb      	strb	r3, [r7, #15]
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function failed */
 800f78a:	7bfb      	ldrb	r3, [r7, #15]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d002      	beq.n	800f796 <f_opendir+0xe4>
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2200      	movs	r2, #0
 800f794:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f796:	7bfb      	ldrb	r3, [r7, #15]
}
 800f798:	4618      	mov	r0, r3
 800f79a:	3710      	adds	r7, #16
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd80      	pop	{r7, pc}

0800f7a0 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b084      	sub	sp, #16
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f107 0208 	add.w	r2, r7, #8
 800f7ae:	4611      	mov	r1, r2
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f7fe fe23 	bl	800e3fc <validate>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f7ba:	7bfb      	ldrb	r3, [r7, #15]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d102      	bne.n	800f7c6 <f_closedir+0x26>
#if FF_FS_LOCK
		if (dp->obj.lockid) res = dec_share(dp->obj.lockid);	/* Decrement sub-directory open counter */
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
#else
		dp->obj.fs = 0;	/* Invalidate directory object */
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	601a      	str	r2, [r3, #0]
#endif
#if FF_FS_REENTRANT
		unlock_volume(fs, FR_OK);	/* Unlock volume */
#endif
	}
	return res;
 800f7c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	3710      	adds	r7, #16
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}

0800f7d0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b0a8      	sub	sp, #160	@ 0xa0
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
	FFOBJID sobj;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
 800f7d8:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 800f7dc:	1d3b      	adds	r3, r7, #4
 800f7de:	2202      	movs	r2, #2
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f7fe fac3 	bl	800dd6c <mount_volume>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	if (res == FR_OK) {
 800f7ec:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	f040 811e 	bne.w	800fa32 <f_mkdir+0x262>
		dj.obj.fs = fs;
 800f7f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f7fa:	63bb      	str	r3, [r7, #56]	@ 0x38
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800f7fc:	687a      	ldr	r2, [r7, #4]
 800f7fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800f802:	4611      	mov	r1, r2
 800f804:	4618      	mov	r0, r3
 800f806:	f7fe f8c7 	bl	800d998 <follow_path>
 800f80a:	4603      	mov	r3, r0
 800f80c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
 800f810:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800f814:	2b00      	cmp	r3, #0
 800f816:	d102      	bne.n	800f81e <f_mkdir+0x4e>
 800f818:	2308      	movs	r3, #8
 800f81a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
 800f81e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800f822:	2b04      	cmp	r3, #4
 800f824:	f040 8105 	bne.w	800fa32 <f_mkdir+0x262>
			sobj.fs = fs;						/* New object id to create a new chain */
 800f828:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f82c:	60bb      	str	r3, [r7, #8]
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
 800f82e:	f107 0308 	add.w	r3, r7, #8
 800f832:	2100      	movs	r1, #0
 800f834:	4618      	mov	r0, r3
 800f836:	f7fc fb97 	bl	800bf68 <create_chain>
 800f83a:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
			res = FR_OK;
 800f83e:	2300      	movs	r3, #0
 800f840:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
 800f844:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d102      	bne.n	800f852 <f_mkdir+0x82>
 800f84c:	2307      	movs	r3, #7
 800f84e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
 800f852:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f856:	2b01      	cmp	r3, #1
 800f858:	d102      	bne.n	800f860 <f_mkdir+0x90>
 800f85a:	2302      	movs	r3, #2
 800f85c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
 800f860:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f868:	d102      	bne.n	800f870 <f_mkdir+0xa0>
 800f86a:	2301      	movs	r3, #1
 800f86c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			tm = GET_FATTIME();
 800f870:	f7fe fe44 	bl	800e4fc <get_fattime>
 800f874:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
			if (res == FR_OK) {
 800f878:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d162      	bne.n	800f946 <f_mkdir+0x176>
				res = dir_clear(fs, dcl);		/* Clean up the new table */
 800f880:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f884:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800f888:	4618      	mov	r0, r3
 800f88a:	f7fc fcac 	bl	800c1e6 <dir_clear>
 800f88e:	4603      	mov	r3, r0
 800f890:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				if (res == FR_OK) {
 800f894:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d154      	bne.n	800f946 <f_mkdir+0x176>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
 800f89c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f8a0:	781b      	ldrb	r3, [r3, #0]
 800f8a2:	2b04      	cmp	r3, #4
 800f8a4:	d047      	beq.n	800f936 <f_mkdir+0x166>
						memset(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
 800f8a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f8aa:	333c      	adds	r3, #60	@ 0x3c
 800f8ac:	220b      	movs	r2, #11
 800f8ae:	2120      	movs	r1, #32
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f001 ff45 	bl	8011740 <memset>
						fs->win[DIR_Name] = '.';
 800f8b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f8ba:	222e      	movs	r2, #46	@ 0x2e
 800f8bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
						fs->win[DIR_Attr] = AM_DIR;
 800f8c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f8c4:	2210      	movs	r2, #16
 800f8c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
						st_dword(fs->win + DIR_ModTime, tm);
 800f8ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f8ce:	333c      	adds	r3, #60	@ 0x3c
 800f8d0:	3316      	adds	r3, #22
 800f8d2:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f7fb fc59 	bl	800b18e <st_dword>
						st_clust(fs, fs->win, dcl);
 800f8dc:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800f8e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f8e4:	333c      	adds	r3, #60	@ 0x3c
 800f8e6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f8ea:	4619      	mov	r1, r3
 800f8ec:	f7fc fe69 	bl	800c5c2 <st_clust>
						memcpy(fs->win + SZDIRE, fs->win, SZDIRE);	/* Create ".." entry */
 800f8f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f8f4:	333c      	adds	r3, #60	@ 0x3c
 800f8f6:	f103 0020 	add.w	r0, r3, #32
 800f8fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f8fe:	333c      	adds	r3, #60	@ 0x3c
 800f900:	2220      	movs	r2, #32
 800f902:	4619      	mov	r1, r3
 800f904:	f001 ff5e 	bl	80117c4 <memcpy>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800f908:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f90c:	222e      	movs	r2, #46	@ 0x2e
 800f90e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 800f912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f914:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
						st_clust(fs, fs->win + SZDIRE, pcl);
 800f918:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800f91c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f920:	333c      	adds	r3, #60	@ 0x3c
 800f922:	3320      	adds	r3, #32
 800f924:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800f928:	4619      	mov	r1, r3
 800f92a:	f7fc fe4a 	bl	800c5c2 <st_clust>
						fs->wflag = 1;
 800f92e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f932:	2201      	movs	r2, #1
 800f934:	711a      	strb	r2, [r3, #4]
					}
					res = dir_register(&dj);	/* Register the object to the parent directory */
 800f936:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7fd fcac 	bl	800d298 <dir_register>
 800f940:	4603      	mov	r3, r0
 800f942:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
			if (res == FR_OK) {
 800f946:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d169      	bne.n	800fa22 <f_mkdir+0x252>
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
 800f94e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	2b04      	cmp	r3, #4
 800f956:	d140      	bne.n	800f9da <f_mkdir+0x20a>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
 800f958:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f95c:	691b      	ldr	r3, [r3, #16]
 800f95e:	330c      	adds	r3, #12
 800f960:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800f964:	4618      	mov	r0, r3
 800f966:	f7fb fc12 	bl	800b18e <st_dword>
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
 800f96a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f96e:	691b      	ldr	r3, [r3, #16]
 800f970:	3334      	adds	r3, #52	@ 0x34
 800f972:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800f976:	4618      	mov	r0, r3
 800f978:	f7fb fc09 	bl	800b18e <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)fs->csize * SS(fs));	/* Directory size needs to be valid */
 800f97c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f980:	691b      	ldr	r3, [r3, #16]
 800f982:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f986:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f98a:	895b      	ldrh	r3, [r3, #10]
 800f98c:	025b      	lsls	r3, r3, #9
 800f98e:	4619      	mov	r1, r3
 800f990:	4610      	mov	r0, r2
 800f992:	f7fb fbfc 	bl	800b18e <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)fs->csize * SS(fs));
 800f996:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f99a:	691b      	ldr	r3, [r3, #16]
 800f99c:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800f9a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f9a4:	895b      	ldrh	r3, [r3, #10]
 800f9a6:	025b      	lsls	r3, r3, #9
 800f9a8:	4619      	mov	r1, r3
 800f9aa:	4610      	mov	r0, r2
 800f9ac:	f7fb fbef 	bl	800b18e <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag */
 800f9b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f9b4:	691b      	ldr	r3, [r3, #16]
 800f9b6:	3321      	adds	r3, #33	@ 0x21
 800f9b8:	2203      	movs	r2, #3
 800f9ba:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
 800f9bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f9c0:	691b      	ldr	r3, [r3, #16]
 800f9c2:	3304      	adds	r3, #4
 800f9c4:	2210      	movs	r2, #16
 800f9c6:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800f9c8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f7fd f9af 	bl	800cd30 <store_xdir>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800f9d8:	e016      	b.n	800fa08 <f_mkdir+0x238>
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
 800f9da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f9dc:	3316      	adds	r3, #22
 800f9de:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f7fb fbd3 	bl	800b18e <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
 800f9e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f9ec:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800f9ee:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	f7fc fde5 	bl	800c5c2 <st_clust>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
 800f9f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f9fa:	330b      	adds	r3, #11
 800f9fc:	2210      	movs	r2, #16
 800f9fe:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800fa00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fa04:	2201      	movs	r2, #1
 800fa06:	711a      	strb	r2, [r3, #4]
				}
				if (res == FR_OK) {
 800fa08:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d110      	bne.n	800fa32 <f_mkdir+0x262>
					res = sync_fs(fs);
 800fa10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7fb fd67 	bl	800b4e8 <sync_fs>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800fa20:	e007      	b.n	800fa32 <f_mkdir+0x262>
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
 800fa22:	f107 0308 	add.w	r3, r7, #8
 800fa26:	2200      	movs	r2, #0
 800fa28:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f7fc f9b9 	bl	800bda4 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800fa32:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	37a0      	adds	r7, #160	@ 0xa0
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}
	...

0800fa40 <ff_uni2oem>:
#if FF_CODE_PAGE >= 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 800fa40:	b480      	push	{r7}
 800fa42:	b08b      	sub	sp, #44	@ 0x2c
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
 800fa48:	460b      	mov	r3, r1
 800fa4a:	807b      	strh	r3, [r7, #2]
	const WCHAR* p;
	WCHAR c = 0, uc;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	UINT i = 0, n, li, hi;
 800fa50:	2300      	movs	r3, #0
 800fa52:	623b      	str	r3, [r7, #32]


	if (uni < 0x80) {	/* ASCII? */
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2b7f      	cmp	r3, #127	@ 0x7f
 800fa58:	d802      	bhi.n	800fa60 <ff_uni2oem+0x20>
		c = (WCHAR)uni;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fa5e:	e041      	b.n	800fae4 <ff_uni2oem+0xa4>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fa66:	d23d      	bcs.n	800fae4 <ff_uni2oem+0xa4>
 800fa68:	887b      	ldrh	r3, [r7, #2]
 800fa6a:	f5b3 7f69 	cmp.w	r3, #932	@ 0x3a4
 800fa6e:	d139      	bne.n	800fae4 <ff_uni2oem+0xa4>
			uc = (WCHAR)uni;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	827b      	strh	r3, [r7, #18]
			p = CVTBL(uni2oem, FF_CODE_PAGE);
 800fa74:	4b1f      	ldr	r3, [pc, #124]	@ (800faf4 <ff_uni2oem+0xb4>)
 800fa76:	60fb      	str	r3, [r7, #12]
			hi = sizeof CVTBL(uni2oem, FF_CODE_PAGE) / 4 - 1;
 800fa78:	f641 43dd 	movw	r3, #7389	@ 0x1cdd
 800fa7c:	617b      	str	r3, [r7, #20]
			li = 0;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	61bb      	str	r3, [r7, #24]
			for (n = 16; n; n--) {
 800fa82:	2310      	movs	r3, #16
 800fa84:	61fb      	str	r3, [r7, #28]
 800fa86:	e01e      	b.n	800fac6 <ff_uni2oem+0x86>
				i = li + (hi - li) / 2;
 800fa88:	697a      	ldr	r2, [r7, #20]
 800fa8a:	69bb      	ldr	r3, [r7, #24]
 800fa8c:	1ad3      	subs	r3, r2, r3
 800fa8e:	085b      	lsrs	r3, r3, #1
 800fa90:	69ba      	ldr	r2, [r7, #24]
 800fa92:	4413      	add	r3, r2
 800fa94:	623b      	str	r3, [r7, #32]
				if (uc == p[i * 2]) break;
 800fa96:	6a3b      	ldr	r3, [r7, #32]
 800fa98:	009b      	lsls	r3, r3, #2
 800fa9a:	68fa      	ldr	r2, [r7, #12]
 800fa9c:	4413      	add	r3, r2
 800fa9e:	881b      	ldrh	r3, [r3, #0]
 800faa0:	8a7a      	ldrh	r2, [r7, #18]
 800faa2:	429a      	cmp	r2, r3
 800faa4:	d013      	beq.n	800face <ff_uni2oem+0x8e>
				if (uc > p[i * 2]) {
 800faa6:	6a3b      	ldr	r3, [r7, #32]
 800faa8:	009b      	lsls	r3, r3, #2
 800faaa:	68fa      	ldr	r2, [r7, #12]
 800faac:	4413      	add	r3, r2
 800faae:	881b      	ldrh	r3, [r3, #0]
 800fab0:	8a7a      	ldrh	r2, [r7, #18]
 800fab2:	429a      	cmp	r2, r3
 800fab4:	d902      	bls.n	800fabc <ff_uni2oem+0x7c>
					li = i;
 800fab6:	6a3b      	ldr	r3, [r7, #32]
 800fab8:	61bb      	str	r3, [r7, #24]
 800faba:	e001      	b.n	800fac0 <ff_uni2oem+0x80>
				} else {
					hi = i;
 800fabc:	6a3b      	ldr	r3, [r7, #32]
 800fabe:	617b      	str	r3, [r7, #20]
			for (n = 16; n; n--) {
 800fac0:	69fb      	ldr	r3, [r7, #28]
 800fac2:	3b01      	subs	r3, #1
 800fac4:	61fb      	str	r3, [r7, #28]
 800fac6:	69fb      	ldr	r3, [r7, #28]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d1dd      	bne.n	800fa88 <ff_uni2oem+0x48>
 800facc:	e000      	b.n	800fad0 <ff_uni2oem+0x90>
				if (uc == p[i * 2]) break;
 800face:	bf00      	nop
				}
			}
			if (n != 0) c = p[i * 2 + 1];
 800fad0:	69fb      	ldr	r3, [r7, #28]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d006      	beq.n	800fae4 <ff_uni2oem+0xa4>
 800fad6:	6a3b      	ldr	r3, [r7, #32]
 800fad8:	009b      	lsls	r3, r3, #2
 800fada:	3302      	adds	r3, #2
 800fadc:	68fa      	ldr	r2, [r7, #12]
 800fade:	4413      	add	r3, r2
 800fae0:	881b      	ldrh	r3, [r3, #0]
 800fae2:	84fb      	strh	r3, [r7, #38]	@ 0x26
		}
	}

	return c;
 800fae4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 800fae6:	4618      	mov	r0, r3
 800fae8:	372c      	adds	r7, #44	@ 0x2c
 800faea:	46bd      	mov	sp, r7
 800faec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf0:	4770      	bx	lr
 800faf2:	bf00      	nop
 800faf4:	08014498 	.word	0x08014498

0800faf8 <ff_oem2uni>:

WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 800faf8:	b480      	push	{r7}
 800fafa:	b089      	sub	sp, #36	@ 0x24
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	4603      	mov	r3, r0
 800fb00:	460a      	mov	r2, r1
 800fb02:	80fb      	strh	r3, [r7, #6]
 800fb04:	4613      	mov	r3, r2
 800fb06:	80bb      	strh	r3, [r7, #4]
	const WCHAR* p;
	WCHAR c = 0;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	83fb      	strh	r3, [r7, #30]
	UINT i = 0, n, li, hi;
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	61bb      	str	r3, [r7, #24]


	if (oem < 0x80) {	/* ASCII? */
 800fb10:	88fb      	ldrh	r3, [r7, #6]
 800fb12:	2b7f      	cmp	r3, #127	@ 0x7f
 800fb14:	d802      	bhi.n	800fb1c <ff_oem2uni+0x24>
		c = oem;
 800fb16:	88fb      	ldrh	r3, [r7, #6]
 800fb18:	83fb      	strh	r3, [r7, #30]
 800fb1a:	e03b      	b.n	800fb94 <ff_oem2uni+0x9c>

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it valid code page? */
 800fb1c:	88bb      	ldrh	r3, [r7, #4]
 800fb1e:	f5b3 7f69 	cmp.w	r3, #932	@ 0x3a4
 800fb22:	d137      	bne.n	800fb94 <ff_oem2uni+0x9c>
			p = CVTBL(oem2uni, FF_CODE_PAGE);
 800fb24:	4b1f      	ldr	r3, [pc, #124]	@ (800fba4 <ff_oem2uni+0xac>)
 800fb26:	60bb      	str	r3, [r7, #8]
			hi = sizeof CVTBL(oem2uni, FF_CODE_PAGE) / 4 - 1;
 800fb28:	f641 43dd 	movw	r3, #7389	@ 0x1cdd
 800fb2c:	60fb      	str	r3, [r7, #12]
			li = 0;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	613b      	str	r3, [r7, #16]
			for (n = 16; n; n--) {
 800fb32:	2310      	movs	r3, #16
 800fb34:	617b      	str	r3, [r7, #20]
 800fb36:	e01e      	b.n	800fb76 <ff_oem2uni+0x7e>
				i = li + (hi - li) / 2;
 800fb38:	68fa      	ldr	r2, [r7, #12]
 800fb3a:	693b      	ldr	r3, [r7, #16]
 800fb3c:	1ad3      	subs	r3, r2, r3
 800fb3e:	085b      	lsrs	r3, r3, #1
 800fb40:	693a      	ldr	r2, [r7, #16]
 800fb42:	4413      	add	r3, r2
 800fb44:	61bb      	str	r3, [r7, #24]
				if (oem == p[i * 2]) break;
 800fb46:	69bb      	ldr	r3, [r7, #24]
 800fb48:	009b      	lsls	r3, r3, #2
 800fb4a:	68ba      	ldr	r2, [r7, #8]
 800fb4c:	4413      	add	r3, r2
 800fb4e:	881b      	ldrh	r3, [r3, #0]
 800fb50:	88fa      	ldrh	r2, [r7, #6]
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d013      	beq.n	800fb7e <ff_oem2uni+0x86>
				if (oem > p[i * 2]) {
 800fb56:	69bb      	ldr	r3, [r7, #24]
 800fb58:	009b      	lsls	r3, r3, #2
 800fb5a:	68ba      	ldr	r2, [r7, #8]
 800fb5c:	4413      	add	r3, r2
 800fb5e:	881b      	ldrh	r3, [r3, #0]
 800fb60:	88fa      	ldrh	r2, [r7, #6]
 800fb62:	429a      	cmp	r2, r3
 800fb64:	d902      	bls.n	800fb6c <ff_oem2uni+0x74>
					li = i;
 800fb66:	69bb      	ldr	r3, [r7, #24]
 800fb68:	613b      	str	r3, [r7, #16]
 800fb6a:	e001      	b.n	800fb70 <ff_oem2uni+0x78>
				} else {
					hi = i;
 800fb6c:	69bb      	ldr	r3, [r7, #24]
 800fb6e:	60fb      	str	r3, [r7, #12]
			for (n = 16; n; n--) {
 800fb70:	697b      	ldr	r3, [r7, #20]
 800fb72:	3b01      	subs	r3, #1
 800fb74:	617b      	str	r3, [r7, #20]
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d1dd      	bne.n	800fb38 <ff_oem2uni+0x40>
 800fb7c:	e000      	b.n	800fb80 <ff_oem2uni+0x88>
				if (oem == p[i * 2]) break;
 800fb7e:	bf00      	nop
				}
			}
			if (n != 0) c = p[i * 2 + 1];
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d006      	beq.n	800fb94 <ff_oem2uni+0x9c>
 800fb86:	69bb      	ldr	r3, [r7, #24]
 800fb88:	009b      	lsls	r3, r3, #2
 800fb8a:	3302      	adds	r3, #2
 800fb8c:	68ba      	ldr	r2, [r7, #8]
 800fb8e:	4413      	add	r3, r2
 800fb90:	881b      	ldrh	r3, [r3, #0]
 800fb92:	83fb      	strh	r3, [r7, #30]
		}
	}

	return c;
 800fb94:	8bfb      	ldrh	r3, [r7, #30]
}
 800fb96:	4618      	mov	r0, r3
 800fb98:	3724      	adds	r7, #36	@ 0x24
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba0:	4770      	bx	lr
 800fba2:	bf00      	nop
 800fba4:	0801b810 	.word	0x0801b810

0800fba8 <ff_wtoupper>:
/*------------------------------------------------------------------------*/

DWORD ff_wtoupper (	/* Returns up-converted code point */
	DWORD uni		/* Unicode code point to be up-converted */
)
{
 800fba8:	b480      	push	{r7}
 800fbaa:	b087      	sub	sp, #28
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fbb6:	d27d      	bcs.n	800fcb4 <ff_wtoupper+0x10c>
		uc = (WORD)uni;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	827b      	strh	r3, [r7, #18]
		p = uc < 0x1000 ? cvt1 : cvt2;
 800fbbc:	8a7b      	ldrh	r3, [r7, #18]
 800fbbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fbc2:	d201      	bcs.n	800fbc8 <ff_wtoupper+0x20>
 800fbc4:	4b3f      	ldr	r3, [pc, #252]	@ (800fcc4 <ff_wtoupper+0x11c>)
 800fbc6:	e000      	b.n	800fbca <ff_wtoupper+0x22>
 800fbc8:	4b3f      	ldr	r3, [pc, #252]	@ (800fcc8 <ff_wtoupper+0x120>)
 800fbca:	617b      	str	r3, [r7, #20]
		for (;;) {
			bc = *p++;								/* Get the block base */
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	1c9a      	adds	r2, r3, #2
 800fbd0:	617a      	str	r2, [r7, #20]
 800fbd2:	881b      	ldrh	r3, [r3, #0]
 800fbd4:	823b      	strh	r3, [r7, #16]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 800fbd6:	8a3b      	ldrh	r3, [r7, #16]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d069      	beq.n	800fcb0 <ff_wtoupper+0x108>
 800fbdc:	8a7a      	ldrh	r2, [r7, #18]
 800fbde:	8a3b      	ldrh	r3, [r7, #16]
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d365      	bcc.n	800fcb0 <ff_wtoupper+0x108>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800fbe4:	697b      	ldr	r3, [r7, #20]
 800fbe6:	1c9a      	adds	r2, r3, #2
 800fbe8:	617a      	str	r2, [r7, #20]
 800fbea:	881b      	ldrh	r3, [r3, #0]
 800fbec:	81fb      	strh	r3, [r7, #14]
 800fbee:	89fb      	ldrh	r3, [r7, #14]
 800fbf0:	0a1b      	lsrs	r3, r3, #8
 800fbf2:	81bb      	strh	r3, [r7, #12]
 800fbf4:	89fb      	ldrh	r3, [r7, #14]
 800fbf6:	b2db      	uxtb	r3, r3
 800fbf8:	81fb      	strh	r3, [r7, #14]
			if (uc < bc + nc) {	/* In the block? */
 800fbfa:	8a7a      	ldrh	r2, [r7, #18]
 800fbfc:	8a39      	ldrh	r1, [r7, #16]
 800fbfe:	89fb      	ldrh	r3, [r7, #14]
 800fc00:	440b      	add	r3, r1
 800fc02:	429a      	cmp	r2, r3
 800fc04:	da4a      	bge.n	800fc9c <ff_wtoupper+0xf4>
				switch (cmd) {
 800fc06:	89bb      	ldrh	r3, [r7, #12]
 800fc08:	2b08      	cmp	r3, #8
 800fc0a:	d850      	bhi.n	800fcae <ff_wtoupper+0x106>
 800fc0c:	a201      	add	r2, pc, #4	@ (adr r2, 800fc14 <ff_wtoupper+0x6c>)
 800fc0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc12:	bf00      	nop
 800fc14:	0800fc39 	.word	0x0800fc39
 800fc18:	0800fc4b 	.word	0x0800fc4b
 800fc1c:	0800fc61 	.word	0x0800fc61
 800fc20:	0800fc69 	.word	0x0800fc69
 800fc24:	0800fc71 	.word	0x0800fc71
 800fc28:	0800fc79 	.word	0x0800fc79
 800fc2c:	0800fc81 	.word	0x0800fc81
 800fc30:	0800fc89 	.word	0x0800fc89
 800fc34:	0800fc91 	.word	0x0800fc91
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 800fc38:	8a7a      	ldrh	r2, [r7, #18]
 800fc3a:	8a3b      	ldrh	r3, [r7, #16]
 800fc3c:	1ad3      	subs	r3, r2, r3
 800fc3e:	005b      	lsls	r3, r3, #1
 800fc40:	697a      	ldr	r2, [r7, #20]
 800fc42:	4413      	add	r3, r2
 800fc44:	881b      	ldrh	r3, [r3, #0]
 800fc46:	827b      	strh	r3, [r7, #18]
 800fc48:	e027      	b.n	800fc9a <ff_wtoupper+0xf2>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 800fc4a:	8a7a      	ldrh	r2, [r7, #18]
 800fc4c:	8a3b      	ldrh	r3, [r7, #16]
 800fc4e:	1ad3      	subs	r3, r2, r3
 800fc50:	b29b      	uxth	r3, r3
 800fc52:	f003 0301 	and.w	r3, r3, #1
 800fc56:	b29b      	uxth	r3, r3
 800fc58:	8a7a      	ldrh	r2, [r7, #18]
 800fc5a:	1ad3      	subs	r3, r2, r3
 800fc5c:	827b      	strh	r3, [r7, #18]
 800fc5e:	e01c      	b.n	800fc9a <ff_wtoupper+0xf2>
				case 2: uc -= 16; break;			/* Shift -16 */
 800fc60:	8a7b      	ldrh	r3, [r7, #18]
 800fc62:	3b10      	subs	r3, #16
 800fc64:	827b      	strh	r3, [r7, #18]
 800fc66:	e018      	b.n	800fc9a <ff_wtoupper+0xf2>
				case 3:	uc -= 32; break;			/* Shift -32 */
 800fc68:	8a7b      	ldrh	r3, [r7, #18]
 800fc6a:	3b20      	subs	r3, #32
 800fc6c:	827b      	strh	r3, [r7, #18]
 800fc6e:	e014      	b.n	800fc9a <ff_wtoupper+0xf2>
				case 4:	uc -= 48; break;			/* Shift -48 */
 800fc70:	8a7b      	ldrh	r3, [r7, #18]
 800fc72:	3b30      	subs	r3, #48	@ 0x30
 800fc74:	827b      	strh	r3, [r7, #18]
 800fc76:	e010      	b.n	800fc9a <ff_wtoupper+0xf2>
				case 5:	uc -= 26; break;			/* Shift -26 */
 800fc78:	8a7b      	ldrh	r3, [r7, #18]
 800fc7a:	3b1a      	subs	r3, #26
 800fc7c:	827b      	strh	r3, [r7, #18]
 800fc7e:	e00c      	b.n	800fc9a <ff_wtoupper+0xf2>
				case 6:	uc += 8; break;				/* Shift +8 */
 800fc80:	8a7b      	ldrh	r3, [r7, #18]
 800fc82:	3308      	adds	r3, #8
 800fc84:	827b      	strh	r3, [r7, #18]
 800fc86:	e008      	b.n	800fc9a <ff_wtoupper+0xf2>
				case 7: uc -= 80; break;			/* Shift -80 */
 800fc88:	8a7b      	ldrh	r3, [r7, #18]
 800fc8a:	3b50      	subs	r3, #80	@ 0x50
 800fc8c:	827b      	strh	r3, [r7, #18]
 800fc8e:	e004      	b.n	800fc9a <ff_wtoupper+0xf2>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 800fc90:	8a7b      	ldrh	r3, [r7, #18]
 800fc92:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800fc96:	827b      	strh	r3, [r7, #18]
 800fc98:	bf00      	nop
				}
				break;
 800fc9a:	e008      	b.n	800fcae <ff_wtoupper+0x106>
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 800fc9c:	89bb      	ldrh	r3, [r7, #12]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d194      	bne.n	800fbcc <ff_wtoupper+0x24>
 800fca2:	89fb      	ldrh	r3, [r7, #14]
 800fca4:	005b      	lsls	r3, r3, #1
 800fca6:	697a      	ldr	r2, [r7, #20]
 800fca8:	4413      	add	r3, r2
 800fcaa:	617b      	str	r3, [r7, #20]
			bc = *p++;								/* Get the block base */
 800fcac:	e78e      	b.n	800fbcc <ff_wtoupper+0x24>
				break;
 800fcae:	bf00      	nop
		}
		uni = uc;
 800fcb0:	8a7b      	ldrh	r3, [r7, #18]
 800fcb2:	607b      	str	r3, [r7, #4]
	}

	return uni;
 800fcb4:	687b      	ldr	r3, [r7, #4]
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	371c      	adds	r7, #28
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc0:	4770      	bx	lr
 800fcc2:	bf00      	nop
 800fcc4:	08022b88 	.word	0x08022b88
 800fcc8:	08022d7c 	.word	0x08022d7c

0800fccc <arm_fill_f32>:
 800fccc:	b410      	push	{r4}
 800fcce:	088c      	lsrs	r4, r1, #2
 800fcd0:	d010      	beq.n	800fcf4 <arm_fill_f32+0x28>
 800fcd2:	f100 0310 	add.w	r3, r0, #16
 800fcd6:	4622      	mov	r2, r4
 800fcd8:	3a01      	subs	r2, #1
 800fcda:	ed03 0a04 	vstr	s0, [r3, #-16]
 800fcde:	ed03 0a03 	vstr	s0, [r3, #-12]
 800fce2:	ed03 0a02 	vstr	s0, [r3, #-8]
 800fce6:	ed03 0a01 	vstr	s0, [r3, #-4]
 800fcea:	f103 0310 	add.w	r3, r3, #16
 800fcee:	d1f3      	bne.n	800fcd8 <arm_fill_f32+0xc>
 800fcf0:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800fcf4:	f011 0103 	ands.w	r1, r1, #3
 800fcf8:	d003      	beq.n	800fd02 <arm_fill_f32+0x36>
 800fcfa:	3901      	subs	r1, #1
 800fcfc:	eca0 0a01 	vstmia	r0!, {s0}
 800fd00:	d1fb      	bne.n	800fcfa <arm_fill_f32+0x2e>
 800fd02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd06:	4770      	bx	lr

0800fd08 <arm_min_f32>:
 800fd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd0c:	1e4f      	subs	r7, r1, #1
 800fd0e:	ea5f 0897 	movs.w	r8, r7, lsr #2
 800fd12:	f100 0e04 	add.w	lr, r0, #4
 800fd16:	edd0 7a00 	vldr	s15, [r0]
 800fd1a:	d058      	beq.n	800fdce <arm_min_f32+0xc6>
 800fd1c:	3014      	adds	r0, #20
 800fd1e:	46c4      	mov	ip, r8
 800fd20:	2604      	movs	r6, #4
 800fd22:	2400      	movs	r4, #0
 800fd24:	ed10 6a04 	vldr	s12, [r0, #-16]
 800fd28:	ed50 6a03 	vldr	s13, [r0, #-12]
 800fd2c:	ed10 7a02 	vldr	s14, [r0, #-8]
 800fd30:	ed50 5a01 	vldr	s11, [r0, #-4]
 800fd34:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800fd38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd3c:	bf48      	it	mi
 800fd3e:	eef0 7a46 	vmovmi.f32	s15, s12
 800fd42:	f1a6 0503 	sub.w	r5, r6, #3
 800fd46:	eef4 7ae6 	vcmpe.f32	s15, s13
 800fd4a:	bf48      	it	mi
 800fd4c:	462c      	movmi	r4, r5
 800fd4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd52:	bfc8      	it	gt
 800fd54:	eef0 7a66 	vmovgt.f32	s15, s13
 800fd58:	f1a6 0502 	sub.w	r5, r6, #2
 800fd5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fd60:	bfc8      	it	gt
 800fd62:	462c      	movgt	r4, r5
 800fd64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd68:	bfc8      	it	gt
 800fd6a:	eef0 7a47 	vmovgt.f32	s15, s14
 800fd6e:	f106 35ff 	add.w	r5, r6, #4294967295
 800fd72:	eef4 7ae5 	vcmpe.f32	s15, s11
 800fd76:	bfc8      	it	gt
 800fd78:	462c      	movgt	r4, r5
 800fd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd7e:	bfc8      	it	gt
 800fd80:	4634      	movgt	r4, r6
 800fd82:	bfc8      	it	gt
 800fd84:	eef0 7a65 	vmovgt.f32	s15, s11
 800fd88:	f1bc 0c01 	subs.w	ip, ip, #1
 800fd8c:	f106 0604 	add.w	r6, r6, #4
 800fd90:	f100 0010 	add.w	r0, r0, #16
 800fd94:	d1c6      	bne.n	800fd24 <arm_min_f32+0x1c>
 800fd96:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 800fd9a:	f017 0003 	ands.w	r0, r7, #3
 800fd9e:	d018      	beq.n	800fdd2 <arm_min_f32+0xca>
 800fda0:	1a08      	subs	r0, r1, r0
 800fda2:	ecbe 7a01 	vldmia	lr!, {s14}
 800fda6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fdaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdae:	bf48      	it	mi
 800fdb0:	4604      	movmi	r4, r0
 800fdb2:	f100 0001 	add.w	r0, r0, #1
 800fdb6:	bf58      	it	pl
 800fdb8:	eeb0 7a67 	vmovpl.f32	s14, s15
 800fdbc:	4288      	cmp	r0, r1
 800fdbe:	eef0 7a47 	vmov.f32	s15, s14
 800fdc2:	d1ee      	bne.n	800fda2 <arm_min_f32+0x9a>
 800fdc4:	ed82 7a00 	vstr	s14, [r2]
 800fdc8:	601c      	str	r4, [r3, #0]
 800fdca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdce:	4644      	mov	r4, r8
 800fdd0:	e7e3      	b.n	800fd9a <arm_min_f32+0x92>
 800fdd2:	eeb0 7a67 	vmov.f32	s14, s15
 800fdd6:	e7f5      	b.n	800fdc4 <arm_min_f32+0xbc>

0800fdd8 <arm_max_f32>:
 800fdd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fddc:	1e4f      	subs	r7, r1, #1
 800fdde:	ea5f 0897 	movs.w	r8, r7, lsr #2
 800fde2:	f100 0e04 	add.w	lr, r0, #4
 800fde6:	edd0 7a00 	vldr	s15, [r0]
 800fdea:	d058      	beq.n	800fe9e <arm_max_f32+0xc6>
 800fdec:	3014      	adds	r0, #20
 800fdee:	46c4      	mov	ip, r8
 800fdf0:	2604      	movs	r6, #4
 800fdf2:	2400      	movs	r4, #0
 800fdf4:	ed10 6a04 	vldr	s12, [r0, #-16]
 800fdf8:	ed50 6a03 	vldr	s13, [r0, #-12]
 800fdfc:	ed10 7a02 	vldr	s14, [r0, #-8]
 800fe00:	ed50 5a01 	vldr	s11, [r0, #-4]
 800fe04:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800fe08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe0c:	bfc8      	it	gt
 800fe0e:	eef0 7a46 	vmovgt.f32	s15, s12
 800fe12:	f1a6 0503 	sub.w	r5, r6, #3
 800fe16:	eef4 7ae6 	vcmpe.f32	s15, s13
 800fe1a:	bfc8      	it	gt
 800fe1c:	462c      	movgt	r4, r5
 800fe1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe22:	bf48      	it	mi
 800fe24:	eef0 7a66 	vmovmi.f32	s15, s13
 800fe28:	f1a6 0502 	sub.w	r5, r6, #2
 800fe2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fe30:	bf48      	it	mi
 800fe32:	462c      	movmi	r4, r5
 800fe34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe38:	bf48      	it	mi
 800fe3a:	eef0 7a47 	vmovmi.f32	s15, s14
 800fe3e:	f106 35ff 	add.w	r5, r6, #4294967295
 800fe42:	eef4 7ae5 	vcmpe.f32	s15, s11
 800fe46:	bf48      	it	mi
 800fe48:	462c      	movmi	r4, r5
 800fe4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe4e:	bf48      	it	mi
 800fe50:	4634      	movmi	r4, r6
 800fe52:	bf48      	it	mi
 800fe54:	eef0 7a65 	vmovmi.f32	s15, s11
 800fe58:	f1bc 0c01 	subs.w	ip, ip, #1
 800fe5c:	f106 0604 	add.w	r6, r6, #4
 800fe60:	f100 0010 	add.w	r0, r0, #16
 800fe64:	d1c6      	bne.n	800fdf4 <arm_max_f32+0x1c>
 800fe66:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 800fe6a:	f017 0003 	ands.w	r0, r7, #3
 800fe6e:	d018      	beq.n	800fea2 <arm_max_f32+0xca>
 800fe70:	1a08      	subs	r0, r1, r0
 800fe72:	ecbe 7a01 	vldmia	lr!, {s14}
 800fe76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fe7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe7e:	bfc8      	it	gt
 800fe80:	4604      	movgt	r4, r0
 800fe82:	f100 0001 	add.w	r0, r0, #1
 800fe86:	bfd8      	it	le
 800fe88:	eeb0 7a67 	vmovle.f32	s14, s15
 800fe8c:	4288      	cmp	r0, r1
 800fe8e:	eef0 7a47 	vmov.f32	s15, s14
 800fe92:	d1ee      	bne.n	800fe72 <arm_max_f32+0x9a>
 800fe94:	ed82 7a00 	vstr	s14, [r2]
 800fe98:	601c      	str	r4, [r3, #0]
 800fe9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe9e:	4644      	mov	r4, r8
 800fea0:	e7e3      	b.n	800fe6a <arm_max_f32+0x92>
 800fea2:	eeb0 7a67 	vmov.f32	s14, s15
 800fea6:	e7f5      	b.n	800fe94 <arm_max_f32+0xbc>

0800fea8 <arm_rfft_fast_init_f32>:
 800fea8:	084b      	lsrs	r3, r1, #1
 800feaa:	2b80      	cmp	r3, #128	@ 0x80
 800feac:	b410      	push	{r4}
 800feae:	8201      	strh	r1, [r0, #16]
 800feb0:	8003      	strh	r3, [r0, #0]
 800feb2:	d047      	beq.n	800ff44 <arm_rfft_fast_init_f32+0x9c>
 800feb4:	d917      	bls.n	800fee6 <arm_rfft_fast_init_f32+0x3e>
 800feb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800feba:	d03d      	beq.n	800ff38 <arm_rfft_fast_init_f32+0x90>
 800febc:	d929      	bls.n	800ff12 <arm_rfft_fast_init_f32+0x6a>
 800febe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fec2:	d020      	beq.n	800ff06 <arm_rfft_fast_init_f32+0x5e>
 800fec4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fec8:	d113      	bne.n	800fef2 <arm_rfft_fast_init_f32+0x4a>
 800feca:	4921      	ldr	r1, [pc, #132]	@ (800ff50 <arm_rfft_fast_init_f32+0xa8>)
 800fecc:	4a21      	ldr	r2, [pc, #132]	@ (800ff54 <arm_rfft_fast_init_f32+0xac>)
 800fece:	4b22      	ldr	r3, [pc, #136]	@ (800ff58 <arm_rfft_fast_init_f32+0xb0>)
 800fed0:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 800fed4:	8184      	strh	r4, [r0, #12]
 800fed6:	6081      	str	r1, [r0, #8]
 800fed8:	6042      	str	r2, [r0, #4]
 800feda:	6143      	str	r3, [r0, #20]
 800fedc:	2000      	movs	r0, #0
 800fede:	b240      	sxtb	r0, r0
 800fee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fee4:	4770      	bx	lr
 800fee6:	2b20      	cmp	r3, #32
 800fee8:	d01c      	beq.n	800ff24 <arm_rfft_fast_init_f32+0x7c>
 800feea:	2b40      	cmp	r3, #64	@ 0x40
 800feec:	d006      	beq.n	800fefc <arm_rfft_fast_init_f32+0x54>
 800feee:	2b10      	cmp	r3, #16
 800fef0:	d01d      	beq.n	800ff2e <arm_rfft_fast_init_f32+0x86>
 800fef2:	20ff      	movs	r0, #255	@ 0xff
 800fef4:	b240      	sxtb	r0, r0
 800fef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fefa:	4770      	bx	lr
 800fefc:	2438      	movs	r4, #56	@ 0x38
 800fefe:	4917      	ldr	r1, [pc, #92]	@ (800ff5c <arm_rfft_fast_init_f32+0xb4>)
 800ff00:	4a17      	ldr	r2, [pc, #92]	@ (800ff60 <arm_rfft_fast_init_f32+0xb8>)
 800ff02:	4b18      	ldr	r3, [pc, #96]	@ (800ff64 <arm_rfft_fast_init_f32+0xbc>)
 800ff04:	e7e6      	b.n	800fed4 <arm_rfft_fast_init_f32+0x2c>
 800ff06:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 800ff0a:	4917      	ldr	r1, [pc, #92]	@ (800ff68 <arm_rfft_fast_init_f32+0xc0>)
 800ff0c:	4a17      	ldr	r2, [pc, #92]	@ (800ff6c <arm_rfft_fast_init_f32+0xc4>)
 800ff0e:	4b18      	ldr	r3, [pc, #96]	@ (800ff70 <arm_rfft_fast_init_f32+0xc8>)
 800ff10:	e7e0      	b.n	800fed4 <arm_rfft_fast_init_f32+0x2c>
 800ff12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ff16:	d1ec      	bne.n	800fef2 <arm_rfft_fast_init_f32+0x4a>
 800ff18:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 800ff1c:	4915      	ldr	r1, [pc, #84]	@ (800ff74 <arm_rfft_fast_init_f32+0xcc>)
 800ff1e:	4a16      	ldr	r2, [pc, #88]	@ (800ff78 <arm_rfft_fast_init_f32+0xd0>)
 800ff20:	4b16      	ldr	r3, [pc, #88]	@ (800ff7c <arm_rfft_fast_init_f32+0xd4>)
 800ff22:	e7d7      	b.n	800fed4 <arm_rfft_fast_init_f32+0x2c>
 800ff24:	2430      	movs	r4, #48	@ 0x30
 800ff26:	4916      	ldr	r1, [pc, #88]	@ (800ff80 <arm_rfft_fast_init_f32+0xd8>)
 800ff28:	4a16      	ldr	r2, [pc, #88]	@ (800ff84 <arm_rfft_fast_init_f32+0xdc>)
 800ff2a:	4b17      	ldr	r3, [pc, #92]	@ (800ff88 <arm_rfft_fast_init_f32+0xe0>)
 800ff2c:	e7d2      	b.n	800fed4 <arm_rfft_fast_init_f32+0x2c>
 800ff2e:	2414      	movs	r4, #20
 800ff30:	4916      	ldr	r1, [pc, #88]	@ (800ff8c <arm_rfft_fast_init_f32+0xe4>)
 800ff32:	4a17      	ldr	r2, [pc, #92]	@ (800ff90 <arm_rfft_fast_init_f32+0xe8>)
 800ff34:	4b17      	ldr	r3, [pc, #92]	@ (800ff94 <arm_rfft_fast_init_f32+0xec>)
 800ff36:	e7cd      	b.n	800fed4 <arm_rfft_fast_init_f32+0x2c>
 800ff38:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 800ff3c:	4916      	ldr	r1, [pc, #88]	@ (800ff98 <arm_rfft_fast_init_f32+0xf0>)
 800ff3e:	4a17      	ldr	r2, [pc, #92]	@ (800ff9c <arm_rfft_fast_init_f32+0xf4>)
 800ff40:	4b17      	ldr	r3, [pc, #92]	@ (800ffa0 <arm_rfft_fast_init_f32+0xf8>)
 800ff42:	e7c7      	b.n	800fed4 <arm_rfft_fast_init_f32+0x2c>
 800ff44:	24d0      	movs	r4, #208	@ 0xd0
 800ff46:	4917      	ldr	r1, [pc, #92]	@ (800ffa4 <arm_rfft_fast_init_f32+0xfc>)
 800ff48:	4a17      	ldr	r2, [pc, #92]	@ (800ffa8 <arm_rfft_fast_init_f32+0x100>)
 800ff4a:	4b18      	ldr	r3, [pc, #96]	@ (800ffac <arm_rfft_fast_init_f32+0x104>)
 800ff4c:	e7c2      	b.n	800fed4 <arm_rfft_fast_init_f32+0x2c>
 800ff4e:	bf00      	nop
 800ff50:	08032444 	.word	0x08032444
 800ff54:	08022e38 	.word	0x08022e38
 800ff58:	08028fa8 	.word	0x08028fa8
 800ff5c:	08026f38 	.word	0x08026f38
 800ff60:	08034204 	.word	0x08034204
 800ff64:	080366f4 	.word	0x080366f4
 800ff68:	0802f928 	.word	0x0802f928
 800ff6c:	0802d828 	.word	0x0802d828
 800ff70:	08026fa8 	.word	0x08026fa8
 800ff74:	08036384 	.word	0x08036384
 800ff78:	0802cfa8 	.word	0x0802cfa8
 800ff7c:	08034404 	.word	0x08034404
 800ff80:	080307e0 	.word	0x080307e0
 800ff84:	0802f828 	.word	0x0802f828
 800ff88:	08026e38 	.word	0x08026e38
 800ff8c:	08030738 	.word	0x08030738
 800ff90:	0802d7a8 	.word	0x0802d7a8
 800ff94:	08030760 	.word	0x08030760
 800ff98:	08034c04 	.word	0x08034c04
 800ff9c:	08031444 	.word	0x08031444
 800ffa0:	08034f84 	.word	0x08034f84
 800ffa4:	080368f4 	.word	0x080368f4
 800ffa8:	08031044 	.word	0x08031044
 800ffac:	08035f84 	.word	0x08035f84

0800ffb0 <arm_rfft_fast_f32>:
 800ffb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffb4:	8a06      	ldrh	r6, [r0, #16]
 800ffb6:	0876      	lsrs	r6, r6, #1
 800ffb8:	4607      	mov	r7, r0
 800ffba:	4615      	mov	r5, r2
 800ffbc:	8006      	strh	r6, [r0, #0]
 800ffbe:	460c      	mov	r4, r1
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d15c      	bne.n	801007e <arm_rfft_fast_f32+0xce>
 800ffc4:	461a      	mov	r2, r3
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	f000 fbe6 	bl	8010798 <arm_cfft_f32>
 800ffcc:	edd4 7a00 	vldr	s15, [r4]
 800ffd0:	ed94 7a01 	vldr	s14, [r4, #4]
 800ffd4:	883e      	ldrh	r6, [r7, #0]
 800ffd6:	6978      	ldr	r0, [r7, #20]
 800ffd8:	ee37 7a07 	vadd.f32	s14, s14, s14
 800ffdc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ffe0:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800ffe4:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ffe8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ffec:	3e01      	subs	r6, #1
 800ffee:	ee26 7aa3 	vmul.f32	s14, s13, s7
 800fff2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800fff6:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800fffa:	ed85 7a00 	vstr	s14, [r5]
 800fffe:	edc5 7a01 	vstr	s15, [r5, #4]
 8010002:	3010      	adds	r0, #16
 8010004:	f105 0210 	add.w	r2, r5, #16
 8010008:	3b08      	subs	r3, #8
 801000a:	f104 0110 	add.w	r1, r4, #16
 801000e:	ed51 4a02 	vldr	s9, [r1, #-8]
 8010012:	ed93 5a02 	vldr	s10, [r3, #8]
 8010016:	ed11 7a01 	vldr	s14, [r1, #-4]
 801001a:	ed10 6a02 	vldr	s12, [r0, #-8]
 801001e:	edd3 5a03 	vldr	s11, [r3, #12]
 8010022:	ed50 6a01 	vldr	s13, [r0, #-4]
 8010026:	ee75 7a64 	vsub.f32	s15, s10, s9
 801002a:	ee35 4a87 	vadd.f32	s8, s11, s14
 801002e:	ee35 5a24 	vadd.f32	s10, s10, s9
 8010032:	ee77 5a65 	vsub.f32	s11, s14, s11
 8010036:	ee66 4a27 	vmul.f32	s9, s12, s15
 801003a:	ee26 7aa7 	vmul.f32	s14, s13, s15
 801003e:	ee34 5a85 	vadd.f32	s10, s9, s10
 8010042:	ee26 6a04 	vmul.f32	s12, s12, s8
 8010046:	ee66 6a84 	vmul.f32	s13, s13, s8
 801004a:	ee77 7a25 	vadd.f32	s15, s14, s11
 801004e:	ee76 6a85 	vadd.f32	s13, s13, s10
 8010052:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010056:	ee66 6aa3 	vmul.f32	s13, s13, s7
 801005a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801005e:	3e01      	subs	r6, #1
 8010060:	ed42 6a02 	vstr	s13, [r2, #-8]
 8010064:	ed42 7a01 	vstr	s15, [r2, #-4]
 8010068:	f1a3 0308 	sub.w	r3, r3, #8
 801006c:	f101 0108 	add.w	r1, r1, #8
 8010070:	f100 0008 	add.w	r0, r0, #8
 8010074:	f102 0208 	add.w	r2, r2, #8
 8010078:	d1c9      	bne.n	801000e <arm_rfft_fast_f32+0x5e>
 801007a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801007e:	edd1 7a00 	vldr	s15, [r1]
 8010082:	edd1 6a01 	vldr	s13, [r1, #4]
 8010086:	6941      	ldr	r1, [r0, #20]
 8010088:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801008c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010090:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8010094:	ee27 7a23 	vmul.f32	s14, s14, s7
 8010098:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801009c:	3e01      	subs	r6, #1
 801009e:	ed82 7a00 	vstr	s14, [r2]
 80100a2:	edc2 7a01 	vstr	s15, [r2, #4]
 80100a6:	00f0      	lsls	r0, r6, #3
 80100a8:	b3ee      	cbz	r6, 8010126 <arm_rfft_fast_f32+0x176>
 80100aa:	3808      	subs	r0, #8
 80100ac:	f101 0e10 	add.w	lr, r1, #16
 80100b0:	4420      	add	r0, r4
 80100b2:	f104 0110 	add.w	r1, r4, #16
 80100b6:	f102 0c10 	add.w	ip, r2, #16
 80100ba:	ed90 7a02 	vldr	s14, [r0, #8]
 80100be:	ed51 6a02 	vldr	s13, [r1, #-8]
 80100c2:	ed1e 6a02 	vldr	s12, [lr, #-8]
 80100c6:	ed90 4a03 	vldr	s8, [r0, #12]
 80100ca:	ed11 5a01 	vldr	s10, [r1, #-4]
 80100ce:	ed5e 5a01 	vldr	s11, [lr, #-4]
 80100d2:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80100d6:	ee74 4a05 	vadd.f32	s9, s8, s10
 80100da:	ee26 3a27 	vmul.f32	s6, s12, s15
 80100de:	ee77 6a26 	vadd.f32	s13, s14, s13
 80100e2:	ee35 5a44 	vsub.f32	s10, s10, s8
 80100e6:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80100ea:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80100ee:	ee77 7a05 	vadd.f32	s15, s14, s10
 80100f2:	ee26 6a24 	vmul.f32	s12, s12, s9
 80100f6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80100fa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80100fe:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8010102:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8010106:	ee27 7a23 	vmul.f32	s14, s14, s7
 801010a:	3e01      	subs	r6, #1
 801010c:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8010110:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8010114:	f1a0 0008 	sub.w	r0, r0, #8
 8010118:	f101 0108 	add.w	r1, r1, #8
 801011c:	f10e 0e08 	add.w	lr, lr, #8
 8010120:	f10c 0c08 	add.w	ip, ip, #8
 8010124:	d1c9      	bne.n	80100ba <arm_rfft_fast_f32+0x10a>
 8010126:	4638      	mov	r0, r7
 8010128:	4629      	mov	r1, r5
 801012a:	461a      	mov	r2, r3
 801012c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010130:	2301      	movs	r3, #1
 8010132:	f000 bb31 	b.w	8010798 <arm_cfft_f32>
 8010136:	bf00      	nop

08010138 <arm_cfft_radix8by2_f32>:
 8010138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801013c:	ed2d 8b08 	vpush	{d8-d11}
 8010140:	f8b0 e000 	ldrh.w	lr, [r0]
 8010144:	6842      	ldr	r2, [r0, #4]
 8010146:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801014a:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 801014e:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8010152:	4607      	mov	r7, r0
 8010154:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8010158:	f000 80af 	beq.w	80102ba <arm_cfft_radix8by2_f32+0x182>
 801015c:	3310      	adds	r3, #16
 801015e:	18ce      	adds	r6, r1, r3
 8010160:	3210      	adds	r2, #16
 8010162:	4443      	add	r3, r8
 8010164:	f101 0510 	add.w	r5, r1, #16
 8010168:	f108 0410 	add.w	r4, r8, #16
 801016c:	ed54 1a04 	vldr	s3, [r4, #-16]
 8010170:	ed13 4a04 	vldr	s8, [r3, #-16]
 8010174:	ed53 3a03 	vldr	s7, [r3, #-12]
 8010178:	ed53 5a02 	vldr	s11, [r3, #-8]
 801017c:	ed13 5a01 	vldr	s10, [r3, #-4]
 8010180:	ed54 6a03 	vldr	s13, [r4, #-12]
 8010184:	ed14 0a02 	vldr	s0, [r4, #-8]
 8010188:	ed16 2a04 	vldr	s4, [r6, #-16]
 801018c:	ed56 2a03 	vldr	s5, [r6, #-12]
 8010190:	ed15 6a03 	vldr	s12, [r5, #-12]
 8010194:	ed15 7a01 	vldr	s14, [r5, #-4]
 8010198:	ed15 3a04 	vldr	s6, [r5, #-16]
 801019c:	ed54 7a01 	vldr	s15, [r4, #-4]
 80101a0:	ed56 0a02 	vldr	s1, [r6, #-8]
 80101a4:	ed16 1a01 	vldr	s2, [r6, #-4]
 80101a8:	ed55 4a02 	vldr	s9, [r5, #-8]
 80101ac:	ee73 ba21 	vadd.f32	s23, s6, s3
 80101b0:	ee36 ba26 	vadd.f32	s22, s12, s13
 80101b4:	ee37 aa27 	vadd.f32	s20, s14, s15
 80101b8:	ee72 9a04 	vadd.f32	s19, s4, s8
 80101bc:	ee32 9aa3 	vadd.f32	s18, s5, s7
 80101c0:	ee31 8a05 	vadd.f32	s16, s2, s10
 80101c4:	ee74 aa80 	vadd.f32	s21, s9, s0
 80101c8:	ee70 8aa5 	vadd.f32	s17, s1, s11
 80101cc:	ed45 ba04 	vstr	s23, [r5, #-16]
 80101d0:	ed05 ba03 	vstr	s22, [r5, #-12]
 80101d4:	ed45 aa02 	vstr	s21, [r5, #-8]
 80101d8:	ed05 aa01 	vstr	s20, [r5, #-4]
 80101dc:	ed06 8a01 	vstr	s16, [r6, #-4]
 80101e0:	ed46 9a04 	vstr	s19, [r6, #-16]
 80101e4:	ed06 9a03 	vstr	s18, [r6, #-12]
 80101e8:	ed46 8a02 	vstr	s17, [r6, #-8]
 80101ec:	ee76 6a66 	vsub.f32	s13, s12, s13
 80101f0:	ee73 3ae2 	vsub.f32	s7, s7, s5
 80101f4:	ed12 6a03 	vldr	s12, [r2, #-12]
 80101f8:	ed52 2a04 	vldr	s5, [r2, #-16]
 80101fc:	ee33 3a61 	vsub.f32	s6, s6, s3
 8010200:	ee34 4a42 	vsub.f32	s8, s8, s4
 8010204:	ee26 8a86 	vmul.f32	s16, s13, s12
 8010208:	ee24 2a06 	vmul.f32	s4, s8, s12
 801020c:	ee63 1a22 	vmul.f32	s3, s6, s5
 8010210:	ee24 4a22 	vmul.f32	s8, s8, s5
 8010214:	ee23 3a06 	vmul.f32	s6, s6, s12
 8010218:	ee66 6aa2 	vmul.f32	s13, s13, s5
 801021c:	ee23 6a86 	vmul.f32	s12, s7, s12
 8010220:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8010224:	ee36 6a04 	vadd.f32	s12, s12, s8
 8010228:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801022c:	ee72 3a63 	vsub.f32	s7, s4, s7
 8010230:	ee71 2a88 	vadd.f32	s5, s3, s16
 8010234:	ed44 6a03 	vstr	s13, [r4, #-12]
 8010238:	ed44 2a04 	vstr	s5, [r4, #-16]
 801023c:	ed43 3a04 	vstr	s7, [r3, #-16]
 8010240:	ed03 6a03 	vstr	s12, [r3, #-12]
 8010244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010248:	ee75 6ae0 	vsub.f32	s13, s11, s1
 801024c:	ed12 7a01 	vldr	s14, [r2, #-4]
 8010250:	ed52 5a02 	vldr	s11, [r2, #-8]
 8010254:	ee35 6a41 	vsub.f32	s12, s10, s2
 8010258:	ee74 4ac0 	vsub.f32	s9, s9, s0
 801025c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8010260:	ee26 5a87 	vmul.f32	s10, s13, s14
 8010264:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8010268:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801026c:	ee64 4a87 	vmul.f32	s9, s9, s14
 8010270:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8010274:	ee26 7a07 	vmul.f32	s14, s12, s14
 8010278:	ee26 6a25 	vmul.f32	s12, s12, s11
 801027c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8010280:	ee74 5a23 	vadd.f32	s11, s8, s7
 8010284:	ee35 6a46 	vsub.f32	s12, s10, s12
 8010288:	ee37 7a26 	vadd.f32	s14, s14, s13
 801028c:	f1be 0e01 	subs.w	lr, lr, #1
 8010290:	ed44 5a02 	vstr	s11, [r4, #-8]
 8010294:	f105 0510 	add.w	r5, r5, #16
 8010298:	ed44 7a01 	vstr	s15, [r4, #-4]
 801029c:	f106 0610 	add.w	r6, r6, #16
 80102a0:	ed03 6a02 	vstr	s12, [r3, #-8]
 80102a4:	ed03 7a01 	vstr	s14, [r3, #-4]
 80102a8:	f102 0210 	add.w	r2, r2, #16
 80102ac:	f104 0410 	add.w	r4, r4, #16
 80102b0:	f103 0310 	add.w	r3, r3, #16
 80102b4:	f47f af5a 	bne.w	801016c <arm_cfft_radix8by2_f32+0x34>
 80102b8:	687a      	ldr	r2, [r7, #4]
 80102ba:	fa1f f48c 	uxth.w	r4, ip
 80102be:	4608      	mov	r0, r1
 80102c0:	2302      	movs	r3, #2
 80102c2:	4621      	mov	r1, r4
 80102c4:	f000 fefc 	bl	80110c0 <arm_radix8_butterfly_f32>
 80102c8:	ecbd 8b08 	vpop	{d8-d11}
 80102cc:	4640      	mov	r0, r8
 80102ce:	4621      	mov	r1, r4
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	2302      	movs	r3, #2
 80102d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102d8:	f000 bef2 	b.w	80110c0 <arm_radix8_butterfly_f32>

080102dc <arm_cfft_radix8by4_f32>:
 80102dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102e0:	ed2d 8b0a 	vpush	{d8-d12}
 80102e4:	8802      	ldrh	r2, [r0, #0]
 80102e6:	ed91 6a00 	vldr	s12, [r1]
 80102ea:	b08f      	sub	sp, #60	@ 0x3c
 80102ec:	460f      	mov	r7, r1
 80102ee:	0852      	lsrs	r2, r2, #1
 80102f0:	0093      	lsls	r3, r2, #2
 80102f2:	900c      	str	r0, [sp, #48]	@ 0x30
 80102f4:	9103      	str	r1, [sp, #12]
 80102f6:	6841      	ldr	r1, [r0, #4]
 80102f8:	ed97 7a01 	vldr	s14, [r7, #4]
 80102fc:	4638      	mov	r0, r7
 80102fe:	4418      	add	r0, r3
 8010300:	4606      	mov	r6, r0
 8010302:	9009      	str	r0, [sp, #36]	@ 0x24
 8010304:	4418      	add	r0, r3
 8010306:	edd0 6a00 	vldr	s13, [r0]
 801030a:	edd6 3a00 	vldr	s7, [r6]
 801030e:	edd6 2a01 	vldr	s5, [r6, #4]
 8010312:	edd0 7a01 	vldr	s15, [r0, #4]
 8010316:	900a      	str	r0, [sp, #40]	@ 0x28
 8010318:	ee76 5a26 	vadd.f32	s11, s12, s13
 801031c:	4604      	mov	r4, r0
 801031e:	4625      	mov	r5, r4
 8010320:	441c      	add	r4, r3
 8010322:	ed94 4a00 	vldr	s8, [r4]
 8010326:	ed94 5a01 	vldr	s10, [r4, #4]
 801032a:	9401      	str	r4, [sp, #4]
 801032c:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8010330:	4630      	mov	r0, r6
 8010332:	ee74 4a24 	vadd.f32	s9, s8, s9
 8010336:	463e      	mov	r6, r7
 8010338:	ee14 ea90 	vmov	lr, s9
 801033c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8010340:	f846 eb08 	str.w	lr, [r6], #8
 8010344:	ee37 6a27 	vadd.f32	s12, s14, s15
 8010348:	edd0 4a01 	vldr	s9, [r0, #4]
 801034c:	9604      	str	r6, [sp, #16]
 801034e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010352:	9e01      	ldr	r6, [sp, #4]
 8010354:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8010358:	ed96 2a01 	vldr	s4, [r6, #4]
 801035c:	ee36 7a24 	vadd.f32	s14, s12, s9
 8010360:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8010364:	ee77 4ae3 	vsub.f32	s9, s15, s7
 8010368:	ee36 6a62 	vsub.f32	s12, s12, s5
 801036c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8010370:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8010374:	ee73 3a45 	vsub.f32	s7, s6, s10
 8010378:	4604      	mov	r4, r0
 801037a:	ee36 6a45 	vsub.f32	s12, s12, s10
 801037e:	ee75 6a26 	vadd.f32	s13, s10, s13
 8010382:	46a3      	mov	fp, r4
 8010384:	ee37 7a02 	vadd.f32	s14, s14, s4
 8010388:	ee34 5a84 	vadd.f32	s10, s9, s8
 801038c:	ee13 8a90 	vmov	r8, s7
 8010390:	46a4      	mov	ip, r4
 8010392:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8010396:	ed87 7a01 	vstr	s14, [r7, #4]
 801039a:	f84b 8b08 	str.w	r8, [fp], #8
 801039e:	f1ac 0704 	sub.w	r7, ip, #4
 80103a2:	ed8c 5a01 	vstr	s10, [ip, #4]
 80103a6:	f101 0c08 	add.w	ip, r1, #8
 80103aa:	462c      	mov	r4, r5
 80103ac:	f8cd c014 	str.w	ip, [sp, #20]
 80103b0:	ee15 ca90 	vmov	ip, s11
 80103b4:	f844 cb08 	str.w	ip, [r4], #8
 80103b8:	9407      	str	r4, [sp, #28]
 80103ba:	f101 0410 	add.w	r4, r1, #16
 80103be:	ed85 6a01 	vstr	s12, [r5, #4]
 80103c2:	0852      	lsrs	r2, r2, #1
 80103c4:	9402      	str	r4, [sp, #8]
 80103c6:	462c      	mov	r4, r5
 80103c8:	f101 0518 	add.w	r5, r1, #24
 80103cc:	920b      	str	r2, [sp, #44]	@ 0x2c
 80103ce:	46b2      	mov	sl, r6
 80103d0:	9506      	str	r5, [sp, #24]
 80103d2:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80103d6:	3a02      	subs	r2, #2
 80103d8:	ee16 5a90 	vmov	r5, s13
 80103dc:	46b6      	mov	lr, r6
 80103de:	4630      	mov	r0, r6
 80103e0:	0852      	lsrs	r2, r2, #1
 80103e2:	f84a 5b08 	str.w	r5, [sl], #8
 80103e6:	f1a0 0604 	sub.w	r6, r0, #4
 80103ea:	edce 7a01 	vstr	s15, [lr, #4]
 80103ee:	9208      	str	r2, [sp, #32]
 80103f0:	f000 8130 	beq.w	8010654 <arm_cfft_radix8by4_f32+0x378>
 80103f4:	4691      	mov	r9, r2
 80103f6:	9a03      	ldr	r2, [sp, #12]
 80103f8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80103fc:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8010400:	3b08      	subs	r3, #8
 8010402:	f102 0510 	add.w	r5, r2, #16
 8010406:	f101 0c20 	add.w	ip, r1, #32
 801040a:	f1a4 020c 	sub.w	r2, r4, #12
 801040e:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8010412:	4433      	add	r3, r6
 8010414:	3410      	adds	r4, #16
 8010416:	4650      	mov	r0, sl
 8010418:	4659      	mov	r1, fp
 801041a:	ed55 3a02 	vldr	s7, [r5, #-8]
 801041e:	ed14 5a02 	vldr	s10, [r4, #-8]
 8010422:	ed91 7a00 	vldr	s14, [r1]
 8010426:	edd0 7a00 	vldr	s15, [r0]
 801042a:	ed15 4a01 	vldr	s8, [r5, #-4]
 801042e:	ed54 5a01 	vldr	s11, [r4, #-4]
 8010432:	edd0 6a01 	vldr	s13, [r0, #4]
 8010436:	ed91 6a01 	vldr	s12, [r1, #4]
 801043a:	ee33 8a85 	vadd.f32	s16, s7, s10
 801043e:	ee34 0a25 	vadd.f32	s0, s8, s11
 8010442:	ee78 4a07 	vadd.f32	s9, s16, s14
 8010446:	ee74 5a65 	vsub.f32	s11, s8, s11
 801044a:	ee77 4aa4 	vadd.f32	s9, s15, s9
 801044e:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8010452:	ed45 4a02 	vstr	s9, [r5, #-8]
 8010456:	edd1 4a01 	vldr	s9, [r1, #4]
 801045a:	ed90 4a01 	vldr	s8, [r0, #4]
 801045e:	ee70 4a24 	vadd.f32	s9, s0, s9
 8010462:	ee76 aa05 	vadd.f32	s21, s12, s10
 8010466:	ee74 4a84 	vadd.f32	s9, s9, s8
 801046a:	ee35 aac7 	vsub.f32	s20, s11, s14
 801046e:	ed45 4a01 	vstr	s9, [r5, #-4]
 8010472:	edd6 1a00 	vldr	s3, [r6]
 8010476:	edd7 0a00 	vldr	s1, [r7]
 801047a:	ed92 4a02 	vldr	s8, [r2, #8]
 801047e:	edd3 3a02 	vldr	s7, [r3, #8]
 8010482:	ed93 2a01 	vldr	s4, [r3, #4]
 8010486:	ed16 1a01 	vldr	s2, [r6, #-4]
 801048a:	edd2 2a01 	vldr	s5, [r2, #4]
 801048e:	ed57 9a01 	vldr	s19, [r7, #-4]
 8010492:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8010496:	ee39 3a81 	vadd.f32	s6, s19, s2
 801049a:	ee74 8a84 	vadd.f32	s17, s9, s8
 801049e:	ee70 1ae1 	vsub.f32	s3, s1, s3
 80104a2:	ee73 8aa8 	vadd.f32	s17, s7, s17
 80104a6:	ee7a aae6 	vsub.f32	s21, s21, s13
 80104aa:	ee18 aa90 	vmov	sl, s17
 80104ae:	f847 a908 	str.w	sl, [r7], #-8
 80104b2:	edd2 8a01 	vldr	s17, [r2, #4]
 80104b6:	ed93 9a01 	vldr	s18, [r3, #4]
 80104ba:	ee73 8a28 	vadd.f32	s17, s6, s17
 80104be:	ee3a aa27 	vadd.f32	s20, s20, s15
 80104c2:	ee78 8a89 	vadd.f32	s17, s17, s18
 80104c6:	ee74 0a63 	vsub.f32	s1, s8, s7
 80104ca:	edc7 8a01 	vstr	s17, [r7, #4]
 80104ce:	ed18 ba02 	vldr	s22, [r8, #-8]
 80104d2:	ed58 8a01 	vldr	s17, [r8, #-4]
 80104d6:	ee39 1ac1 	vsub.f32	s2, s19, s2
 80104da:	ee6a ba28 	vmul.f32	s23, s20, s17
 80104de:	ee2a ca8b 	vmul.f32	s24, s21, s22
 80104e2:	ee71 9ae2 	vsub.f32	s19, s3, s5
 80104e6:	ee30 9a81 	vadd.f32	s18, s1, s2
 80104ea:	ee79 9a82 	vadd.f32	s19, s19, s4
 80104ee:	ee3c ca2b 	vadd.f32	s24, s24, s23
 80104f2:	ee6a aaa8 	vmul.f32	s21, s21, s17
 80104f6:	ee69 baa8 	vmul.f32	s23, s19, s17
 80104fa:	ee2a aa0b 	vmul.f32	s20, s20, s22
 80104fe:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8010502:	ee69 8a28 	vmul.f32	s17, s18, s17
 8010506:	ee29 ba0b 	vmul.f32	s22, s18, s22
 801050a:	ee1c aa10 	vmov	sl, s24
 801050e:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8010512:	f841 ab08 	str.w	sl, [r1], #8
 8010516:	ee3a aa6a 	vsub.f32	s20, s20, s21
 801051a:	ee3b bacb 	vsub.f32	s22, s23, s22
 801051e:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8010522:	ee33 3a62 	vsub.f32	s6, s6, s5
 8010526:	ed01 aa01 	vstr	s20, [r1, #-4]
 801052a:	edc2 8a01 	vstr	s17, [r2, #4]
 801052e:	ed82 ba02 	vstr	s22, [r2, #8]
 8010532:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8010536:	ee74 3a63 	vsub.f32	s7, s8, s7
 801053a:	ee38 8a47 	vsub.f32	s16, s16, s14
 801053e:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8010542:	ee30 0a46 	vsub.f32	s0, s0, s12
 8010546:	ee33 3a42 	vsub.f32	s6, s6, s4
 801054a:	ee38 8a67 	vsub.f32	s16, s16, s15
 801054e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8010552:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8010556:	ee63 8a04 	vmul.f32	s17, s6, s8
 801055a:	ee28 aa24 	vmul.f32	s20, s16, s9
 801055e:	ee60 9a04 	vmul.f32	s19, s0, s8
 8010562:	ee28 8a04 	vmul.f32	s16, s16, s8
 8010566:	ee20 0a24 	vmul.f32	s0, s0, s9
 801056a:	ee63 3a84 	vmul.f32	s7, s7, s8
 801056e:	ee39 4a68 	vsub.f32	s8, s18, s17
 8010572:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8010576:	ee14 aa10 	vmov	sl, s8
 801057a:	ee30 0a48 	vsub.f32	s0, s0, s16
 801057e:	ee63 4a24 	vmul.f32	s9, s6, s9
 8010582:	ed44 9a02 	vstr	s19, [r4, #-8]
 8010586:	ee73 3ae4 	vsub.f32	s7, s7, s9
 801058a:	ed04 0a01 	vstr	s0, [r4, #-4]
 801058e:	f846 a908 	str.w	sl, [r6], #-8
 8010592:	ee35 6a46 	vsub.f32	s12, s10, s12
 8010596:	ee35 7a87 	vadd.f32	s14, s11, s14
 801059a:	edc6 3a01 	vstr	s7, [r6, #4]
 801059e:	ee76 6a86 	vadd.f32	s13, s13, s12
 80105a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105a6:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 80105aa:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 80105ae:	ee67 5a86 	vmul.f32	s11, s15, s12
 80105b2:	ee26 5a87 	vmul.f32	s10, s13, s14
 80105b6:	ee72 2a62 	vsub.f32	s5, s4, s5
 80105ba:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80105be:	ee72 2ae1 	vsub.f32	s5, s5, s3
 80105c2:	ee75 5a25 	vadd.f32	s11, s10, s11
 80105c6:	ee62 0a86 	vmul.f32	s1, s5, s12
 80105ca:	ee66 6a86 	vmul.f32	s13, s13, s12
 80105ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80105d2:	ee21 6a06 	vmul.f32	s12, s2, s12
 80105d6:	ee62 2a87 	vmul.f32	s5, s5, s14
 80105da:	ee21 1a07 	vmul.f32	s2, s2, s14
 80105de:	ee15 aa90 	vmov	sl, s11
 80105e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80105e6:	f840 ab08 	str.w	sl, [r0], #8
 80105ea:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80105ee:	ee76 2a22 	vadd.f32	s5, s12, s5
 80105f2:	f1b9 0901 	subs.w	r9, r9, #1
 80105f6:	ed40 7a01 	vstr	s15, [r0, #-4]
 80105fa:	f105 0508 	add.w	r5, r5, #8
 80105fe:	ed83 1a02 	vstr	s2, [r3, #8]
 8010602:	edc3 2a01 	vstr	s5, [r3, #4]
 8010606:	f108 0808 	add.w	r8, r8, #8
 801060a:	f1a2 0208 	sub.w	r2, r2, #8
 801060e:	f10c 0c10 	add.w	ip, ip, #16
 8010612:	f104 0408 	add.w	r4, r4, #8
 8010616:	f10e 0e18 	add.w	lr, lr, #24
 801061a:	f1a3 0308 	sub.w	r3, r3, #8
 801061e:	f47f aefc 	bne.w	801041a <arm_cfft_radix8by4_f32+0x13e>
 8010622:	9908      	ldr	r1, [sp, #32]
 8010624:	9802      	ldr	r0, [sp, #8]
 8010626:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 801062a:	00cb      	lsls	r3, r1, #3
 801062c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8010630:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8010634:	9102      	str	r1, [sp, #8]
 8010636:	9904      	ldr	r1, [sp, #16]
 8010638:	4419      	add	r1, r3
 801063a:	9104      	str	r1, [sp, #16]
 801063c:	9905      	ldr	r1, [sp, #20]
 801063e:	4419      	add	r1, r3
 8010640:	9105      	str	r1, [sp, #20]
 8010642:	9907      	ldr	r1, [sp, #28]
 8010644:	449b      	add	fp, r3
 8010646:	4419      	add	r1, r3
 8010648:	449a      	add	sl, r3
 801064a:	9b06      	ldr	r3, [sp, #24]
 801064c:	9107      	str	r1, [sp, #28]
 801064e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010652:	9306      	str	r3, [sp, #24]
 8010654:	9a04      	ldr	r2, [sp, #16]
 8010656:	9807      	ldr	r0, [sp, #28]
 8010658:	edd2 3a00 	vldr	s7, [r2]
 801065c:	ed90 4a00 	vldr	s8, [r0]
 8010660:	eddb 7a00 	vldr	s15, [fp]
 8010664:	ed9a 3a00 	vldr	s6, [sl]
 8010668:	edd2 4a01 	vldr	s9, [r2, #4]
 801066c:	ed90 7a01 	vldr	s14, [r0, #4]
 8010670:	ed9b 2a01 	vldr	s4, [fp, #4]
 8010674:	edda 5a01 	vldr	s11, [sl, #4]
 8010678:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801067c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801067e:	ee73 6a84 	vadd.f32	s13, s7, s8
 8010682:	ee34 6a87 	vadd.f32	s12, s9, s14
 8010686:	ee36 5aa7 	vadd.f32	s10, s13, s15
 801068a:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801068e:	ee33 5a05 	vadd.f32	s10, s6, s10
 8010692:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8010696:	ed82 5a00 	vstr	s10, [r2]
 801069a:	ed9b 5a01 	vldr	s10, [fp, #4]
 801069e:	edda 4a01 	vldr	s9, [sl, #4]
 80106a2:	ee36 5a05 	vadd.f32	s10, s12, s10
 80106a6:	ee72 3a04 	vadd.f32	s7, s4, s8
 80106aa:	ee35 5a24 	vadd.f32	s10, s10, s9
 80106ae:	ee77 4a67 	vsub.f32	s9, s14, s15
 80106b2:	ed82 5a01 	vstr	s10, [r2, #4]
 80106b6:	9a05      	ldr	r2, [sp, #20]
 80106b8:	ee34 5a83 	vadd.f32	s10, s9, s6
 80106bc:	edd2 1a00 	vldr	s3, [r2]
 80106c0:	edd2 2a01 	vldr	s5, [r2, #4]
 80106c4:	9a02      	ldr	r2, [sp, #8]
 80106c6:	ee73 3ae5 	vsub.f32	s7, s7, s11
 80106ca:	ee36 6a42 	vsub.f32	s12, s12, s4
 80106ce:	ee63 4aa1 	vmul.f32	s9, s7, s3
 80106d2:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80106d6:	ee65 2a22 	vmul.f32	s5, s10, s5
 80106da:	ee25 5a21 	vmul.f32	s10, s10, s3
 80106de:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80106e2:	ee35 5a63 	vsub.f32	s10, s10, s7
 80106e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80106ea:	edcb 2a00 	vstr	s5, [fp]
 80106ee:	ed8b 5a01 	vstr	s10, [fp, #4]
 80106f2:	edd2 3a01 	vldr	s7, [r2, #4]
 80106f6:	ed92 5a00 	vldr	s10, [r2]
 80106fa:	9a06      	ldr	r2, [sp, #24]
 80106fc:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8010700:	ee36 6a65 	vsub.f32	s12, s12, s11
 8010704:	ee66 4a85 	vmul.f32	s9, s13, s10
 8010708:	ee26 5a05 	vmul.f32	s10, s12, s10
 801070c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8010710:	ee26 6a23 	vmul.f32	s12, s12, s7
 8010714:	ee75 6a66 	vsub.f32	s13, s10, s13
 8010718:	ee34 6a86 	vadd.f32	s12, s9, s12
 801071c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8010720:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010724:	edc0 6a01 	vstr	s13, [r0, #4]
 8010728:	ed80 6a00 	vstr	s12, [r0]
 801072c:	ed92 6a01 	vldr	s12, [r2, #4]
 8010730:	9803      	ldr	r0, [sp, #12]
 8010732:	ee77 7a43 	vsub.f32	s15, s14, s6
 8010736:	ee75 5a84 	vadd.f32	s11, s11, s8
 801073a:	ed92 7a00 	vldr	s14, [r2]
 801073e:	ee65 6a87 	vmul.f32	s13, s11, s14
 8010742:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010746:	ee65 5a86 	vmul.f32	s11, s11, s12
 801074a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801074e:	ee77 5a65 	vsub.f32	s11, s14, s11
 8010752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010756:	edca 5a01 	vstr	s11, [sl, #4]
 801075a:	edca 7a00 	vstr	s15, [sl]
 801075e:	6872      	ldr	r2, [r6, #4]
 8010760:	4621      	mov	r1, r4
 8010762:	2304      	movs	r3, #4
 8010764:	f000 fcac 	bl	80110c0 <arm_radix8_butterfly_f32>
 8010768:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801076a:	6872      	ldr	r2, [r6, #4]
 801076c:	4621      	mov	r1, r4
 801076e:	2304      	movs	r3, #4
 8010770:	f000 fca6 	bl	80110c0 <arm_radix8_butterfly_f32>
 8010774:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010776:	6872      	ldr	r2, [r6, #4]
 8010778:	4621      	mov	r1, r4
 801077a:	2304      	movs	r3, #4
 801077c:	f000 fca0 	bl	80110c0 <arm_radix8_butterfly_f32>
 8010780:	9801      	ldr	r0, [sp, #4]
 8010782:	6872      	ldr	r2, [r6, #4]
 8010784:	4621      	mov	r1, r4
 8010786:	2304      	movs	r3, #4
 8010788:	b00f      	add	sp, #60	@ 0x3c
 801078a:	ecbd 8b0a 	vpop	{d8-d12}
 801078e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010792:	f000 bc95 	b.w	80110c0 <arm_radix8_butterfly_f32>
 8010796:	bf00      	nop

08010798 <arm_cfft_f32>:
 8010798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801079c:	2a01      	cmp	r2, #1
 801079e:	4606      	mov	r6, r0
 80107a0:	4617      	mov	r7, r2
 80107a2:	460c      	mov	r4, r1
 80107a4:	4698      	mov	r8, r3
 80107a6:	8805      	ldrh	r5, [r0, #0]
 80107a8:	d054      	beq.n	8010854 <arm_cfft_f32+0xbc>
 80107aa:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80107ae:	d04c      	beq.n	801084a <arm_cfft_f32+0xb2>
 80107b0:	d916      	bls.n	80107e0 <arm_cfft_f32+0x48>
 80107b2:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 80107b6:	d01a      	beq.n	80107ee <arm_cfft_f32+0x56>
 80107b8:	d95c      	bls.n	8010874 <arm_cfft_f32+0xdc>
 80107ba:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 80107be:	d044      	beq.n	801084a <arm_cfft_f32+0xb2>
 80107c0:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80107c4:	d105      	bne.n	80107d2 <arm_cfft_f32+0x3a>
 80107c6:	4620      	mov	r0, r4
 80107c8:	4629      	mov	r1, r5
 80107ca:	6872      	ldr	r2, [r6, #4]
 80107cc:	2301      	movs	r3, #1
 80107ce:	f000 fc77 	bl	80110c0 <arm_radix8_butterfly_f32>
 80107d2:	f1b8 0f00 	cmp.w	r8, #0
 80107d6:	d111      	bne.n	80107fc <arm_cfft_f32+0x64>
 80107d8:	2f01      	cmp	r7, #1
 80107da:	d016      	beq.n	801080a <arm_cfft_f32+0x72>
 80107dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107e0:	2d20      	cmp	r5, #32
 80107e2:	d032      	beq.n	801084a <arm_cfft_f32+0xb2>
 80107e4:	d94a      	bls.n	801087c <arm_cfft_f32+0xe4>
 80107e6:	2d40      	cmp	r5, #64	@ 0x40
 80107e8:	d0ed      	beq.n	80107c6 <arm_cfft_f32+0x2e>
 80107ea:	2d80      	cmp	r5, #128	@ 0x80
 80107ec:	d1f1      	bne.n	80107d2 <arm_cfft_f32+0x3a>
 80107ee:	4630      	mov	r0, r6
 80107f0:	4621      	mov	r1, r4
 80107f2:	f7ff fca1 	bl	8010138 <arm_cfft_radix8by2_f32>
 80107f6:	f1b8 0f00 	cmp.w	r8, #0
 80107fa:	d0ed      	beq.n	80107d8 <arm_cfft_f32+0x40>
 80107fc:	4620      	mov	r0, r4
 80107fe:	89b1      	ldrh	r1, [r6, #12]
 8010800:	68b2      	ldr	r2, [r6, #8]
 8010802:	f7ef fced 	bl	80001e0 <arm_bitreversal_32>
 8010806:	2f01      	cmp	r7, #1
 8010808:	d1e8      	bne.n	80107dc <arm_cfft_f32+0x44>
 801080a:	ee07 5a90 	vmov	s15, r5
 801080e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010812:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010816:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 801081a:	2d00      	cmp	r5, #0
 801081c:	d0de      	beq.n	80107dc <arm_cfft_f32+0x44>
 801081e:	f104 0108 	add.w	r1, r4, #8
 8010822:	2300      	movs	r3, #0
 8010824:	3301      	adds	r3, #1
 8010826:	429d      	cmp	r5, r3
 8010828:	f101 0108 	add.w	r1, r1, #8
 801082c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8010830:	ed51 7a03 	vldr	s15, [r1, #-12]
 8010834:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010838:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801083c:	ed01 7a04 	vstr	s14, [r1, #-16]
 8010840:	ed41 7a03 	vstr	s15, [r1, #-12]
 8010844:	d1ee      	bne.n	8010824 <arm_cfft_f32+0x8c>
 8010846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801084a:	4630      	mov	r0, r6
 801084c:	4621      	mov	r1, r4
 801084e:	f7ff fd45 	bl	80102dc <arm_cfft_radix8by4_f32>
 8010852:	e7be      	b.n	80107d2 <arm_cfft_f32+0x3a>
 8010854:	b1ad      	cbz	r5, 8010882 <arm_cfft_f32+0xea>
 8010856:	f101 030c 	add.w	r3, r1, #12
 801085a:	2200      	movs	r2, #0
 801085c:	ed53 7a02 	vldr	s15, [r3, #-8]
 8010860:	3201      	adds	r2, #1
 8010862:	eef1 7a67 	vneg.f32	s15, s15
 8010866:	4295      	cmp	r5, r2
 8010868:	ed43 7a02 	vstr	s15, [r3, #-8]
 801086c:	f103 0308 	add.w	r3, r3, #8
 8010870:	d1f4      	bne.n	801085c <arm_cfft_f32+0xc4>
 8010872:	e79a      	b.n	80107aa <arm_cfft_f32+0x12>
 8010874:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8010878:	d0a5      	beq.n	80107c6 <arm_cfft_f32+0x2e>
 801087a:	e7aa      	b.n	80107d2 <arm_cfft_f32+0x3a>
 801087c:	2d10      	cmp	r5, #16
 801087e:	d0b6      	beq.n	80107ee <arm_cfft_f32+0x56>
 8010880:	e7a7      	b.n	80107d2 <arm_cfft_f32+0x3a>
 8010882:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8010886:	d894      	bhi.n	80107b2 <arm_cfft_f32+0x1a>
 8010888:	e7aa      	b.n	80107e0 <arm_cfft_f32+0x48>
 801088a:	bf00      	nop

0801088c <arm_fir_init_f32>:
 801088c:	b570      	push	{r4, r5, r6, lr}
 801088e:	9c04      	ldr	r4, [sp, #16]
 8010890:	6082      	str	r2, [r0, #8]
 8010892:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8010896:	3c01      	subs	r4, #1
 8010898:	4605      	mov	r5, r0
 801089a:	440c      	add	r4, r1
 801089c:	8001      	strh	r1, [r0, #0]
 801089e:	461e      	mov	r6, r3
 80108a0:	00a2      	lsls	r2, r4, #2
 80108a2:	4618      	mov	r0, r3
 80108a4:	2100      	movs	r1, #0
 80108a6:	f000 ff4b 	bl	8011740 <memset>
 80108aa:	606e      	str	r6, [r5, #4]
 80108ac:	bd70      	pop	{r4, r5, r6, pc}
 80108ae:	bf00      	nop

080108b0 <arm_fir_f32>:
 80108b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108b4:	ed2d 8b10 	vpush	{d8-d15}
 80108b8:	b089      	sub	sp, #36	@ 0x24
 80108ba:	4605      	mov	r5, r0
 80108bc:	9003      	str	r0, [sp, #12]
 80108be:	8800      	ldrh	r0, [r0, #0]
 80108c0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80108c4:	9304      	str	r3, [sp, #16]
 80108c6:	461e      	mov	r6, r3
 80108c8:	f100 4380 	add.w	r3, r0, #1073741824	@ 0x40000000
 80108cc:	3b01      	subs	r3, #1
 80108ce:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 80108d2:	08f3      	lsrs	r3, r6, #3
 80108d4:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80108d8:	9001      	str	r0, [sp, #4]
 80108da:	4625      	mov	r5, r4
 80108dc:	9400      	str	r4, [sp, #0]
 80108de:	9302      	str	r3, [sp, #8]
 80108e0:	f000 81ee 	beq.w	8010cc0 <arm_fir_f32+0x410>
 80108e4:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 80108e8:	469e      	mov	lr, r3
 80108ea:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80108ee:	1f1e      	subs	r6, r3, #4
 80108f0:	4604      	mov	r4, r0
 80108f2:	9605      	str	r6, [sp, #20]
 80108f4:	eb08 0003 	add.w	r0, r8, r3
 80108f8:	f004 0a07 	and.w	sl, r4, #7
 80108fc:	4613      	mov	r3, r2
 80108fe:	f10c 0420 	add.w	r4, ip, #32
 8010902:	f8cd c018 	str.w	ip, [sp, #24]
 8010906:	4684      	mov	ip, r0
 8010908:	4648      	mov	r0, r9
 801090a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801090e:	9107      	str	r1, [sp, #28]
 8010910:	f105 0720 	add.w	r7, r5, #32
 8010914:	f101 0620 	add.w	r6, r1, #32
 8010918:	f102 0520 	add.w	r5, r2, #32
 801091c:	4652      	mov	r2, sl
 801091e:	469a      	mov	sl, r3
 8010920:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8010924:	f847 3c20 	str.w	r3, [r7, #-32]
 8010928:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 801092c:	f847 3c1c 	str.w	r3, [r7, #-28]
 8010930:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8010934:	f847 3c18 	str.w	r3, [r7, #-24]
 8010938:	f856 3c14 	ldr.w	r3, [r6, #-20]
 801093c:	f847 3c14 	str.w	r3, [r7, #-20]
 8010940:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8010944:	f847 3c10 	str.w	r3, [r7, #-16]
 8010948:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 801094c:	f847 3c0c 	str.w	r3, [r7, #-12]
 8010950:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8010954:	f847 3c08 	str.w	r3, [r7, #-8]
 8010958:	eddf 3af1 	vldr	s7, [pc, #964]	@ 8010d20 <arm_fir_f32+0x470>
 801095c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010960:	f847 3c04 	str.w	r3, [r7, #-4]
 8010964:	ed14 3a08 	vldr	s6, [r4, #-32]	@ 0xffffffe0
 8010968:	ed54 2a07 	vldr	s5, [r4, #-28]	@ 0xffffffe4
 801096c:	ed14 2a06 	vldr	s4, [r4, #-24]	@ 0xffffffe8
 8010970:	ed54 1a05 	vldr	s3, [r4, #-20]	@ 0xffffffec
 8010974:	ed14 1a04 	vldr	s2, [r4, #-16]
 8010978:	ed54 0a03 	vldr	s1, [r4, #-12]
 801097c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8010980:	1f21      	subs	r1, r4, #4
 8010982:	eef0 8a63 	vmov.f32	s17, s7
 8010986:	eef0 9a63 	vmov.f32	s19, s7
 801098a:	eef0 aa63 	vmov.f32	s21, s7
 801098e:	eef0 ba63 	vmov.f32	s23, s7
 8010992:	eeb0 ca63 	vmov.f32	s24, s7
 8010996:	eef0 ca63 	vmov.f32	s25, s7
 801099a:	eeb0 da63 	vmov.f32	s26, s7
 801099e:	2800      	cmp	r0, #0
 80109a0:	f000 81e8 	beq.w	8010d74 <arm_fir_f32+0x4c4>
 80109a4:	f108 0120 	add.w	r1, r8, #32
 80109a8:	f104 031c 	add.w	r3, r4, #28
 80109ac:	4683      	mov	fp, r0
 80109ae:	ed13 8a08 	vldr	s16, [r3, #-32]	@ 0xffffffe0
 80109b2:	ed11 4a08 	vldr	s8, [r1, #-32]	@ 0xffffffe0
 80109b6:	ed51 4a07 	vldr	s9, [r1, #-28]	@ 0xffffffe4
 80109ba:	ed11 5a06 	vldr	s10, [r1, #-24]	@ 0xffffffe8
 80109be:	ed51 5a05 	vldr	s11, [r1, #-20]	@ 0xffffffec
 80109c2:	ed11 6a04 	vldr	s12, [r1, #-16]
 80109c6:	ed51 6a03 	vldr	s13, [r1, #-12]
 80109ca:	ed11 7a02 	vldr	s14, [r1, #-8]
 80109ce:	ed51 7a01 	vldr	s15, [r1, #-4]
 80109d2:	ee23 fa04 	vmul.f32	s30, s6, s8
 80109d6:	ee62 ea84 	vmul.f32	s29, s5, s8
 80109da:	ed13 3a07 	vldr	s6, [r3, #-28]	@ 0xffffffe4
 80109de:	ee22 ea04 	vmul.f32	s28, s4, s8
 80109e2:	ee61 da84 	vmul.f32	s27, s3, s8
 80109e6:	ee21 ba04 	vmul.f32	s22, s2, s8
 80109ea:	ee20 aa84 	vmul.f32	s20, s1, s8
 80109ee:	ee20 9a04 	vmul.f32	s18, s0, s8
 80109f2:	ee28 4a04 	vmul.f32	s8, s16, s8
 80109f6:	ee62 fa24 	vmul.f32	s31, s4, s9
 80109fa:	ee3c ca0e 	vadd.f32	s24, s24, s28
 80109fe:	ee7b baad 	vadd.f32	s23, s23, s27
 8010a02:	ee21 eaa4 	vmul.f32	s28, s3, s9
 8010a06:	ee61 da24 	vmul.f32	s27, s2, s9
 8010a0a:	ee7a aa8b 	vadd.f32	s21, s21, s22
 8010a0e:	ee79 9a8a 	vadd.f32	s19, s19, s20
 8010a12:	ee20 baa4 	vmul.f32	s22, s1, s9
 8010a16:	ee20 aa24 	vmul.f32	s20, s0, s9
 8010a1a:	ee3d da0f 	vadd.f32	s26, s26, s30
 8010a1e:	ee7c caae 	vadd.f32	s25, s25, s29
 8010a22:	ee22 faa4 	vmul.f32	s30, s5, s9
 8010a26:	ee78 8a89 	vadd.f32	s17, s17, s18
 8010a2a:	ed53 2a06 	vldr	s5, [r3, #-24]	@ 0xffffffe8
 8010a2e:	ee28 9a24 	vmul.f32	s18, s16, s9
 8010a32:	ee73 3a84 	vadd.f32	s7, s7, s8
 8010a36:	ee63 4a24 	vmul.f32	s9, s6, s9
 8010a3a:	ee22 4a05 	vmul.f32	s8, s4, s10
 8010a3e:	ee61 ea05 	vmul.f32	s29, s2, s10
 8010a42:	ed13 2a05 	vldr	s4, [r3, #-20]	@ 0xffffffec
 8010a46:	ee3d da0f 	vadd.f32	s26, s26, s30
 8010a4a:	ee7c caaf 	vadd.f32	s25, s25, s31
 8010a4e:	ee20 fa85 	vmul.f32	s30, s1, s10
 8010a52:	ee61 fa85 	vmul.f32	s31, s3, s10
 8010a56:	ee3c ea0e 	vadd.f32	s28, s24, s28
 8010a5a:	ee7b daad 	vadd.f32	s27, s23, s27
 8010a5e:	ee3a ba8b 	vadd.f32	s22, s21, s22
 8010a62:	ee60 ba05 	vmul.f32	s23, s0, s10
 8010a66:	ee68 aa05 	vmul.f32	s21, s16, s10
 8010a6a:	ee39 aa8a 	vadd.f32	s20, s19, s20
 8010a6e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8010a72:	ee73 3aa4 	vadd.f32	s7, s7, s9
 8010a76:	ee63 4a05 	vmul.f32	s9, s6, s10
 8010a7a:	ee22 5a85 	vmul.f32	s10, s5, s10
 8010a7e:	ee21 9a25 	vmul.f32	s18, s2, s11
 8010a82:	ee20 ca25 	vmul.f32	s24, s0, s11
 8010a86:	ee3d da04 	vadd.f32	s26, s26, s8
 8010a8a:	ee7c caaf 	vadd.f32	s25, s25, s31
 8010a8e:	ee21 4aa5 	vmul.f32	s8, s3, s11
 8010a92:	ee3e ea2e 	vadd.f32	s28, s28, s29
 8010a96:	ed53 1a04 	vldr	s3, [r3, #-16]
 8010a9a:	ee60 eaa5 	vmul.f32	s29, s1, s11
 8010a9e:	ee7d da8f 	vadd.f32	s27, s27, s30
 8010aa2:	ee3b ba2b 	vadd.f32	s22, s22, s23
 8010aa6:	ee3a aa2a 	vadd.f32	s20, s20, s21
 8010aaa:	ee68 ba25 	vmul.f32	s23, s16, s11
 8010aae:	ee63 aa25 	vmul.f32	s21, s6, s11
 8010ab2:	ee78 8aa4 	vadd.f32	s17, s17, s9
 8010ab6:	ee73 3a85 	vadd.f32	s7, s7, s10
 8010aba:	ee22 5aa5 	vmul.f32	s10, s5, s11
 8010abe:	ee62 5a25 	vmul.f32	s11, s4, s11
 8010ac2:	ee61 4a06 	vmul.f32	s9, s2, s12
 8010ac6:	ee60 9a86 	vmul.f32	s19, s1, s12
 8010aca:	ee60 fa06 	vmul.f32	s31, s0, s12
 8010ace:	ed13 1a03 	vldr	s2, [r3, #-12]
 8010ad2:	ee23 fa06 	vmul.f32	s30, s6, s12
 8010ad6:	ee3d da04 	vadd.f32	s26, s26, s8
 8010ada:	ee7c ca89 	vadd.f32	s25, s25, s18
 8010ade:	ee3e ea2e 	vadd.f32	s28, s28, s29
 8010ae2:	ee28 9a06 	vmul.f32	s18, s16, s12
 8010ae6:	ee7d da8c 	vadd.f32	s27, s27, s24
 8010aea:	ee3b ba2b 	vadd.f32	s22, s22, s23
 8010aee:	ee22 ca86 	vmul.f32	s24, s5, s12
 8010af2:	ee3a aa2a 	vadd.f32	s20, s20, s21
 8010af6:	ee78 8a85 	vadd.f32	s17, s17, s10
 8010afa:	ee73 3aa5 	vadd.f32	s7, s7, s11
 8010afe:	ee62 5a06 	vmul.f32	s11, s4, s12
 8010b02:	ee21 6a86 	vmul.f32	s12, s3, s12
 8010b06:	ee20 4a26 	vmul.f32	s8, s0, s13
 8010b0a:	ee63 ea26 	vmul.f32	s29, s6, s13
 8010b0e:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8010b12:	ee22 5a26 	vmul.f32	s10, s4, s13
 8010b16:	ee3d da24 	vadd.f32	s26, s26, s9
 8010b1a:	ee7c caa9 	vadd.f32	s25, s25, s19
 8010b1e:	ee60 4aa6 	vmul.f32	s9, s1, s13
 8010b22:	ee3e ea2f 	vadd.f32	s28, s28, s31
 8010b26:	ed53 0a02 	vldr	s1, [r3, #-8]
 8010b2a:	ee68 fa26 	vmul.f32	s31, s16, s13
 8010b2e:	ee7d da89 	vadd.f32	s27, s27, s18
 8010b32:	ee3b ba0f 	vadd.f32	s22, s22, s30
 8010b36:	ee78 8aa5 	vadd.f32	s17, s17, s11
 8010b3a:	ee22 faa6 	vmul.f32	s30, s5, s13
 8010b3e:	ee73 3a86 	vadd.f32	s7, s7, s12
 8010b42:	ee21 6aa6 	vmul.f32	s12, s3, s13
 8010b46:	ee61 6a26 	vmul.f32	s13, s2, s13
 8010b4a:	ee60 aa07 	vmul.f32	s21, s0, s14
 8010b4e:	ee28 ca07 	vmul.f32	s24, s16, s14
 8010b52:	ee63 ba07 	vmul.f32	s23, s6, s14
 8010b56:	ee7a 9a05 	vadd.f32	s19, s20, s10
 8010b5a:	ee78 8a86 	vadd.f32	s17, s17, s12
 8010b5e:	ee3d da24 	vadd.f32	s26, s26, s9
 8010b62:	ee7c ca84 	vadd.f32	s25, s25, s8
 8010b66:	ee7d daae 	vadd.f32	s27, s27, s29
 8010b6a:	ee22 9a07 	vmul.f32	s18, s4, s14
 8010b6e:	ee62 ea87 	vmul.f32	s29, s5, s14
 8010b72:	ee61 5a87 	vmul.f32	s11, s3, s14
 8010b76:	ee73 3aa6 	vadd.f32	s7, s7, s13
 8010b7a:	ed13 0a01 	vldr	s0, [r3, #-4]
 8010b7e:	ee61 6a07 	vmul.f32	s13, s2, s14
 8010b82:	ee3e ea2f 	vadd.f32	s28, s28, s31
 8010b86:	ee3b ba0f 	vadd.f32	s22, s22, s30
 8010b8a:	ee20 7a87 	vmul.f32	s14, s1, s14
 8010b8e:	ee68 4a27 	vmul.f32	s9, s16, s15
 8010b92:	ee3d da2a 	vadd.f32	s26, s26, s21
 8010b96:	ee7c ca8c 	vadd.f32	s25, s25, s24
 8010b9a:	ee23 8a27 	vmul.f32	s16, s6, s15
 8010b9e:	ee3e ea2b 	vadd.f32	s28, s28, s23
 8010ba2:	ee22 4aa7 	vmul.f32	s8, s5, s15
 8010ba6:	ee22 aa27 	vmul.f32	s20, s4, s15
 8010baa:	ee21 5aa7 	vmul.f32	s10, s3, s15
 8010bae:	ee21 6a27 	vmul.f32	s12, s2, s15
 8010bb2:	ee78 6aa6 	vadd.f32	s13, s17, s13
 8010bb6:	ee7d daae 	vadd.f32	s27, s27, s29
 8010bba:	ee60 8aa7 	vmul.f32	s17, s1, s15
 8010bbe:	ee3b ba09 	vadd.f32	s22, s22, s18
 8010bc2:	ee79 9aa5 	vadd.f32	s19, s19, s11
 8010bc6:	ee73 3a87 	vadd.f32	s7, s7, s14
 8010bca:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010bce:	f1bb 0b01 	subs.w	fp, fp, #1
 8010bd2:	f101 0120 	add.w	r1, r1, #32
 8010bd6:	ee3d da24 	vadd.f32	s26, s26, s9
 8010bda:	ee7c ca88 	vadd.f32	s25, s25, s16
 8010bde:	ee3e ca04 	vadd.f32	s24, s28, s8
 8010be2:	ee7d ba8a 	vadd.f32	s23, s27, s20
 8010be6:	ee7b aa05 	vadd.f32	s21, s22, s10
 8010bea:	ee79 9a86 	vadd.f32	s19, s19, s12
 8010bee:	ee76 8aa8 	vadd.f32	s17, s13, s17
 8010bf2:	ee73 3aa7 	vadd.f32	s7, s7, s15
 8010bf6:	f103 0320 	add.w	r3, r3, #32
 8010bfa:	f47f aed8 	bne.w	80109ae <arm_fir_f32+0xfe>
 8010bfe:	eb09 0104 	add.w	r1, r9, r4
 8010c02:	46e3      	mov	fp, ip
 8010c04:	b3a2      	cbz	r2, 8010c70 <arm_fir_f32+0x3c0>
 8010c06:	4613      	mov	r3, r2
 8010c08:	ecbb 6a01 	vldmia	fp!, {s12}
 8010c0c:	ecf1 7a01 	vldmia	r1!, {s15}
 8010c10:	ee23 3a06 	vmul.f32	s6, s6, s12
 8010c14:	ee22 4a86 	vmul.f32	s8, s5, s12
 8010c18:	ee62 4a06 	vmul.f32	s9, s4, s12
 8010c1c:	ee21 5a86 	vmul.f32	s10, s3, s12
 8010c20:	ee61 5a06 	vmul.f32	s11, s2, s12
 8010c24:	ee60 6a86 	vmul.f32	s13, s1, s12
 8010c28:	ee20 7a06 	vmul.f32	s14, s0, s12
 8010c2c:	ee27 6a86 	vmul.f32	s12, s15, s12
 8010c30:	3b01      	subs	r3, #1
 8010c32:	ee3d da03 	vadd.f32	s26, s26, s6
 8010c36:	ee7c ca84 	vadd.f32	s25, s25, s8
 8010c3a:	eeb0 3a62 	vmov.f32	s6, s5
 8010c3e:	ee3c ca24 	vadd.f32	s24, s24, s9
 8010c42:	eef0 2a42 	vmov.f32	s5, s4
 8010c46:	ee7b ba85 	vadd.f32	s23, s23, s10
 8010c4a:	eeb0 2a61 	vmov.f32	s4, s3
 8010c4e:	ee7a aaa5 	vadd.f32	s21, s21, s11
 8010c52:	eef0 1a41 	vmov.f32	s3, s2
 8010c56:	ee79 9aa6 	vadd.f32	s19, s19, s13
 8010c5a:	eeb0 1a60 	vmov.f32	s2, s1
 8010c5e:	ee78 8a87 	vadd.f32	s17, s17, s14
 8010c62:	eef0 0a40 	vmov.f32	s1, s0
 8010c66:	ee73 3a86 	vadd.f32	s7, s7, s12
 8010c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8010c6e:	d1cb      	bne.n	8010c08 <arm_fir_f32+0x358>
 8010c70:	f1be 0e01 	subs.w	lr, lr, #1
 8010c74:	ed05 da08 	vstr	s26, [r5, #-32]	@ 0xffffffe0
 8010c78:	ed45 ca07 	vstr	s25, [r5, #-28]	@ 0xffffffe4
 8010c7c:	ed05 ca06 	vstr	s24, [r5, #-24]	@ 0xffffffe8
 8010c80:	ed45 ba05 	vstr	s23, [r5, #-20]	@ 0xffffffec
 8010c84:	ed45 aa04 	vstr	s21, [r5, #-16]
 8010c88:	ed45 9a03 	vstr	s19, [r5, #-12]
 8010c8c:	ed45 8a02 	vstr	s17, [r5, #-8]
 8010c90:	ed45 3a01 	vstr	s7, [r5, #-4]
 8010c94:	f107 0720 	add.w	r7, r7, #32
 8010c98:	f106 0620 	add.w	r6, r6, #32
 8010c9c:	f104 0420 	add.w	r4, r4, #32
 8010ca0:	f105 0520 	add.w	r5, r5, #32
 8010ca4:	f47f ae3c 	bne.w	8010920 <arm_fir_f32+0x70>
 8010ca8:	9b02      	ldr	r3, [sp, #8]
 8010caa:	9800      	ldr	r0, [sp, #0]
 8010cac:	f8dd c018 	ldr.w	ip, [sp, #24]
 8010cb0:	9907      	ldr	r1, [sp, #28]
 8010cb2:	015b      	lsls	r3, r3, #5
 8010cb4:	4652      	mov	r2, sl
 8010cb6:	4418      	add	r0, r3
 8010cb8:	9000      	str	r0, [sp, #0]
 8010cba:	4419      	add	r1, r3
 8010cbc:	449c      	add	ip, r3
 8010cbe:	441a      	add	r2, r3
 8010cc0:	9b04      	ldr	r3, [sp, #16]
 8010cc2:	f013 0e07 	ands.w	lr, r3, #7
 8010cc6:	d01f      	beq.n	8010d08 <arm_fir_f32+0x458>
 8010cc8:	9f00      	ldr	r7, [sp, #0]
 8010cca:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010cce:	4676      	mov	r6, lr
 8010cd0:	4665      	mov	r5, ip
 8010cd2:	f851 3b04 	ldr.w	r3, [r1], #4
 8010cd6:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8010d20 <arm_fir_f32+0x470>
 8010cda:	f847 3b04 	str.w	r3, [r7], #4
 8010cde:	4644      	mov	r4, r8
 8010ce0:	464b      	mov	r3, r9
 8010ce2:	4628      	mov	r0, r5
 8010ce4:	ecb0 7a01 	vldmia	r0!, {s14}
 8010ce8:	ecf4 7a01 	vldmia	r4!, {s15}
 8010cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cf0:	3b01      	subs	r3, #1
 8010cf2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010cf6:	d1f5      	bne.n	8010ce4 <arm_fir_f32+0x434>
 8010cf8:	3e01      	subs	r6, #1
 8010cfa:	ece2 6a01 	vstmia	r2!, {s13}
 8010cfe:	f105 0504 	add.w	r5, r5, #4
 8010d02:	d1e6      	bne.n	8010cd2 <arm_fir_f32+0x422>
 8010d04:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 8010d08:	9b01      	ldr	r3, [sp, #4]
 8010d0a:	1e59      	subs	r1, r3, #1
 8010d0c:	9b03      	ldr	r3, [sp, #12]
 8010d0e:	088e      	lsrs	r6, r1, #2
 8010d10:	685c      	ldr	r4, [r3, #4]
 8010d12:	d020      	beq.n	8010d56 <arm_fir_f32+0x4a6>
 8010d14:	f104 0210 	add.w	r2, r4, #16
 8010d18:	f10c 0310 	add.w	r3, ip, #16
 8010d1c:	4630      	mov	r0, r6
 8010d1e:	e001      	b.n	8010d24 <arm_fir_f32+0x474>
 8010d20:	00000000 	.word	0x00000000
 8010d24:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8010d28:	f842 5c10 	str.w	r5, [r2, #-16]
 8010d2c:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8010d30:	f842 5c0c 	str.w	r5, [r2, #-12]
 8010d34:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8010d38:	f842 5c08 	str.w	r5, [r2, #-8]
 8010d3c:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8010d40:	f842 5c04 	str.w	r5, [r2, #-4]
 8010d44:	3801      	subs	r0, #1
 8010d46:	f103 0310 	add.w	r3, r3, #16
 8010d4a:	f102 0210 	add.w	r2, r2, #16
 8010d4e:	d1e9      	bne.n	8010d24 <arm_fir_f32+0x474>
 8010d50:	0133      	lsls	r3, r6, #4
 8010d52:	441c      	add	r4, r3
 8010d54:	449c      	add	ip, r3
 8010d56:	f011 0303 	ands.w	r3, r1, #3
 8010d5a:	d006      	beq.n	8010d6a <arm_fir_f32+0x4ba>
 8010d5c:	4622      	mov	r2, r4
 8010d5e:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010d62:	f842 1b04 	str.w	r1, [r2], #4
 8010d66:	3b01      	subs	r3, #1
 8010d68:	d1f9      	bne.n	8010d5e <arm_fir_f32+0x4ae>
 8010d6a:	b009      	add	sp, #36	@ 0x24
 8010d6c:	ecbd 8b10 	vpop	{d8-d15}
 8010d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d74:	46c3      	mov	fp, r8
 8010d76:	e745      	b.n	8010c04 <arm_fir_f32+0x354>

08010d78 <arm_cmplx_mag_f32>:
 8010d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d7c:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8010d80:	b084      	sub	sp, #16
 8010d82:	d07f      	beq.n	8010e84 <arm_cmplx_mag_f32+0x10c>
 8010d84:	2700      	movs	r7, #0
 8010d86:	f100 0420 	add.w	r4, r0, #32
 8010d8a:	f101 0510 	add.w	r5, r1, #16
 8010d8e:	4646      	mov	r6, r8
 8010d90:	e05a      	b.n	8010e48 <arm_cmplx_mag_f32+0xd0>
 8010d92:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8010d96:	eeb4 0a40 	vcmp.f32	s0, s0
 8010d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d9e:	f040 80a4 	bne.w	8010eea <arm_cmplx_mag_f32+0x172>
 8010da2:	ed05 0a04 	vstr	s0, [r5, #-16]
 8010da6:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 8010daa:	ed14 0a05 	vldr	s0, [r4, #-20]	@ 0xffffffec
 8010dae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010db2:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010db6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010dba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dc2:	f2c0 808f 	blt.w	8010ee4 <arm_cmplx_mag_f32+0x16c>
 8010dc6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8010dca:	eeb4 0a40 	vcmp.f32	s0, s0
 8010dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dd2:	f040 80af 	bne.w	8010f34 <arm_cmplx_mag_f32+0x1bc>
 8010dd6:	ed05 0a03 	vstr	s0, [r5, #-12]
 8010dda:	ed54 7a04 	vldr	s15, [r4, #-16]
 8010dde:	ed14 0a03 	vldr	s0, [r4, #-12]
 8010de2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010de6:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010dea:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010dee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010df6:	db72      	blt.n	8010ede <arm_cmplx_mag_f32+0x166>
 8010df8:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8010dfc:	eeb4 0a40 	vcmp.f32	s0, s0
 8010e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e04:	f040 808c 	bne.w	8010f20 <arm_cmplx_mag_f32+0x1a8>
 8010e08:	ed05 0a02 	vstr	s0, [r5, #-8]
 8010e0c:	ed54 7a02 	vldr	s15, [r4, #-8]
 8010e10:	ed14 0a01 	vldr	s0, [r4, #-4]
 8010e14:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010e18:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010e1c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010e20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e28:	db20      	blt.n	8010e6c <arm_cmplx_mag_f32+0xf4>
 8010e2a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8010e2e:	eeb4 0a40 	vcmp.f32	s0, s0
 8010e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e36:	d169      	bne.n	8010f0c <arm_cmplx_mag_f32+0x194>
 8010e38:	3e01      	subs	r6, #1
 8010e3a:	ed05 0a01 	vstr	s0, [r5, #-4]
 8010e3e:	f104 0420 	add.w	r4, r4, #32
 8010e42:	f105 0510 	add.w	r5, r5, #16
 8010e46:	d019      	beq.n	8010e7c <arm_cmplx_mag_f32+0x104>
 8010e48:	ed54 7a08 	vldr	s15, [r4, #-32]	@ 0xffffffe0
 8010e4c:	ed14 0a07 	vldr	s0, [r4, #-28]	@ 0xffffffe4
 8010e50:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010e54:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010e58:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010e5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e64:	da95      	bge.n	8010d92 <arm_cmplx_mag_f32+0x1a>
 8010e66:	f845 7c10 	str.w	r7, [r5, #-16]
 8010e6a:	e79c      	b.n	8010da6 <arm_cmplx_mag_f32+0x2e>
 8010e6c:	3e01      	subs	r6, #1
 8010e6e:	f845 7c04 	str.w	r7, [r5, #-4]
 8010e72:	f104 0420 	add.w	r4, r4, #32
 8010e76:	f105 0510 	add.w	r5, r5, #16
 8010e7a:	d1e5      	bne.n	8010e48 <arm_cmplx_mag_f32+0xd0>
 8010e7c:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8010e80:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8010e84:	f012 0503 	ands.w	r5, r2, #3
 8010e88:	d026      	beq.n	8010ed8 <arm_cmplx_mag_f32+0x160>
 8010e8a:	2600      	movs	r6, #0
 8010e8c:	f100 0408 	add.w	r4, r0, #8
 8010e90:	e00c      	b.n	8010eac <arm_cmplx_mag_f32+0x134>
 8010e92:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8010e96:	eeb4 0a40 	vcmp.f32	s0, s0
 8010e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e9e:	d12e      	bne.n	8010efe <arm_cmplx_mag_f32+0x186>
 8010ea0:	3d01      	subs	r5, #1
 8010ea2:	ed01 0a01 	vstr	s0, [r1, #-4]
 8010ea6:	f104 0408 	add.w	r4, r4, #8
 8010eaa:	d015      	beq.n	8010ed8 <arm_cmplx_mag_f32+0x160>
 8010eac:	ed54 7a02 	vldr	s15, [r4, #-8]
 8010eb0:	ed14 0a01 	vldr	s0, [r4, #-4]
 8010eb4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010eb8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010ebc:	3104      	adds	r1, #4
 8010ebe:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010ec2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eca:	dae2      	bge.n	8010e92 <arm_cmplx_mag_f32+0x11a>
 8010ecc:	3d01      	subs	r5, #1
 8010ece:	f841 6c04 	str.w	r6, [r1, #-4]
 8010ed2:	f104 0408 	add.w	r4, r4, #8
 8010ed6:	d1e9      	bne.n	8010eac <arm_cmplx_mag_f32+0x134>
 8010ed8:	b004      	add	sp, #16
 8010eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ede:	f845 7c08 	str.w	r7, [r5, #-8]
 8010ee2:	e793      	b.n	8010e0c <arm_cmplx_mag_f32+0x94>
 8010ee4:	f845 7c0c 	str.w	r7, [r5, #-12]
 8010ee8:	e777      	b.n	8010dda <arm_cmplx_mag_f32+0x62>
 8010eea:	eeb0 0a67 	vmov.f32	s0, s15
 8010eee:	9203      	str	r2, [sp, #12]
 8010ef0:	9102      	str	r1, [sp, #8]
 8010ef2:	9001      	str	r0, [sp, #4]
 8010ef4:	f001 f898 	bl	8012028 <sqrtf>
 8010ef8:	a801      	add	r0, sp, #4
 8010efa:	c807      	ldmia	r0, {r0, r1, r2}
 8010efc:	e751      	b.n	8010da2 <arm_cmplx_mag_f32+0x2a>
 8010efe:	eeb0 0a67 	vmov.f32	s0, s15
 8010f02:	9101      	str	r1, [sp, #4]
 8010f04:	f001 f890 	bl	8012028 <sqrtf>
 8010f08:	9901      	ldr	r1, [sp, #4]
 8010f0a:	e7c9      	b.n	8010ea0 <arm_cmplx_mag_f32+0x128>
 8010f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8010f10:	9203      	str	r2, [sp, #12]
 8010f12:	9102      	str	r1, [sp, #8]
 8010f14:	9001      	str	r0, [sp, #4]
 8010f16:	f001 f887 	bl	8012028 <sqrtf>
 8010f1a:	a801      	add	r0, sp, #4
 8010f1c:	c807      	ldmia	r0, {r0, r1, r2}
 8010f1e:	e78b      	b.n	8010e38 <arm_cmplx_mag_f32+0xc0>
 8010f20:	eeb0 0a67 	vmov.f32	s0, s15
 8010f24:	9203      	str	r2, [sp, #12]
 8010f26:	9102      	str	r1, [sp, #8]
 8010f28:	9001      	str	r0, [sp, #4]
 8010f2a:	f001 f87d 	bl	8012028 <sqrtf>
 8010f2e:	a801      	add	r0, sp, #4
 8010f30:	c807      	ldmia	r0, {r0, r1, r2}
 8010f32:	e769      	b.n	8010e08 <arm_cmplx_mag_f32+0x90>
 8010f34:	eeb0 0a67 	vmov.f32	s0, s15
 8010f38:	9203      	str	r2, [sp, #12]
 8010f3a:	9102      	str	r1, [sp, #8]
 8010f3c:	9001      	str	r0, [sp, #4]
 8010f3e:	f001 f873 	bl	8012028 <sqrtf>
 8010f42:	a801      	add	r0, sp, #4
 8010f44:	c807      	ldmia	r0, {r0, r1, r2}
 8010f46:	e746      	b.n	8010dd6 <arm_cmplx_mag_f32+0x5e>

08010f48 <arm_cos_f32>:
 8010f48:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8010fbc <arm_cos_f32+0x74>
 8010f4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010f50:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8010f54:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010f58:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f60:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010f64:	d504      	bpl.n	8010f70 <arm_cos_f32+0x28>
 8010f66:	ee17 3a90 	vmov	r3, s15
 8010f6a:	3b01      	subs	r3, #1
 8010f6c:	ee07 3a90 	vmov	s15, r3
 8010f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f74:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8010fc0 <arm_cos_f32+0x78>
 8010f78:	4a12      	ldr	r2, [pc, #72]	@ (8010fc4 <arm_cos_f32+0x7c>)
 8010f7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010f7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010f82:	ee20 0a26 	vmul.f32	s0, s0, s13
 8010f86:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8010f8a:	ee17 3a90 	vmov	r3, s15
 8010f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f92:	ee07 3a90 	vmov	s15, r3
 8010f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f9a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8010f9e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010fa2:	edd1 6a01 	vldr	s13, [r1, #4]
 8010fa6:	ed91 0a00 	vldr	s0, [r1]
 8010faa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010fae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010fb2:	ee27 0a00 	vmul.f32	s0, s14, s0
 8010fb6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010fba:	4770      	bx	lr
 8010fbc:	3e22f983 	.word	0x3e22f983
 8010fc0:	44000000 	.word	0x44000000
 8010fc4:	08030840 	.word	0x08030840

08010fc8 <arm_scale_f32>:
 8010fc8:	b470      	push	{r4, r5, r6}
 8010fca:	0896      	lsrs	r6, r2, #2
 8010fcc:	d025      	beq.n	801101a <arm_scale_f32+0x52>
 8010fce:	f100 0410 	add.w	r4, r0, #16
 8010fd2:	f101 0310 	add.w	r3, r1, #16
 8010fd6:	4635      	mov	r5, r6
 8010fd8:	ed14 6a04 	vldr	s12, [r4, #-16]
 8010fdc:	ed54 6a03 	vldr	s13, [r4, #-12]
 8010fe0:	ed14 7a02 	vldr	s14, [r4, #-8]
 8010fe4:	ed54 7a01 	vldr	s15, [r4, #-4]
 8010fe8:	ee26 6a00 	vmul.f32	s12, s12, s0
 8010fec:	ee66 6a80 	vmul.f32	s13, s13, s0
 8010ff0:	ee27 7a00 	vmul.f32	s14, s14, s0
 8010ff4:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010ff8:	3d01      	subs	r5, #1
 8010ffa:	ed03 6a04 	vstr	s12, [r3, #-16]
 8010ffe:	ed43 6a03 	vstr	s13, [r3, #-12]
 8011002:	ed03 7a02 	vstr	s14, [r3, #-8]
 8011006:	ed43 7a01 	vstr	s15, [r3, #-4]
 801100a:	f104 0410 	add.w	r4, r4, #16
 801100e:	f103 0310 	add.w	r3, r3, #16
 8011012:	d1e1      	bne.n	8010fd8 <arm_scale_f32+0x10>
 8011014:	0136      	lsls	r6, r6, #4
 8011016:	4430      	add	r0, r6
 8011018:	4431      	add	r1, r6
 801101a:	f012 0203 	ands.w	r2, r2, #3
 801101e:	d007      	beq.n	8011030 <arm_scale_f32+0x68>
 8011020:	ecf0 7a01 	vldmia	r0!, {s15}
 8011024:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011028:	3a01      	subs	r2, #1
 801102a:	ece1 7a01 	vstmia	r1!, {s15}
 801102e:	d1f7      	bne.n	8011020 <arm_scale_f32+0x58>
 8011030:	bc70      	pop	{r4, r5, r6}
 8011032:	4770      	bx	lr

08011034 <arm_add_f32>:
 8011034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011036:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 801103a:	d033      	beq.n	80110a4 <arm_add_f32+0x70>
 801103c:	f100 0610 	add.w	r6, r0, #16
 8011040:	f101 0510 	add.w	r5, r1, #16
 8011044:	f102 0410 	add.w	r4, r2, #16
 8011048:	4677      	mov	r7, lr
 801104a:	ed16 6a03 	vldr	s12, [r6, #-12]
 801104e:	ed15 4a03 	vldr	s8, [r5, #-12]
 8011052:	ed56 6a02 	vldr	s13, [r6, #-8]
 8011056:	ed55 4a02 	vldr	s9, [r5, #-8]
 801105a:	ed16 7a01 	vldr	s14, [r6, #-4]
 801105e:	ed15 5a01 	vldr	s10, [r5, #-4]
 8011062:	ed56 7a04 	vldr	s15, [r6, #-16]
 8011066:	ed55 5a04 	vldr	s11, [r5, #-16]
 801106a:	ee36 6a04 	vadd.f32	s12, s12, s8
 801106e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8011072:	ee37 7a05 	vadd.f32	s14, s14, s10
 8011076:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801107a:	3f01      	subs	r7, #1
 801107c:	ed04 6a03 	vstr	s12, [r4, #-12]
 8011080:	ed44 6a02 	vstr	s13, [r4, #-8]
 8011084:	ed04 7a01 	vstr	s14, [r4, #-4]
 8011088:	ed44 7a04 	vstr	s15, [r4, #-16]
 801108c:	f106 0610 	add.w	r6, r6, #16
 8011090:	f105 0510 	add.w	r5, r5, #16
 8011094:	f104 0410 	add.w	r4, r4, #16
 8011098:	d1d7      	bne.n	801104a <arm_add_f32+0x16>
 801109a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 801109e:	4420      	add	r0, r4
 80110a0:	4421      	add	r1, r4
 80110a2:	4422      	add	r2, r4
 80110a4:	f013 0303 	ands.w	r3, r3, #3
 80110a8:	d009      	beq.n	80110be <arm_add_f32+0x8a>
 80110aa:	ecf0 7a01 	vldmia	r0!, {s15}
 80110ae:	ecb1 7a01 	vldmia	r1!, {s14}
 80110b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80110b6:	3b01      	subs	r3, #1
 80110b8:	ece2 7a01 	vstmia	r2!, {s15}
 80110bc:	d1f5      	bne.n	80110aa <arm_add_f32+0x76>
 80110be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080110c0 <arm_radix8_butterfly_f32>:
 80110c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110c4:	ed2d 8b10 	vpush	{d8-d15}
 80110c8:	b09d      	sub	sp, #116	@ 0x74
 80110ca:	461c      	mov	r4, r3
 80110cc:	ed9f bac8 	vldr	s22, [pc, #800]	@ 80113f0 <arm_radix8_butterfly_f32+0x330>
 80110d0:	921a      	str	r2, [sp, #104]	@ 0x68
 80110d2:	1d03      	adds	r3, r0, #4
 80110d4:	4682      	mov	sl, r0
 80110d6:	4689      	mov	r9, r1
 80110d8:	468b      	mov	fp, r1
 80110da:	931b      	str	r3, [sp, #108]	@ 0x6c
 80110dc:	9400      	str	r4, [sp, #0]
 80110de:	469e      	mov	lr, r3
 80110e0:	ea4f 03db 	mov.w	r3, fp, lsr #3
 80110e4:	005a      	lsls	r2, r3, #1
 80110e6:	18d6      	adds	r6, r2, r3
 80110e8:	18f5      	adds	r5, r6, r3
 80110ea:	9203      	str	r2, [sp, #12]
 80110ec:	195a      	adds	r2, r3, r5
 80110ee:	18d0      	adds	r0, r2, r3
 80110f0:	00df      	lsls	r7, r3, #3
 80110f2:	1819      	adds	r1, r3, r0
 80110f4:	463c      	mov	r4, r7
 80110f6:	9701      	str	r7, [sp, #4]
 80110f8:	4457      	add	r7, sl
 80110fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80110fc:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8011100:	011b      	lsls	r3, r3, #4
 8011102:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8011106:	eb07 0c04 	add.w	ip, r7, r4
 801110a:	9c00      	ldr	r4, [sp, #0]
 801110c:	9302      	str	r3, [sp, #8]
 801110e:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8011112:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8011116:	3204      	adds	r2, #4
 8011118:	3104      	adds	r1, #4
 801111a:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 801111e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011122:	f04f 0800 	mov.w	r8, #0
 8011126:	eddc 7a00 	vldr	s15, [ip]
 801112a:	edd7 6a00 	vldr	s13, [r7]
 801112e:	edd6 3a00 	vldr	s7, [r6]
 8011132:	ed5e aa01 	vldr	s21, [lr, #-4]
 8011136:	edd5 4a00 	vldr	s9, [r5]
 801113a:	ed90 2a00 	vldr	s4, [r0]
 801113e:	ed12 7a01 	vldr	s14, [r2, #-4]
 8011142:	ed51 0a01 	vldr	s1, [r1, #-4]
 8011146:	ee77 8a82 	vadd.f32	s17, s15, s4
 801114a:	ee33 4aa0 	vadd.f32	s8, s7, s1
 801114e:	ee76 1a87 	vadd.f32	s3, s13, s14
 8011152:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8011156:	ee31 6a84 	vadd.f32	s12, s3, s8
 801115a:	ee33 5a28 	vadd.f32	s10, s6, s17
 801115e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8011162:	ee75 6a06 	vadd.f32	s13, s10, s12
 8011166:	ee35 5a46 	vsub.f32	s10, s10, s12
 801116a:	ed4e 6a01 	vstr	s13, [lr, #-4]
 801116e:	ed85 5a00 	vstr	s10, [r5]
 8011172:	ed96 1a01 	vldr	s2, [r6, #4]
 8011176:	edd7 5a01 	vldr	s11, [r7, #4]
 801117a:	ed92 aa00 	vldr	s20, [r2]
 801117e:	ed91 6a00 	vldr	s12, [r1]
 8011182:	ed9e 9a00 	vldr	s18, [lr]
 8011186:	ed95 5a01 	vldr	s10, [r5, #4]
 801118a:	eddc 6a01 	vldr	s13, [ip, #4]
 801118e:	edd0 9a01 	vldr	s19, [r0, #4]
 8011192:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8011196:	ee71 2a46 	vsub.f32	s5, s2, s12
 801119a:	ee75 3aca 	vsub.f32	s7, s11, s20
 801119e:	ee37 0a60 	vsub.f32	s0, s14, s1
 80111a2:	ee33 8aa2 	vadd.f32	s16, s7, s5
 80111a6:	ee37 7a20 	vadd.f32	s14, s14, s1
 80111aa:	ee73 2ae2 	vsub.f32	s5, s7, s5
 80111ae:	ee37 2ac2 	vsub.f32	s4, s15, s4
 80111b2:	ee79 3a05 	vadd.f32	s7, s18, s10
 80111b6:	ee60 0a0b 	vmul.f32	s1, s0, s22
 80111ba:	ee39 5a45 	vsub.f32	s10, s18, s10
 80111be:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 80111c2:	ee36 9aa9 	vadd.f32	s18, s13, s19
 80111c6:	ee75 5a8a 	vadd.f32	s11, s11, s20
 80111ca:	ee31 6a06 	vadd.f32	s12, s2, s12
 80111ce:	ee76 6ae9 	vsub.f32	s13, s13, s19
 80111d2:	ee28 8a0b 	vmul.f32	s16, s16, s22
 80111d6:	ee62 2a8b 	vmul.f32	s5, s5, s22
 80111da:	ee67 7a0b 	vmul.f32	s15, s14, s22
 80111de:	ee33 3a68 	vsub.f32	s6, s6, s17
 80111e2:	ee36 0a88 	vadd.f32	s0, s13, s16
 80111e6:	ee75 8a86 	vadd.f32	s17, s11, s12
 80111ea:	ee36 7ac8 	vsub.f32	s14, s13, s16
 80111ee:	ee71 1ac4 	vsub.f32	s3, s3, s8
 80111f2:	ee75 6a62 	vsub.f32	s13, s10, s5
 80111f6:	ee33 4ac9 	vsub.f32	s8, s7, s18
 80111fa:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80111fe:	ee33 1a89 	vadd.f32	s2, s7, s18
 8011202:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8011206:	ee74 3aa0 	vadd.f32	s7, s9, s1
 801120a:	ee75 4a22 	vadd.f32	s9, s10, s5
 801120e:	ee32 5a27 	vadd.f32	s10, s4, s15
 8011212:	ee72 7a67 	vsub.f32	s15, s4, s15
 8011216:	ee33 8a06 	vadd.f32	s16, s6, s12
 801121a:	ee75 2a87 	vadd.f32	s5, s11, s14
 801121e:	ee31 9a28 	vadd.f32	s18, s2, s17
 8011222:	ee33 6a46 	vsub.f32	s12, s6, s12
 8011226:	ee74 0a61 	vsub.f32	s1, s8, s3
 801122a:	ee33 2a80 	vadd.f32	s4, s7, s0
 801122e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8011232:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8011236:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801123a:	ee31 1a68 	vsub.f32	s2, s2, s17
 801123e:	ee34 4a21 	vadd.f32	s8, s8, s3
 8011242:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8011246:	ee74 4a85 	vadd.f32	s9, s9, s10
 801124a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801124e:	44d8      	add	r8, fp
 8011250:	45c1      	cmp	r9, r8
 8011252:	ed8e 9a00 	vstr	s18, [lr]
 8011256:	ed85 1a01 	vstr	s2, [r5, #4]
 801125a:	449e      	add	lr, r3
 801125c:	ed8c 8a00 	vstr	s16, [ip]
 8011260:	441d      	add	r5, r3
 8011262:	ed80 6a00 	vstr	s12, [r0]
 8011266:	edcc 0a01 	vstr	s1, [ip, #4]
 801126a:	ed80 4a01 	vstr	s8, [r0, #4]
 801126e:	449c      	add	ip, r3
 8011270:	ed87 2a00 	vstr	s4, [r7]
 8011274:	4418      	add	r0, r3
 8011276:	ed41 3a01 	vstr	s7, [r1, #-4]
 801127a:	ed42 2a01 	vstr	s5, [r2, #-4]
 801127e:	ed86 7a00 	vstr	s14, [r6]
 8011282:	ed87 3a01 	vstr	s6, [r7, #4]
 8011286:	edc1 4a00 	vstr	s9, [r1]
 801128a:	441f      	add	r7, r3
 801128c:	edc2 5a00 	vstr	s11, [r2]
 8011290:	4419      	add	r1, r3
 8011292:	edc6 6a01 	vstr	s13, [r6, #4]
 8011296:	441a      	add	r2, r3
 8011298:	441e      	add	r6, r3
 801129a:	f63f af44 	bhi.w	8011126 <arm_radix8_butterfly_f32+0x66>
 801129e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80112a0:	2907      	cmp	r1, #7
 80112a2:	4620      	mov	r0, r4
 80112a4:	f240 81e9 	bls.w	801167a <arm_radix8_butterfly_f32+0x5ba>
 80112a8:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 80112ac:	193e      	adds	r6, r7, r4
 80112ae:	1935      	adds	r5, r6, r4
 80112b0:	9c03      	ldr	r4, [sp, #12]
 80112b2:	9000      	str	r0, [sp, #0]
 80112b4:	4622      	mov	r2, r4
 80112b6:	3201      	adds	r2, #1
 80112b8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80112bc:	9900      	ldr	r1, [sp, #0]
 80112be:	1828      	adds	r0, r5, r0
 80112c0:	eb00 0e01 	add.w	lr, r0, r1
 80112c4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80112c6:	440a      	add	r2, r1
 80112c8:	eb04 0c01 	add.w	ip, r4, r1
 80112cc:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 80112d0:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 80112d4:	9a00      	ldr	r2, [sp, #0]
 80112d6:	940f      	str	r4, [sp, #60]	@ 0x3c
 80112d8:	00ed      	lsls	r5, r5, #3
 80112da:	9511      	str	r5, [sp, #68]	@ 0x44
 80112dc:	00d5      	lsls	r5, r2, #3
 80112de:	950d      	str	r5, [sp, #52]	@ 0x34
 80112e0:	9d01      	ldr	r5, [sp, #4]
 80112e2:	3508      	adds	r5, #8
 80112e4:	9516      	str	r5, [sp, #88]	@ 0x58
 80112e6:	9d02      	ldr	r5, [sp, #8]
 80112e8:	3508      	adds	r5, #8
 80112ea:	0114      	lsls	r4, r2, #4
 80112ec:	9517      	str	r5, [sp, #92]	@ 0x5c
 80112ee:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80112f0:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80112f2:	940e      	str	r4, [sp, #56]	@ 0x38
 80112f4:	00c0      	lsls	r0, r0, #3
 80112f6:	9010      	str	r0, [sp, #64]	@ 0x40
 80112f8:	18aa      	adds	r2, r5, r2
 80112fa:	9207      	str	r2, [sp, #28]
 80112fc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80112fe:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8011300:	18aa      	adds	r2, r5, r2
 8011302:	9208      	str	r2, [sp, #32]
 8011304:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011306:	18aa      	adds	r2, r5, r2
 8011308:	9209      	str	r2, [sp, #36]	@ 0x24
 801130a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801130e:	f10e 0204 	add.w	r2, lr, #4
 8011312:	920a      	str	r2, [sp, #40]	@ 0x28
 8011314:	00c9      	lsls	r1, r1, #3
 8011316:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011318:	310c      	adds	r1, #12
 801131a:	00f6      	lsls	r6, r6, #3
 801131c:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8011320:	9114      	str	r1, [sp, #80]	@ 0x50
 8011322:	18a9      	adds	r1, r5, r2
 8011324:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011326:	9612      	str	r6, [sp, #72]	@ 0x48
 8011328:	00ff      	lsls	r7, r7, #3
 801132a:	19ae      	adds	r6, r5, r6
 801132c:	3008      	adds	r0, #8
 801132e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8011332:	9606      	str	r6, [sp, #24]
 8011334:	9019      	str	r0, [sp, #100]	@ 0x64
 8011336:	18aa      	adds	r2, r5, r2
 8011338:	0164      	lsls	r4, r4, #5
 801133a:	19ee      	adds	r6, r5, r7
 801133c:	f10c 000c 	add.w	r0, ip, #12
 8011340:	9713      	str	r7, [sp, #76]	@ 0x4c
 8011342:	9604      	str	r6, [sp, #16]
 8011344:	9015      	str	r0, [sp, #84]	@ 0x54
 8011346:	9103      	str	r1, [sp, #12]
 8011348:	9205      	str	r2, [sp, #20]
 801134a:	f104 0208 	add.w	r2, r4, #8
 801134e:	9218      	str	r2, [sp, #96]	@ 0x60
 8011350:	f04f 0801 	mov.w	r8, #1
 8011354:	2200      	movs	r2, #0
 8011356:	f102 0108 	add.w	r1, r2, #8
 801135a:	460f      	mov	r7, r1
 801135c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801135e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011360:	188e      	adds	r6, r1, r2
 8011362:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8011364:	188d      	adds	r5, r1, r2
 8011366:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8011368:	188c      	adds	r4, r1, r2
 801136a:	9919      	ldr	r1, [sp, #100]	@ 0x64
 801136c:	1888      	adds	r0, r1, r2
 801136e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8011370:	eb01 0c02 	add.w	ip, r1, r2
 8011374:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8011376:	440a      	add	r2, r1
 8011378:	9903      	ldr	r1, [sp, #12]
 801137a:	edd1 fa00 	vldr	s31, [r1]
 801137e:	9905      	ldr	r1, [sp, #20]
 8011380:	ed91 fa00 	vldr	s30, [r1]
 8011384:	9904      	ldr	r1, [sp, #16]
 8011386:	edd1 ea00 	vldr	s29, [r1]
 801138a:	9906      	ldr	r1, [sp, #24]
 801138c:	ed91 ea00 	vldr	s28, [r1]
 8011390:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011392:	edd1 da00 	vldr	s27, [r1]
 8011396:	9908      	ldr	r1, [sp, #32]
 8011398:	ed91 da00 	vldr	s26, [r1]
 801139c:	9907      	ldr	r1, [sp, #28]
 801139e:	edd1 ca00 	vldr	s25, [r1]
 80113a2:	9903      	ldr	r1, [sp, #12]
 80113a4:	ed91 ca01 	vldr	s24, [r1, #4]
 80113a8:	9905      	ldr	r1, [sp, #20]
 80113aa:	edd1 ba01 	vldr	s23, [r1, #4]
 80113ae:	9904      	ldr	r1, [sp, #16]
 80113b0:	edd1 aa01 	vldr	s21, [r1, #4]
 80113b4:	9906      	ldr	r1, [sp, #24]
 80113b6:	ed91 aa01 	vldr	s20, [r1, #4]
 80113ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80113bc:	edd1 7a01 	vldr	s15, [r1, #4]
 80113c0:	9908      	ldr	r1, [sp, #32]
 80113c2:	edcd 7a00 	vstr	s15, [sp]
 80113c6:	edd1 7a01 	vldr	s15, [r1, #4]
 80113ca:	9907      	ldr	r1, [sp, #28]
 80113cc:	edcd 7a01 	vstr	s15, [sp, #4]
 80113d0:	edd1 7a01 	vldr	s15, [r1, #4]
 80113d4:	eb0a 0e07 	add.w	lr, sl, r7
 80113d8:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80113da:	edcd 7a02 	vstr	s15, [sp, #8]
 80113de:	eb0c 010a 	add.w	r1, ip, sl
 80113e2:	4456      	add	r6, sl
 80113e4:	4455      	add	r5, sl
 80113e6:	4454      	add	r4, sl
 80113e8:	4450      	add	r0, sl
 80113ea:	4452      	add	r2, sl
 80113ec:	46c4      	mov	ip, r8
 80113ee:	e001      	b.n	80113f4 <arm_radix8_butterfly_f32+0x334>
 80113f0:	3f3504f3 	.word	0x3f3504f3
 80113f4:	ed96 5a00 	vldr	s10, [r6]
 80113f8:	ed52 9a01 	vldr	s19, [r2, #-4]
 80113fc:	ed11 6a01 	vldr	s12, [r1, #-4]
 8011400:	edd0 7a00 	vldr	s15, [r0]
 8011404:	ed17 7a01 	vldr	s14, [r7, #-4]
 8011408:	edde 3a00 	vldr	s7, [lr]
 801140c:	ed94 3a00 	vldr	s6, [r4]
 8011410:	ed95 2a00 	vldr	s4, [r5]
 8011414:	ed9e 0a01 	vldr	s0, [lr, #4]
 8011418:	ee33 8a85 	vadd.f32	s16, s7, s10
 801141c:	ee32 1a06 	vadd.f32	s2, s4, s12
 8011420:	ee33 4a29 	vadd.f32	s8, s6, s19
 8011424:	ee77 4a87 	vadd.f32	s9, s15, s14
 8011428:	ee78 1a04 	vadd.f32	s3, s16, s8
 801142c:	ee71 6a24 	vadd.f32	s13, s2, s9
 8011430:	ee32 2a46 	vsub.f32	s4, s4, s12
 8011434:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8011438:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801143c:	ed8e 6a00 	vstr	s12, [lr]
 8011440:	edd0 8a01 	vldr	s17, [r0, #4]
 8011444:	ed95 9a01 	vldr	s18, [r5, #4]
 8011448:	edd1 2a00 	vldr	s5, [r1]
 801144c:	ed97 7a00 	vldr	s14, [r7]
 8011450:	edd4 0a01 	vldr	s1, [r4, #4]
 8011454:	ed96 6a01 	vldr	s12, [r6, #4]
 8011458:	edd2 5a00 	vldr	s11, [r2]
 801145c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8011460:	ee33 3a69 	vsub.f32	s6, s6, s19
 8011464:	ee39 5a62 	vsub.f32	s10, s18, s5
 8011468:	ee78 9ac7 	vsub.f32	s19, s17, s14
 801146c:	ee38 4a44 	vsub.f32	s8, s16, s8
 8011470:	ee38 7a87 	vadd.f32	s14, s17, s14
 8011474:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8011478:	ee79 2a22 	vadd.f32	s5, s18, s5
 801147c:	ee75 8a69 	vsub.f32	s17, s10, s19
 8011480:	ee32 9a27 	vadd.f32	s18, s4, s15
 8011484:	ee35 5a29 	vadd.f32	s10, s10, s19
 8011488:	ee72 7a67 	vsub.f32	s15, s4, s15
 801148c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8011490:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8011494:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8011498:	ee32 9a08 	vadd.f32	s18, s4, s16
 801149c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80114a0:	ee32 2a48 	vsub.f32	s4, s4, s16
 80114a4:	ee71 4a64 	vsub.f32	s9, s2, s9
 80114a8:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80114ac:	ee32 1a87 	vadd.f32	s2, s5, s14
 80114b0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80114b4:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80114b8:	ee30 6a46 	vsub.f32	s12, s0, s12
 80114bc:	ee73 0a29 	vadd.f32	s1, s6, s19
 80114c0:	ee36 0a28 	vadd.f32	s0, s12, s17
 80114c4:	ee33 3a69 	vsub.f32	s6, s6, s19
 80114c8:	ee32 7a64 	vsub.f32	s14, s4, s9
 80114cc:	ee73 9aa7 	vadd.f32	s19, s7, s15
 80114d0:	ee36 6a68 	vsub.f32	s12, s12, s17
 80114d4:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80114d8:	ee75 8a85 	vadd.f32	s17, s11, s10
 80114dc:	ee74 3a22 	vadd.f32	s7, s8, s5
 80114e0:	ee35 5ac5 	vsub.f32	s10, s11, s10
 80114e4:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80114e8:	ee79 1a41 	vsub.f32	s3, s18, s2
 80114ec:	ee39 8aa8 	vadd.f32	s16, s19, s17
 80114f0:	ee76 5a43 	vsub.f32	s11, s12, s6
 80114f4:	ee74 2a62 	vsub.f32	s5, s8, s5
 80114f8:	ee72 4a24 	vadd.f32	s9, s4, s9
 80114fc:	ee30 4a60 	vsub.f32	s8, s0, s1
 8011500:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8011504:	ee30 0a20 	vadd.f32	s0, s0, s1
 8011508:	ee77 9a85 	vadd.f32	s19, s15, s10
 801150c:	ee36 6a03 	vadd.f32	s12, s12, s6
 8011510:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8011514:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8011518:	ee2e 5a26 	vmul.f32	s10, s28, s13
 801151c:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8011520:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8011524:	ee39 1a01 	vadd.f32	s2, s18, s2
 8011528:	ee6a 6a26 	vmul.f32	s13, s20, s13
 801152c:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8011530:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8011534:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8011538:	ee6f 1a84 	vmul.f32	s3, s31, s8
 801153c:	ee35 3a03 	vadd.f32	s6, s10, s6
 8011540:	ee72 6a66 	vsub.f32	s13, s4, s13
 8011544:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8011548:	ee2f 2a88 	vmul.f32	s4, s31, s16
 801154c:	ed9d 4a02 	vldr	s8, [sp, #8]
 8011550:	ed8e 1a01 	vstr	s2, [lr, #4]
 8011554:	ee77 3a63 	vsub.f32	s7, s14, s7
 8011558:	ee2c 8a08 	vmul.f32	s16, s24, s16
 801155c:	ed9d 7a01 	vldr	s14, [sp, #4]
 8011560:	ed86 3a00 	vstr	s6, [r6]
 8011564:	ee30 9a89 	vadd.f32	s18, s1, s18
 8011568:	ee32 2a05 	vadd.f32	s4, s4, s10
 801156c:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8011570:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8011574:	ee67 2a22 	vmul.f32	s5, s14, s5
 8011578:	ee64 1a00 	vmul.f32	s3, s8, s0
 801157c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8011580:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8011584:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8011588:	ee64 8a28 	vmul.f32	s17, s8, s17
 801158c:	ed9d 4a00 	vldr	s8, [sp]
 8011590:	edc6 6a01 	vstr	s13, [r6, #4]
 8011594:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8011598:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 801159c:	ee64 9a29 	vmul.f32	s19, s8, s19
 80115a0:	ee24 4a25 	vmul.f32	s8, s8, s11
 80115a4:	ee30 7a87 	vadd.f32	s14, s1, s14
 80115a8:	ee74 4a84 	vadd.f32	s9, s9, s8
 80115ac:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 80115b0:	ee2a 4a86 	vmul.f32	s8, s21, s12
 80115b4:	ee2c 0a80 	vmul.f32	s0, s25, s0
 80115b8:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 80115bc:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80115c0:	ee2e 6a86 	vmul.f32	s12, s29, s12
 80115c4:	ee75 1a21 	vadd.f32	s3, s10, s3
 80115c8:	ee30 0a68 	vsub.f32	s0, s0, s17
 80115cc:	ee75 9ae9 	vsub.f32	s19, s11, s19
 80115d0:	ee70 0a84 	vadd.f32	s1, s1, s8
 80115d4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80115d8:	44dc      	add	ip, fp
 80115da:	45e1      	cmp	r9, ip
 80115dc:	ed84 9a00 	vstr	s18, [r4]
 80115e0:	edc4 3a01 	vstr	s7, [r4, #4]
 80115e4:	449e      	add	lr, r3
 80115e6:	ed02 7a01 	vstr	s14, [r2, #-4]
 80115ea:	edc2 2a00 	vstr	s5, [r2]
 80115ee:	441e      	add	r6, r3
 80115f0:	ed85 2a00 	vstr	s4, [r5]
 80115f4:	ed85 8a01 	vstr	s16, [r5, #4]
 80115f8:	441c      	add	r4, r3
 80115fa:	ed47 1a01 	vstr	s3, [r7, #-4]
 80115fe:	ed87 0a00 	vstr	s0, [r7]
 8011602:	441a      	add	r2, r3
 8011604:	ed41 4a01 	vstr	s9, [r1, #-4]
 8011608:	edc1 9a00 	vstr	s19, [r1]
 801160c:	441d      	add	r5, r3
 801160e:	edc0 0a00 	vstr	s1, [r0]
 8011612:	441f      	add	r7, r3
 8011614:	ed80 6a01 	vstr	s12, [r0, #4]
 8011618:	4419      	add	r1, r3
 801161a:	4418      	add	r0, r3
 801161c:	f63f aeea 	bhi.w	80113f4 <arm_radix8_butterfly_f32+0x334>
 8011620:	9a03      	ldr	r2, [sp, #12]
 8011622:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011624:	440a      	add	r2, r1
 8011626:	9203      	str	r2, [sp, #12]
 8011628:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801162a:	9a05      	ldr	r2, [sp, #20]
 801162c:	440a      	add	r2, r1
 801162e:	9205      	str	r2, [sp, #20]
 8011630:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8011632:	9a04      	ldr	r2, [sp, #16]
 8011634:	440a      	add	r2, r1
 8011636:	9204      	str	r2, [sp, #16]
 8011638:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801163a:	9a06      	ldr	r2, [sp, #24]
 801163c:	440a      	add	r2, r1
 801163e:	9206      	str	r2, [sp, #24]
 8011640:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8011642:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011644:	440a      	add	r2, r1
 8011646:	9209      	str	r2, [sp, #36]	@ 0x24
 8011648:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801164a:	9a08      	ldr	r2, [sp, #32]
 801164c:	440a      	add	r2, r1
 801164e:	9208      	str	r2, [sp, #32]
 8011650:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011652:	9a07      	ldr	r2, [sp, #28]
 8011654:	440a      	add	r2, r1
 8011656:	9207      	str	r2, [sp, #28]
 8011658:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801165a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801165c:	f108 0801 	add.w	r8, r8, #1
 8011660:	3208      	adds	r2, #8
 8011662:	4588      	cmp	r8, r1
 8011664:	920a      	str	r2, [sp, #40]	@ 0x28
 8011666:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011668:	f47f ae75 	bne.w	8011356 <arm_radix8_butterfly_f32+0x296>
 801166c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8011670:	9300      	str	r3, [sp, #0]
 8011672:	46c3      	mov	fp, r8
 8011674:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 8011678:	e532      	b.n	80110e0 <arm_radix8_butterfly_f32+0x20>
 801167a:	b01d      	add	sp, #116	@ 0x74
 801167c:	ecbd 8b10 	vpop	{d8-d15}
 8011680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011684 <sniprintf>:
 8011684:	b40c      	push	{r2, r3}
 8011686:	b530      	push	{r4, r5, lr}
 8011688:	4b17      	ldr	r3, [pc, #92]	@ (80116e8 <sniprintf+0x64>)
 801168a:	1e0c      	subs	r4, r1, #0
 801168c:	681d      	ldr	r5, [r3, #0]
 801168e:	b09d      	sub	sp, #116	@ 0x74
 8011690:	da08      	bge.n	80116a4 <sniprintf+0x20>
 8011692:	238b      	movs	r3, #139	@ 0x8b
 8011694:	602b      	str	r3, [r5, #0]
 8011696:	f04f 30ff 	mov.w	r0, #4294967295
 801169a:	b01d      	add	sp, #116	@ 0x74
 801169c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80116a0:	b002      	add	sp, #8
 80116a2:	4770      	bx	lr
 80116a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80116a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80116ac:	bf14      	ite	ne
 80116ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80116b2:	4623      	moveq	r3, r4
 80116b4:	9304      	str	r3, [sp, #16]
 80116b6:	9307      	str	r3, [sp, #28]
 80116b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80116bc:	9002      	str	r0, [sp, #8]
 80116be:	9006      	str	r0, [sp, #24]
 80116c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80116c4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80116c6:	ab21      	add	r3, sp, #132	@ 0x84
 80116c8:	a902      	add	r1, sp, #8
 80116ca:	4628      	mov	r0, r5
 80116cc:	9301      	str	r3, [sp, #4]
 80116ce:	f000 f9db 	bl	8011a88 <_svfiprintf_r>
 80116d2:	1c43      	adds	r3, r0, #1
 80116d4:	bfbc      	itt	lt
 80116d6:	238b      	movlt	r3, #139	@ 0x8b
 80116d8:	602b      	strlt	r3, [r5, #0]
 80116da:	2c00      	cmp	r4, #0
 80116dc:	d0dd      	beq.n	801169a <sniprintf+0x16>
 80116de:	9b02      	ldr	r3, [sp, #8]
 80116e0:	2200      	movs	r2, #0
 80116e2:	701a      	strb	r2, [r3, #0]
 80116e4:	e7d9      	b.n	801169a <sniprintf+0x16>
 80116e6:	bf00      	nop
 80116e8:	20000030 	.word	0x20000030

080116ec <memcmp>:
 80116ec:	b510      	push	{r4, lr}
 80116ee:	3901      	subs	r1, #1
 80116f0:	4402      	add	r2, r0
 80116f2:	4290      	cmp	r0, r2
 80116f4:	d101      	bne.n	80116fa <memcmp+0xe>
 80116f6:	2000      	movs	r0, #0
 80116f8:	e005      	b.n	8011706 <memcmp+0x1a>
 80116fa:	7803      	ldrb	r3, [r0, #0]
 80116fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011700:	42a3      	cmp	r3, r4
 8011702:	d001      	beq.n	8011708 <memcmp+0x1c>
 8011704:	1b18      	subs	r0, r3, r4
 8011706:	bd10      	pop	{r4, pc}
 8011708:	3001      	adds	r0, #1
 801170a:	e7f2      	b.n	80116f2 <memcmp+0x6>

0801170c <memmove>:
 801170c:	4288      	cmp	r0, r1
 801170e:	b510      	push	{r4, lr}
 8011710:	eb01 0402 	add.w	r4, r1, r2
 8011714:	d902      	bls.n	801171c <memmove+0x10>
 8011716:	4284      	cmp	r4, r0
 8011718:	4623      	mov	r3, r4
 801171a:	d807      	bhi.n	801172c <memmove+0x20>
 801171c:	1e43      	subs	r3, r0, #1
 801171e:	42a1      	cmp	r1, r4
 8011720:	d008      	beq.n	8011734 <memmove+0x28>
 8011722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011726:	f803 2f01 	strb.w	r2, [r3, #1]!
 801172a:	e7f8      	b.n	801171e <memmove+0x12>
 801172c:	4402      	add	r2, r0
 801172e:	4601      	mov	r1, r0
 8011730:	428a      	cmp	r2, r1
 8011732:	d100      	bne.n	8011736 <memmove+0x2a>
 8011734:	bd10      	pop	{r4, pc}
 8011736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801173a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801173e:	e7f7      	b.n	8011730 <memmove+0x24>

08011740 <memset>:
 8011740:	4402      	add	r2, r0
 8011742:	4603      	mov	r3, r0
 8011744:	4293      	cmp	r3, r2
 8011746:	d100      	bne.n	801174a <memset+0xa>
 8011748:	4770      	bx	lr
 801174a:	f803 1b01 	strb.w	r1, [r3], #1
 801174e:	e7f9      	b.n	8011744 <memset+0x4>

08011750 <strchr>:
 8011750:	b2c9      	uxtb	r1, r1
 8011752:	4603      	mov	r3, r0
 8011754:	4618      	mov	r0, r3
 8011756:	f813 2b01 	ldrb.w	r2, [r3], #1
 801175a:	b112      	cbz	r2, 8011762 <strchr+0x12>
 801175c:	428a      	cmp	r2, r1
 801175e:	d1f9      	bne.n	8011754 <strchr+0x4>
 8011760:	4770      	bx	lr
 8011762:	2900      	cmp	r1, #0
 8011764:	bf18      	it	ne
 8011766:	2000      	movne	r0, #0
 8011768:	4770      	bx	lr
	...

0801176c <__errno>:
 801176c:	4b01      	ldr	r3, [pc, #4]	@ (8011774 <__errno+0x8>)
 801176e:	6818      	ldr	r0, [r3, #0]
 8011770:	4770      	bx	lr
 8011772:	bf00      	nop
 8011774:	20000030 	.word	0x20000030

08011778 <__libc_init_array>:
 8011778:	b570      	push	{r4, r5, r6, lr}
 801177a:	4d0d      	ldr	r5, [pc, #52]	@ (80117b0 <__libc_init_array+0x38>)
 801177c:	4c0d      	ldr	r4, [pc, #52]	@ (80117b4 <__libc_init_array+0x3c>)
 801177e:	1b64      	subs	r4, r4, r5
 8011780:	10a4      	asrs	r4, r4, #2
 8011782:	2600      	movs	r6, #0
 8011784:	42a6      	cmp	r6, r4
 8011786:	d109      	bne.n	801179c <__libc_init_array+0x24>
 8011788:	4d0b      	ldr	r5, [pc, #44]	@ (80117b8 <__libc_init_array+0x40>)
 801178a:	4c0c      	ldr	r4, [pc, #48]	@ (80117bc <__libc_init_array+0x44>)
 801178c:	f000 fc6e 	bl	801206c <_init>
 8011790:	1b64      	subs	r4, r4, r5
 8011792:	10a4      	asrs	r4, r4, #2
 8011794:	2600      	movs	r6, #0
 8011796:	42a6      	cmp	r6, r4
 8011798:	d105      	bne.n	80117a6 <__libc_init_array+0x2e>
 801179a:	bd70      	pop	{r4, r5, r6, pc}
 801179c:	f855 3b04 	ldr.w	r3, [r5], #4
 80117a0:	4798      	blx	r3
 80117a2:	3601      	adds	r6, #1
 80117a4:	e7ee      	b.n	8011784 <__libc_init_array+0xc>
 80117a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80117aa:	4798      	blx	r3
 80117ac:	3601      	adds	r6, #1
 80117ae:	e7f2      	b.n	8011796 <__libc_init_array+0x1e>
 80117b0:	08036ad0 	.word	0x08036ad0
 80117b4:	08036ad0 	.word	0x08036ad0
 80117b8:	08036ad0 	.word	0x08036ad0
 80117bc:	08036ad4 	.word	0x08036ad4

080117c0 <__retarget_lock_acquire_recursive>:
 80117c0:	4770      	bx	lr

080117c2 <__retarget_lock_release_recursive>:
 80117c2:	4770      	bx	lr

080117c4 <memcpy>:
 80117c4:	440a      	add	r2, r1
 80117c6:	4291      	cmp	r1, r2
 80117c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80117cc:	d100      	bne.n	80117d0 <memcpy+0xc>
 80117ce:	4770      	bx	lr
 80117d0:	b510      	push	{r4, lr}
 80117d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80117d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80117da:	4291      	cmp	r1, r2
 80117dc:	d1f9      	bne.n	80117d2 <memcpy+0xe>
 80117de:	bd10      	pop	{r4, pc}

080117e0 <_free_r>:
 80117e0:	b538      	push	{r3, r4, r5, lr}
 80117e2:	4605      	mov	r5, r0
 80117e4:	2900      	cmp	r1, #0
 80117e6:	d041      	beq.n	801186c <_free_r+0x8c>
 80117e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80117ec:	1f0c      	subs	r4, r1, #4
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	bfb8      	it	lt
 80117f2:	18e4      	addlt	r4, r4, r3
 80117f4:	f000 f8e0 	bl	80119b8 <__malloc_lock>
 80117f8:	4a1d      	ldr	r2, [pc, #116]	@ (8011870 <_free_r+0x90>)
 80117fa:	6813      	ldr	r3, [r2, #0]
 80117fc:	b933      	cbnz	r3, 801180c <_free_r+0x2c>
 80117fe:	6063      	str	r3, [r4, #4]
 8011800:	6014      	str	r4, [r2, #0]
 8011802:	4628      	mov	r0, r5
 8011804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011808:	f000 b8dc 	b.w	80119c4 <__malloc_unlock>
 801180c:	42a3      	cmp	r3, r4
 801180e:	d908      	bls.n	8011822 <_free_r+0x42>
 8011810:	6820      	ldr	r0, [r4, #0]
 8011812:	1821      	adds	r1, r4, r0
 8011814:	428b      	cmp	r3, r1
 8011816:	bf01      	itttt	eq
 8011818:	6819      	ldreq	r1, [r3, #0]
 801181a:	685b      	ldreq	r3, [r3, #4]
 801181c:	1809      	addeq	r1, r1, r0
 801181e:	6021      	streq	r1, [r4, #0]
 8011820:	e7ed      	b.n	80117fe <_free_r+0x1e>
 8011822:	461a      	mov	r2, r3
 8011824:	685b      	ldr	r3, [r3, #4]
 8011826:	b10b      	cbz	r3, 801182c <_free_r+0x4c>
 8011828:	42a3      	cmp	r3, r4
 801182a:	d9fa      	bls.n	8011822 <_free_r+0x42>
 801182c:	6811      	ldr	r1, [r2, #0]
 801182e:	1850      	adds	r0, r2, r1
 8011830:	42a0      	cmp	r0, r4
 8011832:	d10b      	bne.n	801184c <_free_r+0x6c>
 8011834:	6820      	ldr	r0, [r4, #0]
 8011836:	4401      	add	r1, r0
 8011838:	1850      	adds	r0, r2, r1
 801183a:	4283      	cmp	r3, r0
 801183c:	6011      	str	r1, [r2, #0]
 801183e:	d1e0      	bne.n	8011802 <_free_r+0x22>
 8011840:	6818      	ldr	r0, [r3, #0]
 8011842:	685b      	ldr	r3, [r3, #4]
 8011844:	6053      	str	r3, [r2, #4]
 8011846:	4408      	add	r0, r1
 8011848:	6010      	str	r0, [r2, #0]
 801184a:	e7da      	b.n	8011802 <_free_r+0x22>
 801184c:	d902      	bls.n	8011854 <_free_r+0x74>
 801184e:	230c      	movs	r3, #12
 8011850:	602b      	str	r3, [r5, #0]
 8011852:	e7d6      	b.n	8011802 <_free_r+0x22>
 8011854:	6820      	ldr	r0, [r4, #0]
 8011856:	1821      	adds	r1, r4, r0
 8011858:	428b      	cmp	r3, r1
 801185a:	bf04      	itt	eq
 801185c:	6819      	ldreq	r1, [r3, #0]
 801185e:	685b      	ldreq	r3, [r3, #4]
 8011860:	6063      	str	r3, [r4, #4]
 8011862:	bf04      	itt	eq
 8011864:	1809      	addeq	r1, r1, r0
 8011866:	6021      	streq	r1, [r4, #0]
 8011868:	6054      	str	r4, [r2, #4]
 801186a:	e7ca      	b.n	8011802 <_free_r+0x22>
 801186c:	bd38      	pop	{r3, r4, r5, pc}
 801186e:	bf00      	nop
 8011870:	2000ec1c 	.word	0x2000ec1c

08011874 <sbrk_aligned>:
 8011874:	b570      	push	{r4, r5, r6, lr}
 8011876:	4e0f      	ldr	r6, [pc, #60]	@ (80118b4 <sbrk_aligned+0x40>)
 8011878:	460c      	mov	r4, r1
 801187a:	6831      	ldr	r1, [r6, #0]
 801187c:	4605      	mov	r5, r0
 801187e:	b911      	cbnz	r1, 8011886 <sbrk_aligned+0x12>
 8011880:	f000 fb8c 	bl	8011f9c <_sbrk_r>
 8011884:	6030      	str	r0, [r6, #0]
 8011886:	4621      	mov	r1, r4
 8011888:	4628      	mov	r0, r5
 801188a:	f000 fb87 	bl	8011f9c <_sbrk_r>
 801188e:	1c43      	adds	r3, r0, #1
 8011890:	d103      	bne.n	801189a <sbrk_aligned+0x26>
 8011892:	f04f 34ff 	mov.w	r4, #4294967295
 8011896:	4620      	mov	r0, r4
 8011898:	bd70      	pop	{r4, r5, r6, pc}
 801189a:	1cc4      	adds	r4, r0, #3
 801189c:	f024 0403 	bic.w	r4, r4, #3
 80118a0:	42a0      	cmp	r0, r4
 80118a2:	d0f8      	beq.n	8011896 <sbrk_aligned+0x22>
 80118a4:	1a21      	subs	r1, r4, r0
 80118a6:	4628      	mov	r0, r5
 80118a8:	f000 fb78 	bl	8011f9c <_sbrk_r>
 80118ac:	3001      	adds	r0, #1
 80118ae:	d1f2      	bne.n	8011896 <sbrk_aligned+0x22>
 80118b0:	e7ef      	b.n	8011892 <sbrk_aligned+0x1e>
 80118b2:	bf00      	nop
 80118b4:	2000ec18 	.word	0x2000ec18

080118b8 <_malloc_r>:
 80118b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118bc:	1ccd      	adds	r5, r1, #3
 80118be:	f025 0503 	bic.w	r5, r5, #3
 80118c2:	3508      	adds	r5, #8
 80118c4:	2d0c      	cmp	r5, #12
 80118c6:	bf38      	it	cc
 80118c8:	250c      	movcc	r5, #12
 80118ca:	2d00      	cmp	r5, #0
 80118cc:	4606      	mov	r6, r0
 80118ce:	db01      	blt.n	80118d4 <_malloc_r+0x1c>
 80118d0:	42a9      	cmp	r1, r5
 80118d2:	d904      	bls.n	80118de <_malloc_r+0x26>
 80118d4:	230c      	movs	r3, #12
 80118d6:	6033      	str	r3, [r6, #0]
 80118d8:	2000      	movs	r0, #0
 80118da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80119b4 <_malloc_r+0xfc>
 80118e2:	f000 f869 	bl	80119b8 <__malloc_lock>
 80118e6:	f8d8 3000 	ldr.w	r3, [r8]
 80118ea:	461c      	mov	r4, r3
 80118ec:	bb44      	cbnz	r4, 8011940 <_malloc_r+0x88>
 80118ee:	4629      	mov	r1, r5
 80118f0:	4630      	mov	r0, r6
 80118f2:	f7ff ffbf 	bl	8011874 <sbrk_aligned>
 80118f6:	1c43      	adds	r3, r0, #1
 80118f8:	4604      	mov	r4, r0
 80118fa:	d158      	bne.n	80119ae <_malloc_r+0xf6>
 80118fc:	f8d8 4000 	ldr.w	r4, [r8]
 8011900:	4627      	mov	r7, r4
 8011902:	2f00      	cmp	r7, #0
 8011904:	d143      	bne.n	801198e <_malloc_r+0xd6>
 8011906:	2c00      	cmp	r4, #0
 8011908:	d04b      	beq.n	80119a2 <_malloc_r+0xea>
 801190a:	6823      	ldr	r3, [r4, #0]
 801190c:	4639      	mov	r1, r7
 801190e:	4630      	mov	r0, r6
 8011910:	eb04 0903 	add.w	r9, r4, r3
 8011914:	f000 fb42 	bl	8011f9c <_sbrk_r>
 8011918:	4581      	cmp	r9, r0
 801191a:	d142      	bne.n	80119a2 <_malloc_r+0xea>
 801191c:	6821      	ldr	r1, [r4, #0]
 801191e:	1a6d      	subs	r5, r5, r1
 8011920:	4629      	mov	r1, r5
 8011922:	4630      	mov	r0, r6
 8011924:	f7ff ffa6 	bl	8011874 <sbrk_aligned>
 8011928:	3001      	adds	r0, #1
 801192a:	d03a      	beq.n	80119a2 <_malloc_r+0xea>
 801192c:	6823      	ldr	r3, [r4, #0]
 801192e:	442b      	add	r3, r5
 8011930:	6023      	str	r3, [r4, #0]
 8011932:	f8d8 3000 	ldr.w	r3, [r8]
 8011936:	685a      	ldr	r2, [r3, #4]
 8011938:	bb62      	cbnz	r2, 8011994 <_malloc_r+0xdc>
 801193a:	f8c8 7000 	str.w	r7, [r8]
 801193e:	e00f      	b.n	8011960 <_malloc_r+0xa8>
 8011940:	6822      	ldr	r2, [r4, #0]
 8011942:	1b52      	subs	r2, r2, r5
 8011944:	d420      	bmi.n	8011988 <_malloc_r+0xd0>
 8011946:	2a0b      	cmp	r2, #11
 8011948:	d917      	bls.n	801197a <_malloc_r+0xc2>
 801194a:	1961      	adds	r1, r4, r5
 801194c:	42a3      	cmp	r3, r4
 801194e:	6025      	str	r5, [r4, #0]
 8011950:	bf18      	it	ne
 8011952:	6059      	strne	r1, [r3, #4]
 8011954:	6863      	ldr	r3, [r4, #4]
 8011956:	bf08      	it	eq
 8011958:	f8c8 1000 	streq.w	r1, [r8]
 801195c:	5162      	str	r2, [r4, r5]
 801195e:	604b      	str	r3, [r1, #4]
 8011960:	4630      	mov	r0, r6
 8011962:	f000 f82f 	bl	80119c4 <__malloc_unlock>
 8011966:	f104 000b 	add.w	r0, r4, #11
 801196a:	1d23      	adds	r3, r4, #4
 801196c:	f020 0007 	bic.w	r0, r0, #7
 8011970:	1ac2      	subs	r2, r0, r3
 8011972:	bf1c      	itt	ne
 8011974:	1a1b      	subne	r3, r3, r0
 8011976:	50a3      	strne	r3, [r4, r2]
 8011978:	e7af      	b.n	80118da <_malloc_r+0x22>
 801197a:	6862      	ldr	r2, [r4, #4]
 801197c:	42a3      	cmp	r3, r4
 801197e:	bf0c      	ite	eq
 8011980:	f8c8 2000 	streq.w	r2, [r8]
 8011984:	605a      	strne	r2, [r3, #4]
 8011986:	e7eb      	b.n	8011960 <_malloc_r+0xa8>
 8011988:	4623      	mov	r3, r4
 801198a:	6864      	ldr	r4, [r4, #4]
 801198c:	e7ae      	b.n	80118ec <_malloc_r+0x34>
 801198e:	463c      	mov	r4, r7
 8011990:	687f      	ldr	r7, [r7, #4]
 8011992:	e7b6      	b.n	8011902 <_malloc_r+0x4a>
 8011994:	461a      	mov	r2, r3
 8011996:	685b      	ldr	r3, [r3, #4]
 8011998:	42a3      	cmp	r3, r4
 801199a:	d1fb      	bne.n	8011994 <_malloc_r+0xdc>
 801199c:	2300      	movs	r3, #0
 801199e:	6053      	str	r3, [r2, #4]
 80119a0:	e7de      	b.n	8011960 <_malloc_r+0xa8>
 80119a2:	230c      	movs	r3, #12
 80119a4:	6033      	str	r3, [r6, #0]
 80119a6:	4630      	mov	r0, r6
 80119a8:	f000 f80c 	bl	80119c4 <__malloc_unlock>
 80119ac:	e794      	b.n	80118d8 <_malloc_r+0x20>
 80119ae:	6005      	str	r5, [r0, #0]
 80119b0:	e7d6      	b.n	8011960 <_malloc_r+0xa8>
 80119b2:	bf00      	nop
 80119b4:	2000ec1c 	.word	0x2000ec1c

080119b8 <__malloc_lock>:
 80119b8:	4801      	ldr	r0, [pc, #4]	@ (80119c0 <__malloc_lock+0x8>)
 80119ba:	f7ff bf01 	b.w	80117c0 <__retarget_lock_acquire_recursive>
 80119be:	bf00      	nop
 80119c0:	2000ec14 	.word	0x2000ec14

080119c4 <__malloc_unlock>:
 80119c4:	4801      	ldr	r0, [pc, #4]	@ (80119cc <__malloc_unlock+0x8>)
 80119c6:	f7ff befc 	b.w	80117c2 <__retarget_lock_release_recursive>
 80119ca:	bf00      	nop
 80119cc:	2000ec14 	.word	0x2000ec14

080119d0 <__ssputs_r>:
 80119d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119d4:	688e      	ldr	r6, [r1, #8]
 80119d6:	461f      	mov	r7, r3
 80119d8:	42be      	cmp	r6, r7
 80119da:	680b      	ldr	r3, [r1, #0]
 80119dc:	4682      	mov	sl, r0
 80119de:	460c      	mov	r4, r1
 80119e0:	4690      	mov	r8, r2
 80119e2:	d82d      	bhi.n	8011a40 <__ssputs_r+0x70>
 80119e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80119e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80119ec:	d026      	beq.n	8011a3c <__ssputs_r+0x6c>
 80119ee:	6965      	ldr	r5, [r4, #20]
 80119f0:	6909      	ldr	r1, [r1, #16]
 80119f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80119f6:	eba3 0901 	sub.w	r9, r3, r1
 80119fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80119fe:	1c7b      	adds	r3, r7, #1
 8011a00:	444b      	add	r3, r9
 8011a02:	106d      	asrs	r5, r5, #1
 8011a04:	429d      	cmp	r5, r3
 8011a06:	bf38      	it	cc
 8011a08:	461d      	movcc	r5, r3
 8011a0a:	0553      	lsls	r3, r2, #21
 8011a0c:	d527      	bpl.n	8011a5e <__ssputs_r+0x8e>
 8011a0e:	4629      	mov	r1, r5
 8011a10:	f7ff ff52 	bl	80118b8 <_malloc_r>
 8011a14:	4606      	mov	r6, r0
 8011a16:	b360      	cbz	r0, 8011a72 <__ssputs_r+0xa2>
 8011a18:	6921      	ldr	r1, [r4, #16]
 8011a1a:	464a      	mov	r2, r9
 8011a1c:	f7ff fed2 	bl	80117c4 <memcpy>
 8011a20:	89a3      	ldrh	r3, [r4, #12]
 8011a22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a2a:	81a3      	strh	r3, [r4, #12]
 8011a2c:	6126      	str	r6, [r4, #16]
 8011a2e:	6165      	str	r5, [r4, #20]
 8011a30:	444e      	add	r6, r9
 8011a32:	eba5 0509 	sub.w	r5, r5, r9
 8011a36:	6026      	str	r6, [r4, #0]
 8011a38:	60a5      	str	r5, [r4, #8]
 8011a3a:	463e      	mov	r6, r7
 8011a3c:	42be      	cmp	r6, r7
 8011a3e:	d900      	bls.n	8011a42 <__ssputs_r+0x72>
 8011a40:	463e      	mov	r6, r7
 8011a42:	6820      	ldr	r0, [r4, #0]
 8011a44:	4632      	mov	r2, r6
 8011a46:	4641      	mov	r1, r8
 8011a48:	f7ff fe60 	bl	801170c <memmove>
 8011a4c:	68a3      	ldr	r3, [r4, #8]
 8011a4e:	1b9b      	subs	r3, r3, r6
 8011a50:	60a3      	str	r3, [r4, #8]
 8011a52:	6823      	ldr	r3, [r4, #0]
 8011a54:	4433      	add	r3, r6
 8011a56:	6023      	str	r3, [r4, #0]
 8011a58:	2000      	movs	r0, #0
 8011a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a5e:	462a      	mov	r2, r5
 8011a60:	f000 faac 	bl	8011fbc <_realloc_r>
 8011a64:	4606      	mov	r6, r0
 8011a66:	2800      	cmp	r0, #0
 8011a68:	d1e0      	bne.n	8011a2c <__ssputs_r+0x5c>
 8011a6a:	6921      	ldr	r1, [r4, #16]
 8011a6c:	4650      	mov	r0, sl
 8011a6e:	f7ff feb7 	bl	80117e0 <_free_r>
 8011a72:	230c      	movs	r3, #12
 8011a74:	f8ca 3000 	str.w	r3, [sl]
 8011a78:	89a3      	ldrh	r3, [r4, #12]
 8011a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a7e:	81a3      	strh	r3, [r4, #12]
 8011a80:	f04f 30ff 	mov.w	r0, #4294967295
 8011a84:	e7e9      	b.n	8011a5a <__ssputs_r+0x8a>
	...

08011a88 <_svfiprintf_r>:
 8011a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a8c:	4698      	mov	r8, r3
 8011a8e:	898b      	ldrh	r3, [r1, #12]
 8011a90:	061b      	lsls	r3, r3, #24
 8011a92:	b09d      	sub	sp, #116	@ 0x74
 8011a94:	4607      	mov	r7, r0
 8011a96:	460d      	mov	r5, r1
 8011a98:	4614      	mov	r4, r2
 8011a9a:	d510      	bpl.n	8011abe <_svfiprintf_r+0x36>
 8011a9c:	690b      	ldr	r3, [r1, #16]
 8011a9e:	b973      	cbnz	r3, 8011abe <_svfiprintf_r+0x36>
 8011aa0:	2140      	movs	r1, #64	@ 0x40
 8011aa2:	f7ff ff09 	bl	80118b8 <_malloc_r>
 8011aa6:	6028      	str	r0, [r5, #0]
 8011aa8:	6128      	str	r0, [r5, #16]
 8011aaa:	b930      	cbnz	r0, 8011aba <_svfiprintf_r+0x32>
 8011aac:	230c      	movs	r3, #12
 8011aae:	603b      	str	r3, [r7, #0]
 8011ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ab4:	b01d      	add	sp, #116	@ 0x74
 8011ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aba:	2340      	movs	r3, #64	@ 0x40
 8011abc:	616b      	str	r3, [r5, #20]
 8011abe:	2300      	movs	r3, #0
 8011ac0:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ac2:	2320      	movs	r3, #32
 8011ac4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011ac8:	f8cd 800c 	str.w	r8, [sp, #12]
 8011acc:	2330      	movs	r3, #48	@ 0x30
 8011ace:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011c6c <_svfiprintf_r+0x1e4>
 8011ad2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011ad6:	f04f 0901 	mov.w	r9, #1
 8011ada:	4623      	mov	r3, r4
 8011adc:	469a      	mov	sl, r3
 8011ade:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ae2:	b10a      	cbz	r2, 8011ae8 <_svfiprintf_r+0x60>
 8011ae4:	2a25      	cmp	r2, #37	@ 0x25
 8011ae6:	d1f9      	bne.n	8011adc <_svfiprintf_r+0x54>
 8011ae8:	ebba 0b04 	subs.w	fp, sl, r4
 8011aec:	d00b      	beq.n	8011b06 <_svfiprintf_r+0x7e>
 8011aee:	465b      	mov	r3, fp
 8011af0:	4622      	mov	r2, r4
 8011af2:	4629      	mov	r1, r5
 8011af4:	4638      	mov	r0, r7
 8011af6:	f7ff ff6b 	bl	80119d0 <__ssputs_r>
 8011afa:	3001      	adds	r0, #1
 8011afc:	f000 80a7 	beq.w	8011c4e <_svfiprintf_r+0x1c6>
 8011b00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b02:	445a      	add	r2, fp
 8011b04:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b06:	f89a 3000 	ldrb.w	r3, [sl]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	f000 809f 	beq.w	8011c4e <_svfiprintf_r+0x1c6>
 8011b10:	2300      	movs	r3, #0
 8011b12:	f04f 32ff 	mov.w	r2, #4294967295
 8011b16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b1a:	f10a 0a01 	add.w	sl, sl, #1
 8011b1e:	9304      	str	r3, [sp, #16]
 8011b20:	9307      	str	r3, [sp, #28]
 8011b22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011b26:	931a      	str	r3, [sp, #104]	@ 0x68
 8011b28:	4654      	mov	r4, sl
 8011b2a:	2205      	movs	r2, #5
 8011b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b30:	484e      	ldr	r0, [pc, #312]	@ (8011c6c <_svfiprintf_r+0x1e4>)
 8011b32:	f7ee fbbd 	bl	80002b0 <memchr>
 8011b36:	9a04      	ldr	r2, [sp, #16]
 8011b38:	b9d8      	cbnz	r0, 8011b72 <_svfiprintf_r+0xea>
 8011b3a:	06d0      	lsls	r0, r2, #27
 8011b3c:	bf44      	itt	mi
 8011b3e:	2320      	movmi	r3, #32
 8011b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b44:	0711      	lsls	r1, r2, #28
 8011b46:	bf44      	itt	mi
 8011b48:	232b      	movmi	r3, #43	@ 0x2b
 8011b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8011b52:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b54:	d015      	beq.n	8011b82 <_svfiprintf_r+0xfa>
 8011b56:	9a07      	ldr	r2, [sp, #28]
 8011b58:	4654      	mov	r4, sl
 8011b5a:	2000      	movs	r0, #0
 8011b5c:	f04f 0c0a 	mov.w	ip, #10
 8011b60:	4621      	mov	r1, r4
 8011b62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b66:	3b30      	subs	r3, #48	@ 0x30
 8011b68:	2b09      	cmp	r3, #9
 8011b6a:	d94b      	bls.n	8011c04 <_svfiprintf_r+0x17c>
 8011b6c:	b1b0      	cbz	r0, 8011b9c <_svfiprintf_r+0x114>
 8011b6e:	9207      	str	r2, [sp, #28]
 8011b70:	e014      	b.n	8011b9c <_svfiprintf_r+0x114>
 8011b72:	eba0 0308 	sub.w	r3, r0, r8
 8011b76:	fa09 f303 	lsl.w	r3, r9, r3
 8011b7a:	4313      	orrs	r3, r2
 8011b7c:	9304      	str	r3, [sp, #16]
 8011b7e:	46a2      	mov	sl, r4
 8011b80:	e7d2      	b.n	8011b28 <_svfiprintf_r+0xa0>
 8011b82:	9b03      	ldr	r3, [sp, #12]
 8011b84:	1d19      	adds	r1, r3, #4
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	9103      	str	r1, [sp, #12]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	bfbb      	ittet	lt
 8011b8e:	425b      	neglt	r3, r3
 8011b90:	f042 0202 	orrlt.w	r2, r2, #2
 8011b94:	9307      	strge	r3, [sp, #28]
 8011b96:	9307      	strlt	r3, [sp, #28]
 8011b98:	bfb8      	it	lt
 8011b9a:	9204      	strlt	r2, [sp, #16]
 8011b9c:	7823      	ldrb	r3, [r4, #0]
 8011b9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011ba0:	d10a      	bne.n	8011bb8 <_svfiprintf_r+0x130>
 8011ba2:	7863      	ldrb	r3, [r4, #1]
 8011ba4:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ba6:	d132      	bne.n	8011c0e <_svfiprintf_r+0x186>
 8011ba8:	9b03      	ldr	r3, [sp, #12]
 8011baa:	1d1a      	adds	r2, r3, #4
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	9203      	str	r2, [sp, #12]
 8011bb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011bb4:	3402      	adds	r4, #2
 8011bb6:	9305      	str	r3, [sp, #20]
 8011bb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011c7c <_svfiprintf_r+0x1f4>
 8011bbc:	7821      	ldrb	r1, [r4, #0]
 8011bbe:	2203      	movs	r2, #3
 8011bc0:	4650      	mov	r0, sl
 8011bc2:	f7ee fb75 	bl	80002b0 <memchr>
 8011bc6:	b138      	cbz	r0, 8011bd8 <_svfiprintf_r+0x150>
 8011bc8:	9b04      	ldr	r3, [sp, #16]
 8011bca:	eba0 000a 	sub.w	r0, r0, sl
 8011bce:	2240      	movs	r2, #64	@ 0x40
 8011bd0:	4082      	lsls	r2, r0
 8011bd2:	4313      	orrs	r3, r2
 8011bd4:	3401      	adds	r4, #1
 8011bd6:	9304      	str	r3, [sp, #16]
 8011bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bdc:	4824      	ldr	r0, [pc, #144]	@ (8011c70 <_svfiprintf_r+0x1e8>)
 8011bde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011be2:	2206      	movs	r2, #6
 8011be4:	f7ee fb64 	bl	80002b0 <memchr>
 8011be8:	2800      	cmp	r0, #0
 8011bea:	d036      	beq.n	8011c5a <_svfiprintf_r+0x1d2>
 8011bec:	4b21      	ldr	r3, [pc, #132]	@ (8011c74 <_svfiprintf_r+0x1ec>)
 8011bee:	bb1b      	cbnz	r3, 8011c38 <_svfiprintf_r+0x1b0>
 8011bf0:	9b03      	ldr	r3, [sp, #12]
 8011bf2:	3307      	adds	r3, #7
 8011bf4:	f023 0307 	bic.w	r3, r3, #7
 8011bf8:	3308      	adds	r3, #8
 8011bfa:	9303      	str	r3, [sp, #12]
 8011bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011bfe:	4433      	add	r3, r6
 8011c00:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c02:	e76a      	b.n	8011ada <_svfiprintf_r+0x52>
 8011c04:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c08:	460c      	mov	r4, r1
 8011c0a:	2001      	movs	r0, #1
 8011c0c:	e7a8      	b.n	8011b60 <_svfiprintf_r+0xd8>
 8011c0e:	2300      	movs	r3, #0
 8011c10:	3401      	adds	r4, #1
 8011c12:	9305      	str	r3, [sp, #20]
 8011c14:	4619      	mov	r1, r3
 8011c16:	f04f 0c0a 	mov.w	ip, #10
 8011c1a:	4620      	mov	r0, r4
 8011c1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c20:	3a30      	subs	r2, #48	@ 0x30
 8011c22:	2a09      	cmp	r2, #9
 8011c24:	d903      	bls.n	8011c2e <_svfiprintf_r+0x1a6>
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d0c6      	beq.n	8011bb8 <_svfiprintf_r+0x130>
 8011c2a:	9105      	str	r1, [sp, #20]
 8011c2c:	e7c4      	b.n	8011bb8 <_svfiprintf_r+0x130>
 8011c2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c32:	4604      	mov	r4, r0
 8011c34:	2301      	movs	r3, #1
 8011c36:	e7f0      	b.n	8011c1a <_svfiprintf_r+0x192>
 8011c38:	ab03      	add	r3, sp, #12
 8011c3a:	9300      	str	r3, [sp, #0]
 8011c3c:	462a      	mov	r2, r5
 8011c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8011c78 <_svfiprintf_r+0x1f0>)
 8011c40:	a904      	add	r1, sp, #16
 8011c42:	4638      	mov	r0, r7
 8011c44:	f3af 8000 	nop.w
 8011c48:	1c42      	adds	r2, r0, #1
 8011c4a:	4606      	mov	r6, r0
 8011c4c:	d1d6      	bne.n	8011bfc <_svfiprintf_r+0x174>
 8011c4e:	89ab      	ldrh	r3, [r5, #12]
 8011c50:	065b      	lsls	r3, r3, #25
 8011c52:	f53f af2d 	bmi.w	8011ab0 <_svfiprintf_r+0x28>
 8011c56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011c58:	e72c      	b.n	8011ab4 <_svfiprintf_r+0x2c>
 8011c5a:	ab03      	add	r3, sp, #12
 8011c5c:	9300      	str	r3, [sp, #0]
 8011c5e:	462a      	mov	r2, r5
 8011c60:	4b05      	ldr	r3, [pc, #20]	@ (8011c78 <_svfiprintf_r+0x1f0>)
 8011c62:	a904      	add	r1, sp, #16
 8011c64:	4638      	mov	r0, r7
 8011c66:	f000 f879 	bl	8011d5c <_printf_i>
 8011c6a:	e7ed      	b.n	8011c48 <_svfiprintf_r+0x1c0>
 8011c6c:	08036a94 	.word	0x08036a94
 8011c70:	08036a9e 	.word	0x08036a9e
 8011c74:	00000000 	.word	0x00000000
 8011c78:	080119d1 	.word	0x080119d1
 8011c7c:	08036a9a 	.word	0x08036a9a

08011c80 <_printf_common>:
 8011c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c84:	4616      	mov	r6, r2
 8011c86:	4698      	mov	r8, r3
 8011c88:	688a      	ldr	r2, [r1, #8]
 8011c8a:	690b      	ldr	r3, [r1, #16]
 8011c8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011c90:	4293      	cmp	r3, r2
 8011c92:	bfb8      	it	lt
 8011c94:	4613      	movlt	r3, r2
 8011c96:	6033      	str	r3, [r6, #0]
 8011c98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011c9c:	4607      	mov	r7, r0
 8011c9e:	460c      	mov	r4, r1
 8011ca0:	b10a      	cbz	r2, 8011ca6 <_printf_common+0x26>
 8011ca2:	3301      	adds	r3, #1
 8011ca4:	6033      	str	r3, [r6, #0]
 8011ca6:	6823      	ldr	r3, [r4, #0]
 8011ca8:	0699      	lsls	r1, r3, #26
 8011caa:	bf42      	ittt	mi
 8011cac:	6833      	ldrmi	r3, [r6, #0]
 8011cae:	3302      	addmi	r3, #2
 8011cb0:	6033      	strmi	r3, [r6, #0]
 8011cb2:	6825      	ldr	r5, [r4, #0]
 8011cb4:	f015 0506 	ands.w	r5, r5, #6
 8011cb8:	d106      	bne.n	8011cc8 <_printf_common+0x48>
 8011cba:	f104 0a19 	add.w	sl, r4, #25
 8011cbe:	68e3      	ldr	r3, [r4, #12]
 8011cc0:	6832      	ldr	r2, [r6, #0]
 8011cc2:	1a9b      	subs	r3, r3, r2
 8011cc4:	42ab      	cmp	r3, r5
 8011cc6:	dc26      	bgt.n	8011d16 <_printf_common+0x96>
 8011cc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011ccc:	6822      	ldr	r2, [r4, #0]
 8011cce:	3b00      	subs	r3, #0
 8011cd0:	bf18      	it	ne
 8011cd2:	2301      	movne	r3, #1
 8011cd4:	0692      	lsls	r2, r2, #26
 8011cd6:	d42b      	bmi.n	8011d30 <_printf_common+0xb0>
 8011cd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011cdc:	4641      	mov	r1, r8
 8011cde:	4638      	mov	r0, r7
 8011ce0:	47c8      	blx	r9
 8011ce2:	3001      	adds	r0, #1
 8011ce4:	d01e      	beq.n	8011d24 <_printf_common+0xa4>
 8011ce6:	6823      	ldr	r3, [r4, #0]
 8011ce8:	6922      	ldr	r2, [r4, #16]
 8011cea:	f003 0306 	and.w	r3, r3, #6
 8011cee:	2b04      	cmp	r3, #4
 8011cf0:	bf02      	ittt	eq
 8011cf2:	68e5      	ldreq	r5, [r4, #12]
 8011cf4:	6833      	ldreq	r3, [r6, #0]
 8011cf6:	1aed      	subeq	r5, r5, r3
 8011cf8:	68a3      	ldr	r3, [r4, #8]
 8011cfa:	bf0c      	ite	eq
 8011cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011d00:	2500      	movne	r5, #0
 8011d02:	4293      	cmp	r3, r2
 8011d04:	bfc4      	itt	gt
 8011d06:	1a9b      	subgt	r3, r3, r2
 8011d08:	18ed      	addgt	r5, r5, r3
 8011d0a:	2600      	movs	r6, #0
 8011d0c:	341a      	adds	r4, #26
 8011d0e:	42b5      	cmp	r5, r6
 8011d10:	d11a      	bne.n	8011d48 <_printf_common+0xc8>
 8011d12:	2000      	movs	r0, #0
 8011d14:	e008      	b.n	8011d28 <_printf_common+0xa8>
 8011d16:	2301      	movs	r3, #1
 8011d18:	4652      	mov	r2, sl
 8011d1a:	4641      	mov	r1, r8
 8011d1c:	4638      	mov	r0, r7
 8011d1e:	47c8      	blx	r9
 8011d20:	3001      	adds	r0, #1
 8011d22:	d103      	bne.n	8011d2c <_printf_common+0xac>
 8011d24:	f04f 30ff 	mov.w	r0, #4294967295
 8011d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d2c:	3501      	adds	r5, #1
 8011d2e:	e7c6      	b.n	8011cbe <_printf_common+0x3e>
 8011d30:	18e1      	adds	r1, r4, r3
 8011d32:	1c5a      	adds	r2, r3, #1
 8011d34:	2030      	movs	r0, #48	@ 0x30
 8011d36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011d3a:	4422      	add	r2, r4
 8011d3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011d40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011d44:	3302      	adds	r3, #2
 8011d46:	e7c7      	b.n	8011cd8 <_printf_common+0x58>
 8011d48:	2301      	movs	r3, #1
 8011d4a:	4622      	mov	r2, r4
 8011d4c:	4641      	mov	r1, r8
 8011d4e:	4638      	mov	r0, r7
 8011d50:	47c8      	blx	r9
 8011d52:	3001      	adds	r0, #1
 8011d54:	d0e6      	beq.n	8011d24 <_printf_common+0xa4>
 8011d56:	3601      	adds	r6, #1
 8011d58:	e7d9      	b.n	8011d0e <_printf_common+0x8e>
	...

08011d5c <_printf_i>:
 8011d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011d60:	7e0f      	ldrb	r7, [r1, #24]
 8011d62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011d64:	2f78      	cmp	r7, #120	@ 0x78
 8011d66:	4691      	mov	r9, r2
 8011d68:	4680      	mov	r8, r0
 8011d6a:	460c      	mov	r4, r1
 8011d6c:	469a      	mov	sl, r3
 8011d6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011d72:	d807      	bhi.n	8011d84 <_printf_i+0x28>
 8011d74:	2f62      	cmp	r7, #98	@ 0x62
 8011d76:	d80a      	bhi.n	8011d8e <_printf_i+0x32>
 8011d78:	2f00      	cmp	r7, #0
 8011d7a:	f000 80d2 	beq.w	8011f22 <_printf_i+0x1c6>
 8011d7e:	2f58      	cmp	r7, #88	@ 0x58
 8011d80:	f000 80b9 	beq.w	8011ef6 <_printf_i+0x19a>
 8011d84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011d88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011d8c:	e03a      	b.n	8011e04 <_printf_i+0xa8>
 8011d8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011d92:	2b15      	cmp	r3, #21
 8011d94:	d8f6      	bhi.n	8011d84 <_printf_i+0x28>
 8011d96:	a101      	add	r1, pc, #4	@ (adr r1, 8011d9c <_printf_i+0x40>)
 8011d98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011d9c:	08011df5 	.word	0x08011df5
 8011da0:	08011e09 	.word	0x08011e09
 8011da4:	08011d85 	.word	0x08011d85
 8011da8:	08011d85 	.word	0x08011d85
 8011dac:	08011d85 	.word	0x08011d85
 8011db0:	08011d85 	.word	0x08011d85
 8011db4:	08011e09 	.word	0x08011e09
 8011db8:	08011d85 	.word	0x08011d85
 8011dbc:	08011d85 	.word	0x08011d85
 8011dc0:	08011d85 	.word	0x08011d85
 8011dc4:	08011d85 	.word	0x08011d85
 8011dc8:	08011f09 	.word	0x08011f09
 8011dcc:	08011e33 	.word	0x08011e33
 8011dd0:	08011ec3 	.word	0x08011ec3
 8011dd4:	08011d85 	.word	0x08011d85
 8011dd8:	08011d85 	.word	0x08011d85
 8011ddc:	08011f2b 	.word	0x08011f2b
 8011de0:	08011d85 	.word	0x08011d85
 8011de4:	08011e33 	.word	0x08011e33
 8011de8:	08011d85 	.word	0x08011d85
 8011dec:	08011d85 	.word	0x08011d85
 8011df0:	08011ecb 	.word	0x08011ecb
 8011df4:	6833      	ldr	r3, [r6, #0]
 8011df6:	1d1a      	adds	r2, r3, #4
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	6032      	str	r2, [r6, #0]
 8011dfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011e00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011e04:	2301      	movs	r3, #1
 8011e06:	e09d      	b.n	8011f44 <_printf_i+0x1e8>
 8011e08:	6833      	ldr	r3, [r6, #0]
 8011e0a:	6820      	ldr	r0, [r4, #0]
 8011e0c:	1d19      	adds	r1, r3, #4
 8011e0e:	6031      	str	r1, [r6, #0]
 8011e10:	0606      	lsls	r6, r0, #24
 8011e12:	d501      	bpl.n	8011e18 <_printf_i+0xbc>
 8011e14:	681d      	ldr	r5, [r3, #0]
 8011e16:	e003      	b.n	8011e20 <_printf_i+0xc4>
 8011e18:	0645      	lsls	r5, r0, #25
 8011e1a:	d5fb      	bpl.n	8011e14 <_printf_i+0xb8>
 8011e1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011e20:	2d00      	cmp	r5, #0
 8011e22:	da03      	bge.n	8011e2c <_printf_i+0xd0>
 8011e24:	232d      	movs	r3, #45	@ 0x2d
 8011e26:	426d      	negs	r5, r5
 8011e28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011e2c:	4859      	ldr	r0, [pc, #356]	@ (8011f94 <_printf_i+0x238>)
 8011e2e:	230a      	movs	r3, #10
 8011e30:	e011      	b.n	8011e56 <_printf_i+0xfa>
 8011e32:	6821      	ldr	r1, [r4, #0]
 8011e34:	6833      	ldr	r3, [r6, #0]
 8011e36:	0608      	lsls	r0, r1, #24
 8011e38:	f853 5b04 	ldr.w	r5, [r3], #4
 8011e3c:	d402      	bmi.n	8011e44 <_printf_i+0xe8>
 8011e3e:	0649      	lsls	r1, r1, #25
 8011e40:	bf48      	it	mi
 8011e42:	b2ad      	uxthmi	r5, r5
 8011e44:	2f6f      	cmp	r7, #111	@ 0x6f
 8011e46:	4853      	ldr	r0, [pc, #332]	@ (8011f94 <_printf_i+0x238>)
 8011e48:	6033      	str	r3, [r6, #0]
 8011e4a:	bf14      	ite	ne
 8011e4c:	230a      	movne	r3, #10
 8011e4e:	2308      	moveq	r3, #8
 8011e50:	2100      	movs	r1, #0
 8011e52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011e56:	6866      	ldr	r6, [r4, #4]
 8011e58:	60a6      	str	r6, [r4, #8]
 8011e5a:	2e00      	cmp	r6, #0
 8011e5c:	bfa2      	ittt	ge
 8011e5e:	6821      	ldrge	r1, [r4, #0]
 8011e60:	f021 0104 	bicge.w	r1, r1, #4
 8011e64:	6021      	strge	r1, [r4, #0]
 8011e66:	b90d      	cbnz	r5, 8011e6c <_printf_i+0x110>
 8011e68:	2e00      	cmp	r6, #0
 8011e6a:	d04b      	beq.n	8011f04 <_printf_i+0x1a8>
 8011e6c:	4616      	mov	r6, r2
 8011e6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8011e72:	fb03 5711 	mls	r7, r3, r1, r5
 8011e76:	5dc7      	ldrb	r7, [r0, r7]
 8011e78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011e7c:	462f      	mov	r7, r5
 8011e7e:	42bb      	cmp	r3, r7
 8011e80:	460d      	mov	r5, r1
 8011e82:	d9f4      	bls.n	8011e6e <_printf_i+0x112>
 8011e84:	2b08      	cmp	r3, #8
 8011e86:	d10b      	bne.n	8011ea0 <_printf_i+0x144>
 8011e88:	6823      	ldr	r3, [r4, #0]
 8011e8a:	07df      	lsls	r7, r3, #31
 8011e8c:	d508      	bpl.n	8011ea0 <_printf_i+0x144>
 8011e8e:	6923      	ldr	r3, [r4, #16]
 8011e90:	6861      	ldr	r1, [r4, #4]
 8011e92:	4299      	cmp	r1, r3
 8011e94:	bfde      	ittt	le
 8011e96:	2330      	movle	r3, #48	@ 0x30
 8011e98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011e9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011ea0:	1b92      	subs	r2, r2, r6
 8011ea2:	6122      	str	r2, [r4, #16]
 8011ea4:	f8cd a000 	str.w	sl, [sp]
 8011ea8:	464b      	mov	r3, r9
 8011eaa:	aa03      	add	r2, sp, #12
 8011eac:	4621      	mov	r1, r4
 8011eae:	4640      	mov	r0, r8
 8011eb0:	f7ff fee6 	bl	8011c80 <_printf_common>
 8011eb4:	3001      	adds	r0, #1
 8011eb6:	d14a      	bne.n	8011f4e <_printf_i+0x1f2>
 8011eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8011ebc:	b004      	add	sp, #16
 8011ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ec2:	6823      	ldr	r3, [r4, #0]
 8011ec4:	f043 0320 	orr.w	r3, r3, #32
 8011ec8:	6023      	str	r3, [r4, #0]
 8011eca:	4833      	ldr	r0, [pc, #204]	@ (8011f98 <_printf_i+0x23c>)
 8011ecc:	2778      	movs	r7, #120	@ 0x78
 8011ece:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011ed2:	6823      	ldr	r3, [r4, #0]
 8011ed4:	6831      	ldr	r1, [r6, #0]
 8011ed6:	061f      	lsls	r7, r3, #24
 8011ed8:	f851 5b04 	ldr.w	r5, [r1], #4
 8011edc:	d402      	bmi.n	8011ee4 <_printf_i+0x188>
 8011ede:	065f      	lsls	r7, r3, #25
 8011ee0:	bf48      	it	mi
 8011ee2:	b2ad      	uxthmi	r5, r5
 8011ee4:	6031      	str	r1, [r6, #0]
 8011ee6:	07d9      	lsls	r1, r3, #31
 8011ee8:	bf44      	itt	mi
 8011eea:	f043 0320 	orrmi.w	r3, r3, #32
 8011eee:	6023      	strmi	r3, [r4, #0]
 8011ef0:	b11d      	cbz	r5, 8011efa <_printf_i+0x19e>
 8011ef2:	2310      	movs	r3, #16
 8011ef4:	e7ac      	b.n	8011e50 <_printf_i+0xf4>
 8011ef6:	4827      	ldr	r0, [pc, #156]	@ (8011f94 <_printf_i+0x238>)
 8011ef8:	e7e9      	b.n	8011ece <_printf_i+0x172>
 8011efa:	6823      	ldr	r3, [r4, #0]
 8011efc:	f023 0320 	bic.w	r3, r3, #32
 8011f00:	6023      	str	r3, [r4, #0]
 8011f02:	e7f6      	b.n	8011ef2 <_printf_i+0x196>
 8011f04:	4616      	mov	r6, r2
 8011f06:	e7bd      	b.n	8011e84 <_printf_i+0x128>
 8011f08:	6833      	ldr	r3, [r6, #0]
 8011f0a:	6825      	ldr	r5, [r4, #0]
 8011f0c:	6961      	ldr	r1, [r4, #20]
 8011f0e:	1d18      	adds	r0, r3, #4
 8011f10:	6030      	str	r0, [r6, #0]
 8011f12:	062e      	lsls	r6, r5, #24
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	d501      	bpl.n	8011f1c <_printf_i+0x1c0>
 8011f18:	6019      	str	r1, [r3, #0]
 8011f1a:	e002      	b.n	8011f22 <_printf_i+0x1c6>
 8011f1c:	0668      	lsls	r0, r5, #25
 8011f1e:	d5fb      	bpl.n	8011f18 <_printf_i+0x1bc>
 8011f20:	8019      	strh	r1, [r3, #0]
 8011f22:	2300      	movs	r3, #0
 8011f24:	6123      	str	r3, [r4, #16]
 8011f26:	4616      	mov	r6, r2
 8011f28:	e7bc      	b.n	8011ea4 <_printf_i+0x148>
 8011f2a:	6833      	ldr	r3, [r6, #0]
 8011f2c:	1d1a      	adds	r2, r3, #4
 8011f2e:	6032      	str	r2, [r6, #0]
 8011f30:	681e      	ldr	r6, [r3, #0]
 8011f32:	6862      	ldr	r2, [r4, #4]
 8011f34:	2100      	movs	r1, #0
 8011f36:	4630      	mov	r0, r6
 8011f38:	f7ee f9ba 	bl	80002b0 <memchr>
 8011f3c:	b108      	cbz	r0, 8011f42 <_printf_i+0x1e6>
 8011f3e:	1b80      	subs	r0, r0, r6
 8011f40:	6060      	str	r0, [r4, #4]
 8011f42:	6863      	ldr	r3, [r4, #4]
 8011f44:	6123      	str	r3, [r4, #16]
 8011f46:	2300      	movs	r3, #0
 8011f48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011f4c:	e7aa      	b.n	8011ea4 <_printf_i+0x148>
 8011f4e:	6923      	ldr	r3, [r4, #16]
 8011f50:	4632      	mov	r2, r6
 8011f52:	4649      	mov	r1, r9
 8011f54:	4640      	mov	r0, r8
 8011f56:	47d0      	blx	sl
 8011f58:	3001      	adds	r0, #1
 8011f5a:	d0ad      	beq.n	8011eb8 <_printf_i+0x15c>
 8011f5c:	6823      	ldr	r3, [r4, #0]
 8011f5e:	079b      	lsls	r3, r3, #30
 8011f60:	d413      	bmi.n	8011f8a <_printf_i+0x22e>
 8011f62:	68e0      	ldr	r0, [r4, #12]
 8011f64:	9b03      	ldr	r3, [sp, #12]
 8011f66:	4298      	cmp	r0, r3
 8011f68:	bfb8      	it	lt
 8011f6a:	4618      	movlt	r0, r3
 8011f6c:	e7a6      	b.n	8011ebc <_printf_i+0x160>
 8011f6e:	2301      	movs	r3, #1
 8011f70:	4632      	mov	r2, r6
 8011f72:	4649      	mov	r1, r9
 8011f74:	4640      	mov	r0, r8
 8011f76:	47d0      	blx	sl
 8011f78:	3001      	adds	r0, #1
 8011f7a:	d09d      	beq.n	8011eb8 <_printf_i+0x15c>
 8011f7c:	3501      	adds	r5, #1
 8011f7e:	68e3      	ldr	r3, [r4, #12]
 8011f80:	9903      	ldr	r1, [sp, #12]
 8011f82:	1a5b      	subs	r3, r3, r1
 8011f84:	42ab      	cmp	r3, r5
 8011f86:	dcf2      	bgt.n	8011f6e <_printf_i+0x212>
 8011f88:	e7eb      	b.n	8011f62 <_printf_i+0x206>
 8011f8a:	2500      	movs	r5, #0
 8011f8c:	f104 0619 	add.w	r6, r4, #25
 8011f90:	e7f5      	b.n	8011f7e <_printf_i+0x222>
 8011f92:	bf00      	nop
 8011f94:	08036aa5 	.word	0x08036aa5
 8011f98:	08036ab6 	.word	0x08036ab6

08011f9c <_sbrk_r>:
 8011f9c:	b538      	push	{r3, r4, r5, lr}
 8011f9e:	4d06      	ldr	r5, [pc, #24]	@ (8011fb8 <_sbrk_r+0x1c>)
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	4604      	mov	r4, r0
 8011fa4:	4608      	mov	r0, r1
 8011fa6:	602b      	str	r3, [r5, #0]
 8011fa8:	f7ef fda4 	bl	8001af4 <_sbrk>
 8011fac:	1c43      	adds	r3, r0, #1
 8011fae:	d102      	bne.n	8011fb6 <_sbrk_r+0x1a>
 8011fb0:	682b      	ldr	r3, [r5, #0]
 8011fb2:	b103      	cbz	r3, 8011fb6 <_sbrk_r+0x1a>
 8011fb4:	6023      	str	r3, [r4, #0]
 8011fb6:	bd38      	pop	{r3, r4, r5, pc}
 8011fb8:	2000ec10 	.word	0x2000ec10

08011fbc <_realloc_r>:
 8011fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fc0:	4680      	mov	r8, r0
 8011fc2:	4615      	mov	r5, r2
 8011fc4:	460c      	mov	r4, r1
 8011fc6:	b921      	cbnz	r1, 8011fd2 <_realloc_r+0x16>
 8011fc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fcc:	4611      	mov	r1, r2
 8011fce:	f7ff bc73 	b.w	80118b8 <_malloc_r>
 8011fd2:	b92a      	cbnz	r2, 8011fe0 <_realloc_r+0x24>
 8011fd4:	f7ff fc04 	bl	80117e0 <_free_r>
 8011fd8:	2400      	movs	r4, #0
 8011fda:	4620      	mov	r0, r4
 8011fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fe0:	f000 f81a 	bl	8012018 <_malloc_usable_size_r>
 8011fe4:	4285      	cmp	r5, r0
 8011fe6:	4606      	mov	r6, r0
 8011fe8:	d802      	bhi.n	8011ff0 <_realloc_r+0x34>
 8011fea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011fee:	d8f4      	bhi.n	8011fda <_realloc_r+0x1e>
 8011ff0:	4629      	mov	r1, r5
 8011ff2:	4640      	mov	r0, r8
 8011ff4:	f7ff fc60 	bl	80118b8 <_malloc_r>
 8011ff8:	4607      	mov	r7, r0
 8011ffa:	2800      	cmp	r0, #0
 8011ffc:	d0ec      	beq.n	8011fd8 <_realloc_r+0x1c>
 8011ffe:	42b5      	cmp	r5, r6
 8012000:	462a      	mov	r2, r5
 8012002:	4621      	mov	r1, r4
 8012004:	bf28      	it	cs
 8012006:	4632      	movcs	r2, r6
 8012008:	f7ff fbdc 	bl	80117c4 <memcpy>
 801200c:	4621      	mov	r1, r4
 801200e:	4640      	mov	r0, r8
 8012010:	f7ff fbe6 	bl	80117e0 <_free_r>
 8012014:	463c      	mov	r4, r7
 8012016:	e7e0      	b.n	8011fda <_realloc_r+0x1e>

08012018 <_malloc_usable_size_r>:
 8012018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801201c:	1f18      	subs	r0, r3, #4
 801201e:	2b00      	cmp	r3, #0
 8012020:	bfbc      	itt	lt
 8012022:	580b      	ldrlt	r3, [r1, r0]
 8012024:	18c0      	addlt	r0, r0, r3
 8012026:	4770      	bx	lr

08012028 <sqrtf>:
 8012028:	b508      	push	{r3, lr}
 801202a:	ed2d 8b02 	vpush	{d8}
 801202e:	eeb0 8a40 	vmov.f32	s16, s0
 8012032:	f000 f817 	bl	8012064 <__ieee754_sqrtf>
 8012036:	eeb4 8a48 	vcmp.f32	s16, s16
 801203a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801203e:	d60c      	bvs.n	801205a <sqrtf+0x32>
 8012040:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8012060 <sqrtf+0x38>
 8012044:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801204c:	d505      	bpl.n	801205a <sqrtf+0x32>
 801204e:	f7ff fb8d 	bl	801176c <__errno>
 8012052:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012056:	2321      	movs	r3, #33	@ 0x21
 8012058:	6003      	str	r3, [r0, #0]
 801205a:	ecbd 8b02 	vpop	{d8}
 801205e:	bd08      	pop	{r3, pc}
 8012060:	00000000 	.word	0x00000000

08012064 <__ieee754_sqrtf>:
 8012064:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012068:	4770      	bx	lr
	...

0801206c <_init>:
 801206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801206e:	bf00      	nop
 8012070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012072:	bc08      	pop	{r3}
 8012074:	469e      	mov	lr, r3
 8012076:	4770      	bx	lr

08012078 <_fini>:
 8012078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801207a:	bf00      	nop
 801207c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801207e:	bc08      	pop	{r3}
 8012080:	469e      	mov	lr, r3
 8012082:	4770      	bx	lr
