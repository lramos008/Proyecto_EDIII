
EDIII_Control_Acceso.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000beb8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  0800c058  0800c058  0000d058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c648  0800c648  0000e078  2**0
                  CONTENTS
  4 .ARM          00000008  0800c648  0800c648  0000d648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c650  0800c650  0000e078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c650  0800c650  0000d650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c654  0800c654  0000d654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800c658  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ff3c  20000078  0800c6d0  0000e078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ffb4  0800c6d0  0000efb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021c06  00000000  00000000  0000e0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f61  00000000  00000000  0002fcae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001eb8  00000000  00000000  00034c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017f8  00000000  00000000  00036ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df6c  00000000  00000000  000382c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a56e  00000000  00000000  0005622c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afb41  00000000  00000000  0008079a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001302db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000085c4  00000000  00000000  00130320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009c  00000000  00000000  001388e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c040 	.word	0x0800c040

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800c040 	.word	0x0800c040

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	@ (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	@ (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	@ 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000094 	.word	0x20000094
 80005b0:	200000e8 	.word	0x200000e8

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f001 fc0d 	bl	8001dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f847 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 fa59 	bl	8000a78 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c6:	f000 fa37 	bl	8000a38 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 fa0b 	bl	80009e4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005ce:	f000 f8fd 	bl	80007cc <MX_I2C1_Init>
  MX_SPI3_Init();
 80005d2:	f000 f983 	bl	80008dc <MX_SPI3_Init>
  MX_FATFS_Init();
 80005d6:	f005 fc33 	bl	8005e40 <MX_FATFS_Init>
  MX_RTC_Init();
 80005da:	f000 f925 	bl	8000828 <MX_RTC_Init>
  MX_ADC1_Init();
 80005de:	f000 f8a3 	bl	8000728 <MX_ADC1_Init>
  MX_TIM3_Init();
 80005e2:	f000 f9b1 	bl	8000948 <MX_TIM3_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  display_queue = xQueueCreate(1, sizeof(display_state_t));
 80005e6:	2200      	movs	r2, #0
 80005e8:	2101      	movs	r1, #1
 80005ea:	2001      	movs	r0, #1
 80005ec:	f008 ff77 	bl	80094de <xQueueGenericCreate>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4a11      	ldr	r2, [pc, #68]	@ (8000638 <main+0x84>)
 80005f4:	6013      	str	r3, [r2, #0]
  sequence_queue = xQueueCreate(1, sizeof(uint32_t));
 80005f6:	2200      	movs	r2, #0
 80005f8:	2104      	movs	r1, #4
 80005fa:	2001      	movs	r0, #1
 80005fc:	f008 ff6f 	bl	80094de <xQueueGenericCreate>
 8000600:	4603      	mov	r3, r0
 8000602:	4a0e      	ldr	r2, [pc, #56]	@ (800063c <main+0x88>)
 8000604:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  //xTaskCreate(display_manager, "Tarea 05", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 4, NULL);
  //xTaskCreate(LockControl, "Tarea 04", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL);
  //xTaskCreate(VoiceProcessing, "Tarea 03", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
  xTaskCreate(user_check_task, "Tarea 02", 3 * configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
 8000606:	2300      	movs	r3, #0
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	2302      	movs	r3, #2
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2300      	movs	r3, #0
 8000610:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000614:	490a      	ldr	r1, [pc, #40]	@ (8000640 <main+0x8c>)
 8000616:	480b      	ldr	r0, [pc, #44]	@ (8000644 <main+0x90>)
 8000618:	f009 fcb6 	bl	8009f88 <xTaskCreate>
  //xTaskCreate(input_sequence_scan, "Tarea 01", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
  xTaskCreate(idle_task, "Tarea Idle", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 800061c:	2300      	movs	r3, #0
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	2300      	movs	r3, #0
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2300      	movs	r3, #0
 8000626:	2280      	movs	r2, #128	@ 0x80
 8000628:	4907      	ldr	r1, [pc, #28]	@ (8000648 <main+0x94>)
 800062a:	4808      	ldr	r0, [pc, #32]	@ (800064c <main+0x98>)
 800062c:	f009 fcac 	bl	8009f88 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 8000630:	f009 fde2 	bl	800a1f8 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <main+0x80>
 8000638:	200004f0 	.word	0x200004f0
 800063c:	200004ec 	.word	0x200004ec
 8000640:	0800c058 	.word	0x0800c058
 8000644:	08001d99 	.word	0x08001d99
 8000648:	0800c064 	.word	0x0800c064
 800064c:	08000bc1 	.word	0x08000bc1

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	@ 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	@ 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f00b f888 	bl	800b774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b29      	ldr	r3, [pc, #164]	@ (8000720 <SystemClock_Config+0xd0>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a28      	ldr	r2, [pc, #160]	@ (8000720 <SystemClock_Config+0xd0>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40
 8000684:	4b26      	ldr	r3, [pc, #152]	@ (8000720 <SystemClock_Config+0xd0>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b23      	ldr	r3, [pc, #140]	@ (8000724 <SystemClock_Config+0xd4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800069c:	4a21      	ldr	r2, [pc, #132]	@ (8000724 <SystemClock_Config+0xd4>)
 800069e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000724 <SystemClock_Config+0xd4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80006b0:	2309      	movs	r3, #9
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006b4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006ba:	2301      	movs	r3, #1
 80006bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80006cc:	2340      	movs	r3, #64	@ 0x40
 80006ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d4:	2307      	movs	r3, #7
 80006d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 fee9 	bl	80034b4 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006e8:	f000 fa97 	bl	8000c1a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2302      	movs	r3, #2
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	2102      	movs	r1, #2
 8000708:	4618      	mov	r0, r3
 800070a:	f003 f94b 	bl	80039a4 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000714:	f000 fa81 	bl	8000c1a <Error_Handler>
  }
}
 8000718:	bf00      	nop
 800071a:	3750      	adds	r7, #80	@ 0x50
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800072e:	463b      	mov	r3, r7
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800073a:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <MX_ADC1_Init+0x9c>)
 800073c:	4a22      	ldr	r2, [pc, #136]	@ (80007c8 <MX_ADC1_Init+0xa0>)
 800073e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000740:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <MX_ADC1_Init+0x9c>)
 8000742:	2200      	movs	r2, #0
 8000744:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000746:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <MX_ADC1_Init+0x9c>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800074c:	4b1d      	ldr	r3, [pc, #116]	@ (80007c4 <MX_ADC1_Init+0x9c>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000752:	4b1c      	ldr	r3, [pc, #112]	@ (80007c4 <MX_ADC1_Init+0x9c>)
 8000754:	2200      	movs	r2, #0
 8000756:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000758:	4b1a      	ldr	r3, [pc, #104]	@ (80007c4 <MX_ADC1_Init+0x9c>)
 800075a:	2200      	movs	r2, #0
 800075c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000760:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <MX_ADC1_Init+0x9c>)
 8000762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000766:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000768:	4b16      	ldr	r3, [pc, #88]	@ (80007c4 <MX_ADC1_Init+0x9c>)
 800076a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800076e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000770:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <MX_ADC1_Init+0x9c>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000776:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <MX_ADC1_Init+0x9c>)
 8000778:	2201      	movs	r2, #1
 800077a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800077c:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <MX_ADC1_Init+0x9c>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000784:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_ADC1_Init+0x9c>)
 8000786:	2201      	movs	r2, #1
 8000788:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800078a:	480e      	ldr	r0, [pc, #56]	@ (80007c4 <MX_ADC1_Init+0x9c>)
 800078c:	f001 fb8a 	bl	8001ea4 <HAL_ADC_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000796:	f000 fa40 	bl	8000c1a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800079a:	2300      	movs	r3, #0
 800079c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800079e:	2301      	movs	r3, #1
 80007a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80007a2:	2302      	movs	r3, #2
 80007a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a6:	463b      	mov	r3, r7
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	@ (80007c4 <MX_ADC1_Init+0x9c>)
 80007ac:	f001 fd3c 	bl	8002228 <HAL_ADC_ConfigChannel>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007b6:	f000 fa30 	bl	8000c1a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200002e8 	.word	0x200002e8
 80007c8:	40012000 	.word	0x40012000

080007cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d0:	4b12      	ldr	r3, [pc, #72]	@ (800081c <MX_I2C1_Init+0x50>)
 80007d2:	4a13      	ldr	r2, [pc, #76]	@ (8000820 <MX_I2C1_Init+0x54>)
 80007d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007d6:	4b11      	ldr	r3, [pc, #68]	@ (800081c <MX_I2C1_Init+0x50>)
 80007d8:	4a12      	ldr	r2, [pc, #72]	@ (8000824 <MX_I2C1_Init+0x58>)
 80007da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <MX_I2C1_Init+0x50>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <MX_I2C1_Init+0x50>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <MX_I2C1_Init+0x50>)
 80007ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	@ (800081c <MX_I2C1_Init+0x50>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007f6:	4b09      	ldr	r3, [pc, #36]	@ (800081c <MX_I2C1_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007fc:	4b07      	ldr	r3, [pc, #28]	@ (800081c <MX_I2C1_Init+0x50>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <MX_I2C1_Init+0x50>)
 8000804:	2200      	movs	r2, #0
 8000806:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	@ (800081c <MX_I2C1_Init+0x50>)
 800080a:	f002 fd0f 	bl	800322c <HAL_I2C_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000814:	f000 fa01 	bl	8000c1a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000390 	.word	0x20000390
 8000820:	40005400 	.word	0x40005400
 8000824:	00061a80 	.word	0x00061a80

08000828 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800083c:	2300      	movs	r3, #0
 800083e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000840:	4b24      	ldr	r3, [pc, #144]	@ (80008d4 <MX_RTC_Init+0xac>)
 8000842:	4a25      	ldr	r2, [pc, #148]	@ (80008d8 <MX_RTC_Init+0xb0>)
 8000844:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000846:	4b23      	ldr	r3, [pc, #140]	@ (80008d4 <MX_RTC_Init+0xac>)
 8000848:	2200      	movs	r2, #0
 800084a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800084c:	4b21      	ldr	r3, [pc, #132]	@ (80008d4 <MX_RTC_Init+0xac>)
 800084e:	227f      	movs	r2, #127	@ 0x7f
 8000850:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000852:	4b20      	ldr	r3, [pc, #128]	@ (80008d4 <MX_RTC_Init+0xac>)
 8000854:	22ff      	movs	r2, #255	@ 0xff
 8000856:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000858:	4b1e      	ldr	r3, [pc, #120]	@ (80008d4 <MX_RTC_Init+0xac>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800085e:	4b1d      	ldr	r3, [pc, #116]	@ (80008d4 <MX_RTC_Init+0xac>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000864:	4b1b      	ldr	r3, [pc, #108]	@ (80008d4 <MX_RTC_Init+0xac>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800086a:	481a      	ldr	r0, [pc, #104]	@ (80008d4 <MX_RTC_Init+0xac>)
 800086c:	f003 fbda 	bl	8004024 <HAL_RTC_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000876:	f000 f9d0 	bl	8000c1a <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 15;
 800087a:	230f      	movs	r3, #15
 800087c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2200      	movs	r2, #0
 8000892:	4619      	mov	r1, r3
 8000894:	480f      	ldr	r0, [pc, #60]	@ (80008d4 <MX_RTC_Init+0xac>)
 8000896:	f003 fc48 	bl	800412a <HAL_RTC_SetTime>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80008a0:	f000 f9bb 	bl	8000c1a <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80008a4:	2306      	movs	r3, #6
 80008a6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 80008a8:	2307      	movs	r3, #7
 80008aa:	707b      	strb	r3, [r7, #1]
  sDate.Date = 6;
 80008ac:	2306      	movs	r3, #6
 80008ae:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 80008b0:	2318      	movs	r3, #24
 80008b2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	2200      	movs	r2, #0
 80008b8:	4619      	mov	r1, r3
 80008ba:	4806      	ldr	r0, [pc, #24]	@ (80008d4 <MX_RTC_Init+0xac>)
 80008bc:	f003 fccf 	bl	800425e <HAL_RTC_SetDate>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80008c6:	f000 f9a8 	bl	8000c1a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200003e4 	.word	0x200003e4
 80008d8:	40002800 	.word	0x40002800

080008dc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008e0:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <MX_SPI3_Init+0x64>)
 80008e2:	4a18      	ldr	r2, [pc, #96]	@ (8000944 <MX_SPI3_Init+0x68>)
 80008e4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008e6:	4b16      	ldr	r3, [pc, #88]	@ (8000940 <MX_SPI3_Init+0x64>)
 80008e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008ec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008ee:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <MX_SPI3_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f4:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <MX_SPI3_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fa:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <MX_SPI3_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000900:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <MX_SPI3_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000906:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <MX_SPI3_Init+0x64>)
 8000908:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800090c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800090e:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <MX_SPI3_Init+0x64>)
 8000910:	2210      	movs	r2, #16
 8000912:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000914:	4b0a      	ldr	r3, [pc, #40]	@ (8000940 <MX_SPI3_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <MX_SPI3_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000920:	4b07      	ldr	r3, [pc, #28]	@ (8000940 <MX_SPI3_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000926:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <MX_SPI3_Init+0x64>)
 8000928:	220a      	movs	r2, #10
 800092a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800092c:	4804      	ldr	r0, [pc, #16]	@ (8000940 <MX_SPI3_Init+0x64>)
 800092e:	f003 fdbb 	bl	80044a8 <HAL_SPI_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000938:	f000 f96f 	bl	8000c1a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000404 	.word	0x20000404
 8000944:	40003c00 	.word	0x40003c00

08000948 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095c:	463b      	mov	r3, r7
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000964:	4b1d      	ldr	r3, [pc, #116]	@ (80009dc <MX_TIM3_Init+0x94>)
 8000966:	4a1e      	ldr	r2, [pc, #120]	@ (80009e0 <MX_TIM3_Init+0x98>)
 8000968:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800096a:	4b1c      	ldr	r3, [pc, #112]	@ (80009dc <MX_TIM3_Init+0x94>)
 800096c:	2200      	movs	r2, #0
 800096e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000970:	4b1a      	ldr	r3, [pc, #104]	@ (80009dc <MX_TIM3_Init+0x94>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4000 - 1;
 8000976:	4b19      	ldr	r3, [pc, #100]	@ (80009dc <MX_TIM3_Init+0x94>)
 8000978:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800097c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097e:	4b17      	ldr	r3, [pc, #92]	@ (80009dc <MX_TIM3_Init+0x94>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000984:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <MX_TIM3_Init+0x94>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800098a:	4814      	ldr	r0, [pc, #80]	@ (80009dc <MX_TIM3_Init+0x94>)
 800098c:	f004 f9e4 	bl	8004d58 <HAL_TIM_Base_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000996:	f000 f940 	bl	8000c1a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800099e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	4619      	mov	r1, r3
 80009a6:	480d      	ldr	r0, [pc, #52]	@ (80009dc <MX_TIM3_Init+0x94>)
 80009a8:	f004 fba7 	bl	80050fa <HAL_TIM_ConfigClockSource>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80009b2:	f000 f932 	bl	8000c1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009b6:	2320      	movs	r3, #32
 80009b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009be:	463b      	mov	r3, r7
 80009c0:	4619      	mov	r1, r3
 80009c2:	4806      	ldr	r0, [pc, #24]	@ (80009dc <MX_TIM3_Init+0x94>)
 80009c4:	f004 fdae 	bl	8005524 <HAL_TIMEx_MasterConfigSynchronization>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80009ce:	f000 f924 	bl	8000c1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2000045c 	.word	0x2000045c
 80009e0:	40000400 	.word	0x40000400

080009e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e8:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	@ (8000a34 <MX_USART2_UART_Init+0x50>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ee:	4b10      	ldr	r3, [pc, #64]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a1c:	f004 fe04 	bl	8005628 <HAL_UART_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a26:	f000 f8f8 	bl	8000c1a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200004a4 	.word	0x200004a4
 8000a34:	40004400 	.word	0x40004400

08000a38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <MX_DMA_Init+0x3c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a0b      	ldr	r2, [pc, #44]	@ (8000a74 <MX_DMA_Init+0x3c>)
 8000a48:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <MX_DMA_Init+0x3c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2105      	movs	r1, #5
 8000a5e:	2038      	movs	r0, #56	@ 0x38
 8000a60:	f001 fec2 	bl	80027e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a64:	2038      	movs	r0, #56	@ 0x38
 8000a66:	f001 fedb 	bl	8002820 <HAL_NVIC_EnableIRQ>

}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800

08000a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	@ 0x28
 8000a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	4b47      	ldr	r3, [pc, #284]	@ (8000bb0 <MX_GPIO_Init+0x138>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	4a46      	ldr	r2, [pc, #280]	@ (8000bb0 <MX_GPIO_Init+0x138>)
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9e:	4b44      	ldr	r3, [pc, #272]	@ (8000bb0 <MX_GPIO_Init+0x138>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	f003 0304 	and.w	r3, r3, #4
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	4b40      	ldr	r3, [pc, #256]	@ (8000bb0 <MX_GPIO_Init+0x138>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	4a3f      	ldr	r2, [pc, #252]	@ (8000bb0 <MX_GPIO_Init+0x138>)
 8000ab4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aba:	4b3d      	ldr	r3, [pc, #244]	@ (8000bb0 <MX_GPIO_Init+0x138>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	4b39      	ldr	r3, [pc, #228]	@ (8000bb0 <MX_GPIO_Init+0x138>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	4a38      	ldr	r2, [pc, #224]	@ (8000bb0 <MX_GPIO_Init+0x138>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad6:	4b36      	ldr	r3, [pc, #216]	@ (8000bb0 <MX_GPIO_Init+0x138>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b32      	ldr	r3, [pc, #200]	@ (8000bb0 <MX_GPIO_Init+0x138>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	4a31      	ldr	r2, [pc, #196]	@ (8000bb0 <MX_GPIO_Init+0x138>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af2:	4b2f      	ldr	r3, [pc, #188]	@ (8000bb0 <MX_GPIO_Init+0x138>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2120      	movs	r1, #32
 8000b02:	482c      	ldr	r0, [pc, #176]	@ (8000bb4 <MX_GPIO_Init+0x13c>)
 8000b04:	f002 fb78 	bl	80031f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 8000b0e:	482a      	ldr	r0, [pc, #168]	@ (8000bb8 <MX_GPIO_Init+0x140>)
 8000b10:	f002 fb72 	bl	80031f8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(cs_GPIO_Port, cs_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2110      	movs	r1, #16
 8000b18:	4828      	ldr	r0, [pc, #160]	@ (8000bbc <MX_GPIO_Init+0x144>)
 8000b1a:	f002 fb6d 	bl	80031f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b24:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	4820      	ldr	r0, [pc, #128]	@ (8000bb8 <MX_GPIO_Init+0x140>)
 8000b36:	f002 f9db 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b42:	2302      	movs	r3, #2
 8000b44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	481a      	ldr	r0, [pc, #104]	@ (8000bb8 <MX_GPIO_Init+0x140>)
 8000b4e:	f002 f9cf 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b52:	2320      	movs	r3, #32
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4812      	ldr	r0, [pc, #72]	@ (8000bb4 <MX_GPIO_Init+0x13c>)
 8000b6a:	f002 f9c1 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Lock_Pin PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000b6e:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8000b72:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	480c      	ldr	r0, [pc, #48]	@ (8000bb8 <MX_GPIO_Init+0x140>)
 8000b88:	f002 f9b2 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : cs_Pin */
  GPIO_InitStruct.Pin = cs_Pin;
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(cs_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4806      	ldr	r0, [pc, #24]	@ (8000bbc <MX_GPIO_Init+0x144>)
 8000ba4:	f002 f9a4 	bl	8002ef0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba8:	bf00      	nop
 8000baa:	3728      	adds	r7, #40	@ 0x28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020000 	.word	0x40020000
 8000bb8:	40020800 	.word	0x40020800
 8000bbc:	40020400 	.word	0x40020400

08000bc0 <idle_task>:

/* USER CODE BEGIN 4 */
void idle_task(void *pvParameters){
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	while(1);
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <idle_task+0x8>

08000bcc <HAL_ADC_ConvCpltCallback>:
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim3);
 8000bd4:	4806      	ldr	r0, [pc, #24]	@ (8000bf0 <HAL_ADC_ConvCpltCallback+0x24>)
 8000bd6:	f004 f971 	bl	8004ebc <HAL_TIM_Base_Stop_IT>
	HAL_ADC_Stop_DMA(&hadc1);
 8000bda:	4806      	ldr	r0, [pc, #24]	@ (8000bf4 <HAL_ADC_ConvCpltCallback+0x28>)
 8000bdc:	f001 fab5 	bl	800214a <HAL_ADC_Stop_DMA>
	conv_cplt_flag = 1;
 8000be0:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	701a      	strb	r2, [r3, #0]
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	2000045c 	.word	0x2000045c
 8000bf4:	200002e8 	.word	0x200002e8
 8000bf8:	200004f4 	.word	0x200004f4

08000bfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c0c:	d101      	bne.n	8000c12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c0e:	f001 f905 	bl	8001e1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1e:	b672      	cpsid	i
}
 8000c20:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c22:	bf00      	nop
 8000c24:	e7fd      	b.n	8000c22 <Error_Handler+0x8>
	...

08000c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <HAL_MspInit+0x54>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c36:	4a11      	ldr	r2, [pc, #68]	@ (8000c7c <HAL_MspInit+0x54>)
 8000c38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <HAL_MspInit+0x54>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <HAL_MspInit+0x54>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c52:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <HAL_MspInit+0x54>)
 8000c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c5a:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <HAL_MspInit+0x54>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	210f      	movs	r1, #15
 8000c6a:	f06f 0001 	mvn.w	r0, #1
 8000c6e:	f001 fdbb 	bl	80027e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800

08000c80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	@ 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a32      	ldr	r2, [pc, #200]	@ (8000d68 <HAL_ADC_MspInit+0xe8>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d15e      	bne.n	8000d60 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b31      	ldr	r3, [pc, #196]	@ (8000d6c <HAL_ADC_MspInit+0xec>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000caa:	4a30      	ldr	r2, [pc, #192]	@ (8000d6c <HAL_ADC_MspInit+0xec>)
 8000cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cb2:	4b2e      	ldr	r3, [pc, #184]	@ (8000d6c <HAL_ADC_MspInit+0xec>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d6c <HAL_ADC_MspInit+0xec>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	4a29      	ldr	r2, [pc, #164]	@ (8000d6c <HAL_ADC_MspInit+0xec>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cce:	4b27      	ldr	r3, [pc, #156]	@ (8000d6c <HAL_ADC_MspInit+0xec>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	4820      	ldr	r0, [pc, #128]	@ (8000d70 <HAL_ADC_MspInit+0xf0>)
 8000cee:	f002 f8ff 	bl	8002ef0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000cf2:	4b20      	ldr	r3, [pc, #128]	@ (8000d74 <HAL_ADC_MspInit+0xf4>)
 8000cf4:	4a20      	ldr	r2, [pc, #128]	@ (8000d78 <HAL_ADC_MspInit+0xf8>)
 8000cf6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d74 <HAL_ADC_MspInit+0xf4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000d74 <HAL_ADC_MspInit+0xf4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d04:	4b1b      	ldr	r3, [pc, #108]	@ (8000d74 <HAL_ADC_MspInit+0xf4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <HAL_ADC_MspInit+0xf4>)
 8000d0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d10:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d12:	4b18      	ldr	r3, [pc, #96]	@ (8000d74 <HAL_ADC_MspInit+0xf4>)
 8000d14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d18:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d1a:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <HAL_ADC_MspInit+0xf4>)
 8000d1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d20:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000d22:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <HAL_ADC_MspInit+0xf4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d28:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <HAL_ADC_MspInit+0xf4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <HAL_ADC_MspInit+0xf4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d34:	480f      	ldr	r0, [pc, #60]	@ (8000d74 <HAL_ADC_MspInit+0xf4>)
 8000d36:	f001 fd81 	bl	800283c <HAL_DMA_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000d40:	f7ff ff6b 	bl	8000c1a <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a0b      	ldr	r2, [pc, #44]	@ (8000d74 <HAL_ADC_MspInit+0xf4>)
 8000d48:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d74 <HAL_ADC_MspInit+0xf4>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2105      	movs	r1, #5
 8000d54:	2012      	movs	r0, #18
 8000d56:	f001 fd47 	bl	80027e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000d5a:	2012      	movs	r0, #18
 8000d5c:	f001 fd60 	bl	8002820 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	@ 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40012000 	.word	0x40012000
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020000 	.word	0x40020000
 8000d74:	20000330 	.word	0x20000330
 8000d78:	40026410 	.word	0x40026410

08000d7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	@ 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a19      	ldr	r2, [pc, #100]	@ (8000e00 <HAL_I2C_MspInit+0x84>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d12b      	bne.n	8000df6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	4b18      	ldr	r3, [pc, #96]	@ (8000e04 <HAL_I2C_MspInit+0x88>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	4a17      	ldr	r2, [pc, #92]	@ (8000e04 <HAL_I2C_MspInit+0x88>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dae:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <HAL_I2C_MspInit+0x88>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dba:	23c0      	movs	r3, #192	@ 0xc0
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dbe:	2312      	movs	r3, #18
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dca:	2304      	movs	r3, #4
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480c      	ldr	r0, [pc, #48]	@ (8000e08 <HAL_I2C_MspInit+0x8c>)
 8000dd6:	f002 f88b 	bl	8002ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <HAL_I2C_MspInit+0x88>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de2:	4a08      	ldr	r2, [pc, #32]	@ (8000e04 <HAL_I2C_MspInit+0x88>)
 8000de4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dea:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_I2C_MspInit+0x88>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000df6:	bf00      	nop
 8000df8:	3728      	adds	r7, #40	@ 0x28
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40005400 	.word	0x40005400
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020400 	.word	0x40020400

08000e0c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0c      	ldr	r2, [pc, #48]	@ (8000e5c <HAL_RTC_MspInit+0x50>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d111      	bne.n	8000e52 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e36:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f003 f803 	bl	8003e48 <HAL_RCCEx_PeriphCLKConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000e48:	f7ff fee7 	bl	8000c1a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e4c:	4b04      	ldr	r3, [pc, #16]	@ (8000e60 <HAL_RTC_MspInit+0x54>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e52:	bf00      	nop
 8000e54:	3720      	adds	r7, #32
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40002800 	.word	0x40002800
 8000e60:	42470e3c 	.word	0x42470e3c

08000e64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	@ 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a19      	ldr	r2, [pc, #100]	@ (8000ee8 <HAL_SPI_MspInit+0x84>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d12c      	bne.n	8000ee0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b18      	ldr	r3, [pc, #96]	@ (8000eec <HAL_SPI_MspInit+0x88>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8e:	4a17      	ldr	r2, [pc, #92]	@ (8000eec <HAL_SPI_MspInit+0x88>)
 8000e90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e96:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <HAL_SPI_MspInit+0x88>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b11      	ldr	r3, [pc, #68]	@ (8000eec <HAL_SPI_MspInit+0x88>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	4a10      	ldr	r2, [pc, #64]	@ (8000eec <HAL_SPI_MspInit+0x88>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <HAL_SPI_MspInit+0x88>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000ebe:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ed0:	2306      	movs	r3, #6
 8000ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4805      	ldr	r0, [pc, #20]	@ (8000ef0 <HAL_SPI_MspInit+0x8c>)
 8000edc:	f002 f808 	bl	8002ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ee0:	bf00      	nop
 8000ee2:	3728      	adds	r7, #40	@ 0x28
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40003c00 	.word	0x40003c00
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020800 	.word	0x40020800

08000ef4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0e      	ldr	r2, [pc, #56]	@ (8000f3c <HAL_TIM_Base_MspInit+0x48>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d115      	bne.n	8000f32 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f40 <HAL_TIM_Base_MspInit+0x4c>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8000f40 <HAL_TIM_Base_MspInit+0x4c>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f16:	4b0a      	ldr	r3, [pc, #40]	@ (8000f40 <HAL_TIM_Base_MspInit+0x4c>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2105      	movs	r1, #5
 8000f26:	201d      	movs	r0, #29
 8000f28:	f001 fc5e 	bl	80027e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f2c:	201d      	movs	r0, #29
 8000f2e:	f001 fc77 	bl	8002820 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40000400 	.word	0x40000400
 8000f40:	40023800 	.word	0x40023800

08000f44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	@ 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a19      	ldr	r2, [pc, #100]	@ (8000fc8 <HAL_UART_MspInit+0x84>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d12b      	bne.n	8000fbe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	4b18      	ldr	r3, [pc, #96]	@ (8000fcc <HAL_UART_MspInit+0x88>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6e:	4a17      	ldr	r2, [pc, #92]	@ (8000fcc <HAL_UART_MspInit+0x88>)
 8000f70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f76:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <HAL_UART_MspInit+0x88>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <HAL_UART_MspInit+0x88>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	4a10      	ldr	r2, [pc, #64]	@ (8000fcc <HAL_UART_MspInit+0x88>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f92:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <HAL_UART_MspInit+0x88>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f9e:	230c      	movs	r3, #12
 8000fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fae:	2307      	movs	r3, #7
 8000fb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <HAL_UART_MspInit+0x8c>)
 8000fba:	f001 ff99 	bl	8002ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fbe:	bf00      	nop
 8000fc0:	3728      	adds	r7, #40	@ 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40004400 	.word	0x40004400
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020000 	.word	0x40020000

08000fd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08e      	sub	sp, #56	@ 0x38
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	4b34      	ldr	r3, [pc, #208]	@ (80010bc <HAL_InitTick+0xe8>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fec:	4a33      	ldr	r2, [pc, #204]	@ (80010bc <HAL_InitTick+0xe8>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff4:	4b31      	ldr	r3, [pc, #196]	@ (80010bc <HAL_InitTick+0xe8>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001000:	f107 0210 	add.w	r2, r7, #16
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4611      	mov	r1, r2
 800100a:	4618      	mov	r0, r3
 800100c:	f002 feea 	bl	8003de4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001010:	6a3b      	ldr	r3, [r7, #32]
 8001012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001016:	2b00      	cmp	r3, #0
 8001018:	d103      	bne.n	8001022 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800101a:	f002 febb 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 800101e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001020:	e004      	b.n	800102c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001022:	f002 feb7 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 8001026:	4603      	mov	r3, r0
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800102c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800102e:	4a24      	ldr	r2, [pc, #144]	@ (80010c0 <HAL_InitTick+0xec>)
 8001030:	fba2 2303 	umull	r2, r3, r2, r3
 8001034:	0c9b      	lsrs	r3, r3, #18
 8001036:	3b01      	subs	r3, #1
 8001038:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800103a:	4b22      	ldr	r3, [pc, #136]	@ (80010c4 <HAL_InitTick+0xf0>)
 800103c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001040:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001042:	4b20      	ldr	r3, [pc, #128]	@ (80010c4 <HAL_InitTick+0xf0>)
 8001044:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001048:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800104a:	4a1e      	ldr	r2, [pc, #120]	@ (80010c4 <HAL_InitTick+0xf0>)
 800104c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800104e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001050:	4b1c      	ldr	r3, [pc, #112]	@ (80010c4 <HAL_InitTick+0xf0>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001056:	4b1b      	ldr	r3, [pc, #108]	@ (80010c4 <HAL_InitTick+0xf0>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105c:	4b19      	ldr	r3, [pc, #100]	@ (80010c4 <HAL_InitTick+0xf0>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001062:	4818      	ldr	r0, [pc, #96]	@ (80010c4 <HAL_InitTick+0xf0>)
 8001064:	f003 fe78 	bl	8004d58 <HAL_TIM_Base_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800106e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001072:	2b00      	cmp	r3, #0
 8001074:	d11b      	bne.n	80010ae <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001076:	4813      	ldr	r0, [pc, #76]	@ (80010c4 <HAL_InitTick+0xf0>)
 8001078:	f003 febe 	bl	8004df8 <HAL_TIM_Base_Start_IT>
 800107c:	4603      	mov	r3, r0
 800107e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001082:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001086:	2b00      	cmp	r3, #0
 8001088:	d111      	bne.n	80010ae <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800108a:	201c      	movs	r0, #28
 800108c:	f001 fbc8 	bl	8002820 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b0f      	cmp	r3, #15
 8001094:	d808      	bhi.n	80010a8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001096:	2200      	movs	r2, #0
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	201c      	movs	r0, #28
 800109c:	f001 fba4 	bl	80027e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010a0:	4a09      	ldr	r2, [pc, #36]	@ (80010c8 <HAL_InitTick+0xf4>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e002      	b.n	80010ae <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010ae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3738      	adds	r7, #56	@ 0x38
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800
 80010c0:	431bde83 	.word	0x431bde83
 80010c4:	200004f8 	.word	0x200004f8
 80010c8:	20000008 	.word	0x20000008

080010cc <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80010d0:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <SDTimer_Handler+0x40>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d006      	beq.n	80010e8 <SDTimer_Handler+0x1c>
    Timer1--;
 80010da:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <SDTimer_Handler+0x40>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	3b01      	subs	r3, #1
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	4b09      	ldr	r3, [pc, #36]	@ (800110c <SDTimer_Handler+0x40>)
 80010e6:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80010e8:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <SDTimer_Handler+0x44>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d006      	beq.n	8001100 <SDTimer_Handler+0x34>
    Timer2--;
 80010f2:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <SDTimer_Handler+0x44>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	3b01      	subs	r3, #1
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	4b04      	ldr	r3, [pc, #16]	@ (8001110 <SDTimer_Handler+0x44>)
 80010fe:	701a      	strb	r2, [r3, #0]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20000541 	.word	0x20000541
 8001110:	20000542 	.word	0x20000542

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <NMI_Handler+0x4>

0800111c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <HardFault_Handler+0x4>

08001124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <MemManage_Handler+0x4>

0800112c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <BusFault_Handler+0x4>

08001134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <UsageFault_Handler+0x4>

0800113c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001150:	4802      	ldr	r0, [pc, #8]	@ (800115c <ADC_IRQHandler+0x10>)
 8001152:	f000 feea 	bl	8001f2a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200002e8 	.word	0x200002e8

08001160 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  FatFsCnt++;
 8001164:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <TIM2_IRQHandler+0x30>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	3301      	adds	r3, #1
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <TIM2_IRQHandler+0x30>)
 8001170:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10){
 8001172:	4b07      	ldr	r3, [pc, #28]	@ (8001190 <TIM2_IRQHandler+0x30>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b09      	cmp	r3, #9
 800117a:	d904      	bls.n	8001186 <TIM2_IRQHandler+0x26>
	  FatFsCnt = 0;
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <TIM2_IRQHandler+0x30>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 8001182:	f7ff ffa3 	bl	80010cc <SDTimer_Handler>
  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001186:	4803      	ldr	r0, [pc, #12]	@ (8001194 <TIM2_IRQHandler+0x34>)
 8001188:	f003 fec7 	bl	8004f1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000540 	.word	0x20000540
 8001194:	200004f8 	.word	0x200004f8

08001198 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800119c:	4802      	ldr	r0, [pc, #8]	@ (80011a8 <TIM3_IRQHandler+0x10>)
 800119e:	f003 febc 	bl	8004f1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000045c 	.word	0x2000045c

080011ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011b0:	4802      	ldr	r0, [pc, #8]	@ (80011bc <DMA2_Stream0_IRQHandler+0x10>)
 80011b2:	f001 fc61 	bl	8002a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000330 	.word	0x20000330

080011c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c8:	4a14      	ldr	r2, [pc, #80]	@ (800121c <_sbrk+0x5c>)
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <_sbrk+0x60>)
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d4:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <_sbrk+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d102      	bne.n	80011e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011dc:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <_sbrk+0x64>)
 80011de:	4a12      	ldr	r2, [pc, #72]	@ (8001228 <_sbrk+0x68>)
 80011e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e2:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <_sbrk+0x64>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d207      	bcs.n	8001200 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f0:	f00a fac8 	bl	800b784 <__errno>
 80011f4:	4603      	mov	r3, r0
 80011f6:	220c      	movs	r2, #12
 80011f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	e009      	b.n	8001214 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001200:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <_sbrk+0x64>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <_sbrk+0x64>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	4a05      	ldr	r2, [pc, #20]	@ (8001224 <_sbrk+0x64>)
 8001210:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001212:	68fb      	ldr	r3, [r7, #12]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20018000 	.word	0x20018000
 8001220:	00000400 	.word	0x00000400
 8001224:	20000544 	.word	0x20000544
 8001228:	2000ffb8 	.word	0x2000ffb8

0800122c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001230:	4b06      	ldr	r3, [pc, #24]	@ (800124c <SystemInit+0x20>)
 8001232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001236:	4a05      	ldr	r2, [pc, #20]	@ (800124c <SystemInit+0x20>)
 8001238:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800123c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8001250:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001288 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001254:	f7ff ffea 	bl	800122c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001258:	480c      	ldr	r0, [pc, #48]	@ (800128c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800125a:	490d      	ldr	r1, [pc, #52]	@ (8001290 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800125c:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001260:	e002      	b.n	8001268 <LoopCopyDataInit>

08001262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001266:	3304      	adds	r3, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800126c:	d3f9      	bcc.n	8001262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126e:	4a0a      	ldr	r2, [pc, #40]	@ (8001298 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001270:	4c0a      	ldr	r4, [pc, #40]	@ (800129c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001274:	e001      	b.n	800127a <LoopFillZerobss>

08001276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001278:	3204      	adds	r2, #4

0800127a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800127c:	d3fb      	bcc.n	8001276 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800127e:	f00a fa87 	bl	800b790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001282:	f7ff f997 	bl	80005b4 <main>
  bx  lr    
 8001286:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001288:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800128c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001290:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001294:	0800c658 	.word	0x0800c658
  ldr r2, =_sbss
 8001298:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800129c:	2000ffb4 	.word	0x2000ffb4

080012a0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <DMA1_Stream0_IRQHandler>
	...

080012a4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2110      	movs	r1, #16
 80012ac:	4803      	ldr	r0, [pc, #12]	@ (80012bc <SELECT+0x18>)
 80012ae:	f001 ffa3 	bl	80031f8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80012b2:	2001      	movs	r0, #1
 80012b4:	f000 fdd2 	bl	8001e5c <HAL_Delay>
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40020400 	.word	0x40020400

080012c0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	2110      	movs	r1, #16
 80012c8:	4803      	ldr	r0, [pc, #12]	@ (80012d8 <DESELECT+0x18>)
 80012ca:	f001 ff95 	bl	80031f8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80012ce:	2001      	movs	r0, #1
 80012d0:	f000 fdc4 	bl	8001e5c <HAL_Delay>
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40020400 	.word	0x40020400

080012dc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80012e6:	bf00      	nop
 80012e8:	4b08      	ldr	r3, [pc, #32]	@ (800130c <SPI_TxByte+0x30>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d1f8      	bne.n	80012e8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80012f6:	1df9      	adds	r1, r7, #7
 80012f8:	2364      	movs	r3, #100	@ 0x64
 80012fa:	2201      	movs	r2, #1
 80012fc:	4803      	ldr	r0, [pc, #12]	@ (800130c <SPI_TxByte+0x30>)
 80012fe:	f003 f95c 	bl	80045ba <HAL_SPI_Transmit>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000404 	.word	0x20000404

08001310 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800131c:	bf00      	nop
 800131e:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <SPI_TxBuffer+0x30>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b02      	cmp	r3, #2
 800132a:	d1f8      	bne.n	800131e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800132c:	887a      	ldrh	r2, [r7, #2]
 800132e:	2364      	movs	r3, #100	@ 0x64
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	4803      	ldr	r0, [pc, #12]	@ (8001340 <SPI_TxBuffer+0x30>)
 8001334:	f003 f941 	bl	80045ba <HAL_SPI_Transmit>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000404 	.word	0x20000404

08001344 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800134a:	23ff      	movs	r3, #255	@ 0xff
 800134c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800134e:	bf00      	nop
 8001350:	4b09      	ldr	r3, [pc, #36]	@ (8001378 <SPI_RxByte+0x34>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b02      	cmp	r3, #2
 800135c:	d1f8      	bne.n	8001350 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800135e:	1dba      	adds	r2, r7, #6
 8001360:	1df9      	adds	r1, r7, #7
 8001362:	2364      	movs	r3, #100	@ 0x64
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2301      	movs	r3, #1
 8001368:	4803      	ldr	r0, [pc, #12]	@ (8001378 <SPI_RxByte+0x34>)
 800136a:	f003 fa69 	bl	8004840 <HAL_SPI_TransmitReceive>

	return data;
 800136e:	79bb      	ldrb	r3, [r7, #6]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000404 	.word	0x20000404

0800137c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001384:	f7ff ffde 	bl	8001344 <SPI_RxByte>
 8001388:	4603      	mov	r3, r0
 800138a:	461a      	mov	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	701a      	strb	r2, [r3, #0]
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800139e:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <SD_ReadyWait+0x30>)
 80013a0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80013a4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80013a6:	f7ff ffcd 	bl	8001344 <SPI_RxByte>
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	2bff      	cmp	r3, #255	@ 0xff
 80013b2:	d004      	beq.n	80013be <SD_ReadyWait+0x26>
 80013b4:	4b04      	ldr	r3, [pc, #16]	@ (80013c8 <SD_ReadyWait+0x30>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f3      	bne.n	80013a6 <SD_ReadyWait+0xe>

	return res;
 80013be:	79fb      	ldrb	r3, [r7, #7]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000542 	.word	0x20000542

080013cc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80013d2:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80013d6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80013d8:	f7ff ff72 	bl	80012c0 <DESELECT>
	for(int i = 0; i < 10; i++)
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	e005      	b.n	80013ee <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80013e2:	20ff      	movs	r0, #255	@ 0xff
 80013e4:	f7ff ff7a 	bl	80012dc <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	3301      	adds	r3, #1
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	2b09      	cmp	r3, #9
 80013f2:	ddf6      	ble.n	80013e2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80013f4:	f7ff ff56 	bl	80012a4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80013f8:	2340      	movs	r3, #64	@ 0x40
 80013fa:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800140c:	2395      	movs	r3, #149	@ 0x95
 800140e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001410:	463b      	mov	r3, r7
 8001412:	2106      	movs	r1, #6
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff7b 	bl	8001310 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800141a:	e002      	b.n	8001422 <SD_PowerOn+0x56>
	{
		cnt--;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3b01      	subs	r3, #1
 8001420:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001422:	f7ff ff8f 	bl	8001344 <SPI_RxByte>
 8001426:	4603      	mov	r3, r0
 8001428:	2b01      	cmp	r3, #1
 800142a:	d002      	beq.n	8001432 <SD_PowerOn+0x66>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f4      	bne.n	800141c <SD_PowerOn+0x50>
	}

	DESELECT();
 8001432:	f7ff ff45 	bl	80012c0 <DESELECT>
	SPI_TxByte(0XFF);
 8001436:	20ff      	movs	r0, #255	@ 0xff
 8001438:	f7ff ff50 	bl	80012dc <SPI_TxByte>

	PowerFlag = 1;
 800143c:	4b03      	ldr	r3, [pc, #12]	@ (800144c <SD_PowerOn+0x80>)
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
}
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000549 	.word	0x20000549

08001450 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001454:	4b03      	ldr	r3, [pc, #12]	@ (8001464 <SD_PowerOff+0x14>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	20000549 	.word	0x20000549

08001468 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800146c:	4b03      	ldr	r3, [pc, #12]	@ (800147c <SD_CheckPower+0x14>)
 800146e:	781b      	ldrb	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000549 	.word	0x20000549

08001480 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800148a:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <SD_RxDataBlock+0x5c>)
 800148c:	22c8      	movs	r2, #200	@ 0xc8
 800148e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001490:	f7ff ff58 	bl	8001344 <SPI_RxByte>
 8001494:	4603      	mov	r3, r0
 8001496:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	2bff      	cmp	r3, #255	@ 0xff
 800149c:	d104      	bne.n	80014a8 <SD_RxDataBlock+0x28>
 800149e:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <SD_RxDataBlock+0x5c>)
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1f3      	bne.n	8001490 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	2bfe      	cmp	r3, #254	@ 0xfe
 80014ac:	d001      	beq.n	80014b2 <SD_RxDataBlock+0x32>
 80014ae:	2300      	movs	r3, #0
 80014b0:	e00f      	b.n	80014d2 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	1c5a      	adds	r2, r3, #1
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff5f 	bl	800137c <SPI_RxBytePtr>
	} while(len--);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	1e5a      	subs	r2, r3, #1
 80014c2:	603a      	str	r2, [r7, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1f4      	bne.n	80014b2 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80014c8:	f7ff ff3c 	bl	8001344 <SPI_RxByte>
	SPI_RxByte();
 80014cc:	f7ff ff3a 	bl	8001344 <SPI_RxByte>

	return TRUE;
 80014d0:	2301      	movs	r3, #1
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000541 	.word	0x20000541

080014e0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80014f0:	f7ff ff52 	bl	8001398 <SD_ReadyWait>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2bff      	cmp	r3, #255	@ 0xff
 80014f8:	d001      	beq.n	80014fe <SD_TxDataBlock+0x1e>
 80014fa:	2300      	movs	r3, #0
 80014fc:	e02f      	b.n	800155e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80014fe:	78fb      	ldrb	r3, [r7, #3]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff feeb 	bl	80012dc <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	2bfd      	cmp	r3, #253	@ 0xfd
 800150a:	d020      	beq.n	800154e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800150c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff fefd 	bl	8001310 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001516:	f7ff ff15 	bl	8001344 <SPI_RxByte>
		SPI_RxByte();
 800151a:	f7ff ff13 	bl	8001344 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800151e:	e00b      	b.n	8001538 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001520:	f7ff ff10 	bl	8001344 <SPI_RxByte>
 8001524:	4603      	mov	r3, r0
 8001526:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	f003 031f 	and.w	r3, r3, #31
 800152e:	2b05      	cmp	r3, #5
 8001530:	d006      	beq.n	8001540 <SD_TxDataBlock+0x60>
			i++;
 8001532:	7bbb      	ldrb	r3, [r7, #14]
 8001534:	3301      	adds	r3, #1
 8001536:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001538:	7bbb      	ldrb	r3, [r7, #14]
 800153a:	2b40      	cmp	r3, #64	@ 0x40
 800153c:	d9f0      	bls.n	8001520 <SD_TxDataBlock+0x40>
 800153e:	e000      	b.n	8001542 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001540:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001542:	bf00      	nop
 8001544:	f7ff fefe 	bl	8001344 <SPI_RxByte>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0fa      	beq.n	8001544 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	f003 031f 	and.w	r3, r3, #31
 8001554:	2b05      	cmp	r3, #5
 8001556:	d101      	bne.n	800155c <SD_TxDataBlock+0x7c>
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <SD_TxDataBlock+0x7e>

	return FALSE;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b084      	sub	sp, #16
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	6039      	str	r1, [r7, #0]
 8001570:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001572:	f7ff ff11 	bl	8001398 <SD_ReadyWait>
 8001576:	4603      	mov	r3, r0
 8001578:	2bff      	cmp	r3, #255	@ 0xff
 800157a:	d001      	beq.n	8001580 <SD_SendCmd+0x1a>
 800157c:	23ff      	movs	r3, #255	@ 0xff
 800157e:	e042      	b.n	8001606 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff feaa 	bl	80012dc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	0e1b      	lsrs	r3, r3, #24
 800158c:	b2db      	uxtb	r3, r3
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fea4 	bl	80012dc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	0c1b      	lsrs	r3, r3, #16
 8001598:	b2db      	uxtb	r3, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fe9e 	bl	80012dc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	0a1b      	lsrs	r3, r3, #8
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fe98 	bl	80012dc <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fe93 	bl	80012dc <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b40      	cmp	r3, #64	@ 0x40
 80015ba:	d102      	bne.n	80015c2 <SD_SendCmd+0x5c>
 80015bc:	2395      	movs	r3, #149	@ 0x95
 80015be:	73fb      	strb	r3, [r7, #15]
 80015c0:	e007      	b.n	80015d2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2b48      	cmp	r3, #72	@ 0x48
 80015c6:	d102      	bne.n	80015ce <SD_SendCmd+0x68>
 80015c8:	2387      	movs	r3, #135	@ 0x87
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	e001      	b.n	80015d2 <SD_SendCmd+0x6c>
	else crc = 1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fe81 	bl	80012dc <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2b4c      	cmp	r3, #76	@ 0x4c
 80015de:	d101      	bne.n	80015e4 <SD_SendCmd+0x7e>
 80015e0:	f7ff feb0 	bl	8001344 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80015e4:	230a      	movs	r3, #10
 80015e6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80015e8:	f7ff feac 	bl	8001344 <SPI_RxByte>
 80015ec:	4603      	mov	r3, r0
 80015ee:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80015f0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	da05      	bge.n	8001604 <SD_SendCmd+0x9e>
 80015f8:	7bbb      	ldrb	r3, [r7, #14]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	73bb      	strb	r3, [r7, #14]
 80015fe:	7bbb      	ldrb	r3, [r7, #14]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1f1      	bne.n	80015e8 <SD_SendCmd+0x82>

	return res;
 8001604:	7b7b      	ldrb	r3, [r7, #13]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <SD_disk_initialize+0x14>
 8001620:	2301      	movs	r3, #1
 8001622:	e0d6      	b.n	80017d2 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001624:	4b6d      	ldr	r3, [pc, #436]	@ (80017dc <SD_disk_initialize+0x1cc>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <SD_disk_initialize+0x2a>
 8001632:	4b6a      	ldr	r3, [pc, #424]	@ (80017dc <SD_disk_initialize+0x1cc>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	e0cb      	b.n	80017d2 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800163a:	f7ff fec7 	bl	80013cc <SD_PowerOn>

	/* slave select */
	SELECT();
 800163e:	f7ff fe31 	bl	80012a4 <SELECT>

	/* check disk type */
	type = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001646:	2100      	movs	r1, #0
 8001648:	2040      	movs	r0, #64	@ 0x40
 800164a:	f7ff ff8c 	bl	8001566 <SD_SendCmd>
 800164e:	4603      	mov	r3, r0
 8001650:	2b01      	cmp	r3, #1
 8001652:	f040 80a6 	bne.w	80017a2 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001656:	4b62      	ldr	r3, [pc, #392]	@ (80017e0 <SD_disk_initialize+0x1d0>)
 8001658:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800165c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800165e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001662:	2048      	movs	r0, #72	@ 0x48
 8001664:	f7ff ff7f 	bl	8001566 <SD_SendCmd>
 8001668:	4603      	mov	r3, r0
 800166a:	2b01      	cmp	r3, #1
 800166c:	d158      	bne.n	8001720 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800166e:	2300      	movs	r3, #0
 8001670:	73fb      	strb	r3, [r7, #15]
 8001672:	e00c      	b.n	800168e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001674:	7bfc      	ldrb	r4, [r7, #15]
 8001676:	f7ff fe65 	bl	8001344 <SPI_RxByte>
 800167a:	4603      	mov	r3, r0
 800167c:	461a      	mov	r2, r3
 800167e:	f104 0310 	add.w	r3, r4, #16
 8001682:	443b      	add	r3, r7
 8001684:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	3301      	adds	r3, #1
 800168c:	73fb      	strb	r3, [r7, #15]
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	2b03      	cmp	r3, #3
 8001692:	d9ef      	bls.n	8001674 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001694:	7abb      	ldrb	r3, [r7, #10]
 8001696:	2b01      	cmp	r3, #1
 8001698:	f040 8083 	bne.w	80017a2 <SD_disk_initialize+0x192>
 800169c:	7afb      	ldrb	r3, [r7, #11]
 800169e:	2baa      	cmp	r3, #170	@ 0xaa
 80016a0:	d17f      	bne.n	80017a2 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80016a2:	2100      	movs	r1, #0
 80016a4:	2077      	movs	r0, #119	@ 0x77
 80016a6:	f7ff ff5e 	bl	8001566 <SD_SendCmd>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d807      	bhi.n	80016c0 <SD_disk_initialize+0xb0>
 80016b0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80016b4:	2069      	movs	r0, #105	@ 0x69
 80016b6:	f7ff ff56 	bl	8001566 <SD_SendCmd>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <SD_disk_initialize+0xbc>
				} while (Timer1);
 80016c0:	4b47      	ldr	r3, [pc, #284]	@ (80017e0 <SD_disk_initialize+0x1d0>)
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1eb      	bne.n	80016a2 <SD_disk_initialize+0x92>
 80016ca:	e000      	b.n	80016ce <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80016cc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80016ce:	4b44      	ldr	r3, [pc, #272]	@ (80017e0 <SD_disk_initialize+0x1d0>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d064      	beq.n	80017a2 <SD_disk_initialize+0x192>
 80016d8:	2100      	movs	r1, #0
 80016da:	207a      	movs	r0, #122	@ 0x7a
 80016dc:	f7ff ff43 	bl	8001566 <SD_SendCmd>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d15d      	bne.n	80017a2 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	73fb      	strb	r3, [r7, #15]
 80016ea:	e00c      	b.n	8001706 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 80016ec:	7bfc      	ldrb	r4, [r7, #15]
 80016ee:	f7ff fe29 	bl	8001344 <SPI_RxByte>
 80016f2:	4603      	mov	r3, r0
 80016f4:	461a      	mov	r2, r3
 80016f6:	f104 0310 	add.w	r3, r4, #16
 80016fa:	443b      	add	r3, r7
 80016fc:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	3301      	adds	r3, #1
 8001704:	73fb      	strb	r3, [r7, #15]
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	2b03      	cmp	r3, #3
 800170a:	d9ef      	bls.n	80016ec <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800170c:	7a3b      	ldrb	r3, [r7, #8]
 800170e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <SD_disk_initialize+0x10a>
 8001716:	230c      	movs	r3, #12
 8001718:	e000      	b.n	800171c <SD_disk_initialize+0x10c>
 800171a:	2304      	movs	r3, #4
 800171c:	73bb      	strb	r3, [r7, #14]
 800171e:	e040      	b.n	80017a2 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001720:	2100      	movs	r1, #0
 8001722:	2077      	movs	r0, #119	@ 0x77
 8001724:	f7ff ff1f 	bl	8001566 <SD_SendCmd>
 8001728:	4603      	mov	r3, r0
 800172a:	2b01      	cmp	r3, #1
 800172c:	d808      	bhi.n	8001740 <SD_disk_initialize+0x130>
 800172e:	2100      	movs	r1, #0
 8001730:	2069      	movs	r0, #105	@ 0x69
 8001732:	f7ff ff18 	bl	8001566 <SD_SendCmd>
 8001736:	4603      	mov	r3, r0
 8001738:	2b01      	cmp	r3, #1
 800173a:	d801      	bhi.n	8001740 <SD_disk_initialize+0x130>
 800173c:	2302      	movs	r3, #2
 800173e:	e000      	b.n	8001742 <SD_disk_initialize+0x132>
 8001740:	2301      	movs	r3, #1
 8001742:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001744:	7bbb      	ldrb	r3, [r7, #14]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d10e      	bne.n	8001768 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800174a:	2100      	movs	r1, #0
 800174c:	2077      	movs	r0, #119	@ 0x77
 800174e:	f7ff ff0a 	bl	8001566 <SD_SendCmd>
 8001752:	4603      	mov	r3, r0
 8001754:	2b01      	cmp	r3, #1
 8001756:	d80e      	bhi.n	8001776 <SD_disk_initialize+0x166>
 8001758:	2100      	movs	r1, #0
 800175a:	2069      	movs	r0, #105	@ 0x69
 800175c:	f7ff ff03 	bl	8001566 <SD_SendCmd>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d107      	bne.n	8001776 <SD_disk_initialize+0x166>
 8001766:	e00d      	b.n	8001784 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001768:	2100      	movs	r1, #0
 800176a:	2041      	movs	r0, #65	@ 0x41
 800176c:	f7ff fefb 	bl	8001566 <SD_SendCmd>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d005      	beq.n	8001782 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8001776:	4b1a      	ldr	r3, [pc, #104]	@ (80017e0 <SD_disk_initialize+0x1d0>)
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	b29b      	uxth	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1e1      	bne.n	8001744 <SD_disk_initialize+0x134>
 8001780:	e000      	b.n	8001784 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001782:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001784:	4b16      	ldr	r3, [pc, #88]	@ (80017e0 <SD_disk_initialize+0x1d0>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	b29b      	uxth	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d007      	beq.n	800179e <SD_disk_initialize+0x18e>
 800178e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001792:	2050      	movs	r0, #80	@ 0x50
 8001794:	f7ff fee7 	bl	8001566 <SD_SendCmd>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <SD_disk_initialize+0x192>
 800179e:	2300      	movs	r3, #0
 80017a0:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80017a2:	4a10      	ldr	r2, [pc, #64]	@ (80017e4 <SD_disk_initialize+0x1d4>)
 80017a4:	7bbb      	ldrb	r3, [r7, #14]
 80017a6:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80017a8:	f7ff fd8a 	bl	80012c0 <DESELECT>
	SPI_RxByte();
 80017ac:	f7ff fdca 	bl	8001344 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80017b0:	7bbb      	ldrb	r3, [r7, #14]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d008      	beq.n	80017c8 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80017b6:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <SD_disk_initialize+0x1cc>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <SD_disk_initialize+0x1cc>)
 80017c4:	701a      	strb	r2, [r3, #0]
 80017c6:	e001      	b.n	80017cc <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80017c8:	f7ff fe42 	bl	8001450 <SD_PowerOff>
	}

	return Stat;
 80017cc:	4b03      	ldr	r3, [pc, #12]	@ (80017dc <SD_disk_initialize+0x1cc>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b2db      	uxtb	r3, r3
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd90      	pop	{r4, r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000004 	.word	0x20000004
 80017e0:	20000541 	.word	0x20000541
 80017e4:	20000548 	.word	0x20000548

080017e8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <SD_disk_status+0x14>
 80017f8:	2301      	movs	r3, #1
 80017fa:	e002      	b.n	8001802 <SD_disk_status+0x1a>
	return Stat;
 80017fc:	4b04      	ldr	r3, [pc, #16]	@ (8001810 <SD_disk_status+0x28>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	b2db      	uxtb	r3, r3
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000004 	.word	0x20000004

08001814 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	4603      	mov	r3, r0
 8001822:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d102      	bne.n	8001830 <SD_disk_read+0x1c>
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <SD_disk_read+0x20>
 8001830:	2304      	movs	r3, #4
 8001832:	e051      	b.n	80018d8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001834:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <SD_disk_read+0xcc>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <SD_disk_read+0x32>
 8001842:	2303      	movs	r3, #3
 8001844:	e048      	b.n	80018d8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001846:	4b27      	ldr	r3, [pc, #156]	@ (80018e4 <SD_disk_read+0xd0>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	2b00      	cmp	r3, #0
 8001850:	d102      	bne.n	8001858 <SD_disk_read+0x44>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	025b      	lsls	r3, r3, #9
 8001856:	607b      	str	r3, [r7, #4]

	SELECT();
 8001858:	f7ff fd24 	bl	80012a4 <SELECT>

	if (count == 1)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d111      	bne.n	8001886 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	2051      	movs	r0, #81	@ 0x51
 8001866:	f7ff fe7e 	bl	8001566 <SD_SendCmd>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d129      	bne.n	80018c4 <SD_disk_read+0xb0>
 8001870:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001874:	68b8      	ldr	r0, [r7, #8]
 8001876:	f7ff fe03 	bl	8001480 <SD_RxDataBlock>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d021      	beq.n	80018c4 <SD_disk_read+0xb0>
 8001880:	2300      	movs	r3, #0
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	e01e      	b.n	80018c4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	2052      	movs	r0, #82	@ 0x52
 800188a:	f7ff fe6c 	bl	8001566 <SD_SendCmd>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d117      	bne.n	80018c4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001894:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001898:	68b8      	ldr	r0, [r7, #8]
 800189a:	f7ff fdf1 	bl	8001480 <SD_RxDataBlock>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00a      	beq.n	80018ba <SD_disk_read+0xa6>
				buff += 512;
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80018aa:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1ed      	bne.n	8001894 <SD_disk_read+0x80>
 80018b8:	e000      	b.n	80018bc <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80018ba:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80018bc:	2100      	movs	r1, #0
 80018be:	204c      	movs	r0, #76	@ 0x4c
 80018c0:	f7ff fe51 	bl	8001566 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80018c4:	f7ff fcfc 	bl	80012c0 <DESELECT>
	SPI_RxByte();
 80018c8:	f7ff fd3c 	bl	8001344 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	bf14      	ite	ne
 80018d2:	2301      	movne	r3, #1
 80018d4:	2300      	moveq	r3, #0
 80018d6:	b2db      	uxtb	r3, r3
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000004 	.word	0x20000004
 80018e4:	20000548 	.word	0x20000548

080018e8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	4603      	mov	r3, r0
 80018f6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d102      	bne.n	8001904 <SD_disk_write+0x1c>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <SD_disk_write+0x20>
 8001904:	2304      	movs	r3, #4
 8001906:	e06b      	b.n	80019e0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001908:	4b37      	ldr	r3, [pc, #220]	@ (80019e8 <SD_disk_write+0x100>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <SD_disk_write+0x32>
 8001916:	2303      	movs	r3, #3
 8001918:	e062      	b.n	80019e0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800191a:	4b33      	ldr	r3, [pc, #204]	@ (80019e8 <SD_disk_write+0x100>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <SD_disk_write+0x44>
 8001928:	2302      	movs	r3, #2
 800192a:	e059      	b.n	80019e0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800192c:	4b2f      	ldr	r3, [pc, #188]	@ (80019ec <SD_disk_write+0x104>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	d102      	bne.n	800193e <SD_disk_write+0x56>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	025b      	lsls	r3, r3, #9
 800193c:	607b      	str	r3, [r7, #4]

	SELECT();
 800193e:	f7ff fcb1 	bl	80012a4 <SELECT>

	if (count == 1)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d110      	bne.n	800196a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	2058      	movs	r0, #88	@ 0x58
 800194c:	f7ff fe0b 	bl	8001566 <SD_SendCmd>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d13a      	bne.n	80019cc <SD_disk_write+0xe4>
 8001956:	21fe      	movs	r1, #254	@ 0xfe
 8001958:	68b8      	ldr	r0, [r7, #8]
 800195a:	f7ff fdc1 	bl	80014e0 <SD_TxDataBlock>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d033      	beq.n	80019cc <SD_disk_write+0xe4>
			count = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	e030      	b.n	80019cc <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800196a:	4b20      	ldr	r3, [pc, #128]	@ (80019ec <SD_disk_write+0x104>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d007      	beq.n	8001986 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001976:	2100      	movs	r1, #0
 8001978:	2077      	movs	r0, #119	@ 0x77
 800197a:	f7ff fdf4 	bl	8001566 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800197e:	6839      	ldr	r1, [r7, #0]
 8001980:	2057      	movs	r0, #87	@ 0x57
 8001982:	f7ff fdf0 	bl	8001566 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	2059      	movs	r0, #89	@ 0x59
 800198a:	f7ff fdec 	bl	8001566 <SD_SendCmd>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d11b      	bne.n	80019cc <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001994:	21fc      	movs	r1, #252	@ 0xfc
 8001996:	68b8      	ldr	r0, [r7, #8]
 8001998:	f7ff fda2 	bl	80014e0 <SD_TxDataBlock>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00a      	beq.n	80019b8 <SD_disk_write+0xd0>
				buff += 512;
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80019a8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	3b01      	subs	r3, #1
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1ee      	bne.n	8001994 <SD_disk_write+0xac>
 80019b6:	e000      	b.n	80019ba <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80019b8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80019ba:	21fd      	movs	r1, #253	@ 0xfd
 80019bc:	2000      	movs	r0, #0
 80019be:	f7ff fd8f 	bl	80014e0 <SD_TxDataBlock>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <SD_disk_write+0xe4>
			{
				count = 1;
 80019c8:	2301      	movs	r3, #1
 80019ca:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80019cc:	f7ff fc78 	bl	80012c0 <DESELECT>
	SPI_RxByte();
 80019d0:	f7ff fcb8 	bl	8001344 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	bf14      	ite	ne
 80019da:	2301      	movne	r3, #1
 80019dc:	2300      	moveq	r3, #0
 80019de:	b2db      	uxtb	r3, r3
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000004 	.word	0x20000004
 80019ec:	20000548 	.word	0x20000548

080019f0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b08b      	sub	sp, #44	@ 0x2c
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	603a      	str	r2, [r7, #0]
 80019fa:	71fb      	strb	r3, [r7, #7]
 80019fc:	460b      	mov	r3, r1
 80019fe:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <SD_disk_ioctl+0x1e>
 8001a0a:	2304      	movs	r3, #4
 8001a0c:	e113      	b.n	8001c36 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8001a14:	79bb      	ldrb	r3, [r7, #6]
 8001a16:	2b05      	cmp	r3, #5
 8001a18:	d124      	bne.n	8001a64 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d012      	beq.n	8001a48 <SD_disk_ioctl+0x58>
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	dc1a      	bgt.n	8001a5c <SD_disk_ioctl+0x6c>
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <SD_disk_ioctl+0x40>
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d006      	beq.n	8001a3c <SD_disk_ioctl+0x4c>
 8001a2e:	e015      	b.n	8001a5c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001a30:	f7ff fd0e 	bl	8001450 <SD_PowerOff>
			res = RES_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001a3a:	e0fa      	b.n	8001c32 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001a3c:	f7ff fcc6 	bl	80013cc <SD_PowerOn>
			res = RES_OK;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001a46:	e0f4      	b.n	8001c32 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	1c5c      	adds	r4, r3, #1
 8001a4c:	f7ff fd0c 	bl	8001468 <SD_CheckPower>
 8001a50:	4603      	mov	r3, r0
 8001a52:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001a54:	2300      	movs	r3, #0
 8001a56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001a5a:	e0ea      	b.n	8001c32 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001a5c:	2304      	movs	r3, #4
 8001a5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001a62:	e0e6      	b.n	8001c32 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001a64:	4b76      	ldr	r3, [pc, #472]	@ (8001c40 <SD_disk_ioctl+0x250>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <SD_disk_ioctl+0x86>
 8001a72:	2303      	movs	r3, #3
 8001a74:	e0df      	b.n	8001c36 <SD_disk_ioctl+0x246>

		SELECT();
 8001a76:	f7ff fc15 	bl	80012a4 <SELECT>

		switch (ctrl)
 8001a7a:	79bb      	ldrb	r3, [r7, #6]
 8001a7c:	2b0d      	cmp	r3, #13
 8001a7e:	f200 80c9 	bhi.w	8001c14 <SD_disk_ioctl+0x224>
 8001a82:	a201      	add	r2, pc, #4	@ (adr r2, 8001a88 <SD_disk_ioctl+0x98>)
 8001a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a88:	08001b7f 	.word	0x08001b7f
 8001a8c:	08001ac1 	.word	0x08001ac1
 8001a90:	08001b6f 	.word	0x08001b6f
 8001a94:	08001c15 	.word	0x08001c15
 8001a98:	08001c15 	.word	0x08001c15
 8001a9c:	08001c15 	.word	0x08001c15
 8001aa0:	08001c15 	.word	0x08001c15
 8001aa4:	08001c15 	.word	0x08001c15
 8001aa8:	08001c15 	.word	0x08001c15
 8001aac:	08001c15 	.word	0x08001c15
 8001ab0:	08001c15 	.word	0x08001c15
 8001ab4:	08001b91 	.word	0x08001b91
 8001ab8:	08001bb5 	.word	0x08001bb5
 8001abc:	08001bd9 	.word	0x08001bd9
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2049      	movs	r0, #73	@ 0x49
 8001ac4:	f7ff fd4f 	bl	8001566 <SD_SendCmd>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f040 80a6 	bne.w	8001c1c <SD_disk_ioctl+0x22c>
 8001ad0:	f107 030c 	add.w	r3, r7, #12
 8001ad4:	2110      	movs	r1, #16
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fcd2 	bl	8001480 <SD_RxDataBlock>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 809c 	beq.w	8001c1c <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001ae4:	7b3b      	ldrb	r3, [r7, #12]
 8001ae6:	099b      	lsrs	r3, r3, #6
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d10d      	bne.n	8001b0a <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001aee:	7d7b      	ldrb	r3, [r7, #21]
 8001af0:	461a      	mov	r2, r3
 8001af2:	7d3b      	ldrb	r3, [r7, #20]
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	4413      	add	r3, r2
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	3301      	adds	r3, #1
 8001afe:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001b00:	8bfb      	ldrh	r3, [r7, #30]
 8001b02:	029a      	lsls	r2, r3, #10
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	e02d      	b.n	8001b66 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001b0a:	7c7b      	ldrb	r3, [r7, #17]
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	7dbb      	ldrb	r3, [r7, #22]
 8001b14:	09db      	lsrs	r3, r3, #7
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	7d7b      	ldrb	r3, [r7, #21]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	f003 0306 	and.w	r3, r3, #6
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	4413      	add	r3, r2
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001b32:	7d3b      	ldrb	r3, [r7, #20]
 8001b34:	099b      	lsrs	r3, r3, #6
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	7cfb      	ldrb	r3, [r7, #19]
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	7cbb      	ldrb	r3, [r7, #18]
 8001b46:	029b      	lsls	r3, r3, #10
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	4413      	add	r3, r2
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	3301      	adds	r3, #1
 8001b56:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001b58:	8bfa      	ldrh	r2, [r7, #30]
 8001b5a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b5e:	3b09      	subs	r3, #9
 8001b60:	409a      	lsls	r2, r3
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8001b6c:	e056      	b.n	8001c1c <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b74:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001b7c:	e055      	b.n	8001c2a <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001b7e:	f7ff fc0b 	bl	8001398 <SD_ReadyWait>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2bff      	cmp	r3, #255	@ 0xff
 8001b86:	d14b      	bne.n	8001c20 <SD_disk_ioctl+0x230>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001b8e:	e047      	b.n	8001c20 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001b90:	2100      	movs	r1, #0
 8001b92:	2049      	movs	r0, #73	@ 0x49
 8001b94:	f7ff fce7 	bl	8001566 <SD_SendCmd>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d142      	bne.n	8001c24 <SD_disk_ioctl+0x234>
 8001b9e:	2110      	movs	r1, #16
 8001ba0:	6a38      	ldr	r0, [r7, #32]
 8001ba2:	f7ff fc6d 	bl	8001480 <SD_RxDataBlock>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d03b      	beq.n	8001c24 <SD_disk_ioctl+0x234>
 8001bac:	2300      	movs	r3, #0
 8001bae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001bb2:	e037      	b.n	8001c24 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	204a      	movs	r0, #74	@ 0x4a
 8001bb8:	f7ff fcd5 	bl	8001566 <SD_SendCmd>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d132      	bne.n	8001c28 <SD_disk_ioctl+0x238>
 8001bc2:	2110      	movs	r1, #16
 8001bc4:	6a38      	ldr	r0, [r7, #32]
 8001bc6:	f7ff fc5b 	bl	8001480 <SD_RxDataBlock>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d02b      	beq.n	8001c28 <SD_disk_ioctl+0x238>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001bd6:	e027      	b.n	8001c28 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001bd8:	2100      	movs	r1, #0
 8001bda:	207a      	movs	r0, #122	@ 0x7a
 8001bdc:	f7ff fcc3 	bl	8001566 <SD_SendCmd>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d116      	bne.n	8001c14 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8001be6:	2300      	movs	r3, #0
 8001be8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001bec:	e00b      	b.n	8001c06 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8001bee:	6a3c      	ldr	r4, [r7, #32]
 8001bf0:	1c63      	adds	r3, r4, #1
 8001bf2:	623b      	str	r3, [r7, #32]
 8001bf4:	f7ff fba6 	bl	8001344 <SPI_RxByte>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001bfc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001c00:	3301      	adds	r3, #1
 8001c02:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001c06:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d9ef      	bls.n	8001bee <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8001c14:	2304      	movs	r3, #4
 8001c16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001c1a:	e006      	b.n	8001c2a <SD_disk_ioctl+0x23a>
			break;
 8001c1c:	bf00      	nop
 8001c1e:	e004      	b.n	8001c2a <SD_disk_ioctl+0x23a>
			break;
 8001c20:	bf00      	nop
 8001c22:	e002      	b.n	8001c2a <SD_disk_ioctl+0x23a>
			break;
 8001c24:	bf00      	nop
 8001c26:	e000      	b.n	8001c2a <SD_disk_ioctl+0x23a>
			break;
 8001c28:	bf00      	nop
		}

		DESELECT();
 8001c2a:	f7ff fb49 	bl	80012c0 <DESELECT>
		SPI_RxByte();
 8001c2e:	f7ff fb89 	bl	8001344 <SPI_RxByte>
	}

	return res;
 8001c32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	372c      	adds	r7, #44	@ 0x2c
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd90      	pop	{r4, r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000004 	.word	0x20000004

08001c44 <send_uart>:

extern UART_HandleTypeDef huart2;
extern RTC_HandleTypeDef hrtc;			//Handler del RTC


void send_uart(char *string){
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7fe fac7 	bl	80001e0 <strlen>
 8001c52:	4603      	mov	r3, r0
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	4803      	ldr	r0, [pc, #12]	@ (8001c6c <send_uart+0x28>)
 8001c5e:	f003 fd33 	bl	80056c8 <HAL_UART_Transmit>
	return;
 8001c62:	bf00      	nop
}
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200004a4 	.word	0x200004a4

08001c70 <mount_sd>:
		send_uart(str);
	}
	return;
}

void mount_sd(const char* path){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	4805      	ldr	r0, [pc, #20]	@ (8001c94 <mount_sd+0x24>)
 8001c7e:	f006 fb6d 	bl	800835c <f_mount>
 8001c82:	4603      	mov	r3, r0
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b04      	ldr	r3, [pc, #16]	@ (8001c98 <mount_sd+0x28>)
 8001c88:	701a      	strb	r2, [r3, #0]

	return;
 8001c8a:	bf00      	nop
}
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	2000054c 	.word	0x2000054c
 8001c98:	200025b8 	.word	0x200025b8

08001c9c <unmount_sd>:

void unmount_sd(const char* path){
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f006 fb57 	bl	800835c <f_mount>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b07      	ldr	r3, [pc, #28]	@ (8001cd0 <unmount_sd+0x34>)
 8001cb4:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8001cb6:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <unmount_sd+0x34>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d004      	beq.n	8001cc8 <unmount_sd+0x2c>
		send_uart("Error al desmontar la tarjeta SD!!!\n\n");
 8001cbe:	4805      	ldr	r0, [pc, #20]	@ (8001cd4 <unmount_sd+0x38>)
 8001cc0:	f7ff ffc0 	bl	8001c44 <send_uart>
		while(1);
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <unmount_sd+0x28>
	}
}
 8001cc8:	bf00      	nop
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	200025b8 	.word	0x200025b8
 8001cd4:	0800c074 	.word	0x0800c074

08001cd8 <save_buffer_on_sd>:
	strcat(rtc_lecture, time);
	vPortFree(time);
	return;
}

FRESULT save_buffer_on_sd(char *filename, uint16_t *buffer, uint16_t buf_size){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	@ 0x28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	80fb      	strh	r3, [r7, #6]
	char line[20];
	fresult = f_open(&fil, filename, FA_CREATE_ALWAYS | FA_WRITE);
 8001ce6:	220a      	movs	r2, #10
 8001ce8:	68f9      	ldr	r1, [r7, #12]
 8001cea:	4827      	ldr	r0, [pc, #156]	@ (8001d88 <save_buffer_on_sd+0xb0>)
 8001cec:	f006 fb9a 	bl	8008424 <f_open>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4b25      	ldr	r3, [pc, #148]	@ (8001d8c <save_buffer_on_sd+0xb4>)
 8001cf6:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8001cf8:	4b24      	ldr	r3, [pc, #144]	@ (8001d8c <save_buffer_on_sd+0xb4>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <save_buffer_on_sd+0x2e>
		return fresult;
 8001d00:	4b22      	ldr	r3, [pc, #136]	@ (8001d8c <save_buffer_on_sd+0xb4>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	e03c      	b.n	8001d80 <save_buffer_on_sd+0xa8>
	}
	/*Escribo cada dato del buffer en una linea separada*/
	for(uint16_t i = 0; i < buf_size; i++){
 8001d06:	2300      	movs	r3, #0
 8001d08:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001d0a:	e031      	b.n	8001d70 <save_buffer_on_sd+0x98>
		/*Formateo numero como string*/
		snprintf(line, 20, "%u\n", buffer[i]);
 8001d0c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	4413      	add	r3, r2
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	f107 0010 	add.w	r0, r7, #16
 8001d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8001d90 <save_buffer_on_sd+0xb8>)
 8001d1c:	2114      	movs	r1, #20
 8001d1e:	f009 fcdb 	bl	800b6d8 <sniprintf>
		/*Escribo en el archivo*/
		fresult = f_write(&fil, line, strlen(line), &bw);
 8001d22:	f107 0310 	add.w	r3, r7, #16
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fa5a 	bl	80001e0 <strlen>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	f107 0110 	add.w	r1, r7, #16
 8001d32:	4b18      	ldr	r3, [pc, #96]	@ (8001d94 <save_buffer_on_sd+0xbc>)
 8001d34:	4814      	ldr	r0, [pc, #80]	@ (8001d88 <save_buffer_on_sd+0xb0>)
 8001d36:	f006 fd59 	bl	80087ec <f_write>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4b13      	ldr	r3, [pc, #76]	@ (8001d8c <save_buffer_on_sd+0xb4>)
 8001d40:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK || bw < strlen(line)) {
 8001d42:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <save_buffer_on_sd+0xb4>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d109      	bne.n	8001d5e <save_buffer_on_sd+0x86>
 8001d4a:	f107 0310 	add.w	r3, r7, #16
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fa46 	bl	80001e0 <strlen>
 8001d54:	4602      	mov	r2, r0
 8001d56:	4b0f      	ldr	r3, [pc, #60]	@ (8001d94 <save_buffer_on_sd+0xbc>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d905      	bls.n	8001d6a <save_buffer_on_sd+0x92>
			f_close(&fil); // Cerrar el archivo antes de retornar
 8001d5e:	480a      	ldr	r0, [pc, #40]	@ (8001d88 <save_buffer_on_sd+0xb0>)
 8001d60:	f006 ff90 	bl	8008c84 <f_close>
		    return fresult;  // Error al escribir en el archivo
 8001d64:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <save_buffer_on_sd+0xb4>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	e00a      	b.n	8001d80 <save_buffer_on_sd+0xa8>
	for(uint16_t i = 0; i < buf_size; i++){
 8001d6a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001d70:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d3c9      	bcc.n	8001d0c <save_buffer_on_sd+0x34>
		}
	}
	f_close(&fil);
 8001d78:	4803      	ldr	r0, [pc, #12]	@ (8001d88 <save_buffer_on_sd+0xb0>)
 8001d7a:	f006 ff83 	bl	8008c84 <f_close>
	return FR_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3728      	adds	r7, #40	@ 0x28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20001588 	.word	0x20001588
 8001d8c:	200025b8 	.word	0x200025b8
 8001d90:	0800c070 	.word	0x0800c070
 8001d94:	200025bc 	.word	0x200025bc

08001d98 <user_check_task>:
	}
}

#elif CODE_VERSION == 3
/*Comprobacion de voz simple*/
void user_check_task(void *pvParameters){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	uint16_t buffer[5] = {1, 2, 3, 4, 5};
 8001da0:	4a0a      	ldr	r2, [pc, #40]	@ (8001dcc <user_check_task+0x34>)
 8001da2:	f107 030c 	add.w	r3, r7, #12
 8001da6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001da8:	c303      	stmia	r3!, {r0, r1}
 8001daa:	801a      	strh	r2, [r3, #0]

	mount_sd("/");
 8001dac:	4808      	ldr	r0, [pc, #32]	@ (8001dd0 <user_check_task+0x38>)
 8001dae:	f7ff ff5f 	bl	8001c70 <mount_sd>
	save_buffer_on_sd("prueba.txt", buffer, 5);
 8001db2:	f107 030c 	add.w	r3, r7, #12
 8001db6:	2205      	movs	r2, #5
 8001db8:	4619      	mov	r1, r3
 8001dba:	4806      	ldr	r0, [pc, #24]	@ (8001dd4 <user_check_task+0x3c>)
 8001dbc:	f7ff ff8c 	bl	8001cd8 <save_buffer_on_sd>
	unmount_sd("/");
 8001dc0:	4803      	ldr	r0, [pc, #12]	@ (8001dd0 <user_check_task+0x38>)
 8001dc2:	f7ff ff6b 	bl	8001c9c <unmount_sd>
	while(1){
 8001dc6:	bf00      	nop
 8001dc8:	e7fd      	b.n	8001dc6 <user_check_task+0x2e>
 8001dca:	bf00      	nop
 8001dcc:	0800c158 	.word	0x0800c158
 8001dd0:	0800c148 	.word	0x0800c148
 8001dd4:	0800c14c 	.word	0x0800c14c

08001dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8001e18 <HAL_Init+0x40>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e18 <HAL_Init+0x40>)
 8001de2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001de6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001de8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e18 <HAL_Init+0x40>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0a      	ldr	r2, [pc, #40]	@ (8001e18 <HAL_Init+0x40>)
 8001dee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001df2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df4:	4b08      	ldr	r3, [pc, #32]	@ (8001e18 <HAL_Init+0x40>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a07      	ldr	r2, [pc, #28]	@ (8001e18 <HAL_Init+0x40>)
 8001dfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e00:	2003      	movs	r0, #3
 8001e02:	f000 fce6 	bl	80027d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e06:	200f      	movs	r0, #15
 8001e08:	f7ff f8e4 	bl	8000fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e0c:	f7fe ff0c 	bl	8000c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40023c00 	.word	0x40023c00

08001e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e20:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_IncTick+0x20>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <HAL_IncTick+0x24>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4a04      	ldr	r2, [pc, #16]	@ (8001e40 <HAL_IncTick+0x24>)
 8001e2e:	6013      	str	r3, [r2, #0]
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	2000000c 	.word	0x2000000c
 8001e40:	200025c0 	.word	0x200025c0

08001e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return uwTick;
 8001e48:	4b03      	ldr	r3, [pc, #12]	@ (8001e58 <HAL_GetTick+0x14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	200025c0 	.word	0x200025c0

08001e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e64:	f7ff ffee 	bl	8001e44 <HAL_GetTick>
 8001e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e74:	d005      	beq.n	8001e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <HAL_Delay+0x44>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e82:	bf00      	nop
 8001e84:	f7ff ffde 	bl	8001e44 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d8f7      	bhi.n	8001e84 <HAL_Delay+0x28>
  {
  }
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2000000c 	.word	0x2000000c

08001ea4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e033      	b.n	8001f22 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d109      	bne.n	8001ed6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7fe fedc 	bl	8000c80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d118      	bne.n	8001f14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001eea:	f023 0302 	bic.w	r3, r3, #2
 8001eee:	f043 0202 	orr.w	r2, r3, #2
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 fab8 	bl	800246c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	f023 0303 	bic.w	r3, r3, #3
 8001f0a:	f043 0201 	orr.w	r2, r3, #1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f12:	e001      	b.n	8001f18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b086      	sub	sp, #24
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	f003 0320 	and.w	r3, r3, #32
 8001f58:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d049      	beq.n	8001ff4 <HAL_ADC_IRQHandler+0xca>
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d046      	beq.n	8001ff4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d105      	bne.n	8001f7e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d12b      	bne.n	8001fe4 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d127      	bne.n	8001fe4 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d006      	beq.n	8001fb0 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d119      	bne.n	8001fe4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0220 	bic.w	r2, r2, #32
 8001fbe:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d105      	bne.n	8001fe4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fdc:	f043 0201 	orr.w	r2, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7fe fdf1 	bl	8000bcc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f06f 0212 	mvn.w	r2, #18
 8001ff2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002002:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d057      	beq.n	80020ba <HAL_ADC_IRQHandler+0x190>
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d054      	beq.n	80020ba <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b00      	cmp	r3, #0
 800201a:	d105      	bne.n	8002028 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d139      	bne.n	80020aa <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800203c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002040:	2b00      	cmp	r3, #0
 8002042:	d006      	beq.n	8002052 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800204e:	2b00      	cmp	r3, #0
 8002050:	d12b      	bne.n	80020aa <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800205c:	2b00      	cmp	r3, #0
 800205e:	d124      	bne.n	80020aa <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800206a:	2b00      	cmp	r3, #0
 800206c:	d11d      	bne.n	80020aa <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002072:	2b00      	cmp	r3, #0
 8002074:	d119      	bne.n	80020aa <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002084:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209a:	2b00      	cmp	r3, #0
 800209c:	d105      	bne.n	80020aa <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	f043 0201 	orr.w	r2, r3, #1
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 fada 	bl	8002664 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 020c 	mvn.w	r2, #12
 80020b8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d017      	beq.n	8002100 <HAL_ADC_IRQHandler+0x1d6>
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d014      	beq.n	8002100 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d10d      	bne.n	8002100 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f884 	bl	80021fe <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f06f 0201 	mvn.w	r2, #1
 80020fe:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 0320 	and.w	r3, r3, #32
 8002106:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800210e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d015      	beq.n	8002142 <HAL_ADC_IRQHandler+0x218>
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d012      	beq.n	8002142 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002120:	f043 0202 	orr.w	r2, r3, #2
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0220 	mvn.w	r2, #32
 8002130:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f86d 	bl	8002212 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0220 	mvn.w	r2, #32
 8002140:	601a      	str	r2, [r3, #0]
  }
}
 8002142:	bf00      	nop
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <HAL_ADC_Stop_DMA+0x1a>
 8002160:	2302      	movs	r3, #2
 8002162:	e048      	b.n	80021f6 <HAL_ADC_Stop_DMA+0xac>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0201 	bic.w	r2, r2, #1
 800217a:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d130      	bne.n	80021ec <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002198:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800219e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d10f      	bne.n	80021c8 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 fbf3 	bl	8002998 <HAL_DMA_Abort>
 80021b2:	4603      	mov	r3, r0
 80021b4:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80021d6:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021dc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021e0:	f023 0301 	bic.w	r3, r3, #1
 80021e4:	f043 0201 	orr.w	r2, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
	...

08002228 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x1c>
 8002240:	2302      	movs	r3, #2
 8002242:	e105      	b.n	8002450 <HAL_ADC_ConfigChannel+0x228>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b09      	cmp	r3, #9
 8002252:	d925      	bls.n	80022a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68d9      	ldr	r1, [r3, #12]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	3b1e      	subs	r3, #30
 800226a:	2207      	movs	r2, #7
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43da      	mvns	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	400a      	ands	r2, r1
 8002278:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68d9      	ldr	r1, [r3, #12]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	b29b      	uxth	r3, r3
 800228a:	4618      	mov	r0, r3
 800228c:	4603      	mov	r3, r0
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4403      	add	r3, r0
 8002292:	3b1e      	subs	r3, #30
 8002294:	409a      	lsls	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	e022      	b.n	80022e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6919      	ldr	r1, [r3, #16]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	461a      	mov	r2, r3
 80022ae:	4613      	mov	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	2207      	movs	r2, #7
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43da      	mvns	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	400a      	ands	r2, r1
 80022c2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6919      	ldr	r1, [r3, #16]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	4618      	mov	r0, r3
 80022d6:	4603      	mov	r3, r0
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4403      	add	r3, r0
 80022dc:	409a      	lsls	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b06      	cmp	r3, #6
 80022ec:	d824      	bhi.n	8002338 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	3b05      	subs	r3, #5
 8002300:	221f      	movs	r2, #31
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43da      	mvns	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	400a      	ands	r2, r1
 800230e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	b29b      	uxth	r3, r3
 800231c:	4618      	mov	r0, r3
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	3b05      	subs	r3, #5
 800232a:	fa00 f203 	lsl.w	r2, r0, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	635a      	str	r2, [r3, #52]	@ 0x34
 8002336:	e04c      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b0c      	cmp	r3, #12
 800233e:	d824      	bhi.n	800238a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	3b23      	subs	r3, #35	@ 0x23
 8002352:	221f      	movs	r2, #31
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43da      	mvns	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	400a      	ands	r2, r1
 8002360:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	b29b      	uxth	r3, r3
 800236e:	4618      	mov	r0, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	3b23      	subs	r3, #35	@ 0x23
 800237c:	fa00 f203 	lsl.w	r2, r0, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	631a      	str	r2, [r3, #48]	@ 0x30
 8002388:	e023      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	3b41      	subs	r3, #65	@ 0x41
 800239c:	221f      	movs	r2, #31
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43da      	mvns	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	400a      	ands	r2, r1
 80023aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	4618      	mov	r0, r3
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	3b41      	subs	r3, #65	@ 0x41
 80023c6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023d2:	4b22      	ldr	r3, [pc, #136]	@ (800245c <HAL_ADC_ConfigChannel+0x234>)
 80023d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a21      	ldr	r2, [pc, #132]	@ (8002460 <HAL_ADC_ConfigChannel+0x238>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d109      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x1cc>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b12      	cmp	r3, #18
 80023e6:	d105      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a19      	ldr	r2, [pc, #100]	@ (8002460 <HAL_ADC_ConfigChannel+0x238>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d123      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x21e>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b10      	cmp	r3, #16
 8002404:	d003      	beq.n	800240e <HAL_ADC_ConfigChannel+0x1e6>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b11      	cmp	r3, #17
 800240c:	d11b      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b10      	cmp	r3, #16
 8002420:	d111      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002422:	4b10      	ldr	r3, [pc, #64]	@ (8002464 <HAL_ADC_ConfigChannel+0x23c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a10      	ldr	r2, [pc, #64]	@ (8002468 <HAL_ADC_ConfigChannel+0x240>)
 8002428:	fba2 2303 	umull	r2, r3, r2, r3
 800242c:	0c9a      	lsrs	r2, r3, #18
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002438:	e002      	b.n	8002440 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	3b01      	subs	r3, #1
 800243e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f9      	bne.n	800243a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	40012300 	.word	0x40012300
 8002460:	40012000 	.word	0x40012000
 8002464:	20000000 	.word	0x20000000
 8002468:	431bde83 	.word	0x431bde83

0800246c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002474:	4b79      	ldr	r3, [pc, #484]	@ (800265c <ADC_Init+0x1f0>)
 8002476:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	431a      	orrs	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6859      	ldr	r1, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	021a      	lsls	r2, r3, #8
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80024c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6859      	ldr	r1, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6899      	ldr	r1, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fe:	4a58      	ldr	r2, [pc, #352]	@ (8002660 <ADC_Init+0x1f4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d022      	beq.n	800254a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002512:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6899      	ldr	r1, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002534:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6899      	ldr	r1, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	e00f      	b.n	800256a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002558:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002568:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0202 	bic.w	r2, r2, #2
 8002578:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6899      	ldr	r1, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	7e1b      	ldrb	r3, [r3, #24]
 8002584:	005a      	lsls	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d01b      	beq.n	80025d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025a6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80025b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6859      	ldr	r1, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c2:	3b01      	subs	r3, #1
 80025c4:	035a      	lsls	r2, r3, #13
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	e007      	b.n	80025e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025de:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80025ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	051a      	lsls	r2, r3, #20
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002614:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6899      	ldr	r1, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002622:	025a      	lsls	r2, r3, #9
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800263a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6899      	ldr	r1, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	029a      	lsls	r2, r3, #10
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	609a      	str	r2, [r3, #8]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	40012300 	.word	0x40012300
 8002660:	0f000001 	.word	0x0f000001

08002664 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002688:	4b0c      	ldr	r3, [pc, #48]	@ (80026bc <__NVIC_SetPriorityGrouping+0x44>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002694:	4013      	ands	r3, r2
 8002696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026aa:	4a04      	ldr	r2, [pc, #16]	@ (80026bc <__NVIC_SetPriorityGrouping+0x44>)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	60d3      	str	r3, [r2, #12]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c4:	4b04      	ldr	r3, [pc, #16]	@ (80026d8 <__NVIC_GetPriorityGrouping+0x18>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	0a1b      	lsrs	r3, r3, #8
 80026ca:	f003 0307 	and.w	r3, r3, #7
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	db0b      	blt.n	8002706 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	f003 021f 	and.w	r2, r3, #31
 80026f4:	4907      	ldr	r1, [pc, #28]	@ (8002714 <__NVIC_EnableIRQ+0x38>)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	2001      	movs	r0, #1
 80026fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000e100 	.word	0xe000e100

08002718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	6039      	str	r1, [r7, #0]
 8002722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002728:	2b00      	cmp	r3, #0
 800272a:	db0a      	blt.n	8002742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	b2da      	uxtb	r2, r3
 8002730:	490c      	ldr	r1, [pc, #48]	@ (8002764 <__NVIC_SetPriority+0x4c>)
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	0112      	lsls	r2, r2, #4
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	440b      	add	r3, r1
 800273c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002740:	e00a      	b.n	8002758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	4908      	ldr	r1, [pc, #32]	@ (8002768 <__NVIC_SetPriority+0x50>)
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	3b04      	subs	r3, #4
 8002750:	0112      	lsls	r2, r2, #4
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	440b      	add	r3, r1
 8002756:	761a      	strb	r2, [r3, #24]
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000e100 	.word	0xe000e100
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800276c:	b480      	push	{r7}
 800276e:	b089      	sub	sp, #36	@ 0x24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f1c3 0307 	rsb	r3, r3, #7
 8002786:	2b04      	cmp	r3, #4
 8002788:	bf28      	it	cs
 800278a:	2304      	movcs	r3, #4
 800278c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3304      	adds	r3, #4
 8002792:	2b06      	cmp	r3, #6
 8002794:	d902      	bls.n	800279c <NVIC_EncodePriority+0x30>
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3b03      	subs	r3, #3
 800279a:	e000      	b.n	800279e <NVIC_EncodePriority+0x32>
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a0:	f04f 32ff 	mov.w	r2, #4294967295
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43da      	mvns	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	401a      	ands	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b4:	f04f 31ff 	mov.w	r1, #4294967295
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	fa01 f303 	lsl.w	r3, r1, r3
 80027be:	43d9      	mvns	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c4:	4313      	orrs	r3, r2
         );
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3724      	adds	r7, #36	@ 0x24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff ff4c 	bl	8002678 <__NVIC_SetPriorityGrouping>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027fa:	f7ff ff61 	bl	80026c0 <__NVIC_GetPriorityGrouping>
 80027fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	68b9      	ldr	r1, [r7, #8]
 8002804:	6978      	ldr	r0, [r7, #20]
 8002806:	f7ff ffb1 	bl	800276c <NVIC_EncodePriority>
 800280a:	4602      	mov	r2, r0
 800280c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ff80 	bl	8002718 <__NVIC_SetPriority>
}
 8002818:	bf00      	nop
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800282a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff ff54 	bl	80026dc <__NVIC_EnableIRQ>
}
 8002834:	bf00      	nop
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002848:	f7ff fafc 	bl	8001e44 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e099      	b.n	800298c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0201 	bic.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002878:	e00f      	b.n	800289a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800287a:	f7ff fae3 	bl	8001e44 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b05      	cmp	r3, #5
 8002886:	d908      	bls.n	800289a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2220      	movs	r2, #32
 800288c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2203      	movs	r2, #3
 8002892:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e078      	b.n	800298c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1e8      	bne.n	800287a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	4b38      	ldr	r3, [pc, #224]	@ (8002994 <HAL_DMA_Init+0x158>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d107      	bne.n	8002904 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fc:	4313      	orrs	r3, r2
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	4313      	orrs	r3, r2
 8002902:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f023 0307 	bic.w	r3, r3, #7
 800291a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	4313      	orrs	r3, r2
 8002924:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292a:	2b04      	cmp	r3, #4
 800292c:	d117      	bne.n	800295e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00e      	beq.n	800295e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 fa59 	bl	8002df8 <DMA_CheckFifoParam>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2240      	movs	r2, #64	@ 0x40
 8002950:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800295a:	2301      	movs	r3, #1
 800295c:	e016      	b.n	800298c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 fa10 	bl	8002d8c <DMA_CalcBaseAndBitshift>
 800296c:	4603      	mov	r3, r0
 800296e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002974:	223f      	movs	r2, #63	@ 0x3f
 8002976:	409a      	lsls	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	f010803f 	.word	0xf010803f

08002998 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029a6:	f7ff fa4d 	bl	8001e44 <HAL_GetTick>
 80029aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d008      	beq.n	80029ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2280      	movs	r2, #128	@ 0x80
 80029bc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e052      	b.n	8002a70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0216 	bic.w	r2, r2, #22
 80029d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d103      	bne.n	80029fa <HAL_DMA_Abort+0x62>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d007      	beq.n	8002a0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0208 	bic.w	r2, r2, #8
 8002a08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0201 	bic.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a1a:	e013      	b.n	8002a44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a1c:	f7ff fa12 	bl	8001e44 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b05      	cmp	r3, #5
 8002a28:	d90c      	bls.n	8002a44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2203      	movs	r2, #3
 8002a34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e015      	b.n	8002a70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1e4      	bne.n	8002a1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a56:	223f      	movs	r2, #63	@ 0x3f
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a84:	4b8e      	ldr	r3, [pc, #568]	@ (8002cc0 <HAL_DMA_IRQHandler+0x248>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a8e      	ldr	r2, [pc, #568]	@ (8002cc4 <HAL_DMA_IRQHandler+0x24c>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	0a9b      	lsrs	r3, r3, #10
 8002a90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa2:	2208      	movs	r2, #8
 8002aa4:	409a      	lsls	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d01a      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d013      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0204 	bic.w	r2, r2, #4
 8002aca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad0:	2208      	movs	r2, #8
 8002ad2:	409a      	lsls	r2, r3
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002adc:	f043 0201 	orr.w	r2, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae8:	2201      	movs	r2, #1
 8002aea:	409a      	lsls	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d012      	beq.n	8002b1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00b      	beq.n	8002b1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b06:	2201      	movs	r2, #1
 8002b08:	409a      	lsls	r2, r3
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b12:	f043 0202 	orr.w	r2, r3, #2
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b1e:	2204      	movs	r2, #4
 8002b20:	409a      	lsls	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d012      	beq.n	8002b50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00b      	beq.n	8002b50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b48:	f043 0204 	orr.w	r2, r3, #4
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b54:	2210      	movs	r2, #16
 8002b56:	409a      	lsls	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d043      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d03c      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b72:	2210      	movs	r2, #16
 8002b74:	409a      	lsls	r2, r3
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d018      	beq.n	8002bba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d108      	bne.n	8002ba8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d024      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	4798      	blx	r3
 8002ba6:	e01f      	b.n	8002be8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d01b      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	4798      	blx	r3
 8002bb8:	e016      	b.n	8002be8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d107      	bne.n	8002bd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0208 	bic.w	r2, r2, #8
 8002bd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bec:	2220      	movs	r2, #32
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 808f 	beq.w	8002d18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 8087 	beq.w	8002d18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0e:	2220      	movs	r2, #32
 8002c10:	409a      	lsls	r2, r3
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b05      	cmp	r3, #5
 8002c20:	d136      	bne.n	8002c90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0216 	bic.w	r2, r2, #22
 8002c30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d103      	bne.n	8002c52 <HAL_DMA_IRQHandler+0x1da>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d007      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0208 	bic.w	r2, r2, #8
 8002c60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c66:	223f      	movs	r2, #63	@ 0x3f
 8002c68:	409a      	lsls	r2, r3
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d07e      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	4798      	blx	r3
        }
        return;
 8002c8e:	e079      	b.n	8002d84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d01d      	beq.n	8002cda <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10d      	bne.n	8002cc8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d031      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	4798      	blx	r3
 8002cbc:	e02c      	b.n	8002d18 <HAL_DMA_IRQHandler+0x2a0>
 8002cbe:	bf00      	nop
 8002cc0:	20000000 	.word	0x20000000
 8002cc4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d023      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	4798      	blx	r3
 8002cd8:	e01e      	b.n	8002d18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10f      	bne.n	8002d08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0210 	bic.w	r2, r2, #16
 8002cf6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d032      	beq.n	8002d86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d022      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2205      	movs	r2, #5
 8002d30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0201 	bic.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	3301      	adds	r3, #1
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d307      	bcc.n	8002d60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f2      	bne.n	8002d44 <HAL_DMA_IRQHandler+0x2cc>
 8002d5e:	e000      	b.n	8002d62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d005      	beq.n	8002d86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	4798      	blx	r3
 8002d82:	e000      	b.n	8002d86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d84:	bf00      	nop
    }
  }
}
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	3b10      	subs	r3, #16
 8002d9c:	4a14      	ldr	r2, [pc, #80]	@ (8002df0 <DMA_CalcBaseAndBitshift+0x64>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	091b      	lsrs	r3, r3, #4
 8002da4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002da6:	4a13      	ldr	r2, [pc, #76]	@ (8002df4 <DMA_CalcBaseAndBitshift+0x68>)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4413      	add	r3, r2
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d909      	bls.n	8002dce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dc2:	f023 0303 	bic.w	r3, r3, #3
 8002dc6:	1d1a      	adds	r2, r3, #4
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	659a      	str	r2, [r3, #88]	@ 0x58
 8002dcc:	e007      	b.n	8002dde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dd6:	f023 0303 	bic.w	r3, r3, #3
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	aaaaaaab 	.word	0xaaaaaaab
 8002df4:	0800c1cc 	.word	0x0800c1cc

08002df8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d11f      	bne.n	8002e52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d856      	bhi.n	8002ec6 <DMA_CheckFifoParam+0xce>
 8002e18:	a201      	add	r2, pc, #4	@ (adr r2, 8002e20 <DMA_CheckFifoParam+0x28>)
 8002e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1e:	bf00      	nop
 8002e20:	08002e31 	.word	0x08002e31
 8002e24:	08002e43 	.word	0x08002e43
 8002e28:	08002e31 	.word	0x08002e31
 8002e2c:	08002ec7 	.word	0x08002ec7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d046      	beq.n	8002eca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e40:	e043      	b.n	8002eca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e46:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e4a:	d140      	bne.n	8002ece <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e50:	e03d      	b.n	8002ece <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e5a:	d121      	bne.n	8002ea0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d837      	bhi.n	8002ed2 <DMA_CheckFifoParam+0xda>
 8002e62:	a201      	add	r2, pc, #4	@ (adr r2, 8002e68 <DMA_CheckFifoParam+0x70>)
 8002e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e68:	08002e79 	.word	0x08002e79
 8002e6c:	08002e7f 	.word	0x08002e7f
 8002e70:	08002e79 	.word	0x08002e79
 8002e74:	08002e91 	.word	0x08002e91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e7c:	e030      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d025      	beq.n	8002ed6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8e:	e022      	b.n	8002ed6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e94:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e98:	d11f      	bne.n	8002eda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e9e:	e01c      	b.n	8002eda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d903      	bls.n	8002eae <DMA_CheckFifoParam+0xb6>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d003      	beq.n	8002eb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002eac:	e018      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb2:	e015      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00e      	beq.n	8002ede <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec4:	e00b      	b.n	8002ede <DMA_CheckFifoParam+0xe6>
      break;
 8002ec6:	bf00      	nop
 8002ec8:	e00a      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e008      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ece:	bf00      	nop
 8002ed0:	e006      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed2:	bf00      	nop
 8002ed4:	e004      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed6:	bf00      	nop
 8002ed8:	e002      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002eda:	bf00      	nop
 8002edc:	e000      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ede:	bf00      	nop
    }
  } 
  
  return status; 
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop

08002ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b089      	sub	sp, #36	@ 0x24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	e159      	b.n	80031c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	f040 8148 	bne.w	80031ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d005      	beq.n	8002f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d130      	bne.n	8002fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f78:	2201      	movs	r2, #1
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 0201 	and.w	r2, r3, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d017      	beq.n	8002fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	2203      	movs	r2, #3
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d123      	bne.n	8003034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	08da      	lsrs	r2, r3, #3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3208      	adds	r2, #8
 8002ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	220f      	movs	r2, #15
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	08da      	lsrs	r2, r3, #3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3208      	adds	r2, #8
 800302e:	69b9      	ldr	r1, [r7, #24]
 8003030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0203 	and.w	r2, r3, #3
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80a2 	beq.w	80031ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	4b57      	ldr	r3, [pc, #348]	@ (80031d8 <HAL_GPIO_Init+0x2e8>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307e:	4a56      	ldr	r2, [pc, #344]	@ (80031d8 <HAL_GPIO_Init+0x2e8>)
 8003080:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003084:	6453      	str	r3, [r2, #68]	@ 0x44
 8003086:	4b54      	ldr	r3, [pc, #336]	@ (80031d8 <HAL_GPIO_Init+0x2e8>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003092:	4a52      	ldr	r2, [pc, #328]	@ (80031dc <HAL_GPIO_Init+0x2ec>)
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	3302      	adds	r3, #2
 800309a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	220f      	movs	r2, #15
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a49      	ldr	r2, [pc, #292]	@ (80031e0 <HAL_GPIO_Init+0x2f0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d019      	beq.n	80030f2 <HAL_GPIO_Init+0x202>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a48      	ldr	r2, [pc, #288]	@ (80031e4 <HAL_GPIO_Init+0x2f4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d013      	beq.n	80030ee <HAL_GPIO_Init+0x1fe>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a47      	ldr	r2, [pc, #284]	@ (80031e8 <HAL_GPIO_Init+0x2f8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d00d      	beq.n	80030ea <HAL_GPIO_Init+0x1fa>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a46      	ldr	r2, [pc, #280]	@ (80031ec <HAL_GPIO_Init+0x2fc>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d007      	beq.n	80030e6 <HAL_GPIO_Init+0x1f6>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a45      	ldr	r2, [pc, #276]	@ (80031f0 <HAL_GPIO_Init+0x300>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d101      	bne.n	80030e2 <HAL_GPIO_Init+0x1f2>
 80030de:	2304      	movs	r3, #4
 80030e0:	e008      	b.n	80030f4 <HAL_GPIO_Init+0x204>
 80030e2:	2307      	movs	r3, #7
 80030e4:	e006      	b.n	80030f4 <HAL_GPIO_Init+0x204>
 80030e6:	2303      	movs	r3, #3
 80030e8:	e004      	b.n	80030f4 <HAL_GPIO_Init+0x204>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e002      	b.n	80030f4 <HAL_GPIO_Init+0x204>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <HAL_GPIO_Init+0x204>
 80030f2:	2300      	movs	r3, #0
 80030f4:	69fa      	ldr	r2, [r7, #28]
 80030f6:	f002 0203 	and.w	r2, r2, #3
 80030fa:	0092      	lsls	r2, r2, #2
 80030fc:	4093      	lsls	r3, r2
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4313      	orrs	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003104:	4935      	ldr	r1, [pc, #212]	@ (80031dc <HAL_GPIO_Init+0x2ec>)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	089b      	lsrs	r3, r3, #2
 800310a:	3302      	adds	r3, #2
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003112:	4b38      	ldr	r3, [pc, #224]	@ (80031f4 <HAL_GPIO_Init+0x304>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003136:	4a2f      	ldr	r2, [pc, #188]	@ (80031f4 <HAL_GPIO_Init+0x304>)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800313c:	4b2d      	ldr	r3, [pc, #180]	@ (80031f4 <HAL_GPIO_Init+0x304>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003160:	4a24      	ldr	r2, [pc, #144]	@ (80031f4 <HAL_GPIO_Init+0x304>)
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003166:	4b23      	ldr	r3, [pc, #140]	@ (80031f4 <HAL_GPIO_Init+0x304>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	43db      	mvns	r3, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4013      	ands	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800318a:	4a1a      	ldr	r2, [pc, #104]	@ (80031f4 <HAL_GPIO_Init+0x304>)
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003190:	4b18      	ldr	r3, [pc, #96]	@ (80031f4 <HAL_GPIO_Init+0x304>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	43db      	mvns	r3, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4013      	ands	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031b4:	4a0f      	ldr	r2, [pc, #60]	@ (80031f4 <HAL_GPIO_Init+0x304>)
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	3301      	adds	r3, #1
 80031be:	61fb      	str	r3, [r7, #28]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	2b0f      	cmp	r3, #15
 80031c4:	f67f aea2 	bls.w	8002f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031c8:	bf00      	nop
 80031ca:	bf00      	nop
 80031cc:	3724      	adds	r7, #36	@ 0x24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40023800 	.word	0x40023800
 80031dc:	40013800 	.word	0x40013800
 80031e0:	40020000 	.word	0x40020000
 80031e4:	40020400 	.word	0x40020400
 80031e8:	40020800 	.word	0x40020800
 80031ec:	40020c00 	.word	0x40020c00
 80031f0:	40021000 	.word	0x40021000
 80031f4:	40013c00 	.word	0x40013c00

080031f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	807b      	strh	r3, [r7, #2]
 8003204:	4613      	mov	r3, r2
 8003206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003208:	787b      	ldrb	r3, [r7, #1]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800320e:	887a      	ldrh	r2, [r7, #2]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003214:	e003      	b.n	800321e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003216:	887b      	ldrh	r3, [r7, #2]
 8003218:	041a      	lsls	r2, r3, #16
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	619a      	str	r2, [r3, #24]
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
	...

0800322c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e12b      	b.n	8003496 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7fd fd92 	bl	8000d7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2224      	movs	r2, #36	@ 0x24
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0201 	bic.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800327e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800328e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003290:	f000 fd80 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 8003294:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	4a81      	ldr	r2, [pc, #516]	@ (80034a0 <HAL_I2C_Init+0x274>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d807      	bhi.n	80032b0 <HAL_I2C_Init+0x84>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4a80      	ldr	r2, [pc, #512]	@ (80034a4 <HAL_I2C_Init+0x278>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	bf94      	ite	ls
 80032a8:	2301      	movls	r3, #1
 80032aa:	2300      	movhi	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e006      	b.n	80032be <HAL_I2C_Init+0x92>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4a7d      	ldr	r2, [pc, #500]	@ (80034a8 <HAL_I2C_Init+0x27c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	bf94      	ite	ls
 80032b8:	2301      	movls	r3, #1
 80032ba:	2300      	movhi	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e0e7      	b.n	8003496 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4a78      	ldr	r2, [pc, #480]	@ (80034ac <HAL_I2C_Init+0x280>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	0c9b      	lsrs	r3, r3, #18
 80032d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4a6a      	ldr	r2, [pc, #424]	@ (80034a0 <HAL_I2C_Init+0x274>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d802      	bhi.n	8003300 <HAL_I2C_Init+0xd4>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	3301      	adds	r3, #1
 80032fe:	e009      	b.n	8003314 <HAL_I2C_Init+0xe8>
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003306:	fb02 f303 	mul.w	r3, r2, r3
 800330a:	4a69      	ldr	r2, [pc, #420]	@ (80034b0 <HAL_I2C_Init+0x284>)
 800330c:	fba2 2303 	umull	r2, r3, r2, r3
 8003310:	099b      	lsrs	r3, r3, #6
 8003312:	3301      	adds	r3, #1
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	430b      	orrs	r3, r1
 800331a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003326:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	495c      	ldr	r1, [pc, #368]	@ (80034a0 <HAL_I2C_Init+0x274>)
 8003330:	428b      	cmp	r3, r1
 8003332:	d819      	bhi.n	8003368 <HAL_I2C_Init+0x13c>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	1e59      	subs	r1, r3, #1
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003342:	1c59      	adds	r1, r3, #1
 8003344:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003348:	400b      	ands	r3, r1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <HAL_I2C_Init+0x138>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1e59      	subs	r1, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	fbb1 f3f3 	udiv	r3, r1, r3
 800335c:	3301      	adds	r3, #1
 800335e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003362:	e051      	b.n	8003408 <HAL_I2C_Init+0x1dc>
 8003364:	2304      	movs	r3, #4
 8003366:	e04f      	b.n	8003408 <HAL_I2C_Init+0x1dc>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d111      	bne.n	8003394 <HAL_I2C_Init+0x168>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1e58      	subs	r0, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6859      	ldr	r1, [r3, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	440b      	add	r3, r1
 800337e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003382:	3301      	adds	r3, #1
 8003384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003388:	2b00      	cmp	r3, #0
 800338a:	bf0c      	ite	eq
 800338c:	2301      	moveq	r3, #1
 800338e:	2300      	movne	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	e012      	b.n	80033ba <HAL_I2C_Init+0x18e>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1e58      	subs	r0, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6859      	ldr	r1, [r3, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	0099      	lsls	r1, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033aa:	3301      	adds	r3, #1
 80033ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf0c      	ite	eq
 80033b4:	2301      	moveq	r3, #1
 80033b6:	2300      	movne	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_I2C_Init+0x196>
 80033be:	2301      	movs	r3, #1
 80033c0:	e022      	b.n	8003408 <HAL_I2C_Init+0x1dc>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10e      	bne.n	80033e8 <HAL_I2C_Init+0x1bc>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1e58      	subs	r0, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6859      	ldr	r1, [r3, #4]
 80033d2:	460b      	mov	r3, r1
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	440b      	add	r3, r1
 80033d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80033dc:	3301      	adds	r3, #1
 80033de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033e6:	e00f      	b.n	8003408 <HAL_I2C_Init+0x1dc>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	1e58      	subs	r0, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6859      	ldr	r1, [r3, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	0099      	lsls	r1, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80033fe:	3301      	adds	r3, #1
 8003400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003404:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	6809      	ldr	r1, [r1, #0]
 800340c:	4313      	orrs	r3, r2
 800340e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69da      	ldr	r2, [r3, #28]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003436:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6911      	ldr	r1, [r2, #16]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	68d2      	ldr	r2, [r2, #12]
 8003442:	4311      	orrs	r1, r2
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	430b      	orrs	r3, r1
 800344a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695a      	ldr	r2, [r3, #20]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	000186a0 	.word	0x000186a0
 80034a4:	001e847f 	.word	0x001e847f
 80034a8:	003d08ff 	.word	0x003d08ff
 80034ac:	431bde83 	.word	0x431bde83
 80034b0:	10624dd3 	.word	0x10624dd3

080034b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e267      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d075      	beq.n	80035be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034d2:	4b88      	ldr	r3, [pc, #544]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 030c 	and.w	r3, r3, #12
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d00c      	beq.n	80034f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034de:	4b85      	ldr	r3, [pc, #532]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d112      	bne.n	8003510 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ea:	4b82      	ldr	r3, [pc, #520]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034f6:	d10b      	bne.n	8003510 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f8:	4b7e      	ldr	r3, [pc, #504]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d05b      	beq.n	80035bc <HAL_RCC_OscConfig+0x108>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d157      	bne.n	80035bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e242      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003518:	d106      	bne.n	8003528 <HAL_RCC_OscConfig+0x74>
 800351a:	4b76      	ldr	r3, [pc, #472]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a75      	ldr	r2, [pc, #468]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	e01d      	b.n	8003564 <HAL_RCC_OscConfig+0xb0>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003530:	d10c      	bne.n	800354c <HAL_RCC_OscConfig+0x98>
 8003532:	4b70      	ldr	r3, [pc, #448]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a6f      	ldr	r2, [pc, #444]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003538:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	4b6d      	ldr	r3, [pc, #436]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a6c      	ldr	r2, [pc, #432]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	e00b      	b.n	8003564 <HAL_RCC_OscConfig+0xb0>
 800354c:	4b69      	ldr	r3, [pc, #420]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a68      	ldr	r2, [pc, #416]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003552:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	4b66      	ldr	r3, [pc, #408]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a65      	ldr	r2, [pc, #404]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 800355e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d013      	beq.n	8003594 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7fe fc6a 	bl	8001e44 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003574:	f7fe fc66 	bl	8001e44 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b64      	cmp	r3, #100	@ 0x64
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e207      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003586:	4b5b      	ldr	r3, [pc, #364]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0xc0>
 8003592:	e014      	b.n	80035be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003594:	f7fe fc56 	bl	8001e44 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800359c:	f7fe fc52 	bl	8001e44 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b64      	cmp	r3, #100	@ 0x64
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e1f3      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ae:	4b51      	ldr	r3, [pc, #324]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0xe8>
 80035ba:	e000      	b.n	80035be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d063      	beq.n	8003692 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ca:	4b4a      	ldr	r3, [pc, #296]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 030c 	and.w	r3, r3, #12
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00b      	beq.n	80035ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035d6:	4b47      	ldr	r3, [pc, #284]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035de:	2b08      	cmp	r3, #8
 80035e0:	d11c      	bne.n	800361c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035e2:	4b44      	ldr	r3, [pc, #272]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d116      	bne.n	800361c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ee:	4b41      	ldr	r3, [pc, #260]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d005      	beq.n	8003606 <HAL_RCC_OscConfig+0x152>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d001      	beq.n	8003606 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e1c7      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003606:	4b3b      	ldr	r3, [pc, #236]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4937      	ldr	r1, [pc, #220]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003616:	4313      	orrs	r3, r2
 8003618:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361a:	e03a      	b.n	8003692 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d020      	beq.n	8003666 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003624:	4b34      	ldr	r3, [pc, #208]	@ (80036f8 <HAL_RCC_OscConfig+0x244>)
 8003626:	2201      	movs	r2, #1
 8003628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362a:	f7fe fc0b 	bl	8001e44 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003632:	f7fe fc07 	bl	8001e44 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e1a8      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003644:	4b2b      	ldr	r3, [pc, #172]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003650:	4b28      	ldr	r3, [pc, #160]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	4925      	ldr	r1, [pc, #148]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003660:	4313      	orrs	r3, r2
 8003662:	600b      	str	r3, [r1, #0]
 8003664:	e015      	b.n	8003692 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003666:	4b24      	ldr	r3, [pc, #144]	@ (80036f8 <HAL_RCC_OscConfig+0x244>)
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7fe fbea 	bl	8001e44 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003674:	f7fe fbe6 	bl	8001e44 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e187      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003686:	4b1b      	ldr	r3, [pc, #108]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d036      	beq.n	800370c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d016      	beq.n	80036d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036a6:	4b15      	ldr	r3, [pc, #84]	@ (80036fc <HAL_RCC_OscConfig+0x248>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ac:	f7fe fbca 	bl	8001e44 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036b4:	f7fe fbc6 	bl	8001e44 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e167      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c6:	4b0b      	ldr	r3, [pc, #44]	@ (80036f4 <HAL_RCC_OscConfig+0x240>)
 80036c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0f0      	beq.n	80036b4 <HAL_RCC_OscConfig+0x200>
 80036d2:	e01b      	b.n	800370c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036d4:	4b09      	ldr	r3, [pc, #36]	@ (80036fc <HAL_RCC_OscConfig+0x248>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036da:	f7fe fbb3 	bl	8001e44 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e0:	e00e      	b.n	8003700 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036e2:	f7fe fbaf 	bl	8001e44 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d907      	bls.n	8003700 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e150      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
 80036f4:	40023800 	.word	0x40023800
 80036f8:	42470000 	.word	0x42470000
 80036fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003700:	4b88      	ldr	r3, [pc, #544]	@ (8003924 <HAL_RCC_OscConfig+0x470>)
 8003702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1ea      	bne.n	80036e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 8097 	beq.w	8003848 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800371a:	2300      	movs	r3, #0
 800371c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800371e:	4b81      	ldr	r3, [pc, #516]	@ (8003924 <HAL_RCC_OscConfig+0x470>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10f      	bne.n	800374a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800372a:	2300      	movs	r3, #0
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	4b7d      	ldr	r3, [pc, #500]	@ (8003924 <HAL_RCC_OscConfig+0x470>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	4a7c      	ldr	r2, [pc, #496]	@ (8003924 <HAL_RCC_OscConfig+0x470>)
 8003734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003738:	6413      	str	r3, [r2, #64]	@ 0x40
 800373a:	4b7a      	ldr	r3, [pc, #488]	@ (8003924 <HAL_RCC_OscConfig+0x470>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003742:	60bb      	str	r3, [r7, #8]
 8003744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003746:	2301      	movs	r3, #1
 8003748:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374a:	4b77      	ldr	r3, [pc, #476]	@ (8003928 <HAL_RCC_OscConfig+0x474>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003752:	2b00      	cmp	r3, #0
 8003754:	d118      	bne.n	8003788 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003756:	4b74      	ldr	r3, [pc, #464]	@ (8003928 <HAL_RCC_OscConfig+0x474>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a73      	ldr	r2, [pc, #460]	@ (8003928 <HAL_RCC_OscConfig+0x474>)
 800375c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003762:	f7fe fb6f 	bl	8001e44 <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376a:	f7fe fb6b 	bl	8001e44 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e10c      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377c:	4b6a      	ldr	r3, [pc, #424]	@ (8003928 <HAL_RCC_OscConfig+0x474>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0f0      	beq.n	800376a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d106      	bne.n	800379e <HAL_RCC_OscConfig+0x2ea>
 8003790:	4b64      	ldr	r3, [pc, #400]	@ (8003924 <HAL_RCC_OscConfig+0x470>)
 8003792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003794:	4a63      	ldr	r2, [pc, #396]	@ (8003924 <HAL_RCC_OscConfig+0x470>)
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	6713      	str	r3, [r2, #112]	@ 0x70
 800379c:	e01c      	b.n	80037d8 <HAL_RCC_OscConfig+0x324>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2b05      	cmp	r3, #5
 80037a4:	d10c      	bne.n	80037c0 <HAL_RCC_OscConfig+0x30c>
 80037a6:	4b5f      	ldr	r3, [pc, #380]	@ (8003924 <HAL_RCC_OscConfig+0x470>)
 80037a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037aa:	4a5e      	ldr	r2, [pc, #376]	@ (8003924 <HAL_RCC_OscConfig+0x470>)
 80037ac:	f043 0304 	orr.w	r3, r3, #4
 80037b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80037b2:	4b5c      	ldr	r3, [pc, #368]	@ (8003924 <HAL_RCC_OscConfig+0x470>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b6:	4a5b      	ldr	r2, [pc, #364]	@ (8003924 <HAL_RCC_OscConfig+0x470>)
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80037be:	e00b      	b.n	80037d8 <HAL_RCC_OscConfig+0x324>
 80037c0:	4b58      	ldr	r3, [pc, #352]	@ (8003924 <HAL_RCC_OscConfig+0x470>)
 80037c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c4:	4a57      	ldr	r2, [pc, #348]	@ (8003924 <HAL_RCC_OscConfig+0x470>)
 80037c6:	f023 0301 	bic.w	r3, r3, #1
 80037ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80037cc:	4b55      	ldr	r3, [pc, #340]	@ (8003924 <HAL_RCC_OscConfig+0x470>)
 80037ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d0:	4a54      	ldr	r2, [pc, #336]	@ (8003924 <HAL_RCC_OscConfig+0x470>)
 80037d2:	f023 0304 	bic.w	r3, r3, #4
 80037d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d015      	beq.n	800380c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e0:	f7fe fb30 	bl	8001e44 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e6:	e00a      	b.n	80037fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037e8:	f7fe fb2c 	bl	8001e44 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e0cb      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fe:	4b49      	ldr	r3, [pc, #292]	@ (8003924 <HAL_RCC_OscConfig+0x470>)
 8003800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0ee      	beq.n	80037e8 <HAL_RCC_OscConfig+0x334>
 800380a:	e014      	b.n	8003836 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800380c:	f7fe fb1a 	bl	8001e44 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003812:	e00a      	b.n	800382a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003814:	f7fe fb16 	bl	8001e44 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003822:	4293      	cmp	r3, r2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e0b5      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800382a:	4b3e      	ldr	r3, [pc, #248]	@ (8003924 <HAL_RCC_OscConfig+0x470>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1ee      	bne.n	8003814 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003836:	7dfb      	ldrb	r3, [r7, #23]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d105      	bne.n	8003848 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800383c:	4b39      	ldr	r3, [pc, #228]	@ (8003924 <HAL_RCC_OscConfig+0x470>)
 800383e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003840:	4a38      	ldr	r2, [pc, #224]	@ (8003924 <HAL_RCC_OscConfig+0x470>)
 8003842:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003846:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 80a1 	beq.w	8003994 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003852:	4b34      	ldr	r3, [pc, #208]	@ (8003924 <HAL_RCC_OscConfig+0x470>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 030c 	and.w	r3, r3, #12
 800385a:	2b08      	cmp	r3, #8
 800385c:	d05c      	beq.n	8003918 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d141      	bne.n	80038ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003866:	4b31      	ldr	r3, [pc, #196]	@ (800392c <HAL_RCC_OscConfig+0x478>)
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386c:	f7fe faea 	bl	8001e44 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003874:	f7fe fae6 	bl	8001e44 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e087      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003886:	4b27      	ldr	r3, [pc, #156]	@ (8003924 <HAL_RCC_OscConfig+0x470>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69da      	ldr	r2, [r3, #28]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a0:	019b      	lsls	r3, r3, #6
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a8:	085b      	lsrs	r3, r3, #1
 80038aa:	3b01      	subs	r3, #1
 80038ac:	041b      	lsls	r3, r3, #16
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b4:	061b      	lsls	r3, r3, #24
 80038b6:	491b      	ldr	r1, [pc, #108]	@ (8003924 <HAL_RCC_OscConfig+0x470>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038bc:	4b1b      	ldr	r3, [pc, #108]	@ (800392c <HAL_RCC_OscConfig+0x478>)
 80038be:	2201      	movs	r2, #1
 80038c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c2:	f7fe fabf 	bl	8001e44 <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c8:	e008      	b.n	80038dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ca:	f7fe fabb 	bl	8001e44 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e05c      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038dc:	4b11      	ldr	r3, [pc, #68]	@ (8003924 <HAL_RCC_OscConfig+0x470>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0f0      	beq.n	80038ca <HAL_RCC_OscConfig+0x416>
 80038e8:	e054      	b.n	8003994 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ea:	4b10      	ldr	r3, [pc, #64]	@ (800392c <HAL_RCC_OscConfig+0x478>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7fe faa8 	bl	8001e44 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f8:	f7fe faa4 	bl	8001e44 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e045      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800390a:	4b06      	ldr	r3, [pc, #24]	@ (8003924 <HAL_RCC_OscConfig+0x470>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f0      	bne.n	80038f8 <HAL_RCC_OscConfig+0x444>
 8003916:	e03d      	b.n	8003994 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d107      	bne.n	8003930 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e038      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
 8003924:	40023800 	.word	0x40023800
 8003928:	40007000 	.word	0x40007000
 800392c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003930:	4b1b      	ldr	r3, [pc, #108]	@ (80039a0 <HAL_RCC_OscConfig+0x4ec>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d028      	beq.n	8003990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003948:	429a      	cmp	r2, r3
 800394a:	d121      	bne.n	8003990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003956:	429a      	cmp	r2, r3
 8003958:	d11a      	bne.n	8003990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003960:	4013      	ands	r3, r2
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003966:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003968:	4293      	cmp	r3, r2
 800396a:	d111      	bne.n	8003990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003976:	085b      	lsrs	r3, r3, #1
 8003978:	3b01      	subs	r3, #1
 800397a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800397c:	429a      	cmp	r2, r3
 800397e:	d107      	bne.n	8003990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800398c:	429a      	cmp	r2, r3
 800398e:	d001      	beq.n	8003994 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e000      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40023800 	.word	0x40023800

080039a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e0cc      	b.n	8003b52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039b8:	4b68      	ldr	r3, [pc, #416]	@ (8003b5c <HAL_RCC_ClockConfig+0x1b8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d90c      	bls.n	80039e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c6:	4b65      	ldr	r3, [pc, #404]	@ (8003b5c <HAL_RCC_ClockConfig+0x1b8>)
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ce:	4b63      	ldr	r3, [pc, #396]	@ (8003b5c <HAL_RCC_ClockConfig+0x1b8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e0b8      	b.n	8003b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d020      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039f8:	4b59      	ldr	r3, [pc, #356]	@ (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	4a58      	ldr	r2, [pc, #352]	@ (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0308 	and.w	r3, r3, #8
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a10:	4b53      	ldr	r3, [pc, #332]	@ (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	4a52      	ldr	r2, [pc, #328]	@ (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a1c:	4b50      	ldr	r3, [pc, #320]	@ (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	494d      	ldr	r1, [pc, #308]	@ (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d044      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d107      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a42:	4b47      	ldr	r3, [pc, #284]	@ (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d119      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e07f      	b.n	8003b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d003      	beq.n	8003a62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d107      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a62:	4b3f      	ldr	r3, [pc, #252]	@ (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d109      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e06f      	b.n	8003b52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a72:	4b3b      	ldr	r3, [pc, #236]	@ (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e067      	b.n	8003b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a82:	4b37      	ldr	r3, [pc, #220]	@ (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f023 0203 	bic.w	r2, r3, #3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	4934      	ldr	r1, [pc, #208]	@ (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a94:	f7fe f9d6 	bl	8001e44 <HAL_GetTick>
 8003a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9a:	e00a      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a9c:	f7fe f9d2 	bl	8001e44 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e04f      	b.n	8003b52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 020c 	and.w	r2, r3, #12
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d1eb      	bne.n	8003a9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ac4:	4b25      	ldr	r3, [pc, #148]	@ (8003b5c <HAL_RCC_ClockConfig+0x1b8>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d20c      	bcs.n	8003aec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad2:	4b22      	ldr	r3, [pc, #136]	@ (8003b5c <HAL_RCC_ClockConfig+0x1b8>)
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ada:	4b20      	ldr	r3, [pc, #128]	@ (8003b5c <HAL_RCC_ClockConfig+0x1b8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d001      	beq.n	8003aec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e032      	b.n	8003b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003af8:	4b19      	ldr	r3, [pc, #100]	@ (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	4916      	ldr	r1, [pc, #88]	@ (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d009      	beq.n	8003b2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b16:	4b12      	ldr	r3, [pc, #72]	@ (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	490e      	ldr	r1, [pc, #56]	@ (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b2a:	f000 f821 	bl	8003b70 <HAL_RCC_GetSysClockFreq>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	4b0b      	ldr	r3, [pc, #44]	@ (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	091b      	lsrs	r3, r3, #4
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	490a      	ldr	r1, [pc, #40]	@ (8003b64 <HAL_RCC_ClockConfig+0x1c0>)
 8003b3c:	5ccb      	ldrb	r3, [r1, r3]
 8003b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b42:	4a09      	ldr	r2, [pc, #36]	@ (8003b68 <HAL_RCC_ClockConfig+0x1c4>)
 8003b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b46:	4b09      	ldr	r3, [pc, #36]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fd fa42 	bl	8000fd4 <HAL_InitTick>

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40023c00 	.word	0x40023c00
 8003b60:	40023800 	.word	0x40023800
 8003b64:	0800c1b4 	.word	0x0800c1b4
 8003b68:	20000000 	.word	0x20000000
 8003b6c:	20000008 	.word	0x20000008

08003b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b74:	b094      	sub	sp, #80	@ 0x50
 8003b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b80:	2300      	movs	r3, #0
 8003b82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b88:	4b79      	ldr	r3, [pc, #484]	@ (8003d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 030c 	and.w	r3, r3, #12
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d00d      	beq.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	f200 80e1 	bhi.w	8003d5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d003      	beq.n	8003baa <HAL_RCC_GetSysClockFreq+0x3a>
 8003ba2:	e0db      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ba4:	4b73      	ldr	r3, [pc, #460]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003ba8:	e0db      	b.n	8003d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003baa:	4b73      	ldr	r3, [pc, #460]	@ (8003d78 <HAL_RCC_GetSysClockFreq+0x208>)
 8003bac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bae:	e0d8      	b.n	8003d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bb0:	4b6f      	ldr	r3, [pc, #444]	@ (8003d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bb8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bba:	4b6d      	ldr	r3, [pc, #436]	@ (8003d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d063      	beq.n	8003c8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc6:	4b6a      	ldr	r3, [pc, #424]	@ (8003d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	099b      	lsrs	r3, r3, #6
 8003bcc:	2200      	movs	r2, #0
 8003bce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bda:	2300      	movs	r3, #0
 8003bdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003be2:	4622      	mov	r2, r4
 8003be4:	462b      	mov	r3, r5
 8003be6:	f04f 0000 	mov.w	r0, #0
 8003bea:	f04f 0100 	mov.w	r1, #0
 8003bee:	0159      	lsls	r1, r3, #5
 8003bf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bf4:	0150      	lsls	r0, r2, #5
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	1a51      	subs	r1, r2, r1
 8003bfe:	6139      	str	r1, [r7, #16]
 8003c00:	4629      	mov	r1, r5
 8003c02:	eb63 0301 	sbc.w	r3, r3, r1
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c14:	4659      	mov	r1, fp
 8003c16:	018b      	lsls	r3, r1, #6
 8003c18:	4651      	mov	r1, sl
 8003c1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c1e:	4651      	mov	r1, sl
 8003c20:	018a      	lsls	r2, r1, #6
 8003c22:	4651      	mov	r1, sl
 8003c24:	ebb2 0801 	subs.w	r8, r2, r1
 8003c28:	4659      	mov	r1, fp
 8003c2a:	eb63 0901 	sbc.w	r9, r3, r1
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c42:	4690      	mov	r8, r2
 8003c44:	4699      	mov	r9, r3
 8003c46:	4623      	mov	r3, r4
 8003c48:	eb18 0303 	adds.w	r3, r8, r3
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	462b      	mov	r3, r5
 8003c50:	eb49 0303 	adc.w	r3, r9, r3
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c62:	4629      	mov	r1, r5
 8003c64:	024b      	lsls	r3, r1, #9
 8003c66:	4621      	mov	r1, r4
 8003c68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c6c:	4621      	mov	r1, r4
 8003c6e:	024a      	lsls	r2, r1, #9
 8003c70:	4610      	mov	r0, r2
 8003c72:	4619      	mov	r1, r3
 8003c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c76:	2200      	movs	r2, #0
 8003c78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c80:	f7fc fb06 	bl	8000290 <__aeabi_uldivmod>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4613      	mov	r3, r2
 8003c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c8c:	e058      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c8e:	4b38      	ldr	r3, [pc, #224]	@ (8003d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	099b      	lsrs	r3, r3, #6
 8003c94:	2200      	movs	r2, #0
 8003c96:	4618      	mov	r0, r3
 8003c98:	4611      	mov	r1, r2
 8003c9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c9e:	623b      	str	r3, [r7, #32]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ca4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ca8:	4642      	mov	r2, r8
 8003caa:	464b      	mov	r3, r9
 8003cac:	f04f 0000 	mov.w	r0, #0
 8003cb0:	f04f 0100 	mov.w	r1, #0
 8003cb4:	0159      	lsls	r1, r3, #5
 8003cb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cba:	0150      	lsls	r0, r2, #5
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4641      	mov	r1, r8
 8003cc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cc6:	4649      	mov	r1, r9
 8003cc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ce0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ce4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	f04f 0300 	mov.w	r3, #0
 8003cf0:	00eb      	lsls	r3, r5, #3
 8003cf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cf6:	00e2      	lsls	r2, r4, #3
 8003cf8:	4614      	mov	r4, r2
 8003cfa:	461d      	mov	r5, r3
 8003cfc:	4643      	mov	r3, r8
 8003cfe:	18e3      	adds	r3, r4, r3
 8003d00:	603b      	str	r3, [r7, #0]
 8003d02:	464b      	mov	r3, r9
 8003d04:	eb45 0303 	adc.w	r3, r5, r3
 8003d08:	607b      	str	r3, [r7, #4]
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d16:	4629      	mov	r1, r5
 8003d18:	028b      	lsls	r3, r1, #10
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d20:	4621      	mov	r1, r4
 8003d22:	028a      	lsls	r2, r1, #10
 8003d24:	4610      	mov	r0, r2
 8003d26:	4619      	mov	r1, r3
 8003d28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	61fa      	str	r2, [r7, #28]
 8003d30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d34:	f7fc faac 	bl	8000290 <__aeabi_uldivmod>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d40:	4b0b      	ldr	r3, [pc, #44]	@ (8003d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	0c1b      	lsrs	r3, r3, #16
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003d50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d5a:	e002      	b.n	8003d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d5c:	4b05      	ldr	r3, [pc, #20]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3750      	adds	r7, #80	@ 0x50
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d6e:	bf00      	nop
 8003d70:	40023800 	.word	0x40023800
 8003d74:	00f42400 	.word	0x00f42400
 8003d78:	007a1200 	.word	0x007a1200

08003d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d80:	4b03      	ldr	r3, [pc, #12]	@ (8003d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d82:	681b      	ldr	r3, [r3, #0]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	20000000 	.word	0x20000000

08003d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d98:	f7ff fff0 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	4b05      	ldr	r3, [pc, #20]	@ (8003db4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	0a9b      	lsrs	r3, r3, #10
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	4903      	ldr	r1, [pc, #12]	@ (8003db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003daa:	5ccb      	ldrb	r3, [r1, r3]
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40023800 	.word	0x40023800
 8003db8:	0800c1c4 	.word	0x0800c1c4

08003dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dc0:	f7ff ffdc 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	4b05      	ldr	r3, [pc, #20]	@ (8003ddc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	0b5b      	lsrs	r3, r3, #13
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	4903      	ldr	r1, [pc, #12]	@ (8003de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dd2:	5ccb      	ldrb	r3, [r1, r3]
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	0800c1c4 	.word	0x0800c1c4

08003de4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	220f      	movs	r2, #15
 8003df2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003df4:	4b12      	ldr	r3, [pc, #72]	@ (8003e40 <HAL_RCC_GetClockConfig+0x5c>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 0203 	and.w	r2, r3, #3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e00:	4b0f      	ldr	r3, [pc, #60]	@ (8003e40 <HAL_RCC_GetClockConfig+0x5c>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e40 <HAL_RCC_GetClockConfig+0x5c>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e18:	4b09      	ldr	r3, [pc, #36]	@ (8003e40 <HAL_RCC_GetClockConfig+0x5c>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	08db      	lsrs	r3, r3, #3
 8003e1e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e26:	4b07      	ldr	r3, [pc, #28]	@ (8003e44 <HAL_RCC_GetClockConfig+0x60>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0207 	and.w	r2, r3, #7
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	601a      	str	r2, [r3, #0]
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40023800 	.word	0x40023800
 8003e44:	40023c00 	.word	0x40023c00

08003e48 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d105      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d035      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e70:	4b67      	ldr	r3, [pc, #412]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e76:	f7fd ffe5 	bl	8001e44 <HAL_GetTick>
 8003e7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e7c:	e008      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e7e:	f7fd ffe1 	bl	8001e44 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e0ba      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e90:	4b60      	ldr	r3, [pc, #384]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1f0      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	019a      	lsls	r2, r3, #6
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	071b      	lsls	r3, r3, #28
 8003ea8:	495a      	ldr	r1, [pc, #360]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003eb0:	4b57      	ldr	r3, [pc, #348]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003eb6:	f7fd ffc5 	bl	8001e44 <HAL_GetTick>
 8003eba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ebe:	f7fd ffc1 	bl	8001e44 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e09a      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ed0:	4b50      	ldr	r3, [pc, #320]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0f0      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 8083 	beq.w	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	4b49      	ldr	r3, [pc, #292]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef2:	4a48      	ldr	r2, [pc, #288]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003efa:	4b46      	ldr	r3, [pc, #280]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f06:	4b44      	ldr	r3, [pc, #272]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a43      	ldr	r2, [pc, #268]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f10:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f12:	f7fd ff97 	bl	8001e44 <HAL_GetTick>
 8003f16:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f18:	e008      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f1a:	f7fd ff93 	bl	8001e44 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e06c      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f2c:	4b3a      	ldr	r3, [pc, #232]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0f0      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f38:	4b36      	ldr	r3, [pc, #216]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f40:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d02f      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d028      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f56:	4b2f      	ldr	r3, [pc, #188]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f5e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f60:	4b2e      	ldr	r3, [pc, #184]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f62:	2201      	movs	r2, #1
 8003f64:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f66:	4b2d      	ldr	r3, [pc, #180]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f6c:	4a29      	ldr	r2, [pc, #164]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f72:	4b28      	ldr	r3, [pc, #160]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d114      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f7e:	f7fd ff61 	bl	8001e44 <HAL_GetTick>
 8003f82:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f84:	e00a      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f86:	f7fd ff5d 	bl	8001e44 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e034      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0ee      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fb4:	d10d      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003fb6:	4b17      	ldr	r3, [pc, #92]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003fc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fca:	4912      	ldr	r1, [pc, #72]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	608b      	str	r3, [r1, #8]
 8003fd0:	e005      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003fd2:	4b10      	ldr	r3, [pc, #64]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fd8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003fdc:	6093      	str	r3, [r2, #8]
 8003fde:	4b0d      	ldr	r3, [pc, #52]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fe0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fea:	490a      	ldr	r1, [pc, #40]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	7c1a      	ldrb	r2, [r3, #16]
 8004000:	4b07      	ldr	r3, [pc, #28]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004002:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	42470068 	.word	0x42470068
 8004014:	40023800 	.word	0x40023800
 8004018:	40007000 	.word	0x40007000
 800401c:	42470e40 	.word	0x42470e40
 8004020:	424711e0 	.word	0x424711e0

08004024 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e073      	b.n	8004122 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	7f5b      	ldrb	r3, [r3, #29]
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d105      	bne.n	8004050 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7fc fede 	bl	8000e0c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b10      	cmp	r3, #16
 8004062:	d055      	beq.n	8004110 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	22ca      	movs	r2, #202	@ 0xca
 800406a:	625a      	str	r2, [r3, #36]	@ 0x24
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2253      	movs	r2, #83	@ 0x53
 8004072:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f99d 	bl	80043b4 <RTC_EnterInitMode>
 800407a:	4603      	mov	r3, r0
 800407c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d12c      	bne.n	80040de <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6812      	ldr	r2, [r2, #0]
 800408e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004092:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004096:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6899      	ldr	r1, [r3, #8]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	68d2      	ldr	r2, [r2, #12]
 80040be:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6919      	ldr	r1, [r3, #16]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	041a      	lsls	r2, r3, #16
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f9a4 	bl	8004422 <RTC_ExitInitMode>
 80040da:	4603      	mov	r3, r0
 80040dc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80040de:	7bfb      	ldrb	r3, [r7, #15]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d110      	bne.n	8004106 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80040f2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699a      	ldr	r2, [r3, #24]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	22ff      	movs	r2, #255	@ 0xff
 800410c:	625a      	str	r2, [r3, #36]	@ 0x24
 800410e:	e001      	b.n	8004114 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004110:	2300      	movs	r3, #0
 8004112:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004114:	7bfb      	ldrb	r3, [r7, #15]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d102      	bne.n	8004120 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004120:	7bfb      	ldrb	r3, [r7, #15]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800412a:	b590      	push	{r4, r7, lr}
 800412c:	b087      	sub	sp, #28
 800412e:	af00      	add	r7, sp, #0
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	7f1b      	ldrb	r3, [r3, #28]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <HAL_RTC_SetTime+0x1c>
 8004142:	2302      	movs	r3, #2
 8004144:	e087      	b.n	8004256 <HAL_RTC_SetTime+0x12c>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2201      	movs	r2, #1
 800414a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2202      	movs	r2, #2
 8004150:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d126      	bne.n	80041a6 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004162:	2b00      	cmp	r3, #0
 8004164:	d102      	bne.n	800416c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2200      	movs	r2, #0
 800416a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	f000 f97b 	bl	800446c <RTC_ByteToBcd2>
 8004176:	4603      	mov	r3, r0
 8004178:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	785b      	ldrb	r3, [r3, #1]
 800417e:	4618      	mov	r0, r3
 8004180:	f000 f974 	bl	800446c <RTC_ByteToBcd2>
 8004184:	4603      	mov	r3, r0
 8004186:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004188:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	789b      	ldrb	r3, [r3, #2]
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f96c 	bl	800446c <RTC_ByteToBcd2>
 8004194:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004196:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	78db      	ldrb	r3, [r3, #3]
 800419e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	e018      	b.n	80041d8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d102      	bne.n	80041ba <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2200      	movs	r2, #0
 80041b8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	785b      	ldrb	r3, [r3, #1]
 80041c4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80041c6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80041cc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	78db      	ldrb	r3, [r3, #3]
 80041d2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80041d4:	4313      	orrs	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	22ca      	movs	r2, #202	@ 0xca
 80041de:	625a      	str	r2, [r3, #36]	@ 0x24
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2253      	movs	r2, #83	@ 0x53
 80041e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 f8e3 	bl	80043b4 <RTC_EnterInitMode>
 80041ee:	4603      	mov	r3, r0
 80041f0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80041f2:	7cfb      	ldrb	r3, [r7, #19]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d120      	bne.n	800423a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004202:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004206:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004216:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6899      	ldr	r1, [r3, #8]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	431a      	orrs	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 f8f6 	bl	8004422 <RTC_ExitInitMode>
 8004236:	4603      	mov	r3, r0
 8004238:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800423a:	7cfb      	ldrb	r3, [r7, #19]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d102      	bne.n	8004246 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2201      	movs	r2, #1
 8004244:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	22ff      	movs	r2, #255	@ 0xff
 800424c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	771a      	strb	r2, [r3, #28]

  return status;
 8004254:	7cfb      	ldrb	r3, [r7, #19]
}
 8004256:	4618      	mov	r0, r3
 8004258:	371c      	adds	r7, #28
 800425a:	46bd      	mov	sp, r7
 800425c:	bd90      	pop	{r4, r7, pc}

0800425e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800425e:	b590      	push	{r4, r7, lr}
 8004260:	b087      	sub	sp, #28
 8004262:	af00      	add	r7, sp, #0
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	7f1b      	ldrb	r3, [r3, #28]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d101      	bne.n	800427a <HAL_RTC_SetDate+0x1c>
 8004276:	2302      	movs	r3, #2
 8004278:	e071      	b.n	800435e <HAL_RTC_SetDate+0x100>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2201      	movs	r2, #1
 800427e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2202      	movs	r2, #2
 8004284:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10e      	bne.n	80042aa <HAL_RTC_SetDate+0x4c>
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	785b      	ldrb	r3, [r3, #1]
 8004290:	f003 0310 	and.w	r3, r3, #16
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	785b      	ldrb	r3, [r3, #1]
 800429c:	f023 0310 	bic.w	r3, r3, #16
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	330a      	adds	r3, #10
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d11c      	bne.n	80042ea <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	78db      	ldrb	r3, [r3, #3]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 f8d9 	bl	800446c <RTC_ByteToBcd2>
 80042ba:	4603      	mov	r3, r0
 80042bc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	785b      	ldrb	r3, [r3, #1]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 f8d2 	bl	800446c <RTC_ByteToBcd2>
 80042c8:	4603      	mov	r3, r0
 80042ca:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80042cc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	789b      	ldrb	r3, [r3, #2]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 f8ca 	bl	800446c <RTC_ByteToBcd2>
 80042d8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80042da:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80042e4:	4313      	orrs	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	e00e      	b.n	8004308 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	78db      	ldrb	r3, [r3, #3]
 80042ee:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	785b      	ldrb	r3, [r3, #1]
 80042f4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80042f6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80042fc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	22ca      	movs	r2, #202	@ 0xca
 800430e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2253      	movs	r2, #83	@ 0x53
 8004316:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f84b 	bl	80043b4 <RTC_EnterInitMode>
 800431e:	4603      	mov	r3, r0
 8004320:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004322:	7cfb      	ldrb	r3, [r7, #19]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10c      	bne.n	8004342 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004332:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004336:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 f872 	bl	8004422 <RTC_ExitInitMode>
 800433e:	4603      	mov	r3, r0
 8004340:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004342:	7cfb      	ldrb	r3, [r7, #19]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d102      	bne.n	800434e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2201      	movs	r2, #1
 800434c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	22ff      	movs	r2, #255	@ 0xff
 8004354:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	771a      	strb	r2, [r3, #28]

  return status;
 800435c:	7cfb      	ldrb	r3, [r7, #19]
}
 800435e:	4618      	mov	r0, r3
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	bd90      	pop	{r4, r7, pc}
	...

08004368 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a0d      	ldr	r2, [pc, #52]	@ (80043b0 <HAL_RTC_WaitForSynchro+0x48>)
 800437a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800437c:	f7fd fd62 	bl	8001e44 <HAL_GetTick>
 8004380:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004382:	e009      	b.n	8004398 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004384:	f7fd fd5e 	bl	8001e44 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004392:	d901      	bls.n	8004398 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e007      	b.n	80043a8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f003 0320 	and.w	r3, r3, #32
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0ee      	beq.n	8004384 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	00013f5f 	.word	0x00013f5f

080043b4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d122      	bne.n	8004418 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80043e0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043e2:	f7fd fd2f 	bl	8001e44 <HAL_GetTick>
 80043e6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80043e8:	e00c      	b.n	8004404 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80043ea:	f7fd fd2b 	bl	8001e44 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80043f8:	d904      	bls.n	8004404 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2204      	movs	r2, #4
 80043fe:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800440e:	2b00      	cmp	r3, #0
 8004410:	d102      	bne.n	8004418 <RTC_EnterInitMode+0x64>
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d1e8      	bne.n	80043ea <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004418:	7bfb      	ldrb	r3, [r7, #15]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800443c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10a      	bne.n	8004462 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff ff8b 	bl	8004368 <HAL_RTC_WaitForSynchro>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d004      	beq.n	8004462 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2204      	movs	r2, #4
 800445c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004462:	7bfb      	ldrb	r3, [r7, #15]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800447a:	e005      	b.n	8004488 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	3301      	adds	r3, #1
 8004480:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	3b0a      	subs	r3, #10
 8004486:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004488:	79fb      	ldrb	r3, [r7, #7]
 800448a:	2b09      	cmp	r3, #9
 800448c:	d8f6      	bhi.n	800447c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	b2db      	uxtb	r3, r3
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	b2da      	uxtb	r2, r3
 8004496:	79fb      	ldrb	r3, [r7, #7]
 8004498:	4313      	orrs	r3, r2
 800449a:	b2db      	uxtb	r3, r3
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e07b      	b.n	80045b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d108      	bne.n	80044d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044ca:	d009      	beq.n	80044e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	61da      	str	r2, [r3, #28]
 80044d2:	e005      	b.n	80044e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d106      	bne.n	8004500 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7fc fcb2 	bl	8000e64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2202      	movs	r2, #2
 8004504:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004516:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004528:	431a      	orrs	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004532:	431a      	orrs	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004564:	ea42 0103 	orr.w	r1, r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	0c1b      	lsrs	r3, r3, #16
 800457e:	f003 0104 	and.w	r1, r3, #4
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004586:	f003 0210 	and.w	r2, r3, #16
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69da      	ldr	r2, [r3, #28]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b088      	sub	sp, #32
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	603b      	str	r3, [r7, #0]
 80045c6:	4613      	mov	r3, r2
 80045c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_SPI_Transmit+0x22>
 80045d8:	2302      	movs	r3, #2
 80045da:	e12d      	b.n	8004838 <HAL_SPI_Transmit+0x27e>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045e4:	f7fd fc2e 	bl	8001e44 <HAL_GetTick>
 80045e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80045ea:	88fb      	ldrh	r3, [r7, #6]
 80045ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d002      	beq.n	8004600 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80045fa:	2302      	movs	r3, #2
 80045fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045fe:	e116      	b.n	800482e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <HAL_SPI_Transmit+0x52>
 8004606:	88fb      	ldrh	r3, [r7, #6]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d102      	bne.n	8004612 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004610:	e10d      	b.n	800482e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2203      	movs	r2, #3
 8004616:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	88fa      	ldrh	r2, [r7, #6]
 800462a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	88fa      	ldrh	r2, [r7, #6]
 8004630:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004658:	d10f      	bne.n	800467a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004668:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004678:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004684:	2b40      	cmp	r3, #64	@ 0x40
 8004686:	d007      	beq.n	8004698 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004696:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046a0:	d14f      	bne.n	8004742 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_SPI_Transmit+0xf6>
 80046aa:	8afb      	ldrh	r3, [r7, #22]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d142      	bne.n	8004736 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b4:	881a      	ldrh	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c0:	1c9a      	adds	r2, r3, #2
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046d4:	e02f      	b.n	8004736 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d112      	bne.n	800470a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e8:	881a      	ldrh	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f4:	1c9a      	adds	r2, r3, #2
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046fe:	b29b      	uxth	r3, r3
 8004700:	3b01      	subs	r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004708:	e015      	b.n	8004736 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800470a:	f7fd fb9b 	bl	8001e44 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d803      	bhi.n	8004722 <HAL_SPI_Transmit+0x168>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004720:	d102      	bne.n	8004728 <HAL_SPI_Transmit+0x16e>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d106      	bne.n	8004736 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004734:	e07b      	b.n	800482e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800473a:	b29b      	uxth	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1ca      	bne.n	80046d6 <HAL_SPI_Transmit+0x11c>
 8004740:	e050      	b.n	80047e4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <HAL_SPI_Transmit+0x196>
 800474a:	8afb      	ldrh	r3, [r7, #22]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d144      	bne.n	80047da <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	330c      	adds	r3, #12
 800475a:	7812      	ldrb	r2, [r2, #0]
 800475c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800476c:	b29b      	uxth	r3, r3
 800476e:	3b01      	subs	r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004776:	e030      	b.n	80047da <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b02      	cmp	r3, #2
 8004784:	d113      	bne.n	80047ae <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	330c      	adds	r3, #12
 8004790:	7812      	ldrb	r2, [r2, #0]
 8004792:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80047ac:	e015      	b.n	80047da <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047ae:	f7fd fb49 	bl	8001e44 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d803      	bhi.n	80047c6 <HAL_SPI_Transmit+0x20c>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c4:	d102      	bne.n	80047cc <HAL_SPI_Transmit+0x212>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d106      	bne.n	80047da <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80047d8:	e029      	b.n	800482e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047de:	b29b      	uxth	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1c9      	bne.n	8004778 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	6839      	ldr	r1, [r7, #0]
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 fa61 	bl	8004cb0 <SPI_EndRxTxTransaction>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2220      	movs	r2, #32
 80047f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10a      	bne.n	8004818 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004802:	2300      	movs	r3, #0
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	613b      	str	r3, [r7, #16]
 8004816:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	77fb      	strb	r3, [r7, #31]
 8004824:	e003      	b.n	800482e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004836:	7ffb      	ldrb	r3, [r7, #31]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3720      	adds	r7, #32
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08c      	sub	sp, #48	@ 0x30
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800484e:	2301      	movs	r3, #1
 8004850:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800485e:	2b01      	cmp	r3, #1
 8004860:	d101      	bne.n	8004866 <HAL_SPI_TransmitReceive+0x26>
 8004862:	2302      	movs	r3, #2
 8004864:	e198      	b.n	8004b98 <HAL_SPI_TransmitReceive+0x358>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800486e:	f7fd fae9 	bl	8001e44 <HAL_GetTick>
 8004872:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800487a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004884:	887b      	ldrh	r3, [r7, #2]
 8004886:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004888:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800488c:	2b01      	cmp	r3, #1
 800488e:	d00f      	beq.n	80048b0 <HAL_SPI_TransmitReceive+0x70>
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004896:	d107      	bne.n	80048a8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d103      	bne.n	80048a8 <HAL_SPI_TransmitReceive+0x68>
 80048a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d003      	beq.n	80048b0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80048a8:	2302      	movs	r3, #2
 80048aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80048ae:	e16d      	b.n	8004b8c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d005      	beq.n	80048c2 <HAL_SPI_TransmitReceive+0x82>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d002      	beq.n	80048c2 <HAL_SPI_TransmitReceive+0x82>
 80048bc:	887b      	ldrh	r3, [r7, #2]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d103      	bne.n	80048ca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80048c8:	e160      	b.n	8004b8c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d003      	beq.n	80048de <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2205      	movs	r2, #5
 80048da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	887a      	ldrh	r2, [r7, #2]
 80048ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	887a      	ldrh	r2, [r7, #2]
 80048f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	887a      	ldrh	r2, [r7, #2]
 8004900:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	887a      	ldrh	r2, [r7, #2]
 8004906:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800491e:	2b40      	cmp	r3, #64	@ 0x40
 8004920:	d007      	beq.n	8004932 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004930:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800493a:	d17c      	bne.n	8004a36 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <HAL_SPI_TransmitReceive+0x10a>
 8004944:	8b7b      	ldrh	r3, [r7, #26]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d16a      	bne.n	8004a20 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494e:	881a      	ldrh	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495a:	1c9a      	adds	r2, r3, #2
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004964:	b29b      	uxth	r3, r3
 8004966:	3b01      	subs	r3, #1
 8004968:	b29a      	uxth	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800496e:	e057      	b.n	8004a20 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b02      	cmp	r3, #2
 800497c:	d11b      	bne.n	80049b6 <HAL_SPI_TransmitReceive+0x176>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004982:	b29b      	uxth	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d016      	beq.n	80049b6 <HAL_SPI_TransmitReceive+0x176>
 8004988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800498a:	2b01      	cmp	r3, #1
 800498c:	d113      	bne.n	80049b6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004992:	881a      	ldrh	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499e:	1c9a      	adds	r2, r3, #2
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d119      	bne.n	80049f8 <HAL_SPI_TransmitReceive+0x1b8>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d014      	beq.n	80049f8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d8:	b292      	uxth	r2, r2
 80049da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e0:	1c9a      	adds	r2, r3, #2
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049f4:	2301      	movs	r3, #1
 80049f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80049f8:	f7fd fa24 	bl	8001e44 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d80b      	bhi.n	8004a20 <HAL_SPI_TransmitReceive+0x1e0>
 8004a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0e:	d007      	beq.n	8004a20 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004a1e:	e0b5      	b.n	8004b8c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1a2      	bne.n	8004970 <HAL_SPI_TransmitReceive+0x130>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d19d      	bne.n	8004970 <HAL_SPI_TransmitReceive+0x130>
 8004a34:	e080      	b.n	8004b38 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <HAL_SPI_TransmitReceive+0x204>
 8004a3e:	8b7b      	ldrh	r3, [r7, #26]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d16f      	bne.n	8004b24 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	330c      	adds	r3, #12
 8004a4e:	7812      	ldrb	r2, [r2, #0]
 8004a50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a56:	1c5a      	adds	r2, r3, #1
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	3b01      	subs	r3, #1
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a6a:	e05b      	b.n	8004b24 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d11c      	bne.n	8004ab4 <HAL_SPI_TransmitReceive+0x274>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d017      	beq.n	8004ab4 <HAL_SPI_TransmitReceive+0x274>
 8004a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d114      	bne.n	8004ab4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	330c      	adds	r3, #12
 8004a94:	7812      	ldrb	r2, [r2, #0]
 8004a96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d119      	bne.n	8004af6 <HAL_SPI_TransmitReceive+0x2b6>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d014      	beq.n	8004af6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	3b01      	subs	r3, #1
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004af2:	2301      	movs	r3, #1
 8004af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004af6:	f7fd f9a5 	bl	8001e44 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d803      	bhi.n	8004b0e <HAL_SPI_TransmitReceive+0x2ce>
 8004b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0c:	d102      	bne.n	8004b14 <HAL_SPI_TransmitReceive+0x2d4>
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d107      	bne.n	8004b24 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004b22:	e033      	b.n	8004b8c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d19e      	bne.n	8004a6c <HAL_SPI_TransmitReceive+0x22c>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d199      	bne.n	8004a6c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 f8b7 	bl	8004cb0 <SPI_EndRxTxTransaction>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d006      	beq.n	8004b56 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2220      	movs	r2, #32
 8004b52:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004b54:	e01a      	b.n	8004b8c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10a      	bne.n	8004b74 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b5e:	2300      	movs	r3, #0
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	617b      	str	r3, [r7, #20]
 8004b72:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b82:	e003      	b.n	8004b8c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004b94:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3730      	adds	r7, #48	@ 0x30
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	4613      	mov	r3, r2
 8004bae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bb0:	f7fd f948 	bl	8001e44 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb8:	1a9b      	subs	r3, r3, r2
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bc0:	f7fd f940 	bl	8001e44 <HAL_GetTick>
 8004bc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bc6:	4b39      	ldr	r3, [pc, #228]	@ (8004cac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	015b      	lsls	r3, r3, #5
 8004bcc:	0d1b      	lsrs	r3, r3, #20
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	fb02 f303 	mul.w	r3, r2, r3
 8004bd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bd6:	e054      	b.n	8004c82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bde:	d050      	beq.n	8004c82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004be0:	f7fd f930 	bl	8001e44 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	69fa      	ldr	r2, [r7, #28]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d902      	bls.n	8004bf6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d13d      	bne.n	8004c72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c0e:	d111      	bne.n	8004c34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c18:	d004      	beq.n	8004c24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c22:	d107      	bne.n	8004c34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c3c:	d10f      	bne.n	8004c5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e017      	b.n	8004ca2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	bf0c      	ite	eq
 8004c92:	2301      	moveq	r3, #1
 8004c94:	2300      	movne	r3, #0
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	461a      	mov	r2, r3
 8004c9a:	79fb      	ldrb	r3, [r7, #7]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d19b      	bne.n	8004bd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3720      	adds	r7, #32
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20000000 	.word	0x20000000

08004cb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b088      	sub	sp, #32
 8004cb4:	af02      	add	r7, sp, #8
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	2102      	movs	r1, #2
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f7ff ff6a 	bl	8004ba0 <SPI_WaitFlagStateUntilTimeout>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d007      	beq.n	8004ce2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd6:	f043 0220 	orr.w	r2, r3, #32
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e032      	b.n	8004d48 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8004d50 <SPI_EndRxTxTransaction+0xa0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a1b      	ldr	r2, [pc, #108]	@ (8004d54 <SPI_EndRxTxTransaction+0xa4>)
 8004ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cec:	0d5b      	lsrs	r3, r3, #21
 8004cee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004cf2:	fb02 f303 	mul.w	r3, r2, r3
 8004cf6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d00:	d112      	bne.n	8004d28 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2180      	movs	r1, #128	@ 0x80
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f7ff ff47 	bl	8004ba0 <SPI_WaitFlagStateUntilTimeout>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d016      	beq.n	8004d46 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d1c:	f043 0220 	orr.w	r2, r3, #32
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e00f      	b.n	8004d48 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d3e:	2b80      	cmp	r3, #128	@ 0x80
 8004d40:	d0f2      	beq.n	8004d28 <SPI_EndRxTxTransaction+0x78>
 8004d42:	e000      	b.n	8004d46 <SPI_EndRxTxTransaction+0x96>
        break;
 8004d44:	bf00      	nop
  }

  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	20000000 	.word	0x20000000
 8004d54:	165e9f81 	.word	0x165e9f81

08004d58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e041      	b.n	8004dee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d106      	bne.n	8004d84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7fc f8b8 	bl	8000ef4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3304      	adds	r3, #4
 8004d94:	4619      	mov	r1, r3
 8004d96:	4610      	mov	r0, r2
 8004d98:	f000 fa9e 	bl	80052d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
	...

08004df8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d001      	beq.n	8004e10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e044      	b.n	8004e9a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0201 	orr.w	r2, r2, #1
 8004e26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ea8 <HAL_TIM_Base_Start_IT+0xb0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d018      	beq.n	8004e64 <HAL_TIM_Base_Start_IT+0x6c>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e3a:	d013      	beq.n	8004e64 <HAL_TIM_Base_Start_IT+0x6c>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a1a      	ldr	r2, [pc, #104]	@ (8004eac <HAL_TIM_Base_Start_IT+0xb4>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00e      	beq.n	8004e64 <HAL_TIM_Base_Start_IT+0x6c>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a19      	ldr	r2, [pc, #100]	@ (8004eb0 <HAL_TIM_Base_Start_IT+0xb8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d009      	beq.n	8004e64 <HAL_TIM_Base_Start_IT+0x6c>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a17      	ldr	r2, [pc, #92]	@ (8004eb4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d004      	beq.n	8004e64 <HAL_TIM_Base_Start_IT+0x6c>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a16      	ldr	r2, [pc, #88]	@ (8004eb8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d111      	bne.n	8004e88 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2b06      	cmp	r3, #6
 8004e74:	d010      	beq.n	8004e98 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f042 0201 	orr.w	r2, r2, #1
 8004e84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e86:	e007      	b.n	8004e98 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0201 	orr.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40010000 	.word	0x40010000
 8004eac:	40000400 	.word	0x40000400
 8004eb0:	40000800 	.word	0x40000800
 8004eb4:	40000c00 	.word	0x40000c00
 8004eb8:	40014000 	.word	0x40014000

08004ebc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0201 	bic.w	r2, r2, #1
 8004ed2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6a1a      	ldr	r2, [r3, #32]
 8004eda:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004ede:	4013      	ands	r3, r2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10f      	bne.n	8004f04 <HAL_TIM_Base_Stop_IT+0x48>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6a1a      	ldr	r2, [r3, #32]
 8004eea:	f240 4344 	movw	r3, #1092	@ 0x444
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d107      	bne.n	8004f04 <HAL_TIM_Base_Stop_IT+0x48>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0201 	bic.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b084      	sub	sp, #16
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d020      	beq.n	8004f7e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d01b      	beq.n	8004f7e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f06f 0202 	mvn.w	r2, #2
 8004f4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	f003 0303 	and.w	r3, r3, #3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f999 	bl	800529c <HAL_TIM_IC_CaptureCallback>
 8004f6a:	e005      	b.n	8004f78 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 f98b 	bl	8005288 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f99c 	bl	80052b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d020      	beq.n	8004fca <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f003 0304 	and.w	r3, r3, #4
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d01b      	beq.n	8004fca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f06f 0204 	mvn.w	r2, #4
 8004f9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f973 	bl	800529c <HAL_TIM_IC_CaptureCallback>
 8004fb6:	e005      	b.n	8004fc4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f965 	bl	8005288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f976 	bl	80052b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f003 0308 	and.w	r3, r3, #8
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d020      	beq.n	8005016 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d01b      	beq.n	8005016 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f06f 0208 	mvn.w	r2, #8
 8004fe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2204      	movs	r2, #4
 8004fec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	f003 0303 	and.w	r3, r3, #3
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f94d 	bl	800529c <HAL_TIM_IC_CaptureCallback>
 8005002:	e005      	b.n	8005010 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f93f 	bl	8005288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f950 	bl	80052b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	f003 0310 	and.w	r3, r3, #16
 800501c:	2b00      	cmp	r3, #0
 800501e:	d020      	beq.n	8005062 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f003 0310 	and.w	r3, r3, #16
 8005026:	2b00      	cmp	r3, #0
 8005028:	d01b      	beq.n	8005062 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f06f 0210 	mvn.w	r2, #16
 8005032:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2208      	movs	r2, #8
 8005038:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f927 	bl	800529c <HAL_TIM_IC_CaptureCallback>
 800504e:	e005      	b.n	800505c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f919 	bl	8005288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f92a 	bl	80052b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00c      	beq.n	8005086 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b00      	cmp	r3, #0
 8005074:	d007      	beq.n	8005086 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f06f 0201 	mvn.w	r2, #1
 800507e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7fb fdbb 	bl	8000bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00c      	beq.n	80050aa <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005096:	2b00      	cmp	r3, #0
 8005098:	d007      	beq.n	80050aa <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80050a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fab5 	bl	8005614 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00c      	beq.n	80050ce <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d007      	beq.n	80050ce <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f8fb 	bl	80052c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f003 0320 	and.w	r3, r3, #32
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00c      	beq.n	80050f2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f003 0320 	and.w	r3, r3, #32
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d007      	beq.n	80050f2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f06f 0220 	mvn.w	r2, #32
 80050ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fa87 	bl	8005600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050f2:	bf00      	nop
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b084      	sub	sp, #16
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
 8005102:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_TIM_ConfigClockSource+0x1c>
 8005112:	2302      	movs	r3, #2
 8005114:	e0b4      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x186>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2202      	movs	r2, #2
 8005122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005134:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800513c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800514e:	d03e      	beq.n	80051ce <HAL_TIM_ConfigClockSource+0xd4>
 8005150:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005154:	f200 8087 	bhi.w	8005266 <HAL_TIM_ConfigClockSource+0x16c>
 8005158:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800515c:	f000 8086 	beq.w	800526c <HAL_TIM_ConfigClockSource+0x172>
 8005160:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005164:	d87f      	bhi.n	8005266 <HAL_TIM_ConfigClockSource+0x16c>
 8005166:	2b70      	cmp	r3, #112	@ 0x70
 8005168:	d01a      	beq.n	80051a0 <HAL_TIM_ConfigClockSource+0xa6>
 800516a:	2b70      	cmp	r3, #112	@ 0x70
 800516c:	d87b      	bhi.n	8005266 <HAL_TIM_ConfigClockSource+0x16c>
 800516e:	2b60      	cmp	r3, #96	@ 0x60
 8005170:	d050      	beq.n	8005214 <HAL_TIM_ConfigClockSource+0x11a>
 8005172:	2b60      	cmp	r3, #96	@ 0x60
 8005174:	d877      	bhi.n	8005266 <HAL_TIM_ConfigClockSource+0x16c>
 8005176:	2b50      	cmp	r3, #80	@ 0x50
 8005178:	d03c      	beq.n	80051f4 <HAL_TIM_ConfigClockSource+0xfa>
 800517a:	2b50      	cmp	r3, #80	@ 0x50
 800517c:	d873      	bhi.n	8005266 <HAL_TIM_ConfigClockSource+0x16c>
 800517e:	2b40      	cmp	r3, #64	@ 0x40
 8005180:	d058      	beq.n	8005234 <HAL_TIM_ConfigClockSource+0x13a>
 8005182:	2b40      	cmp	r3, #64	@ 0x40
 8005184:	d86f      	bhi.n	8005266 <HAL_TIM_ConfigClockSource+0x16c>
 8005186:	2b30      	cmp	r3, #48	@ 0x30
 8005188:	d064      	beq.n	8005254 <HAL_TIM_ConfigClockSource+0x15a>
 800518a:	2b30      	cmp	r3, #48	@ 0x30
 800518c:	d86b      	bhi.n	8005266 <HAL_TIM_ConfigClockSource+0x16c>
 800518e:	2b20      	cmp	r3, #32
 8005190:	d060      	beq.n	8005254 <HAL_TIM_ConfigClockSource+0x15a>
 8005192:	2b20      	cmp	r3, #32
 8005194:	d867      	bhi.n	8005266 <HAL_TIM_ConfigClockSource+0x16c>
 8005196:	2b00      	cmp	r3, #0
 8005198:	d05c      	beq.n	8005254 <HAL_TIM_ConfigClockSource+0x15a>
 800519a:	2b10      	cmp	r3, #16
 800519c:	d05a      	beq.n	8005254 <HAL_TIM_ConfigClockSource+0x15a>
 800519e:	e062      	b.n	8005266 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051b0:	f000 f998 	bl	80054e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80051c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	609a      	str	r2, [r3, #8]
      break;
 80051cc:	e04f      	b.n	800526e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051de:	f000 f981 	bl	80054e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051f0:	609a      	str	r2, [r3, #8]
      break;
 80051f2:	e03c      	b.n	800526e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005200:	461a      	mov	r2, r3
 8005202:	f000 f8f5 	bl	80053f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2150      	movs	r1, #80	@ 0x50
 800520c:	4618      	mov	r0, r3
 800520e:	f000 f94e 	bl	80054ae <TIM_ITRx_SetConfig>
      break;
 8005212:	e02c      	b.n	800526e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005220:	461a      	mov	r2, r3
 8005222:	f000 f914 	bl	800544e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2160      	movs	r1, #96	@ 0x60
 800522c:	4618      	mov	r0, r3
 800522e:	f000 f93e 	bl	80054ae <TIM_ITRx_SetConfig>
      break;
 8005232:	e01c      	b.n	800526e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005240:	461a      	mov	r2, r3
 8005242:	f000 f8d5 	bl	80053f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2140      	movs	r1, #64	@ 0x40
 800524c:	4618      	mov	r0, r3
 800524e:	f000 f92e 	bl	80054ae <TIM_ITRx_SetConfig>
      break;
 8005252:	e00c      	b.n	800526e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4619      	mov	r1, r3
 800525e:	4610      	mov	r0, r2
 8005260:	f000 f925 	bl	80054ae <TIM_ITRx_SetConfig>
      break;
 8005264:	e003      	b.n	800526e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	73fb      	strb	r3, [r7, #15]
      break;
 800526a:	e000      	b.n	800526e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800526c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800527e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a3a      	ldr	r2, [pc, #232]	@ (80053d4 <TIM_Base_SetConfig+0xfc>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d00f      	beq.n	8005310 <TIM_Base_SetConfig+0x38>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052f6:	d00b      	beq.n	8005310 <TIM_Base_SetConfig+0x38>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a37      	ldr	r2, [pc, #220]	@ (80053d8 <TIM_Base_SetConfig+0x100>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d007      	beq.n	8005310 <TIM_Base_SetConfig+0x38>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a36      	ldr	r2, [pc, #216]	@ (80053dc <TIM_Base_SetConfig+0x104>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d003      	beq.n	8005310 <TIM_Base_SetConfig+0x38>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a35      	ldr	r2, [pc, #212]	@ (80053e0 <TIM_Base_SetConfig+0x108>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d108      	bne.n	8005322 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	4313      	orrs	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a2b      	ldr	r2, [pc, #172]	@ (80053d4 <TIM_Base_SetConfig+0xfc>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d01b      	beq.n	8005362 <TIM_Base_SetConfig+0x8a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005330:	d017      	beq.n	8005362 <TIM_Base_SetConfig+0x8a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a28      	ldr	r2, [pc, #160]	@ (80053d8 <TIM_Base_SetConfig+0x100>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d013      	beq.n	8005362 <TIM_Base_SetConfig+0x8a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a27      	ldr	r2, [pc, #156]	@ (80053dc <TIM_Base_SetConfig+0x104>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d00f      	beq.n	8005362 <TIM_Base_SetConfig+0x8a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a26      	ldr	r2, [pc, #152]	@ (80053e0 <TIM_Base_SetConfig+0x108>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00b      	beq.n	8005362 <TIM_Base_SetConfig+0x8a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a25      	ldr	r2, [pc, #148]	@ (80053e4 <TIM_Base_SetConfig+0x10c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d007      	beq.n	8005362 <TIM_Base_SetConfig+0x8a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a24      	ldr	r2, [pc, #144]	@ (80053e8 <TIM_Base_SetConfig+0x110>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d003      	beq.n	8005362 <TIM_Base_SetConfig+0x8a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a23      	ldr	r2, [pc, #140]	@ (80053ec <TIM_Base_SetConfig+0x114>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d108      	bne.n	8005374 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4313      	orrs	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	4313      	orrs	r3, r2
 8005380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a0e      	ldr	r2, [pc, #56]	@ (80053d4 <TIM_Base_SetConfig+0xfc>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d103      	bne.n	80053a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	691a      	ldr	r2, [r3, #16]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d105      	bne.n	80053c6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f023 0201 	bic.w	r2, r3, #1
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	611a      	str	r2, [r3, #16]
  }
}
 80053c6:	bf00      	nop
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	40010000 	.word	0x40010000
 80053d8:	40000400 	.word	0x40000400
 80053dc:	40000800 	.word	0x40000800
 80053e0:	40000c00 	.word	0x40000c00
 80053e4:	40014000 	.word	0x40014000
 80053e8:	40014400 	.word	0x40014400
 80053ec:	40014800 	.word	0x40014800

080053f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	f023 0201 	bic.w	r2, r3, #1
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800541a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f023 030a 	bic.w	r3, r3, #10
 800542c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	4313      	orrs	r3, r2
 8005434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	621a      	str	r2, [r3, #32]
}
 8005442:	bf00      	nop
 8005444:	371c      	adds	r7, #28
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800544e:	b480      	push	{r7}
 8005450:	b087      	sub	sp, #28
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f023 0210 	bic.w	r2, r3, #16
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005478:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	031b      	lsls	r3, r3, #12
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	4313      	orrs	r3, r2
 8005482:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800548a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	011b      	lsls	r3, r3, #4
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	4313      	orrs	r3, r2
 8005494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	621a      	str	r2, [r3, #32]
}
 80054a2:	bf00      	nop
 80054a4:	371c      	adds	r7, #28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b085      	sub	sp, #20
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f043 0307 	orr.w	r3, r3, #7
 80054d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	609a      	str	r2, [r3, #8]
}
 80054d8:	bf00      	nop
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	021a      	lsls	r2, r3, #8
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	431a      	orrs	r2, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	4313      	orrs	r3, r2
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	4313      	orrs	r3, r2
 8005510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	609a      	str	r2, [r3, #8]
}
 8005518:	bf00      	nop
 800551a:	371c      	adds	r7, #28
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005538:	2302      	movs	r3, #2
 800553a:	e050      	b.n	80055de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a1c      	ldr	r2, [pc, #112]	@ (80055ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d018      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005588:	d013      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a18      	ldr	r2, [pc, #96]	@ (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00e      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a16      	ldr	r2, [pc, #88]	@ (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d009      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a15      	ldr	r2, [pc, #84]	@ (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d004      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a13      	ldr	r2, [pc, #76]	@ (80055fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d10c      	bne.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	40010000 	.word	0x40010000
 80055f0:	40000400 	.word	0x40000400
 80055f4:	40000800 	.word	0x40000800
 80055f8:	40000c00 	.word	0x40000c00
 80055fc:	40014000 	.word	0x40014000

08005600 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e042      	b.n	80056c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d106      	bne.n	8005654 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7fb fc78 	bl	8000f44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2224      	movs	r2, #36	@ 0x24
 8005658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800566a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f973 	bl	8005958 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	691a      	ldr	r2, [r3, #16]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695a      	ldr	r2, [r3, #20]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005690:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68da      	ldr	r2, [r3, #12]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2220      	movs	r2, #32
 80056b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08a      	sub	sp, #40	@ 0x28
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	603b      	str	r3, [r7, #0]
 80056d4:	4613      	mov	r3, r2
 80056d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b20      	cmp	r3, #32
 80056e6:	d175      	bne.n	80057d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d002      	beq.n	80056f4 <HAL_UART_Transmit+0x2c>
 80056ee:	88fb      	ldrh	r3, [r7, #6]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e06e      	b.n	80057d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2221      	movs	r2, #33	@ 0x21
 8005702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005706:	f7fc fb9d 	bl	8001e44 <HAL_GetTick>
 800570a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	88fa      	ldrh	r2, [r7, #6]
 8005710:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	88fa      	ldrh	r2, [r7, #6]
 8005716:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005720:	d108      	bne.n	8005734 <HAL_UART_Transmit+0x6c>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d104      	bne.n	8005734 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800572a:	2300      	movs	r3, #0
 800572c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	61bb      	str	r3, [r7, #24]
 8005732:	e003      	b.n	800573c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005738:	2300      	movs	r3, #0
 800573a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800573c:	e02e      	b.n	800579c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2200      	movs	r2, #0
 8005746:	2180      	movs	r1, #128	@ 0x80
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 f848 	bl	80057de <UART_WaitOnFlagUntilTimeout>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d005      	beq.n	8005760 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2220      	movs	r2, #32
 8005758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e03a      	b.n	80057d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10b      	bne.n	800577e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005774:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	3302      	adds	r3, #2
 800577a:	61bb      	str	r3, [r7, #24]
 800577c:	e007      	b.n	800578e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	781a      	ldrb	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	3301      	adds	r3, #1
 800578c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005792:	b29b      	uxth	r3, r3
 8005794:	3b01      	subs	r3, #1
 8005796:	b29a      	uxth	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1cb      	bne.n	800573e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2200      	movs	r2, #0
 80057ae:	2140      	movs	r1, #64	@ 0x40
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 f814 	bl	80057de <UART_WaitOnFlagUntilTimeout>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d005      	beq.n	80057c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e006      	b.n	80057d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	e000      	b.n	80057d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80057d4:	2302      	movs	r3, #2
  }
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3720      	adds	r7, #32
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b086      	sub	sp, #24
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	60f8      	str	r0, [r7, #12]
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	603b      	str	r3, [r7, #0]
 80057ea:	4613      	mov	r3, r2
 80057ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ee:	e03b      	b.n	8005868 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f6:	d037      	beq.n	8005868 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f8:	f7fc fb24 	bl	8001e44 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	6a3a      	ldr	r2, [r7, #32]
 8005804:	429a      	cmp	r2, r3
 8005806:	d302      	bcc.n	800580e <UART_WaitOnFlagUntilTimeout+0x30>
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e03a      	b.n	8005888 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b00      	cmp	r3, #0
 800581e:	d023      	beq.n	8005868 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b80      	cmp	r3, #128	@ 0x80
 8005824:	d020      	beq.n	8005868 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b40      	cmp	r3, #64	@ 0x40
 800582a:	d01d      	beq.n	8005868 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b08      	cmp	r3, #8
 8005838:	d116      	bne.n	8005868 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	617b      	str	r3, [r7, #20]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	617b      	str	r3, [r7, #20]
 800584e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 f81d 	bl	8005890 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2208      	movs	r2, #8
 800585a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e00f      	b.n	8005888 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	4013      	ands	r3, r2
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	429a      	cmp	r2, r3
 8005876:	bf0c      	ite	eq
 8005878:	2301      	moveq	r3, #1
 800587a:	2300      	movne	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	461a      	mov	r2, r3
 8005880:	79fb      	ldrb	r3, [r7, #7]
 8005882:	429a      	cmp	r2, r3
 8005884:	d0b4      	beq.n	80057f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005890:	b480      	push	{r7}
 8005892:	b095      	sub	sp, #84	@ 0x54
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	330c      	adds	r3, #12
 800589e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058a2:	e853 3f00 	ldrex	r3, [r3]
 80058a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	330c      	adds	r3, #12
 80058b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058b8:	643a      	str	r2, [r7, #64]	@ 0x40
 80058ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058c0:	e841 2300 	strex	r3, r2, [r1]
 80058c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1e5      	bne.n	8005898 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3314      	adds	r3, #20
 80058d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	e853 3f00 	ldrex	r3, [r3]
 80058da:	61fb      	str	r3, [r7, #28]
   return(result);
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f023 0301 	bic.w	r3, r3, #1
 80058e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3314      	adds	r3, #20
 80058ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058f4:	e841 2300 	strex	r3, r2, [r1]
 80058f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1e5      	bne.n	80058cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005904:	2b01      	cmp	r3, #1
 8005906:	d119      	bne.n	800593c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	330c      	adds	r3, #12
 800590e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	e853 3f00 	ldrex	r3, [r3]
 8005916:	60bb      	str	r3, [r7, #8]
   return(result);
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f023 0310 	bic.w	r3, r3, #16
 800591e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	330c      	adds	r3, #12
 8005926:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005928:	61ba      	str	r2, [r7, #24]
 800592a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592c:	6979      	ldr	r1, [r7, #20]
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	e841 2300 	strex	r3, r2, [r1]
 8005934:	613b      	str	r3, [r7, #16]
   return(result);
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1e5      	bne.n	8005908 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2220      	movs	r2, #32
 8005940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800594a:	bf00      	nop
 800594c:	3754      	adds	r7, #84	@ 0x54
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
	...

08005958 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800595c:	b0c0      	sub	sp, #256	@ 0x100
 800595e:	af00      	add	r7, sp, #0
 8005960:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005974:	68d9      	ldr	r1, [r3, #12]
 8005976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	ea40 0301 	orr.w	r3, r0, r1
 8005980:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	431a      	orrs	r2, r3
 8005990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	431a      	orrs	r2, r3
 8005998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	4313      	orrs	r3, r2
 80059a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80059b0:	f021 010c 	bic.w	r1, r1, #12
 80059b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80059be:	430b      	orrs	r3, r1
 80059c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80059ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d2:	6999      	ldr	r1, [r3, #24]
 80059d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	ea40 0301 	orr.w	r3, r0, r1
 80059de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	4b8f      	ldr	r3, [pc, #572]	@ (8005c24 <UART_SetConfig+0x2cc>)
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d005      	beq.n	80059f8 <UART_SetConfig+0xa0>
 80059ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	4b8d      	ldr	r3, [pc, #564]	@ (8005c28 <UART_SetConfig+0x2d0>)
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d104      	bne.n	8005a02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059f8:	f7fe f9e0 	bl	8003dbc <HAL_RCC_GetPCLK2Freq>
 80059fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a00:	e003      	b.n	8005a0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a02:	f7fe f9c7 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 8005a06:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a14:	f040 810c 	bne.w	8005c30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a22:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a2a:	4622      	mov	r2, r4
 8005a2c:	462b      	mov	r3, r5
 8005a2e:	1891      	adds	r1, r2, r2
 8005a30:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005a32:	415b      	adcs	r3, r3
 8005a34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a3a:	4621      	mov	r1, r4
 8005a3c:	eb12 0801 	adds.w	r8, r2, r1
 8005a40:	4629      	mov	r1, r5
 8005a42:	eb43 0901 	adc.w	r9, r3, r1
 8005a46:	f04f 0200 	mov.w	r2, #0
 8005a4a:	f04f 0300 	mov.w	r3, #0
 8005a4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a5a:	4690      	mov	r8, r2
 8005a5c:	4699      	mov	r9, r3
 8005a5e:	4623      	mov	r3, r4
 8005a60:	eb18 0303 	adds.w	r3, r8, r3
 8005a64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a68:	462b      	mov	r3, r5
 8005a6a:	eb49 0303 	adc.w	r3, r9, r3
 8005a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a7e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a86:	460b      	mov	r3, r1
 8005a88:	18db      	adds	r3, r3, r3
 8005a8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	eb42 0303 	adc.w	r3, r2, r3
 8005a92:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a9c:	f7fa fbf8 	bl	8000290 <__aeabi_uldivmod>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4b61      	ldr	r3, [pc, #388]	@ (8005c2c <UART_SetConfig+0x2d4>)
 8005aa6:	fba3 2302 	umull	r2, r3, r3, r2
 8005aaa:	095b      	lsrs	r3, r3, #5
 8005aac:	011c      	lsls	r4, r3, #4
 8005aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ab8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005abc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ac0:	4642      	mov	r2, r8
 8005ac2:	464b      	mov	r3, r9
 8005ac4:	1891      	adds	r1, r2, r2
 8005ac6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ac8:	415b      	adcs	r3, r3
 8005aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005acc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005ad0:	4641      	mov	r1, r8
 8005ad2:	eb12 0a01 	adds.w	sl, r2, r1
 8005ad6:	4649      	mov	r1, r9
 8005ad8:	eb43 0b01 	adc.w	fp, r3, r1
 8005adc:	f04f 0200 	mov.w	r2, #0
 8005ae0:	f04f 0300 	mov.w	r3, #0
 8005ae4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ae8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005aec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005af0:	4692      	mov	sl, r2
 8005af2:	469b      	mov	fp, r3
 8005af4:	4643      	mov	r3, r8
 8005af6:	eb1a 0303 	adds.w	r3, sl, r3
 8005afa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005afe:	464b      	mov	r3, r9
 8005b00:	eb4b 0303 	adc.w	r3, fp, r3
 8005b04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b14:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005b18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	18db      	adds	r3, r3, r3
 8005b20:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b22:	4613      	mov	r3, r2
 8005b24:	eb42 0303 	adc.w	r3, r2, r3
 8005b28:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005b2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005b32:	f7fa fbad 	bl	8000290 <__aeabi_uldivmod>
 8005b36:	4602      	mov	r2, r0
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	4b3b      	ldr	r3, [pc, #236]	@ (8005c2c <UART_SetConfig+0x2d4>)
 8005b3e:	fba3 2301 	umull	r2, r3, r3, r1
 8005b42:	095b      	lsrs	r3, r3, #5
 8005b44:	2264      	movs	r2, #100	@ 0x64
 8005b46:	fb02 f303 	mul.w	r3, r2, r3
 8005b4a:	1acb      	subs	r3, r1, r3
 8005b4c:	00db      	lsls	r3, r3, #3
 8005b4e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b52:	4b36      	ldr	r3, [pc, #216]	@ (8005c2c <UART_SetConfig+0x2d4>)
 8005b54:	fba3 2302 	umull	r2, r3, r3, r2
 8005b58:	095b      	lsrs	r3, r3, #5
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b60:	441c      	add	r4, r3
 8005b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b66:	2200      	movs	r2, #0
 8005b68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b6c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b74:	4642      	mov	r2, r8
 8005b76:	464b      	mov	r3, r9
 8005b78:	1891      	adds	r1, r2, r2
 8005b7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005b7c:	415b      	adcs	r3, r3
 8005b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005b84:	4641      	mov	r1, r8
 8005b86:	1851      	adds	r1, r2, r1
 8005b88:	6339      	str	r1, [r7, #48]	@ 0x30
 8005b8a:	4649      	mov	r1, r9
 8005b8c:	414b      	adcs	r3, r1
 8005b8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	f04f 0300 	mov.w	r3, #0
 8005b98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b9c:	4659      	mov	r1, fp
 8005b9e:	00cb      	lsls	r3, r1, #3
 8005ba0:	4651      	mov	r1, sl
 8005ba2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ba6:	4651      	mov	r1, sl
 8005ba8:	00ca      	lsls	r2, r1, #3
 8005baa:	4610      	mov	r0, r2
 8005bac:	4619      	mov	r1, r3
 8005bae:	4603      	mov	r3, r0
 8005bb0:	4642      	mov	r2, r8
 8005bb2:	189b      	adds	r3, r3, r2
 8005bb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005bb8:	464b      	mov	r3, r9
 8005bba:	460a      	mov	r2, r1
 8005bbc:	eb42 0303 	adc.w	r3, r2, r3
 8005bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005bd0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005bd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005bd8:	460b      	mov	r3, r1
 8005bda:	18db      	adds	r3, r3, r3
 8005bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bde:	4613      	mov	r3, r2
 8005be0:	eb42 0303 	adc.w	r3, r2, r3
 8005be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005be6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005bea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005bee:	f7fa fb4f 	bl	8000290 <__aeabi_uldivmod>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8005c2c <UART_SetConfig+0x2d4>)
 8005bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	2164      	movs	r1, #100	@ 0x64
 8005c00:	fb01 f303 	mul.w	r3, r1, r3
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	3332      	adds	r3, #50	@ 0x32
 8005c0a:	4a08      	ldr	r2, [pc, #32]	@ (8005c2c <UART_SetConfig+0x2d4>)
 8005c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c10:	095b      	lsrs	r3, r3, #5
 8005c12:	f003 0207 	and.w	r2, r3, #7
 8005c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4422      	add	r2, r4
 8005c1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c20:	e106      	b.n	8005e30 <UART_SetConfig+0x4d8>
 8005c22:	bf00      	nop
 8005c24:	40011000 	.word	0x40011000
 8005c28:	40011400 	.word	0x40011400
 8005c2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c34:	2200      	movs	r2, #0
 8005c36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c3a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005c3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005c42:	4642      	mov	r2, r8
 8005c44:	464b      	mov	r3, r9
 8005c46:	1891      	adds	r1, r2, r2
 8005c48:	6239      	str	r1, [r7, #32]
 8005c4a:	415b      	adcs	r3, r3
 8005c4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c52:	4641      	mov	r1, r8
 8005c54:	1854      	adds	r4, r2, r1
 8005c56:	4649      	mov	r1, r9
 8005c58:	eb43 0501 	adc.w	r5, r3, r1
 8005c5c:	f04f 0200 	mov.w	r2, #0
 8005c60:	f04f 0300 	mov.w	r3, #0
 8005c64:	00eb      	lsls	r3, r5, #3
 8005c66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c6a:	00e2      	lsls	r2, r4, #3
 8005c6c:	4614      	mov	r4, r2
 8005c6e:	461d      	mov	r5, r3
 8005c70:	4643      	mov	r3, r8
 8005c72:	18e3      	adds	r3, r4, r3
 8005c74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c78:	464b      	mov	r3, r9
 8005c7a:	eb45 0303 	adc.w	r3, r5, r3
 8005c7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c92:	f04f 0200 	mov.w	r2, #0
 8005c96:	f04f 0300 	mov.w	r3, #0
 8005c9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c9e:	4629      	mov	r1, r5
 8005ca0:	008b      	lsls	r3, r1, #2
 8005ca2:	4621      	mov	r1, r4
 8005ca4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ca8:	4621      	mov	r1, r4
 8005caa:	008a      	lsls	r2, r1, #2
 8005cac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005cb0:	f7fa faee 	bl	8000290 <__aeabi_uldivmod>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4b60      	ldr	r3, [pc, #384]	@ (8005e3c <UART_SetConfig+0x4e4>)
 8005cba:	fba3 2302 	umull	r2, r3, r3, r2
 8005cbe:	095b      	lsrs	r3, r3, #5
 8005cc0:	011c      	lsls	r4, r3, #4
 8005cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ccc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005cd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005cd4:	4642      	mov	r2, r8
 8005cd6:	464b      	mov	r3, r9
 8005cd8:	1891      	adds	r1, r2, r2
 8005cda:	61b9      	str	r1, [r7, #24]
 8005cdc:	415b      	adcs	r3, r3
 8005cde:	61fb      	str	r3, [r7, #28]
 8005ce0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ce4:	4641      	mov	r1, r8
 8005ce6:	1851      	adds	r1, r2, r1
 8005ce8:	6139      	str	r1, [r7, #16]
 8005cea:	4649      	mov	r1, r9
 8005cec:	414b      	adcs	r3, r1
 8005cee:	617b      	str	r3, [r7, #20]
 8005cf0:	f04f 0200 	mov.w	r2, #0
 8005cf4:	f04f 0300 	mov.w	r3, #0
 8005cf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cfc:	4659      	mov	r1, fp
 8005cfe:	00cb      	lsls	r3, r1, #3
 8005d00:	4651      	mov	r1, sl
 8005d02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d06:	4651      	mov	r1, sl
 8005d08:	00ca      	lsls	r2, r1, #3
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4603      	mov	r3, r0
 8005d10:	4642      	mov	r2, r8
 8005d12:	189b      	adds	r3, r3, r2
 8005d14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d18:	464b      	mov	r3, r9
 8005d1a:	460a      	mov	r2, r1
 8005d1c:	eb42 0303 	adc.w	r3, r2, r3
 8005d20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d2e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d30:	f04f 0200 	mov.w	r2, #0
 8005d34:	f04f 0300 	mov.w	r3, #0
 8005d38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005d3c:	4649      	mov	r1, r9
 8005d3e:	008b      	lsls	r3, r1, #2
 8005d40:	4641      	mov	r1, r8
 8005d42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d46:	4641      	mov	r1, r8
 8005d48:	008a      	lsls	r2, r1, #2
 8005d4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d4e:	f7fa fa9f 	bl	8000290 <__aeabi_uldivmod>
 8005d52:	4602      	mov	r2, r0
 8005d54:	460b      	mov	r3, r1
 8005d56:	4611      	mov	r1, r2
 8005d58:	4b38      	ldr	r3, [pc, #224]	@ (8005e3c <UART_SetConfig+0x4e4>)
 8005d5a:	fba3 2301 	umull	r2, r3, r3, r1
 8005d5e:	095b      	lsrs	r3, r3, #5
 8005d60:	2264      	movs	r2, #100	@ 0x64
 8005d62:	fb02 f303 	mul.w	r3, r2, r3
 8005d66:	1acb      	subs	r3, r1, r3
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	3332      	adds	r3, #50	@ 0x32
 8005d6c:	4a33      	ldr	r2, [pc, #204]	@ (8005e3c <UART_SetConfig+0x4e4>)
 8005d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d78:	441c      	add	r4, r3
 8005d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d7e:	2200      	movs	r2, #0
 8005d80:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d82:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005d88:	4642      	mov	r2, r8
 8005d8a:	464b      	mov	r3, r9
 8005d8c:	1891      	adds	r1, r2, r2
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	415b      	adcs	r3, r3
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d98:	4641      	mov	r1, r8
 8005d9a:	1851      	adds	r1, r2, r1
 8005d9c:	6039      	str	r1, [r7, #0]
 8005d9e:	4649      	mov	r1, r9
 8005da0:	414b      	adcs	r3, r1
 8005da2:	607b      	str	r3, [r7, #4]
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	f04f 0300 	mov.w	r3, #0
 8005dac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005db0:	4659      	mov	r1, fp
 8005db2:	00cb      	lsls	r3, r1, #3
 8005db4:	4651      	mov	r1, sl
 8005db6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dba:	4651      	mov	r1, sl
 8005dbc:	00ca      	lsls	r2, r1, #3
 8005dbe:	4610      	mov	r0, r2
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	4642      	mov	r2, r8
 8005dc6:	189b      	adds	r3, r3, r2
 8005dc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005dca:	464b      	mov	r3, r9
 8005dcc:	460a      	mov	r2, r1
 8005dce:	eb42 0303 	adc.w	r3, r2, r3
 8005dd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	663b      	str	r3, [r7, #96]	@ 0x60
 8005dde:	667a      	str	r2, [r7, #100]	@ 0x64
 8005de0:	f04f 0200 	mov.w	r2, #0
 8005de4:	f04f 0300 	mov.w	r3, #0
 8005de8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005dec:	4649      	mov	r1, r9
 8005dee:	008b      	lsls	r3, r1, #2
 8005df0:	4641      	mov	r1, r8
 8005df2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005df6:	4641      	mov	r1, r8
 8005df8:	008a      	lsls	r2, r1, #2
 8005dfa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005dfe:	f7fa fa47 	bl	8000290 <__aeabi_uldivmod>
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	4b0d      	ldr	r3, [pc, #52]	@ (8005e3c <UART_SetConfig+0x4e4>)
 8005e08:	fba3 1302 	umull	r1, r3, r3, r2
 8005e0c:	095b      	lsrs	r3, r3, #5
 8005e0e:	2164      	movs	r1, #100	@ 0x64
 8005e10:	fb01 f303 	mul.w	r3, r1, r3
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	011b      	lsls	r3, r3, #4
 8005e18:	3332      	adds	r3, #50	@ 0x32
 8005e1a:	4a08      	ldr	r2, [pc, #32]	@ (8005e3c <UART_SetConfig+0x4e4>)
 8005e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e20:	095b      	lsrs	r3, r3, #5
 8005e22:	f003 020f 	and.w	r2, r3, #15
 8005e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4422      	add	r2, r4
 8005e2e:	609a      	str	r2, [r3, #8]
}
 8005e30:	bf00      	nop
 8005e32:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005e36:	46bd      	mov	sp, r7
 8005e38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e3c:	51eb851f 	.word	0x51eb851f

08005e40 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005e44:	4904      	ldr	r1, [pc, #16]	@ (8005e58 <MX_FATFS_Init+0x18>)
 8005e46:	4805      	ldr	r0, [pc, #20]	@ (8005e5c <MX_FATFS_Init+0x1c>)
 8005e48:	f002 ff98 	bl	8008d7c <FATFS_LinkDriver>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	461a      	mov	r2, r3
 8005e50:	4b03      	ldr	r3, [pc, #12]	@ (8005e60 <MX_FATFS_Init+0x20>)
 8005e52:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005e54:	bf00      	nop
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	200025c8 	.word	0x200025c8
 8005e5c:	20000010 	.word	0x20000010
 8005e60:	200025c4 	.word	0x200025c4

08005e64 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005e64:	b480      	push	{r7}
 8005e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005e68:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8005e7e:	79fb      	ldrb	r3, [r7, #7]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7fb fbc5 	bl	8001610 <SD_disk_initialize>
 8005e86:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	4603      	mov	r3, r0
 8005e98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8005e9a:	79fb      	ldrb	r3, [r7, #7]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fb fca3 	bl	80017e8 <SD_disk_status>
 8005ea2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60b9      	str	r1, [r7, #8]
 8005eb4:	607a      	str	r2, [r7, #4]
 8005eb6:	603b      	str	r3, [r7, #0]
 8005eb8:	4603      	mov	r3, r0
 8005eba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8005ebc:	7bf8      	ldrb	r0, [r7, #15]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	68b9      	ldr	r1, [r7, #8]
 8005ec4:	f7fb fca6 	bl	8001814 <SD_disk_read>
 8005ec8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b084      	sub	sp, #16
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	603b      	str	r3, [r7, #0]
 8005ede:	4603      	mov	r3, r0
 8005ee0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8005ee2:	7bf8      	ldrb	r0, [r7, #15]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	68b9      	ldr	r1, [r7, #8]
 8005eea:	f7fb fcfd 	bl	80018e8 <SD_disk_write>
 8005eee:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	4603      	mov	r3, r0
 8005f00:	603a      	str	r2, [r7, #0]
 8005f02:	71fb      	strb	r3, [r7, #7]
 8005f04:	460b      	mov	r3, r1
 8005f06:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 8005f08:	79b9      	ldrb	r1, [r7, #6]
 8005f0a:	79fb      	ldrb	r3, [r7, #7]
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fb fd6e 	bl	80019f0 <SD_disk_ioctl>
 8005f14:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
	...

08005f20 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	4603      	mov	r3, r0
 8005f28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	4a08      	ldr	r2, [pc, #32]	@ (8005f50 <disk_status+0x30>)
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	79fa      	ldrb	r2, [r7, #7]
 8005f38:	4905      	ldr	r1, [pc, #20]	@ (8005f50 <disk_status+0x30>)
 8005f3a:	440a      	add	r2, r1
 8005f3c:	7a12      	ldrb	r2, [r2, #8]
 8005f3e:	4610      	mov	r0, r2
 8005f40:	4798      	blx	r3
 8005f42:	4603      	mov	r3, r0
 8005f44:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	200025f4 	.word	0x200025f4

08005f54 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005f62:	79fb      	ldrb	r3, [r7, #7]
 8005f64:	4a0e      	ldr	r2, [pc, #56]	@ (8005fa0 <disk_initialize+0x4c>)
 8005f66:	5cd3      	ldrb	r3, [r2, r3]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d114      	bne.n	8005f96 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005f6c:	79fb      	ldrb	r3, [r7, #7]
 8005f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8005fa0 <disk_initialize+0x4c>)
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	79fa      	ldrb	r2, [r7, #7]
 8005f7a:	4909      	ldr	r1, [pc, #36]	@ (8005fa0 <disk_initialize+0x4c>)
 8005f7c:	440a      	add	r2, r1
 8005f7e:	7a12      	ldrb	r2, [r2, #8]
 8005f80:	4610      	mov	r0, r2
 8005f82:	4798      	blx	r3
 8005f84:	4603      	mov	r3, r0
 8005f86:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d103      	bne.n	8005f96 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8005f8e:	79fb      	ldrb	r3, [r7, #7]
 8005f90:	4a03      	ldr	r2, [pc, #12]	@ (8005fa0 <disk_initialize+0x4c>)
 8005f92:	2101      	movs	r1, #1
 8005f94:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	200025f4 	.word	0x200025f4

08005fa4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005fa4:	b590      	push	{r4, r7, lr}
 8005fa6:	b087      	sub	sp, #28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60b9      	str	r1, [r7, #8]
 8005fac:	607a      	str	r2, [r7, #4]
 8005fae:	603b      	str	r3, [r7, #0]
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
 8005fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8005fe0 <disk_read+0x3c>)
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	689c      	ldr	r4, [r3, #8]
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	4a07      	ldr	r2, [pc, #28]	@ (8005fe0 <disk_read+0x3c>)
 8005fc4:	4413      	add	r3, r2
 8005fc6:	7a18      	ldrb	r0, [r3, #8]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	68b9      	ldr	r1, [r7, #8]
 8005fce:	47a0      	blx	r4
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	75fb      	strb	r3, [r7, #23]
  return res;
 8005fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	371c      	adds	r7, #28
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd90      	pop	{r4, r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	200025f4 	.word	0x200025f4

08005fe4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005fe4:	b590      	push	{r4, r7, lr}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	607a      	str	r2, [r7, #4]
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8006020 <disk_write+0x3c>)
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4413      	add	r3, r2
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	68dc      	ldr	r4, [r3, #12]
 8006000:	7bfb      	ldrb	r3, [r7, #15]
 8006002:	4a07      	ldr	r2, [pc, #28]	@ (8006020 <disk_write+0x3c>)
 8006004:	4413      	add	r3, r2
 8006006:	7a18      	ldrb	r0, [r3, #8]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	68b9      	ldr	r1, [r7, #8]
 800600e:	47a0      	blx	r4
 8006010:	4603      	mov	r3, r0
 8006012:	75fb      	strb	r3, [r7, #23]
  return res;
 8006014:	7dfb      	ldrb	r3, [r7, #23]
}
 8006016:	4618      	mov	r0, r3
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	bd90      	pop	{r4, r7, pc}
 800601e:	bf00      	nop
 8006020:	200025f4 	.word	0x200025f4

08006024 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	4603      	mov	r3, r0
 800602c:	603a      	str	r2, [r7, #0]
 800602e:	71fb      	strb	r3, [r7, #7]
 8006030:	460b      	mov	r3, r1
 8006032:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006034:	79fb      	ldrb	r3, [r7, #7]
 8006036:	4a09      	ldr	r2, [pc, #36]	@ (800605c <disk_ioctl+0x38>)
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	79fa      	ldrb	r2, [r7, #7]
 8006042:	4906      	ldr	r1, [pc, #24]	@ (800605c <disk_ioctl+0x38>)
 8006044:	440a      	add	r2, r1
 8006046:	7a10      	ldrb	r0, [r2, #8]
 8006048:	79b9      	ldrb	r1, [r7, #6]
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	4798      	blx	r3
 800604e:	4603      	mov	r3, r0
 8006050:	73fb      	strb	r3, [r7, #15]
  return res;
 8006052:	7bfb      	ldrb	r3, [r7, #15]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	200025f4 	.word	0x200025f4

08006060 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	3301      	adds	r3, #1
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006070:	89fb      	ldrh	r3, [r7, #14]
 8006072:	021b      	lsls	r3, r3, #8
 8006074:	b21a      	sxth	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	b21b      	sxth	r3, r3
 800607c:	4313      	orrs	r3, r2
 800607e:	b21b      	sxth	r3, r3
 8006080:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006082:	89fb      	ldrh	r3, [r7, #14]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3714      	adds	r7, #20
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	3303      	adds	r3, #3
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	021b      	lsls	r3, r3, #8
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	3202      	adds	r2, #2
 80060a8:	7812      	ldrb	r2, [r2, #0]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	021b      	lsls	r3, r3, #8
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	3201      	adds	r2, #1
 80060b6:	7812      	ldrb	r2, [r2, #0]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	021b      	lsls	r3, r3, #8
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	7812      	ldrb	r2, [r2, #0]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]
	return rv;
 80060c8:	68fb      	ldr	r3, [r7, #12]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
 80060de:	460b      	mov	r3, r1
 80060e0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	1c5a      	adds	r2, r3, #1
 80060e6:	607a      	str	r2, [r7, #4]
 80060e8:	887a      	ldrh	r2, [r7, #2]
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]
 80060ee:	887b      	ldrh	r3, [r7, #2]
 80060f0:	0a1b      	lsrs	r3, r3, #8
 80060f2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	1c5a      	adds	r2, r3, #1
 80060f8:	607a      	str	r2, [r7, #4]
 80060fa:	887a      	ldrh	r2, [r7, #2]
 80060fc:	b2d2      	uxtb	r2, r2
 80060fe:	701a      	strb	r2, [r3, #0]
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	607a      	str	r2, [r7, #4]
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	701a      	strb	r2, [r3, #0]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	0a1b      	lsrs	r3, r3, #8
 8006126:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	607a      	str	r2, [r7, #4]
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	b2d2      	uxtb	r2, r2
 8006132:	701a      	strb	r2, [r3, #0]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	0a1b      	lsrs	r3, r3, #8
 8006138:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	1c5a      	adds	r2, r3, #1
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	b2d2      	uxtb	r2, r2
 8006144:	701a      	strb	r2, [r3, #0]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	0a1b      	lsrs	r3, r3, #8
 800614a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	607a      	str	r2, [r7, #4]
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	701a      	strb	r2, [r3, #0]
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00d      	beq.n	800619a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	1c53      	adds	r3, r2, #1
 8006182:	613b      	str	r3, [r7, #16]
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	1c59      	adds	r1, r3, #1
 8006188:	6179      	str	r1, [r7, #20]
 800618a:	7812      	ldrb	r2, [r2, #0]
 800618c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	3b01      	subs	r3, #1
 8006192:	607b      	str	r3, [r7, #4]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1f1      	bne.n	800617e <mem_cpy+0x1a>
	}
}
 800619a:	bf00      	nop
 800619c:	371c      	adds	r7, #28
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80061a6:	b480      	push	{r7}
 80061a8:	b087      	sub	sp, #28
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	60f8      	str	r0, [r7, #12]
 80061ae:	60b9      	str	r1, [r7, #8]
 80061b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	617a      	str	r2, [r7, #20]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	b2d2      	uxtb	r2, r2
 80061c0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	3b01      	subs	r3, #1
 80061c6:	607b      	str	r3, [r7, #4]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1f3      	bne.n	80061b6 <mem_set+0x10>
}
 80061ce:	bf00      	nop
 80061d0:	bf00      	nop
 80061d2:	371c      	adds	r7, #28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80061dc:	b480      	push	{r7}
 80061de:	b089      	sub	sp, #36	@ 0x24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	61fb      	str	r3, [r7, #28]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80061f0:	2300      	movs	r3, #0
 80061f2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	61fa      	str	r2, [r7, #28]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	4619      	mov	r1, r3
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	1c5a      	adds	r2, r3, #1
 8006202:	61ba      	str	r2, [r7, #24]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	1acb      	subs	r3, r1, r3
 8006208:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	3b01      	subs	r3, #1
 800620e:	607b      	str	r3, [r7, #4]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d002      	beq.n	800621c <mem_cmp+0x40>
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0eb      	beq.n	80061f4 <mem_cmp+0x18>

	return r;
 800621c:	697b      	ldr	r3, [r7, #20]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3724      	adds	r7, #36	@ 0x24
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006234:	e002      	b.n	800623c <chk_chr+0x12>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3301      	adds	r3, #1
 800623a:	607b      	str	r3, [r7, #4]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d005      	beq.n	8006250 <chk_chr+0x26>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	461a      	mov	r2, r3
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	4293      	cmp	r3, r2
 800624e:	d1f2      	bne.n	8006236 <chk_chr+0xc>
	return *str;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	781b      	ldrb	r3, [r3, #0]
}
 8006254:	4618      	mov	r0, r3
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d009      	beq.n	8006282 <lock_fs+0x22>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	4618      	mov	r0, r3
 8006274:	f002 fe84 	bl	8008f80 <ff_req_grant>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <lock_fs+0x22>
 800627e:	2301      	movs	r3, #1
 8006280:	e000      	b.n	8006284 <lock_fs+0x24>
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	460b      	mov	r3, r1
 8006296:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00d      	beq.n	80062ba <unlock_fs+0x2e>
 800629e:	78fb      	ldrb	r3, [r7, #3]
 80062a0:	2b0c      	cmp	r3, #12
 80062a2:	d00a      	beq.n	80062ba <unlock_fs+0x2e>
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	2b0b      	cmp	r3, #11
 80062a8:	d007      	beq.n	80062ba <unlock_fs+0x2e>
 80062aa:	78fb      	ldrb	r3, [r7, #3]
 80062ac:	2b0f      	cmp	r3, #15
 80062ae:	d004      	beq.n	80062ba <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f002 fe78 	bl	8008faa <ff_rel_grant>
	}
}
 80062ba:	bf00      	nop
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
	...

080062c4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80062ce:	2300      	movs	r3, #0
 80062d0:	60bb      	str	r3, [r7, #8]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	e029      	b.n	800632c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80062d8:	4a27      	ldr	r2, [pc, #156]	@ (8006378 <chk_lock+0xb4>)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	011b      	lsls	r3, r3, #4
 80062de:	4413      	add	r3, r2
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d01d      	beq.n	8006322 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80062e6:	4a24      	ldr	r2, [pc, #144]	@ (8006378 <chk_lock+0xb4>)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	011b      	lsls	r3, r3, #4
 80062ec:	4413      	add	r3, r2
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d116      	bne.n	8006326 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80062f8:	4a1f      	ldr	r2, [pc, #124]	@ (8006378 <chk_lock+0xb4>)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	011b      	lsls	r3, r3, #4
 80062fe:	4413      	add	r3, r2
 8006300:	3304      	adds	r3, #4
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006308:	429a      	cmp	r2, r3
 800630a:	d10c      	bne.n	8006326 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800630c:	4a1a      	ldr	r2, [pc, #104]	@ (8006378 <chk_lock+0xb4>)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	011b      	lsls	r3, r3, #4
 8006312:	4413      	add	r3, r2
 8006314:	3308      	adds	r3, #8
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800631c:	429a      	cmp	r2, r3
 800631e:	d102      	bne.n	8006326 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006320:	e007      	b.n	8006332 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006322:	2301      	movs	r3, #1
 8006324:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	3301      	adds	r3, #1
 800632a:	60fb      	str	r3, [r7, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d9d2      	bls.n	80062d8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2b02      	cmp	r3, #2
 8006336:	d109      	bne.n	800634c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d102      	bne.n	8006344 <chk_lock+0x80>
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b02      	cmp	r3, #2
 8006342:	d101      	bne.n	8006348 <chk_lock+0x84>
 8006344:	2300      	movs	r3, #0
 8006346:	e010      	b.n	800636a <chk_lock+0xa6>
 8006348:	2312      	movs	r3, #18
 800634a:	e00e      	b.n	800636a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d108      	bne.n	8006364 <chk_lock+0xa0>
 8006352:	4a09      	ldr	r2, [pc, #36]	@ (8006378 <chk_lock+0xb4>)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	011b      	lsls	r3, r3, #4
 8006358:	4413      	add	r3, r2
 800635a:	330c      	adds	r3, #12
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006362:	d101      	bne.n	8006368 <chk_lock+0xa4>
 8006364:	2310      	movs	r3, #16
 8006366:	e000      	b.n	800636a <chk_lock+0xa6>
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	200025d4 	.word	0x200025d4

0800637c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006382:	2300      	movs	r3, #0
 8006384:	607b      	str	r3, [r7, #4]
 8006386:	e002      	b.n	800638e <enq_lock+0x12>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3301      	adds	r3, #1
 800638c:	607b      	str	r3, [r7, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d806      	bhi.n	80063a2 <enq_lock+0x26>
 8006394:	4a09      	ldr	r2, [pc, #36]	@ (80063bc <enq_lock+0x40>)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	011b      	lsls	r3, r3, #4
 800639a:	4413      	add	r3, r2
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1f2      	bne.n	8006388 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	bf14      	ite	ne
 80063a8:	2301      	movne	r3, #1
 80063aa:	2300      	moveq	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	200025d4 	.word	0x200025d4

080063c0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80063ca:	2300      	movs	r3, #0
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	e01f      	b.n	8006410 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80063d0:	4a41      	ldr	r2, [pc, #260]	@ (80064d8 <inc_lock+0x118>)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	011b      	lsls	r3, r3, #4
 80063d6:	4413      	add	r3, r2
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d113      	bne.n	800640a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80063e2:	4a3d      	ldr	r2, [pc, #244]	@ (80064d8 <inc_lock+0x118>)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	011b      	lsls	r3, r3, #4
 80063e8:	4413      	add	r3, r2
 80063ea:	3304      	adds	r3, #4
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d109      	bne.n	800640a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80063f6:	4a38      	ldr	r2, [pc, #224]	@ (80064d8 <inc_lock+0x118>)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	4413      	add	r3, r2
 80063fe:	3308      	adds	r3, #8
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006406:	429a      	cmp	r2, r3
 8006408:	d006      	beq.n	8006418 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	3301      	adds	r3, #1
 800640e:	60fb      	str	r3, [r7, #12]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d9dc      	bls.n	80063d0 <inc_lock+0x10>
 8006416:	e000      	b.n	800641a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006418:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2b02      	cmp	r3, #2
 800641e:	d132      	bne.n	8006486 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006420:	2300      	movs	r3, #0
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	e002      	b.n	800642c <inc_lock+0x6c>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	3301      	adds	r3, #1
 800642a:	60fb      	str	r3, [r7, #12]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d806      	bhi.n	8006440 <inc_lock+0x80>
 8006432:	4a29      	ldr	r2, [pc, #164]	@ (80064d8 <inc_lock+0x118>)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	4413      	add	r3, r2
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1f2      	bne.n	8006426 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2b02      	cmp	r3, #2
 8006444:	d101      	bne.n	800644a <inc_lock+0x8a>
 8006446:	2300      	movs	r3, #0
 8006448:	e040      	b.n	80064cc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	4922      	ldr	r1, [pc, #136]	@ (80064d8 <inc_lock+0x118>)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	011b      	lsls	r3, r3, #4
 8006454:	440b      	add	r3, r1
 8006456:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689a      	ldr	r2, [r3, #8]
 800645c:	491e      	ldr	r1, [pc, #120]	@ (80064d8 <inc_lock+0x118>)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	011b      	lsls	r3, r3, #4
 8006462:	440b      	add	r3, r1
 8006464:	3304      	adds	r3, #4
 8006466:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	695a      	ldr	r2, [r3, #20]
 800646c:	491a      	ldr	r1, [pc, #104]	@ (80064d8 <inc_lock+0x118>)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	011b      	lsls	r3, r3, #4
 8006472:	440b      	add	r3, r1
 8006474:	3308      	adds	r3, #8
 8006476:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006478:	4a17      	ldr	r2, [pc, #92]	@ (80064d8 <inc_lock+0x118>)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	011b      	lsls	r3, r3, #4
 800647e:	4413      	add	r3, r2
 8006480:	330c      	adds	r3, #12
 8006482:	2200      	movs	r2, #0
 8006484:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d009      	beq.n	80064a0 <inc_lock+0xe0>
 800648c:	4a12      	ldr	r2, [pc, #72]	@ (80064d8 <inc_lock+0x118>)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	4413      	add	r3, r2
 8006494:	330c      	adds	r3, #12
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <inc_lock+0xe0>
 800649c:	2300      	movs	r3, #0
 800649e:	e015      	b.n	80064cc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d108      	bne.n	80064b8 <inc_lock+0xf8>
 80064a6:	4a0c      	ldr	r2, [pc, #48]	@ (80064d8 <inc_lock+0x118>)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	011b      	lsls	r3, r3, #4
 80064ac:	4413      	add	r3, r2
 80064ae:	330c      	adds	r3, #12
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	3301      	adds	r3, #1
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	e001      	b.n	80064bc <inc_lock+0xfc>
 80064b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80064bc:	4906      	ldr	r1, [pc, #24]	@ (80064d8 <inc_lock+0x118>)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	011b      	lsls	r3, r3, #4
 80064c2:	440b      	add	r3, r1
 80064c4:	330c      	adds	r3, #12
 80064c6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	3301      	adds	r3, #1
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	200025d4 	.word	0x200025d4

080064dc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3b01      	subs	r3, #1
 80064e8:	607b      	str	r3, [r7, #4]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d825      	bhi.n	800653c <dec_lock+0x60>
		n = Files[i].ctr;
 80064f0:	4a17      	ldr	r2, [pc, #92]	@ (8006550 <dec_lock+0x74>)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	011b      	lsls	r3, r3, #4
 80064f6:	4413      	add	r3, r2
 80064f8:	330c      	adds	r3, #12
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80064fe:	89fb      	ldrh	r3, [r7, #14]
 8006500:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006504:	d101      	bne.n	800650a <dec_lock+0x2e>
 8006506:	2300      	movs	r3, #0
 8006508:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800650a:	89fb      	ldrh	r3, [r7, #14]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <dec_lock+0x3a>
 8006510:	89fb      	ldrh	r3, [r7, #14]
 8006512:	3b01      	subs	r3, #1
 8006514:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006516:	4a0e      	ldr	r2, [pc, #56]	@ (8006550 <dec_lock+0x74>)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	011b      	lsls	r3, r3, #4
 800651c:	4413      	add	r3, r2
 800651e:	330c      	adds	r3, #12
 8006520:	89fa      	ldrh	r2, [r7, #14]
 8006522:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006524:	89fb      	ldrh	r3, [r7, #14]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d105      	bne.n	8006536 <dec_lock+0x5a>
 800652a:	4a09      	ldr	r2, [pc, #36]	@ (8006550 <dec_lock+0x74>)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	011b      	lsls	r3, r3, #4
 8006530:	4413      	add	r3, r2
 8006532:	2200      	movs	r2, #0
 8006534:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	737b      	strb	r3, [r7, #13]
 800653a:	e001      	b.n	8006540 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800653c:	2302      	movs	r3, #2
 800653e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006540:	7b7b      	ldrb	r3, [r7, #13]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	200025d4 	.word	0x200025d4

08006554 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800655c:	2300      	movs	r3, #0
 800655e:	60fb      	str	r3, [r7, #12]
 8006560:	e010      	b.n	8006584 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006562:	4a0d      	ldr	r2, [pc, #52]	@ (8006598 <clear_lock+0x44>)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	011b      	lsls	r3, r3, #4
 8006568:	4413      	add	r3, r2
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	429a      	cmp	r2, r3
 8006570:	d105      	bne.n	800657e <clear_lock+0x2a>
 8006572:	4a09      	ldr	r2, [pc, #36]	@ (8006598 <clear_lock+0x44>)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	011b      	lsls	r3, r3, #4
 8006578:	4413      	add	r3, r2
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	3301      	adds	r3, #1
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d9eb      	bls.n	8006562 <clear_lock+0xe>
	}
}
 800658a:	bf00      	nop
 800658c:	bf00      	nop
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	200025d4 	.word	0x200025d4

0800659c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	78db      	ldrb	r3, [r3, #3]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d034      	beq.n	800661a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	7858      	ldrb	r0, [r3, #1]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80065c0:	2301      	movs	r3, #1
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	f7ff fd0e 	bl	8005fe4 <disk_write>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	73fb      	strb	r3, [r7, #15]
 80065d2:	e022      	b.n	800661a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	1ad2      	subs	r2, r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d217      	bcs.n	800661a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	789b      	ldrb	r3, [r3, #2]
 80065ee:	613b      	str	r3, [r7, #16]
 80065f0:	e010      	b.n	8006614 <sync_window+0x78>
					wsect += fs->fsize;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	4413      	add	r3, r2
 80065fa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	7858      	ldrb	r0, [r3, #1]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006606:	2301      	movs	r3, #1
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	f7ff fceb 	bl	8005fe4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	3b01      	subs	r3, #1
 8006612:	613b      	str	r3, [r7, #16]
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d8eb      	bhi.n	80065f2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800661a:	7bfb      	ldrb	r3, [r7, #15]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	429a      	cmp	r2, r3
 800663a:	d01b      	beq.n	8006674 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff ffad 	bl	800659c <sync_window>
 8006642:	4603      	mov	r3, r0
 8006644:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006646:	7bfb      	ldrb	r3, [r7, #15]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d113      	bne.n	8006674 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	7858      	ldrb	r0, [r3, #1]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006656:	2301      	movs	r3, #1
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	f7ff fca3 	bl	8005fa4 <disk_read>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d004      	beq.n	800666e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006664:	f04f 33ff 	mov.w	r3, #4294967295
 8006668:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800666a:	2301      	movs	r3, #1
 800666c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 8006674:	7bfb      	ldrb	r3, [r7, #15]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
	...

08006680 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7ff ff87 	bl	800659c <sync_window>
 800668e:	4603      	mov	r3, r0
 8006690:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006692:	7bfb      	ldrb	r3, [r7, #15]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d159      	bne.n	800674c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	2b03      	cmp	r3, #3
 800669e:	d149      	bne.n	8006734 <sync_fs+0xb4>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	791b      	ldrb	r3, [r3, #4]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d145      	bne.n	8006734 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	899b      	ldrh	r3, [r3, #12]
 80066b2:	461a      	mov	r2, r3
 80066b4:	2100      	movs	r1, #0
 80066b6:	f7ff fd76 	bl	80061a6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	333c      	adds	r3, #60	@ 0x3c
 80066be:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80066c2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7ff fd05 	bl	80060d6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	333c      	adds	r3, #60	@ 0x3c
 80066d0:	4921      	ldr	r1, [pc, #132]	@ (8006758 <sync_fs+0xd8>)
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7ff fd1a 	bl	800610c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	333c      	adds	r3, #60	@ 0x3c
 80066dc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80066e0:	491e      	ldr	r1, [pc, #120]	@ (800675c <sync_fs+0xdc>)
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7ff fd12 	bl	800610c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	333c      	adds	r3, #60	@ 0x3c
 80066ec:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	69db      	ldr	r3, [r3, #28]
 80066f4:	4619      	mov	r1, r3
 80066f6:	4610      	mov	r0, r2
 80066f8:	f7ff fd08 	bl	800610c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	333c      	adds	r3, #60	@ 0x3c
 8006700:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	4619      	mov	r1, r3
 800670a:	4610      	mov	r0, r2
 800670c:	f7ff fcfe 	bl	800610c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	7858      	ldrb	r0, [r3, #1]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006728:	2301      	movs	r3, #1
 800672a:	f7ff fc5b 	bl	8005fe4 <disk_write>
			fs->fsi_flag = 0;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	785b      	ldrb	r3, [r3, #1]
 8006738:	2200      	movs	r2, #0
 800673a:	2100      	movs	r1, #0
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff fc71 	bl	8006024 <disk_ioctl>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d001      	beq.n	800674c <sync_fs+0xcc>
 8006748:	2301      	movs	r3, #1
 800674a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800674c:	7bfb      	ldrb	r3, [r7, #15]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	41615252 	.word	0x41615252
 800675c:	61417272 	.word	0x61417272

08006760 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	3b02      	subs	r3, #2
 800676e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	3b02      	subs	r3, #2
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	429a      	cmp	r2, r3
 800677a:	d301      	bcc.n	8006780 <clust2sect+0x20>
 800677c:	2300      	movs	r3, #0
 800677e:	e008      	b.n	8006792 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	895b      	ldrh	r3, [r3, #10]
 8006784:	461a      	mov	r2, r3
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	fb03 f202 	mul.w	r2, r3, r2
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006790:	4413      	add	r3, r2
}
 8006792:	4618      	mov	r0, r3
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b086      	sub	sp, #24
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d904      	bls.n	80067be <get_fat+0x20>
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d302      	bcc.n	80067c4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80067be:	2301      	movs	r3, #1
 80067c0:	617b      	str	r3, [r7, #20]
 80067c2:	e0ba      	b.n	800693a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80067c4:	f04f 33ff 	mov.w	r3, #4294967295
 80067c8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	f000 8082 	beq.w	80068d8 <get_fat+0x13a>
 80067d4:	2b03      	cmp	r3, #3
 80067d6:	f300 80a6 	bgt.w	8006926 <get_fat+0x188>
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d002      	beq.n	80067e4 <get_fat+0x46>
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d055      	beq.n	800688e <get_fat+0xf0>
 80067e2:	e0a0      	b.n	8006926 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	085b      	lsrs	r3, r3, #1
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	4413      	add	r3, r2
 80067f0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	899b      	ldrh	r3, [r3, #12]
 80067fa:	4619      	mov	r1, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006802:	4413      	add	r3, r2
 8006804:	4619      	mov	r1, r3
 8006806:	6938      	ldr	r0, [r7, #16]
 8006808:	f7ff ff0c 	bl	8006624 <move_window>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	f040 808c 	bne.w	800692c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	60fa      	str	r2, [r7, #12]
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	8992      	ldrh	r2, [r2, #12]
 800681e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006822:	fb01 f202 	mul.w	r2, r1, r2
 8006826:	1a9b      	subs	r3, r3, r2
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4413      	add	r3, r2
 800682c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006830:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	899b      	ldrh	r3, [r3, #12]
 800683a:	4619      	mov	r1, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006842:	4413      	add	r3, r2
 8006844:	4619      	mov	r1, r3
 8006846:	6938      	ldr	r0, [r7, #16]
 8006848:	f7ff feec 	bl	8006624 <move_window>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d16e      	bne.n	8006930 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	899b      	ldrh	r3, [r3, #12]
 8006856:	461a      	mov	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	fbb3 f1f2 	udiv	r1, r3, r2
 800685e:	fb01 f202 	mul.w	r2, r1, r2
 8006862:	1a9b      	subs	r3, r3, r2
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	4413      	add	r3, r2
 8006868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800686c:	021b      	lsls	r3, r3, #8
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	4313      	orrs	r3, r2
 8006872:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <get_fat+0xe6>
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	091b      	lsrs	r3, r3, #4
 8006882:	e002      	b.n	800688a <get_fat+0xec>
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800688a:	617b      	str	r3, [r7, #20]
			break;
 800688c:	e055      	b.n	800693a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	899b      	ldrh	r3, [r3, #12]
 8006896:	085b      	lsrs	r3, r3, #1
 8006898:	b29b      	uxth	r3, r3
 800689a:	4619      	mov	r1, r3
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	fbb3 f3f1 	udiv	r3, r3, r1
 80068a2:	4413      	add	r3, r2
 80068a4:	4619      	mov	r1, r3
 80068a6:	6938      	ldr	r0, [r7, #16]
 80068a8:	f7ff febc 	bl	8006624 <move_window>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d140      	bne.n	8006934 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	8992      	ldrh	r2, [r2, #12]
 80068c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80068c4:	fb00 f202 	mul.w	r2, r0, r2
 80068c8:	1a9b      	subs	r3, r3, r2
 80068ca:	440b      	add	r3, r1
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7ff fbc7 	bl	8006060 <ld_word>
 80068d2:	4603      	mov	r3, r0
 80068d4:	617b      	str	r3, [r7, #20]
			break;
 80068d6:	e030      	b.n	800693a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	899b      	ldrh	r3, [r3, #12]
 80068e0:	089b      	lsrs	r3, r3, #2
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	4619      	mov	r1, r3
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80068ec:	4413      	add	r3, r2
 80068ee:	4619      	mov	r1, r3
 80068f0:	6938      	ldr	r0, [r7, #16]
 80068f2:	f7ff fe97 	bl	8006624 <move_window>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d11d      	bne.n	8006938 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	8992      	ldrh	r2, [r2, #12]
 800690a:	fbb3 f0f2 	udiv	r0, r3, r2
 800690e:	fb00 f202 	mul.w	r2, r0, r2
 8006912:	1a9b      	subs	r3, r3, r2
 8006914:	440b      	add	r3, r1
 8006916:	4618      	mov	r0, r3
 8006918:	f7ff fbba 	bl	8006090 <ld_dword>
 800691c:	4603      	mov	r3, r0
 800691e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006922:	617b      	str	r3, [r7, #20]
			break;
 8006924:	e009      	b.n	800693a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006926:	2301      	movs	r3, #1
 8006928:	617b      	str	r3, [r7, #20]
 800692a:	e006      	b.n	800693a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800692c:	bf00      	nop
 800692e:	e004      	b.n	800693a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006930:	bf00      	nop
 8006932:	e002      	b.n	800693a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006934:	bf00      	nop
 8006936:	e000      	b.n	800693a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006938:	bf00      	nop
		}
	}

	return val;
 800693a:	697b      	ldr	r3, [r7, #20]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3718      	adds	r7, #24
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006944:	b590      	push	{r4, r7, lr}
 8006946:	b089      	sub	sp, #36	@ 0x24
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006950:	2302      	movs	r3, #2
 8006952:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2b01      	cmp	r3, #1
 8006958:	f240 8109 	bls.w	8006b6e <put_fat+0x22a>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	429a      	cmp	r2, r3
 8006964:	f080 8103 	bcs.w	8006b6e <put_fat+0x22a>
		switch (fs->fs_type) {
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	2b03      	cmp	r3, #3
 800696e:	f000 80b6 	beq.w	8006ade <put_fat+0x19a>
 8006972:	2b03      	cmp	r3, #3
 8006974:	f300 80fb 	bgt.w	8006b6e <put_fat+0x22a>
 8006978:	2b01      	cmp	r3, #1
 800697a:	d003      	beq.n	8006984 <put_fat+0x40>
 800697c:	2b02      	cmp	r3, #2
 800697e:	f000 8083 	beq.w	8006a88 <put_fat+0x144>
 8006982:	e0f4      	b.n	8006b6e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	61bb      	str	r3, [r7, #24]
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	085b      	lsrs	r3, r3, #1
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	4413      	add	r3, r2
 8006990:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	899b      	ldrh	r3, [r3, #12]
 800699a:	4619      	mov	r1, r3
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	fbb3 f3f1 	udiv	r3, r3, r1
 80069a2:	4413      	add	r3, r2
 80069a4:	4619      	mov	r1, r3
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f7ff fe3c 	bl	8006624 <move_window>
 80069ac:	4603      	mov	r3, r0
 80069ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80069b0:	7ffb      	ldrb	r3, [r7, #31]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f040 80d4 	bne.w	8006b60 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	1c5a      	adds	r2, r3, #1
 80069c2:	61ba      	str	r2, [r7, #24]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	8992      	ldrh	r2, [r2, #12]
 80069c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80069cc:	fb00 f202 	mul.w	r2, r0, r2
 80069d0:	1a9b      	subs	r3, r3, r2
 80069d2:	440b      	add	r3, r1
 80069d4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00d      	beq.n	80069fc <put_fat+0xb8>
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	b25b      	sxtb	r3, r3
 80069e6:	f003 030f 	and.w	r3, r3, #15
 80069ea:	b25a      	sxtb	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	011b      	lsls	r3, r3, #4
 80069f2:	b25b      	sxtb	r3, r3
 80069f4:	4313      	orrs	r3, r2
 80069f6:	b25b      	sxtb	r3, r3
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	e001      	b.n	8006a00 <put_fat+0xbc>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2201      	movs	r2, #1
 8006a08:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	899b      	ldrh	r3, [r3, #12]
 8006a12:	4619      	mov	r1, r3
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a1a:	4413      	add	r3, r2
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f7ff fe00 	bl	8006624 <move_window>
 8006a24:	4603      	mov	r3, r0
 8006a26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006a28:	7ffb      	ldrb	r3, [r7, #31]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f040 809a 	bne.w	8006b64 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	899b      	ldrh	r3, [r3, #12]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a42:	fb00 f202 	mul.w	r2, r0, r2
 8006a46:	1a9b      	subs	r3, r3, r2
 8006a48:	440b      	add	r3, r1
 8006a4a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <put_fat+0x11a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	091b      	lsrs	r3, r3, #4
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	e00e      	b.n	8006a7c <put_fat+0x138>
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	b25b      	sxtb	r3, r3
 8006a64:	f023 030f 	bic.w	r3, r3, #15
 8006a68:	b25a      	sxtb	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	0a1b      	lsrs	r3, r3, #8
 8006a6e:	b25b      	sxtb	r3, r3
 8006a70:	f003 030f 	and.w	r3, r3, #15
 8006a74:	b25b      	sxtb	r3, r3
 8006a76:	4313      	orrs	r3, r2
 8006a78:	b25b      	sxtb	r3, r3
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2201      	movs	r2, #1
 8006a84:	70da      	strb	r2, [r3, #3]
			break;
 8006a86:	e072      	b.n	8006b6e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	899b      	ldrh	r3, [r3, #12]
 8006a90:	085b      	lsrs	r3, r3, #1
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	4619      	mov	r1, r3
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a9c:	4413      	add	r3, r2
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f7ff fdbf 	bl	8006624 <move_window>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006aaa:	7ffb      	ldrb	r3, [r7, #31]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d15b      	bne.n	8006b68 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	8992      	ldrh	r2, [r2, #12]
 8006abe:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ac2:	fb00 f202 	mul.w	r2, r0, r2
 8006ac6:	1a9b      	subs	r3, r3, r2
 8006ac8:	440b      	add	r3, r1
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	b292      	uxth	r2, r2
 8006ace:	4611      	mov	r1, r2
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7ff fb00 	bl	80060d6 <st_word>
			fs->wflag = 1;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	70da      	strb	r2, [r3, #3]
			break;
 8006adc:	e047      	b.n	8006b6e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	899b      	ldrh	r3, [r3, #12]
 8006ae6:	089b      	lsrs	r3, r3, #2
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	4619      	mov	r1, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8006af2:	4413      	add	r3, r2
 8006af4:	4619      	mov	r1, r3
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f7ff fd94 	bl	8006624 <move_window>
 8006afc:	4603      	mov	r3, r0
 8006afe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b00:	7ffb      	ldrb	r3, [r7, #31]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d132      	bne.n	8006b6c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	8992      	ldrh	r2, [r2, #12]
 8006b1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b1e:	fb00 f202 	mul.w	r2, r0, r2
 8006b22:	1a9b      	subs	r3, r3, r2
 8006b24:	440b      	add	r3, r1
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7ff fab2 	bl	8006090 <ld_dword>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006b32:	4323      	orrs	r3, r4
 8006b34:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	8992      	ldrh	r2, [r2, #12]
 8006b44:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b48:	fb00 f202 	mul.w	r2, r0, r2
 8006b4c:	1a9b      	subs	r3, r3, r2
 8006b4e:	440b      	add	r3, r1
 8006b50:	6879      	ldr	r1, [r7, #4]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7ff fada 	bl	800610c <st_dword>
			fs->wflag = 1;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	70da      	strb	r2, [r3, #3]
			break;
 8006b5e:	e006      	b.n	8006b6e <put_fat+0x22a>
			if (res != FR_OK) break;
 8006b60:	bf00      	nop
 8006b62:	e004      	b.n	8006b6e <put_fat+0x22a>
			if (res != FR_OK) break;
 8006b64:	bf00      	nop
 8006b66:	e002      	b.n	8006b6e <put_fat+0x22a>
			if (res != FR_OK) break;
 8006b68:	bf00      	nop
 8006b6a:	e000      	b.n	8006b6e <put_fat+0x22a>
			if (res != FR_OK) break;
 8006b6c:	bf00      	nop
		}
	}
	return res;
 8006b6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3724      	adds	r7, #36	@ 0x24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd90      	pop	{r4, r7, pc}

08006b78 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b088      	sub	sp, #32
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d904      	bls.n	8006b9e <remove_chain+0x26>
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d301      	bcc.n	8006ba2 <remove_chain+0x2a>
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	e04b      	b.n	8006c3a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00c      	beq.n	8006bc2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bac:	6879      	ldr	r1, [r7, #4]
 8006bae:	69b8      	ldr	r0, [r7, #24]
 8006bb0:	f7ff fec8 	bl	8006944 <put_fat>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006bb8:	7ffb      	ldrb	r3, [r7, #31]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <remove_chain+0x4a>
 8006bbe:	7ffb      	ldrb	r3, [r7, #31]
 8006bc0:	e03b      	b.n	8006c3a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006bc2:	68b9      	ldr	r1, [r7, #8]
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f7ff fdea 	bl	800679e <get_fat>
 8006bca:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d031      	beq.n	8006c36 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d101      	bne.n	8006bdc <remove_chain+0x64>
 8006bd8:	2302      	movs	r3, #2
 8006bda:	e02e      	b.n	8006c3a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be2:	d101      	bne.n	8006be8 <remove_chain+0x70>
 8006be4:	2301      	movs	r3, #1
 8006be6:	e028      	b.n	8006c3a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006be8:	2200      	movs	r2, #0
 8006bea:	68b9      	ldr	r1, [r7, #8]
 8006bec:	69b8      	ldr	r0, [r7, #24]
 8006bee:	f7ff fea9 	bl	8006944 <put_fat>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006bf6:	7ffb      	ldrb	r3, [r7, #31]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d001      	beq.n	8006c00 <remove_chain+0x88>
 8006bfc:	7ffb      	ldrb	r3, [r7, #31]
 8006bfe:	e01c      	b.n	8006c3a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	69da      	ldr	r2, [r3, #28]
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	3b02      	subs	r3, #2
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d20b      	bcs.n	8006c26 <remove_chain+0xae>
			fs->free_clst++;
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	1c5a      	adds	r2, r3, #1
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	791b      	ldrb	r3, [r3, #4]
 8006c1c:	f043 0301 	orr.w	r3, r3, #1
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d3c6      	bcc.n	8006bc2 <remove_chain+0x4a>
 8006c34:	e000      	b.n	8006c38 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006c36:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3720      	adds	r7, #32
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b088      	sub	sp, #32
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10d      	bne.n	8006c74 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d004      	beq.n	8006c6e <create_chain+0x2c>
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d31b      	bcc.n	8006ca6 <create_chain+0x64>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	61bb      	str	r3, [r7, #24]
 8006c72:	e018      	b.n	8006ca6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7ff fd91 	bl	800679e <get_fat>
 8006c7c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d801      	bhi.n	8006c88 <create_chain+0x46>
 8006c84:	2301      	movs	r3, #1
 8006c86:	e070      	b.n	8006d6a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8e:	d101      	bne.n	8006c94 <create_chain+0x52>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	e06a      	b.n	8006d6a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d201      	bcs.n	8006ca2 <create_chain+0x60>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	e063      	b.n	8006d6a <create_chain+0x128>
		scl = clst;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	3301      	adds	r3, #1
 8006cae:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	6a1b      	ldr	r3, [r3, #32]
 8006cb4:	69fa      	ldr	r2, [r7, #28]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d307      	bcc.n	8006cca <create_chain+0x88>
				ncl = 2;
 8006cba:	2302      	movs	r3, #2
 8006cbc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006cbe:	69fa      	ldr	r2, [r7, #28]
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d901      	bls.n	8006cca <create_chain+0x88>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	e04f      	b.n	8006d6a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006cca:	69f9      	ldr	r1, [r7, #28]
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f7ff fd66 	bl	800679e <get_fat>
 8006cd2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00e      	beq.n	8006cf8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d003      	beq.n	8006ce8 <create_chain+0xa6>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce6:	d101      	bne.n	8006cec <create_chain+0xaa>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	e03e      	b.n	8006d6a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006cec:	69fa      	ldr	r2, [r7, #28]
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d1da      	bne.n	8006caa <create_chain+0x68>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	e038      	b.n	8006d6a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006cf8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8006cfe:	69f9      	ldr	r1, [r7, #28]
 8006d00:	6938      	ldr	r0, [r7, #16]
 8006d02:	f7ff fe1f 	bl	8006944 <put_fat>
 8006d06:	4603      	mov	r3, r0
 8006d08:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006d0a:	7dfb      	ldrb	r3, [r7, #23]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d109      	bne.n	8006d24 <create_chain+0xe2>
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d006      	beq.n	8006d24 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006d16:	69fa      	ldr	r2, [r7, #28]
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	6938      	ldr	r0, [r7, #16]
 8006d1c:	f7ff fe12 	bl	8006944 <put_fat>
 8006d20:	4603      	mov	r3, r0
 8006d22:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d116      	bne.n	8006d58 <create_chain+0x116>
		fs->last_clst = ncl;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	69fa      	ldr	r2, [r7, #28]
 8006d2e:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	69da      	ldr	r2, [r3, #28]
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	3b02      	subs	r3, #2
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d804      	bhi.n	8006d48 <create_chain+0x106>
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	1e5a      	subs	r2, r3, #1
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	791b      	ldrb	r3, [r3, #4]
 8006d4c:	f043 0301 	orr.w	r3, r3, #1
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	711a      	strb	r2, [r3, #4]
 8006d56:	e007      	b.n	8006d68 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006d58:	7dfb      	ldrb	r3, [r7, #23]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d102      	bne.n	8006d64 <create_chain+0x122>
 8006d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d62:	e000      	b.n	8006d66 <create_chain+0x124>
 8006d64:	2301      	movs	r3, #1
 8006d66:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006d68:	69fb      	ldr	r3, [r7, #28]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3720      	adds	r7, #32
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b087      	sub	sp, #28
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d86:	3304      	adds	r3, #4
 8006d88:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	899b      	ldrh	r3, [r3, #12]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	8952      	ldrh	r2, [r2, #10]
 8006d9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d9e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	1d1a      	adds	r2, r3, #4
 8006da4:	613a      	str	r2, [r7, #16]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <clmt_clust+0x42>
 8006db0:	2300      	movs	r3, #0
 8006db2:	e010      	b.n	8006dd6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d307      	bcc.n	8006dcc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	617b      	str	r3, [r7, #20]
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	3304      	adds	r3, #4
 8006dc8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006dca:	e7e9      	b.n	8006da0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006dcc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	4413      	add	r3, r2
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	371c      	adds	r7, #28
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b086      	sub	sp, #24
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006df8:	d204      	bcs.n	8006e04 <dir_sdi+0x22>
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	f003 031f 	and.w	r3, r3, #31
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006e04:	2302      	movs	r3, #2
 8006e06:	e071      	b.n	8006eec <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d106      	bne.n	8006e28 <dir_sdi+0x46>
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d902      	bls.n	8006e28 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e26:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10c      	bne.n	8006e48 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	095b      	lsrs	r3, r3, #5
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	8912      	ldrh	r2, [r2, #8]
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d301      	bcc.n	8006e3e <dir_sdi+0x5c>
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	e056      	b.n	8006eec <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	61da      	str	r2, [r3, #28]
 8006e46:	e02d      	b.n	8006ea4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	895b      	ldrh	r3, [r3, #10]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	899b      	ldrh	r3, [r3, #12]
 8006e52:	fb02 f303 	mul.w	r3, r2, r3
 8006e56:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006e58:	e019      	b.n	8006e8e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6979      	ldr	r1, [r7, #20]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7ff fc9d 	bl	800679e <get_fat>
 8006e64:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6c:	d101      	bne.n	8006e72 <dir_sdi+0x90>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e03c      	b.n	8006eec <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d904      	bls.n	8006e82 <dir_sdi+0xa0>
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d301      	bcc.n	8006e86 <dir_sdi+0xa4>
 8006e82:	2302      	movs	r3, #2
 8006e84:	e032      	b.n	8006eec <dir_sdi+0x10a>
			ofs -= csz;
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d2e1      	bcs.n	8006e5a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006e96:	6979      	ldr	r1, [r7, #20]
 8006e98:	6938      	ldr	r0, [r7, #16]
 8006e9a:	f7ff fc61 	bl	8006760 <clust2sect>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <dir_sdi+0xd4>
 8006eb2:	2302      	movs	r3, #2
 8006eb4:	e01a      	b.n	8006eec <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	69da      	ldr	r2, [r3, #28]
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	899b      	ldrh	r3, [r3, #12]
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ec6:	441a      	add	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	899b      	ldrh	r3, [r3, #12]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ede:	fb00 f202 	mul.w	r2, r0, r2
 8006ee2:	1a9b      	subs	r3, r3, r2
 8006ee4:	18ca      	adds	r2, r1, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3718      	adds	r7, #24
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	695b      	ldr	r3, [r3, #20]
 8006f08:	3320      	adds	r3, #32
 8006f0a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d003      	beq.n	8006f1c <dir_next+0x28>
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f1a:	d301      	bcc.n	8006f20 <dir_next+0x2c>
 8006f1c:	2304      	movs	r3, #4
 8006f1e:	e0bb      	b.n	8007098 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	899b      	ldrh	r3, [r3, #12]
 8006f24:	461a      	mov	r2, r3
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f2c:	fb01 f202 	mul.w	r2, r1, r2
 8006f30:	1a9b      	subs	r3, r3, r2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f040 809d 	bne.w	8007072 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	69db      	ldr	r3, [r3, #28]
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10b      	bne.n	8006f62 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	095b      	lsrs	r3, r3, #5
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	8912      	ldrh	r2, [r2, #8]
 8006f52:	4293      	cmp	r3, r2
 8006f54:	f0c0 808d 	bcc.w	8007072 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	61da      	str	r2, [r3, #28]
 8006f5e:	2304      	movs	r3, #4
 8006f60:	e09a      	b.n	8007098 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	899b      	ldrh	r3, [r3, #12]
 8006f66:	461a      	mov	r2, r3
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	8952      	ldrh	r2, [r2, #10]
 8006f72:	3a01      	subs	r2, #1
 8006f74:	4013      	ands	r3, r2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d17b      	bne.n	8007072 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	4619      	mov	r1, r3
 8006f82:	4610      	mov	r0, r2
 8006f84:	f7ff fc0b 	bl	800679e <get_fat>
 8006f88:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d801      	bhi.n	8006f94 <dir_next+0xa0>
 8006f90:	2302      	movs	r3, #2
 8006f92:	e081      	b.n	8007098 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9a:	d101      	bne.n	8006fa0 <dir_next+0xac>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e07b      	b.n	8007098 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d359      	bcc.n	800705e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d104      	bne.n	8006fba <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	61da      	str	r2, [r3, #28]
 8006fb6:	2304      	movs	r3, #4
 8006fb8:	e06e      	b.n	8007098 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	f7ff fe3d 	bl	8006c42 <create_chain>
 8006fc8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <dir_next+0xe0>
 8006fd0:	2307      	movs	r3, #7
 8006fd2:	e061      	b.n	8007098 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d101      	bne.n	8006fde <dir_next+0xea>
 8006fda:	2302      	movs	r3, #2
 8006fdc:	e05c      	b.n	8007098 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe4:	d101      	bne.n	8006fea <dir_next+0xf6>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e056      	b.n	8007098 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f7ff fad6 	bl	800659c <sync_window>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <dir_next+0x106>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e04e      	b.n	8007098 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	899b      	ldrh	r3, [r3, #12]
 8007004:	461a      	mov	r2, r3
 8007006:	2100      	movs	r1, #0
 8007008:	f7ff f8cd 	bl	80061a6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800700c:	2300      	movs	r3, #0
 800700e:	613b      	str	r3, [r7, #16]
 8007010:	6979      	ldr	r1, [r7, #20]
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f7ff fba4 	bl	8006760 <clust2sect>
 8007018:	4602      	mov	r2, r0
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	639a      	str	r2, [r3, #56]	@ 0x38
 800701e:	e012      	b.n	8007046 <dir_next+0x152>
						fs->wflag = 1;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2201      	movs	r2, #1
 8007024:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f7ff fab8 	bl	800659c <sync_window>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <dir_next+0x142>
 8007032:	2301      	movs	r3, #1
 8007034:	e030      	b.n	8007098 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	3301      	adds	r3, #1
 800703a:	613b      	str	r3, [r7, #16]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007040:	1c5a      	adds	r2, r3, #1
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	639a      	str	r2, [r3, #56]	@ 0x38
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	895b      	ldrh	r3, [r3, #10]
 800704a:	461a      	mov	r2, r3
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	4293      	cmp	r3, r2
 8007050:	d3e6      	bcc.n	8007020 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	1ad2      	subs	r2, r2, r3
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007064:	6979      	ldr	r1, [r7, #20]
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f7ff fb7a 	bl	8006760 <clust2sect>
 800706c:	4602      	mov	r2, r0
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	899b      	ldrh	r3, [r3, #12]
 8007082:	461a      	mov	r2, r3
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	fbb3 f0f2 	udiv	r0, r3, r2
 800708a:	fb00 f202 	mul.w	r2, r0, r2
 800708e:	1a9b      	subs	r3, r3, r2
 8007090:	18ca      	adds	r2, r1, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80070b0:	2100      	movs	r1, #0
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7ff fe95 	bl	8006de2 <dir_sdi>
 80070b8:	4603      	mov	r3, r0
 80070ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80070bc:	7dfb      	ldrb	r3, [r7, #23]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d12b      	bne.n	800711a <dir_alloc+0x7a>
		n = 0;
 80070c2:	2300      	movs	r3, #0
 80070c4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	69db      	ldr	r3, [r3, #28]
 80070ca:	4619      	mov	r1, r3
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f7ff faa9 	bl	8006624 <move_window>
 80070d2:	4603      	mov	r3, r0
 80070d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80070d6:	7dfb      	ldrb	r3, [r7, #23]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d11d      	bne.n	8007118 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a1b      	ldr	r3, [r3, #32]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	2be5      	cmp	r3, #229	@ 0xe5
 80070e4:	d004      	beq.n	80070f0 <dir_alloc+0x50>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d107      	bne.n	8007100 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	3301      	adds	r3, #1
 80070f4:	613b      	str	r3, [r7, #16]
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d102      	bne.n	8007104 <dir_alloc+0x64>
 80070fe:	e00c      	b.n	800711a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007100:	2300      	movs	r3, #0
 8007102:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007104:	2101      	movs	r1, #1
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7ff fef4 	bl	8006ef4 <dir_next>
 800710c:	4603      	mov	r3, r0
 800710e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007110:	7dfb      	ldrb	r3, [r7, #23]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d0d7      	beq.n	80070c6 <dir_alloc+0x26>
 8007116:	e000      	b.n	800711a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007118:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800711a:	7dfb      	ldrb	r3, [r7, #23]
 800711c:	2b04      	cmp	r3, #4
 800711e:	d101      	bne.n	8007124 <dir_alloc+0x84>
 8007120:	2307      	movs	r3, #7
 8007122:	75fb      	strb	r3, [r7, #23]
	return res;
 8007124:	7dfb      	ldrb	r3, [r7, #23]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b084      	sub	sp, #16
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	331a      	adds	r3, #26
 800713c:	4618      	mov	r0, r3
 800713e:	f7fe ff8f 	bl	8006060 <ld_word>
 8007142:	4603      	mov	r3, r0
 8007144:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	2b03      	cmp	r3, #3
 800714c:	d109      	bne.n	8007162 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	3314      	adds	r3, #20
 8007152:	4618      	mov	r0, r3
 8007154:	f7fe ff84 	bl	8006060 <ld_word>
 8007158:	4603      	mov	r3, r0
 800715a:	041b      	lsls	r3, r3, #16
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	4313      	orrs	r3, r2
 8007160:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007162:	68fb      	ldr	r3, [r7, #12]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	331a      	adds	r3, #26
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	b292      	uxth	r2, r2
 8007180:	4611      	mov	r1, r2
 8007182:	4618      	mov	r0, r3
 8007184:	f7fe ffa7 	bl	80060d6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	2b03      	cmp	r3, #3
 800718e:	d109      	bne.n	80071a4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	f103 0214 	add.w	r2, r3, #20
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	0c1b      	lsrs	r3, r3, #16
 800719a:	b29b      	uxth	r3, r3
 800719c:	4619      	mov	r1, r3
 800719e:	4610      	mov	r0, r2
 80071a0:	f7fe ff99 	bl	80060d6 <st_word>
	}
}
 80071a4:	bf00      	nop
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80071ac:	b590      	push	{r4, r7, lr}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	331a      	adds	r3, #26
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fe ff50 	bl	8006060 <ld_word>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <cmp_lfn+0x1e>
 80071c6:	2300      	movs	r3, #0
 80071c8:	e059      	b.n	800727e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071d2:	1e5a      	subs	r2, r3, #1
 80071d4:	4613      	mov	r3, r2
 80071d6:	005b      	lsls	r3, r3, #1
 80071d8:	4413      	add	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80071e0:	2301      	movs	r3, #1
 80071e2:	81fb      	strh	r3, [r7, #14]
 80071e4:	2300      	movs	r3, #0
 80071e6:	613b      	str	r3, [r7, #16]
 80071e8:	e033      	b.n	8007252 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80071ea:	4a27      	ldr	r2, [pc, #156]	@ (8007288 <cmp_lfn+0xdc>)
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	4413      	add	r3, r2
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	461a      	mov	r2, r3
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	4413      	add	r3, r2
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7fe ff31 	bl	8006060 <ld_word>
 80071fe:	4603      	mov	r3, r0
 8007200:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007202:	89fb      	ldrh	r3, [r7, #14]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d01a      	beq.n	800723e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2bfe      	cmp	r3, #254	@ 0xfe
 800720c:	d812      	bhi.n	8007234 <cmp_lfn+0x88>
 800720e:	89bb      	ldrh	r3, [r7, #12]
 8007210:	4618      	mov	r0, r3
 8007212:	f001 fdff 	bl	8008e14 <ff_wtoupper>
 8007216:	4603      	mov	r3, r0
 8007218:	461c      	mov	r4, r3
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	1c5a      	adds	r2, r3, #1
 800721e:	617a      	str	r2, [r7, #20]
 8007220:	005b      	lsls	r3, r3, #1
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	4413      	add	r3, r2
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	4618      	mov	r0, r3
 800722a:	f001 fdf3 	bl	8008e14 <ff_wtoupper>
 800722e:	4603      	mov	r3, r0
 8007230:	429c      	cmp	r4, r3
 8007232:	d001      	beq.n	8007238 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007234:	2300      	movs	r3, #0
 8007236:	e022      	b.n	800727e <cmp_lfn+0xd2>
			}
			wc = uc;
 8007238:	89bb      	ldrh	r3, [r7, #12]
 800723a:	81fb      	strh	r3, [r7, #14]
 800723c:	e006      	b.n	800724c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800723e:	89bb      	ldrh	r3, [r7, #12]
 8007240:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007244:	4293      	cmp	r3, r2
 8007246:	d001      	beq.n	800724c <cmp_lfn+0xa0>
 8007248:	2300      	movs	r3, #0
 800724a:	e018      	b.n	800727e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	3301      	adds	r3, #1
 8007250:	613b      	str	r3, [r7, #16]
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	2b0c      	cmp	r3, #12
 8007256:	d9c8      	bls.n	80071ea <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00b      	beq.n	800727c <cmp_lfn+0xd0>
 8007264:	89fb      	ldrh	r3, [r7, #14]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d008      	beq.n	800727c <cmp_lfn+0xd0>
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	005b      	lsls	r3, r3, #1
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	4413      	add	r3, r2
 8007272:	881b      	ldrh	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d001      	beq.n	800727c <cmp_lfn+0xd0>
 8007278:	2300      	movs	r3, #0
 800727a:	e000      	b.n	800727e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800727c:	2301      	movs	r3, #1
}
 800727e:	4618      	mov	r0, r3
 8007280:	371c      	adds	r7, #28
 8007282:	46bd      	mov	sp, r7
 8007284:	bd90      	pop	{r4, r7, pc}
 8007286:	bf00      	nop
 8007288:	0800c254 	.word	0x0800c254

0800728c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b088      	sub	sp, #32
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	4611      	mov	r1, r2
 8007298:	461a      	mov	r2, r3
 800729a:	460b      	mov	r3, r1
 800729c:	71fb      	strb	r3, [r7, #7]
 800729e:	4613      	mov	r3, r2
 80072a0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	330d      	adds	r3, #13
 80072a6:	79ba      	ldrb	r2, [r7, #6]
 80072a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	330b      	adds	r3, #11
 80072ae:	220f      	movs	r2, #15
 80072b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	330c      	adds	r3, #12
 80072b6:	2200      	movs	r2, #0
 80072b8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	331a      	adds	r3, #26
 80072be:	2100      	movs	r1, #0
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7fe ff08 	bl	80060d6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80072c6:	79fb      	ldrb	r3, [r7, #7]
 80072c8:	1e5a      	subs	r2, r3, #1
 80072ca:	4613      	mov	r3, r2
 80072cc:	005b      	lsls	r3, r3, #1
 80072ce:	4413      	add	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80072d6:	2300      	movs	r3, #0
 80072d8:	82fb      	strh	r3, [r7, #22]
 80072da:	2300      	movs	r3, #0
 80072dc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80072de:	8afb      	ldrh	r3, [r7, #22]
 80072e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d007      	beq.n	80072f8 <put_lfn+0x6c>
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	1c5a      	adds	r2, r3, #1
 80072ec:	61fa      	str	r2, [r7, #28]
 80072ee:	005b      	lsls	r3, r3, #1
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	4413      	add	r3, r2
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80072f8:	4a17      	ldr	r2, [pc, #92]	@ (8007358 <put_lfn+0xcc>)
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	4413      	add	r3, r2
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	461a      	mov	r2, r3
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	4413      	add	r3, r2
 8007306:	8afa      	ldrh	r2, [r7, #22]
 8007308:	4611      	mov	r1, r2
 800730a:	4618      	mov	r0, r3
 800730c:	f7fe fee3 	bl	80060d6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007310:	8afb      	ldrh	r3, [r7, #22]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d102      	bne.n	800731c <put_lfn+0x90>
 8007316:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800731a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	3301      	adds	r3, #1
 8007320:	61bb      	str	r3, [r7, #24]
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	2b0c      	cmp	r3, #12
 8007326:	d9da      	bls.n	80072de <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007328:	8afb      	ldrh	r3, [r7, #22]
 800732a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800732e:	4293      	cmp	r3, r2
 8007330:	d006      	beq.n	8007340 <put_lfn+0xb4>
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	005b      	lsls	r3, r3, #1
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	4413      	add	r3, r2
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d103      	bne.n	8007348 <put_lfn+0xbc>
 8007340:	79fb      	ldrb	r3, [r7, #7]
 8007342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007346:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	79fa      	ldrb	r2, [r7, #7]
 800734c:	701a      	strb	r2, [r3, #0]
}
 800734e:	bf00      	nop
 8007350:	3720      	adds	r7, #32
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	0800c254 	.word	0x0800c254

0800735c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b08c      	sub	sp, #48	@ 0x30
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
 8007368:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800736a:	220b      	movs	r2, #11
 800736c:	68b9      	ldr	r1, [r7, #8]
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f7fe fef8 	bl	8006164 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	2b05      	cmp	r3, #5
 8007378:	d92b      	bls.n	80073d2 <gen_numname+0x76>
		sr = seq;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800737e:	e022      	b.n	80073c6 <gen_numname+0x6a>
			wc = *lfn++;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	1c9a      	adds	r2, r3, #2
 8007384:	607a      	str	r2, [r7, #4]
 8007386:	881b      	ldrh	r3, [r3, #0]
 8007388:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800738a:	2300      	movs	r3, #0
 800738c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800738e:	e017      	b.n	80073c0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	005a      	lsls	r2, r3, #1
 8007394:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	4413      	add	r3, r2
 800739c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800739e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80073a0:	085b      	lsrs	r3, r3, #1
 80073a2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d005      	beq.n	80073ba <gen_numname+0x5e>
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80073b4:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 80073b8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80073ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073bc:	3301      	adds	r3, #1
 80073be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c2:	2b0f      	cmp	r3, #15
 80073c4:	d9e4      	bls.n	8007390 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1d8      	bne.n	8007380 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80073d2:	2307      	movs	r3, #7
 80073d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	f003 030f 	and.w	r3, r3, #15
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	3330      	adds	r3, #48	@ 0x30
 80073e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80073e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80073ea:	2b39      	cmp	r3, #57	@ 0x39
 80073ec:	d904      	bls.n	80073f8 <gen_numname+0x9c>
 80073ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80073f2:	3307      	adds	r3, #7
 80073f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80073f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073fa:	1e5a      	subs	r2, r3, #1
 80073fc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80073fe:	3330      	adds	r3, #48	@ 0x30
 8007400:	443b      	add	r3, r7
 8007402:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007406:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	091b      	lsrs	r3, r3, #4
 800740e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1df      	bne.n	80073d6 <gen_numname+0x7a>
	ns[i] = '~';
 8007416:	f107 0214 	add.w	r2, r7, #20
 800741a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800741c:	4413      	add	r3, r2
 800741e:	227e      	movs	r2, #126	@ 0x7e
 8007420:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007422:	2300      	movs	r3, #0
 8007424:	627b      	str	r3, [r7, #36]	@ 0x24
 8007426:	e002      	b.n	800742e <gen_numname+0xd2>
 8007428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742a:	3301      	adds	r3, #1
 800742c:	627b      	str	r3, [r7, #36]	@ 0x24
 800742e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007432:	429a      	cmp	r2, r3
 8007434:	d205      	bcs.n	8007442 <gen_numname+0xe6>
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743a:	4413      	add	r3, r2
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	2b20      	cmp	r3, #32
 8007440:	d1f2      	bne.n	8007428 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007444:	2b07      	cmp	r3, #7
 8007446:	d807      	bhi.n	8007458 <gen_numname+0xfc>
 8007448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800744a:	1c5a      	adds	r2, r3, #1
 800744c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800744e:	3330      	adds	r3, #48	@ 0x30
 8007450:	443b      	add	r3, r7
 8007452:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007456:	e000      	b.n	800745a <gen_numname+0xfe>
 8007458:	2120      	movs	r1, #32
 800745a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745c:	1c5a      	adds	r2, r3, #1
 800745e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	4413      	add	r3, r2
 8007464:	460a      	mov	r2, r1
 8007466:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746a:	2b07      	cmp	r3, #7
 800746c:	d9e9      	bls.n	8007442 <gen_numname+0xe6>
}
 800746e:	bf00      	nop
 8007470:	bf00      	nop
 8007472:	3730      	adds	r7, #48	@ 0x30
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007480:	2300      	movs	r3, #0
 8007482:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007484:	230b      	movs	r3, #11
 8007486:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007488:	7bfb      	ldrb	r3, [r7, #15]
 800748a:	b2da      	uxtb	r2, r3
 800748c:	0852      	lsrs	r2, r2, #1
 800748e:	01db      	lsls	r3, r3, #7
 8007490:	4313      	orrs	r3, r2
 8007492:	b2da      	uxtb	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	1c59      	adds	r1, r3, #1
 8007498:	6079      	str	r1, [r7, #4]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	4413      	add	r3, r2
 800749e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	3b01      	subs	r3, #1
 80074a4:	60bb      	str	r3, [r7, #8]
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1ed      	bne.n	8007488 <sum_sfn+0x10>
	return sum;
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b086      	sub	sp, #24
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80074c8:	2100      	movs	r1, #0
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7ff fc89 	bl	8006de2 <dir_sdi>
 80074d0:	4603      	mov	r3, r0
 80074d2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80074d4:	7dfb      	ldrb	r3, [r7, #23]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <dir_find+0x24>
 80074da:	7dfb      	ldrb	r3, [r7, #23]
 80074dc:	e0a9      	b.n	8007632 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80074de:	23ff      	movs	r3, #255	@ 0xff
 80074e0:	753b      	strb	r3, [r7, #20]
 80074e2:	7d3b      	ldrb	r3, [r7, #20]
 80074e4:	757b      	strb	r3, [r7, #21]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f04f 32ff 	mov.w	r2, #4294967295
 80074ec:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	69db      	ldr	r3, [r3, #28]
 80074f2:	4619      	mov	r1, r3
 80074f4:	6938      	ldr	r0, [r7, #16]
 80074f6:	f7ff f895 	bl	8006624 <move_window>
 80074fa:	4603      	mov	r3, r0
 80074fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80074fe:	7dfb      	ldrb	r3, [r7, #23]
 8007500:	2b00      	cmp	r3, #0
 8007502:	f040 8090 	bne.w	8007626 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800750e:	7dbb      	ldrb	r3, [r7, #22]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d102      	bne.n	800751a <dir_find+0x60>
 8007514:	2304      	movs	r3, #4
 8007516:	75fb      	strb	r3, [r7, #23]
 8007518:	e08a      	b.n	8007630 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a1b      	ldr	r3, [r3, #32]
 800751e:	330b      	adds	r3, #11
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007526:	73fb      	strb	r3, [r7, #15]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	7bfa      	ldrb	r2, [r7, #15]
 800752c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800752e:	7dbb      	ldrb	r3, [r7, #22]
 8007530:	2be5      	cmp	r3, #229	@ 0xe5
 8007532:	d007      	beq.n	8007544 <dir_find+0x8a>
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	f003 0308 	and.w	r3, r3, #8
 800753a:	2b00      	cmp	r3, #0
 800753c:	d009      	beq.n	8007552 <dir_find+0x98>
 800753e:	7bfb      	ldrb	r3, [r7, #15]
 8007540:	2b0f      	cmp	r3, #15
 8007542:	d006      	beq.n	8007552 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007544:	23ff      	movs	r3, #255	@ 0xff
 8007546:	757b      	strb	r3, [r7, #21]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f04f 32ff 	mov.w	r2, #4294967295
 800754e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007550:	e05e      	b.n	8007610 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007552:	7bfb      	ldrb	r3, [r7, #15]
 8007554:	2b0f      	cmp	r3, #15
 8007556:	d136      	bne.n	80075c6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800755e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007562:	2b00      	cmp	r3, #0
 8007564:	d154      	bne.n	8007610 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007566:	7dbb      	ldrb	r3, [r7, #22]
 8007568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00d      	beq.n	800758c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a1b      	ldr	r3, [r3, #32]
 8007574:	7b5b      	ldrb	r3, [r3, #13]
 8007576:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007578:	7dbb      	ldrb	r3, [r7, #22]
 800757a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800757e:	75bb      	strb	r3, [r7, #22]
 8007580:	7dbb      	ldrb	r3, [r7, #22]
 8007582:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	695a      	ldr	r2, [r3, #20]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800758c:	7dba      	ldrb	r2, [r7, #22]
 800758e:	7d7b      	ldrb	r3, [r7, #21]
 8007590:	429a      	cmp	r2, r3
 8007592:	d115      	bne.n	80075c0 <dir_find+0x106>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a1b      	ldr	r3, [r3, #32]
 8007598:	330d      	adds	r3, #13
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	7d3a      	ldrb	r2, [r7, #20]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d10e      	bne.n	80075c0 <dir_find+0x106>
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	691a      	ldr	r2, [r3, #16]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a1b      	ldr	r3, [r3, #32]
 80075aa:	4619      	mov	r1, r3
 80075ac:	4610      	mov	r0, r2
 80075ae:	f7ff fdfd 	bl	80071ac <cmp_lfn>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d003      	beq.n	80075c0 <dir_find+0x106>
 80075b8:	7d7b      	ldrb	r3, [r7, #21]
 80075ba:	3b01      	subs	r3, #1
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	e000      	b.n	80075c2 <dir_find+0x108>
 80075c0:	23ff      	movs	r3, #255	@ 0xff
 80075c2:	757b      	strb	r3, [r7, #21]
 80075c4:	e024      	b.n	8007610 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80075c6:	7d7b      	ldrb	r3, [r7, #21]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d109      	bne.n	80075e0 <dir_find+0x126>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a1b      	ldr	r3, [r3, #32]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff ff51 	bl	8007478 <sum_sfn>
 80075d6:	4603      	mov	r3, r0
 80075d8:	461a      	mov	r2, r3
 80075da:	7d3b      	ldrb	r3, [r7, #20]
 80075dc:	4293      	cmp	r3, r2
 80075de:	d024      	beq.n	800762a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10a      	bne.n	8007604 <dir_find+0x14a>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a18      	ldr	r0, [r3, #32]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	3324      	adds	r3, #36	@ 0x24
 80075f6:	220b      	movs	r2, #11
 80075f8:	4619      	mov	r1, r3
 80075fa:	f7fe fdef 	bl	80061dc <mem_cmp>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d014      	beq.n	800762e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007604:	23ff      	movs	r3, #255	@ 0xff
 8007606:	757b      	strb	r3, [r7, #21]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f04f 32ff 	mov.w	r2, #4294967295
 800760e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007610:	2100      	movs	r1, #0
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7ff fc6e 	bl	8006ef4 <dir_next>
 8007618:	4603      	mov	r3, r0
 800761a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800761c:	7dfb      	ldrb	r3, [r7, #23]
 800761e:	2b00      	cmp	r3, #0
 8007620:	f43f af65 	beq.w	80074ee <dir_find+0x34>
 8007624:	e004      	b.n	8007630 <dir_find+0x176>
		if (res != FR_OK) break;
 8007626:	bf00      	nop
 8007628:	e002      	b.n	8007630 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800762a:	bf00      	nop
 800762c:	e000      	b.n	8007630 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800762e:	bf00      	nop

	return res;
 8007630:	7dfb      	ldrb	r3, [r7, #23]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3718      	adds	r7, #24
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
	...

0800763c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b08c      	sub	sp, #48	@ 0x30
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007650:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d001      	beq.n	800765c <dir_register+0x20>
 8007658:	2306      	movs	r3, #6
 800765a:	e0e0      	b.n	800781e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800765c:	2300      	movs	r3, #0
 800765e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007660:	e002      	b.n	8007668 <dir_register+0x2c>
 8007662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007664:	3301      	adds	r3, #1
 8007666:	627b      	str	r3, [r7, #36]	@ 0x24
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	691a      	ldr	r2, [r3, #16]
 800766c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766e:	005b      	lsls	r3, r3, #1
 8007670:	4413      	add	r3, r2
 8007672:	881b      	ldrh	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1f4      	bne.n	8007662 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800767e:	f107 030c 	add.w	r3, r7, #12
 8007682:	220c      	movs	r2, #12
 8007684:	4618      	mov	r0, r3
 8007686:	f7fe fd6d 	bl	8006164 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800768a:	7dfb      	ldrb	r3, [r7, #23]
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b00      	cmp	r3, #0
 8007692:	d032      	beq.n	80076fa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2240      	movs	r2, #64	@ 0x40
 8007698:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800769c:	2301      	movs	r3, #1
 800769e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076a0:	e016      	b.n	80076d0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	691a      	ldr	r2, [r3, #16]
 80076ac:	f107 010c 	add.w	r1, r7, #12
 80076b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b2:	f7ff fe53 	bl	800735c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f7ff feff 	bl	80074ba <dir_find>
 80076bc:	4603      	mov	r3, r0
 80076be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 80076c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d106      	bne.n	80076d8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80076ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076cc:	3301      	adds	r3, #1
 80076ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d2:	2b63      	cmp	r3, #99	@ 0x63
 80076d4:	d9e5      	bls.n	80076a2 <dir_register+0x66>
 80076d6:	e000      	b.n	80076da <dir_register+0x9e>
			if (res != FR_OK) break;
 80076d8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80076da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076dc:	2b64      	cmp	r3, #100	@ 0x64
 80076de:	d101      	bne.n	80076e4 <dir_register+0xa8>
 80076e0:	2307      	movs	r3, #7
 80076e2:	e09c      	b.n	800781e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80076e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80076e8:	2b04      	cmp	r3, #4
 80076ea:	d002      	beq.n	80076f2 <dir_register+0xb6>
 80076ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80076f0:	e095      	b.n	800781e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80076f2:	7dfa      	ldrb	r2, [r7, #23]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80076fa:	7dfb      	ldrb	r3, [r7, #23]
 80076fc:	f003 0302 	and.w	r3, r3, #2
 8007700:	2b00      	cmp	r3, #0
 8007702:	d007      	beq.n	8007714 <dir_register+0xd8>
 8007704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007706:	330c      	adds	r3, #12
 8007708:	4a47      	ldr	r2, [pc, #284]	@ (8007828 <dir_register+0x1ec>)
 800770a:	fba2 2303 	umull	r2, r3, r2, r3
 800770e:	089b      	lsrs	r3, r3, #2
 8007710:	3301      	adds	r3, #1
 8007712:	e000      	b.n	8007716 <dir_register+0xda>
 8007714:	2301      	movs	r3, #1
 8007716:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007718:	6a39      	ldr	r1, [r7, #32]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7ff fcc0 	bl	80070a0 <dir_alloc>
 8007720:	4603      	mov	r3, r0
 8007722:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007726:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800772a:	2b00      	cmp	r3, #0
 800772c:	d148      	bne.n	80077c0 <dir_register+0x184>
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	3b01      	subs	r3, #1
 8007732:	623b      	str	r3, [r7, #32]
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d042      	beq.n	80077c0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	695a      	ldr	r2, [r3, #20]
 800773e:	6a3b      	ldr	r3, [r7, #32]
 8007740:	015b      	lsls	r3, r3, #5
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	4619      	mov	r1, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7ff fb4b 	bl	8006de2 <dir_sdi>
 800774c:	4603      	mov	r3, r0
 800774e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007752:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007756:	2b00      	cmp	r3, #0
 8007758:	d132      	bne.n	80077c0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	3324      	adds	r3, #36	@ 0x24
 800775e:	4618      	mov	r0, r3
 8007760:	f7ff fe8a 	bl	8007478 <sum_sfn>
 8007764:	4603      	mov	r3, r0
 8007766:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	69db      	ldr	r3, [r3, #28]
 800776c:	4619      	mov	r1, r3
 800776e:	69f8      	ldr	r0, [r7, #28]
 8007770:	f7fe ff58 	bl	8006624 <move_window>
 8007774:	4603      	mov	r3, r0
 8007776:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800777a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800777e:	2b00      	cmp	r3, #0
 8007780:	d11d      	bne.n	80077be <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	6918      	ldr	r0, [r3, #16]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a19      	ldr	r1, [r3, #32]
 800778a:	6a3b      	ldr	r3, [r7, #32]
 800778c:	b2da      	uxtb	r2, r3
 800778e:	7efb      	ldrb	r3, [r7, #27]
 8007790:	f7ff fd7c 	bl	800728c <put_lfn>
				fs->wflag = 1;
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	2201      	movs	r2, #1
 8007798:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800779a:	2100      	movs	r1, #0
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f7ff fba9 	bl	8006ef4 <dir_next>
 80077a2:	4603      	mov	r3, r0
 80077a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80077a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d107      	bne.n	80077c0 <dir_register+0x184>
 80077b0:	6a3b      	ldr	r3, [r7, #32]
 80077b2:	3b01      	subs	r3, #1
 80077b4:	623b      	str	r3, [r7, #32]
 80077b6:	6a3b      	ldr	r3, [r7, #32]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1d5      	bne.n	8007768 <dir_register+0x12c>
 80077bc:	e000      	b.n	80077c0 <dir_register+0x184>
				if (res != FR_OK) break;
 80077be:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80077c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d128      	bne.n	800781a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	69db      	ldr	r3, [r3, #28]
 80077cc:	4619      	mov	r1, r3
 80077ce:	69f8      	ldr	r0, [r7, #28]
 80077d0:	f7fe ff28 	bl	8006624 <move_window>
 80077d4:	4603      	mov	r3, r0
 80077d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80077da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d11b      	bne.n	800781a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	2220      	movs	r2, #32
 80077e8:	2100      	movs	r1, #0
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7fe fcdb 	bl	80061a6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a18      	ldr	r0, [r3, #32]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	3324      	adds	r3, #36	@ 0x24
 80077f8:	220b      	movs	r2, #11
 80077fa:	4619      	mov	r1, r3
 80077fc:	f7fe fcb2 	bl	8006164 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	330c      	adds	r3, #12
 800780c:	f002 0218 	and.w	r2, r2, #24
 8007810:	b2d2      	uxtb	r2, r2
 8007812:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	2201      	movs	r2, #1
 8007818:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800781a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800781e:	4618      	mov	r0, r3
 8007820:	3730      	adds	r7, #48	@ 0x30
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	4ec4ec4f 	.word	0x4ec4ec4f

0800782c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b08a      	sub	sp, #40	@ 0x28
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	613b      	str	r3, [r7, #16]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	60fb      	str	r3, [r7, #12]
 8007844:	2300      	movs	r3, #0
 8007846:	617b      	str	r3, [r7, #20]
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	1c5a      	adds	r2, r3, #1
 8007850:	61ba      	str	r2, [r7, #24]
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	4413      	add	r3, r2
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800785a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800785c:	2b1f      	cmp	r3, #31
 800785e:	d940      	bls.n	80078e2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007860:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007862:	2b2f      	cmp	r3, #47	@ 0x2f
 8007864:	d006      	beq.n	8007874 <create_name+0x48>
 8007866:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007868:	2b5c      	cmp	r3, #92	@ 0x5c
 800786a:	d110      	bne.n	800788e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800786c:	e002      	b.n	8007874 <create_name+0x48>
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	3301      	adds	r3, #1
 8007872:	61bb      	str	r3, [r7, #24]
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	4413      	add	r3, r2
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	2b2f      	cmp	r3, #47	@ 0x2f
 800787e:	d0f6      	beq.n	800786e <create_name+0x42>
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	4413      	add	r3, r2
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	2b5c      	cmp	r3, #92	@ 0x5c
 800788a:	d0f0      	beq.n	800786e <create_name+0x42>
			break;
 800788c:	e02a      	b.n	80078e4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	2bfe      	cmp	r3, #254	@ 0xfe
 8007892:	d901      	bls.n	8007898 <create_name+0x6c>
 8007894:	2306      	movs	r3, #6
 8007896:	e17d      	b.n	8007b94 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007898:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800789a:	b2db      	uxtb	r3, r3
 800789c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800789e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80078a0:	2101      	movs	r1, #1
 80078a2:	4618      	mov	r0, r3
 80078a4:	f001 fa7a 	bl	8008d9c <ff_convert>
 80078a8:	4603      	mov	r3, r0
 80078aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80078ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <create_name+0x8a>
 80078b2:	2306      	movs	r3, #6
 80078b4:	e16e      	b.n	8007b94 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80078b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80078b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80078ba:	d809      	bhi.n	80078d0 <create_name+0xa4>
 80078bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80078be:	4619      	mov	r1, r3
 80078c0:	488d      	ldr	r0, [pc, #564]	@ (8007af8 <create_name+0x2cc>)
 80078c2:	f7fe fcb2 	bl	800622a <chk_chr>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d001      	beq.n	80078d0 <create_name+0xa4>
 80078cc:	2306      	movs	r3, #6
 80078ce:	e161      	b.n	8007b94 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	1c5a      	adds	r2, r3, #1
 80078d4:	617a      	str	r2, [r7, #20]
 80078d6:	005b      	lsls	r3, r3, #1
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	4413      	add	r3, r2
 80078dc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80078de:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80078e0:	e7b4      	b.n	800784c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80078e2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	441a      	add	r2, r3
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80078ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80078f0:	2b1f      	cmp	r3, #31
 80078f2:	d801      	bhi.n	80078f8 <create_name+0xcc>
 80078f4:	2304      	movs	r3, #4
 80078f6:	e000      	b.n	80078fa <create_name+0xce>
 80078f8:	2300      	movs	r3, #0
 80078fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80078fe:	e011      	b.n	8007924 <create_name+0xf8>
		w = lfn[di - 1];
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007906:	3b01      	subs	r3, #1
 8007908:	005b      	lsls	r3, r3, #1
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	4413      	add	r3, r2
 800790e:	881b      	ldrh	r3, [r3, #0]
 8007910:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8007912:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007914:	2b20      	cmp	r3, #32
 8007916:	d002      	beq.n	800791e <create_name+0xf2>
 8007918:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800791a:	2b2e      	cmp	r3, #46	@ 0x2e
 800791c:	d106      	bne.n	800792c <create_name+0x100>
		di--;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	3b01      	subs	r3, #1
 8007922:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1ea      	bne.n	8007900 <create_name+0xd4>
 800792a:	e000      	b.n	800792e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800792c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	005b      	lsls	r3, r3, #1
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	4413      	add	r3, r2
 8007936:	2200      	movs	r2, #0
 8007938:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d101      	bne.n	8007944 <create_name+0x118>
 8007940:	2306      	movs	r3, #6
 8007942:	e127      	b.n	8007b94 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	3324      	adds	r3, #36	@ 0x24
 8007948:	220b      	movs	r2, #11
 800794a:	2120      	movs	r1, #32
 800794c:	4618      	mov	r0, r3
 800794e:	f7fe fc2a 	bl	80061a6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007952:	2300      	movs	r3, #0
 8007954:	61bb      	str	r3, [r7, #24]
 8007956:	e002      	b.n	800795e <create_name+0x132>
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	3301      	adds	r3, #1
 800795c:	61bb      	str	r3, [r7, #24]
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	005b      	lsls	r3, r3, #1
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	4413      	add	r3, r2
 8007966:	881b      	ldrh	r3, [r3, #0]
 8007968:	2b20      	cmp	r3, #32
 800796a:	d0f5      	beq.n	8007958 <create_name+0x12c>
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	005b      	lsls	r3, r3, #1
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	4413      	add	r3, r2
 8007974:	881b      	ldrh	r3, [r3, #0]
 8007976:	2b2e      	cmp	r3, #46	@ 0x2e
 8007978:	d0ee      	beq.n	8007958 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d009      	beq.n	8007994 <create_name+0x168>
 8007980:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007984:	f043 0303 	orr.w	r3, r3, #3
 8007988:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800798c:	e002      	b.n	8007994 <create_name+0x168>
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	3b01      	subs	r3, #1
 8007992:	617b      	str	r3, [r7, #20]
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d009      	beq.n	80079ae <create_name+0x182>
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80079a0:	3b01      	subs	r3, #1
 80079a2:	005b      	lsls	r3, r3, #1
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	4413      	add	r3, r2
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80079ac:	d1ef      	bne.n	800798e <create_name+0x162>

	i = b = 0; ni = 8;
 80079ae:	2300      	movs	r3, #0
 80079b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80079b4:	2300      	movs	r3, #0
 80079b6:	623b      	str	r3, [r7, #32]
 80079b8:	2308      	movs	r3, #8
 80079ba:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	61ba      	str	r2, [r7, #24]
 80079c2:	005b      	lsls	r3, r3, #1
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	4413      	add	r3, r2
 80079c8:	881b      	ldrh	r3, [r3, #0]
 80079ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80079cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 8090 	beq.w	8007af4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80079d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80079d6:	2b20      	cmp	r3, #32
 80079d8:	d006      	beq.n	80079e8 <create_name+0x1bc>
 80079da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80079dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80079de:	d10a      	bne.n	80079f6 <create_name+0x1ca>
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d006      	beq.n	80079f6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80079e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079ec:	f043 0303 	orr.w	r3, r3, #3
 80079f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80079f4:	e07d      	b.n	8007af2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80079f6:	6a3a      	ldr	r2, [r7, #32]
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d203      	bcs.n	8007a06 <create_name+0x1da>
 80079fe:	69ba      	ldr	r2, [r7, #24]
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d123      	bne.n	8007a4e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	2b0b      	cmp	r3, #11
 8007a0a:	d106      	bne.n	8007a1a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a10:	f043 0303 	orr.w	r3, r3, #3
 8007a14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007a18:	e075      	b.n	8007b06 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d005      	beq.n	8007a2e <create_name+0x202>
 8007a22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a26:	f043 0303 	orr.w	r3, r3, #3
 8007a2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8007a2e:	69ba      	ldr	r2, [r7, #24]
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d866      	bhi.n	8007b04 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	61bb      	str	r3, [r7, #24]
 8007a3a:	2308      	movs	r3, #8
 8007a3c:	623b      	str	r3, [r7, #32]
 8007a3e:	230b      	movs	r3, #11
 8007a40:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007a42:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007a4c:	e051      	b.n	8007af2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007a4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a50:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a52:	d914      	bls.n	8007a7e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007a54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a56:	2100      	movs	r1, #0
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f001 f99f 	bl	8008d9c <ff_convert>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007a62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d004      	beq.n	8007a72 <create_name+0x246>
 8007a68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a6a:	3b80      	subs	r3, #128	@ 0x80
 8007a6c:	4a23      	ldr	r2, [pc, #140]	@ (8007afc <create_name+0x2d0>)
 8007a6e:	5cd3      	ldrb	r3, [r2, r3]
 8007a70:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007a72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a76:	f043 0302 	orr.w	r3, r3, #2
 8007a7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007a7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d007      	beq.n	8007a94 <create_name+0x268>
 8007a84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a86:	4619      	mov	r1, r3
 8007a88:	481d      	ldr	r0, [pc, #116]	@ (8007b00 <create_name+0x2d4>)
 8007a8a:	f7fe fbce 	bl	800622a <chk_chr>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d008      	beq.n	8007aa6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007a94:	235f      	movs	r3, #95	@ 0x5f
 8007a96:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007a98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a9c:	f043 0303 	orr.w	r3, r3, #3
 8007aa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007aa4:	e01b      	b.n	8007ade <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007aa6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007aa8:	2b40      	cmp	r3, #64	@ 0x40
 8007aaa:	d909      	bls.n	8007ac0 <create_name+0x294>
 8007aac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007aae:	2b5a      	cmp	r3, #90	@ 0x5a
 8007ab0:	d806      	bhi.n	8007ac0 <create_name+0x294>
					b |= 2;
 8007ab2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007ab6:	f043 0302 	orr.w	r3, r3, #2
 8007aba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007abe:	e00e      	b.n	8007ade <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007ac0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ac2:	2b60      	cmp	r3, #96	@ 0x60
 8007ac4:	d90b      	bls.n	8007ade <create_name+0x2b2>
 8007ac6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ac8:	2b7a      	cmp	r3, #122	@ 0x7a
 8007aca:	d808      	bhi.n	8007ade <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007acc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007ad0:	f043 0301 	orr.w	r3, r3, #1
 8007ad4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007ad8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ada:	3b20      	subs	r3, #32
 8007adc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	1c5a      	adds	r2, r3, #1
 8007ae2:	623a      	str	r2, [r7, #32]
 8007ae4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007ae6:	b2d1      	uxtb	r1, r2
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	4413      	add	r3, r2
 8007aec:	460a      	mov	r2, r1
 8007aee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007af2:	e763      	b.n	80079bc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007af4:	bf00      	nop
 8007af6:	e006      	b.n	8007b06 <create_name+0x2da>
 8007af8:	0800c164 	.word	0x0800c164
 8007afc:	0800c1d4 	.word	0x0800c1d4
 8007b00:	0800c170 	.word	0x0800c170
			if (si > di) break;			/* No extension */
 8007b04:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007b0c:	2be5      	cmp	r3, #229	@ 0xe5
 8007b0e:	d103      	bne.n	8007b18 <create_name+0x2ec>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2205      	movs	r2, #5
 8007b14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	2b08      	cmp	r3, #8
 8007b1c:	d104      	bne.n	8007b28 <create_name+0x2fc>
 8007b1e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007b28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b2c:	f003 030c 	and.w	r3, r3, #12
 8007b30:	2b0c      	cmp	r3, #12
 8007b32:	d005      	beq.n	8007b40 <create_name+0x314>
 8007b34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b38:	f003 0303 	and.w	r3, r3, #3
 8007b3c:	2b03      	cmp	r3, #3
 8007b3e:	d105      	bne.n	8007b4c <create_name+0x320>
 8007b40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b44:	f043 0302 	orr.w	r3, r3, #2
 8007b48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b50:	f003 0302 	and.w	r3, r3, #2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d117      	bne.n	8007b88 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007b58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b5c:	f003 0303 	and.w	r3, r3, #3
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d105      	bne.n	8007b70 <create_name+0x344>
 8007b64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b68:	f043 0310 	orr.w	r3, r3, #16
 8007b6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007b70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b74:	f003 030c 	and.w	r3, r3, #12
 8007b78:	2b04      	cmp	r3, #4
 8007b7a:	d105      	bne.n	8007b88 <create_name+0x35c>
 8007b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b80:	f043 0308 	orr.w	r3, r3, #8
 8007b84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007b8e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8007b92:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3728      	adds	r7, #40	@ 0x28
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007bb0:	e002      	b.n	8007bb8 <follow_path+0x1c>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	603b      	str	r3, [r7, #0]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	2b2f      	cmp	r3, #47	@ 0x2f
 8007bbe:	d0f8      	beq.n	8007bb2 <follow_path+0x16>
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	2b5c      	cmp	r3, #92	@ 0x5c
 8007bc6:	d0f4      	beq.n	8007bb2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	2b1f      	cmp	r3, #31
 8007bd4:	d80a      	bhi.n	8007bec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2280      	movs	r2, #128	@ 0x80
 8007bda:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007bde:	2100      	movs	r1, #0
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7ff f8fe 	bl	8006de2 <dir_sdi>
 8007be6:	4603      	mov	r3, r0
 8007be8:	75fb      	strb	r3, [r7, #23]
 8007bea:	e048      	b.n	8007c7e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007bec:	463b      	mov	r3, r7
 8007bee:	4619      	mov	r1, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f7ff fe1b 	bl	800782c <create_name>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007bfa:	7dfb      	ldrb	r3, [r7, #23]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d139      	bne.n	8007c74 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7ff fc5a 	bl	80074ba <dir_find>
 8007c06:	4603      	mov	r3, r0
 8007c08:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007c10:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007c12:	7dfb      	ldrb	r3, [r7, #23]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00a      	beq.n	8007c2e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
 8007c1a:	2b04      	cmp	r3, #4
 8007c1c:	d12c      	bne.n	8007c78 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007c1e:	7afb      	ldrb	r3, [r7, #11]
 8007c20:	f003 0304 	and.w	r3, r3, #4
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d127      	bne.n	8007c78 <follow_path+0xdc>
 8007c28:	2305      	movs	r3, #5
 8007c2a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007c2c:	e024      	b.n	8007c78 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007c2e:	7afb      	ldrb	r3, [r7, #11]
 8007c30:	f003 0304 	and.w	r3, r3, #4
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d121      	bne.n	8007c7c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	799b      	ldrb	r3, [r3, #6]
 8007c3c:	f003 0310 	and.w	r3, r3, #16
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d102      	bne.n	8007c4a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007c44:	2305      	movs	r3, #5
 8007c46:	75fb      	strb	r3, [r7, #23]
 8007c48:	e019      	b.n	8007c7e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	8992      	ldrh	r2, [r2, #12]
 8007c58:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c5c:	fb00 f202 	mul.w	r2, r0, r2
 8007c60:	1a9b      	subs	r3, r3, r2
 8007c62:	440b      	add	r3, r1
 8007c64:	4619      	mov	r1, r3
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f7ff fa61 	bl	800712e <ld_clust>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007c72:	e7bb      	b.n	8007bec <follow_path+0x50>
			if (res != FR_OK) break;
 8007c74:	bf00      	nop
 8007c76:	e002      	b.n	8007c7e <follow_path+0xe2>
				break;
 8007c78:	bf00      	nop
 8007c7a:	e000      	b.n	8007c7e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007c7c:	bf00      	nop
			}
		}
	}

	return res;
 8007c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3718      	adds	r7, #24
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b087      	sub	sp, #28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007c90:	f04f 33ff 	mov.w	r3, #4294967295
 8007c94:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d031      	beq.n	8007d02 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	617b      	str	r3, [r7, #20]
 8007ca4:	e002      	b.n	8007cac <get_ldnumber+0x24>
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	617b      	str	r3, [r7, #20]
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	2b1f      	cmp	r3, #31
 8007cb2:	d903      	bls.n	8007cbc <get_ldnumber+0x34>
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	2b3a      	cmp	r3, #58	@ 0x3a
 8007cba:	d1f4      	bne.n	8007ca6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	2b3a      	cmp	r3, #58	@ 0x3a
 8007cc2:	d11c      	bne.n	8007cfe <get_ldnumber+0x76>
			tp = *path;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	1c5a      	adds	r2, r3, #1
 8007cce:	60fa      	str	r2, [r7, #12]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	3b30      	subs	r3, #48	@ 0x30
 8007cd4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2b09      	cmp	r3, #9
 8007cda:	d80e      	bhi.n	8007cfa <get_ldnumber+0x72>
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d10a      	bne.n	8007cfa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d107      	bne.n	8007cfa <get_ldnumber+0x72>
					vol = (int)i;
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	617b      	str	r3, [r7, #20]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	e002      	b.n	8007d04 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007cfe:	2300      	movs	r3, #0
 8007d00:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007d02:	693b      	ldr	r3, [r7, #16]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	371c      	adds	r7, #28
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	70da      	strb	r2, [r3, #3]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f04f 32ff 	mov.w	r2, #4294967295
 8007d26:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7fe fc7a 	bl	8006624 <move_window>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <check_fs+0x2a>
 8007d36:	2304      	movs	r3, #4
 8007d38:	e038      	b.n	8007dac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	333c      	adds	r3, #60	@ 0x3c
 8007d3e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fe f98c 	bl	8006060 <ld_word>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d001      	beq.n	8007d58 <check_fs+0x48>
 8007d54:	2303      	movs	r3, #3
 8007d56:	e029      	b.n	8007dac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d5e:	2be9      	cmp	r3, #233	@ 0xe9
 8007d60:	d009      	beq.n	8007d76 <check_fs+0x66>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d68:	2beb      	cmp	r3, #235	@ 0xeb
 8007d6a:	d11e      	bne.n	8007daa <check_fs+0x9a>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d72:	2b90      	cmp	r3, #144	@ 0x90
 8007d74:	d119      	bne.n	8007daa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	333c      	adds	r3, #60	@ 0x3c
 8007d7a:	3336      	adds	r3, #54	@ 0x36
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fe f987 	bl	8006090 <ld_dword>
 8007d82:	4603      	mov	r3, r0
 8007d84:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007d88:	4a0a      	ldr	r2, [pc, #40]	@ (8007db4 <check_fs+0xa4>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d101      	bne.n	8007d92 <check_fs+0x82>
 8007d8e:	2300      	movs	r3, #0
 8007d90:	e00c      	b.n	8007dac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	333c      	adds	r3, #60	@ 0x3c
 8007d96:	3352      	adds	r3, #82	@ 0x52
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7fe f979 	bl	8006090 <ld_dword>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	4a05      	ldr	r2, [pc, #20]	@ (8007db8 <check_fs+0xa8>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d101      	bne.n	8007daa <check_fs+0x9a>
 8007da6:	2300      	movs	r3, #0
 8007da8:	e000      	b.n	8007dac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007daa:	2302      	movs	r3, #2
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	00544146 	.word	0x00544146
 8007db8:	33544146 	.word	0x33544146

08007dbc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b096      	sub	sp, #88	@ 0x58
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f7ff ff59 	bl	8007c88 <get_ldnumber>
 8007dd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	da01      	bge.n	8007de2 <find_volume+0x26>
 8007dde:	230b      	movs	r3, #11
 8007de0:	e26a      	b.n	80082b8 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007de2:	4aa3      	ldr	r2, [pc, #652]	@ (8008070 <find_volume+0x2b4>)
 8007de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dea:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <find_volume+0x3a>
 8007df2:	230c      	movs	r3, #12
 8007df4:	e260      	b.n	80082b8 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 8007df6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007df8:	f7fe fa32 	bl	8006260 <lock_fs>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d101      	bne.n	8007e06 <find_volume+0x4a>
 8007e02:	230f      	movs	r3, #15
 8007e04:	e258      	b.n	80082b8 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e0a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007e0c:	79fb      	ldrb	r3, [r7, #7]
 8007e0e:	f023 0301 	bic.w	r3, r3, #1
 8007e12:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d01a      	beq.n	8007e52 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8007e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e1e:	785b      	ldrb	r3, [r3, #1]
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7fe f87d 	bl	8005f20 <disk_status>
 8007e26:	4603      	mov	r3, r0
 8007e28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007e2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007e30:	f003 0301 	and.w	r3, r3, #1
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10c      	bne.n	8007e52 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007e38:	79fb      	ldrb	r3, [r7, #7]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d007      	beq.n	8007e4e <find_volume+0x92>
 8007e3e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007e42:	f003 0304 	and.w	r3, r3, #4
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d001      	beq.n	8007e4e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8007e4a:	230a      	movs	r3, #10
 8007e4c:	e234      	b.n	80082b8 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 8007e4e:	2300      	movs	r3, #0
 8007e50:	e232      	b.n	80082b8 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e54:	2200      	movs	r2, #0
 8007e56:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e5a:	b2da      	uxtb	r2, r3
 8007e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e5e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e62:	785b      	ldrb	r3, [r3, #1]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7fe f875 	bl	8005f54 <disk_initialize>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007e70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e21b      	b.n	80082b8 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007e80:	79fb      	ldrb	r3, [r7, #7]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d007      	beq.n	8007e96 <find_volume+0xda>
 8007e86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007e8a:	f003 0304 	and.w	r3, r3, #4
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8007e92:	230a      	movs	r3, #10
 8007e94:	e210      	b.n	80082b8 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e98:	7858      	ldrb	r0, [r3, #1]
 8007e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e9c:	330c      	adds	r3, #12
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	2102      	movs	r1, #2
 8007ea2:	f7fe f8bf 	bl	8006024 <disk_ioctl>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d001      	beq.n	8007eb0 <find_volume+0xf4>
 8007eac:	2301      	movs	r3, #1
 8007eae:	e203      	b.n	80082b8 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb2:	899b      	ldrh	r3, [r3, #12]
 8007eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eb8:	d80d      	bhi.n	8007ed6 <find_volume+0x11a>
 8007eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ebc:	899b      	ldrh	r3, [r3, #12]
 8007ebe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ec2:	d308      	bcc.n	8007ed6 <find_volume+0x11a>
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec6:	899b      	ldrh	r3, [r3, #12]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ecc:	899b      	ldrh	r3, [r3, #12]
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <find_volume+0x11e>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e1ee      	b.n	80082b8 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007ede:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007ee0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007ee2:	f7ff ff15 	bl	8007d10 <check_fs>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007eec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d149      	bne.n	8007f88 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ef8:	e01e      	b.n	8007f38 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007efc:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8007f00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f02:	011b      	lsls	r3, r3, #4
 8007f04:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007f08:	4413      	add	r3, r2
 8007f0a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0e:	3304      	adds	r3, #4
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d006      	beq.n	8007f24 <find_volume+0x168>
 8007f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f18:	3308      	adds	r3, #8
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fe f8b8 	bl	8006090 <ld_dword>
 8007f20:	4602      	mov	r2, r0
 8007f22:	e000      	b.n	8007f26 <find_volume+0x16a>
 8007f24:	2200      	movs	r2, #0
 8007f26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	3358      	adds	r3, #88	@ 0x58
 8007f2c:	443b      	add	r3, r7
 8007f2e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007f32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f34:	3301      	adds	r3, #1
 8007f36:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f3a:	2b03      	cmp	r3, #3
 8007f3c:	d9dd      	bls.n	8007efa <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007f3e:	2300      	movs	r3, #0
 8007f40:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007f42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d002      	beq.n	8007f4e <find_volume+0x192>
 8007f48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	3358      	adds	r3, #88	@ 0x58
 8007f54:	443b      	add	r3, r7
 8007f56:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007f5a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007f5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d005      	beq.n	8007f6e <find_volume+0x1b2>
 8007f62:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007f64:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007f66:	f7ff fed3 	bl	8007d10 <check_fs>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	e000      	b.n	8007f70 <find_volume+0x1b4>
 8007f6e:	2303      	movs	r3, #3
 8007f70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007f74:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d905      	bls.n	8007f88 <find_volume+0x1cc>
 8007f7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f7e:	3301      	adds	r3, #1
 8007f80:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d9e2      	bls.n	8007f4e <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007f88:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007f8c:	2b04      	cmp	r3, #4
 8007f8e:	d101      	bne.n	8007f94 <find_volume+0x1d8>
 8007f90:	2301      	movs	r3, #1
 8007f92:	e191      	b.n	80082b8 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007f94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d901      	bls.n	8007fa0 <find_volume+0x1e4>
 8007f9c:	230d      	movs	r3, #13
 8007f9e:	e18b      	b.n	80082b8 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa2:	333c      	adds	r3, #60	@ 0x3c
 8007fa4:	330b      	adds	r3, #11
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe f85a 	bl	8006060 <ld_word>
 8007fac:	4603      	mov	r3, r0
 8007fae:	461a      	mov	r2, r3
 8007fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb2:	899b      	ldrh	r3, [r3, #12]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d001      	beq.n	8007fbc <find_volume+0x200>
 8007fb8:	230d      	movs	r3, #13
 8007fba:	e17d      	b.n	80082b8 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fbe:	333c      	adds	r3, #60	@ 0x3c
 8007fc0:	3316      	adds	r3, #22
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fe f84c 	bl	8006060 <ld_word>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007fcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d106      	bne.n	8007fe0 <find_volume+0x224>
 8007fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd4:	333c      	adds	r3, #60	@ 0x3c
 8007fd6:	3324      	adds	r3, #36	@ 0x24
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7fe f859 	bl	8006090 <ld_dword>
 8007fde:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007fe4:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe8:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8007fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff2:	789b      	ldrb	r3, [r3, #2]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d005      	beq.n	8008004 <find_volume+0x248>
 8007ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ffa:	789b      	ldrb	r3, [r3, #2]
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d001      	beq.n	8008004 <find_volume+0x248>
 8008000:	230d      	movs	r3, #13
 8008002:	e159      	b.n	80082b8 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008006:	789b      	ldrb	r3, [r3, #2]
 8008008:	461a      	mov	r2, r3
 800800a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800800c:	fb02 f303 	mul.w	r3, r2, r3
 8008010:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008014:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8008018:	461a      	mov	r2, r3
 800801a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800801c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800801e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008020:	895b      	ldrh	r3, [r3, #10]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d008      	beq.n	8008038 <find_volume+0x27c>
 8008026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008028:	895b      	ldrh	r3, [r3, #10]
 800802a:	461a      	mov	r2, r3
 800802c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800802e:	895b      	ldrh	r3, [r3, #10]
 8008030:	3b01      	subs	r3, #1
 8008032:	4013      	ands	r3, r2
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <find_volume+0x280>
 8008038:	230d      	movs	r3, #13
 800803a:	e13d      	b.n	80082b8 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800803c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803e:	333c      	adds	r3, #60	@ 0x3c
 8008040:	3311      	adds	r3, #17
 8008042:	4618      	mov	r0, r3
 8008044:	f7fe f80c 	bl	8006060 <ld_word>
 8008048:	4603      	mov	r3, r0
 800804a:	461a      	mov	r2, r3
 800804c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800804e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008052:	891b      	ldrh	r3, [r3, #8]
 8008054:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008056:	8992      	ldrh	r2, [r2, #12]
 8008058:	0952      	lsrs	r2, r2, #5
 800805a:	b292      	uxth	r2, r2
 800805c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008060:	fb01 f202 	mul.w	r2, r1, r2
 8008064:	1a9b      	subs	r3, r3, r2
 8008066:	b29b      	uxth	r3, r3
 8008068:	2b00      	cmp	r3, #0
 800806a:	d003      	beq.n	8008074 <find_volume+0x2b8>
 800806c:	230d      	movs	r3, #13
 800806e:	e123      	b.n	80082b8 <find_volume+0x4fc>
 8008070:	200025cc 	.word	0x200025cc

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008076:	333c      	adds	r3, #60	@ 0x3c
 8008078:	3313      	adds	r3, #19
 800807a:	4618      	mov	r0, r3
 800807c:	f7fd fff0 	bl	8006060 <ld_word>
 8008080:	4603      	mov	r3, r0
 8008082:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008086:	2b00      	cmp	r3, #0
 8008088:	d106      	bne.n	8008098 <find_volume+0x2dc>
 800808a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800808c:	333c      	adds	r3, #60	@ 0x3c
 800808e:	3320      	adds	r3, #32
 8008090:	4618      	mov	r0, r3
 8008092:	f7fd fffd 	bl	8006090 <ld_dword>
 8008096:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800809a:	333c      	adds	r3, #60	@ 0x3c
 800809c:	330e      	adds	r3, #14
 800809e:	4618      	mov	r0, r3
 80080a0:	f7fd ffde 	bl	8006060 <ld_word>
 80080a4:	4603      	mov	r3, r0
 80080a6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80080a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <find_volume+0x2f6>
 80080ae:	230d      	movs	r3, #13
 80080b0:	e102      	b.n	80082b8 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80080b2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80080b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080b6:	4413      	add	r3, r2
 80080b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080ba:	8911      	ldrh	r1, [r2, #8]
 80080bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080be:	8992      	ldrh	r2, [r2, #12]
 80080c0:	0952      	lsrs	r2, r2, #5
 80080c2:	b292      	uxth	r2, r2
 80080c4:	fbb1 f2f2 	udiv	r2, r1, r2
 80080c8:	b292      	uxth	r2, r2
 80080ca:	4413      	add	r3, r2
 80080cc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80080ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d201      	bcs.n	80080da <find_volume+0x31e>
 80080d6:	230d      	movs	r3, #13
 80080d8:	e0ee      	b.n	80082b8 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80080da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080e2:	8952      	ldrh	r2, [r2, #10]
 80080e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80080e8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80080ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d101      	bne.n	80080f4 <find_volume+0x338>
 80080f0:	230d      	movs	r3, #13
 80080f2:	e0e1      	b.n	80082b8 <find_volume+0x4fc>
		fmt = FS_FAT32;
 80080f4:	2303      	movs	r3, #3
 80080f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80080fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008100:	4293      	cmp	r3, r2
 8008102:	d802      	bhi.n	800810a <find_volume+0x34e>
 8008104:	2302      	movs	r3, #2
 8008106:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800810a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008110:	4293      	cmp	r3, r2
 8008112:	d802      	bhi.n	800811a <find_volume+0x35e>
 8008114:	2301      	movs	r3, #1
 8008116:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800811a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811c:	1c9a      	adds	r2, r3, #2
 800811e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008120:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8008122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008124:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008126:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008128:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800812a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800812c:	441a      	add	r2, r3
 800812e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008130:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8008132:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008136:	441a      	add	r2, r3
 8008138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800813a:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 800813c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008140:	2b03      	cmp	r3, #3
 8008142:	d11e      	bne.n	8008182 <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008146:	333c      	adds	r3, #60	@ 0x3c
 8008148:	332a      	adds	r3, #42	@ 0x2a
 800814a:	4618      	mov	r0, r3
 800814c:	f7fd ff88 	bl	8006060 <ld_word>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <find_volume+0x39e>
 8008156:	230d      	movs	r3, #13
 8008158:	e0ae      	b.n	80082b8 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800815a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800815c:	891b      	ldrh	r3, [r3, #8]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <find_volume+0x3aa>
 8008162:	230d      	movs	r3, #13
 8008164:	e0a8      	b.n	80082b8 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008168:	333c      	adds	r3, #60	@ 0x3c
 800816a:	332c      	adds	r3, #44	@ 0x2c
 800816c:	4618      	mov	r0, r3
 800816e:	f7fd ff8f 	bl	8006090 <ld_dword>
 8008172:	4602      	mov	r2, r0
 8008174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008176:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800817a:	6a1b      	ldr	r3, [r3, #32]
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008180:	e01f      	b.n	80081c2 <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008184:	891b      	ldrh	r3, [r3, #8]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d101      	bne.n	800818e <find_volume+0x3d2>
 800818a:	230d      	movs	r3, #13
 800818c:	e094      	b.n	80082b8 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800818e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008194:	441a      	add	r2, r3
 8008196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008198:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800819a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d103      	bne.n	80081aa <find_volume+0x3ee>
 80081a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a4:	6a1b      	ldr	r3, [r3, #32]
 80081a6:	005b      	lsls	r3, r3, #1
 80081a8:	e00a      	b.n	80081c0 <find_volume+0x404>
 80081aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ac:	6a1a      	ldr	r2, [r3, #32]
 80081ae:	4613      	mov	r3, r2
 80081b0:	005b      	lsls	r3, r3, #1
 80081b2:	4413      	add	r3, r2
 80081b4:	085a      	lsrs	r2, r3, #1
 80081b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80081c0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80081c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c8:	899b      	ldrh	r3, [r3, #12]
 80081ca:	4619      	mov	r1, r3
 80081cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081ce:	440b      	add	r3, r1
 80081d0:	3b01      	subs	r3, #1
 80081d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80081d4:	8989      	ldrh	r1, [r1, #12]
 80081d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80081da:	429a      	cmp	r2, r3
 80081dc:	d201      	bcs.n	80081e2 <find_volume+0x426>
 80081de:	230d      	movs	r3, #13
 80081e0:	e06a      	b.n	80082b8 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80081e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e4:	f04f 32ff 	mov.w	r2, #4294967295
 80081e8:	61da      	str	r2, [r3, #28]
 80081ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ec:	69da      	ldr	r2, [r3, #28]
 80081ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 80081f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f4:	2280      	movs	r2, #128	@ 0x80
 80081f6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80081f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80081fc:	2b03      	cmp	r3, #3
 80081fe:	d149      	bne.n	8008294 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008202:	333c      	adds	r3, #60	@ 0x3c
 8008204:	3330      	adds	r3, #48	@ 0x30
 8008206:	4618      	mov	r0, r3
 8008208:	f7fd ff2a 	bl	8006060 <ld_word>
 800820c:	4603      	mov	r3, r0
 800820e:	2b01      	cmp	r3, #1
 8008210:	d140      	bne.n	8008294 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008212:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008214:	3301      	adds	r3, #1
 8008216:	4619      	mov	r1, r3
 8008218:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800821a:	f7fe fa03 	bl	8006624 <move_window>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d137      	bne.n	8008294 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 8008224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008226:	2200      	movs	r2, #0
 8008228:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800822a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800822c:	333c      	adds	r3, #60	@ 0x3c
 800822e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008232:	4618      	mov	r0, r3
 8008234:	f7fd ff14 	bl	8006060 <ld_word>
 8008238:	4603      	mov	r3, r0
 800823a:	461a      	mov	r2, r3
 800823c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008240:	429a      	cmp	r2, r3
 8008242:	d127      	bne.n	8008294 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008246:	333c      	adds	r3, #60	@ 0x3c
 8008248:	4618      	mov	r0, r3
 800824a:	f7fd ff21 	bl	8006090 <ld_dword>
 800824e:	4603      	mov	r3, r0
 8008250:	4a1b      	ldr	r2, [pc, #108]	@ (80082c0 <find_volume+0x504>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d11e      	bne.n	8008294 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008258:	333c      	adds	r3, #60	@ 0x3c
 800825a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800825e:	4618      	mov	r0, r3
 8008260:	f7fd ff16 	bl	8006090 <ld_dword>
 8008264:	4603      	mov	r3, r0
 8008266:	4a17      	ldr	r2, [pc, #92]	@ (80082c4 <find_volume+0x508>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d113      	bne.n	8008294 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800826c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800826e:	333c      	adds	r3, #60	@ 0x3c
 8008270:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008274:	4618      	mov	r0, r3
 8008276:	f7fd ff0b 	bl	8006090 <ld_dword>
 800827a:	4602      	mov	r2, r0
 800827c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800827e:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008282:	333c      	adds	r3, #60	@ 0x3c
 8008284:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008288:	4618      	mov	r0, r3
 800828a:	f7fd ff01 	bl	8006090 <ld_dword>
 800828e:	4602      	mov	r2, r0
 8008290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008292:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008296:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800829a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800829c:	4b0a      	ldr	r3, [pc, #40]	@ (80082c8 <find_volume+0x50c>)
 800829e:	881b      	ldrh	r3, [r3, #0]
 80082a0:	3301      	adds	r3, #1
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	4b08      	ldr	r3, [pc, #32]	@ (80082c8 <find_volume+0x50c>)
 80082a6:	801a      	strh	r2, [r3, #0]
 80082a8:	4b07      	ldr	r3, [pc, #28]	@ (80082c8 <find_volume+0x50c>)
 80082aa:	881a      	ldrh	r2, [r3, #0]
 80082ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ae:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80082b0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80082b2:	f7fe f94f 	bl	8006554 <clear_lock>
#endif
	return FR_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3758      	adds	r7, #88	@ 0x58
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	41615252 	.word	0x41615252
 80082c4:	61417272 	.word	0x61417272
 80082c8:	200025d0 	.word	0x200025d0

080082cc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80082d6:	2309      	movs	r3, #9
 80082d8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d02e      	beq.n	800833e <validate+0x72>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d02a      	beq.n	800833e <validate+0x72>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d025      	beq.n	800833e <validate+0x72>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	889a      	ldrh	r2, [r3, #4]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	88db      	ldrh	r3, [r3, #6]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d11e      	bne.n	800833e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4618      	mov	r0, r3
 8008306:	f7fd ffab 	bl	8006260 <lock_fs>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d014      	beq.n	800833a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	785b      	ldrb	r3, [r3, #1]
 8008316:	4618      	mov	r0, r3
 8008318:	f7fd fe02 	bl	8005f20 <disk_status>
 800831c:	4603      	mov	r3, r0
 800831e:	f003 0301 	and.w	r3, r3, #1
 8008322:	2b00      	cmp	r3, #0
 8008324:	d102      	bne.n	800832c <validate+0x60>
				res = FR_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	73fb      	strb	r3, [r7, #15]
 800832a:	e008      	b.n	800833e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2100      	movs	r1, #0
 8008332:	4618      	mov	r0, r3
 8008334:	f7fd ffaa 	bl	800628c <unlock_fs>
 8008338:	e001      	b.n	800833e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800833a:	230f      	movs	r3, #15
 800833c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800833e:	7bfb      	ldrb	r3, [r7, #15]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d102      	bne.n	800834a <validate+0x7e>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	e000      	b.n	800834c <validate+0x80>
 800834a:	2300      	movs	r3, #0
 800834c:	683a      	ldr	r2, [r7, #0]
 800834e:	6013      	str	r3, [r2, #0]
	return res;
 8008350:	7bfb      	ldrb	r3, [r7, #15]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
	...

0800835c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b088      	sub	sp, #32
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	4613      	mov	r3, r2
 8008368:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800836e:	f107 0310 	add.w	r3, r7, #16
 8008372:	4618      	mov	r0, r3
 8008374:	f7ff fc88 	bl	8007c88 <get_ldnumber>
 8008378:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	2b00      	cmp	r3, #0
 800837e:	da01      	bge.n	8008384 <f_mount+0x28>
 8008380:	230b      	movs	r3, #11
 8008382:	e048      	b.n	8008416 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008384:	4a26      	ldr	r2, [pc, #152]	@ (8008420 <f_mount+0xc4>)
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800838c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00f      	beq.n	80083b4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008394:	69b8      	ldr	r0, [r7, #24]
 8008396:	f7fe f8dd 	bl	8006554 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 fde2 	bl	8008f68 <ff_del_syncobj>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <f_mount+0x52>
 80083aa:	2302      	movs	r3, #2
 80083ac:	e033      	b.n	8008416 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	2200      	movs	r2, #0
 80083b2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00f      	beq.n	80083da <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	3314      	adds	r3, #20
 80083c8:	4619      	mov	r1, r3
 80083ca:	4610      	mov	r0, r2
 80083cc:	f000 fdac 	bl	8008f28 <ff_cre_syncobj>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d101      	bne.n	80083da <f_mount+0x7e>
 80083d6:	2302      	movs	r3, #2
 80083d8:	e01d      	b.n	8008416 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	4910      	ldr	r1, [pc, #64]	@ (8008420 <f_mount+0xc4>)
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d002      	beq.n	80083f0 <f_mount+0x94>
 80083ea:	79fb      	ldrb	r3, [r7, #7]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d001      	beq.n	80083f4 <f_mount+0x98>
 80083f0:	2300      	movs	r3, #0
 80083f2:	e010      	b.n	8008416 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80083f4:	f107 010c 	add.w	r1, r7, #12
 80083f8:	f107 0308 	add.w	r3, r7, #8
 80083fc:	2200      	movs	r2, #0
 80083fe:	4618      	mov	r0, r3
 8008400:	f7ff fcdc 	bl	8007dbc <find_volume>
 8008404:	4603      	mov	r3, r0
 8008406:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	7dfa      	ldrb	r2, [r7, #23]
 800840c:	4611      	mov	r1, r2
 800840e:	4618      	mov	r0, r3
 8008410:	f7fd ff3c 	bl	800628c <unlock_fs>
 8008414:	7dfb      	ldrb	r3, [r7, #23]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3720      	adds	r7, #32
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	200025cc 	.word	0x200025cc

08008424 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b09a      	sub	sp, #104	@ 0x68
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	4613      	mov	r3, r2
 8008430:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d101      	bne.n	800843c <f_open+0x18>
 8008438:	2309      	movs	r3, #9
 800843a:	e1d3      	b.n	80087e4 <f_open+0x3c0>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800843c:	79fb      	ldrb	r3, [r7, #7]
 800843e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008442:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008444:	79fa      	ldrb	r2, [r7, #7]
 8008446:	f107 0110 	add.w	r1, r7, #16
 800844a:	f107 0308 	add.w	r3, r7, #8
 800844e:	4618      	mov	r0, r3
 8008450:	f7ff fcb4 	bl	8007dbc <find_volume>
 8008454:	4603      	mov	r3, r0
 8008456:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800845a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800845e:	2b00      	cmp	r3, #0
 8008460:	f040 81b0 	bne.w	80087c4 <f_open+0x3a0>
		dj.obj.fs = fs;
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8008468:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800846c:	f000 fda8 	bl	8008fc0 <ff_memalloc>
 8008470:	65b8      	str	r0, [r7, #88]	@ 0x58
 8008472:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008474:	2b00      	cmp	r3, #0
 8008476:	d106      	bne.n	8008486 <f_open+0x62>
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	2111      	movs	r1, #17
 800847c:	4618      	mov	r0, r3
 800847e:	f7fd ff05 	bl	800628c <unlock_fs>
 8008482:	2311      	movs	r3, #17
 8008484:	e1ae      	b.n	80087e4 <f_open+0x3c0>
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800848a:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800848c:	68ba      	ldr	r2, [r7, #8]
 800848e:	f107 0314 	add.w	r3, r7, #20
 8008492:	4611      	mov	r1, r2
 8008494:	4618      	mov	r0, r3
 8008496:	f7ff fb81 	bl	8007b9c <follow_path>
 800849a:	4603      	mov	r3, r0
 800849c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80084a0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d118      	bne.n	80084da <f_open+0xb6>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80084a8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80084ac:	b25b      	sxtb	r3, r3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	da03      	bge.n	80084ba <f_open+0x96>
				res = FR_INVALID_NAME;
 80084b2:	2306      	movs	r3, #6
 80084b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80084b8:	e00f      	b.n	80084da <f_open+0xb6>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80084ba:	79fb      	ldrb	r3, [r7, #7]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	bf8c      	ite	hi
 80084c0:	2301      	movhi	r3, #1
 80084c2:	2300      	movls	r3, #0
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	461a      	mov	r2, r3
 80084c8:	f107 0314 	add.w	r3, r7, #20
 80084cc:	4611      	mov	r1, r2
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7fd fef8 	bl	80062c4 <chk_lock>
 80084d4:	4603      	mov	r3, r0
 80084d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80084da:	79fb      	ldrb	r3, [r7, #7]
 80084dc:	f003 031c 	and.w	r3, r3, #28
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d07f      	beq.n	80085e4 <f_open+0x1c0>
			if (res != FR_OK) {					/* No file, create new */
 80084e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d017      	beq.n	800851c <f_open+0xf8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80084ec:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80084f0:	2b04      	cmp	r3, #4
 80084f2:	d10e      	bne.n	8008512 <f_open+0xee>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80084f4:	f7fd ff42 	bl	800637c <enq_lock>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d006      	beq.n	800850c <f_open+0xe8>
 80084fe:	f107 0314 	add.w	r3, r7, #20
 8008502:	4618      	mov	r0, r3
 8008504:	f7ff f89a 	bl	800763c <dir_register>
 8008508:	4603      	mov	r3, r0
 800850a:	e000      	b.n	800850e <f_open+0xea>
 800850c:	2312      	movs	r3, #18
 800850e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008512:	79fb      	ldrb	r3, [r7, #7]
 8008514:	f043 0308 	orr.w	r3, r3, #8
 8008518:	71fb      	strb	r3, [r7, #7]
 800851a:	e010      	b.n	800853e <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800851c:	7ebb      	ldrb	r3, [r7, #26]
 800851e:	f003 0311 	and.w	r3, r3, #17
 8008522:	2b00      	cmp	r3, #0
 8008524:	d003      	beq.n	800852e <f_open+0x10a>
					res = FR_DENIED;
 8008526:	2307      	movs	r3, #7
 8008528:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800852c:	e007      	b.n	800853e <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800852e:	79fb      	ldrb	r3, [r7, #7]
 8008530:	f003 0304 	and.w	r3, r3, #4
 8008534:	2b00      	cmp	r3, #0
 8008536:	d002      	beq.n	800853e <f_open+0x11a>
 8008538:	2308      	movs	r3, #8
 800853a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800853e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008542:	2b00      	cmp	r3, #0
 8008544:	d168      	bne.n	8008618 <f_open+0x1f4>
 8008546:	79fb      	ldrb	r3, [r7, #7]
 8008548:	f003 0308 	and.w	r3, r3, #8
 800854c:	2b00      	cmp	r3, #0
 800854e:	d063      	beq.n	8008618 <f_open+0x1f4>
				dw = GET_FATTIME();
 8008550:	f7fd fc88 	bl	8005e64 <get_fattime>
 8008554:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008558:	330e      	adds	r3, #14
 800855a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800855c:	4618      	mov	r0, r3
 800855e:	f7fd fdd5 	bl	800610c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008564:	3316      	adds	r3, #22
 8008566:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008568:	4618      	mov	r0, r3
 800856a:	f7fd fdcf 	bl	800610c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800856e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008570:	330b      	adds	r3, #11
 8008572:	2220      	movs	r2, #32
 8008574:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800857a:	4611      	mov	r1, r2
 800857c:	4618      	mov	r0, r3
 800857e:	f7fe fdd6 	bl	800712e <ld_clust>
 8008582:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008588:	2200      	movs	r2, #0
 800858a:	4618      	mov	r0, r3
 800858c:	f7fe fdee 	bl	800716c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008592:	331c      	adds	r3, #28
 8008594:	2100      	movs	r1, #0
 8008596:	4618      	mov	r0, r3
 8008598:	f7fd fdb8 	bl	800610c <st_dword>
					fs->wflag = 1;
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	2201      	movs	r2, #1
 80085a0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80085a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d037      	beq.n	8008618 <f_open+0x1f4>
						dw = fs->winsect;
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085ac:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 80085ae:	f107 0314 	add.w	r3, r7, #20
 80085b2:	2200      	movs	r2, #0
 80085b4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fe fade 	bl	8006b78 <remove_chain>
 80085bc:	4603      	mov	r3, r0
 80085be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80085c2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d126      	bne.n	8008618 <f_open+0x1f4>
							res = move_window(fs, dw);
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fe f828 	bl	8006624 <move_window>
 80085d4:	4603      	mov	r3, r0
 80085d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80085de:	3a01      	subs	r2, #1
 80085e0:	619a      	str	r2, [r3, #24]
 80085e2:	e019      	b.n	8008618 <f_open+0x1f4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80085e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d115      	bne.n	8008618 <f_open+0x1f4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80085ec:	7ebb      	ldrb	r3, [r7, #26]
 80085ee:	f003 0310 	and.w	r3, r3, #16
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d003      	beq.n	80085fe <f_open+0x1da>
					res = FR_NO_FILE;
 80085f6:	2304      	movs	r3, #4
 80085f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80085fc:	e00c      	b.n	8008618 <f_open+0x1f4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80085fe:	79fb      	ldrb	r3, [r7, #7]
 8008600:	f003 0302 	and.w	r3, r3, #2
 8008604:	2b00      	cmp	r3, #0
 8008606:	d007      	beq.n	8008618 <f_open+0x1f4>
 8008608:	7ebb      	ldrb	r3, [r7, #26]
 800860a:	f003 0301 	and.w	r3, r3, #1
 800860e:	2b00      	cmp	r3, #0
 8008610:	d002      	beq.n	8008618 <f_open+0x1f4>
						res = FR_DENIED;
 8008612:	2307      	movs	r3, #7
 8008614:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008618:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800861c:	2b00      	cmp	r3, #0
 800861e:	d126      	bne.n	800866e <f_open+0x24a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008620:	79fb      	ldrb	r3, [r7, #7]
 8008622:	f003 0308 	and.w	r3, r3, #8
 8008626:	2b00      	cmp	r3, #0
 8008628:	d003      	beq.n	8008632 <f_open+0x20e>
				mode |= FA_MODIFIED;
 800862a:	79fb      	ldrb	r3, [r7, #7]
 800862c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008630:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800863a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008640:	79fb      	ldrb	r3, [r7, #7]
 8008642:	2b01      	cmp	r3, #1
 8008644:	bf8c      	ite	hi
 8008646:	2301      	movhi	r3, #1
 8008648:	2300      	movls	r3, #0
 800864a:	b2db      	uxtb	r3, r3
 800864c:	461a      	mov	r2, r3
 800864e:	f107 0314 	add.w	r3, r7, #20
 8008652:	4611      	mov	r1, r2
 8008654:	4618      	mov	r0, r3
 8008656:	f7fd feb3 	bl	80063c0 <inc_lock>
 800865a:	4602      	mov	r2, r0
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d102      	bne.n	800866e <f_open+0x24a>
 8008668:	2302      	movs	r3, #2
 800866a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800866e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008672:	2b00      	cmp	r3, #0
 8008674:	f040 80a3 	bne.w	80087be <f_open+0x39a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800867c:	4611      	mov	r1, r2
 800867e:	4618      	mov	r0, r3
 8008680:	f7fe fd55 	bl	800712e <ld_clust>
 8008684:	4602      	mov	r2, r0
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800868a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800868c:	331c      	adds	r3, #28
 800868e:	4618      	mov	r0, r3
 8008690:	f7fd fcfe 	bl	8006090 <ld_dword>
 8008694:	4602      	mov	r2, r0
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	88da      	ldrh	r2, [r3, #6]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	79fa      	ldrb	r2, [r7, #7]
 80086b2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2200      	movs	r2, #0
 80086b8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2200      	movs	r2, #0
 80086be:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	3330      	adds	r3, #48	@ 0x30
 80086ca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80086ce:	2100      	movs	r1, #0
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fd fd68 	bl	80061a6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80086d6:	79fb      	ldrb	r3, [r7, #7]
 80086d8:	f003 0320 	and.w	r3, r3, #32
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d06e      	beq.n	80087be <f_open+0x39a>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d06a      	beq.n	80087be <f_open+0x39a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	68da      	ldr	r2, [r3, #12]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	895b      	ldrh	r3, [r3, #10]
 80086f4:	461a      	mov	r2, r3
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	899b      	ldrh	r3, [r3, #12]
 80086fa:	fb02 f303 	mul.w	r3, r2, r3
 80086fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800870c:	e016      	b.n	800873c <f_open+0x318>
					clst = get_fat(&fp->obj, clst);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008712:	4618      	mov	r0, r3
 8008714:	f7fe f843 	bl	800679e <get_fat>
 8008718:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800871a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800871c:	2b01      	cmp	r3, #1
 800871e:	d802      	bhi.n	8008726 <f_open+0x302>
 8008720:	2302      	movs	r3, #2
 8008722:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008726:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800872c:	d102      	bne.n	8008734 <f_open+0x310>
 800872e:	2301      	movs	r3, #1
 8008730:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008734:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008736:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800873c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008740:	2b00      	cmp	r3, #0
 8008742:	d103      	bne.n	800874c <f_open+0x328>
 8008744:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008748:	429a      	cmp	r2, r3
 800874a:	d8e0      	bhi.n	800870e <f_open+0x2ea>
				}
				fp->clust = clst;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008750:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008752:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008756:	2b00      	cmp	r3, #0
 8008758:	d131      	bne.n	80087be <f_open+0x39a>
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	899b      	ldrh	r3, [r3, #12]
 800875e:	461a      	mov	r2, r3
 8008760:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008762:	fbb3 f1f2 	udiv	r1, r3, r2
 8008766:	fb01 f202 	mul.w	r2, r1, r2
 800876a:	1a9b      	subs	r3, r3, r2
 800876c:	2b00      	cmp	r3, #0
 800876e:	d026      	beq.n	80087be <f_open+0x39a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008774:	4618      	mov	r0, r3
 8008776:	f7fd fff3 	bl	8006760 <clust2sect>
 800877a:	64b8      	str	r0, [r7, #72]	@ 0x48
 800877c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800877e:	2b00      	cmp	r3, #0
 8008780:	d103      	bne.n	800878a <f_open+0x366>
						res = FR_INT_ERR;
 8008782:	2302      	movs	r3, #2
 8008784:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008788:	e019      	b.n	80087be <f_open+0x39a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	899b      	ldrh	r3, [r3, #12]
 800878e:	461a      	mov	r2, r3
 8008790:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008792:	fbb3 f2f2 	udiv	r2, r3, r2
 8008796:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008798:	441a      	add	r2, r3
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	7858      	ldrb	r0, [r3, #1]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6a1a      	ldr	r2, [r3, #32]
 80087ac:	2301      	movs	r3, #1
 80087ae:	f7fd fbf9 	bl	8005fa4 <disk_read>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d002      	beq.n	80087be <f_open+0x39a>
 80087b8:	2301      	movs	r3, #1
 80087ba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 80087be:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80087c0:	f000 fc0a 	bl	8008fd8 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80087c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d002      	beq.n	80087d2 <f_open+0x3ae>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80087d8:	4611      	mov	r1, r2
 80087da:	4618      	mov	r0, r3
 80087dc:	f7fd fd56 	bl	800628c <unlock_fs>
 80087e0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3768      	adds	r7, #104	@ 0x68
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b08c      	sub	sp, #48	@ 0x30
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	607a      	str	r2, [r7, #4]
 80087f8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2200      	movs	r2, #0
 8008802:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f107 0210 	add.w	r2, r7, #16
 800880a:	4611      	mov	r1, r2
 800880c:	4618      	mov	r0, r3
 800880e:	f7ff fd5d 	bl	80082cc <validate>
 8008812:	4603      	mov	r3, r0
 8008814:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008818:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800881c:	2b00      	cmp	r3, #0
 800881e:	d107      	bne.n	8008830 <f_write+0x44>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	7d5b      	ldrb	r3, [r3, #21]
 8008824:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008828:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800882c:	2b00      	cmp	r3, #0
 800882e:	d009      	beq.n	8008844 <f_write+0x58>
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8008836:	4611      	mov	r1, r2
 8008838:	4618      	mov	r0, r3
 800883a:	f7fd fd27 	bl	800628c <unlock_fs>
 800883e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008842:	e192      	b.n	8008b6a <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	7d1b      	ldrb	r3, [r3, #20]
 8008848:	f003 0302 	and.w	r3, r3, #2
 800884c:	2b00      	cmp	r3, #0
 800884e:	d106      	bne.n	800885e <f_write+0x72>
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	2107      	movs	r1, #7
 8008854:	4618      	mov	r0, r3
 8008856:	f7fd fd19 	bl	800628c <unlock_fs>
 800885a:	2307      	movs	r3, #7
 800885c:	e185      	b.n	8008b6a <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	699a      	ldr	r2, [r3, #24]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	441a      	add	r2, r3
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	429a      	cmp	r2, r3
 800886c:	f080 816a 	bcs.w	8008b44 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	699b      	ldr	r3, [r3, #24]
 8008874:	43db      	mvns	r3, r3
 8008876:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008878:	e164      	b.n	8008b44 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	699b      	ldr	r3, [r3, #24]
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	8992      	ldrh	r2, [r2, #12]
 8008882:	fbb3 f1f2 	udiv	r1, r3, r2
 8008886:	fb01 f202 	mul.w	r2, r1, r2
 800888a:	1a9b      	subs	r3, r3, r2
 800888c:	2b00      	cmp	r3, #0
 800888e:	f040 810f 	bne.w	8008ab0 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	699b      	ldr	r3, [r3, #24]
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	8992      	ldrh	r2, [r2, #12]
 800889a:	fbb3 f3f2 	udiv	r3, r3, r2
 800889e:	693a      	ldr	r2, [r7, #16]
 80088a0:	8952      	ldrh	r2, [r2, #10]
 80088a2:	3a01      	subs	r2, #1
 80088a4:	4013      	ands	r3, r2
 80088a6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d14d      	bne.n	800894a <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d10c      	bne.n	80088d0 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80088bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d11a      	bne.n	80088f8 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2100      	movs	r1, #0
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7fe f9bb 	bl	8006c42 <create_chain>
 80088cc:	62b8      	str	r0, [r7, #40]	@ 0x28
 80088ce:	e013      	b.n	80088f8 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d007      	beq.n	80088e8 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	4619      	mov	r1, r3
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f7fe fa47 	bl	8006d72 <clmt_clust>
 80088e4:	62b8      	str	r0, [r7, #40]	@ 0x28
 80088e6:	e007      	b.n	80088f8 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	69db      	ldr	r3, [r3, #28]
 80088ee:	4619      	mov	r1, r3
 80088f0:	4610      	mov	r0, r2
 80088f2:	f7fe f9a6 	bl	8006c42 <create_chain>
 80088f6:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80088f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f000 8127 	beq.w	8008b4e <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008902:	2b01      	cmp	r3, #1
 8008904:	d109      	bne.n	800891a <f_write+0x12e>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2202      	movs	r2, #2
 800890a:	755a      	strb	r2, [r3, #21]
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	2102      	movs	r1, #2
 8008910:	4618      	mov	r0, r3
 8008912:	f7fd fcbb 	bl	800628c <unlock_fs>
 8008916:	2302      	movs	r3, #2
 8008918:	e127      	b.n	8008b6a <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800891a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800891c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008920:	d109      	bne.n	8008936 <f_write+0x14a>
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2201      	movs	r2, #1
 8008926:	755a      	strb	r2, [r3, #21]
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	2101      	movs	r1, #1
 800892c:	4618      	mov	r0, r3
 800892e:	f7fd fcad 	bl	800628c <unlock_fs>
 8008932:	2301      	movs	r3, #1
 8008934:	e119      	b.n	8008b6a <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800893a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d102      	bne.n	800894a <f_write+0x15e>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008948:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	7d1b      	ldrb	r3, [r3, #20]
 800894e:	b25b      	sxtb	r3, r3
 8008950:	2b00      	cmp	r3, #0
 8008952:	da1d      	bge.n	8008990 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	7858      	ldrb	r0, [r3, #1]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6a1a      	ldr	r2, [r3, #32]
 8008962:	2301      	movs	r3, #1
 8008964:	f7fd fb3e 	bl	8005fe4 <disk_write>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d009      	beq.n	8008982 <f_write+0x196>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2201      	movs	r2, #1
 8008972:	755a      	strb	r2, [r3, #21]
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	2101      	movs	r1, #1
 8008978:	4618      	mov	r0, r3
 800897a:	f7fd fc87 	bl	800628c <unlock_fs>
 800897e:	2301      	movs	r3, #1
 8008980:	e0f3      	b.n	8008b6a <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	7d1b      	ldrb	r3, [r3, #20]
 8008986:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800898a:	b2da      	uxtb	r2, r3
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008990:	693a      	ldr	r2, [r7, #16]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	69db      	ldr	r3, [r3, #28]
 8008996:	4619      	mov	r1, r3
 8008998:	4610      	mov	r0, r2
 800899a:	f7fd fee1 	bl	8006760 <clust2sect>
 800899e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d109      	bne.n	80089ba <f_write+0x1ce>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2202      	movs	r2, #2
 80089aa:	755a      	strb	r2, [r3, #21]
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	2102      	movs	r1, #2
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fd fc6b 	bl	800628c <unlock_fs>
 80089b6:	2302      	movs	r3, #2
 80089b8:	e0d7      	b.n	8008b6a <f_write+0x37e>
			sect += csect;
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	4413      	add	r3, r2
 80089c0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	899b      	ldrh	r3, [r3, #12]
 80089c6:	461a      	mov	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80089ce:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80089d0:	6a3b      	ldr	r3, [r7, #32]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d048      	beq.n	8008a68 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80089d6:	69ba      	ldr	r2, [r7, #24]
 80089d8:	6a3b      	ldr	r3, [r7, #32]
 80089da:	4413      	add	r3, r2
 80089dc:	693a      	ldr	r2, [r7, #16]
 80089de:	8952      	ldrh	r2, [r2, #10]
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d905      	bls.n	80089f0 <f_write+0x204>
					cc = fs->csize - csect;
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	895b      	ldrh	r3, [r3, #10]
 80089e8:	461a      	mov	r2, r3
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	7858      	ldrb	r0, [r3, #1]
 80089f4:	6a3b      	ldr	r3, [r7, #32]
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	69f9      	ldr	r1, [r7, #28]
 80089fa:	f7fd faf3 	bl	8005fe4 <disk_write>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d009      	beq.n	8008a18 <f_write+0x22c>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2201      	movs	r2, #1
 8008a08:	755a      	strb	r2, [r3, #21]
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7fd fc3c 	bl	800628c <unlock_fs>
 8008a14:	2301      	movs	r3, #1
 8008a16:	e0a8      	b.n	8008b6a <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6a1a      	ldr	r2, [r3, #32]
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	6a3a      	ldr	r2, [r7, #32]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d918      	bls.n	8008a58 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6a1a      	ldr	r2, [r3, #32]
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	693a      	ldr	r2, [r7, #16]
 8008a36:	8992      	ldrh	r2, [r2, #12]
 8008a38:	fb02 f303 	mul.w	r3, r2, r3
 8008a3c:	69fa      	ldr	r2, [r7, #28]
 8008a3e:	18d1      	adds	r1, r2, r3
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	899b      	ldrh	r3, [r3, #12]
 8008a44:	461a      	mov	r2, r3
 8008a46:	f7fd fb8d 	bl	8006164 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	7d1b      	ldrb	r3, [r3, #20]
 8008a4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a52:	b2da      	uxtb	r2, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	899b      	ldrh	r3, [r3, #12]
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	6a3b      	ldr	r3, [r7, #32]
 8008a60:	fb02 f303 	mul.w	r3, r2, r3
 8008a64:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008a66:	e050      	b.n	8008b0a <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6a1b      	ldr	r3, [r3, #32]
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d01b      	beq.n	8008aaa <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	699a      	ldr	r2, [r3, #24]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d215      	bcs.n	8008aaa <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	7858      	ldrb	r0, [r3, #1]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008a88:	2301      	movs	r3, #1
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	f7fd fa8a 	bl	8005fa4 <disk_read>
 8008a90:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d009      	beq.n	8008aaa <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	755a      	strb	r2, [r3, #21]
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	2101      	movs	r1, #1
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7fd fbf3 	bl	800628c <unlock_fs>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e05f      	b.n	8008b6a <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	697a      	ldr	r2, [r7, #20]
 8008aae:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	899b      	ldrh	r3, [r3, #12]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	693a      	ldr	r2, [r7, #16]
 8008abc:	8992      	ldrh	r2, [r2, #12]
 8008abe:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ac2:	fb01 f202 	mul.w	r2, r1, r2
 8008ac6:	1a9b      	subs	r3, r3, r2
 8008ac8:	1ac3      	subs	r3, r0, r3
 8008aca:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d901      	bls.n	8008ad8 <f_write+0x2ec>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	699b      	ldr	r3, [r3, #24]
 8008ae2:	693a      	ldr	r2, [r7, #16]
 8008ae4:	8992      	ldrh	r2, [r2, #12]
 8008ae6:	fbb3 f0f2 	udiv	r0, r3, r2
 8008aea:	fb00 f202 	mul.w	r2, r0, r2
 8008aee:	1a9b      	subs	r3, r3, r2
 8008af0:	440b      	add	r3, r1
 8008af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008af4:	69f9      	ldr	r1, [r7, #28]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7fd fb34 	bl	8006164 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	7d1b      	ldrb	r3, [r3, #20]
 8008b00:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008b0a:	69fa      	ldr	r2, [r7, #28]
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0e:	4413      	add	r3, r2
 8008b10:	61fb      	str	r3, [r7, #28]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	699a      	ldr	r2, [r3, #24]
 8008b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b18:	441a      	add	r2, r3
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	619a      	str	r2, [r3, #24]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	68da      	ldr	r2, [r3, #12]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	bf38      	it	cc
 8008b2a:	461a      	movcc	r2, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	60da      	str	r2, [r3, #12]
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b36:	441a      	add	r2, r3
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f47f ae97 	bne.w	800887a <f_write+0x8e>
 8008b4c:	e000      	b.n	8008b50 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008b4e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	7d1b      	ldrb	r3, [r3, #20]
 8008b54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b58:	b2da      	uxtb	r2, r3
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	2100      	movs	r1, #0
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fd fb92 	bl	800628c <unlock_fs>
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3730      	adds	r7, #48	@ 0x30
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b086      	sub	sp, #24
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f107 0208 	add.w	r2, r7, #8
 8008b80:	4611      	mov	r1, r2
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7ff fba2 	bl	80082cc <validate>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008b8c:	7dfb      	ldrb	r3, [r7, #23]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d16d      	bne.n	8008c6e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	7d1b      	ldrb	r3, [r3, #20]
 8008b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d067      	beq.n	8008c6e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	7d1b      	ldrb	r3, [r3, #20]
 8008ba2:	b25b      	sxtb	r3, r3
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	da1a      	bge.n	8008bde <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	7858      	ldrb	r0, [r3, #1]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a1a      	ldr	r2, [r3, #32]
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	f7fd fa14 	bl	8005fe4 <disk_write>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d006      	beq.n	8008bd0 <f_sync+0x5e>
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2101      	movs	r1, #1
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fd fb60 	bl	800628c <unlock_fs>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e055      	b.n	8008c7c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	7d1b      	ldrb	r3, [r3, #20]
 8008bd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bd8:	b2da      	uxtb	r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008bde:	f7fd f941 	bl	8005e64 <get_fattime>
 8008be2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bea:	4619      	mov	r1, r3
 8008bec:	4610      	mov	r0, r2
 8008bee:	f7fd fd19 	bl	8006624 <move_window>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008bf6:	7dfb      	ldrb	r3, [r7, #23]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d138      	bne.n	8008c6e <f_sync+0xfc>
					dir = fp->dir_ptr;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c00:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	330b      	adds	r3, #11
 8008c06:	781a      	ldrb	r2, [r3, #0]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	330b      	adds	r3, #11
 8008c0c:	f042 0220 	orr.w	r2, r2, #32
 8008c10:	b2d2      	uxtb	r2, r2
 8008c12:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6818      	ldr	r0, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	68f9      	ldr	r1, [r7, #12]
 8008c20:	f7fe faa4 	bl	800716c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f103 021c 	add.w	r2, r3, #28
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	4619      	mov	r1, r3
 8008c30:	4610      	mov	r0, r2
 8008c32:	f7fd fa6b 	bl	800610c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	3316      	adds	r3, #22
 8008c3a:	6939      	ldr	r1, [r7, #16]
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7fd fa65 	bl	800610c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	3312      	adds	r3, #18
 8008c46:	2100      	movs	r1, #0
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7fd fa44 	bl	80060d6 <st_word>
					fs->wflag = 1;
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	2201      	movs	r2, #1
 8008c52:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7fd fd12 	bl	8006680 <sync_fs>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	7d1b      	ldrb	r3, [r3, #20]
 8008c64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c68:	b2da      	uxtb	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	7dfa      	ldrb	r2, [r7, #23]
 8008c72:	4611      	mov	r1, r2
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7fd fb09 	bl	800628c <unlock_fs>
 8008c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3718      	adds	r7, #24
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f7ff ff70 	bl	8008b72 <f_sync>
 8008c92:	4603      	mov	r3, r0
 8008c94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008c96:	7bfb      	ldrb	r3, [r7, #15]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d11d      	bne.n	8008cd8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f107 0208 	add.w	r2, r7, #8
 8008ca2:	4611      	mov	r1, r2
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7ff fb11 	bl	80082cc <validate>
 8008caa:	4603      	mov	r3, r0
 8008cac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d111      	bne.n	8008cd8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7fd fc0f 	bl	80064dc <dec_lock>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d102      	bne.n	8008cce <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fd fada 	bl	800628c <unlock_fs>
#endif
		}
	}
	return res;
 8008cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
	...

08008ce4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b087      	sub	sp, #28
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	4613      	mov	r3, r2
 8008cf0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8008d78 <FATFS_LinkDriverEx+0x94>)
 8008cfc:	7a5b      	ldrb	r3, [r3, #9]
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d131      	bne.n	8008d68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008d04:	4b1c      	ldr	r3, [pc, #112]	@ (8008d78 <FATFS_LinkDriverEx+0x94>)
 8008d06:	7a5b      	ldrb	r3, [r3, #9]
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8008d78 <FATFS_LinkDriverEx+0x94>)
 8008d0e:	2100      	movs	r1, #0
 8008d10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008d12:	4b19      	ldr	r3, [pc, #100]	@ (8008d78 <FATFS_LinkDriverEx+0x94>)
 8008d14:	7a5b      	ldrb	r3, [r3, #9]
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	4a17      	ldr	r2, [pc, #92]	@ (8008d78 <FATFS_LinkDriverEx+0x94>)
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	4413      	add	r3, r2
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008d22:	4b15      	ldr	r3, [pc, #84]	@ (8008d78 <FATFS_LinkDriverEx+0x94>)
 8008d24:	7a5b      	ldrb	r3, [r3, #9]
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	461a      	mov	r2, r3
 8008d2a:	4b13      	ldr	r3, [pc, #76]	@ (8008d78 <FATFS_LinkDriverEx+0x94>)
 8008d2c:	4413      	add	r3, r2
 8008d2e:	79fa      	ldrb	r2, [r7, #7]
 8008d30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008d32:	4b11      	ldr	r3, [pc, #68]	@ (8008d78 <FATFS_LinkDriverEx+0x94>)
 8008d34:	7a5b      	ldrb	r3, [r3, #9]
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	1c5a      	adds	r2, r3, #1
 8008d3a:	b2d1      	uxtb	r1, r2
 8008d3c:	4a0e      	ldr	r2, [pc, #56]	@ (8008d78 <FATFS_LinkDriverEx+0x94>)
 8008d3e:	7251      	strb	r1, [r2, #9]
 8008d40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008d42:	7dbb      	ldrb	r3, [r7, #22]
 8008d44:	3330      	adds	r3, #48	@ 0x30
 8008d46:	b2da      	uxtb	r2, r3
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	223a      	movs	r2, #58	@ 0x3a
 8008d52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	3302      	adds	r3, #2
 8008d58:	222f      	movs	r2, #47	@ 0x2f
 8008d5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	3303      	adds	r3, #3
 8008d60:	2200      	movs	r2, #0
 8008d62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008d64:	2300      	movs	r3, #0
 8008d66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	371c      	adds	r7, #28
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	200025f4 	.word	0x200025f4

08008d7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008d86:	2200      	movs	r2, #0
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f7ff ffaa 	bl	8008ce4 <FATFS_LinkDriverEx>
 8008d90:	4603      	mov	r3, r0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
	...

08008d9c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	4603      	mov	r3, r0
 8008da4:	6039      	str	r1, [r7, #0]
 8008da6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008da8:	88fb      	ldrh	r3, [r7, #6]
 8008daa:	2b7f      	cmp	r3, #127	@ 0x7f
 8008dac:	d802      	bhi.n	8008db4 <ff_convert+0x18>
		c = chr;
 8008dae:	88fb      	ldrh	r3, [r7, #6]
 8008db0:	81fb      	strh	r3, [r7, #14]
 8008db2:	e025      	b.n	8008e00 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00b      	beq.n	8008dd2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008dba:	88fb      	ldrh	r3, [r7, #6]
 8008dbc:	2bff      	cmp	r3, #255	@ 0xff
 8008dbe:	d805      	bhi.n	8008dcc <ff_convert+0x30>
 8008dc0:	88fb      	ldrh	r3, [r7, #6]
 8008dc2:	3b80      	subs	r3, #128	@ 0x80
 8008dc4:	4a12      	ldr	r2, [pc, #72]	@ (8008e10 <ff_convert+0x74>)
 8008dc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dca:	e000      	b.n	8008dce <ff_convert+0x32>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	81fb      	strh	r3, [r7, #14]
 8008dd0:	e016      	b.n	8008e00 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	81fb      	strh	r3, [r7, #14]
 8008dd6:	e009      	b.n	8008dec <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008dd8:	89fb      	ldrh	r3, [r7, #14]
 8008dda:	4a0d      	ldr	r2, [pc, #52]	@ (8008e10 <ff_convert+0x74>)
 8008ddc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008de0:	88fa      	ldrh	r2, [r7, #6]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d006      	beq.n	8008df4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008de6:	89fb      	ldrh	r3, [r7, #14]
 8008de8:	3301      	adds	r3, #1
 8008dea:	81fb      	strh	r3, [r7, #14]
 8008dec:	89fb      	ldrh	r3, [r7, #14]
 8008dee:	2b7f      	cmp	r3, #127	@ 0x7f
 8008df0:	d9f2      	bls.n	8008dd8 <ff_convert+0x3c>
 8008df2:	e000      	b.n	8008df6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008df4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008df6:	89fb      	ldrh	r3, [r7, #14]
 8008df8:	3380      	adds	r3, #128	@ 0x80
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008e00:	89fb      	ldrh	r3, [r7, #14]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3714      	adds	r7, #20
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	0800c264 	.word	0x0800c264

08008e14 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b087      	sub	sp, #28
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008e1e:	88fb      	ldrh	r3, [r7, #6]
 8008e20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e24:	d201      	bcs.n	8008e2a <ff_wtoupper+0x16>
 8008e26:	4b3e      	ldr	r3, [pc, #248]	@ (8008f20 <ff_wtoupper+0x10c>)
 8008e28:	e000      	b.n	8008e2c <ff_wtoupper+0x18>
 8008e2a:	4b3e      	ldr	r3, [pc, #248]	@ (8008f24 <ff_wtoupper+0x110>)
 8008e2c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	1c9a      	adds	r2, r3, #2
 8008e32:	617a      	str	r2, [r7, #20]
 8008e34:	881b      	ldrh	r3, [r3, #0]
 8008e36:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008e38:	8a7b      	ldrh	r3, [r7, #18]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d068      	beq.n	8008f10 <ff_wtoupper+0xfc>
 8008e3e:	88fa      	ldrh	r2, [r7, #6]
 8008e40:	8a7b      	ldrh	r3, [r7, #18]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d364      	bcc.n	8008f10 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	1c9a      	adds	r2, r3, #2
 8008e4a:	617a      	str	r2, [r7, #20]
 8008e4c:	881b      	ldrh	r3, [r3, #0]
 8008e4e:	823b      	strh	r3, [r7, #16]
 8008e50:	8a3b      	ldrh	r3, [r7, #16]
 8008e52:	0a1b      	lsrs	r3, r3, #8
 8008e54:	81fb      	strh	r3, [r7, #14]
 8008e56:	8a3b      	ldrh	r3, [r7, #16]
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008e5c:	88fa      	ldrh	r2, [r7, #6]
 8008e5e:	8a79      	ldrh	r1, [r7, #18]
 8008e60:	8a3b      	ldrh	r3, [r7, #16]
 8008e62:	440b      	add	r3, r1
 8008e64:	429a      	cmp	r2, r3
 8008e66:	da49      	bge.n	8008efc <ff_wtoupper+0xe8>
			switch (cmd) {
 8008e68:	89fb      	ldrh	r3, [r7, #14]
 8008e6a:	2b08      	cmp	r3, #8
 8008e6c:	d84f      	bhi.n	8008f0e <ff_wtoupper+0xfa>
 8008e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e74 <ff_wtoupper+0x60>)
 8008e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e74:	08008e99 	.word	0x08008e99
 8008e78:	08008eab 	.word	0x08008eab
 8008e7c:	08008ec1 	.word	0x08008ec1
 8008e80:	08008ec9 	.word	0x08008ec9
 8008e84:	08008ed1 	.word	0x08008ed1
 8008e88:	08008ed9 	.word	0x08008ed9
 8008e8c:	08008ee1 	.word	0x08008ee1
 8008e90:	08008ee9 	.word	0x08008ee9
 8008e94:	08008ef1 	.word	0x08008ef1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008e98:	88fa      	ldrh	r2, [r7, #6]
 8008e9a:	8a7b      	ldrh	r3, [r7, #18]
 8008e9c:	1ad3      	subs	r3, r2, r3
 8008e9e:	005b      	lsls	r3, r3, #1
 8008ea0:	697a      	ldr	r2, [r7, #20]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	881b      	ldrh	r3, [r3, #0]
 8008ea6:	80fb      	strh	r3, [r7, #6]
 8008ea8:	e027      	b.n	8008efa <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008eaa:	88fa      	ldrh	r2, [r7, #6]
 8008eac:	8a7b      	ldrh	r3, [r7, #18]
 8008eae:	1ad3      	subs	r3, r2, r3
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	f003 0301 	and.w	r3, r3, #1
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	88fa      	ldrh	r2, [r7, #6]
 8008eba:	1ad3      	subs	r3, r2, r3
 8008ebc:	80fb      	strh	r3, [r7, #6]
 8008ebe:	e01c      	b.n	8008efa <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008ec0:	88fb      	ldrh	r3, [r7, #6]
 8008ec2:	3b10      	subs	r3, #16
 8008ec4:	80fb      	strh	r3, [r7, #6]
 8008ec6:	e018      	b.n	8008efa <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008ec8:	88fb      	ldrh	r3, [r7, #6]
 8008eca:	3b20      	subs	r3, #32
 8008ecc:	80fb      	strh	r3, [r7, #6]
 8008ece:	e014      	b.n	8008efa <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008ed0:	88fb      	ldrh	r3, [r7, #6]
 8008ed2:	3b30      	subs	r3, #48	@ 0x30
 8008ed4:	80fb      	strh	r3, [r7, #6]
 8008ed6:	e010      	b.n	8008efa <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008ed8:	88fb      	ldrh	r3, [r7, #6]
 8008eda:	3b1a      	subs	r3, #26
 8008edc:	80fb      	strh	r3, [r7, #6]
 8008ede:	e00c      	b.n	8008efa <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008ee0:	88fb      	ldrh	r3, [r7, #6]
 8008ee2:	3308      	adds	r3, #8
 8008ee4:	80fb      	strh	r3, [r7, #6]
 8008ee6:	e008      	b.n	8008efa <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008ee8:	88fb      	ldrh	r3, [r7, #6]
 8008eea:	3b50      	subs	r3, #80	@ 0x50
 8008eec:	80fb      	strh	r3, [r7, #6]
 8008eee:	e004      	b.n	8008efa <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008ef0:	88fb      	ldrh	r3, [r7, #6]
 8008ef2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8008ef6:	80fb      	strh	r3, [r7, #6]
 8008ef8:	bf00      	nop
			}
			break;
 8008efa:	e008      	b.n	8008f0e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008efc:	89fb      	ldrh	r3, [r7, #14]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d195      	bne.n	8008e2e <ff_wtoupper+0x1a>
 8008f02:	8a3b      	ldrh	r3, [r7, #16]
 8008f04:	005b      	lsls	r3, r3, #1
 8008f06:	697a      	ldr	r2, [r7, #20]
 8008f08:	4413      	add	r3, r2
 8008f0a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008f0c:	e78f      	b.n	8008e2e <ff_wtoupper+0x1a>
			break;
 8008f0e:	bf00      	nop
	}

	return chr;
 8008f10:	88fb      	ldrh	r3, [r7, #6]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	371c      	adds	r7, #28
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	0800c364 	.word	0x0800c364
 8008f24:	0800c558 	.word	0x0800c558

08008f28 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	4603      	mov	r3, r0
 8008f30:	6039      	str	r1, [r7, #0]
 8008f32:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8008f34:	2300      	movs	r3, #0
 8008f36:	60fb      	str	r3, [r7, #12]
 8008f38:	2300      	movs	r3, #0
 8008f3a:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8008f3c:	f107 030c 	add.w	r3, r7, #12
 8008f40:	2101      	movs	r1, #1
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 f865 	bl	8009012 <osSemaphoreCreate>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	bf14      	ite	ne
 8008f56:	2301      	movne	r3, #1
 8008f58:	2300      	moveq	r3, #0
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	617b      	str	r3, [r7, #20]

    return ret;
 8008f5e:	697b      	ldr	r3, [r7, #20]
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3718      	adds	r7, #24
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 f905 	bl	8009180 <osSemaphoreDelete>
#endif
    return 1;
 8008f76:	2301      	movs	r3, #1
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8008f8c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f871 	bl	8009078 <osSemaphoreWait>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d101      	bne.n	8008fa0 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b082      	sub	sp, #8
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f8ae 	bl	8009114 <osSemaphoreRelease>
#endif
}
 8008fb8:	bf00      	nop
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f002 f997 	bl	800b2fc <pvPortMalloc>
 8008fce:	4603      	mov	r3, r0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f002 fa59 	bl	800b498 <vPortFree>
}
 8008fe6:	bf00      	nop
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b083      	sub	sp, #12
 8008ff2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ff4:	f3ef 8305 	mrs	r3, IPSR
 8008ff8:	607b      	str	r3, [r7, #4]
  return(result);
 8008ffa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	bf14      	ite	ne
 8009000:	2301      	movne	r3, #1
 8009002:	2300      	moveq	r3, #0
 8009004:	b2db      	uxtb	r3, r3
}
 8009006:	4618      	mov	r0, r3
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009012:	b580      	push	{r7, lr}
 8009014:	b086      	sub	sp, #24
 8009016:	af02      	add	r7, sp, #8
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d00f      	beq.n	8009044 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d10a      	bne.n	8009040 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	2203      	movs	r2, #3
 8009030:	9200      	str	r2, [sp, #0]
 8009032:	2200      	movs	r2, #0
 8009034:	2100      	movs	r1, #0
 8009036:	2001      	movs	r0, #1
 8009038:	f000 f9d4 	bl	80093e4 <xQueueGenericCreateStatic>
 800903c:	4603      	mov	r3, r0
 800903e:	e016      	b.n	800906e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009040:	2300      	movs	r3, #0
 8009042:	e014      	b.n	800906e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d110      	bne.n	800906c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800904a:	2203      	movs	r2, #3
 800904c:	2100      	movs	r1, #0
 800904e:	2001      	movs	r0, #1
 8009050:	f000 fa45 	bl	80094de <xQueueGenericCreate>
 8009054:	60f8      	str	r0, [r7, #12]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d005      	beq.n	8009068 <osSemaphoreCreate+0x56>
 800905c:	2300      	movs	r3, #0
 800905e:	2200      	movs	r2, #0
 8009060:	2100      	movs	r1, #0
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f000 fa96 	bl	8009594 <xQueueGenericSend>
      return sema;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	e000      	b.n	800906e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800906c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800906e:	4618      	mov	r0, r3
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
	...

08009078 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009082:	2300      	movs	r3, #0
 8009084:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d101      	bne.n	8009090 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800908c:	2380      	movs	r3, #128	@ 0x80
 800908e:	e03a      	b.n	8009106 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009090:	2300      	movs	r3, #0
 8009092:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800909a:	d103      	bne.n	80090a4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800909c:	f04f 33ff 	mov.w	r3, #4294967295
 80090a0:	60fb      	str	r3, [r7, #12]
 80090a2:	e009      	b.n	80090b8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d006      	beq.n	80090b8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d101      	bne.n	80090b8 <osSemaphoreWait+0x40>
      ticks = 1;
 80090b4:	2301      	movs	r3, #1
 80090b6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80090b8:	f7ff ff99 	bl	8008fee <inHandlerMode>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d017      	beq.n	80090f2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80090c2:	f107 0308 	add.w	r3, r7, #8
 80090c6:	461a      	mov	r2, r3
 80090c8:	2100      	movs	r1, #0
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 fd04 	bl	8009ad8 <xQueueReceiveFromISR>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d001      	beq.n	80090da <osSemaphoreWait+0x62>
      return osErrorOS;
 80090d6:	23ff      	movs	r3, #255	@ 0xff
 80090d8:	e015      	b.n	8009106 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d011      	beq.n	8009104 <osSemaphoreWait+0x8c>
 80090e0:	4b0b      	ldr	r3, [pc, #44]	@ (8009110 <osSemaphoreWait+0x98>)
 80090e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090e6:	601a      	str	r2, [r3, #0]
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	f3bf 8f6f 	isb	sy
 80090f0:	e008      	b.n	8009104 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80090f2:	68f9      	ldr	r1, [r7, #12]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fbdf 	bl	80098b8 <xQueueSemaphoreTake>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d001      	beq.n	8009104 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009100:	23ff      	movs	r3, #255	@ 0xff
 8009102:	e000      	b.n	8009106 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	e000ed04 	.word	0xe000ed04

08009114 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800911c:	2300      	movs	r3, #0
 800911e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009120:	2300      	movs	r3, #0
 8009122:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009124:	f7ff ff63 	bl	8008fee <inHandlerMode>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d016      	beq.n	800915c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800912e:	f107 0308 	add.w	r3, r7, #8
 8009132:	4619      	mov	r1, r3
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 fb2f 	bl	8009798 <xQueueGiveFromISR>
 800913a:	4603      	mov	r3, r0
 800913c:	2b01      	cmp	r3, #1
 800913e:	d001      	beq.n	8009144 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009140:	23ff      	movs	r3, #255	@ 0xff
 8009142:	e017      	b.n	8009174 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d013      	beq.n	8009172 <osSemaphoreRelease+0x5e>
 800914a:	4b0c      	ldr	r3, [pc, #48]	@ (800917c <osSemaphoreRelease+0x68>)
 800914c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009150:	601a      	str	r2, [r3, #0]
 8009152:	f3bf 8f4f 	dsb	sy
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	e00a      	b.n	8009172 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800915c:	2300      	movs	r3, #0
 800915e:	2200      	movs	r2, #0
 8009160:	2100      	movs	r1, #0
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 fa16 	bl	8009594 <xQueueGenericSend>
 8009168:	4603      	mov	r3, r0
 800916a:	2b01      	cmp	r3, #1
 800916c:	d001      	beq.n	8009172 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800916e:	23ff      	movs	r3, #255	@ 0xff
 8009170:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009172:	68fb      	ldr	r3, [r7, #12]
}
 8009174:	4618      	mov	r0, r3
 8009176:	3710      	adds	r7, #16
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	e000ed04 	.word	0xe000ed04

08009180 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009188:	f7ff ff31 	bl	8008fee <inHandlerMode>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d001      	beq.n	8009196 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8009192:	2382      	movs	r3, #130	@ 0x82
 8009194:	e003      	b.n	800919e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fd20 	bl	8009bdc <vQueueDelete>

  return osOK; 
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80091a6:	b480      	push	{r7}
 80091a8:	b083      	sub	sp, #12
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f103 0208 	add.w	r2, r3, #8
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f04f 32ff 	mov.w	r2, #4294967295
 80091be:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f103 0208 	add.w	r2, r3, #8
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f103 0208 	add.w	r2, r3, #8
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80091da:	bf00      	nop
 80091dc:	370c      	adds	r7, #12
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80091e6:	b480      	push	{r7}
 80091e8:	b083      	sub	sp, #12
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80091f4:	bf00      	nop
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	689a      	ldr	r2, [r3, #8]
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	683a      	ldr	r2, [r7, #0]
 8009224:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	683a      	ldr	r2, [r7, #0]
 800922a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	1c5a      	adds	r2, r3, #1
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	601a      	str	r2, [r3, #0]
}
 800923c:	bf00      	nop
 800923e:	3714      	adds	r7, #20
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009248:	b480      	push	{r7}
 800924a:	b085      	sub	sp, #20
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800925e:	d103      	bne.n	8009268 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	691b      	ldr	r3, [r3, #16]
 8009264:	60fb      	str	r3, [r7, #12]
 8009266:	e00c      	b.n	8009282 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	3308      	adds	r3, #8
 800926c:	60fb      	str	r3, [r7, #12]
 800926e:	e002      	b.n	8009276 <vListInsert+0x2e>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	60fb      	str	r3, [r7, #12]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68ba      	ldr	r2, [r7, #8]
 800927e:	429a      	cmp	r2, r3
 8009280:	d2f6      	bcs.n	8009270 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	685a      	ldr	r2, [r3, #4]
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	1c5a      	adds	r2, r3, #1
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	601a      	str	r2, [r3, #0]
}
 80092ae:	bf00      	nop
 80092b0:	3714      	adds	r7, #20
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr

080092ba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80092ba:	b480      	push	{r7}
 80092bc:	b085      	sub	sp, #20
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	6892      	ldr	r2, [r2, #8]
 80092d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	6852      	ldr	r2, [r2, #4]
 80092da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d103      	bne.n	80092ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	689a      	ldr	r2, [r3, #8]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	1e5a      	subs	r2, r3, #1
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
}
 8009302:	4618      	mov	r0, r3
 8009304:	3714      	adds	r7, #20
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
	...

08009310 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d10b      	bne.n	800933c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009328:	f383 8811 	msr	BASEPRI, r3
 800932c:	f3bf 8f6f 	isb	sy
 8009330:	f3bf 8f4f 	dsb	sy
 8009334:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009336:	bf00      	nop
 8009338:	bf00      	nop
 800933a:	e7fd      	b.n	8009338 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800933c:	f001 febc 	bl	800b0b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009348:	68f9      	ldr	r1, [r7, #12]
 800934a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800934c:	fb01 f303 	mul.w	r3, r1, r3
 8009350:	441a      	add	r2, r3
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2200      	movs	r2, #0
 800935a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800936c:	3b01      	subs	r3, #1
 800936e:	68f9      	ldr	r1, [r7, #12]
 8009370:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009372:	fb01 f303 	mul.w	r3, r1, r3
 8009376:	441a      	add	r2, r3
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	22ff      	movs	r2, #255	@ 0xff
 8009380:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	22ff      	movs	r2, #255	@ 0xff
 8009388:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d114      	bne.n	80093bc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d01a      	beq.n	80093d0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	3310      	adds	r3, #16
 800939e:	4618      	mov	r0, r3
 80093a0:	f001 f974 	bl	800a68c <xTaskRemoveFromEventList>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d012      	beq.n	80093d0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80093aa:	4b0d      	ldr	r3, [pc, #52]	@ (80093e0 <xQueueGenericReset+0xd0>)
 80093ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093b0:	601a      	str	r2, [r3, #0]
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	e009      	b.n	80093d0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	3310      	adds	r3, #16
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7ff fef0 	bl	80091a6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	3324      	adds	r3, #36	@ 0x24
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7ff feeb 	bl	80091a6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80093d0:	f001 fea4 	bl	800b11c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80093d4:	2301      	movs	r3, #1
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	e000ed04 	.word	0xe000ed04

080093e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b08e      	sub	sp, #56	@ 0x38
 80093e8:	af02      	add	r7, sp, #8
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
 80093f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10b      	bne.n	8009410 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80093f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093fc:	f383 8811 	msr	BASEPRI, r3
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800940a:	bf00      	nop
 800940c:	bf00      	nop
 800940e:	e7fd      	b.n	800940c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10b      	bne.n	800942e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800941a:	f383 8811 	msr	BASEPRI, r3
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009428:	bf00      	nop
 800942a:	bf00      	nop
 800942c:	e7fd      	b.n	800942a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d002      	beq.n	800943a <xQueueGenericCreateStatic+0x56>
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d001      	beq.n	800943e <xQueueGenericCreateStatic+0x5a>
 800943a:	2301      	movs	r3, #1
 800943c:	e000      	b.n	8009440 <xQueueGenericCreateStatic+0x5c>
 800943e:	2300      	movs	r3, #0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d10b      	bne.n	800945c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009448:	f383 8811 	msr	BASEPRI, r3
 800944c:	f3bf 8f6f 	isb	sy
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	623b      	str	r3, [r7, #32]
}
 8009456:	bf00      	nop
 8009458:	bf00      	nop
 800945a:	e7fd      	b.n	8009458 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d102      	bne.n	8009468 <xQueueGenericCreateStatic+0x84>
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d101      	bne.n	800946c <xQueueGenericCreateStatic+0x88>
 8009468:	2301      	movs	r3, #1
 800946a:	e000      	b.n	800946e <xQueueGenericCreateStatic+0x8a>
 800946c:	2300      	movs	r3, #0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d10b      	bne.n	800948a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009476:	f383 8811 	msr	BASEPRI, r3
 800947a:	f3bf 8f6f 	isb	sy
 800947e:	f3bf 8f4f 	dsb	sy
 8009482:	61fb      	str	r3, [r7, #28]
}
 8009484:	bf00      	nop
 8009486:	bf00      	nop
 8009488:	e7fd      	b.n	8009486 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800948a:	2348      	movs	r3, #72	@ 0x48
 800948c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	2b48      	cmp	r3, #72	@ 0x48
 8009492:	d00b      	beq.n	80094ac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009498:	f383 8811 	msr	BASEPRI, r3
 800949c:	f3bf 8f6f 	isb	sy
 80094a0:	f3bf 8f4f 	dsb	sy
 80094a4:	61bb      	str	r3, [r7, #24]
}
 80094a6:	bf00      	nop
 80094a8:	bf00      	nop
 80094aa:	e7fd      	b.n	80094a8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80094ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80094b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00d      	beq.n	80094d4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80094b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80094c0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80094c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c6:	9300      	str	r3, [sp, #0]
 80094c8:	4613      	mov	r3, r2
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	68b9      	ldr	r1, [r7, #8]
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f000 f840 	bl	8009554 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80094d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3730      	adds	r7, #48	@ 0x30
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b08a      	sub	sp, #40	@ 0x28
 80094e2:	af02      	add	r7, sp, #8
 80094e4:	60f8      	str	r0, [r7, #12]
 80094e6:	60b9      	str	r1, [r7, #8]
 80094e8:	4613      	mov	r3, r2
 80094ea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d10b      	bne.n	800950a <xQueueGenericCreate+0x2c>
	__asm volatile
 80094f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f6:	f383 8811 	msr	BASEPRI, r3
 80094fa:	f3bf 8f6f 	isb	sy
 80094fe:	f3bf 8f4f 	dsb	sy
 8009502:	613b      	str	r3, [r7, #16]
}
 8009504:	bf00      	nop
 8009506:	bf00      	nop
 8009508:	e7fd      	b.n	8009506 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	fb02 f303 	mul.w	r3, r2, r3
 8009512:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	3348      	adds	r3, #72	@ 0x48
 8009518:	4618      	mov	r0, r3
 800951a:	f001 feef 	bl	800b2fc <pvPortMalloc>
 800951e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d011      	beq.n	800954a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	3348      	adds	r3, #72	@ 0x48
 800952e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	2200      	movs	r2, #0
 8009534:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009538:	79fa      	ldrb	r2, [r7, #7]
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	9300      	str	r3, [sp, #0]
 800953e:	4613      	mov	r3, r2
 8009540:	697a      	ldr	r2, [r7, #20]
 8009542:	68b9      	ldr	r1, [r7, #8]
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f000 f805 	bl	8009554 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800954a:	69bb      	ldr	r3, [r7, #24]
	}
 800954c:	4618      	mov	r0, r3
 800954e:	3720      	adds	r7, #32
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	607a      	str	r2, [r7, #4]
 8009560:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d103      	bne.n	8009570 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	69ba      	ldr	r2, [r7, #24]
 800956c:	601a      	str	r2, [r3, #0]
 800956e:	e002      	b.n	8009576 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	68ba      	ldr	r2, [r7, #8]
 8009580:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009582:	2101      	movs	r1, #1
 8009584:	69b8      	ldr	r0, [r7, #24]
 8009586:	f7ff fec3 	bl	8009310 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800958a:	bf00      	nop
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
	...

08009594 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b08e      	sub	sp, #56	@ 0x38
 8009598:	af00      	add	r7, sp, #0
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	60b9      	str	r1, [r7, #8]
 800959e:	607a      	str	r2, [r7, #4]
 80095a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80095a2:	2300      	movs	r3, #0
 80095a4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80095aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d10b      	bne.n	80095c8 <xQueueGenericSend+0x34>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80095c2:	bf00      	nop
 80095c4:	bf00      	nop
 80095c6:	e7fd      	b.n	80095c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d103      	bne.n	80095d6 <xQueueGenericSend+0x42>
 80095ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d101      	bne.n	80095da <xQueueGenericSend+0x46>
 80095d6:	2301      	movs	r3, #1
 80095d8:	e000      	b.n	80095dc <xQueueGenericSend+0x48>
 80095da:	2300      	movs	r3, #0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d10b      	bne.n	80095f8 <xQueueGenericSend+0x64>
	__asm volatile
 80095e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095e4:	f383 8811 	msr	BASEPRI, r3
 80095e8:	f3bf 8f6f 	isb	sy
 80095ec:	f3bf 8f4f 	dsb	sy
 80095f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80095f2:	bf00      	nop
 80095f4:	bf00      	nop
 80095f6:	e7fd      	b.n	80095f4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d103      	bne.n	8009606 <xQueueGenericSend+0x72>
 80095fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009602:	2b01      	cmp	r3, #1
 8009604:	d101      	bne.n	800960a <xQueueGenericSend+0x76>
 8009606:	2301      	movs	r3, #1
 8009608:	e000      	b.n	800960c <xQueueGenericSend+0x78>
 800960a:	2300      	movs	r3, #0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d10b      	bne.n	8009628 <xQueueGenericSend+0x94>
	__asm volatile
 8009610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009614:	f383 8811 	msr	BASEPRI, r3
 8009618:	f3bf 8f6f 	isb	sy
 800961c:	f3bf 8f4f 	dsb	sy
 8009620:	623b      	str	r3, [r7, #32]
}
 8009622:	bf00      	nop
 8009624:	bf00      	nop
 8009626:	e7fd      	b.n	8009624 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009628:	f001 f9f0 	bl	800aa0c <xTaskGetSchedulerState>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d102      	bne.n	8009638 <xQueueGenericSend+0xa4>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d101      	bne.n	800963c <xQueueGenericSend+0xa8>
 8009638:	2301      	movs	r3, #1
 800963a:	e000      	b.n	800963e <xQueueGenericSend+0xaa>
 800963c:	2300      	movs	r3, #0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d10b      	bne.n	800965a <xQueueGenericSend+0xc6>
	__asm volatile
 8009642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	61fb      	str	r3, [r7, #28]
}
 8009654:	bf00      	nop
 8009656:	bf00      	nop
 8009658:	e7fd      	b.n	8009656 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800965a:	f001 fd2d 	bl	800b0b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800965e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009660:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009666:	429a      	cmp	r2, r3
 8009668:	d302      	bcc.n	8009670 <xQueueGenericSend+0xdc>
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	2b02      	cmp	r3, #2
 800966e:	d129      	bne.n	80096c4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	68b9      	ldr	r1, [r7, #8]
 8009674:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009676:	f000 faed 	bl	8009c54 <prvCopyDataToQueue>
 800967a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800967c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800967e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009680:	2b00      	cmp	r3, #0
 8009682:	d010      	beq.n	80096a6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009686:	3324      	adds	r3, #36	@ 0x24
 8009688:	4618      	mov	r0, r3
 800968a:	f000 ffff 	bl	800a68c <xTaskRemoveFromEventList>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d013      	beq.n	80096bc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009694:	4b3f      	ldr	r3, [pc, #252]	@ (8009794 <xQueueGenericSend+0x200>)
 8009696:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800969a:	601a      	str	r2, [r3, #0]
 800969c:	f3bf 8f4f 	dsb	sy
 80096a0:	f3bf 8f6f 	isb	sy
 80096a4:	e00a      	b.n	80096bc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80096a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d007      	beq.n	80096bc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80096ac:	4b39      	ldr	r3, [pc, #228]	@ (8009794 <xQueueGenericSend+0x200>)
 80096ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096b2:	601a      	str	r2, [r3, #0]
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80096bc:	f001 fd2e 	bl	800b11c <vPortExitCritical>
				return pdPASS;
 80096c0:	2301      	movs	r3, #1
 80096c2:	e063      	b.n	800978c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d103      	bne.n	80096d2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80096ca:	f001 fd27 	bl	800b11c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80096ce:	2300      	movs	r3, #0
 80096d0:	e05c      	b.n	800978c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d106      	bne.n	80096e6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80096d8:	f107 0314 	add.w	r3, r7, #20
 80096dc:	4618      	mov	r0, r3
 80096de:	f001 f839 	bl	800a754 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80096e2:	2301      	movs	r3, #1
 80096e4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096e6:	f001 fd19 	bl	800b11c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80096ea:	f000 fde7 	bl	800a2bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096ee:	f001 fce3 	bl	800b0b8 <vPortEnterCritical>
 80096f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80096f8:	b25b      	sxtb	r3, r3
 80096fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096fe:	d103      	bne.n	8009708 <xQueueGenericSend+0x174>
 8009700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009702:	2200      	movs	r2, #0
 8009704:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800970a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800970e:	b25b      	sxtb	r3, r3
 8009710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009714:	d103      	bne.n	800971e <xQueueGenericSend+0x18a>
 8009716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009718:	2200      	movs	r2, #0
 800971a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800971e:	f001 fcfd 	bl	800b11c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009722:	1d3a      	adds	r2, r7, #4
 8009724:	f107 0314 	add.w	r3, r7, #20
 8009728:	4611      	mov	r1, r2
 800972a:	4618      	mov	r0, r3
 800972c:	f001 f828 	bl	800a780 <xTaskCheckForTimeOut>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d124      	bne.n	8009780 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009736:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009738:	f000 fb84 	bl	8009e44 <prvIsQueueFull>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d018      	beq.n	8009774 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009744:	3310      	adds	r3, #16
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	4611      	mov	r1, r2
 800974a:	4618      	mov	r0, r3
 800974c:	f000 ff78 	bl	800a640 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009750:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009752:	f000 fb0f 	bl	8009d74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009756:	f000 fdbf 	bl	800a2d8 <xTaskResumeAll>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	f47f af7c 	bne.w	800965a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009762:	4b0c      	ldr	r3, [pc, #48]	@ (8009794 <xQueueGenericSend+0x200>)
 8009764:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009768:	601a      	str	r2, [r3, #0]
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	f3bf 8f6f 	isb	sy
 8009772:	e772      	b.n	800965a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009774:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009776:	f000 fafd 	bl	8009d74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800977a:	f000 fdad 	bl	800a2d8 <xTaskResumeAll>
 800977e:	e76c      	b.n	800965a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009780:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009782:	f000 faf7 	bl	8009d74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009786:	f000 fda7 	bl	800a2d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800978a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800978c:	4618      	mov	r0, r3
 800978e:	3738      	adds	r7, #56	@ 0x38
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	e000ed04 	.word	0xe000ed04

08009798 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b08e      	sub	sp, #56	@ 0x38
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80097a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10b      	bne.n	80097c4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80097ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	623b      	str	r3, [r7, #32]
}
 80097be:	bf00      	nop
 80097c0:	bf00      	nop
 80097c2:	e7fd      	b.n	80097c0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80097c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00b      	beq.n	80097e4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	61fb      	str	r3, [r7, #28]
}
 80097de:	bf00      	nop
 80097e0:	bf00      	nop
 80097e2:	e7fd      	b.n	80097e0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80097e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d103      	bne.n	80097f4 <xQueueGiveFromISR+0x5c>
 80097ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d101      	bne.n	80097f8 <xQueueGiveFromISR+0x60>
 80097f4:	2301      	movs	r3, #1
 80097f6:	e000      	b.n	80097fa <xQueueGiveFromISR+0x62>
 80097f8:	2300      	movs	r3, #0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d10b      	bne.n	8009816 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80097fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009802:	f383 8811 	msr	BASEPRI, r3
 8009806:	f3bf 8f6f 	isb	sy
 800980a:	f3bf 8f4f 	dsb	sy
 800980e:	61bb      	str	r3, [r7, #24]
}
 8009810:	bf00      	nop
 8009812:	bf00      	nop
 8009814:	e7fd      	b.n	8009812 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009816:	f001 fd2f 	bl	800b278 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800981a:	f3ef 8211 	mrs	r2, BASEPRI
 800981e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009822:	f383 8811 	msr	BASEPRI, r3
 8009826:	f3bf 8f6f 	isb	sy
 800982a:	f3bf 8f4f 	dsb	sy
 800982e:	617a      	str	r2, [r7, #20]
 8009830:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009832:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009834:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800983a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800983c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800983e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009840:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009842:	429a      	cmp	r2, r3
 8009844:	d22b      	bcs.n	800989e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009848:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800984c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009852:	1c5a      	adds	r2, r3, #1
 8009854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009856:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009858:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800985c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009860:	d112      	bne.n	8009888 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009866:	2b00      	cmp	r3, #0
 8009868:	d016      	beq.n	8009898 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800986a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800986c:	3324      	adds	r3, #36	@ 0x24
 800986e:	4618      	mov	r0, r3
 8009870:	f000 ff0c 	bl	800a68c <xTaskRemoveFromEventList>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00e      	beq.n	8009898 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00b      	beq.n	8009898 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	2201      	movs	r2, #1
 8009884:	601a      	str	r2, [r3, #0]
 8009886:	e007      	b.n	8009898 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009888:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800988c:	3301      	adds	r3, #1
 800988e:	b2db      	uxtb	r3, r3
 8009890:	b25a      	sxtb	r2, r3
 8009892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009894:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009898:	2301      	movs	r3, #1
 800989a:	637b      	str	r3, [r7, #52]	@ 0x34
 800989c:	e001      	b.n	80098a2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800989e:	2300      	movs	r3, #0
 80098a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80098a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80098ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80098ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3738      	adds	r7, #56	@ 0x38
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b08e      	sub	sp, #56	@ 0x38
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80098c2:	2300      	movs	r3, #0
 80098c4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80098ca:	2300      	movs	r3, #0
 80098cc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80098ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d10b      	bne.n	80098ec <xQueueSemaphoreTake+0x34>
	__asm volatile
 80098d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d8:	f383 8811 	msr	BASEPRI, r3
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	623b      	str	r3, [r7, #32]
}
 80098e6:	bf00      	nop
 80098e8:	bf00      	nop
 80098ea:	e7fd      	b.n	80098e8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80098ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00b      	beq.n	800990c <xQueueSemaphoreTake+0x54>
	__asm volatile
 80098f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f8:	f383 8811 	msr	BASEPRI, r3
 80098fc:	f3bf 8f6f 	isb	sy
 8009900:	f3bf 8f4f 	dsb	sy
 8009904:	61fb      	str	r3, [r7, #28]
}
 8009906:	bf00      	nop
 8009908:	bf00      	nop
 800990a:	e7fd      	b.n	8009908 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800990c:	f001 f87e 	bl	800aa0c <xTaskGetSchedulerState>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d102      	bne.n	800991c <xQueueSemaphoreTake+0x64>
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d101      	bne.n	8009920 <xQueueSemaphoreTake+0x68>
 800991c:	2301      	movs	r3, #1
 800991e:	e000      	b.n	8009922 <xQueueSemaphoreTake+0x6a>
 8009920:	2300      	movs	r3, #0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d10b      	bne.n	800993e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8009926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800992a:	f383 8811 	msr	BASEPRI, r3
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	61bb      	str	r3, [r7, #24]
}
 8009938:	bf00      	nop
 800993a:	bf00      	nop
 800993c:	e7fd      	b.n	800993a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800993e:	f001 fbbb 	bl	800b0b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009946:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800994a:	2b00      	cmp	r3, #0
 800994c:	d024      	beq.n	8009998 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800994e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009950:	1e5a      	subs	r2, r3, #1
 8009952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009954:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d104      	bne.n	8009968 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800995e:	f001 fa01 	bl	800ad64 <pvTaskIncrementMutexHeldCount>
 8009962:	4602      	mov	r2, r0
 8009964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009966:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d00f      	beq.n	8009990 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009972:	3310      	adds	r3, #16
 8009974:	4618      	mov	r0, r3
 8009976:	f000 fe89 	bl	800a68c <xTaskRemoveFromEventList>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d007      	beq.n	8009990 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009980:	4b54      	ldr	r3, [pc, #336]	@ (8009ad4 <xQueueSemaphoreTake+0x21c>)
 8009982:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009986:	601a      	str	r2, [r3, #0]
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009990:	f001 fbc4 	bl	800b11c <vPortExitCritical>
				return pdPASS;
 8009994:	2301      	movs	r3, #1
 8009996:	e098      	b.n	8009aca <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d112      	bne.n	80099c4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800999e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d00b      	beq.n	80099bc <xQueueSemaphoreTake+0x104>
	__asm volatile
 80099a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a8:	f383 8811 	msr	BASEPRI, r3
 80099ac:	f3bf 8f6f 	isb	sy
 80099b0:	f3bf 8f4f 	dsb	sy
 80099b4:	617b      	str	r3, [r7, #20]
}
 80099b6:	bf00      	nop
 80099b8:	bf00      	nop
 80099ba:	e7fd      	b.n	80099b8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80099bc:	f001 fbae 	bl	800b11c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80099c0:	2300      	movs	r3, #0
 80099c2:	e082      	b.n	8009aca <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d106      	bne.n	80099d8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099ca:	f107 030c 	add.w	r3, r7, #12
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 fec0 	bl	800a754 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099d4:	2301      	movs	r3, #1
 80099d6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099d8:	f001 fba0 	bl	800b11c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099dc:	f000 fc6e 	bl	800a2bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099e0:	f001 fb6a 	bl	800b0b8 <vPortEnterCritical>
 80099e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80099ea:	b25b      	sxtb	r3, r3
 80099ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f0:	d103      	bne.n	80099fa <xQueueSemaphoreTake+0x142>
 80099f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a00:	b25b      	sxtb	r3, r3
 8009a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a06:	d103      	bne.n	8009a10 <xQueueSemaphoreTake+0x158>
 8009a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a10:	f001 fb84 	bl	800b11c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a14:	463a      	mov	r2, r7
 8009a16:	f107 030c 	add.w	r3, r7, #12
 8009a1a:	4611      	mov	r1, r2
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 feaf 	bl	800a780 <xTaskCheckForTimeOut>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d132      	bne.n	8009a8e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009a2a:	f000 f9f5 	bl	8009e18 <prvIsQueueEmpty>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d026      	beq.n	8009a82 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d109      	bne.n	8009a50 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009a3c:	f001 fb3c 	bl	800b0b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f000 ffff 	bl	800aa48 <xTaskPriorityInherit>
 8009a4a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009a4c:	f001 fb66 	bl	800b11c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a52:	3324      	adds	r3, #36	@ 0x24
 8009a54:	683a      	ldr	r2, [r7, #0]
 8009a56:	4611      	mov	r1, r2
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f000 fdf1 	bl	800a640 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009a60:	f000 f988 	bl	8009d74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a64:	f000 fc38 	bl	800a2d8 <xTaskResumeAll>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	f47f af67 	bne.w	800993e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009a70:	4b18      	ldr	r3, [pc, #96]	@ (8009ad4 <xQueueSemaphoreTake+0x21c>)
 8009a72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a76:	601a      	str	r2, [r3, #0]
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	e75d      	b.n	800993e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009a82:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009a84:	f000 f976 	bl	8009d74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a88:	f000 fc26 	bl	800a2d8 <xTaskResumeAll>
 8009a8c:	e757      	b.n	800993e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009a8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009a90:	f000 f970 	bl	8009d74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a94:	f000 fc20 	bl	800a2d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009a9a:	f000 f9bd 	bl	8009e18 <prvIsQueueEmpty>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	f43f af4c 	beq.w	800993e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00d      	beq.n	8009ac8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009aac:	f001 fb04 	bl	800b0b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009ab0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009ab2:	f000 f8b7 	bl	8009c24 <prvGetDisinheritPriorityAfterTimeout>
 8009ab6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f001 f8c0 	bl	800ac44 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009ac4:	f001 fb2a 	bl	800b11c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009ac8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3738      	adds	r7, #56	@ 0x38
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	e000ed04 	.word	0xe000ed04

08009ad8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b08e      	sub	sp, #56	@ 0x38
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d10b      	bne.n	8009b06 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	623b      	str	r3, [r7, #32]
}
 8009b00:	bf00      	nop
 8009b02:	bf00      	nop
 8009b04:	e7fd      	b.n	8009b02 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d103      	bne.n	8009b14 <xQueueReceiveFromISR+0x3c>
 8009b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d101      	bne.n	8009b18 <xQueueReceiveFromISR+0x40>
 8009b14:	2301      	movs	r3, #1
 8009b16:	e000      	b.n	8009b1a <xQueueReceiveFromISR+0x42>
 8009b18:	2300      	movs	r3, #0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10b      	bne.n	8009b36 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b22:	f383 8811 	msr	BASEPRI, r3
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	61fb      	str	r3, [r7, #28]
}
 8009b30:	bf00      	nop
 8009b32:	bf00      	nop
 8009b34:	e7fd      	b.n	8009b32 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b36:	f001 fb9f 	bl	800b278 <vPortValidateInterruptPriority>
	__asm volatile
 8009b3a:	f3ef 8211 	mrs	r2, BASEPRI
 8009b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b42:	f383 8811 	msr	BASEPRI, r3
 8009b46:	f3bf 8f6f 	isb	sy
 8009b4a:	f3bf 8f4f 	dsb	sy
 8009b4e:	61ba      	str	r2, [r7, #24]
 8009b50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009b52:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b5a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d02f      	beq.n	8009bc2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b6c:	68b9      	ldr	r1, [r7, #8]
 8009b6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b70:	f000 f8da 	bl	8009d28 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b76:	1e5a      	subs	r2, r3, #1
 8009b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b7a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009b7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b84:	d112      	bne.n	8009bac <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d016      	beq.n	8009bbc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b90:	3310      	adds	r3, #16
 8009b92:	4618      	mov	r0, r3
 8009b94:	f000 fd7a 	bl	800a68c <xTaskRemoveFromEventList>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00e      	beq.n	8009bbc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00b      	beq.n	8009bbc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	601a      	str	r2, [r3, #0]
 8009baa:	e007      	b.n	8009bbc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009bac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	b25a      	sxtb	r2, r3
 8009bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bc0:	e001      	b.n	8009bc6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bc8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	f383 8811 	msr	BASEPRI, r3
}
 8009bd0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3738      	adds	r7, #56	@ 0x38
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d10b      	bne.n	8009c06 <vQueueDelete+0x2a>
	__asm volatile
 8009bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	60bb      	str	r3, [r7, #8]
}
 8009c00:	bf00      	nop
 8009c02:	bf00      	nop
 8009c04:	e7fd      	b.n	8009c02 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009c06:	68f8      	ldr	r0, [r7, #12]
 8009c08:	f000 f934 	bl	8009e74 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d102      	bne.n	8009c1c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f001 fc3e 	bl	800b498 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009c1c:	bf00      	nop
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d006      	beq.n	8009c42 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f1c3 0307 	rsb	r3, r3, #7
 8009c3e:	60fb      	str	r3, [r7, #12]
 8009c40:	e001      	b.n	8009c46 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009c42:	2300      	movs	r3, #0
 8009c44:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009c46:	68fb      	ldr	r3, [r7, #12]
	}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3714      	adds	r7, #20
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b086      	sub	sp, #24
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009c60:	2300      	movs	r3, #0
 8009c62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d10d      	bne.n	8009c8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d14d      	bne.n	8009d16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f000 ff58 	bl	800ab34 <xTaskPriorityDisinherit>
 8009c84:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	609a      	str	r2, [r3, #8]
 8009c8c:	e043      	b.n	8009d16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d119      	bne.n	8009cc8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6858      	ldr	r0, [r3, #4]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	68b9      	ldr	r1, [r7, #8]
 8009ca0:	f001 fd9c 	bl	800b7dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	685a      	ldr	r2, [r3, #4]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cac:	441a      	add	r2, r3
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	685a      	ldr	r2, [r3, #4]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d32b      	bcc.n	8009d16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	605a      	str	r2, [r3, #4]
 8009cc6:	e026      	b.n	8009d16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	68d8      	ldr	r0, [r3, #12]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	68b9      	ldr	r1, [r7, #8]
 8009cd4:	f001 fd82 	bl	800b7dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	68da      	ldr	r2, [r3, #12]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ce0:	425b      	negs	r3, r3
 8009ce2:	441a      	add	r2, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	68da      	ldr	r2, [r3, #12]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d207      	bcs.n	8009d04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	689a      	ldr	r2, [r3, #8]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cfc:	425b      	negs	r3, r3
 8009cfe:	441a      	add	r2, r3
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	d105      	bne.n	8009d16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d002      	beq.n	8009d16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	3b01      	subs	r3, #1
 8009d14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	1c5a      	adds	r2, r3, #1
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009d1e:	697b      	ldr	r3, [r7, #20]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3718      	adds	r7, #24
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d018      	beq.n	8009d6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	68da      	ldr	r2, [r3, #12]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d42:	441a      	add	r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	68da      	ldr	r2, [r3, #12]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d303      	bcc.n	8009d5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	68d9      	ldr	r1, [r3, #12]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d64:	461a      	mov	r2, r3
 8009d66:	6838      	ldr	r0, [r7, #0]
 8009d68:	f001 fd38 	bl	800b7dc <memcpy>
	}
}
 8009d6c:	bf00      	nop
 8009d6e:	3708      	adds	r7, #8
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009d7c:	f001 f99c 	bl	800b0b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009d86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d88:	e011      	b.n	8009dae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d012      	beq.n	8009db8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	3324      	adds	r3, #36	@ 0x24
 8009d96:	4618      	mov	r0, r3
 8009d98:	f000 fc78 	bl	800a68c <xTaskRemoveFromEventList>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d001      	beq.n	8009da6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009da2:	f000 fd51 	bl	800a848 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009da6:	7bfb      	ldrb	r3, [r7, #15]
 8009da8:	3b01      	subs	r3, #1
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	dce9      	bgt.n	8009d8a <prvUnlockQueue+0x16>
 8009db6:	e000      	b.n	8009dba <prvUnlockQueue+0x46>
					break;
 8009db8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	22ff      	movs	r2, #255	@ 0xff
 8009dbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009dc2:	f001 f9ab 	bl	800b11c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009dc6:	f001 f977 	bl	800b0b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009dd0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009dd2:	e011      	b.n	8009df8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	691b      	ldr	r3, [r3, #16]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d012      	beq.n	8009e02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	3310      	adds	r3, #16
 8009de0:	4618      	mov	r0, r3
 8009de2:	f000 fc53 	bl	800a68c <xTaskRemoveFromEventList>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d001      	beq.n	8009df0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009dec:	f000 fd2c 	bl	800a848 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009df0:	7bbb      	ldrb	r3, [r7, #14]
 8009df2:	3b01      	subs	r3, #1
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009df8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	dce9      	bgt.n	8009dd4 <prvUnlockQueue+0x60>
 8009e00:	e000      	b.n	8009e04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	22ff      	movs	r2, #255	@ 0xff
 8009e08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009e0c:	f001 f986 	bl	800b11c <vPortExitCritical>
}
 8009e10:	bf00      	nop
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e20:	f001 f94a 	bl	800b0b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d102      	bne.n	8009e32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	60fb      	str	r3, [r7, #12]
 8009e30:	e001      	b.n	8009e36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009e32:	2300      	movs	r3, #0
 8009e34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e36:	f001 f971 	bl	800b11c <vPortExitCritical>

	return xReturn;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3710      	adds	r7, #16
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e4c:	f001 f934 	bl	800b0b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d102      	bne.n	8009e62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	60fb      	str	r3, [r7, #12]
 8009e60:	e001      	b.n	8009e66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009e62:	2300      	movs	r3, #0
 8009e64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e66:	f001 f959 	bl	800b11c <vPortExitCritical>

	return xReturn;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	60fb      	str	r3, [r7, #12]
 8009e80:	e016      	b.n	8009eb0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009e82:	4a10      	ldr	r2, [pc, #64]	@ (8009ec4 <vQueueUnregisterQueue+0x50>)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	00db      	lsls	r3, r3, #3
 8009e88:	4413      	add	r3, r2
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d10b      	bne.n	8009eaa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009e92:	4a0c      	ldr	r2, [pc, #48]	@ (8009ec4 <vQueueUnregisterQueue+0x50>)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2100      	movs	r1, #0
 8009e98:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009e9c:	4a09      	ldr	r2, [pc, #36]	@ (8009ec4 <vQueueUnregisterQueue+0x50>)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	00db      	lsls	r3, r3, #3
 8009ea2:	4413      	add	r3, r2
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	605a      	str	r2, [r3, #4]
				break;
 8009ea8:	e006      	b.n	8009eb8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	3301      	adds	r3, #1
 8009eae:	60fb      	str	r3, [r7, #12]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2b07      	cmp	r3, #7
 8009eb4:	d9e5      	bls.n	8009e82 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009eb6:	bf00      	nop
 8009eb8:	bf00      	nop
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr
 8009ec4:	20002600 	.word	0x20002600

08009ec8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b08e      	sub	sp, #56	@ 0x38
 8009ecc:	af04      	add	r7, sp, #16
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	607a      	str	r2, [r7, #4]
 8009ed4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d10b      	bne.n	8009ef4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee0:	f383 8811 	msr	BASEPRI, r3
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	623b      	str	r3, [r7, #32]
}
 8009eee:	bf00      	nop
 8009ef0:	bf00      	nop
 8009ef2:	e7fd      	b.n	8009ef0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d10b      	bne.n	8009f12 <xTaskCreateStatic+0x4a>
	__asm volatile
 8009efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009efe:	f383 8811 	msr	BASEPRI, r3
 8009f02:	f3bf 8f6f 	isb	sy
 8009f06:	f3bf 8f4f 	dsb	sy
 8009f0a:	61fb      	str	r3, [r7, #28]
}
 8009f0c:	bf00      	nop
 8009f0e:	bf00      	nop
 8009f10:	e7fd      	b.n	8009f0e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009f12:	2354      	movs	r3, #84	@ 0x54
 8009f14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	2b54      	cmp	r3, #84	@ 0x54
 8009f1a:	d00b      	beq.n	8009f34 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f20:	f383 8811 	msr	BASEPRI, r3
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	61bb      	str	r3, [r7, #24]
}
 8009f2e:	bf00      	nop
 8009f30:	bf00      	nop
 8009f32:	e7fd      	b.n	8009f30 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009f34:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d01e      	beq.n	8009f7a <xTaskCreateStatic+0xb2>
 8009f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d01b      	beq.n	8009f7a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f44:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f4a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f4e:	2202      	movs	r2, #2
 8009f50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f54:	2300      	movs	r3, #0
 8009f56:	9303      	str	r3, [sp, #12]
 8009f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f5a:	9302      	str	r3, [sp, #8]
 8009f5c:	f107 0314 	add.w	r3, r7, #20
 8009f60:	9301      	str	r3, [sp, #4]
 8009f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	68b9      	ldr	r1, [r7, #8]
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f000 f850 	bl	800a012 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009f74:	f000 f8d6 	bl	800a124 <prvAddNewTaskToReadyList>
 8009f78:	e001      	b.n	8009f7e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f7e:	697b      	ldr	r3, [r7, #20]
	}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3728      	adds	r7, #40	@ 0x28
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b08c      	sub	sp, #48	@ 0x30
 8009f8c:	af04      	add	r7, sp, #16
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	603b      	str	r3, [r7, #0]
 8009f94:	4613      	mov	r3, r2
 8009f96:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009f98:	88fb      	ldrh	r3, [r7, #6]
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f001 f9ad 	bl	800b2fc <pvPortMalloc>
 8009fa2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d00e      	beq.n	8009fc8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009faa:	2054      	movs	r0, #84	@ 0x54
 8009fac:	f001 f9a6 	bl	800b2fc <pvPortMalloc>
 8009fb0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d003      	beq.n	8009fc0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	697a      	ldr	r2, [r7, #20]
 8009fbc:	631a      	str	r2, [r3, #48]	@ 0x30
 8009fbe:	e005      	b.n	8009fcc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009fc0:	6978      	ldr	r0, [r7, #20]
 8009fc2:	f001 fa69 	bl	800b498 <vPortFree>
 8009fc6:	e001      	b.n	8009fcc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d017      	beq.n	800a002 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009fda:	88fa      	ldrh	r2, [r7, #6]
 8009fdc:	2300      	movs	r3, #0
 8009fde:	9303      	str	r3, [sp, #12]
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	9302      	str	r3, [sp, #8]
 8009fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fe6:	9301      	str	r3, [sp, #4]
 8009fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	68b9      	ldr	r1, [r7, #8]
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f000 f80e 	bl	800a012 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ff6:	69f8      	ldr	r0, [r7, #28]
 8009ff8:	f000 f894 	bl	800a124 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	61bb      	str	r3, [r7, #24]
 800a000:	e002      	b.n	800a008 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a002:	f04f 33ff 	mov.w	r3, #4294967295
 800a006:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a008:	69bb      	ldr	r3, [r7, #24]
	}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3720      	adds	r7, #32
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b088      	sub	sp, #32
 800a016:	af00      	add	r7, sp, #0
 800a018:	60f8      	str	r0, [r7, #12]
 800a01a:	60b9      	str	r1, [r7, #8]
 800a01c:	607a      	str	r2, [r7, #4]
 800a01e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a022:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a02a:	3b01      	subs	r3, #1
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	4413      	add	r3, r2
 800a030:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	f023 0307 	bic.w	r3, r3, #7
 800a038:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	f003 0307 	and.w	r3, r3, #7
 800a040:	2b00      	cmp	r3, #0
 800a042:	d00b      	beq.n	800a05c <prvInitialiseNewTask+0x4a>
	__asm volatile
 800a044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a048:	f383 8811 	msr	BASEPRI, r3
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	f3bf 8f4f 	dsb	sy
 800a054:	617b      	str	r3, [r7, #20]
}
 800a056:	bf00      	nop
 800a058:	bf00      	nop
 800a05a:	e7fd      	b.n	800a058 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d01f      	beq.n	800a0a2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a062:	2300      	movs	r3, #0
 800a064:	61fb      	str	r3, [r7, #28]
 800a066:	e012      	b.n	800a08e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	4413      	add	r3, r2
 800a06e:	7819      	ldrb	r1, [r3, #0]
 800a070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	4413      	add	r3, r2
 800a076:	3334      	adds	r3, #52	@ 0x34
 800a078:	460a      	mov	r2, r1
 800a07a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a07c:	68ba      	ldr	r2, [r7, #8]
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	4413      	add	r3, r2
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d006      	beq.n	800a096 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	3301      	adds	r3, #1
 800a08c:	61fb      	str	r3, [r7, #28]
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	2b0f      	cmp	r3, #15
 800a092:	d9e9      	bls.n	800a068 <prvInitialiseNewTask+0x56>
 800a094:	e000      	b.n	800a098 <prvInitialiseNewTask+0x86>
			{
				break;
 800a096:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09a:	2200      	movs	r2, #0
 800a09c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a0a0:	e003      	b.n	800a0aa <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ac:	2b06      	cmp	r3, #6
 800a0ae:	d901      	bls.n	800a0b4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a0b0:	2306      	movs	r3, #6
 800a0b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0b8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0be:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c8:	3304      	adds	r3, #4
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7ff f88b 	bl	80091e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d2:	3318      	adds	r3, #24
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7ff f886 	bl	80091e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e2:	f1c3 0207 	rsb	r2, r3, #7
 800a0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0ee:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a0fe:	683a      	ldr	r2, [r7, #0]
 800a100:	68f9      	ldr	r1, [r7, #12]
 800a102:	69b8      	ldr	r0, [r7, #24]
 800a104:	f000 fea8 	bl	800ae58 <pxPortInitialiseStack>
 800a108:	4602      	mov	r2, r0
 800a10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a10c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a10e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a110:	2b00      	cmp	r3, #0
 800a112:	d002      	beq.n	800a11a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a118:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a11a:	bf00      	nop
 800a11c:	3720      	adds	r7, #32
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
	...

0800a124 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a12c:	f000 ffc4 	bl	800b0b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a130:	4b2a      	ldr	r3, [pc, #168]	@ (800a1dc <prvAddNewTaskToReadyList+0xb8>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	3301      	adds	r3, #1
 800a136:	4a29      	ldr	r2, [pc, #164]	@ (800a1dc <prvAddNewTaskToReadyList+0xb8>)
 800a138:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a13a:	4b29      	ldr	r3, [pc, #164]	@ (800a1e0 <prvAddNewTaskToReadyList+0xbc>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d109      	bne.n	800a156 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a142:	4a27      	ldr	r2, [pc, #156]	@ (800a1e0 <prvAddNewTaskToReadyList+0xbc>)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a148:	4b24      	ldr	r3, [pc, #144]	@ (800a1dc <prvAddNewTaskToReadyList+0xb8>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d110      	bne.n	800a172 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a150:	f000 fb9e 	bl	800a890 <prvInitialiseTaskLists>
 800a154:	e00d      	b.n	800a172 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a156:	4b23      	ldr	r3, [pc, #140]	@ (800a1e4 <prvAddNewTaskToReadyList+0xc0>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d109      	bne.n	800a172 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a15e:	4b20      	ldr	r3, [pc, #128]	@ (800a1e0 <prvAddNewTaskToReadyList+0xbc>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a168:	429a      	cmp	r2, r3
 800a16a:	d802      	bhi.n	800a172 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a16c:	4a1c      	ldr	r2, [pc, #112]	@ (800a1e0 <prvAddNewTaskToReadyList+0xbc>)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a172:	4b1d      	ldr	r3, [pc, #116]	@ (800a1e8 <prvAddNewTaskToReadyList+0xc4>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	3301      	adds	r3, #1
 800a178:	4a1b      	ldr	r2, [pc, #108]	@ (800a1e8 <prvAddNewTaskToReadyList+0xc4>)
 800a17a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a180:	2201      	movs	r2, #1
 800a182:	409a      	lsls	r2, r3
 800a184:	4b19      	ldr	r3, [pc, #100]	@ (800a1ec <prvAddNewTaskToReadyList+0xc8>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4313      	orrs	r3, r2
 800a18a:	4a18      	ldr	r2, [pc, #96]	@ (800a1ec <prvAddNewTaskToReadyList+0xc8>)
 800a18c:	6013      	str	r3, [r2, #0]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a192:	4613      	mov	r3, r2
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	4413      	add	r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	4a15      	ldr	r2, [pc, #84]	@ (800a1f0 <prvAddNewTaskToReadyList+0xcc>)
 800a19c:	441a      	add	r2, r3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	4610      	mov	r0, r2
 800a1a6:	f7ff f82b 	bl	8009200 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a1aa:	f000 ffb7 	bl	800b11c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a1ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a1e4 <prvAddNewTaskToReadyList+0xc0>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00e      	beq.n	800a1d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a1b6:	4b0a      	ldr	r3, [pc, #40]	@ (800a1e0 <prvAddNewTaskToReadyList+0xbc>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d207      	bcs.n	800a1d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a1c4:	4b0b      	ldr	r3, [pc, #44]	@ (800a1f4 <prvAddNewTaskToReadyList+0xd0>)
 800a1c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1ca:	601a      	str	r2, [r3, #0]
 800a1cc:	f3bf 8f4f 	dsb	sy
 800a1d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1d4:	bf00      	nop
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	20002740 	.word	0x20002740
 800a1e0:	20002640 	.word	0x20002640
 800a1e4:	2000274c 	.word	0x2000274c
 800a1e8:	2000275c 	.word	0x2000275c
 800a1ec:	20002748 	.word	0x20002748
 800a1f0:	20002644 	.word	0x20002644
 800a1f4:	e000ed04 	.word	0xe000ed04

0800a1f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b08a      	sub	sp, #40	@ 0x28
 800a1fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a1fe:	2300      	movs	r3, #0
 800a200:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a202:	2300      	movs	r3, #0
 800a204:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a206:	463a      	mov	r2, r7
 800a208:	1d39      	adds	r1, r7, #4
 800a20a:	f107 0308 	add.w	r3, r7, #8
 800a20e:	4618      	mov	r0, r3
 800a210:	f7f6 f9b6 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a214:	6839      	ldr	r1, [r7, #0]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	68ba      	ldr	r2, [r7, #8]
 800a21a:	9202      	str	r2, [sp, #8]
 800a21c:	9301      	str	r3, [sp, #4]
 800a21e:	2300      	movs	r3, #0
 800a220:	9300      	str	r3, [sp, #0]
 800a222:	2300      	movs	r3, #0
 800a224:	460a      	mov	r2, r1
 800a226:	491f      	ldr	r1, [pc, #124]	@ (800a2a4 <vTaskStartScheduler+0xac>)
 800a228:	481f      	ldr	r0, [pc, #124]	@ (800a2a8 <vTaskStartScheduler+0xb0>)
 800a22a:	f7ff fe4d 	bl	8009ec8 <xTaskCreateStatic>
 800a22e:	4603      	mov	r3, r0
 800a230:	4a1e      	ldr	r2, [pc, #120]	@ (800a2ac <vTaskStartScheduler+0xb4>)
 800a232:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a234:	4b1d      	ldr	r3, [pc, #116]	@ (800a2ac <vTaskStartScheduler+0xb4>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d002      	beq.n	800a242 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a23c:	2301      	movs	r3, #1
 800a23e:	617b      	str	r3, [r7, #20]
 800a240:	e001      	b.n	800a246 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a242:	2300      	movs	r3, #0
 800a244:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d116      	bne.n	800a27a <vTaskStartScheduler+0x82>
	__asm volatile
 800a24c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a250:	f383 8811 	msr	BASEPRI, r3
 800a254:	f3bf 8f6f 	isb	sy
 800a258:	f3bf 8f4f 	dsb	sy
 800a25c:	613b      	str	r3, [r7, #16]
}
 800a25e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a260:	4b13      	ldr	r3, [pc, #76]	@ (800a2b0 <vTaskStartScheduler+0xb8>)
 800a262:	f04f 32ff 	mov.w	r2, #4294967295
 800a266:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a268:	4b12      	ldr	r3, [pc, #72]	@ (800a2b4 <vTaskStartScheduler+0xbc>)
 800a26a:	2201      	movs	r2, #1
 800a26c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a26e:	4b12      	ldr	r3, [pc, #72]	@ (800a2b8 <vTaskStartScheduler+0xc0>)
 800a270:	2200      	movs	r2, #0
 800a272:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a274:	f000 fe7c 	bl	800af70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a278:	e00f      	b.n	800a29a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a280:	d10b      	bne.n	800a29a <vTaskStartScheduler+0xa2>
	__asm volatile
 800a282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a286:	f383 8811 	msr	BASEPRI, r3
 800a28a:	f3bf 8f6f 	isb	sy
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	60fb      	str	r3, [r7, #12]
}
 800a294:	bf00      	nop
 800a296:	bf00      	nop
 800a298:	e7fd      	b.n	800a296 <vTaskStartScheduler+0x9e>
}
 800a29a:	bf00      	nop
 800a29c:	3718      	adds	r7, #24
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	0800c1ac 	.word	0x0800c1ac
 800a2a8:	0800a861 	.word	0x0800a861
 800a2ac:	20002764 	.word	0x20002764
 800a2b0:	20002760 	.word	0x20002760
 800a2b4:	2000274c 	.word	0x2000274c
 800a2b8:	20002744 	.word	0x20002744

0800a2bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a2bc:	b480      	push	{r7}
 800a2be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a2c0:	4b04      	ldr	r3, [pc, #16]	@ (800a2d4 <vTaskSuspendAll+0x18>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	4a03      	ldr	r2, [pc, #12]	@ (800a2d4 <vTaskSuspendAll+0x18>)
 800a2c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a2ca:	bf00      	nop
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr
 800a2d4:	20002768 	.word	0x20002768

0800a2d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a2e6:	4b42      	ldr	r3, [pc, #264]	@ (800a3f0 <xTaskResumeAll+0x118>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d10b      	bne.n	800a306 <xTaskResumeAll+0x2e>
	__asm volatile
 800a2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f2:	f383 8811 	msr	BASEPRI, r3
 800a2f6:	f3bf 8f6f 	isb	sy
 800a2fa:	f3bf 8f4f 	dsb	sy
 800a2fe:	603b      	str	r3, [r7, #0]
}
 800a300:	bf00      	nop
 800a302:	bf00      	nop
 800a304:	e7fd      	b.n	800a302 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a306:	f000 fed7 	bl	800b0b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a30a:	4b39      	ldr	r3, [pc, #228]	@ (800a3f0 <xTaskResumeAll+0x118>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	3b01      	subs	r3, #1
 800a310:	4a37      	ldr	r2, [pc, #220]	@ (800a3f0 <xTaskResumeAll+0x118>)
 800a312:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a314:	4b36      	ldr	r3, [pc, #216]	@ (800a3f0 <xTaskResumeAll+0x118>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d161      	bne.n	800a3e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a31c:	4b35      	ldr	r3, [pc, #212]	@ (800a3f4 <xTaskResumeAll+0x11c>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d05d      	beq.n	800a3e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a324:	e02e      	b.n	800a384 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a326:	4b34      	ldr	r3, [pc, #208]	@ (800a3f8 <xTaskResumeAll+0x120>)
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	3318      	adds	r3, #24
 800a332:	4618      	mov	r0, r3
 800a334:	f7fe ffc1 	bl	80092ba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	3304      	adds	r3, #4
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7fe ffbc 	bl	80092ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a346:	2201      	movs	r2, #1
 800a348:	409a      	lsls	r2, r3
 800a34a:	4b2c      	ldr	r3, [pc, #176]	@ (800a3fc <xTaskResumeAll+0x124>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4313      	orrs	r3, r2
 800a350:	4a2a      	ldr	r2, [pc, #168]	@ (800a3fc <xTaskResumeAll+0x124>)
 800a352:	6013      	str	r3, [r2, #0]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a358:	4613      	mov	r3, r2
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	4413      	add	r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4a27      	ldr	r2, [pc, #156]	@ (800a400 <xTaskResumeAll+0x128>)
 800a362:	441a      	add	r2, r3
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	3304      	adds	r3, #4
 800a368:	4619      	mov	r1, r3
 800a36a:	4610      	mov	r0, r2
 800a36c:	f7fe ff48 	bl	8009200 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a374:	4b23      	ldr	r3, [pc, #140]	@ (800a404 <xTaskResumeAll+0x12c>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d302      	bcc.n	800a384 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a37e:	4b22      	ldr	r3, [pc, #136]	@ (800a408 <xTaskResumeAll+0x130>)
 800a380:	2201      	movs	r2, #1
 800a382:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a384:	4b1c      	ldr	r3, [pc, #112]	@ (800a3f8 <xTaskResumeAll+0x120>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1cc      	bne.n	800a326 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d001      	beq.n	800a396 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a392:	f000 fb1b 	bl	800a9cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a396:	4b1d      	ldr	r3, [pc, #116]	@ (800a40c <xTaskResumeAll+0x134>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d010      	beq.n	800a3c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a3a2:	f000 f837 	bl	800a414 <xTaskIncrementTick>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a3ac:	4b16      	ldr	r3, [pc, #88]	@ (800a408 <xTaskResumeAll+0x130>)
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d1f1      	bne.n	800a3a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a3be:	4b13      	ldr	r3, [pc, #76]	@ (800a40c <xTaskResumeAll+0x134>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a3c4:	4b10      	ldr	r3, [pc, #64]	@ (800a408 <xTaskResumeAll+0x130>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d009      	beq.n	800a3e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a3d0:	4b0f      	ldr	r3, [pc, #60]	@ (800a410 <xTaskResumeAll+0x138>)
 800a3d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3d6:	601a      	str	r2, [r3, #0]
 800a3d8:	f3bf 8f4f 	dsb	sy
 800a3dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3e0:	f000 fe9c 	bl	800b11c <vPortExitCritical>

	return xAlreadyYielded;
 800a3e4:	68bb      	ldr	r3, [r7, #8]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20002768 	.word	0x20002768
 800a3f4:	20002740 	.word	0x20002740
 800a3f8:	20002700 	.word	0x20002700
 800a3fc:	20002748 	.word	0x20002748
 800a400:	20002644 	.word	0x20002644
 800a404:	20002640 	.word	0x20002640
 800a408:	20002754 	.word	0x20002754
 800a40c:	20002750 	.word	0x20002750
 800a410:	e000ed04 	.word	0xe000ed04

0800a414 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b086      	sub	sp, #24
 800a418:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a41a:	2300      	movs	r3, #0
 800a41c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a41e:	4b4f      	ldr	r3, [pc, #316]	@ (800a55c <xTaskIncrementTick+0x148>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	f040 808f 	bne.w	800a546 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a428:	4b4d      	ldr	r3, [pc, #308]	@ (800a560 <xTaskIncrementTick+0x14c>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	3301      	adds	r3, #1
 800a42e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a430:	4a4b      	ldr	r2, [pc, #300]	@ (800a560 <xTaskIncrementTick+0x14c>)
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d121      	bne.n	800a480 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a43c:	4b49      	ldr	r3, [pc, #292]	@ (800a564 <xTaskIncrementTick+0x150>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00b      	beq.n	800a45e <xTaskIncrementTick+0x4a>
	__asm volatile
 800a446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a44a:	f383 8811 	msr	BASEPRI, r3
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	603b      	str	r3, [r7, #0]
}
 800a458:	bf00      	nop
 800a45a:	bf00      	nop
 800a45c:	e7fd      	b.n	800a45a <xTaskIncrementTick+0x46>
 800a45e:	4b41      	ldr	r3, [pc, #260]	@ (800a564 <xTaskIncrementTick+0x150>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	60fb      	str	r3, [r7, #12]
 800a464:	4b40      	ldr	r3, [pc, #256]	@ (800a568 <xTaskIncrementTick+0x154>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a3e      	ldr	r2, [pc, #248]	@ (800a564 <xTaskIncrementTick+0x150>)
 800a46a:	6013      	str	r3, [r2, #0]
 800a46c:	4a3e      	ldr	r2, [pc, #248]	@ (800a568 <xTaskIncrementTick+0x154>)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	6013      	str	r3, [r2, #0]
 800a472:	4b3e      	ldr	r3, [pc, #248]	@ (800a56c <xTaskIncrementTick+0x158>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	3301      	adds	r3, #1
 800a478:	4a3c      	ldr	r2, [pc, #240]	@ (800a56c <xTaskIncrementTick+0x158>)
 800a47a:	6013      	str	r3, [r2, #0]
 800a47c:	f000 faa6 	bl	800a9cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a480:	4b3b      	ldr	r3, [pc, #236]	@ (800a570 <xTaskIncrementTick+0x15c>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	693a      	ldr	r2, [r7, #16]
 800a486:	429a      	cmp	r2, r3
 800a488:	d348      	bcc.n	800a51c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a48a:	4b36      	ldr	r3, [pc, #216]	@ (800a564 <xTaskIncrementTick+0x150>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d104      	bne.n	800a49e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a494:	4b36      	ldr	r3, [pc, #216]	@ (800a570 <xTaskIncrementTick+0x15c>)
 800a496:	f04f 32ff 	mov.w	r2, #4294967295
 800a49a:	601a      	str	r2, [r3, #0]
					break;
 800a49c:	e03e      	b.n	800a51c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a49e:	4b31      	ldr	r3, [pc, #196]	@ (800a564 <xTaskIncrementTick+0x150>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a4ae:	693a      	ldr	r2, [r7, #16]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d203      	bcs.n	800a4be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a4b6:	4a2e      	ldr	r2, [pc, #184]	@ (800a570 <xTaskIncrementTick+0x15c>)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a4bc:	e02e      	b.n	800a51c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	3304      	adds	r3, #4
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7fe fef9 	bl	80092ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d004      	beq.n	800a4da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	3318      	adds	r3, #24
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7fe fef0 	bl	80092ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4de:	2201      	movs	r2, #1
 800a4e0:	409a      	lsls	r2, r3
 800a4e2:	4b24      	ldr	r3, [pc, #144]	@ (800a574 <xTaskIncrementTick+0x160>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	4a22      	ldr	r2, [pc, #136]	@ (800a574 <xTaskIncrementTick+0x160>)
 800a4ea:	6013      	str	r3, [r2, #0]
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	4413      	add	r3, r2
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	4a1f      	ldr	r2, [pc, #124]	@ (800a578 <xTaskIncrementTick+0x164>)
 800a4fa:	441a      	add	r2, r3
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	3304      	adds	r3, #4
 800a500:	4619      	mov	r1, r3
 800a502:	4610      	mov	r0, r2
 800a504:	f7fe fe7c 	bl	8009200 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a50c:	4b1b      	ldr	r3, [pc, #108]	@ (800a57c <xTaskIncrementTick+0x168>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a512:	429a      	cmp	r2, r3
 800a514:	d3b9      	bcc.n	800a48a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a516:	2301      	movs	r3, #1
 800a518:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a51a:	e7b6      	b.n	800a48a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a51c:	4b17      	ldr	r3, [pc, #92]	@ (800a57c <xTaskIncrementTick+0x168>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a522:	4915      	ldr	r1, [pc, #84]	@ (800a578 <xTaskIncrementTick+0x164>)
 800a524:	4613      	mov	r3, r2
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	4413      	add	r3, r2
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	440b      	add	r3, r1
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2b01      	cmp	r3, #1
 800a532:	d901      	bls.n	800a538 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a534:	2301      	movs	r3, #1
 800a536:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a538:	4b11      	ldr	r3, [pc, #68]	@ (800a580 <xTaskIncrementTick+0x16c>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d007      	beq.n	800a550 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a540:	2301      	movs	r3, #1
 800a542:	617b      	str	r3, [r7, #20]
 800a544:	e004      	b.n	800a550 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a546:	4b0f      	ldr	r3, [pc, #60]	@ (800a584 <xTaskIncrementTick+0x170>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	3301      	adds	r3, #1
 800a54c:	4a0d      	ldr	r2, [pc, #52]	@ (800a584 <xTaskIncrementTick+0x170>)
 800a54e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a550:	697b      	ldr	r3, [r7, #20]
}
 800a552:	4618      	mov	r0, r3
 800a554:	3718      	adds	r7, #24
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	20002768 	.word	0x20002768
 800a560:	20002744 	.word	0x20002744
 800a564:	200026f8 	.word	0x200026f8
 800a568:	200026fc 	.word	0x200026fc
 800a56c:	20002758 	.word	0x20002758
 800a570:	20002760 	.word	0x20002760
 800a574:	20002748 	.word	0x20002748
 800a578:	20002644 	.word	0x20002644
 800a57c:	20002640 	.word	0x20002640
 800a580:	20002754 	.word	0x20002754
 800a584:	20002750 	.word	0x20002750

0800a588 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a588:	b480      	push	{r7}
 800a58a:	b087      	sub	sp, #28
 800a58c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a58e:	4b27      	ldr	r3, [pc, #156]	@ (800a62c <vTaskSwitchContext+0xa4>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d003      	beq.n	800a59e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a596:	4b26      	ldr	r3, [pc, #152]	@ (800a630 <vTaskSwitchContext+0xa8>)
 800a598:	2201      	movs	r2, #1
 800a59a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a59c:	e040      	b.n	800a620 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a59e:	4b24      	ldr	r3, [pc, #144]	@ (800a630 <vTaskSwitchContext+0xa8>)
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5a4:	4b23      	ldr	r3, [pc, #140]	@ (800a634 <vTaskSwitchContext+0xac>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	fab3 f383 	clz	r3, r3
 800a5b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a5b2:	7afb      	ldrb	r3, [r7, #11]
 800a5b4:	f1c3 031f 	rsb	r3, r3, #31
 800a5b8:	617b      	str	r3, [r7, #20]
 800a5ba:	491f      	ldr	r1, [pc, #124]	@ (800a638 <vTaskSwitchContext+0xb0>)
 800a5bc:	697a      	ldr	r2, [r7, #20]
 800a5be:	4613      	mov	r3, r2
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	4413      	add	r3, r2
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	440b      	add	r3, r1
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d10b      	bne.n	800a5e6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800a5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d2:	f383 8811 	msr	BASEPRI, r3
 800a5d6:	f3bf 8f6f 	isb	sy
 800a5da:	f3bf 8f4f 	dsb	sy
 800a5de:	607b      	str	r3, [r7, #4]
}
 800a5e0:	bf00      	nop
 800a5e2:	bf00      	nop
 800a5e4:	e7fd      	b.n	800a5e2 <vTaskSwitchContext+0x5a>
 800a5e6:	697a      	ldr	r2, [r7, #20]
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	4413      	add	r3, r2
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	4a11      	ldr	r2, [pc, #68]	@ (800a638 <vTaskSwitchContext+0xb0>)
 800a5f2:	4413      	add	r3, r2
 800a5f4:	613b      	str	r3, [r7, #16]
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	685a      	ldr	r2, [r3, #4]
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	605a      	str	r2, [r3, #4]
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	685a      	ldr	r2, [r3, #4]
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	3308      	adds	r3, #8
 800a608:	429a      	cmp	r2, r3
 800a60a:	d104      	bne.n	800a616 <vTaskSwitchContext+0x8e>
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	685a      	ldr	r2, [r3, #4]
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	605a      	str	r2, [r3, #4]
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	4a07      	ldr	r2, [pc, #28]	@ (800a63c <vTaskSwitchContext+0xb4>)
 800a61e:	6013      	str	r3, [r2, #0]
}
 800a620:	bf00      	nop
 800a622:	371c      	adds	r7, #28
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr
 800a62c:	20002768 	.word	0x20002768
 800a630:	20002754 	.word	0x20002754
 800a634:	20002748 	.word	0x20002748
 800a638:	20002644 	.word	0x20002644
 800a63c:	20002640 	.word	0x20002640

0800a640 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d10b      	bne.n	800a668 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a654:	f383 8811 	msr	BASEPRI, r3
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	60fb      	str	r3, [r7, #12]
}
 800a662:	bf00      	nop
 800a664:	bf00      	nop
 800a666:	e7fd      	b.n	800a664 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a668:	4b07      	ldr	r3, [pc, #28]	@ (800a688 <vTaskPlaceOnEventList+0x48>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	3318      	adds	r3, #24
 800a66e:	4619      	mov	r1, r3
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f7fe fde9 	bl	8009248 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a676:	2101      	movs	r1, #1
 800a678:	6838      	ldr	r0, [r7, #0]
 800a67a:	f000 fb87 	bl	800ad8c <prvAddCurrentTaskToDelayedList>
}
 800a67e:	bf00      	nop
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	20002640 	.word	0x20002640

0800a68c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b086      	sub	sp, #24
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d10b      	bne.n	800a6ba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a6a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6a6:	f383 8811 	msr	BASEPRI, r3
 800a6aa:	f3bf 8f6f 	isb	sy
 800a6ae:	f3bf 8f4f 	dsb	sy
 800a6b2:	60fb      	str	r3, [r7, #12]
}
 800a6b4:	bf00      	nop
 800a6b6:	bf00      	nop
 800a6b8:	e7fd      	b.n	800a6b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	3318      	adds	r3, #24
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7fe fdfb 	bl	80092ba <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6c4:	4b1d      	ldr	r3, [pc, #116]	@ (800a73c <xTaskRemoveFromEventList+0xb0>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d11c      	bne.n	800a706 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	3304      	adds	r3, #4
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7fe fdf2 	bl	80092ba <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6da:	2201      	movs	r2, #1
 800a6dc:	409a      	lsls	r2, r3
 800a6de:	4b18      	ldr	r3, [pc, #96]	@ (800a740 <xTaskRemoveFromEventList+0xb4>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	4a16      	ldr	r2, [pc, #88]	@ (800a740 <xTaskRemoveFromEventList+0xb4>)
 800a6e6:	6013      	str	r3, [r2, #0]
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6ec:	4613      	mov	r3, r2
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	4413      	add	r3, r2
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	4a13      	ldr	r2, [pc, #76]	@ (800a744 <xTaskRemoveFromEventList+0xb8>)
 800a6f6:	441a      	add	r2, r3
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	3304      	adds	r3, #4
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	4610      	mov	r0, r2
 800a700:	f7fe fd7e 	bl	8009200 <vListInsertEnd>
 800a704:	e005      	b.n	800a712 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	3318      	adds	r3, #24
 800a70a:	4619      	mov	r1, r3
 800a70c:	480e      	ldr	r0, [pc, #56]	@ (800a748 <xTaskRemoveFromEventList+0xbc>)
 800a70e:	f7fe fd77 	bl	8009200 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a716:	4b0d      	ldr	r3, [pc, #52]	@ (800a74c <xTaskRemoveFromEventList+0xc0>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d905      	bls.n	800a72c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a720:	2301      	movs	r3, #1
 800a722:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a724:	4b0a      	ldr	r3, [pc, #40]	@ (800a750 <xTaskRemoveFromEventList+0xc4>)
 800a726:	2201      	movs	r2, #1
 800a728:	601a      	str	r2, [r3, #0]
 800a72a:	e001      	b.n	800a730 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a72c:	2300      	movs	r3, #0
 800a72e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a730:	697b      	ldr	r3, [r7, #20]
}
 800a732:	4618      	mov	r0, r3
 800a734:	3718      	adds	r7, #24
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	20002768 	.word	0x20002768
 800a740:	20002748 	.word	0x20002748
 800a744:	20002644 	.word	0x20002644
 800a748:	20002700 	.word	0x20002700
 800a74c:	20002640 	.word	0x20002640
 800a750:	20002754 	.word	0x20002754

0800a754 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a75c:	4b06      	ldr	r3, [pc, #24]	@ (800a778 <vTaskInternalSetTimeOutState+0x24>)
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a764:	4b05      	ldr	r3, [pc, #20]	@ (800a77c <vTaskInternalSetTimeOutState+0x28>)
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	605a      	str	r2, [r3, #4]
}
 800a76c:	bf00      	nop
 800a76e:	370c      	adds	r7, #12
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr
 800a778:	20002758 	.word	0x20002758
 800a77c:	20002744 	.word	0x20002744

0800a780 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b088      	sub	sp, #32
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d10b      	bne.n	800a7a8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	613b      	str	r3, [r7, #16]
}
 800a7a2:	bf00      	nop
 800a7a4:	bf00      	nop
 800a7a6:	e7fd      	b.n	800a7a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d10b      	bne.n	800a7c6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7b2:	f383 8811 	msr	BASEPRI, r3
 800a7b6:	f3bf 8f6f 	isb	sy
 800a7ba:	f3bf 8f4f 	dsb	sy
 800a7be:	60fb      	str	r3, [r7, #12]
}
 800a7c0:	bf00      	nop
 800a7c2:	bf00      	nop
 800a7c4:	e7fd      	b.n	800a7c2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a7c6:	f000 fc77 	bl	800b0b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a7ca:	4b1d      	ldr	r3, [pc, #116]	@ (800a840 <xTaskCheckForTimeOut+0xc0>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	69ba      	ldr	r2, [r7, #24]
 800a7d6:	1ad3      	subs	r3, r2, r3
 800a7d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e2:	d102      	bne.n	800a7ea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	61fb      	str	r3, [r7, #28]
 800a7e8:	e023      	b.n	800a832 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	4b15      	ldr	r3, [pc, #84]	@ (800a844 <xTaskCheckForTimeOut+0xc4>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d007      	beq.n	800a806 <xTaskCheckForTimeOut+0x86>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	69ba      	ldr	r2, [r7, #24]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d302      	bcc.n	800a806 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a800:	2301      	movs	r3, #1
 800a802:	61fb      	str	r3, [r7, #28]
 800a804:	e015      	b.n	800a832 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	697a      	ldr	r2, [r7, #20]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d20b      	bcs.n	800a828 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	1ad2      	subs	r2, r2, r3
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f7ff ff99 	bl	800a754 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a822:	2300      	movs	r3, #0
 800a824:	61fb      	str	r3, [r7, #28]
 800a826:	e004      	b.n	800a832 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	2200      	movs	r2, #0
 800a82c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a82e:	2301      	movs	r3, #1
 800a830:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a832:	f000 fc73 	bl	800b11c <vPortExitCritical>

	return xReturn;
 800a836:	69fb      	ldr	r3, [r7, #28]
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3720      	adds	r7, #32
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	20002744 	.word	0x20002744
 800a844:	20002758 	.word	0x20002758

0800a848 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a848:	b480      	push	{r7}
 800a84a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a84c:	4b03      	ldr	r3, [pc, #12]	@ (800a85c <vTaskMissedYield+0x14>)
 800a84e:	2201      	movs	r2, #1
 800a850:	601a      	str	r2, [r3, #0]
}
 800a852:	bf00      	nop
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr
 800a85c:	20002754 	.word	0x20002754

0800a860 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a868:	f000 f852 	bl	800a910 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a86c:	4b06      	ldr	r3, [pc, #24]	@ (800a888 <prvIdleTask+0x28>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	2b01      	cmp	r3, #1
 800a872:	d9f9      	bls.n	800a868 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a874:	4b05      	ldr	r3, [pc, #20]	@ (800a88c <prvIdleTask+0x2c>)
 800a876:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a87a:	601a      	str	r2, [r3, #0]
 800a87c:	f3bf 8f4f 	dsb	sy
 800a880:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a884:	e7f0      	b.n	800a868 <prvIdleTask+0x8>
 800a886:	bf00      	nop
 800a888:	20002644 	.word	0x20002644
 800a88c:	e000ed04 	.word	0xe000ed04

0800a890 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a896:	2300      	movs	r3, #0
 800a898:	607b      	str	r3, [r7, #4]
 800a89a:	e00c      	b.n	800a8b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	4613      	mov	r3, r2
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	4413      	add	r3, r2
 800a8a4:	009b      	lsls	r3, r3, #2
 800a8a6:	4a12      	ldr	r2, [pc, #72]	@ (800a8f0 <prvInitialiseTaskLists+0x60>)
 800a8a8:	4413      	add	r3, r2
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7fe fc7b 	bl	80091a6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	607b      	str	r3, [r7, #4]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2b06      	cmp	r3, #6
 800a8ba:	d9ef      	bls.n	800a89c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a8bc:	480d      	ldr	r0, [pc, #52]	@ (800a8f4 <prvInitialiseTaskLists+0x64>)
 800a8be:	f7fe fc72 	bl	80091a6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a8c2:	480d      	ldr	r0, [pc, #52]	@ (800a8f8 <prvInitialiseTaskLists+0x68>)
 800a8c4:	f7fe fc6f 	bl	80091a6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a8c8:	480c      	ldr	r0, [pc, #48]	@ (800a8fc <prvInitialiseTaskLists+0x6c>)
 800a8ca:	f7fe fc6c 	bl	80091a6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a8ce:	480c      	ldr	r0, [pc, #48]	@ (800a900 <prvInitialiseTaskLists+0x70>)
 800a8d0:	f7fe fc69 	bl	80091a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a8d4:	480b      	ldr	r0, [pc, #44]	@ (800a904 <prvInitialiseTaskLists+0x74>)
 800a8d6:	f7fe fc66 	bl	80091a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a8da:	4b0b      	ldr	r3, [pc, #44]	@ (800a908 <prvInitialiseTaskLists+0x78>)
 800a8dc:	4a05      	ldr	r2, [pc, #20]	@ (800a8f4 <prvInitialiseTaskLists+0x64>)
 800a8de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a8e0:	4b0a      	ldr	r3, [pc, #40]	@ (800a90c <prvInitialiseTaskLists+0x7c>)
 800a8e2:	4a05      	ldr	r2, [pc, #20]	@ (800a8f8 <prvInitialiseTaskLists+0x68>)
 800a8e4:	601a      	str	r2, [r3, #0]
}
 800a8e6:	bf00      	nop
 800a8e8:	3708      	adds	r7, #8
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20002644 	.word	0x20002644
 800a8f4:	200026d0 	.word	0x200026d0
 800a8f8:	200026e4 	.word	0x200026e4
 800a8fc:	20002700 	.word	0x20002700
 800a900:	20002714 	.word	0x20002714
 800a904:	2000272c 	.word	0x2000272c
 800a908:	200026f8 	.word	0x200026f8
 800a90c:	200026fc 	.word	0x200026fc

0800a910 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a916:	e019      	b.n	800a94c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a918:	f000 fbce 	bl	800b0b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a91c:	4b10      	ldr	r3, [pc, #64]	@ (800a960 <prvCheckTasksWaitingTermination+0x50>)
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	3304      	adds	r3, #4
 800a928:	4618      	mov	r0, r3
 800a92a:	f7fe fcc6 	bl	80092ba <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a92e:	4b0d      	ldr	r3, [pc, #52]	@ (800a964 <prvCheckTasksWaitingTermination+0x54>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	3b01      	subs	r3, #1
 800a934:	4a0b      	ldr	r2, [pc, #44]	@ (800a964 <prvCheckTasksWaitingTermination+0x54>)
 800a936:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a938:	4b0b      	ldr	r3, [pc, #44]	@ (800a968 <prvCheckTasksWaitingTermination+0x58>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	3b01      	subs	r3, #1
 800a93e:	4a0a      	ldr	r2, [pc, #40]	@ (800a968 <prvCheckTasksWaitingTermination+0x58>)
 800a940:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a942:	f000 fbeb 	bl	800b11c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 f810 	bl	800a96c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a94c:	4b06      	ldr	r3, [pc, #24]	@ (800a968 <prvCheckTasksWaitingTermination+0x58>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d1e1      	bne.n	800a918 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a954:	bf00      	nop
 800a956:	bf00      	nop
 800a958:	3708      	adds	r7, #8
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	20002714 	.word	0x20002714
 800a964:	20002740 	.word	0x20002740
 800a968:	20002728 	.word	0x20002728

0800a96c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d108      	bne.n	800a990 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a982:	4618      	mov	r0, r3
 800a984:	f000 fd88 	bl	800b498 <vPortFree>
				vPortFree( pxTCB );
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 fd85 	bl	800b498 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a98e:	e019      	b.n	800a9c4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a996:	2b01      	cmp	r3, #1
 800a998:	d103      	bne.n	800a9a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 fd7c 	bl	800b498 <vPortFree>
	}
 800a9a0:	e010      	b.n	800a9c4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a9a8:	2b02      	cmp	r3, #2
 800a9aa:	d00b      	beq.n	800a9c4 <prvDeleteTCB+0x58>
	__asm volatile
 800a9ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9b0:	f383 8811 	msr	BASEPRI, r3
 800a9b4:	f3bf 8f6f 	isb	sy
 800a9b8:	f3bf 8f4f 	dsb	sy
 800a9bc:	60fb      	str	r3, [r7, #12]
}
 800a9be:	bf00      	nop
 800a9c0:	bf00      	nop
 800a9c2:	e7fd      	b.n	800a9c0 <prvDeleteTCB+0x54>
	}
 800a9c4:	bf00      	nop
 800a9c6:	3710      	adds	r7, #16
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9d2:	4b0c      	ldr	r3, [pc, #48]	@ (800aa04 <prvResetNextTaskUnblockTime+0x38>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d104      	bne.n	800a9e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a9dc:	4b0a      	ldr	r3, [pc, #40]	@ (800aa08 <prvResetNextTaskUnblockTime+0x3c>)
 800a9de:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a9e4:	e008      	b.n	800a9f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9e6:	4b07      	ldr	r3, [pc, #28]	@ (800aa04 <prvResetNextTaskUnblockTime+0x38>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	4a04      	ldr	r2, [pc, #16]	@ (800aa08 <prvResetNextTaskUnblockTime+0x3c>)
 800a9f6:	6013      	str	r3, [r2, #0]
}
 800a9f8:	bf00      	nop
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr
 800aa04:	200026f8 	.word	0x200026f8
 800aa08:	20002760 	.word	0x20002760

0800aa0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b083      	sub	sp, #12
 800aa10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa12:	4b0b      	ldr	r3, [pc, #44]	@ (800aa40 <xTaskGetSchedulerState+0x34>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d102      	bne.n	800aa20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	607b      	str	r3, [r7, #4]
 800aa1e:	e008      	b.n	800aa32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa20:	4b08      	ldr	r3, [pc, #32]	@ (800aa44 <xTaskGetSchedulerState+0x38>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d102      	bne.n	800aa2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aa28:	2302      	movs	r3, #2
 800aa2a:	607b      	str	r3, [r7, #4]
 800aa2c:	e001      	b.n	800aa32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aa32:	687b      	ldr	r3, [r7, #4]
	}
 800aa34:	4618      	mov	r0, r3
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr
 800aa40:	2000274c 	.word	0x2000274c
 800aa44:	20002768 	.word	0x20002768

0800aa48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800aa54:	2300      	movs	r3, #0
 800aa56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d05e      	beq.n	800ab1c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa62:	4b31      	ldr	r3, [pc, #196]	@ (800ab28 <xTaskPriorityInherit+0xe0>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d24e      	bcs.n	800ab0a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	699b      	ldr	r3, [r3, #24]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	db06      	blt.n	800aa82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa74:	4b2c      	ldr	r3, [pc, #176]	@ (800ab28 <xTaskPriorityInherit+0xe0>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa7a:	f1c3 0207 	rsb	r2, r3, #7
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	6959      	ldr	r1, [r3, #20]
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	4413      	add	r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	4a26      	ldr	r2, [pc, #152]	@ (800ab2c <xTaskPriorityInherit+0xe4>)
 800aa94:	4413      	add	r3, r2
 800aa96:	4299      	cmp	r1, r3
 800aa98:	d12f      	bne.n	800aafa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	3304      	adds	r3, #4
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7fe fc0b 	bl	80092ba <uxListRemove>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d10a      	bne.n	800aac0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaae:	2201      	movs	r2, #1
 800aab0:	fa02 f303 	lsl.w	r3, r2, r3
 800aab4:	43da      	mvns	r2, r3
 800aab6:	4b1e      	ldr	r3, [pc, #120]	@ (800ab30 <xTaskPriorityInherit+0xe8>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4013      	ands	r3, r2
 800aabc:	4a1c      	ldr	r2, [pc, #112]	@ (800ab30 <xTaskPriorityInherit+0xe8>)
 800aabe:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aac0:	4b19      	ldr	r3, [pc, #100]	@ (800ab28 <xTaskPriorityInherit+0xe0>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aace:	2201      	movs	r2, #1
 800aad0:	409a      	lsls	r2, r3
 800aad2:	4b17      	ldr	r3, [pc, #92]	@ (800ab30 <xTaskPriorityInherit+0xe8>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4313      	orrs	r3, r2
 800aad8:	4a15      	ldr	r2, [pc, #84]	@ (800ab30 <xTaskPriorityInherit+0xe8>)
 800aada:	6013      	str	r3, [r2, #0]
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aae0:	4613      	mov	r3, r2
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	4413      	add	r3, r2
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	4a10      	ldr	r2, [pc, #64]	@ (800ab2c <xTaskPriorityInherit+0xe4>)
 800aaea:	441a      	add	r2, r3
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	3304      	adds	r3, #4
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	4610      	mov	r0, r2
 800aaf4:	f7fe fb84 	bl	8009200 <vListInsertEnd>
 800aaf8:	e004      	b.n	800ab04 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aafa:	4b0b      	ldr	r3, [pc, #44]	@ (800ab28 <xTaskPriorityInherit+0xe0>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ab04:	2301      	movs	r3, #1
 800ab06:	60fb      	str	r3, [r7, #12]
 800ab08:	e008      	b.n	800ab1c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab0e:	4b06      	ldr	r3, [pc, #24]	@ (800ab28 <xTaskPriorityInherit+0xe0>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d201      	bcs.n	800ab1c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
	}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop
 800ab28:	20002640 	.word	0x20002640
 800ab2c:	20002644 	.word	0x20002644
 800ab30:	20002748 	.word	0x20002748

0800ab34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b086      	sub	sp, #24
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ab40:	2300      	movs	r3, #0
 800ab42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d070      	beq.n	800ac2c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ab4a:	4b3b      	ldr	r3, [pc, #236]	@ (800ac38 <xTaskPriorityDisinherit+0x104>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	693a      	ldr	r2, [r7, #16]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d00b      	beq.n	800ab6c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ab54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab58:	f383 8811 	msr	BASEPRI, r3
 800ab5c:	f3bf 8f6f 	isb	sy
 800ab60:	f3bf 8f4f 	dsb	sy
 800ab64:	60fb      	str	r3, [r7, #12]
}
 800ab66:	bf00      	nop
 800ab68:	bf00      	nop
 800ab6a:	e7fd      	b.n	800ab68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d10b      	bne.n	800ab8c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ab74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab78:	f383 8811 	msr	BASEPRI, r3
 800ab7c:	f3bf 8f6f 	isb	sy
 800ab80:	f3bf 8f4f 	dsb	sy
 800ab84:	60bb      	str	r3, [r7, #8]
}
 800ab86:	bf00      	nop
 800ab88:	bf00      	nop
 800ab8a:	e7fd      	b.n	800ab88 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab90:	1e5a      	subs	r2, r3, #1
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d044      	beq.n	800ac2c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d140      	bne.n	800ac2c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	3304      	adds	r3, #4
 800abae:	4618      	mov	r0, r3
 800abb0:	f7fe fb83 	bl	80092ba <uxListRemove>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d115      	bne.n	800abe6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abbe:	491f      	ldr	r1, [pc, #124]	@ (800ac3c <xTaskPriorityDisinherit+0x108>)
 800abc0:	4613      	mov	r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	4413      	add	r3, r2
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	440b      	add	r3, r1
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d10a      	bne.n	800abe6 <xTaskPriorityDisinherit+0xb2>
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abd4:	2201      	movs	r2, #1
 800abd6:	fa02 f303 	lsl.w	r3, r2, r3
 800abda:	43da      	mvns	r2, r3
 800abdc:	4b18      	ldr	r3, [pc, #96]	@ (800ac40 <xTaskPriorityDisinherit+0x10c>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4013      	ands	r3, r2
 800abe2:	4a17      	ldr	r2, [pc, #92]	@ (800ac40 <xTaskPriorityDisinherit+0x10c>)
 800abe4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abf2:	f1c3 0207 	rsb	r2, r3, #7
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abfe:	2201      	movs	r2, #1
 800ac00:	409a      	lsls	r2, r3
 800ac02:	4b0f      	ldr	r3, [pc, #60]	@ (800ac40 <xTaskPriorityDisinherit+0x10c>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	4a0d      	ldr	r2, [pc, #52]	@ (800ac40 <xTaskPriorityDisinherit+0x10c>)
 800ac0a:	6013      	str	r3, [r2, #0]
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac10:	4613      	mov	r3, r2
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	4413      	add	r3, r2
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	4a08      	ldr	r2, [pc, #32]	@ (800ac3c <xTaskPriorityDisinherit+0x108>)
 800ac1a:	441a      	add	r2, r3
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	3304      	adds	r3, #4
 800ac20:	4619      	mov	r1, r3
 800ac22:	4610      	mov	r0, r2
 800ac24:	f7fe faec 	bl	8009200 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac2c:	697b      	ldr	r3, [r7, #20]
	}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3718      	adds	r7, #24
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	20002640 	.word	0x20002640
 800ac3c:	20002644 	.word	0x20002644
 800ac40:	20002748 	.word	0x20002748

0800ac44 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b088      	sub	sp, #32
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ac52:	2301      	movs	r3, #1
 800ac54:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d079      	beq.n	800ad50 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ac5c:	69bb      	ldr	r3, [r7, #24]
 800ac5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d10b      	bne.n	800ac7c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ac64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac68:	f383 8811 	msr	BASEPRI, r3
 800ac6c:	f3bf 8f6f 	isb	sy
 800ac70:	f3bf 8f4f 	dsb	sy
 800ac74:	60fb      	str	r3, [r7, #12]
}
 800ac76:	bf00      	nop
 800ac78:	bf00      	nop
 800ac7a:	e7fd      	b.n	800ac78 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac80:	683a      	ldr	r2, [r7, #0]
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d902      	bls.n	800ac8c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	61fb      	str	r3, [r7, #28]
 800ac8a:	e002      	b.n	800ac92 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac90:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac96:	69fa      	ldr	r2, [r7, #28]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d059      	beq.n	800ad50 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aca0:	697a      	ldr	r2, [r7, #20]
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d154      	bne.n	800ad50 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800aca6:	4b2c      	ldr	r3, [pc, #176]	@ (800ad58 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	69ba      	ldr	r2, [r7, #24]
 800acac:	429a      	cmp	r2, r3
 800acae:	d10b      	bne.n	800acc8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800acb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acb4:	f383 8811 	msr	BASEPRI, r3
 800acb8:	f3bf 8f6f 	isb	sy
 800acbc:	f3bf 8f4f 	dsb	sy
 800acc0:	60bb      	str	r3, [r7, #8]
}
 800acc2:	bf00      	nop
 800acc4:	bf00      	nop
 800acc6:	e7fd      	b.n	800acc4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800accc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	69fa      	ldr	r2, [r7, #28]
 800acd2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800acd4:	69bb      	ldr	r3, [r7, #24]
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	db04      	blt.n	800ace6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	f1c3 0207 	rsb	r2, r3, #7
 800ace2:	69bb      	ldr	r3, [r7, #24]
 800ace4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ace6:	69bb      	ldr	r3, [r7, #24]
 800ace8:	6959      	ldr	r1, [r3, #20]
 800acea:	693a      	ldr	r2, [r7, #16]
 800acec:	4613      	mov	r3, r2
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	4413      	add	r3, r2
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	4a19      	ldr	r2, [pc, #100]	@ (800ad5c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800acf6:	4413      	add	r3, r2
 800acf8:	4299      	cmp	r1, r3
 800acfa:	d129      	bne.n	800ad50 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	3304      	adds	r3, #4
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7fe fada 	bl	80092ba <uxListRemove>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d10a      	bne.n	800ad22 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ad0c:	69bb      	ldr	r3, [r7, #24]
 800ad0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad10:	2201      	movs	r2, #1
 800ad12:	fa02 f303 	lsl.w	r3, r2, r3
 800ad16:	43da      	mvns	r2, r3
 800ad18:	4b11      	ldr	r3, [pc, #68]	@ (800ad60 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4013      	ands	r3, r2
 800ad1e:	4a10      	ldr	r2, [pc, #64]	@ (800ad60 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ad20:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ad22:	69bb      	ldr	r3, [r7, #24]
 800ad24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad26:	2201      	movs	r2, #1
 800ad28:	409a      	lsls	r2, r3
 800ad2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ad60 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	4a0b      	ldr	r2, [pc, #44]	@ (800ad60 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ad32:	6013      	str	r3, [r2, #0]
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad38:	4613      	mov	r3, r2
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	4413      	add	r3, r2
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	4a06      	ldr	r2, [pc, #24]	@ (800ad5c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ad42:	441a      	add	r2, r3
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	3304      	adds	r3, #4
 800ad48:	4619      	mov	r1, r3
 800ad4a:	4610      	mov	r0, r2
 800ad4c:	f7fe fa58 	bl	8009200 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad50:	bf00      	nop
 800ad52:	3720      	adds	r7, #32
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	20002640 	.word	0x20002640
 800ad5c:	20002644 	.word	0x20002644
 800ad60:	20002748 	.word	0x20002748

0800ad64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ad64:	b480      	push	{r7}
 800ad66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ad68:	4b07      	ldr	r3, [pc, #28]	@ (800ad88 <pvTaskIncrementMutexHeldCount+0x24>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d004      	beq.n	800ad7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ad70:	4b05      	ldr	r3, [pc, #20]	@ (800ad88 <pvTaskIncrementMutexHeldCount+0x24>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ad76:	3201      	adds	r2, #1
 800ad78:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800ad7a:	4b03      	ldr	r3, [pc, #12]	@ (800ad88 <pvTaskIncrementMutexHeldCount+0x24>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
	}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr
 800ad88:	20002640 	.word	0x20002640

0800ad8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad96:	4b29      	ldr	r3, [pc, #164]	@ (800ae3c <prvAddCurrentTaskToDelayedList+0xb0>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad9c:	4b28      	ldr	r3, [pc, #160]	@ (800ae40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	3304      	adds	r3, #4
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7fe fa89 	bl	80092ba <uxListRemove>
 800ada8:	4603      	mov	r3, r0
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d10b      	bne.n	800adc6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800adae:	4b24      	ldr	r3, [pc, #144]	@ (800ae40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adb4:	2201      	movs	r2, #1
 800adb6:	fa02 f303 	lsl.w	r3, r2, r3
 800adba:	43da      	mvns	r2, r3
 800adbc:	4b21      	ldr	r3, [pc, #132]	@ (800ae44 <prvAddCurrentTaskToDelayedList+0xb8>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4013      	ands	r3, r2
 800adc2:	4a20      	ldr	r2, [pc, #128]	@ (800ae44 <prvAddCurrentTaskToDelayedList+0xb8>)
 800adc4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adcc:	d10a      	bne.n	800ade4 <prvAddCurrentTaskToDelayedList+0x58>
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d007      	beq.n	800ade4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800add4:	4b1a      	ldr	r3, [pc, #104]	@ (800ae40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	3304      	adds	r3, #4
 800adda:	4619      	mov	r1, r3
 800addc:	481a      	ldr	r0, [pc, #104]	@ (800ae48 <prvAddCurrentTaskToDelayedList+0xbc>)
 800adde:	f7fe fa0f 	bl	8009200 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ade2:	e026      	b.n	800ae32 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	4413      	add	r3, r2
 800adea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800adec:	4b14      	ldr	r3, [pc, #80]	@ (800ae40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	68ba      	ldr	r2, [r7, #8]
 800adf2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800adf4:	68ba      	ldr	r2, [r7, #8]
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d209      	bcs.n	800ae10 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adfc:	4b13      	ldr	r3, [pc, #76]	@ (800ae4c <prvAddCurrentTaskToDelayedList+0xc0>)
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	4b0f      	ldr	r3, [pc, #60]	@ (800ae40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	3304      	adds	r3, #4
 800ae06:	4619      	mov	r1, r3
 800ae08:	4610      	mov	r0, r2
 800ae0a:	f7fe fa1d 	bl	8009248 <vListInsert>
}
 800ae0e:	e010      	b.n	800ae32 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae10:	4b0f      	ldr	r3, [pc, #60]	@ (800ae50 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	4b0a      	ldr	r3, [pc, #40]	@ (800ae40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	3304      	adds	r3, #4
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	4610      	mov	r0, r2
 800ae1e:	f7fe fa13 	bl	8009248 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ae22:	4b0c      	ldr	r3, [pc, #48]	@ (800ae54 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	68ba      	ldr	r2, [r7, #8]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d202      	bcs.n	800ae32 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ae2c:	4a09      	ldr	r2, [pc, #36]	@ (800ae54 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	6013      	str	r3, [r2, #0]
}
 800ae32:	bf00      	nop
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	20002744 	.word	0x20002744
 800ae40:	20002640 	.word	0x20002640
 800ae44:	20002748 	.word	0x20002748
 800ae48:	2000272c 	.word	0x2000272c
 800ae4c:	200026fc 	.word	0x200026fc
 800ae50:	200026f8 	.word	0x200026f8
 800ae54:	20002760 	.word	0x20002760

0800ae58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b085      	sub	sp, #20
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	3b04      	subs	r3, #4
 800ae68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ae70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	3b04      	subs	r3, #4
 800ae76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	f023 0201 	bic.w	r2, r3, #1
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	3b04      	subs	r3, #4
 800ae86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ae88:	4a0c      	ldr	r2, [pc, #48]	@ (800aebc <pxPortInitialiseStack+0x64>)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	3b14      	subs	r3, #20
 800ae92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	3b04      	subs	r3, #4
 800ae9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f06f 0202 	mvn.w	r2, #2
 800aea6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	3b20      	subs	r3, #32
 800aeac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aeae:	68fb      	ldr	r3, [r7, #12]
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3714      	adds	r7, #20
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr
 800aebc:	0800aec1 	.word	0x0800aec1

0800aec0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aec0:	b480      	push	{r7}
 800aec2:	b085      	sub	sp, #20
 800aec4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aec6:	2300      	movs	r3, #0
 800aec8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aeca:	4b13      	ldr	r3, [pc, #76]	@ (800af18 <prvTaskExitError+0x58>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed2:	d00b      	beq.n	800aeec <prvTaskExitError+0x2c>
	__asm volatile
 800aed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aed8:	f383 8811 	msr	BASEPRI, r3
 800aedc:	f3bf 8f6f 	isb	sy
 800aee0:	f3bf 8f4f 	dsb	sy
 800aee4:	60fb      	str	r3, [r7, #12]
}
 800aee6:	bf00      	nop
 800aee8:	bf00      	nop
 800aeea:	e7fd      	b.n	800aee8 <prvTaskExitError+0x28>
	__asm volatile
 800aeec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef0:	f383 8811 	msr	BASEPRI, r3
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	f3bf 8f4f 	dsb	sy
 800aefc:	60bb      	str	r3, [r7, #8]
}
 800aefe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af00:	bf00      	nop
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d0fc      	beq.n	800af02 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800af08:	bf00      	nop
 800af0a:	bf00      	nop
 800af0c:	3714      	adds	r7, #20
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop
 800af18:	20000024 	.word	0x20000024
 800af1c:	00000000 	.word	0x00000000

0800af20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800af20:	4b07      	ldr	r3, [pc, #28]	@ (800af40 <pxCurrentTCBConst2>)
 800af22:	6819      	ldr	r1, [r3, #0]
 800af24:	6808      	ldr	r0, [r1, #0]
 800af26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af2a:	f380 8809 	msr	PSP, r0
 800af2e:	f3bf 8f6f 	isb	sy
 800af32:	f04f 0000 	mov.w	r0, #0
 800af36:	f380 8811 	msr	BASEPRI, r0
 800af3a:	4770      	bx	lr
 800af3c:	f3af 8000 	nop.w

0800af40 <pxCurrentTCBConst2>:
 800af40:	20002640 	.word	0x20002640
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800af44:	bf00      	nop
 800af46:	bf00      	nop

0800af48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800af48:	4808      	ldr	r0, [pc, #32]	@ (800af6c <prvPortStartFirstTask+0x24>)
 800af4a:	6800      	ldr	r0, [r0, #0]
 800af4c:	6800      	ldr	r0, [r0, #0]
 800af4e:	f380 8808 	msr	MSP, r0
 800af52:	f04f 0000 	mov.w	r0, #0
 800af56:	f380 8814 	msr	CONTROL, r0
 800af5a:	b662      	cpsie	i
 800af5c:	b661      	cpsie	f
 800af5e:	f3bf 8f4f 	dsb	sy
 800af62:	f3bf 8f6f 	isb	sy
 800af66:	df00      	svc	0
 800af68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800af6a:	bf00      	nop
 800af6c:	e000ed08 	.word	0xe000ed08

0800af70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b086      	sub	sp, #24
 800af74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800af76:	4b47      	ldr	r3, [pc, #284]	@ (800b094 <xPortStartScheduler+0x124>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a47      	ldr	r2, [pc, #284]	@ (800b098 <xPortStartScheduler+0x128>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d10b      	bne.n	800af98 <xPortStartScheduler+0x28>
	__asm volatile
 800af80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af84:	f383 8811 	msr	BASEPRI, r3
 800af88:	f3bf 8f6f 	isb	sy
 800af8c:	f3bf 8f4f 	dsb	sy
 800af90:	613b      	str	r3, [r7, #16]
}
 800af92:	bf00      	nop
 800af94:	bf00      	nop
 800af96:	e7fd      	b.n	800af94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800af98:	4b3e      	ldr	r3, [pc, #248]	@ (800b094 <xPortStartScheduler+0x124>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4a3f      	ldr	r2, [pc, #252]	@ (800b09c <xPortStartScheduler+0x12c>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d10b      	bne.n	800afba <xPortStartScheduler+0x4a>
	__asm volatile
 800afa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa6:	f383 8811 	msr	BASEPRI, r3
 800afaa:	f3bf 8f6f 	isb	sy
 800afae:	f3bf 8f4f 	dsb	sy
 800afb2:	60fb      	str	r3, [r7, #12]
}
 800afb4:	bf00      	nop
 800afb6:	bf00      	nop
 800afb8:	e7fd      	b.n	800afb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800afba:	4b39      	ldr	r3, [pc, #228]	@ (800b0a0 <xPortStartScheduler+0x130>)
 800afbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	22ff      	movs	r2, #255	@ 0xff
 800afca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800afd4:	78fb      	ldrb	r3, [r7, #3]
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800afdc:	b2da      	uxtb	r2, r3
 800afde:	4b31      	ldr	r3, [pc, #196]	@ (800b0a4 <xPortStartScheduler+0x134>)
 800afe0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800afe2:	4b31      	ldr	r3, [pc, #196]	@ (800b0a8 <xPortStartScheduler+0x138>)
 800afe4:	2207      	movs	r2, #7
 800afe6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800afe8:	e009      	b.n	800affe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800afea:	4b2f      	ldr	r3, [pc, #188]	@ (800b0a8 <xPortStartScheduler+0x138>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	3b01      	subs	r3, #1
 800aff0:	4a2d      	ldr	r2, [pc, #180]	@ (800b0a8 <xPortStartScheduler+0x138>)
 800aff2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aff4:	78fb      	ldrb	r3, [r7, #3]
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	005b      	lsls	r3, r3, #1
 800affa:	b2db      	uxtb	r3, r3
 800affc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800affe:	78fb      	ldrb	r3, [r7, #3]
 800b000:	b2db      	uxtb	r3, r3
 800b002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b006:	2b80      	cmp	r3, #128	@ 0x80
 800b008:	d0ef      	beq.n	800afea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b00a:	4b27      	ldr	r3, [pc, #156]	@ (800b0a8 <xPortStartScheduler+0x138>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f1c3 0307 	rsb	r3, r3, #7
 800b012:	2b04      	cmp	r3, #4
 800b014:	d00b      	beq.n	800b02e <xPortStartScheduler+0xbe>
	__asm volatile
 800b016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b01a:	f383 8811 	msr	BASEPRI, r3
 800b01e:	f3bf 8f6f 	isb	sy
 800b022:	f3bf 8f4f 	dsb	sy
 800b026:	60bb      	str	r3, [r7, #8]
}
 800b028:	bf00      	nop
 800b02a:	bf00      	nop
 800b02c:	e7fd      	b.n	800b02a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b02e:	4b1e      	ldr	r3, [pc, #120]	@ (800b0a8 <xPortStartScheduler+0x138>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	021b      	lsls	r3, r3, #8
 800b034:	4a1c      	ldr	r2, [pc, #112]	@ (800b0a8 <xPortStartScheduler+0x138>)
 800b036:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b038:	4b1b      	ldr	r3, [pc, #108]	@ (800b0a8 <xPortStartScheduler+0x138>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b040:	4a19      	ldr	r2, [pc, #100]	@ (800b0a8 <xPortStartScheduler+0x138>)
 800b042:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	b2da      	uxtb	r2, r3
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b04c:	4b17      	ldr	r3, [pc, #92]	@ (800b0ac <xPortStartScheduler+0x13c>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a16      	ldr	r2, [pc, #88]	@ (800b0ac <xPortStartScheduler+0x13c>)
 800b052:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b056:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b058:	4b14      	ldr	r3, [pc, #80]	@ (800b0ac <xPortStartScheduler+0x13c>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a13      	ldr	r2, [pc, #76]	@ (800b0ac <xPortStartScheduler+0x13c>)
 800b05e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b062:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b064:	f000 f8da 	bl	800b21c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b068:	4b11      	ldr	r3, [pc, #68]	@ (800b0b0 <xPortStartScheduler+0x140>)
 800b06a:	2200      	movs	r2, #0
 800b06c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b06e:	f000 f8f9 	bl	800b264 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b072:	4b10      	ldr	r3, [pc, #64]	@ (800b0b4 <xPortStartScheduler+0x144>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a0f      	ldr	r2, [pc, #60]	@ (800b0b4 <xPortStartScheduler+0x144>)
 800b078:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b07c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b07e:	f7ff ff63 	bl	800af48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b082:	f7ff fa81 	bl	800a588 <vTaskSwitchContext>
	prvTaskExitError();
 800b086:	f7ff ff1b 	bl	800aec0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b08a:	2300      	movs	r3, #0
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3718      	adds	r7, #24
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	e000ed00 	.word	0xe000ed00
 800b098:	410fc271 	.word	0x410fc271
 800b09c:	410fc270 	.word	0x410fc270
 800b0a0:	e000e400 	.word	0xe000e400
 800b0a4:	2000276c 	.word	0x2000276c
 800b0a8:	20002770 	.word	0x20002770
 800b0ac:	e000ed20 	.word	0xe000ed20
 800b0b0:	20000024 	.word	0x20000024
 800b0b4:	e000ef34 	.word	0xe000ef34

0800b0b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
	__asm volatile
 800b0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0c2:	f383 8811 	msr	BASEPRI, r3
 800b0c6:	f3bf 8f6f 	isb	sy
 800b0ca:	f3bf 8f4f 	dsb	sy
 800b0ce:	607b      	str	r3, [r7, #4]
}
 800b0d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b0d2:	4b10      	ldr	r3, [pc, #64]	@ (800b114 <vPortEnterCritical+0x5c>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	4a0e      	ldr	r2, [pc, #56]	@ (800b114 <vPortEnterCritical+0x5c>)
 800b0da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b0dc:	4b0d      	ldr	r3, [pc, #52]	@ (800b114 <vPortEnterCritical+0x5c>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d110      	bne.n	800b106 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b0e4:	4b0c      	ldr	r3, [pc, #48]	@ (800b118 <vPortEnterCritical+0x60>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d00b      	beq.n	800b106 <vPortEnterCritical+0x4e>
	__asm volatile
 800b0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0f2:	f383 8811 	msr	BASEPRI, r3
 800b0f6:	f3bf 8f6f 	isb	sy
 800b0fa:	f3bf 8f4f 	dsb	sy
 800b0fe:	603b      	str	r3, [r7, #0]
}
 800b100:	bf00      	nop
 800b102:	bf00      	nop
 800b104:	e7fd      	b.n	800b102 <vPortEnterCritical+0x4a>
	}
}
 800b106:	bf00      	nop
 800b108:	370c      	adds	r7, #12
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop
 800b114:	20000024 	.word	0x20000024
 800b118:	e000ed04 	.word	0xe000ed04

0800b11c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b122:	4b12      	ldr	r3, [pc, #72]	@ (800b16c <vPortExitCritical+0x50>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d10b      	bne.n	800b142 <vPortExitCritical+0x26>
	__asm volatile
 800b12a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b12e:	f383 8811 	msr	BASEPRI, r3
 800b132:	f3bf 8f6f 	isb	sy
 800b136:	f3bf 8f4f 	dsb	sy
 800b13a:	607b      	str	r3, [r7, #4]
}
 800b13c:	bf00      	nop
 800b13e:	bf00      	nop
 800b140:	e7fd      	b.n	800b13e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b142:	4b0a      	ldr	r3, [pc, #40]	@ (800b16c <vPortExitCritical+0x50>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	3b01      	subs	r3, #1
 800b148:	4a08      	ldr	r2, [pc, #32]	@ (800b16c <vPortExitCritical+0x50>)
 800b14a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b14c:	4b07      	ldr	r3, [pc, #28]	@ (800b16c <vPortExitCritical+0x50>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d105      	bne.n	800b160 <vPortExitCritical+0x44>
 800b154:	2300      	movs	r3, #0
 800b156:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	f383 8811 	msr	BASEPRI, r3
}
 800b15e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b160:	bf00      	nop
 800b162:	370c      	adds	r7, #12
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr
 800b16c:	20000024 	.word	0x20000024

0800b170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b170:	f3ef 8009 	mrs	r0, PSP
 800b174:	f3bf 8f6f 	isb	sy
 800b178:	4b15      	ldr	r3, [pc, #84]	@ (800b1d0 <pxCurrentTCBConst>)
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	f01e 0f10 	tst.w	lr, #16
 800b180:	bf08      	it	eq
 800b182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b18a:	6010      	str	r0, [r2, #0]
 800b18c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b190:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b194:	f380 8811 	msr	BASEPRI, r0
 800b198:	f3bf 8f4f 	dsb	sy
 800b19c:	f3bf 8f6f 	isb	sy
 800b1a0:	f7ff f9f2 	bl	800a588 <vTaskSwitchContext>
 800b1a4:	f04f 0000 	mov.w	r0, #0
 800b1a8:	f380 8811 	msr	BASEPRI, r0
 800b1ac:	bc09      	pop	{r0, r3}
 800b1ae:	6819      	ldr	r1, [r3, #0]
 800b1b0:	6808      	ldr	r0, [r1, #0]
 800b1b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b6:	f01e 0f10 	tst.w	lr, #16
 800b1ba:	bf08      	it	eq
 800b1bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b1c0:	f380 8809 	msr	PSP, r0
 800b1c4:	f3bf 8f6f 	isb	sy
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop
 800b1cc:	f3af 8000 	nop.w

0800b1d0 <pxCurrentTCBConst>:
 800b1d0:	20002640 	.word	0x20002640
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b1d4:	bf00      	nop
 800b1d6:	bf00      	nop

0800b1d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
	__asm volatile
 800b1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e2:	f383 8811 	msr	BASEPRI, r3
 800b1e6:	f3bf 8f6f 	isb	sy
 800b1ea:	f3bf 8f4f 	dsb	sy
 800b1ee:	607b      	str	r3, [r7, #4]
}
 800b1f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b1f2:	f7ff f90f 	bl	800a414 <xTaskIncrementTick>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d003      	beq.n	800b204 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b1fc:	4b06      	ldr	r3, [pc, #24]	@ (800b218 <SysTick_Handler+0x40>)
 800b1fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b202:	601a      	str	r2, [r3, #0]
 800b204:	2300      	movs	r3, #0
 800b206:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	f383 8811 	msr	BASEPRI, r3
}
 800b20e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b210:	bf00      	nop
 800b212:	3708      	adds	r7, #8
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}
 800b218:	e000ed04 	.word	0xe000ed04

0800b21c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b21c:	b480      	push	{r7}
 800b21e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b220:	4b0b      	ldr	r3, [pc, #44]	@ (800b250 <vPortSetupTimerInterrupt+0x34>)
 800b222:	2200      	movs	r2, #0
 800b224:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b226:	4b0b      	ldr	r3, [pc, #44]	@ (800b254 <vPortSetupTimerInterrupt+0x38>)
 800b228:	2200      	movs	r2, #0
 800b22a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b22c:	4b0a      	ldr	r3, [pc, #40]	@ (800b258 <vPortSetupTimerInterrupt+0x3c>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a0a      	ldr	r2, [pc, #40]	@ (800b25c <vPortSetupTimerInterrupt+0x40>)
 800b232:	fba2 2303 	umull	r2, r3, r2, r3
 800b236:	099b      	lsrs	r3, r3, #6
 800b238:	4a09      	ldr	r2, [pc, #36]	@ (800b260 <vPortSetupTimerInterrupt+0x44>)
 800b23a:	3b01      	subs	r3, #1
 800b23c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b23e:	4b04      	ldr	r3, [pc, #16]	@ (800b250 <vPortSetupTimerInterrupt+0x34>)
 800b240:	2207      	movs	r2, #7
 800b242:	601a      	str	r2, [r3, #0]
}
 800b244:	bf00      	nop
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr
 800b24e:	bf00      	nop
 800b250:	e000e010 	.word	0xe000e010
 800b254:	e000e018 	.word	0xe000e018
 800b258:	20000000 	.word	0x20000000
 800b25c:	10624dd3 	.word	0x10624dd3
 800b260:	e000e014 	.word	0xe000e014

0800b264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b264:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b274 <vPortEnableVFP+0x10>
 800b268:	6801      	ldr	r1, [r0, #0]
 800b26a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b26e:	6001      	str	r1, [r0, #0]
 800b270:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b272:	bf00      	nop
 800b274:	e000ed88 	.word	0xe000ed88

0800b278 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b278:	b480      	push	{r7}
 800b27a:	b085      	sub	sp, #20
 800b27c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b27e:	f3ef 8305 	mrs	r3, IPSR
 800b282:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2b0f      	cmp	r3, #15
 800b288:	d915      	bls.n	800b2b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b28a:	4a18      	ldr	r2, [pc, #96]	@ (800b2ec <vPortValidateInterruptPriority+0x74>)
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	4413      	add	r3, r2
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b294:	4b16      	ldr	r3, [pc, #88]	@ (800b2f0 <vPortValidateInterruptPriority+0x78>)
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	7afa      	ldrb	r2, [r7, #11]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d20b      	bcs.n	800b2b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a2:	f383 8811 	msr	BASEPRI, r3
 800b2a6:	f3bf 8f6f 	isb	sy
 800b2aa:	f3bf 8f4f 	dsb	sy
 800b2ae:	607b      	str	r3, [r7, #4]
}
 800b2b0:	bf00      	nop
 800b2b2:	bf00      	nop
 800b2b4:	e7fd      	b.n	800b2b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b2b6:	4b0f      	ldr	r3, [pc, #60]	@ (800b2f4 <vPortValidateInterruptPriority+0x7c>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b2be:	4b0e      	ldr	r3, [pc, #56]	@ (800b2f8 <vPortValidateInterruptPriority+0x80>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d90b      	bls.n	800b2de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ca:	f383 8811 	msr	BASEPRI, r3
 800b2ce:	f3bf 8f6f 	isb	sy
 800b2d2:	f3bf 8f4f 	dsb	sy
 800b2d6:	603b      	str	r3, [r7, #0]
}
 800b2d8:	bf00      	nop
 800b2da:	bf00      	nop
 800b2dc:	e7fd      	b.n	800b2da <vPortValidateInterruptPriority+0x62>
	}
 800b2de:	bf00      	nop
 800b2e0:	3714      	adds	r7, #20
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e8:	4770      	bx	lr
 800b2ea:	bf00      	nop
 800b2ec:	e000e3f0 	.word	0xe000e3f0
 800b2f0:	2000276c 	.word	0x2000276c
 800b2f4:	e000ed0c 	.word	0xe000ed0c
 800b2f8:	20002770 	.word	0x20002770

0800b2fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b08a      	sub	sp, #40	@ 0x28
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b304:	2300      	movs	r3, #0
 800b306:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b308:	f7fe ffd8 	bl	800a2bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b30c:	4b5c      	ldr	r3, [pc, #368]	@ (800b480 <pvPortMalloc+0x184>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d101      	bne.n	800b318 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b314:	f000 f924 	bl	800b560 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b318:	4b5a      	ldr	r3, [pc, #360]	@ (800b484 <pvPortMalloc+0x188>)
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	4013      	ands	r3, r2
 800b320:	2b00      	cmp	r3, #0
 800b322:	f040 8095 	bne.w	800b450 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d01e      	beq.n	800b36a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b32c:	2208      	movs	r2, #8
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4413      	add	r3, r2
 800b332:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f003 0307 	and.w	r3, r3, #7
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d015      	beq.n	800b36a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f023 0307 	bic.w	r3, r3, #7
 800b344:	3308      	adds	r3, #8
 800b346:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f003 0307 	and.w	r3, r3, #7
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00b      	beq.n	800b36a <pvPortMalloc+0x6e>
	__asm volatile
 800b352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b356:	f383 8811 	msr	BASEPRI, r3
 800b35a:	f3bf 8f6f 	isb	sy
 800b35e:	f3bf 8f4f 	dsb	sy
 800b362:	617b      	str	r3, [r7, #20]
}
 800b364:	bf00      	nop
 800b366:	bf00      	nop
 800b368:	e7fd      	b.n	800b366 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d06f      	beq.n	800b450 <pvPortMalloc+0x154>
 800b370:	4b45      	ldr	r3, [pc, #276]	@ (800b488 <pvPortMalloc+0x18c>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	429a      	cmp	r2, r3
 800b378:	d86a      	bhi.n	800b450 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b37a:	4b44      	ldr	r3, [pc, #272]	@ (800b48c <pvPortMalloc+0x190>)
 800b37c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b37e:	4b43      	ldr	r3, [pc, #268]	@ (800b48c <pvPortMalloc+0x190>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b384:	e004      	b.n	800b390 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b388:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	429a      	cmp	r2, r3
 800b398:	d903      	bls.n	800b3a2 <pvPortMalloc+0xa6>
 800b39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d1f1      	bne.n	800b386 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b3a2:	4b37      	ldr	r3, [pc, #220]	@ (800b480 <pvPortMalloc+0x184>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d051      	beq.n	800b450 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b3ac:	6a3b      	ldr	r3, [r7, #32]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	2208      	movs	r2, #8
 800b3b2:	4413      	add	r3, r2
 800b3b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	6a3b      	ldr	r3, [r7, #32]
 800b3bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c0:	685a      	ldr	r2, [r3, #4]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	1ad2      	subs	r2, r2, r3
 800b3c6:	2308      	movs	r3, #8
 800b3c8:	005b      	lsls	r3, r3, #1
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d920      	bls.n	800b410 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b3ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	f003 0307 	and.w	r3, r3, #7
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d00b      	beq.n	800b3f8 <pvPortMalloc+0xfc>
	__asm volatile
 800b3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3e4:	f383 8811 	msr	BASEPRI, r3
 800b3e8:	f3bf 8f6f 	isb	sy
 800b3ec:	f3bf 8f4f 	dsb	sy
 800b3f0:	613b      	str	r3, [r7, #16]
}
 800b3f2:	bf00      	nop
 800b3f4:	bf00      	nop
 800b3f6:	e7fd      	b.n	800b3f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3fa:	685a      	ldr	r2, [r3, #4]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	1ad2      	subs	r2, r2, r3
 800b400:	69bb      	ldr	r3, [r7, #24]
 800b402:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b406:	687a      	ldr	r2, [r7, #4]
 800b408:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b40a:	69b8      	ldr	r0, [r7, #24]
 800b40c:	f000 f90a 	bl	800b624 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b410:	4b1d      	ldr	r3, [pc, #116]	@ (800b488 <pvPortMalloc+0x18c>)
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	1ad3      	subs	r3, r2, r3
 800b41a:	4a1b      	ldr	r2, [pc, #108]	@ (800b488 <pvPortMalloc+0x18c>)
 800b41c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b41e:	4b1a      	ldr	r3, [pc, #104]	@ (800b488 <pvPortMalloc+0x18c>)
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	4b1b      	ldr	r3, [pc, #108]	@ (800b490 <pvPortMalloc+0x194>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	429a      	cmp	r2, r3
 800b428:	d203      	bcs.n	800b432 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b42a:	4b17      	ldr	r3, [pc, #92]	@ (800b488 <pvPortMalloc+0x18c>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4a18      	ldr	r2, [pc, #96]	@ (800b490 <pvPortMalloc+0x194>)
 800b430:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b434:	685a      	ldr	r2, [r3, #4]
 800b436:	4b13      	ldr	r3, [pc, #76]	@ (800b484 <pvPortMalloc+0x188>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	431a      	orrs	r2, r3
 800b43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b43e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b442:	2200      	movs	r2, #0
 800b444:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b446:	4b13      	ldr	r3, [pc, #76]	@ (800b494 <pvPortMalloc+0x198>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	3301      	adds	r3, #1
 800b44c:	4a11      	ldr	r2, [pc, #68]	@ (800b494 <pvPortMalloc+0x198>)
 800b44e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b450:	f7fe ff42 	bl	800a2d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	f003 0307 	and.w	r3, r3, #7
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d00b      	beq.n	800b476 <pvPortMalloc+0x17a>
	__asm volatile
 800b45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b462:	f383 8811 	msr	BASEPRI, r3
 800b466:	f3bf 8f6f 	isb	sy
 800b46a:	f3bf 8f4f 	dsb	sy
 800b46e:	60fb      	str	r3, [r7, #12]
}
 800b470:	bf00      	nop
 800b472:	bf00      	nop
 800b474:	e7fd      	b.n	800b472 <pvPortMalloc+0x176>
	return pvReturn;
 800b476:	69fb      	ldr	r3, [r7, #28]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3728      	adds	r7, #40	@ 0x28
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	2000fe54 	.word	0x2000fe54
 800b484:	2000fe68 	.word	0x2000fe68
 800b488:	2000fe58 	.word	0x2000fe58
 800b48c:	2000fe4c 	.word	0x2000fe4c
 800b490:	2000fe5c 	.word	0x2000fe5c
 800b494:	2000fe60 	.word	0x2000fe60

0800b498 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b086      	sub	sp, #24
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d04f      	beq.n	800b54a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b4aa:	2308      	movs	r3, #8
 800b4ac:	425b      	negs	r3, r3
 800b4ae:	697a      	ldr	r2, [r7, #20]
 800b4b0:	4413      	add	r3, r2
 800b4b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	685a      	ldr	r2, [r3, #4]
 800b4bc:	4b25      	ldr	r3, [pc, #148]	@ (800b554 <vPortFree+0xbc>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4013      	ands	r3, r2
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d10b      	bne.n	800b4de <vPortFree+0x46>
	__asm volatile
 800b4c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ca:	f383 8811 	msr	BASEPRI, r3
 800b4ce:	f3bf 8f6f 	isb	sy
 800b4d2:	f3bf 8f4f 	dsb	sy
 800b4d6:	60fb      	str	r3, [r7, #12]
}
 800b4d8:	bf00      	nop
 800b4da:	bf00      	nop
 800b4dc:	e7fd      	b.n	800b4da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d00b      	beq.n	800b4fe <vPortFree+0x66>
	__asm volatile
 800b4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ea:	f383 8811 	msr	BASEPRI, r3
 800b4ee:	f3bf 8f6f 	isb	sy
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	60bb      	str	r3, [r7, #8]
}
 800b4f8:	bf00      	nop
 800b4fa:	bf00      	nop
 800b4fc:	e7fd      	b.n	800b4fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	685a      	ldr	r2, [r3, #4]
 800b502:	4b14      	ldr	r3, [pc, #80]	@ (800b554 <vPortFree+0xbc>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4013      	ands	r3, r2
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d01e      	beq.n	800b54a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d11a      	bne.n	800b54a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	685a      	ldr	r2, [r3, #4]
 800b518:	4b0e      	ldr	r3, [pc, #56]	@ (800b554 <vPortFree+0xbc>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	43db      	mvns	r3, r3
 800b51e:	401a      	ands	r2, r3
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b524:	f7fe feca 	bl	800a2bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	685a      	ldr	r2, [r3, #4]
 800b52c:	4b0a      	ldr	r3, [pc, #40]	@ (800b558 <vPortFree+0xc0>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4413      	add	r3, r2
 800b532:	4a09      	ldr	r2, [pc, #36]	@ (800b558 <vPortFree+0xc0>)
 800b534:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b536:	6938      	ldr	r0, [r7, #16]
 800b538:	f000 f874 	bl	800b624 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b53c:	4b07      	ldr	r3, [pc, #28]	@ (800b55c <vPortFree+0xc4>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	3301      	adds	r3, #1
 800b542:	4a06      	ldr	r2, [pc, #24]	@ (800b55c <vPortFree+0xc4>)
 800b544:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b546:	f7fe fec7 	bl	800a2d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b54a:	bf00      	nop
 800b54c:	3718      	adds	r7, #24
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop
 800b554:	2000fe68 	.word	0x2000fe68
 800b558:	2000fe58 	.word	0x2000fe58
 800b55c:	2000fe64 	.word	0x2000fe64

0800b560 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b560:	b480      	push	{r7}
 800b562:	b085      	sub	sp, #20
 800b564:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b566:	f24d 63d8 	movw	r3, #55000	@ 0xd6d8
 800b56a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b56c:	4b27      	ldr	r3, [pc, #156]	@ (800b60c <prvHeapInit+0xac>)
 800b56e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f003 0307 	and.w	r3, r3, #7
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00c      	beq.n	800b594 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	3307      	adds	r3, #7
 800b57e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f023 0307 	bic.w	r3, r3, #7
 800b586:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b588:	68ba      	ldr	r2, [r7, #8]
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	1ad3      	subs	r3, r2, r3
 800b58e:	4a1f      	ldr	r2, [pc, #124]	@ (800b60c <prvHeapInit+0xac>)
 800b590:	4413      	add	r3, r2
 800b592:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b598:	4a1d      	ldr	r2, [pc, #116]	@ (800b610 <prvHeapInit+0xb0>)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b59e:	4b1c      	ldr	r3, [pc, #112]	@ (800b610 <prvHeapInit+0xb0>)
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	68ba      	ldr	r2, [r7, #8]
 800b5a8:	4413      	add	r3, r2
 800b5aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b5ac:	2208      	movs	r2, #8
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	1a9b      	subs	r3, r3, r2
 800b5b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f023 0307 	bic.w	r3, r3, #7
 800b5ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	4a15      	ldr	r2, [pc, #84]	@ (800b614 <prvHeapInit+0xb4>)
 800b5c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b5c2:	4b14      	ldr	r3, [pc, #80]	@ (800b614 <prvHeapInit+0xb4>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b5ca:	4b12      	ldr	r3, [pc, #72]	@ (800b614 <prvHeapInit+0xb4>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	1ad2      	subs	r2, r2, r3
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b5e0:	4b0c      	ldr	r3, [pc, #48]	@ (800b614 <prvHeapInit+0xb4>)
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	4a0a      	ldr	r2, [pc, #40]	@ (800b618 <prvHeapInit+0xb8>)
 800b5ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	4a09      	ldr	r2, [pc, #36]	@ (800b61c <prvHeapInit+0xbc>)
 800b5f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b5f8:	4b09      	ldr	r3, [pc, #36]	@ (800b620 <prvHeapInit+0xc0>)
 800b5fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b5fe:	601a      	str	r2, [r3, #0]
}
 800b600:	bf00      	nop
 800b602:	3714      	adds	r7, #20
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr
 800b60c:	20002774 	.word	0x20002774
 800b610:	2000fe4c 	.word	0x2000fe4c
 800b614:	2000fe54 	.word	0x2000fe54
 800b618:	2000fe5c 	.word	0x2000fe5c
 800b61c:	2000fe58 	.word	0x2000fe58
 800b620:	2000fe68 	.word	0x2000fe68

0800b624 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b624:	b480      	push	{r7}
 800b626:	b085      	sub	sp, #20
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b62c:	4b28      	ldr	r3, [pc, #160]	@ (800b6d0 <prvInsertBlockIntoFreeList+0xac>)
 800b62e:	60fb      	str	r3, [r7, #12]
 800b630:	e002      	b.n	800b638 <prvInsertBlockIntoFreeList+0x14>
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	60fb      	str	r3, [r7, #12]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	429a      	cmp	r2, r3
 800b640:	d8f7      	bhi.n	800b632 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	68ba      	ldr	r2, [r7, #8]
 800b64c:	4413      	add	r3, r2
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	429a      	cmp	r2, r3
 800b652:	d108      	bne.n	800b666 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	685a      	ldr	r2, [r3, #4]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	441a      	add	r2, r3
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	68ba      	ldr	r2, [r7, #8]
 800b670:	441a      	add	r2, r3
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	429a      	cmp	r2, r3
 800b678:	d118      	bne.n	800b6ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	4b15      	ldr	r3, [pc, #84]	@ (800b6d4 <prvInsertBlockIntoFreeList+0xb0>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	429a      	cmp	r2, r3
 800b684:	d00d      	beq.n	800b6a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	685a      	ldr	r2, [r3, #4]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	441a      	add	r2, r3
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	681a      	ldr	r2, [r3, #0]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	601a      	str	r2, [r3, #0]
 800b6a0:	e008      	b.n	800b6b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b6a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b6d4 <prvInsertBlockIntoFreeList+0xb0>)
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	601a      	str	r2, [r3, #0]
 800b6aa:	e003      	b.n	800b6b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681a      	ldr	r2, [r3, #0]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b6b4:	68fa      	ldr	r2, [r7, #12]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d002      	beq.n	800b6c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6c2:	bf00      	nop
 800b6c4:	3714      	adds	r7, #20
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr
 800b6ce:	bf00      	nop
 800b6d0:	2000fe4c 	.word	0x2000fe4c
 800b6d4:	2000fe54 	.word	0x2000fe54

0800b6d8 <sniprintf>:
 800b6d8:	b40c      	push	{r2, r3}
 800b6da:	b530      	push	{r4, r5, lr}
 800b6dc:	4b17      	ldr	r3, [pc, #92]	@ (800b73c <sniprintf+0x64>)
 800b6de:	1e0c      	subs	r4, r1, #0
 800b6e0:	681d      	ldr	r5, [r3, #0]
 800b6e2:	b09d      	sub	sp, #116	@ 0x74
 800b6e4:	da08      	bge.n	800b6f8 <sniprintf+0x20>
 800b6e6:	238b      	movs	r3, #139	@ 0x8b
 800b6e8:	602b      	str	r3, [r5, #0]
 800b6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ee:	b01d      	add	sp, #116	@ 0x74
 800b6f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6f4:	b002      	add	sp, #8
 800b6f6:	4770      	bx	lr
 800b6f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b6fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b700:	bf14      	ite	ne
 800b702:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b706:	4623      	moveq	r3, r4
 800b708:	9304      	str	r3, [sp, #16]
 800b70a:	9307      	str	r3, [sp, #28]
 800b70c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b710:	9002      	str	r0, [sp, #8]
 800b712:	9006      	str	r0, [sp, #24]
 800b714:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b718:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b71a:	ab21      	add	r3, sp, #132	@ 0x84
 800b71c:	a902      	add	r1, sp, #8
 800b71e:	4628      	mov	r0, r5
 800b720:	9301      	str	r3, [sp, #4]
 800b722:	f000 f9bd 	bl	800baa0 <_svfiprintf_r>
 800b726:	1c43      	adds	r3, r0, #1
 800b728:	bfbc      	itt	lt
 800b72a:	238b      	movlt	r3, #139	@ 0x8b
 800b72c:	602b      	strlt	r3, [r5, #0]
 800b72e:	2c00      	cmp	r4, #0
 800b730:	d0dd      	beq.n	800b6ee <sniprintf+0x16>
 800b732:	9b02      	ldr	r3, [sp, #8]
 800b734:	2200      	movs	r2, #0
 800b736:	701a      	strb	r2, [r3, #0]
 800b738:	e7d9      	b.n	800b6ee <sniprintf+0x16>
 800b73a:	bf00      	nop
 800b73c:	20000028 	.word	0x20000028

0800b740 <memmove>:
 800b740:	4288      	cmp	r0, r1
 800b742:	b510      	push	{r4, lr}
 800b744:	eb01 0402 	add.w	r4, r1, r2
 800b748:	d902      	bls.n	800b750 <memmove+0x10>
 800b74a:	4284      	cmp	r4, r0
 800b74c:	4623      	mov	r3, r4
 800b74e:	d807      	bhi.n	800b760 <memmove+0x20>
 800b750:	1e43      	subs	r3, r0, #1
 800b752:	42a1      	cmp	r1, r4
 800b754:	d008      	beq.n	800b768 <memmove+0x28>
 800b756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b75a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b75e:	e7f8      	b.n	800b752 <memmove+0x12>
 800b760:	4402      	add	r2, r0
 800b762:	4601      	mov	r1, r0
 800b764:	428a      	cmp	r2, r1
 800b766:	d100      	bne.n	800b76a <memmove+0x2a>
 800b768:	bd10      	pop	{r4, pc}
 800b76a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b76e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b772:	e7f7      	b.n	800b764 <memmove+0x24>

0800b774 <memset>:
 800b774:	4402      	add	r2, r0
 800b776:	4603      	mov	r3, r0
 800b778:	4293      	cmp	r3, r2
 800b77a:	d100      	bne.n	800b77e <memset+0xa>
 800b77c:	4770      	bx	lr
 800b77e:	f803 1b01 	strb.w	r1, [r3], #1
 800b782:	e7f9      	b.n	800b778 <memset+0x4>

0800b784 <__errno>:
 800b784:	4b01      	ldr	r3, [pc, #4]	@ (800b78c <__errno+0x8>)
 800b786:	6818      	ldr	r0, [r3, #0]
 800b788:	4770      	bx	lr
 800b78a:	bf00      	nop
 800b78c:	20000028 	.word	0x20000028

0800b790 <__libc_init_array>:
 800b790:	b570      	push	{r4, r5, r6, lr}
 800b792:	4d0d      	ldr	r5, [pc, #52]	@ (800b7c8 <__libc_init_array+0x38>)
 800b794:	4c0d      	ldr	r4, [pc, #52]	@ (800b7cc <__libc_init_array+0x3c>)
 800b796:	1b64      	subs	r4, r4, r5
 800b798:	10a4      	asrs	r4, r4, #2
 800b79a:	2600      	movs	r6, #0
 800b79c:	42a6      	cmp	r6, r4
 800b79e:	d109      	bne.n	800b7b4 <__libc_init_array+0x24>
 800b7a0:	4d0b      	ldr	r5, [pc, #44]	@ (800b7d0 <__libc_init_array+0x40>)
 800b7a2:	4c0c      	ldr	r4, [pc, #48]	@ (800b7d4 <__libc_init_array+0x44>)
 800b7a4:	f000 fc4c 	bl	800c040 <_init>
 800b7a8:	1b64      	subs	r4, r4, r5
 800b7aa:	10a4      	asrs	r4, r4, #2
 800b7ac:	2600      	movs	r6, #0
 800b7ae:	42a6      	cmp	r6, r4
 800b7b0:	d105      	bne.n	800b7be <__libc_init_array+0x2e>
 800b7b2:	bd70      	pop	{r4, r5, r6, pc}
 800b7b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7b8:	4798      	blx	r3
 800b7ba:	3601      	adds	r6, #1
 800b7bc:	e7ee      	b.n	800b79c <__libc_init_array+0xc>
 800b7be:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7c2:	4798      	blx	r3
 800b7c4:	3601      	adds	r6, #1
 800b7c6:	e7f2      	b.n	800b7ae <__libc_init_array+0x1e>
 800b7c8:	0800c650 	.word	0x0800c650
 800b7cc:	0800c650 	.word	0x0800c650
 800b7d0:	0800c650 	.word	0x0800c650
 800b7d4:	0800c654 	.word	0x0800c654

0800b7d8 <__retarget_lock_acquire_recursive>:
 800b7d8:	4770      	bx	lr

0800b7da <__retarget_lock_release_recursive>:
 800b7da:	4770      	bx	lr

0800b7dc <memcpy>:
 800b7dc:	440a      	add	r2, r1
 800b7de:	4291      	cmp	r1, r2
 800b7e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b7e4:	d100      	bne.n	800b7e8 <memcpy+0xc>
 800b7e6:	4770      	bx	lr
 800b7e8:	b510      	push	{r4, lr}
 800b7ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7f2:	4291      	cmp	r1, r2
 800b7f4:	d1f9      	bne.n	800b7ea <memcpy+0xe>
 800b7f6:	bd10      	pop	{r4, pc}

0800b7f8 <_free_r>:
 800b7f8:	b538      	push	{r3, r4, r5, lr}
 800b7fa:	4605      	mov	r5, r0
 800b7fc:	2900      	cmp	r1, #0
 800b7fe:	d041      	beq.n	800b884 <_free_r+0x8c>
 800b800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b804:	1f0c      	subs	r4, r1, #4
 800b806:	2b00      	cmp	r3, #0
 800b808:	bfb8      	it	lt
 800b80a:	18e4      	addlt	r4, r4, r3
 800b80c:	f000 f8e0 	bl	800b9d0 <__malloc_lock>
 800b810:	4a1d      	ldr	r2, [pc, #116]	@ (800b888 <_free_r+0x90>)
 800b812:	6813      	ldr	r3, [r2, #0]
 800b814:	b933      	cbnz	r3, 800b824 <_free_r+0x2c>
 800b816:	6063      	str	r3, [r4, #4]
 800b818:	6014      	str	r4, [r2, #0]
 800b81a:	4628      	mov	r0, r5
 800b81c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b820:	f000 b8dc 	b.w	800b9dc <__malloc_unlock>
 800b824:	42a3      	cmp	r3, r4
 800b826:	d908      	bls.n	800b83a <_free_r+0x42>
 800b828:	6820      	ldr	r0, [r4, #0]
 800b82a:	1821      	adds	r1, r4, r0
 800b82c:	428b      	cmp	r3, r1
 800b82e:	bf01      	itttt	eq
 800b830:	6819      	ldreq	r1, [r3, #0]
 800b832:	685b      	ldreq	r3, [r3, #4]
 800b834:	1809      	addeq	r1, r1, r0
 800b836:	6021      	streq	r1, [r4, #0]
 800b838:	e7ed      	b.n	800b816 <_free_r+0x1e>
 800b83a:	461a      	mov	r2, r3
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	b10b      	cbz	r3, 800b844 <_free_r+0x4c>
 800b840:	42a3      	cmp	r3, r4
 800b842:	d9fa      	bls.n	800b83a <_free_r+0x42>
 800b844:	6811      	ldr	r1, [r2, #0]
 800b846:	1850      	adds	r0, r2, r1
 800b848:	42a0      	cmp	r0, r4
 800b84a:	d10b      	bne.n	800b864 <_free_r+0x6c>
 800b84c:	6820      	ldr	r0, [r4, #0]
 800b84e:	4401      	add	r1, r0
 800b850:	1850      	adds	r0, r2, r1
 800b852:	4283      	cmp	r3, r0
 800b854:	6011      	str	r1, [r2, #0]
 800b856:	d1e0      	bne.n	800b81a <_free_r+0x22>
 800b858:	6818      	ldr	r0, [r3, #0]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	6053      	str	r3, [r2, #4]
 800b85e:	4408      	add	r0, r1
 800b860:	6010      	str	r0, [r2, #0]
 800b862:	e7da      	b.n	800b81a <_free_r+0x22>
 800b864:	d902      	bls.n	800b86c <_free_r+0x74>
 800b866:	230c      	movs	r3, #12
 800b868:	602b      	str	r3, [r5, #0]
 800b86a:	e7d6      	b.n	800b81a <_free_r+0x22>
 800b86c:	6820      	ldr	r0, [r4, #0]
 800b86e:	1821      	adds	r1, r4, r0
 800b870:	428b      	cmp	r3, r1
 800b872:	bf04      	itt	eq
 800b874:	6819      	ldreq	r1, [r3, #0]
 800b876:	685b      	ldreq	r3, [r3, #4]
 800b878:	6063      	str	r3, [r4, #4]
 800b87a:	bf04      	itt	eq
 800b87c:	1809      	addeq	r1, r1, r0
 800b87e:	6021      	streq	r1, [r4, #0]
 800b880:	6054      	str	r4, [r2, #4]
 800b882:	e7ca      	b.n	800b81a <_free_r+0x22>
 800b884:	bd38      	pop	{r3, r4, r5, pc}
 800b886:	bf00      	nop
 800b888:	2000ffb0 	.word	0x2000ffb0

0800b88c <sbrk_aligned>:
 800b88c:	b570      	push	{r4, r5, r6, lr}
 800b88e:	4e0f      	ldr	r6, [pc, #60]	@ (800b8cc <sbrk_aligned+0x40>)
 800b890:	460c      	mov	r4, r1
 800b892:	6831      	ldr	r1, [r6, #0]
 800b894:	4605      	mov	r5, r0
 800b896:	b911      	cbnz	r1, 800b89e <sbrk_aligned+0x12>
 800b898:	f000 fb8c 	bl	800bfb4 <_sbrk_r>
 800b89c:	6030      	str	r0, [r6, #0]
 800b89e:	4621      	mov	r1, r4
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	f000 fb87 	bl	800bfb4 <_sbrk_r>
 800b8a6:	1c43      	adds	r3, r0, #1
 800b8a8:	d103      	bne.n	800b8b2 <sbrk_aligned+0x26>
 800b8aa:	f04f 34ff 	mov.w	r4, #4294967295
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	bd70      	pop	{r4, r5, r6, pc}
 800b8b2:	1cc4      	adds	r4, r0, #3
 800b8b4:	f024 0403 	bic.w	r4, r4, #3
 800b8b8:	42a0      	cmp	r0, r4
 800b8ba:	d0f8      	beq.n	800b8ae <sbrk_aligned+0x22>
 800b8bc:	1a21      	subs	r1, r4, r0
 800b8be:	4628      	mov	r0, r5
 800b8c0:	f000 fb78 	bl	800bfb4 <_sbrk_r>
 800b8c4:	3001      	adds	r0, #1
 800b8c6:	d1f2      	bne.n	800b8ae <sbrk_aligned+0x22>
 800b8c8:	e7ef      	b.n	800b8aa <sbrk_aligned+0x1e>
 800b8ca:	bf00      	nop
 800b8cc:	2000ffac 	.word	0x2000ffac

0800b8d0 <_malloc_r>:
 800b8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8d4:	1ccd      	adds	r5, r1, #3
 800b8d6:	f025 0503 	bic.w	r5, r5, #3
 800b8da:	3508      	adds	r5, #8
 800b8dc:	2d0c      	cmp	r5, #12
 800b8de:	bf38      	it	cc
 800b8e0:	250c      	movcc	r5, #12
 800b8e2:	2d00      	cmp	r5, #0
 800b8e4:	4606      	mov	r6, r0
 800b8e6:	db01      	blt.n	800b8ec <_malloc_r+0x1c>
 800b8e8:	42a9      	cmp	r1, r5
 800b8ea:	d904      	bls.n	800b8f6 <_malloc_r+0x26>
 800b8ec:	230c      	movs	r3, #12
 800b8ee:	6033      	str	r3, [r6, #0]
 800b8f0:	2000      	movs	r0, #0
 800b8f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b9cc <_malloc_r+0xfc>
 800b8fa:	f000 f869 	bl	800b9d0 <__malloc_lock>
 800b8fe:	f8d8 3000 	ldr.w	r3, [r8]
 800b902:	461c      	mov	r4, r3
 800b904:	bb44      	cbnz	r4, 800b958 <_malloc_r+0x88>
 800b906:	4629      	mov	r1, r5
 800b908:	4630      	mov	r0, r6
 800b90a:	f7ff ffbf 	bl	800b88c <sbrk_aligned>
 800b90e:	1c43      	adds	r3, r0, #1
 800b910:	4604      	mov	r4, r0
 800b912:	d158      	bne.n	800b9c6 <_malloc_r+0xf6>
 800b914:	f8d8 4000 	ldr.w	r4, [r8]
 800b918:	4627      	mov	r7, r4
 800b91a:	2f00      	cmp	r7, #0
 800b91c:	d143      	bne.n	800b9a6 <_malloc_r+0xd6>
 800b91e:	2c00      	cmp	r4, #0
 800b920:	d04b      	beq.n	800b9ba <_malloc_r+0xea>
 800b922:	6823      	ldr	r3, [r4, #0]
 800b924:	4639      	mov	r1, r7
 800b926:	4630      	mov	r0, r6
 800b928:	eb04 0903 	add.w	r9, r4, r3
 800b92c:	f000 fb42 	bl	800bfb4 <_sbrk_r>
 800b930:	4581      	cmp	r9, r0
 800b932:	d142      	bne.n	800b9ba <_malloc_r+0xea>
 800b934:	6821      	ldr	r1, [r4, #0]
 800b936:	1a6d      	subs	r5, r5, r1
 800b938:	4629      	mov	r1, r5
 800b93a:	4630      	mov	r0, r6
 800b93c:	f7ff ffa6 	bl	800b88c <sbrk_aligned>
 800b940:	3001      	adds	r0, #1
 800b942:	d03a      	beq.n	800b9ba <_malloc_r+0xea>
 800b944:	6823      	ldr	r3, [r4, #0]
 800b946:	442b      	add	r3, r5
 800b948:	6023      	str	r3, [r4, #0]
 800b94a:	f8d8 3000 	ldr.w	r3, [r8]
 800b94e:	685a      	ldr	r2, [r3, #4]
 800b950:	bb62      	cbnz	r2, 800b9ac <_malloc_r+0xdc>
 800b952:	f8c8 7000 	str.w	r7, [r8]
 800b956:	e00f      	b.n	800b978 <_malloc_r+0xa8>
 800b958:	6822      	ldr	r2, [r4, #0]
 800b95a:	1b52      	subs	r2, r2, r5
 800b95c:	d420      	bmi.n	800b9a0 <_malloc_r+0xd0>
 800b95e:	2a0b      	cmp	r2, #11
 800b960:	d917      	bls.n	800b992 <_malloc_r+0xc2>
 800b962:	1961      	adds	r1, r4, r5
 800b964:	42a3      	cmp	r3, r4
 800b966:	6025      	str	r5, [r4, #0]
 800b968:	bf18      	it	ne
 800b96a:	6059      	strne	r1, [r3, #4]
 800b96c:	6863      	ldr	r3, [r4, #4]
 800b96e:	bf08      	it	eq
 800b970:	f8c8 1000 	streq.w	r1, [r8]
 800b974:	5162      	str	r2, [r4, r5]
 800b976:	604b      	str	r3, [r1, #4]
 800b978:	4630      	mov	r0, r6
 800b97a:	f000 f82f 	bl	800b9dc <__malloc_unlock>
 800b97e:	f104 000b 	add.w	r0, r4, #11
 800b982:	1d23      	adds	r3, r4, #4
 800b984:	f020 0007 	bic.w	r0, r0, #7
 800b988:	1ac2      	subs	r2, r0, r3
 800b98a:	bf1c      	itt	ne
 800b98c:	1a1b      	subne	r3, r3, r0
 800b98e:	50a3      	strne	r3, [r4, r2]
 800b990:	e7af      	b.n	800b8f2 <_malloc_r+0x22>
 800b992:	6862      	ldr	r2, [r4, #4]
 800b994:	42a3      	cmp	r3, r4
 800b996:	bf0c      	ite	eq
 800b998:	f8c8 2000 	streq.w	r2, [r8]
 800b99c:	605a      	strne	r2, [r3, #4]
 800b99e:	e7eb      	b.n	800b978 <_malloc_r+0xa8>
 800b9a0:	4623      	mov	r3, r4
 800b9a2:	6864      	ldr	r4, [r4, #4]
 800b9a4:	e7ae      	b.n	800b904 <_malloc_r+0x34>
 800b9a6:	463c      	mov	r4, r7
 800b9a8:	687f      	ldr	r7, [r7, #4]
 800b9aa:	e7b6      	b.n	800b91a <_malloc_r+0x4a>
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	42a3      	cmp	r3, r4
 800b9b2:	d1fb      	bne.n	800b9ac <_malloc_r+0xdc>
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	6053      	str	r3, [r2, #4]
 800b9b8:	e7de      	b.n	800b978 <_malloc_r+0xa8>
 800b9ba:	230c      	movs	r3, #12
 800b9bc:	6033      	str	r3, [r6, #0]
 800b9be:	4630      	mov	r0, r6
 800b9c0:	f000 f80c 	bl	800b9dc <__malloc_unlock>
 800b9c4:	e794      	b.n	800b8f0 <_malloc_r+0x20>
 800b9c6:	6005      	str	r5, [r0, #0]
 800b9c8:	e7d6      	b.n	800b978 <_malloc_r+0xa8>
 800b9ca:	bf00      	nop
 800b9cc:	2000ffb0 	.word	0x2000ffb0

0800b9d0 <__malloc_lock>:
 800b9d0:	4801      	ldr	r0, [pc, #4]	@ (800b9d8 <__malloc_lock+0x8>)
 800b9d2:	f7ff bf01 	b.w	800b7d8 <__retarget_lock_acquire_recursive>
 800b9d6:	bf00      	nop
 800b9d8:	2000ffa8 	.word	0x2000ffa8

0800b9dc <__malloc_unlock>:
 800b9dc:	4801      	ldr	r0, [pc, #4]	@ (800b9e4 <__malloc_unlock+0x8>)
 800b9de:	f7ff befc 	b.w	800b7da <__retarget_lock_release_recursive>
 800b9e2:	bf00      	nop
 800b9e4:	2000ffa8 	.word	0x2000ffa8

0800b9e8 <__ssputs_r>:
 800b9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9ec:	688e      	ldr	r6, [r1, #8]
 800b9ee:	461f      	mov	r7, r3
 800b9f0:	42be      	cmp	r6, r7
 800b9f2:	680b      	ldr	r3, [r1, #0]
 800b9f4:	4682      	mov	sl, r0
 800b9f6:	460c      	mov	r4, r1
 800b9f8:	4690      	mov	r8, r2
 800b9fa:	d82d      	bhi.n	800ba58 <__ssputs_r+0x70>
 800b9fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ba04:	d026      	beq.n	800ba54 <__ssputs_r+0x6c>
 800ba06:	6965      	ldr	r5, [r4, #20]
 800ba08:	6909      	ldr	r1, [r1, #16]
 800ba0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba0e:	eba3 0901 	sub.w	r9, r3, r1
 800ba12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba16:	1c7b      	adds	r3, r7, #1
 800ba18:	444b      	add	r3, r9
 800ba1a:	106d      	asrs	r5, r5, #1
 800ba1c:	429d      	cmp	r5, r3
 800ba1e:	bf38      	it	cc
 800ba20:	461d      	movcc	r5, r3
 800ba22:	0553      	lsls	r3, r2, #21
 800ba24:	d527      	bpl.n	800ba76 <__ssputs_r+0x8e>
 800ba26:	4629      	mov	r1, r5
 800ba28:	f7ff ff52 	bl	800b8d0 <_malloc_r>
 800ba2c:	4606      	mov	r6, r0
 800ba2e:	b360      	cbz	r0, 800ba8a <__ssputs_r+0xa2>
 800ba30:	6921      	ldr	r1, [r4, #16]
 800ba32:	464a      	mov	r2, r9
 800ba34:	f7ff fed2 	bl	800b7dc <memcpy>
 800ba38:	89a3      	ldrh	r3, [r4, #12]
 800ba3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ba3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba42:	81a3      	strh	r3, [r4, #12]
 800ba44:	6126      	str	r6, [r4, #16]
 800ba46:	6165      	str	r5, [r4, #20]
 800ba48:	444e      	add	r6, r9
 800ba4a:	eba5 0509 	sub.w	r5, r5, r9
 800ba4e:	6026      	str	r6, [r4, #0]
 800ba50:	60a5      	str	r5, [r4, #8]
 800ba52:	463e      	mov	r6, r7
 800ba54:	42be      	cmp	r6, r7
 800ba56:	d900      	bls.n	800ba5a <__ssputs_r+0x72>
 800ba58:	463e      	mov	r6, r7
 800ba5a:	6820      	ldr	r0, [r4, #0]
 800ba5c:	4632      	mov	r2, r6
 800ba5e:	4641      	mov	r1, r8
 800ba60:	f7ff fe6e 	bl	800b740 <memmove>
 800ba64:	68a3      	ldr	r3, [r4, #8]
 800ba66:	1b9b      	subs	r3, r3, r6
 800ba68:	60a3      	str	r3, [r4, #8]
 800ba6a:	6823      	ldr	r3, [r4, #0]
 800ba6c:	4433      	add	r3, r6
 800ba6e:	6023      	str	r3, [r4, #0]
 800ba70:	2000      	movs	r0, #0
 800ba72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba76:	462a      	mov	r2, r5
 800ba78:	f000 faac 	bl	800bfd4 <_realloc_r>
 800ba7c:	4606      	mov	r6, r0
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	d1e0      	bne.n	800ba44 <__ssputs_r+0x5c>
 800ba82:	6921      	ldr	r1, [r4, #16]
 800ba84:	4650      	mov	r0, sl
 800ba86:	f7ff feb7 	bl	800b7f8 <_free_r>
 800ba8a:	230c      	movs	r3, #12
 800ba8c:	f8ca 3000 	str.w	r3, [sl]
 800ba90:	89a3      	ldrh	r3, [r4, #12]
 800ba92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba96:	81a3      	strh	r3, [r4, #12]
 800ba98:	f04f 30ff 	mov.w	r0, #4294967295
 800ba9c:	e7e9      	b.n	800ba72 <__ssputs_r+0x8a>
	...

0800baa0 <_svfiprintf_r>:
 800baa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa4:	4698      	mov	r8, r3
 800baa6:	898b      	ldrh	r3, [r1, #12]
 800baa8:	061b      	lsls	r3, r3, #24
 800baaa:	b09d      	sub	sp, #116	@ 0x74
 800baac:	4607      	mov	r7, r0
 800baae:	460d      	mov	r5, r1
 800bab0:	4614      	mov	r4, r2
 800bab2:	d510      	bpl.n	800bad6 <_svfiprintf_r+0x36>
 800bab4:	690b      	ldr	r3, [r1, #16]
 800bab6:	b973      	cbnz	r3, 800bad6 <_svfiprintf_r+0x36>
 800bab8:	2140      	movs	r1, #64	@ 0x40
 800baba:	f7ff ff09 	bl	800b8d0 <_malloc_r>
 800babe:	6028      	str	r0, [r5, #0]
 800bac0:	6128      	str	r0, [r5, #16]
 800bac2:	b930      	cbnz	r0, 800bad2 <_svfiprintf_r+0x32>
 800bac4:	230c      	movs	r3, #12
 800bac6:	603b      	str	r3, [r7, #0]
 800bac8:	f04f 30ff 	mov.w	r0, #4294967295
 800bacc:	b01d      	add	sp, #116	@ 0x74
 800bace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bad2:	2340      	movs	r3, #64	@ 0x40
 800bad4:	616b      	str	r3, [r5, #20]
 800bad6:	2300      	movs	r3, #0
 800bad8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bada:	2320      	movs	r3, #32
 800badc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bae0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bae4:	2330      	movs	r3, #48	@ 0x30
 800bae6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bc84 <_svfiprintf_r+0x1e4>
 800baea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800baee:	f04f 0901 	mov.w	r9, #1
 800baf2:	4623      	mov	r3, r4
 800baf4:	469a      	mov	sl, r3
 800baf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bafa:	b10a      	cbz	r2, 800bb00 <_svfiprintf_r+0x60>
 800bafc:	2a25      	cmp	r2, #37	@ 0x25
 800bafe:	d1f9      	bne.n	800baf4 <_svfiprintf_r+0x54>
 800bb00:	ebba 0b04 	subs.w	fp, sl, r4
 800bb04:	d00b      	beq.n	800bb1e <_svfiprintf_r+0x7e>
 800bb06:	465b      	mov	r3, fp
 800bb08:	4622      	mov	r2, r4
 800bb0a:	4629      	mov	r1, r5
 800bb0c:	4638      	mov	r0, r7
 800bb0e:	f7ff ff6b 	bl	800b9e8 <__ssputs_r>
 800bb12:	3001      	adds	r0, #1
 800bb14:	f000 80a7 	beq.w	800bc66 <_svfiprintf_r+0x1c6>
 800bb18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb1a:	445a      	add	r2, fp
 800bb1c:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb1e:	f89a 3000 	ldrb.w	r3, [sl]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	f000 809f 	beq.w	800bc66 <_svfiprintf_r+0x1c6>
 800bb28:	2300      	movs	r3, #0
 800bb2a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb32:	f10a 0a01 	add.w	sl, sl, #1
 800bb36:	9304      	str	r3, [sp, #16]
 800bb38:	9307      	str	r3, [sp, #28]
 800bb3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb3e:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb40:	4654      	mov	r4, sl
 800bb42:	2205      	movs	r2, #5
 800bb44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb48:	484e      	ldr	r0, [pc, #312]	@ (800bc84 <_svfiprintf_r+0x1e4>)
 800bb4a:	f7f4 fb51 	bl	80001f0 <memchr>
 800bb4e:	9a04      	ldr	r2, [sp, #16]
 800bb50:	b9d8      	cbnz	r0, 800bb8a <_svfiprintf_r+0xea>
 800bb52:	06d0      	lsls	r0, r2, #27
 800bb54:	bf44      	itt	mi
 800bb56:	2320      	movmi	r3, #32
 800bb58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb5c:	0711      	lsls	r1, r2, #28
 800bb5e:	bf44      	itt	mi
 800bb60:	232b      	movmi	r3, #43	@ 0x2b
 800bb62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb66:	f89a 3000 	ldrb.w	r3, [sl]
 800bb6a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb6c:	d015      	beq.n	800bb9a <_svfiprintf_r+0xfa>
 800bb6e:	9a07      	ldr	r2, [sp, #28]
 800bb70:	4654      	mov	r4, sl
 800bb72:	2000      	movs	r0, #0
 800bb74:	f04f 0c0a 	mov.w	ip, #10
 800bb78:	4621      	mov	r1, r4
 800bb7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb7e:	3b30      	subs	r3, #48	@ 0x30
 800bb80:	2b09      	cmp	r3, #9
 800bb82:	d94b      	bls.n	800bc1c <_svfiprintf_r+0x17c>
 800bb84:	b1b0      	cbz	r0, 800bbb4 <_svfiprintf_r+0x114>
 800bb86:	9207      	str	r2, [sp, #28]
 800bb88:	e014      	b.n	800bbb4 <_svfiprintf_r+0x114>
 800bb8a:	eba0 0308 	sub.w	r3, r0, r8
 800bb8e:	fa09 f303 	lsl.w	r3, r9, r3
 800bb92:	4313      	orrs	r3, r2
 800bb94:	9304      	str	r3, [sp, #16]
 800bb96:	46a2      	mov	sl, r4
 800bb98:	e7d2      	b.n	800bb40 <_svfiprintf_r+0xa0>
 800bb9a:	9b03      	ldr	r3, [sp, #12]
 800bb9c:	1d19      	adds	r1, r3, #4
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	9103      	str	r1, [sp, #12]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	bfbb      	ittet	lt
 800bba6:	425b      	neglt	r3, r3
 800bba8:	f042 0202 	orrlt.w	r2, r2, #2
 800bbac:	9307      	strge	r3, [sp, #28]
 800bbae:	9307      	strlt	r3, [sp, #28]
 800bbb0:	bfb8      	it	lt
 800bbb2:	9204      	strlt	r2, [sp, #16]
 800bbb4:	7823      	ldrb	r3, [r4, #0]
 800bbb6:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbb8:	d10a      	bne.n	800bbd0 <_svfiprintf_r+0x130>
 800bbba:	7863      	ldrb	r3, [r4, #1]
 800bbbc:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbbe:	d132      	bne.n	800bc26 <_svfiprintf_r+0x186>
 800bbc0:	9b03      	ldr	r3, [sp, #12]
 800bbc2:	1d1a      	adds	r2, r3, #4
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	9203      	str	r2, [sp, #12]
 800bbc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bbcc:	3402      	adds	r4, #2
 800bbce:	9305      	str	r3, [sp, #20]
 800bbd0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bc94 <_svfiprintf_r+0x1f4>
 800bbd4:	7821      	ldrb	r1, [r4, #0]
 800bbd6:	2203      	movs	r2, #3
 800bbd8:	4650      	mov	r0, sl
 800bbda:	f7f4 fb09 	bl	80001f0 <memchr>
 800bbde:	b138      	cbz	r0, 800bbf0 <_svfiprintf_r+0x150>
 800bbe0:	9b04      	ldr	r3, [sp, #16]
 800bbe2:	eba0 000a 	sub.w	r0, r0, sl
 800bbe6:	2240      	movs	r2, #64	@ 0x40
 800bbe8:	4082      	lsls	r2, r0
 800bbea:	4313      	orrs	r3, r2
 800bbec:	3401      	adds	r4, #1
 800bbee:	9304      	str	r3, [sp, #16]
 800bbf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbf4:	4824      	ldr	r0, [pc, #144]	@ (800bc88 <_svfiprintf_r+0x1e8>)
 800bbf6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bbfa:	2206      	movs	r2, #6
 800bbfc:	f7f4 faf8 	bl	80001f0 <memchr>
 800bc00:	2800      	cmp	r0, #0
 800bc02:	d036      	beq.n	800bc72 <_svfiprintf_r+0x1d2>
 800bc04:	4b21      	ldr	r3, [pc, #132]	@ (800bc8c <_svfiprintf_r+0x1ec>)
 800bc06:	bb1b      	cbnz	r3, 800bc50 <_svfiprintf_r+0x1b0>
 800bc08:	9b03      	ldr	r3, [sp, #12]
 800bc0a:	3307      	adds	r3, #7
 800bc0c:	f023 0307 	bic.w	r3, r3, #7
 800bc10:	3308      	adds	r3, #8
 800bc12:	9303      	str	r3, [sp, #12]
 800bc14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc16:	4433      	add	r3, r6
 800bc18:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc1a:	e76a      	b.n	800baf2 <_svfiprintf_r+0x52>
 800bc1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc20:	460c      	mov	r4, r1
 800bc22:	2001      	movs	r0, #1
 800bc24:	e7a8      	b.n	800bb78 <_svfiprintf_r+0xd8>
 800bc26:	2300      	movs	r3, #0
 800bc28:	3401      	adds	r4, #1
 800bc2a:	9305      	str	r3, [sp, #20]
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	f04f 0c0a 	mov.w	ip, #10
 800bc32:	4620      	mov	r0, r4
 800bc34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc38:	3a30      	subs	r2, #48	@ 0x30
 800bc3a:	2a09      	cmp	r2, #9
 800bc3c:	d903      	bls.n	800bc46 <_svfiprintf_r+0x1a6>
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d0c6      	beq.n	800bbd0 <_svfiprintf_r+0x130>
 800bc42:	9105      	str	r1, [sp, #20]
 800bc44:	e7c4      	b.n	800bbd0 <_svfiprintf_r+0x130>
 800bc46:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e7f0      	b.n	800bc32 <_svfiprintf_r+0x192>
 800bc50:	ab03      	add	r3, sp, #12
 800bc52:	9300      	str	r3, [sp, #0]
 800bc54:	462a      	mov	r2, r5
 800bc56:	4b0e      	ldr	r3, [pc, #56]	@ (800bc90 <_svfiprintf_r+0x1f0>)
 800bc58:	a904      	add	r1, sp, #16
 800bc5a:	4638      	mov	r0, r7
 800bc5c:	f3af 8000 	nop.w
 800bc60:	1c42      	adds	r2, r0, #1
 800bc62:	4606      	mov	r6, r0
 800bc64:	d1d6      	bne.n	800bc14 <_svfiprintf_r+0x174>
 800bc66:	89ab      	ldrh	r3, [r5, #12]
 800bc68:	065b      	lsls	r3, r3, #25
 800bc6a:	f53f af2d 	bmi.w	800bac8 <_svfiprintf_r+0x28>
 800bc6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc70:	e72c      	b.n	800bacc <_svfiprintf_r+0x2c>
 800bc72:	ab03      	add	r3, sp, #12
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	462a      	mov	r2, r5
 800bc78:	4b05      	ldr	r3, [pc, #20]	@ (800bc90 <_svfiprintf_r+0x1f0>)
 800bc7a:	a904      	add	r1, sp, #16
 800bc7c:	4638      	mov	r0, r7
 800bc7e:	f000 f879 	bl	800bd74 <_printf_i>
 800bc82:	e7ed      	b.n	800bc60 <_svfiprintf_r+0x1c0>
 800bc84:	0800c614 	.word	0x0800c614
 800bc88:	0800c61e 	.word	0x0800c61e
 800bc8c:	00000000 	.word	0x00000000
 800bc90:	0800b9e9 	.word	0x0800b9e9
 800bc94:	0800c61a 	.word	0x0800c61a

0800bc98 <_printf_common>:
 800bc98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc9c:	4616      	mov	r6, r2
 800bc9e:	4698      	mov	r8, r3
 800bca0:	688a      	ldr	r2, [r1, #8]
 800bca2:	690b      	ldr	r3, [r1, #16]
 800bca4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	bfb8      	it	lt
 800bcac:	4613      	movlt	r3, r2
 800bcae:	6033      	str	r3, [r6, #0]
 800bcb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bcb4:	4607      	mov	r7, r0
 800bcb6:	460c      	mov	r4, r1
 800bcb8:	b10a      	cbz	r2, 800bcbe <_printf_common+0x26>
 800bcba:	3301      	adds	r3, #1
 800bcbc:	6033      	str	r3, [r6, #0]
 800bcbe:	6823      	ldr	r3, [r4, #0]
 800bcc0:	0699      	lsls	r1, r3, #26
 800bcc2:	bf42      	ittt	mi
 800bcc4:	6833      	ldrmi	r3, [r6, #0]
 800bcc6:	3302      	addmi	r3, #2
 800bcc8:	6033      	strmi	r3, [r6, #0]
 800bcca:	6825      	ldr	r5, [r4, #0]
 800bccc:	f015 0506 	ands.w	r5, r5, #6
 800bcd0:	d106      	bne.n	800bce0 <_printf_common+0x48>
 800bcd2:	f104 0a19 	add.w	sl, r4, #25
 800bcd6:	68e3      	ldr	r3, [r4, #12]
 800bcd8:	6832      	ldr	r2, [r6, #0]
 800bcda:	1a9b      	subs	r3, r3, r2
 800bcdc:	42ab      	cmp	r3, r5
 800bcde:	dc26      	bgt.n	800bd2e <_printf_common+0x96>
 800bce0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bce4:	6822      	ldr	r2, [r4, #0]
 800bce6:	3b00      	subs	r3, #0
 800bce8:	bf18      	it	ne
 800bcea:	2301      	movne	r3, #1
 800bcec:	0692      	lsls	r2, r2, #26
 800bcee:	d42b      	bmi.n	800bd48 <_printf_common+0xb0>
 800bcf0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bcf4:	4641      	mov	r1, r8
 800bcf6:	4638      	mov	r0, r7
 800bcf8:	47c8      	blx	r9
 800bcfa:	3001      	adds	r0, #1
 800bcfc:	d01e      	beq.n	800bd3c <_printf_common+0xa4>
 800bcfe:	6823      	ldr	r3, [r4, #0]
 800bd00:	6922      	ldr	r2, [r4, #16]
 800bd02:	f003 0306 	and.w	r3, r3, #6
 800bd06:	2b04      	cmp	r3, #4
 800bd08:	bf02      	ittt	eq
 800bd0a:	68e5      	ldreq	r5, [r4, #12]
 800bd0c:	6833      	ldreq	r3, [r6, #0]
 800bd0e:	1aed      	subeq	r5, r5, r3
 800bd10:	68a3      	ldr	r3, [r4, #8]
 800bd12:	bf0c      	ite	eq
 800bd14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd18:	2500      	movne	r5, #0
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	bfc4      	itt	gt
 800bd1e:	1a9b      	subgt	r3, r3, r2
 800bd20:	18ed      	addgt	r5, r5, r3
 800bd22:	2600      	movs	r6, #0
 800bd24:	341a      	adds	r4, #26
 800bd26:	42b5      	cmp	r5, r6
 800bd28:	d11a      	bne.n	800bd60 <_printf_common+0xc8>
 800bd2a:	2000      	movs	r0, #0
 800bd2c:	e008      	b.n	800bd40 <_printf_common+0xa8>
 800bd2e:	2301      	movs	r3, #1
 800bd30:	4652      	mov	r2, sl
 800bd32:	4641      	mov	r1, r8
 800bd34:	4638      	mov	r0, r7
 800bd36:	47c8      	blx	r9
 800bd38:	3001      	adds	r0, #1
 800bd3a:	d103      	bne.n	800bd44 <_printf_common+0xac>
 800bd3c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd44:	3501      	adds	r5, #1
 800bd46:	e7c6      	b.n	800bcd6 <_printf_common+0x3e>
 800bd48:	18e1      	adds	r1, r4, r3
 800bd4a:	1c5a      	adds	r2, r3, #1
 800bd4c:	2030      	movs	r0, #48	@ 0x30
 800bd4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bd52:	4422      	add	r2, r4
 800bd54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bd58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bd5c:	3302      	adds	r3, #2
 800bd5e:	e7c7      	b.n	800bcf0 <_printf_common+0x58>
 800bd60:	2301      	movs	r3, #1
 800bd62:	4622      	mov	r2, r4
 800bd64:	4641      	mov	r1, r8
 800bd66:	4638      	mov	r0, r7
 800bd68:	47c8      	blx	r9
 800bd6a:	3001      	adds	r0, #1
 800bd6c:	d0e6      	beq.n	800bd3c <_printf_common+0xa4>
 800bd6e:	3601      	adds	r6, #1
 800bd70:	e7d9      	b.n	800bd26 <_printf_common+0x8e>
	...

0800bd74 <_printf_i>:
 800bd74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd78:	7e0f      	ldrb	r7, [r1, #24]
 800bd7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bd7c:	2f78      	cmp	r7, #120	@ 0x78
 800bd7e:	4691      	mov	r9, r2
 800bd80:	4680      	mov	r8, r0
 800bd82:	460c      	mov	r4, r1
 800bd84:	469a      	mov	sl, r3
 800bd86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bd8a:	d807      	bhi.n	800bd9c <_printf_i+0x28>
 800bd8c:	2f62      	cmp	r7, #98	@ 0x62
 800bd8e:	d80a      	bhi.n	800bda6 <_printf_i+0x32>
 800bd90:	2f00      	cmp	r7, #0
 800bd92:	f000 80d2 	beq.w	800bf3a <_printf_i+0x1c6>
 800bd96:	2f58      	cmp	r7, #88	@ 0x58
 800bd98:	f000 80b9 	beq.w	800bf0e <_printf_i+0x19a>
 800bd9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bda0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bda4:	e03a      	b.n	800be1c <_printf_i+0xa8>
 800bda6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bdaa:	2b15      	cmp	r3, #21
 800bdac:	d8f6      	bhi.n	800bd9c <_printf_i+0x28>
 800bdae:	a101      	add	r1, pc, #4	@ (adr r1, 800bdb4 <_printf_i+0x40>)
 800bdb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bdb4:	0800be0d 	.word	0x0800be0d
 800bdb8:	0800be21 	.word	0x0800be21
 800bdbc:	0800bd9d 	.word	0x0800bd9d
 800bdc0:	0800bd9d 	.word	0x0800bd9d
 800bdc4:	0800bd9d 	.word	0x0800bd9d
 800bdc8:	0800bd9d 	.word	0x0800bd9d
 800bdcc:	0800be21 	.word	0x0800be21
 800bdd0:	0800bd9d 	.word	0x0800bd9d
 800bdd4:	0800bd9d 	.word	0x0800bd9d
 800bdd8:	0800bd9d 	.word	0x0800bd9d
 800bddc:	0800bd9d 	.word	0x0800bd9d
 800bde0:	0800bf21 	.word	0x0800bf21
 800bde4:	0800be4b 	.word	0x0800be4b
 800bde8:	0800bedb 	.word	0x0800bedb
 800bdec:	0800bd9d 	.word	0x0800bd9d
 800bdf0:	0800bd9d 	.word	0x0800bd9d
 800bdf4:	0800bf43 	.word	0x0800bf43
 800bdf8:	0800bd9d 	.word	0x0800bd9d
 800bdfc:	0800be4b 	.word	0x0800be4b
 800be00:	0800bd9d 	.word	0x0800bd9d
 800be04:	0800bd9d 	.word	0x0800bd9d
 800be08:	0800bee3 	.word	0x0800bee3
 800be0c:	6833      	ldr	r3, [r6, #0]
 800be0e:	1d1a      	adds	r2, r3, #4
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	6032      	str	r2, [r6, #0]
 800be14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800be1c:	2301      	movs	r3, #1
 800be1e:	e09d      	b.n	800bf5c <_printf_i+0x1e8>
 800be20:	6833      	ldr	r3, [r6, #0]
 800be22:	6820      	ldr	r0, [r4, #0]
 800be24:	1d19      	adds	r1, r3, #4
 800be26:	6031      	str	r1, [r6, #0]
 800be28:	0606      	lsls	r6, r0, #24
 800be2a:	d501      	bpl.n	800be30 <_printf_i+0xbc>
 800be2c:	681d      	ldr	r5, [r3, #0]
 800be2e:	e003      	b.n	800be38 <_printf_i+0xc4>
 800be30:	0645      	lsls	r5, r0, #25
 800be32:	d5fb      	bpl.n	800be2c <_printf_i+0xb8>
 800be34:	f9b3 5000 	ldrsh.w	r5, [r3]
 800be38:	2d00      	cmp	r5, #0
 800be3a:	da03      	bge.n	800be44 <_printf_i+0xd0>
 800be3c:	232d      	movs	r3, #45	@ 0x2d
 800be3e:	426d      	negs	r5, r5
 800be40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be44:	4859      	ldr	r0, [pc, #356]	@ (800bfac <_printf_i+0x238>)
 800be46:	230a      	movs	r3, #10
 800be48:	e011      	b.n	800be6e <_printf_i+0xfa>
 800be4a:	6821      	ldr	r1, [r4, #0]
 800be4c:	6833      	ldr	r3, [r6, #0]
 800be4e:	0608      	lsls	r0, r1, #24
 800be50:	f853 5b04 	ldr.w	r5, [r3], #4
 800be54:	d402      	bmi.n	800be5c <_printf_i+0xe8>
 800be56:	0649      	lsls	r1, r1, #25
 800be58:	bf48      	it	mi
 800be5a:	b2ad      	uxthmi	r5, r5
 800be5c:	2f6f      	cmp	r7, #111	@ 0x6f
 800be5e:	4853      	ldr	r0, [pc, #332]	@ (800bfac <_printf_i+0x238>)
 800be60:	6033      	str	r3, [r6, #0]
 800be62:	bf14      	ite	ne
 800be64:	230a      	movne	r3, #10
 800be66:	2308      	moveq	r3, #8
 800be68:	2100      	movs	r1, #0
 800be6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800be6e:	6866      	ldr	r6, [r4, #4]
 800be70:	60a6      	str	r6, [r4, #8]
 800be72:	2e00      	cmp	r6, #0
 800be74:	bfa2      	ittt	ge
 800be76:	6821      	ldrge	r1, [r4, #0]
 800be78:	f021 0104 	bicge.w	r1, r1, #4
 800be7c:	6021      	strge	r1, [r4, #0]
 800be7e:	b90d      	cbnz	r5, 800be84 <_printf_i+0x110>
 800be80:	2e00      	cmp	r6, #0
 800be82:	d04b      	beq.n	800bf1c <_printf_i+0x1a8>
 800be84:	4616      	mov	r6, r2
 800be86:	fbb5 f1f3 	udiv	r1, r5, r3
 800be8a:	fb03 5711 	mls	r7, r3, r1, r5
 800be8e:	5dc7      	ldrb	r7, [r0, r7]
 800be90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800be94:	462f      	mov	r7, r5
 800be96:	42bb      	cmp	r3, r7
 800be98:	460d      	mov	r5, r1
 800be9a:	d9f4      	bls.n	800be86 <_printf_i+0x112>
 800be9c:	2b08      	cmp	r3, #8
 800be9e:	d10b      	bne.n	800beb8 <_printf_i+0x144>
 800bea0:	6823      	ldr	r3, [r4, #0]
 800bea2:	07df      	lsls	r7, r3, #31
 800bea4:	d508      	bpl.n	800beb8 <_printf_i+0x144>
 800bea6:	6923      	ldr	r3, [r4, #16]
 800bea8:	6861      	ldr	r1, [r4, #4]
 800beaa:	4299      	cmp	r1, r3
 800beac:	bfde      	ittt	le
 800beae:	2330      	movle	r3, #48	@ 0x30
 800beb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800beb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800beb8:	1b92      	subs	r2, r2, r6
 800beba:	6122      	str	r2, [r4, #16]
 800bebc:	f8cd a000 	str.w	sl, [sp]
 800bec0:	464b      	mov	r3, r9
 800bec2:	aa03      	add	r2, sp, #12
 800bec4:	4621      	mov	r1, r4
 800bec6:	4640      	mov	r0, r8
 800bec8:	f7ff fee6 	bl	800bc98 <_printf_common>
 800becc:	3001      	adds	r0, #1
 800bece:	d14a      	bne.n	800bf66 <_printf_i+0x1f2>
 800bed0:	f04f 30ff 	mov.w	r0, #4294967295
 800bed4:	b004      	add	sp, #16
 800bed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beda:	6823      	ldr	r3, [r4, #0]
 800bedc:	f043 0320 	orr.w	r3, r3, #32
 800bee0:	6023      	str	r3, [r4, #0]
 800bee2:	4833      	ldr	r0, [pc, #204]	@ (800bfb0 <_printf_i+0x23c>)
 800bee4:	2778      	movs	r7, #120	@ 0x78
 800bee6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800beea:	6823      	ldr	r3, [r4, #0]
 800beec:	6831      	ldr	r1, [r6, #0]
 800beee:	061f      	lsls	r7, r3, #24
 800bef0:	f851 5b04 	ldr.w	r5, [r1], #4
 800bef4:	d402      	bmi.n	800befc <_printf_i+0x188>
 800bef6:	065f      	lsls	r7, r3, #25
 800bef8:	bf48      	it	mi
 800befa:	b2ad      	uxthmi	r5, r5
 800befc:	6031      	str	r1, [r6, #0]
 800befe:	07d9      	lsls	r1, r3, #31
 800bf00:	bf44      	itt	mi
 800bf02:	f043 0320 	orrmi.w	r3, r3, #32
 800bf06:	6023      	strmi	r3, [r4, #0]
 800bf08:	b11d      	cbz	r5, 800bf12 <_printf_i+0x19e>
 800bf0a:	2310      	movs	r3, #16
 800bf0c:	e7ac      	b.n	800be68 <_printf_i+0xf4>
 800bf0e:	4827      	ldr	r0, [pc, #156]	@ (800bfac <_printf_i+0x238>)
 800bf10:	e7e9      	b.n	800bee6 <_printf_i+0x172>
 800bf12:	6823      	ldr	r3, [r4, #0]
 800bf14:	f023 0320 	bic.w	r3, r3, #32
 800bf18:	6023      	str	r3, [r4, #0]
 800bf1a:	e7f6      	b.n	800bf0a <_printf_i+0x196>
 800bf1c:	4616      	mov	r6, r2
 800bf1e:	e7bd      	b.n	800be9c <_printf_i+0x128>
 800bf20:	6833      	ldr	r3, [r6, #0]
 800bf22:	6825      	ldr	r5, [r4, #0]
 800bf24:	6961      	ldr	r1, [r4, #20]
 800bf26:	1d18      	adds	r0, r3, #4
 800bf28:	6030      	str	r0, [r6, #0]
 800bf2a:	062e      	lsls	r6, r5, #24
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	d501      	bpl.n	800bf34 <_printf_i+0x1c0>
 800bf30:	6019      	str	r1, [r3, #0]
 800bf32:	e002      	b.n	800bf3a <_printf_i+0x1c6>
 800bf34:	0668      	lsls	r0, r5, #25
 800bf36:	d5fb      	bpl.n	800bf30 <_printf_i+0x1bc>
 800bf38:	8019      	strh	r1, [r3, #0]
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	6123      	str	r3, [r4, #16]
 800bf3e:	4616      	mov	r6, r2
 800bf40:	e7bc      	b.n	800bebc <_printf_i+0x148>
 800bf42:	6833      	ldr	r3, [r6, #0]
 800bf44:	1d1a      	adds	r2, r3, #4
 800bf46:	6032      	str	r2, [r6, #0]
 800bf48:	681e      	ldr	r6, [r3, #0]
 800bf4a:	6862      	ldr	r2, [r4, #4]
 800bf4c:	2100      	movs	r1, #0
 800bf4e:	4630      	mov	r0, r6
 800bf50:	f7f4 f94e 	bl	80001f0 <memchr>
 800bf54:	b108      	cbz	r0, 800bf5a <_printf_i+0x1e6>
 800bf56:	1b80      	subs	r0, r0, r6
 800bf58:	6060      	str	r0, [r4, #4]
 800bf5a:	6863      	ldr	r3, [r4, #4]
 800bf5c:	6123      	str	r3, [r4, #16]
 800bf5e:	2300      	movs	r3, #0
 800bf60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf64:	e7aa      	b.n	800bebc <_printf_i+0x148>
 800bf66:	6923      	ldr	r3, [r4, #16]
 800bf68:	4632      	mov	r2, r6
 800bf6a:	4649      	mov	r1, r9
 800bf6c:	4640      	mov	r0, r8
 800bf6e:	47d0      	blx	sl
 800bf70:	3001      	adds	r0, #1
 800bf72:	d0ad      	beq.n	800bed0 <_printf_i+0x15c>
 800bf74:	6823      	ldr	r3, [r4, #0]
 800bf76:	079b      	lsls	r3, r3, #30
 800bf78:	d413      	bmi.n	800bfa2 <_printf_i+0x22e>
 800bf7a:	68e0      	ldr	r0, [r4, #12]
 800bf7c:	9b03      	ldr	r3, [sp, #12]
 800bf7e:	4298      	cmp	r0, r3
 800bf80:	bfb8      	it	lt
 800bf82:	4618      	movlt	r0, r3
 800bf84:	e7a6      	b.n	800bed4 <_printf_i+0x160>
 800bf86:	2301      	movs	r3, #1
 800bf88:	4632      	mov	r2, r6
 800bf8a:	4649      	mov	r1, r9
 800bf8c:	4640      	mov	r0, r8
 800bf8e:	47d0      	blx	sl
 800bf90:	3001      	adds	r0, #1
 800bf92:	d09d      	beq.n	800bed0 <_printf_i+0x15c>
 800bf94:	3501      	adds	r5, #1
 800bf96:	68e3      	ldr	r3, [r4, #12]
 800bf98:	9903      	ldr	r1, [sp, #12]
 800bf9a:	1a5b      	subs	r3, r3, r1
 800bf9c:	42ab      	cmp	r3, r5
 800bf9e:	dcf2      	bgt.n	800bf86 <_printf_i+0x212>
 800bfa0:	e7eb      	b.n	800bf7a <_printf_i+0x206>
 800bfa2:	2500      	movs	r5, #0
 800bfa4:	f104 0619 	add.w	r6, r4, #25
 800bfa8:	e7f5      	b.n	800bf96 <_printf_i+0x222>
 800bfaa:	bf00      	nop
 800bfac:	0800c625 	.word	0x0800c625
 800bfb0:	0800c636 	.word	0x0800c636

0800bfb4 <_sbrk_r>:
 800bfb4:	b538      	push	{r3, r4, r5, lr}
 800bfb6:	4d06      	ldr	r5, [pc, #24]	@ (800bfd0 <_sbrk_r+0x1c>)
 800bfb8:	2300      	movs	r3, #0
 800bfba:	4604      	mov	r4, r0
 800bfbc:	4608      	mov	r0, r1
 800bfbe:	602b      	str	r3, [r5, #0]
 800bfc0:	f7f5 f8fe 	bl	80011c0 <_sbrk>
 800bfc4:	1c43      	adds	r3, r0, #1
 800bfc6:	d102      	bne.n	800bfce <_sbrk_r+0x1a>
 800bfc8:	682b      	ldr	r3, [r5, #0]
 800bfca:	b103      	cbz	r3, 800bfce <_sbrk_r+0x1a>
 800bfcc:	6023      	str	r3, [r4, #0]
 800bfce:	bd38      	pop	{r3, r4, r5, pc}
 800bfd0:	2000ffa4 	.word	0x2000ffa4

0800bfd4 <_realloc_r>:
 800bfd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd8:	4680      	mov	r8, r0
 800bfda:	4615      	mov	r5, r2
 800bfdc:	460c      	mov	r4, r1
 800bfde:	b921      	cbnz	r1, 800bfea <_realloc_r+0x16>
 800bfe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe4:	4611      	mov	r1, r2
 800bfe6:	f7ff bc73 	b.w	800b8d0 <_malloc_r>
 800bfea:	b92a      	cbnz	r2, 800bff8 <_realloc_r+0x24>
 800bfec:	f7ff fc04 	bl	800b7f8 <_free_r>
 800bff0:	2400      	movs	r4, #0
 800bff2:	4620      	mov	r0, r4
 800bff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bff8:	f000 f81a 	bl	800c030 <_malloc_usable_size_r>
 800bffc:	4285      	cmp	r5, r0
 800bffe:	4606      	mov	r6, r0
 800c000:	d802      	bhi.n	800c008 <_realloc_r+0x34>
 800c002:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c006:	d8f4      	bhi.n	800bff2 <_realloc_r+0x1e>
 800c008:	4629      	mov	r1, r5
 800c00a:	4640      	mov	r0, r8
 800c00c:	f7ff fc60 	bl	800b8d0 <_malloc_r>
 800c010:	4607      	mov	r7, r0
 800c012:	2800      	cmp	r0, #0
 800c014:	d0ec      	beq.n	800bff0 <_realloc_r+0x1c>
 800c016:	42b5      	cmp	r5, r6
 800c018:	462a      	mov	r2, r5
 800c01a:	4621      	mov	r1, r4
 800c01c:	bf28      	it	cs
 800c01e:	4632      	movcs	r2, r6
 800c020:	f7ff fbdc 	bl	800b7dc <memcpy>
 800c024:	4621      	mov	r1, r4
 800c026:	4640      	mov	r0, r8
 800c028:	f7ff fbe6 	bl	800b7f8 <_free_r>
 800c02c:	463c      	mov	r4, r7
 800c02e:	e7e0      	b.n	800bff2 <_realloc_r+0x1e>

0800c030 <_malloc_usable_size_r>:
 800c030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c034:	1f18      	subs	r0, r3, #4
 800c036:	2b00      	cmp	r3, #0
 800c038:	bfbc      	itt	lt
 800c03a:	580b      	ldrlt	r3, [r1, r0]
 800c03c:	18c0      	addlt	r0, r0, r3
 800c03e:	4770      	bx	lr

0800c040 <_init>:
 800c040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c042:	bf00      	nop
 800c044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c046:	bc08      	pop	{r3}
 800c048:	469e      	mov	lr, r3
 800c04a:	4770      	bx	lr

0800c04c <_fini>:
 800c04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c04e:	bf00      	nop
 800c050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c052:	bc08      	pop	{r3}
 800c054:	469e      	mov	lr, r3
 800c056:	4770      	bx	lr
