
EDIII_Control_Acceso.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012ab4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00017eb8  08012c54  08012c54  00013c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802ab0c  0802ab0c  0002c094  2**0
                  CONTENTS
  4 .ARM          00000008  0802ab0c  0802ab0c  0002bb0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802ab14  0802ab14  0002c094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802ab14  0802ab14  0002bb14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802ab18  0802ab18  0002bb18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  0802ab1c  0002c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000103c0  20000098  0802abb0  0002c098  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20010458  0802abb0  0002c458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002c094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000290e9  00000000  00000000  0002c0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b77  00000000  00000000  000551ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002410  00000000  00000000  0005bd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a7f  00000000  00000000  0005e138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020cf9  00000000  00000000  0005fbb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035f02  00000000  00000000  000808b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1a20  00000000  00000000  000b67b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  001681d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009794  00000000  00000000  00168288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00171a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00004c97  00000000  00000000  00171a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000001b0  00000000  00000000  00176710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012c3c 	.word	0x08012c3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	08012c3c 	.word	0x08012c3c

080001e0 <arm_bitreversal_32>:
 80001e0:	1c4b      	adds	r3, r1, #1
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf98      	it	ls
 80001e6:	4770      	bxls	lr
 80001e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ec:	1c91      	adds	r1, r2, #2
 80001ee:	089b      	lsrs	r3, r3, #2

080001f0 <arm_bitreversal_32_0>:
 80001f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f8:	880a      	ldrh	r2, [r1, #0]
 80001fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001fe:	4480      	add	r8, r0
 8000200:	4481      	add	r9, r0
 8000202:	4402      	add	r2, r0
 8000204:	4484      	add	ip, r0
 8000206:	f8d9 7000 	ldr.w	r7, [r9]
 800020a:	f8d8 6000 	ldr.w	r6, [r8]
 800020e:	6815      	ldr	r5, [r2, #0]
 8000210:	f8dc 4000 	ldr.w	r4, [ip]
 8000214:	f8c9 6000 	str.w	r6, [r9]
 8000218:	f8c8 7000 	str.w	r7, [r8]
 800021c:	f8cc 5000 	str.w	r5, [ip]
 8000220:	6014      	str	r4, [r2, #0]
 8000222:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000226:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800022a:	6855      	ldr	r5, [r2, #4]
 800022c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000230:	f8c9 6004 	str.w	r6, [r9, #4]
 8000234:	f8c8 7004 	str.w	r7, [r8, #4]
 8000238:	f8cc 5004 	str.w	r5, [ip, #4]
 800023c:	6054      	str	r4, [r2, #4]
 800023e:	3108      	adds	r1, #8
 8000240:	3b01      	subs	r3, #1
 8000242:	d1d5      	bne.n	80001f0 <arm_bitreversal_32_0>
 8000244:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	4770      	bx	lr

0800024a <arm_bitreversal_16>:
 800024a:	1c4b      	adds	r3, r1, #1
 800024c:	2b01      	cmp	r3, #1
 800024e:	bf98      	it	ls
 8000250:	4770      	bxls	lr
 8000252:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000256:	1c91      	adds	r1, r2, #2
 8000258:	089b      	lsrs	r3, r3, #2

0800025a <arm_bitreversal_16_0>:
 800025a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800025e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000262:	880a      	ldrh	r2, [r1, #0]
 8000264:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000268:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800026c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000270:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000274:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000278:	f8d9 7000 	ldr.w	r7, [r9]
 800027c:	f8d8 6000 	ldr.w	r6, [r8]
 8000280:	6815      	ldr	r5, [r2, #0]
 8000282:	f8dc 4000 	ldr.w	r4, [ip]
 8000286:	f8c9 6000 	str.w	r6, [r9]
 800028a:	f8c8 7000 	str.w	r7, [r8]
 800028e:	f8cc 5000 	str.w	r5, [ip]
 8000292:	6014      	str	r4, [r2, #0]
 8000294:	3108      	adds	r1, #8
 8000296:	3b01      	subs	r3, #1
 8000298:	d1df      	bne.n	800025a <arm_bitreversal_16_0>
 800029a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	4770      	bx	lr

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_drsub>:
 8000350:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000354:	e002      	b.n	800035c <__adddf3>
 8000356:	bf00      	nop

08000358 <__aeabi_dsub>:
 8000358:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800035c <__adddf3>:
 800035c:	b530      	push	{r4, r5, lr}
 800035e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000362:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	bf1f      	itttt	ne
 8000372:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000376:	ea55 0c02 	orrsne.w	ip, r5, r2
 800037a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800037e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000382:	f000 80e2 	beq.w	800054a <__adddf3+0x1ee>
 8000386:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800038a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800038e:	bfb8      	it	lt
 8000390:	426d      	neglt	r5, r5
 8000392:	dd0c      	ble.n	80003ae <__adddf3+0x52>
 8000394:	442c      	add	r4, r5
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	ea82 0000 	eor.w	r0, r2, r0
 80003a2:	ea83 0101 	eor.w	r1, r3, r1
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	2d36      	cmp	r5, #54	@ 0x36
 80003b0:	bf88      	it	hi
 80003b2:	bd30      	pophi	{r4, r5, pc}
 80003b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003c4:	d002      	beq.n	80003cc <__adddf3+0x70>
 80003c6:	4240      	negs	r0, r0
 80003c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003d8:	d002      	beq.n	80003e0 <__adddf3+0x84>
 80003da:	4252      	negs	r2, r2
 80003dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003e0:	ea94 0f05 	teq	r4, r5
 80003e4:	f000 80a7 	beq.w	8000536 <__adddf3+0x1da>
 80003e8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80003f0:	db0d      	blt.n	800040e <__adddf3+0xb2>
 80003f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003f6:	fa22 f205 	lsr.w	r2, r2, r5
 80003fa:	1880      	adds	r0, r0, r2
 80003fc:	f141 0100 	adc.w	r1, r1, #0
 8000400:	fa03 f20e 	lsl.w	r2, r3, lr
 8000404:	1880      	adds	r0, r0, r2
 8000406:	fa43 f305 	asr.w	r3, r3, r5
 800040a:	4159      	adcs	r1, r3
 800040c:	e00e      	b.n	800042c <__adddf3+0xd0>
 800040e:	f1a5 0520 	sub.w	r5, r5, #32
 8000412:	f10e 0e20 	add.w	lr, lr, #32
 8000416:	2a01      	cmp	r2, #1
 8000418:	fa03 fc0e 	lsl.w	ip, r3, lr
 800041c:	bf28      	it	cs
 800041e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000422:	fa43 f305 	asr.w	r3, r3, r5
 8000426:	18c0      	adds	r0, r0, r3
 8000428:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000430:	d507      	bpl.n	8000442 <__adddf3+0xe6>
 8000432:	f04f 0e00 	mov.w	lr, #0
 8000436:	f1dc 0c00 	rsbs	ip, ip, #0
 800043a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800043e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000442:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000446:	d31b      	bcc.n	8000480 <__adddf3+0x124>
 8000448:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800044c:	d30c      	bcc.n	8000468 <__adddf3+0x10c>
 800044e:	0849      	lsrs	r1, r1, #1
 8000450:	ea5f 0030 	movs.w	r0, r0, rrx
 8000454:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000458:	f104 0401 	add.w	r4, r4, #1
 800045c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000460:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000464:	f080 809a 	bcs.w	800059c <__adddf3+0x240>
 8000468:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800046c:	bf08      	it	eq
 800046e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000472:	f150 0000 	adcs.w	r0, r0, #0
 8000476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800047a:	ea41 0105 	orr.w	r1, r1, r5
 800047e:	bd30      	pop	{r4, r5, pc}
 8000480:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000484:	4140      	adcs	r0, r0
 8000486:	eb41 0101 	adc.w	r1, r1, r1
 800048a:	3c01      	subs	r4, #1
 800048c:	bf28      	it	cs
 800048e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000492:	d2e9      	bcs.n	8000468 <__adddf3+0x10c>
 8000494:	f091 0f00 	teq	r1, #0
 8000498:	bf04      	itt	eq
 800049a:	4601      	moveq	r1, r0
 800049c:	2000      	moveq	r0, #0
 800049e:	fab1 f381 	clz	r3, r1
 80004a2:	bf08      	it	eq
 80004a4:	3320      	addeq	r3, #32
 80004a6:	f1a3 030b 	sub.w	r3, r3, #11
 80004aa:	f1b3 0220 	subs.w	r2, r3, #32
 80004ae:	da0c      	bge.n	80004ca <__adddf3+0x16e>
 80004b0:	320c      	adds	r2, #12
 80004b2:	dd08      	ble.n	80004c6 <__adddf3+0x16a>
 80004b4:	f102 0c14 	add.w	ip, r2, #20
 80004b8:	f1c2 020c 	rsb	r2, r2, #12
 80004bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004c0:	fa21 f102 	lsr.w	r1, r1, r2
 80004c4:	e00c      	b.n	80004e0 <__adddf3+0x184>
 80004c6:	f102 0214 	add.w	r2, r2, #20
 80004ca:	bfd8      	it	le
 80004cc:	f1c2 0c20 	rsble	ip, r2, #32
 80004d0:	fa01 f102 	lsl.w	r1, r1, r2
 80004d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004d8:	bfdc      	itt	le
 80004da:	ea41 010c 	orrle.w	r1, r1, ip
 80004de:	4090      	lslle	r0, r2
 80004e0:	1ae4      	subs	r4, r4, r3
 80004e2:	bfa2      	ittt	ge
 80004e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004e8:	4329      	orrge	r1, r5
 80004ea:	bd30      	popge	{r4, r5, pc}
 80004ec:	ea6f 0404 	mvn.w	r4, r4
 80004f0:	3c1f      	subs	r4, #31
 80004f2:	da1c      	bge.n	800052e <__adddf3+0x1d2>
 80004f4:	340c      	adds	r4, #12
 80004f6:	dc0e      	bgt.n	8000516 <__adddf3+0x1ba>
 80004f8:	f104 0414 	add.w	r4, r4, #20
 80004fc:	f1c4 0220 	rsb	r2, r4, #32
 8000500:	fa20 f004 	lsr.w	r0, r0, r4
 8000504:	fa01 f302 	lsl.w	r3, r1, r2
 8000508:	ea40 0003 	orr.w	r0, r0, r3
 800050c:	fa21 f304 	lsr.w	r3, r1, r4
 8000510:	ea45 0103 	orr.w	r1, r5, r3
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f1c4 040c 	rsb	r4, r4, #12
 800051a:	f1c4 0220 	rsb	r2, r4, #32
 800051e:	fa20 f002 	lsr.w	r0, r0, r2
 8000522:	fa01 f304 	lsl.w	r3, r1, r4
 8000526:	ea40 0003 	orr.w	r0, r0, r3
 800052a:	4629      	mov	r1, r5
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	fa21 f004 	lsr.w	r0, r1, r4
 8000532:	4629      	mov	r1, r5
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f094 0f00 	teq	r4, #0
 800053a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800053e:	bf06      	itte	eq
 8000540:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000544:	3401      	addeq	r4, #1
 8000546:	3d01      	subne	r5, #1
 8000548:	e74e      	b.n	80003e8 <__adddf3+0x8c>
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf18      	it	ne
 8000550:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000554:	d029      	beq.n	80005aa <__adddf3+0x24e>
 8000556:	ea94 0f05 	teq	r4, r5
 800055a:	bf08      	it	eq
 800055c:	ea90 0f02 	teqeq	r0, r2
 8000560:	d005      	beq.n	800056e <__adddf3+0x212>
 8000562:	ea54 0c00 	orrs.w	ip, r4, r0
 8000566:	bf04      	itt	eq
 8000568:	4619      	moveq	r1, r3
 800056a:	4610      	moveq	r0, r2
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	ea91 0f03 	teq	r1, r3
 8000572:	bf1e      	ittt	ne
 8000574:	2100      	movne	r1, #0
 8000576:	2000      	movne	r0, #0
 8000578:	bd30      	popne	{r4, r5, pc}
 800057a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800057e:	d105      	bne.n	800058c <__adddf3+0x230>
 8000580:	0040      	lsls	r0, r0, #1
 8000582:	4149      	adcs	r1, r1
 8000584:	bf28      	it	cs
 8000586:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000590:	bf3c      	itt	cc
 8000592:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000596:	bd30      	popcc	{r4, r5, pc}
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800059c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005a4:	f04f 0000 	mov.w	r0, #0
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf1a      	itte	ne
 80005b0:	4619      	movne	r1, r3
 80005b2:	4610      	movne	r0, r2
 80005b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005b8:	bf1c      	itt	ne
 80005ba:	460b      	movne	r3, r1
 80005bc:	4602      	movne	r2, r0
 80005be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005c2:	bf06      	itte	eq
 80005c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005c8:	ea91 0f03 	teqeq	r1, r3
 80005cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	bf00      	nop

080005d4 <__aeabi_ui2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e8:	f04f 0500 	mov.w	r5, #0
 80005ec:	f04f 0100 	mov.w	r1, #0
 80005f0:	e750      	b.n	8000494 <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_i2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000608:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800060c:	bf48      	it	mi
 800060e:	4240      	negmi	r0, r0
 8000610:	f04f 0100 	mov.w	r1, #0
 8000614:	e73e      	b.n	8000494 <__adddf3+0x138>
 8000616:	bf00      	nop

08000618 <__aeabi_f2d>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800061e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000622:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000626:	bf1f      	itttt	ne
 8000628:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800062c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000630:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000634:	4770      	bxne	lr
 8000636:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800063a:	bf08      	it	eq
 800063c:	4770      	bxeq	lr
 800063e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000642:	bf04      	itt	eq
 8000644:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000648:	4770      	bxeq	lr
 800064a:	b530      	push	{r4, r5, lr}
 800064c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000650:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000654:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	e71c      	b.n	8000494 <__adddf3+0x138>
 800065a:	bf00      	nop

0800065c <__aeabi_ul2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	e00a      	b.n	8000682 <__aeabi_l2d+0x16>

0800066c <__aeabi_l2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800067a:	d502      	bpl.n	8000682 <__aeabi_l2d+0x16>
 800067c:	4240      	negs	r0, r0
 800067e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000682:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000686:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800068a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800068e:	f43f aed8 	beq.w	8000442 <__adddf3+0xe6>
 8000692:	f04f 0203 	mov.w	r2, #3
 8000696:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800069a:	bf18      	it	ne
 800069c:	3203      	addne	r2, #3
 800069e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006a2:	bf18      	it	ne
 80006a4:	3203      	addne	r2, #3
 80006a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006aa:	f1c2 0320 	rsb	r3, r2, #32
 80006ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ba:	ea40 000e 	orr.w	r0, r0, lr
 80006be:	fa21 f102 	lsr.w	r1, r1, r2
 80006c2:	4414      	add	r4, r2
 80006c4:	e6bd      	b.n	8000442 <__adddf3+0xe6>
 80006c6:	bf00      	nop

080006c8 <__aeabi_dmul>:
 80006c8:	b570      	push	{r4, r5, r6, lr}
 80006ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006d6:	bf1d      	ittte	ne
 80006d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006dc:	ea94 0f0c 	teqne	r4, ip
 80006e0:	ea95 0f0c 	teqne	r5, ip
 80006e4:	f000 f8de 	bleq	80008a4 <__aeabi_dmul+0x1dc>
 80006e8:	442c      	add	r4, r5
 80006ea:	ea81 0603 	eor.w	r6, r1, r3
 80006ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006fa:	bf18      	it	ne
 80006fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000704:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000708:	d038      	beq.n	800077c <__aeabi_dmul+0xb4>
 800070a:	fba0 ce02 	umull	ip, lr, r0, r2
 800070e:	f04f 0500 	mov.w	r5, #0
 8000712:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000716:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800071a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800071e:	f04f 0600 	mov.w	r6, #0
 8000722:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000726:	f09c 0f00 	teq	ip, #0
 800072a:	bf18      	it	ne
 800072c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000730:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000734:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000738:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800073c:	d204      	bcs.n	8000748 <__aeabi_dmul+0x80>
 800073e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000742:	416d      	adcs	r5, r5
 8000744:	eb46 0606 	adc.w	r6, r6, r6
 8000748:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800074c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000750:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000754:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000758:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800075c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000760:	bf88      	it	hi
 8000762:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000766:	d81e      	bhi.n	80007a6 <__aeabi_dmul+0xde>
 8000768:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800076c:	bf08      	it	eq
 800076e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000772:	f150 0000 	adcs.w	r0, r0, #0
 8000776:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000780:	ea46 0101 	orr.w	r1, r6, r1
 8000784:	ea40 0002 	orr.w	r0, r0, r2
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000790:	bfc2      	ittt	gt
 8000792:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000796:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800079a:	bd70      	popgt	{r4, r5, r6, pc}
 800079c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007a0:	f04f 0e00 	mov.w	lr, #0
 80007a4:	3c01      	subs	r4, #1
 80007a6:	f300 80ab 	bgt.w	8000900 <__aeabi_dmul+0x238>
 80007aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007ae:	bfde      	ittt	le
 80007b0:	2000      	movle	r0, #0
 80007b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007b6:	bd70      	pople	{r4, r5, r6, pc}
 80007b8:	f1c4 0400 	rsb	r4, r4, #0
 80007bc:	3c20      	subs	r4, #32
 80007be:	da35      	bge.n	800082c <__aeabi_dmul+0x164>
 80007c0:	340c      	adds	r4, #12
 80007c2:	dc1b      	bgt.n	80007fc <__aeabi_dmul+0x134>
 80007c4:	f104 0414 	add.w	r4, r4, #20
 80007c8:	f1c4 0520 	rsb	r5, r4, #32
 80007cc:	fa00 f305 	lsl.w	r3, r0, r5
 80007d0:	fa20 f004 	lsr.w	r0, r0, r4
 80007d4:	fa01 f205 	lsl.w	r2, r1, r5
 80007d8:	ea40 0002 	orr.w	r0, r0, r2
 80007dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007e8:	fa21 f604 	lsr.w	r6, r1, r4
 80007ec:	eb42 0106 	adc.w	r1, r2, r6
 80007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f1c4 040c 	rsb	r4, r4, #12
 8000800:	f1c4 0520 	rsb	r5, r4, #32
 8000804:	fa00 f304 	lsl.w	r3, r0, r4
 8000808:	fa20 f005 	lsr.w	r0, r0, r5
 800080c:	fa01 f204 	lsl.w	r2, r1, r4
 8000810:	ea40 0002 	orr.w	r0, r0, r2
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800081c:	f141 0100 	adc.w	r1, r1, #0
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 0520 	rsb	r5, r4, #32
 8000830:	fa00 f205 	lsl.w	r2, r0, r5
 8000834:	ea4e 0e02 	orr.w	lr, lr, r2
 8000838:	fa20 f304 	lsr.w	r3, r0, r4
 800083c:	fa01 f205 	lsl.w	r2, r1, r5
 8000840:	ea43 0302 	orr.w	r3, r3, r2
 8000844:	fa21 f004 	lsr.w	r0, r1, r4
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800084c:	fa21 f204 	lsr.w	r2, r1, r4
 8000850:	ea20 0002 	bic.w	r0, r0, r2
 8000854:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000858:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800085c:	bf08      	it	eq
 800085e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000862:	bd70      	pop	{r4, r5, r6, pc}
 8000864:	f094 0f00 	teq	r4, #0
 8000868:	d10f      	bne.n	800088a <__aeabi_dmul+0x1c2>
 800086a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800086e:	0040      	lsls	r0, r0, #1
 8000870:	eb41 0101 	adc.w	r1, r1, r1
 8000874:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000878:	bf08      	it	eq
 800087a:	3c01      	subeq	r4, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1a6>
 800087e:	ea41 0106 	orr.w	r1, r1, r6
 8000882:	f095 0f00 	teq	r5, #0
 8000886:	bf18      	it	ne
 8000888:	4770      	bxne	lr
 800088a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800088e:	0052      	lsls	r2, r2, #1
 8000890:	eb43 0303 	adc.w	r3, r3, r3
 8000894:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000898:	bf08      	it	eq
 800089a:	3d01      	subeq	r5, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1c6>
 800089e:	ea43 0306 	orr.w	r3, r3, r6
 80008a2:	4770      	bx	lr
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ac:	bf18      	it	ne
 80008ae:	ea95 0f0c 	teqne	r5, ip
 80008b2:	d00c      	beq.n	80008ce <__aeabi_dmul+0x206>
 80008b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b8:	bf18      	it	ne
 80008ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008be:	d1d1      	bne.n	8000864 <__aeabi_dmul+0x19c>
 80008c0:	ea81 0103 	eor.w	r1, r1, r3
 80008c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008c8:	f04f 0000 	mov.w	r0, #0
 80008cc:	bd70      	pop	{r4, r5, r6, pc}
 80008ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d2:	bf06      	itte	eq
 80008d4:	4610      	moveq	r0, r2
 80008d6:	4619      	moveq	r1, r3
 80008d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008dc:	d019      	beq.n	8000912 <__aeabi_dmul+0x24a>
 80008de:	ea94 0f0c 	teq	r4, ip
 80008e2:	d102      	bne.n	80008ea <__aeabi_dmul+0x222>
 80008e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008e8:	d113      	bne.n	8000912 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	d105      	bne.n	80008fc <__aeabi_dmul+0x234>
 80008f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008f4:	bf1c      	itt	ne
 80008f6:	4610      	movne	r0, r2
 80008f8:	4619      	movne	r1, r3
 80008fa:	d10a      	bne.n	8000912 <__aeabi_dmul+0x24a>
 80008fc:	ea81 0103 	eor.w	r1, r1, r3
 8000900:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000904:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000908:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800090c:	f04f 0000 	mov.w	r0, #0
 8000910:	bd70      	pop	{r4, r5, r6, pc}
 8000912:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000916:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800091a:	bd70      	pop	{r4, r5, r6, pc}

0800091c <__aeabi_ddiv>:
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000922:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000926:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800092a:	bf1d      	ittte	ne
 800092c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000930:	ea94 0f0c 	teqne	r4, ip
 8000934:	ea95 0f0c 	teqne	r5, ip
 8000938:	f000 f8a7 	bleq	8000a8a <__aeabi_ddiv+0x16e>
 800093c:	eba4 0405 	sub.w	r4, r4, r5
 8000940:	ea81 0e03 	eor.w	lr, r1, r3
 8000944:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000948:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800094c:	f000 8088 	beq.w	8000a60 <__aeabi_ddiv+0x144>
 8000950:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000954:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000958:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800095c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000960:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000964:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000968:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800096c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000970:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000974:	429d      	cmp	r5, r3
 8000976:	bf08      	it	eq
 8000978:	4296      	cmpeq	r6, r2
 800097a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800097e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000982:	d202      	bcs.n	800098a <__aeabi_ddiv+0x6e>
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	ea4f 0232 	mov.w	r2, r2, rrx
 800098a:	1ab6      	subs	r6, r6, r2
 800098c:	eb65 0503 	sbc.w	r5, r5, r3
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800099a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800099e:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a6:	bf22      	ittt	cs
 80009a8:	1ab6      	subcs	r6, r6, r2
 80009aa:	4675      	movcs	r5, lr
 80009ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009be:	bf22      	ittt	cs
 80009c0:	1ab6      	subcs	r6, r6, r2
 80009c2:	4675      	movcs	r5, lr
 80009c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009c8:	085b      	lsrs	r3, r3, #1
 80009ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009fc:	d018      	beq.n	8000a30 <__aeabi_ddiv+0x114>
 80009fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a02:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a06:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a0e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a16:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a1a:	d1c0      	bne.n	800099e <__aeabi_ddiv+0x82>
 8000a1c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a20:	d10b      	bne.n	8000a3a <__aeabi_ddiv+0x11e>
 8000a22:	ea41 0100 	orr.w	r1, r1, r0
 8000a26:	f04f 0000 	mov.w	r0, #0
 8000a2a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a2e:	e7b6      	b.n	800099e <__aeabi_ddiv+0x82>
 8000a30:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a34:	bf04      	itt	eq
 8000a36:	4301      	orreq	r1, r0
 8000a38:	2000      	moveq	r0, #0
 8000a3a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a3e:	bf88      	it	hi
 8000a40:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a44:	f63f aeaf 	bhi.w	80007a6 <__aeabi_dmul+0xde>
 8000a48:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a4c:	bf04      	itt	eq
 8000a4e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a56:	f150 0000 	adcs.w	r0, r0, #0
 8000a5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}
 8000a60:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a64:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a68:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a6c:	bfc2      	ittt	gt
 8000a6e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a76:	bd70      	popgt	{r4, r5, r6, pc}
 8000a78:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a7c:	f04f 0e00 	mov.w	lr, #0
 8000a80:	3c01      	subs	r4, #1
 8000a82:	e690      	b.n	80007a6 <__aeabi_dmul+0xde>
 8000a84:	ea45 0e06 	orr.w	lr, r5, r6
 8000a88:	e68d      	b.n	80007a6 <__aeabi_dmul+0xde>
 8000a8a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a8e:	ea94 0f0c 	teq	r4, ip
 8000a92:	bf08      	it	eq
 8000a94:	ea95 0f0c 	teqeq	r5, ip
 8000a98:	f43f af3b 	beq.w	8000912 <__aeabi_dmul+0x24a>
 8000a9c:	ea94 0f0c 	teq	r4, ip
 8000aa0:	d10a      	bne.n	8000ab8 <__aeabi_ddiv+0x19c>
 8000aa2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000aa6:	f47f af34 	bne.w	8000912 <__aeabi_dmul+0x24a>
 8000aaa:	ea95 0f0c 	teq	r5, ip
 8000aae:	f47f af25 	bne.w	80008fc <__aeabi_dmul+0x234>
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	e72c      	b.n	8000912 <__aeabi_dmul+0x24a>
 8000ab8:	ea95 0f0c 	teq	r5, ip
 8000abc:	d106      	bne.n	8000acc <__aeabi_ddiv+0x1b0>
 8000abe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ac2:	f43f aefd 	beq.w	80008c0 <__aeabi_dmul+0x1f8>
 8000ac6:	4610      	mov	r0, r2
 8000ac8:	4619      	mov	r1, r3
 8000aca:	e722      	b.n	8000912 <__aeabi_dmul+0x24a>
 8000acc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ad0:	bf18      	it	ne
 8000ad2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ad6:	f47f aec5 	bne.w	8000864 <__aeabi_dmul+0x19c>
 8000ada:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ade:	f47f af0d 	bne.w	80008fc <__aeabi_dmul+0x234>
 8000ae2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ae6:	f47f aeeb 	bne.w	80008c0 <__aeabi_dmul+0x1f8>
 8000aea:	e712      	b.n	8000912 <__aeabi_dmul+0x24a>

08000aec <__aeabi_d2f>:
 8000aec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af4:	bf24      	itt	cs
 8000af6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000afe:	d90d      	bls.n	8000b1c <__aeabi_d2f+0x30>
 8000b00:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b0c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b14:	bf08      	it	eq
 8000b16:	f020 0001 	biceq.w	r0, r0, #1
 8000b1a:	4770      	bx	lr
 8000b1c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b20:	d121      	bne.n	8000b66 <__aeabi_d2f+0x7a>
 8000b22:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b26:	bfbc      	itt	lt
 8000b28:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b2c:	4770      	bxlt	lr
 8000b2e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b36:	f1c2 0218 	rsb	r2, r2, #24
 8000b3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b42:	fa20 f002 	lsr.w	r0, r0, r2
 8000b46:	bf18      	it	ne
 8000b48:	f040 0001 	orrne.w	r0, r0, #1
 8000b4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b58:	ea40 000c 	orr.w	r0, r0, ip
 8000b5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b64:	e7cc      	b.n	8000b00 <__aeabi_d2f+0x14>
 8000b66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6a:	d107      	bne.n	8000b7c <__aeabi_d2f+0x90>
 8000b6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b70:	bf1e      	ittt	ne
 8000b72:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b76:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7a:	4770      	bxne	lr
 8000b7c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b80:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b84:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b96a 	b.w	8000e78 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9d08      	ldr	r5, [sp, #32]
 8000bc2:	460c      	mov	r4, r1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d14e      	bne.n	8000c66 <__udivmoddi4+0xaa>
 8000bc8:	4694      	mov	ip, r2
 8000bca:	458c      	cmp	ip, r1
 8000bcc:	4686      	mov	lr, r0
 8000bce:	fab2 f282 	clz	r2, r2
 8000bd2:	d962      	bls.n	8000c9a <__udivmoddi4+0xde>
 8000bd4:	b14a      	cbz	r2, 8000bea <__udivmoddi4+0x2e>
 8000bd6:	f1c2 0320 	rsb	r3, r2, #32
 8000bda:	4091      	lsls	r1, r2
 8000bdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000be0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be4:	4319      	orrs	r1, r3
 8000be6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bee:	fa1f f68c 	uxth.w	r6, ip
 8000bf2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bf6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bfa:	fb07 1114 	mls	r1, r7, r4, r1
 8000bfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c02:	fb04 f106 	mul.w	r1, r4, r6
 8000c06:	4299      	cmp	r1, r3
 8000c08:	d90a      	bls.n	8000c20 <__udivmoddi4+0x64>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c12:	f080 8112 	bcs.w	8000e3a <__udivmoddi4+0x27e>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 810f 	bls.w	8000e3a <__udivmoddi4+0x27e>
 8000c1c:	3c02      	subs	r4, #2
 8000c1e:	4463      	add	r3, ip
 8000c20:	1a59      	subs	r1, r3, r1
 8000c22:	fa1f f38e 	uxth.w	r3, lr
 8000c26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c32:	fb00 f606 	mul.w	r6, r0, r6
 8000c36:	429e      	cmp	r6, r3
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x94>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c42:	f080 80fc 	bcs.w	8000e3e <__udivmoddi4+0x282>
 8000c46:	429e      	cmp	r6, r3
 8000c48:	f240 80f9 	bls.w	8000e3e <__udivmoddi4+0x282>
 8000c4c:	4463      	add	r3, ip
 8000c4e:	3802      	subs	r0, #2
 8000c50:	1b9b      	subs	r3, r3, r6
 8000c52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c56:	2100      	movs	r1, #0
 8000c58:	b11d      	cbz	r5, 8000c62 <__udivmoddi4+0xa6>
 8000c5a:	40d3      	lsrs	r3, r2
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d905      	bls.n	8000c76 <__udivmoddi4+0xba>
 8000c6a:	b10d      	cbz	r5, 8000c70 <__udivmoddi4+0xb4>
 8000c6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c70:	2100      	movs	r1, #0
 8000c72:	4608      	mov	r0, r1
 8000c74:	e7f5      	b.n	8000c62 <__udivmoddi4+0xa6>
 8000c76:	fab3 f183 	clz	r1, r3
 8000c7a:	2900      	cmp	r1, #0
 8000c7c:	d146      	bne.n	8000d0c <__udivmoddi4+0x150>
 8000c7e:	42a3      	cmp	r3, r4
 8000c80:	d302      	bcc.n	8000c88 <__udivmoddi4+0xcc>
 8000c82:	4290      	cmp	r0, r2
 8000c84:	f0c0 80f0 	bcc.w	8000e68 <__udivmoddi4+0x2ac>
 8000c88:	1a86      	subs	r6, r0, r2
 8000c8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c8e:	2001      	movs	r0, #1
 8000c90:	2d00      	cmp	r5, #0
 8000c92:	d0e6      	beq.n	8000c62 <__udivmoddi4+0xa6>
 8000c94:	e9c5 6300 	strd	r6, r3, [r5]
 8000c98:	e7e3      	b.n	8000c62 <__udivmoddi4+0xa6>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	f040 8090 	bne.w	8000dc0 <__udivmoddi4+0x204>
 8000ca0:	eba1 040c 	sub.w	r4, r1, ip
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa1f f78c 	uxth.w	r7, ip
 8000cac:	2101      	movs	r1, #1
 8000cae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cbe:	fb07 f006 	mul.w	r0, r7, r6
 8000cc2:	4298      	cmp	r0, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x11c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x11a>
 8000cd0:	4298      	cmp	r0, r3
 8000cd2:	f200 80cd 	bhi.w	8000e70 <__udivmoddi4+0x2b4>
 8000cd6:	4626      	mov	r6, r4
 8000cd8:	1a1c      	subs	r4, r3, r0
 8000cda:	fa1f f38e 	uxth.w	r3, lr
 8000cde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ce2:	fb08 4410 	mls	r4, r8, r0, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb00 f707 	mul.w	r7, r0, r7
 8000cee:	429f      	cmp	r7, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x148>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x146>
 8000cfc:	429f      	cmp	r7, r3
 8000cfe:	f200 80b0 	bhi.w	8000e62 <__udivmoddi4+0x2a6>
 8000d02:	4620      	mov	r0, r4
 8000d04:	1bdb      	subs	r3, r3, r7
 8000d06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0a:	e7a5      	b.n	8000c58 <__udivmoddi4+0x9c>
 8000d0c:	f1c1 0620 	rsb	r6, r1, #32
 8000d10:	408b      	lsls	r3, r1
 8000d12:	fa22 f706 	lsr.w	r7, r2, r6
 8000d16:	431f      	orrs	r7, r3
 8000d18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d20:	ea43 030c 	orr.w	r3, r3, ip
 8000d24:	40f4      	lsrs	r4, r6
 8000d26:	fa00 f801 	lsl.w	r8, r0, r1
 8000d2a:	0c38      	lsrs	r0, r7, #16
 8000d2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d30:	fbb4 fef0 	udiv	lr, r4, r0
 8000d34:	fa1f fc87 	uxth.w	ip, r7
 8000d38:	fb00 441e 	mls	r4, r0, lr, r4
 8000d3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d40:	fb0e f90c 	mul.w	r9, lr, ip
 8000d44:	45a1      	cmp	r9, r4
 8000d46:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4a:	d90a      	bls.n	8000d62 <__udivmoddi4+0x1a6>
 8000d4c:	193c      	adds	r4, r7, r4
 8000d4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d52:	f080 8084 	bcs.w	8000e5e <__udivmoddi4+0x2a2>
 8000d56:	45a1      	cmp	r9, r4
 8000d58:	f240 8081 	bls.w	8000e5e <__udivmoddi4+0x2a2>
 8000d5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d60:	443c      	add	r4, r7
 8000d62:	eba4 0409 	sub.w	r4, r4, r9
 8000d66:	fa1f f983 	uxth.w	r9, r3
 8000d6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	d907      	bls.n	8000d8e <__udivmoddi4+0x1d2>
 8000d7e:	193c      	adds	r4, r7, r4
 8000d80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d84:	d267      	bcs.n	8000e56 <__udivmoddi4+0x29a>
 8000d86:	45a4      	cmp	ip, r4
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0x29a>
 8000d8a:	3b02      	subs	r3, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d92:	fba0 9302 	umull	r9, r3, r0, r2
 8000d96:	eba4 040c 	sub.w	r4, r4, ip
 8000d9a:	429c      	cmp	r4, r3
 8000d9c:	46ce      	mov	lr, r9
 8000d9e:	469c      	mov	ip, r3
 8000da0:	d351      	bcc.n	8000e46 <__udivmoddi4+0x28a>
 8000da2:	d04e      	beq.n	8000e42 <__udivmoddi4+0x286>
 8000da4:	b155      	cbz	r5, 8000dbc <__udivmoddi4+0x200>
 8000da6:	ebb8 030e 	subs.w	r3, r8, lr
 8000daa:	eb64 040c 	sbc.w	r4, r4, ip
 8000dae:	fa04 f606 	lsl.w	r6, r4, r6
 8000db2:	40cb      	lsrs	r3, r1
 8000db4:	431e      	orrs	r6, r3
 8000db6:	40cc      	lsrs	r4, r1
 8000db8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	e750      	b.n	8000c62 <__udivmoddi4+0xa6>
 8000dc0:	f1c2 0320 	rsb	r3, r2, #32
 8000dc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000dc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dcc:	fa24 f303 	lsr.w	r3, r4, r3
 8000dd0:	4094      	lsls	r4, r2
 8000dd2:	430c      	orrs	r4, r1
 8000dd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ddc:	fa1f f78c 	uxth.w	r7, ip
 8000de0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de4:	fb08 3110 	mls	r1, r8, r0, r3
 8000de8:	0c23      	lsrs	r3, r4, #16
 8000dea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dee:	fb00 f107 	mul.w	r1, r0, r7
 8000df2:	4299      	cmp	r1, r3
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x24c>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dfe:	d22c      	bcs.n	8000e5a <__udivmoddi4+0x29e>
 8000e00:	4299      	cmp	r1, r3
 8000e02:	d92a      	bls.n	8000e5a <__udivmoddi4+0x29e>
 8000e04:	3802      	subs	r0, #2
 8000e06:	4463      	add	r3, ip
 8000e08:	1a5b      	subs	r3, r3, r1
 8000e0a:	b2a4      	uxth	r4, r4
 8000e0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e10:	fb08 3311 	mls	r3, r8, r1, r3
 8000e14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e18:	fb01 f307 	mul.w	r3, r1, r7
 8000e1c:	42a3      	cmp	r3, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x276>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e28:	d213      	bcs.n	8000e52 <__udivmoddi4+0x296>
 8000e2a:	42a3      	cmp	r3, r4
 8000e2c:	d911      	bls.n	8000e52 <__udivmoddi4+0x296>
 8000e2e:	3902      	subs	r1, #2
 8000e30:	4464      	add	r4, ip
 8000e32:	1ae4      	subs	r4, r4, r3
 8000e34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e38:	e739      	b.n	8000cae <__udivmoddi4+0xf2>
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	e6f0      	b.n	8000c20 <__udivmoddi4+0x64>
 8000e3e:	4608      	mov	r0, r1
 8000e40:	e706      	b.n	8000c50 <__udivmoddi4+0x94>
 8000e42:	45c8      	cmp	r8, r9
 8000e44:	d2ae      	bcs.n	8000da4 <__udivmoddi4+0x1e8>
 8000e46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e4e:	3801      	subs	r0, #1
 8000e50:	e7a8      	b.n	8000da4 <__udivmoddi4+0x1e8>
 8000e52:	4631      	mov	r1, r6
 8000e54:	e7ed      	b.n	8000e32 <__udivmoddi4+0x276>
 8000e56:	4603      	mov	r3, r0
 8000e58:	e799      	b.n	8000d8e <__udivmoddi4+0x1d2>
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	e7d4      	b.n	8000e08 <__udivmoddi4+0x24c>
 8000e5e:	46d6      	mov	lr, sl
 8000e60:	e77f      	b.n	8000d62 <__udivmoddi4+0x1a6>
 8000e62:	4463      	add	r3, ip
 8000e64:	3802      	subs	r0, #2
 8000e66:	e74d      	b.n	8000d04 <__udivmoddi4+0x148>
 8000e68:	4606      	mov	r6, r0
 8000e6a:	4623      	mov	r3, r4
 8000e6c:	4608      	mov	r0, r1
 8000e6e:	e70f      	b.n	8000c90 <__udivmoddi4+0xd4>
 8000e70:	3e02      	subs	r6, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	e730      	b.n	8000cd8 <__udivmoddi4+0x11c>
 8000e76:	bf00      	nop

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e86:	4802      	ldr	r0, [pc, #8]	@ (8000e90 <SELECT+0x14>)
 8000e88:	f004 faac 	bl	80053e4 <HAL_GPIO_WritePin>
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40020000 	.word	0x40020000

08000e94 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e9e:	4802      	ldr	r0, [pc, #8]	@ (8000ea8 <DESELECT+0x14>)
 8000ea0:	f004 faa0 	bl	80053e4 <HAL_GPIO_WritePin>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40020000 	.word	0x40020000

08000eac <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 8000eb6:	bf00      	nop
 8000eb8:	4808      	ldr	r0, [pc, #32]	@ (8000edc <SPI_TxByte+0x30>)
 8000eba:	f006 facb 	bl	8007454 <HAL_SPI_GetState>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d1f9      	bne.n	8000eb8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi3, &data, 1, SPI_TIMEOUT);
 8000ec4:	1df9      	adds	r1, r7, #7
 8000ec6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4803      	ldr	r0, [pc, #12]	@ (8000edc <SPI_TxByte+0x30>)
 8000ece:	f005 ffd4 	bl	8006e7a <HAL_SPI_Transmit>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000428 	.word	0x20000428

08000ee0 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000ee6:	23ff      	movs	r3, #255	@ 0xff
 8000ee8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY));
 8000eee:	bf00      	nop
 8000ef0:	4809      	ldr	r0, [pc, #36]	@ (8000f18 <SPI_RxByte+0x38>)
 8000ef2:	f006 faaf 	bl	8007454 <HAL_SPI_GetState>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d1f9      	bne.n	8000ef0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi3, &dummy, &data, 1, SPI_TIMEOUT);
 8000efc:	1dba      	adds	r2, r7, #6
 8000efe:	1df9      	adds	r1, r7, #7
 8000f00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2301      	movs	r3, #1
 8000f08:	4803      	ldr	r0, [pc, #12]	@ (8000f18 <SPI_RxByte+0x38>)
 8000f0a:	f006 f8fa 	bl	8007102 <HAL_SPI_TransmitReceive>
  
  return data;
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000428 	.word	0x20000428

08000f1c <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000f24:	f7ff ffdc 	bl	8000ee0 <SPI_RxByte>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	701a      	strb	r2, [r3, #0]
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f6c <SD_ReadyWait+0x34>)
 8000f40:	2232      	movs	r2, #50	@ 0x32
 8000f42:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8000f44:	f7ff ffcc 	bl	8000ee0 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8000f48:	f7ff ffca 	bl	8000ee0 <SPI_RxByte>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	2bff      	cmp	r3, #255	@ 0xff
 8000f54:	d004      	beq.n	8000f60 <SD_ReadyWait+0x28>
 8000f56:	4b05      	ldr	r3, [pc, #20]	@ (8000f6c <SD_ReadyWait+0x34>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f3      	bne.n	8000f48 <SD_ReadyWait+0x10>
  
  return res;
 8000f60:	79fb      	ldrb	r3, [r7, #7]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	2000056e 	.word	0x2000056e

08000f70 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000f76:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000f7a:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8000f7c:	f7ff ff8a 	bl	8000e94 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	e005      	b.n	8000f92 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000f86:	20ff      	movs	r0, #255	@ 0xff
 8000f88:	f7ff ff90 	bl	8000eac <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	2b09      	cmp	r3, #9
 8000f96:	ddf6      	ble.n	8000f86 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000f98:	f7ff ff70 	bl	8000e7c <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8000f9c:	2340      	movs	r3, #64	@ 0x40
 8000f9e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000fb0:	2395      	movs	r3, #149	@ 0x95
 8000fb2:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	e009      	b.n	8000fce <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000fba:	1d3a      	adds	r2, r7, #4
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff72 	bl	8000eac <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2b05      	cmp	r3, #5
 8000fd2:	ddf2      	ble.n	8000fba <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8000fd4:	e002      	b.n	8000fdc <SD_PowerOn+0x6c>
  {
    Count--;
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000fdc:	f7ff ff80 	bl	8000ee0 <SPI_RxByte>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d002      	beq.n	8000fec <SD_PowerOn+0x7c>
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f4      	bne.n	8000fd6 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8000fec:	f7ff ff52 	bl	8000e94 <DESELECT>
  SPI_TxByte(0XFF);
 8000ff0:	20ff      	movs	r0, #255	@ 0xff
 8000ff2:	f7ff ff5b 	bl	8000eac <SPI_TxByte>
  
  PowerFlag = 1;
 8000ff6:	4b03      	ldr	r3, [pc, #12]	@ (8001004 <SD_PowerOn+0x94>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200000b5 	.word	0x200000b5

08001008 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800100c:	4b03      	ldr	r3, [pc, #12]	@ (800101c <SD_PowerOff+0x14>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	200000b5 	.word	0x200000b5

08001020 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001024:	4b03      	ldr	r3, [pc, #12]	@ (8001034 <SD_CheckPower+0x14>)
 8001026:	781b      	ldrb	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	200000b5 	.word	0x200000b5

08001038 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8001042:	4b17      	ldr	r3, [pc, #92]	@ (80010a0 <SD_RxDataBlock+0x68>)
 8001044:	220a      	movs	r2, #10
 8001046:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8001048:	f7ff ff4a 	bl	8000ee0 <SPI_RxByte>
 800104c:	4603      	mov	r3, r0
 800104e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	2bff      	cmp	r3, #255	@ 0xff
 8001054:	d104      	bne.n	8001060 <SD_RxDataBlock+0x28>
 8001056:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <SD_RxDataBlock+0x68>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1f3      	bne.n	8001048 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	2bfe      	cmp	r3, #254	@ 0xfe
 8001064:	d001      	beq.n	800106a <SD_RxDataBlock+0x32>
    return FALSE;
 8001066:	2300      	movs	r3, #0
 8001068:	e016      	b.n	8001098 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	1c5a      	adds	r2, r3, #1
 800106e:	607a      	str	r2, [r7, #4]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff53 	bl	8000f1c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff4d 	bl	8000f1c <SPI_RxBytePtr>
  } while(btr -= 2);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	3b02      	subs	r3, #2
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1ed      	bne.n	800106a <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 800108e:	f7ff ff27 	bl	8000ee0 <SPI_RxByte>
  SPI_RxByte();
 8001092:	f7ff ff25 	bl	8000ee0 <SPI_RxByte>
  
  return TRUE;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2000056d 	.word	0x2000056d

080010a4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80010b4:	f7ff ff40 	bl	8000f38 <SD_ReadyWait>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2bff      	cmp	r3, #255	@ 0xff
 80010bc:	d001      	beq.n	80010c2 <SD_TxDataBlock+0x1e>
    return FALSE;
 80010be:	2300      	movs	r3, #0
 80010c0:	e040      	b.n	8001144 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80010c2:	78fb      	ldrb	r3, [r7, #3]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fef1 	bl	8000eac <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80010ca:	78fb      	ldrb	r3, [r7, #3]
 80010cc:	2bfd      	cmp	r3, #253	@ 0xfd
 80010ce:	d031      	beq.n	8001134 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fee5 	bl	8000eac <SPI_TxByte>
      SPI_TxByte(*buff++);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	607a      	str	r2, [r7, #4]
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fede 	bl	8000eac <SPI_TxByte>
    } while (--wc);
 80010f0:	7bbb      	ldrb	r3, [r7, #14]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	73bb      	strb	r3, [r7, #14]
 80010f6:	7bbb      	ldrb	r3, [r7, #14]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1eb      	bne.n	80010d4 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80010fc:	f7ff fef0 	bl	8000ee0 <SPI_RxByte>
    SPI_RxByte();
 8001100:	f7ff feee 	bl	8000ee0 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001104:	e00b      	b.n	800111e <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8001106:	f7ff feeb 	bl	8000ee0 <SPI_RxByte>
 800110a:	4603      	mov	r3, r0
 800110c:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	f003 031f 	and.w	r3, r3, #31
 8001114:	2b05      	cmp	r3, #5
 8001116:	d006      	beq.n	8001126 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8001118:	7b7b      	ldrb	r3, [r7, #13]
 800111a:	3301      	adds	r3, #1
 800111c:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 800111e:	7b7b      	ldrb	r3, [r7, #13]
 8001120:	2b40      	cmp	r3, #64	@ 0x40
 8001122:	d9f0      	bls.n	8001106 <SD_TxDataBlock+0x62>
 8001124:	e000      	b.n	8001128 <SD_TxDataBlock+0x84>
        break;
 8001126:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001128:	bf00      	nop
 800112a:	f7ff fed9 	bl	8000ee0 <SPI_RxByte>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0fa      	beq.n	800112a <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	f003 031f 	and.w	r3, r3, #31
 800113a:	2b05      	cmp	r3, #5
 800113c:	d101      	bne.n	8001142 <SD_TxDataBlock+0x9e>
    return TRUE;
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	6039      	str	r1, [r7, #0]
 8001156:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001158:	f7ff feee 	bl	8000f38 <SD_ReadyWait>
 800115c:	4603      	mov	r3, r0
 800115e:	2bff      	cmp	r3, #255	@ 0xff
 8001160:	d001      	beq.n	8001166 <SD_SendCmd+0x1a>
    return 0xFF;
 8001162:	23ff      	movs	r3, #255	@ 0xff
 8001164:	e040      	b.n	80011e8 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fe9f 	bl	8000eac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	0e1b      	lsrs	r3, r3, #24
 8001172:	b2db      	uxtb	r3, r3
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fe99 	bl	8000eac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	0c1b      	lsrs	r3, r3, #16
 800117e:	b2db      	uxtb	r3, r3
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fe93 	bl	8000eac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	b2db      	uxtb	r3, r3
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fe8d 	bl	8000eac <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fe88 	bl	8000eac <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 800119c:	2300      	movs	r3, #0
 800119e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b40      	cmp	r3, #64	@ 0x40
 80011a4:	d101      	bne.n	80011aa <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80011a6:	2395      	movs	r3, #149	@ 0x95
 80011a8:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b48      	cmp	r3, #72	@ 0x48
 80011ae:	d101      	bne.n	80011b4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80011b0:	2387      	movs	r3, #135	@ 0x87
 80011b2:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fe78 	bl	8000eac <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	2b4c      	cmp	r3, #76	@ 0x4c
 80011c0:	d101      	bne.n	80011c6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80011c2:	f7ff fe8d 	bl	8000ee0 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80011c6:	230a      	movs	r3, #10
 80011c8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80011ca:	f7ff fe89 	bl	8000ee0 <SPI_RxByte>
 80011ce:	4603      	mov	r3, r0
 80011d0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80011d2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	da05      	bge.n	80011e6 <SD_SendCmd+0x9a>
 80011da:	7bbb      	ldrb	r3, [r7, #14]
 80011dc:	3b01      	subs	r3, #1
 80011de:	73bb      	strb	r3, [r7, #14]
 80011e0:	7bbb      	ldrb	r3, [r7, #14]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f1      	bne.n	80011ca <SD_SendCmd+0x7e>
  
  return res;
 80011e6:	7b7b      	ldrb	r3, [r7, #13]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001200:	2301      	movs	r3, #1
 8001202:	e0d5      	b.n	80013b0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001204:	4b6c      	ldr	r3, [pc, #432]	@ (80013b8 <SD_disk_initialize+0x1c8>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <SD_disk_initialize+0x2a>
    return Stat;        
 8001212:	4b69      	ldr	r3, [pc, #420]	@ (80013b8 <SD_disk_initialize+0x1c8>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	e0ca      	b.n	80013b0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800121a:	f7ff fea9 	bl	8000f70 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 800121e:	f7ff fe2d 	bl	8000e7c <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001226:	2100      	movs	r1, #0
 8001228:	2040      	movs	r0, #64	@ 0x40
 800122a:	f7ff ff8f 	bl	800114c <SD_SendCmd>
 800122e:	4603      	mov	r3, r0
 8001230:	2b01      	cmp	r3, #1
 8001232:	f040 80a5 	bne.w	8001380 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001236:	4b61      	ldr	r3, [pc, #388]	@ (80013bc <SD_disk_initialize+0x1cc>)
 8001238:	2264      	movs	r2, #100	@ 0x64
 800123a:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 800123c:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001240:	2048      	movs	r0, #72	@ 0x48
 8001242:	f7ff ff83 	bl	800114c <SD_SendCmd>
 8001246:	4603      	mov	r3, r0
 8001248:	2b01      	cmp	r3, #1
 800124a:	d158      	bne.n	80012fe <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800124c:	2300      	movs	r3, #0
 800124e:	73fb      	strb	r3, [r7, #15]
 8001250:	e00c      	b.n	800126c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001252:	7bfc      	ldrb	r4, [r7, #15]
 8001254:	f7ff fe44 	bl	8000ee0 <SPI_RxByte>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	f104 0310 	add.w	r3, r4, #16
 8001260:	443b      	add	r3, r7
 8001262:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	3301      	adds	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	2b03      	cmp	r3, #3
 8001270:	d9ef      	bls.n	8001252 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001272:	7abb      	ldrb	r3, [r7, #10]
 8001274:	2b01      	cmp	r3, #1
 8001276:	f040 8083 	bne.w	8001380 <SD_disk_initialize+0x190>
 800127a:	7afb      	ldrb	r3, [r7, #11]
 800127c:	2baa      	cmp	r3, #170	@ 0xaa
 800127e:	d17f      	bne.n	8001380 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001280:	2100      	movs	r1, #0
 8001282:	2077      	movs	r0, #119	@ 0x77
 8001284:	f7ff ff62 	bl	800114c <SD_SendCmd>
 8001288:	4603      	mov	r3, r0
 800128a:	2b01      	cmp	r3, #1
 800128c:	d807      	bhi.n	800129e <SD_disk_initialize+0xae>
 800128e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001292:	2069      	movs	r0, #105	@ 0x69
 8001294:	f7ff ff5a 	bl	800114c <SD_SendCmd>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d005      	beq.n	80012aa <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800129e:	4b47      	ldr	r3, [pc, #284]	@ (80013bc <SD_disk_initialize+0x1cc>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1eb      	bne.n	8001280 <SD_disk_initialize+0x90>
 80012a8:	e000      	b.n	80012ac <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80012aa:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80012ac:	4b43      	ldr	r3, [pc, #268]	@ (80013bc <SD_disk_initialize+0x1cc>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d064      	beq.n	8001380 <SD_disk_initialize+0x190>
 80012b6:	2100      	movs	r1, #0
 80012b8:	207a      	movs	r0, #122	@ 0x7a
 80012ba:	f7ff ff47 	bl	800114c <SD_SendCmd>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d15d      	bne.n	8001380 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	e00c      	b.n	80012e4 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80012ca:	7bfc      	ldrb	r4, [r7, #15]
 80012cc:	f7ff fe08 	bl	8000ee0 <SPI_RxByte>
 80012d0:	4603      	mov	r3, r0
 80012d2:	461a      	mov	r2, r3
 80012d4:	f104 0310 	add.w	r3, r4, #16
 80012d8:	443b      	add	r3, r7
 80012da:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	3301      	adds	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d9ef      	bls.n	80012ca <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 80012ea:	7a3b      	ldrb	r3, [r7, #8]
 80012ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <SD_disk_initialize+0x108>
 80012f4:	2306      	movs	r3, #6
 80012f6:	e000      	b.n	80012fa <SD_disk_initialize+0x10a>
 80012f8:	2302      	movs	r3, #2
 80012fa:	73bb      	strb	r3, [r7, #14]
 80012fc:	e040      	b.n	8001380 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80012fe:	2100      	movs	r1, #0
 8001300:	2077      	movs	r0, #119	@ 0x77
 8001302:	f7ff ff23 	bl	800114c <SD_SendCmd>
 8001306:	4603      	mov	r3, r0
 8001308:	2b01      	cmp	r3, #1
 800130a:	d808      	bhi.n	800131e <SD_disk_initialize+0x12e>
 800130c:	2100      	movs	r1, #0
 800130e:	2069      	movs	r0, #105	@ 0x69
 8001310:	f7ff ff1c 	bl	800114c <SD_SendCmd>
 8001314:	4603      	mov	r3, r0
 8001316:	2b01      	cmp	r3, #1
 8001318:	d801      	bhi.n	800131e <SD_disk_initialize+0x12e>
 800131a:	2302      	movs	r3, #2
 800131c:	e000      	b.n	8001320 <SD_disk_initialize+0x130>
 800131e:	2301      	movs	r3, #1
 8001320:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001322:	7bbb      	ldrb	r3, [r7, #14]
 8001324:	2b02      	cmp	r3, #2
 8001326:	d10e      	bne.n	8001346 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001328:	2100      	movs	r1, #0
 800132a:	2077      	movs	r0, #119	@ 0x77
 800132c:	f7ff ff0e 	bl	800114c <SD_SendCmd>
 8001330:	4603      	mov	r3, r0
 8001332:	2b01      	cmp	r3, #1
 8001334:	d80e      	bhi.n	8001354 <SD_disk_initialize+0x164>
 8001336:	2100      	movs	r1, #0
 8001338:	2069      	movs	r0, #105	@ 0x69
 800133a:	f7ff ff07 	bl	800114c <SD_SendCmd>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d107      	bne.n	8001354 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001344:	e00d      	b.n	8001362 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001346:	2100      	movs	r1, #0
 8001348:	2041      	movs	r0, #65	@ 0x41
 800134a:	f7ff feff 	bl	800114c <SD_SendCmd>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d005      	beq.n	8001360 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001354:	4b19      	ldr	r3, [pc, #100]	@ (80013bc <SD_disk_initialize+0x1cc>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1e1      	bne.n	8001322 <SD_disk_initialize+0x132>
 800135e:	e000      	b.n	8001362 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001360:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001362:	4b16      	ldr	r3, [pc, #88]	@ (80013bc <SD_disk_initialize+0x1cc>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b00      	cmp	r3, #0
 800136a:	d007      	beq.n	800137c <SD_disk_initialize+0x18c>
 800136c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001370:	2050      	movs	r0, #80	@ 0x50
 8001372:	f7ff feeb 	bl	800114c <SD_SendCmd>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8001380:	4a0f      	ldr	r2, [pc, #60]	@ (80013c0 <SD_disk_initialize+0x1d0>)
 8001382:	7bbb      	ldrb	r3, [r7, #14]
 8001384:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8001386:	f7ff fd85 	bl	8000e94 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800138a:	f7ff fda9 	bl	8000ee0 <SPI_RxByte>
  
  if (type) 
 800138e:	7bbb      	ldrb	r3, [r7, #14]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d008      	beq.n	80013a6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8001394:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <SD_disk_initialize+0x1c8>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	f023 0301 	bic.w	r3, r3, #1
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <SD_disk_initialize+0x1c8>)
 80013a2:	701a      	strb	r2, [r3, #0]
 80013a4:	e001      	b.n	80013aa <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80013a6:	f7ff fe2f 	bl	8001008 <SD_PowerOff>
  }
  
  return Stat;
 80013aa:	4b03      	ldr	r3, [pc, #12]	@ (80013b8 <SD_disk_initialize+0x1c8>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b2db      	uxtb	r3, r3
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd90      	pop	{r4, r7, pc}
 80013b8:	20000000 	.word	0x20000000
 80013bc:	2000056d 	.word	0x2000056d
 80013c0:	200000b4 	.word	0x200000b4

080013c4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <SD_disk_status+0x14>
    return STA_NOINIT; 
 80013d4:	2301      	movs	r3, #1
 80013d6:	e002      	b.n	80013de <SD_disk_status+0x1a>
  
  return Stat;
 80013d8:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <SD_disk_status+0x28>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b2db      	uxtb	r3, r3
}
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000000 	.word	0x20000000

080013f0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	4603      	mov	r3, r0
 80013fe:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d102      	bne.n	800140c <SD_disk_read+0x1c>
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <SD_disk_read+0x20>
    return RES_PARERR;
 800140c:	2304      	movs	r3, #4
 800140e:	e051      	b.n	80014b4 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001410:	4b2a      	ldr	r3, [pc, #168]	@ (80014bc <SD_disk_read+0xcc>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800141e:	2303      	movs	r3, #3
 8001420:	e048      	b.n	80014b4 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001422:	4b27      	ldr	r3, [pc, #156]	@ (80014c0 <SD_disk_read+0xd0>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	2b00      	cmp	r3, #0
 800142c:	d102      	bne.n	8001434 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	025b      	lsls	r3, r3, #9
 8001432:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001434:	f7ff fd22 	bl	8000e7c <SELECT>
  
  if (count == 1) 
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d111      	bne.n	8001462 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	2051      	movs	r0, #81	@ 0x51
 8001442:	f7ff fe83 	bl	800114c <SD_SendCmd>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d129      	bne.n	80014a0 <SD_disk_read+0xb0>
 800144c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001450:	68b8      	ldr	r0, [r7, #8]
 8001452:	f7ff fdf1 	bl	8001038 <SD_RxDataBlock>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d021      	beq.n	80014a0 <SD_disk_read+0xb0>
      count = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	e01e      	b.n	80014a0 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	2052      	movs	r0, #82	@ 0x52
 8001466:	f7ff fe71 	bl	800114c <SD_SendCmd>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d117      	bne.n	80014a0 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001470:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001474:	68b8      	ldr	r0, [r7, #8]
 8001476:	f7ff fddf 	bl	8001038 <SD_RxDataBlock>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00a      	beq.n	8001496 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001486:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	3b01      	subs	r3, #1
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1ed      	bne.n	8001470 <SD_disk_read+0x80>
 8001494:	e000      	b.n	8001498 <SD_disk_read+0xa8>
          break;
 8001496:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8001498:	2100      	movs	r1, #0
 800149a:	204c      	movs	r0, #76	@ 0x4c
 800149c:	f7ff fe56 	bl	800114c <SD_SendCmd>
    }
  }
  
  DESELECT();
 80014a0:	f7ff fcf8 	bl	8000e94 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80014a4:	f7ff fd1c 	bl	8000ee0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	bf14      	ite	ne
 80014ae:	2301      	movne	r3, #1
 80014b0:	2300      	moveq	r3, #0
 80014b2:	b2db      	uxtb	r3, r3
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000000 	.word	0x20000000
 80014c0:	200000b4 	.word	0x200000b4

080014c4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	4603      	mov	r3, r0
 80014d2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d102      	bne.n	80014e0 <SD_disk_write+0x1c>
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <SD_disk_write+0x20>
    return RES_PARERR;
 80014e0:	2304      	movs	r3, #4
 80014e2:	e06b      	b.n	80015bc <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 80014e4:	4b37      	ldr	r3, [pc, #220]	@ (80015c4 <SD_disk_write+0x100>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e062      	b.n	80015bc <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 80014f6:	4b33      	ldr	r3, [pc, #204]	@ (80015c4 <SD_disk_write+0x100>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001504:	2302      	movs	r3, #2
 8001506:	e059      	b.n	80015bc <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001508:	4b2f      	ldr	r3, [pc, #188]	@ (80015c8 <SD_disk_write+0x104>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	025b      	lsls	r3, r3, #9
 8001518:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800151a:	f7ff fcaf 	bl	8000e7c <SELECT>
  
  if (count == 1) 
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d110      	bne.n	8001546 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	2058      	movs	r0, #88	@ 0x58
 8001528:	f7ff fe10 	bl	800114c <SD_SendCmd>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d13a      	bne.n	80015a8 <SD_disk_write+0xe4>
 8001532:	21fe      	movs	r1, #254	@ 0xfe
 8001534:	68b8      	ldr	r0, [r7, #8]
 8001536:	f7ff fdb5 	bl	80010a4 <SD_TxDataBlock>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d033      	beq.n	80015a8 <SD_disk_write+0xe4>
      count = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	e030      	b.n	80015a8 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001546:	4b20      	ldr	r3, [pc, #128]	@ (80015c8 <SD_disk_write+0x104>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d007      	beq.n	8001562 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001552:	2100      	movs	r1, #0
 8001554:	2077      	movs	r0, #119	@ 0x77
 8001556:	f7ff fdf9 	bl	800114c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800155a:	6839      	ldr	r1, [r7, #0]
 800155c:	2057      	movs	r0, #87	@ 0x57
 800155e:	f7ff fdf5 	bl	800114c <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	2059      	movs	r0, #89	@ 0x59
 8001566:	f7ff fdf1 	bl	800114c <SD_SendCmd>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d11b      	bne.n	80015a8 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001570:	21fc      	movs	r1, #252	@ 0xfc
 8001572:	68b8      	ldr	r0, [r7, #8]
 8001574:	f7ff fd96 	bl	80010a4 <SD_TxDataBlock>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00a      	beq.n	8001594 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001584:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	3b01      	subs	r3, #1
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1ee      	bne.n	8001570 <SD_disk_write+0xac>
 8001592:	e000      	b.n	8001596 <SD_disk_write+0xd2>
          break;
 8001594:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8001596:	21fd      	movs	r1, #253	@ 0xfd
 8001598:	2000      	movs	r0, #0
 800159a:	f7ff fd83 	bl	80010a4 <SD_TxDataBlock>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <SD_disk_write+0xe4>
      {        
        count = 1;
 80015a4:	2301      	movs	r3, #1
 80015a6:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 80015a8:	f7ff fc74 	bl	8000e94 <DESELECT>
  SPI_RxByte();
 80015ac:	f7ff fc98 	bl	8000ee0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	bf14      	ite	ne
 80015b6:	2301      	movne	r3, #1
 80015b8:	2300      	moveq	r3, #0
 80015ba:	b2db      	uxtb	r3, r3
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000000 	.word	0x20000000
 80015c8:	200000b4 	.word	0x200000b4

080015cc <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b08b      	sub	sp, #44	@ 0x2c
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	603a      	str	r2, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
 80015d8:	460b      	mov	r3, r1
 80015da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80015e6:	2304      	movs	r3, #4
 80015e8:	e119      	b.n	800181e <SD_disk_ioctl+0x252>
  
  res = RES_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  if (ctrl == CTRL_POWER) 
 80015f0:	79bb      	ldrb	r3, [r7, #6]
 80015f2:	2b05      	cmp	r3, #5
 80015f4:	d129      	bne.n	800164a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d017      	beq.n	800162e <SD_disk_ioctl+0x62>
 80015fe:	2b02      	cmp	r3, #2
 8001600:	dc1f      	bgt.n	8001642 <SD_disk_ioctl+0x76>
 8001602:	2b00      	cmp	r3, #0
 8001604:	d002      	beq.n	800160c <SD_disk_ioctl+0x40>
 8001606:	2b01      	cmp	r3, #1
 8001608:	d00b      	beq.n	8001622 <SD_disk_ioctl+0x56>
 800160a:	e01a      	b.n	8001642 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800160c:	f7ff fd08 	bl	8001020 <SD_CheckPower>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001616:	f7ff fcf7 	bl	8001008 <SD_PowerOff>
      res = RES_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001620:	e0fb      	b.n	800181a <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8001622:	f7ff fca5 	bl	8000f70 <SD_PowerOn>
      res = RES_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800162c:	e0f5      	b.n	800181a <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	1c5c      	adds	r4, r3, #1
 8001632:	f7ff fcf5 	bl	8001020 <SD_CheckPower>
 8001636:	4603      	mov	r3, r0
 8001638:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800163a:	2300      	movs	r3, #0
 800163c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001640:	e0eb      	b.n	800181a <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8001642:	2304      	movs	r3, #4
 8001644:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001648:	e0e7      	b.n	800181a <SD_disk_ioctl+0x24e>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 800164a:	4b77      	ldr	r3, [pc, #476]	@ (8001828 <SD_disk_ioctl+0x25c>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001658:	2303      	movs	r3, #3
 800165a:	e0e0      	b.n	800181e <SD_disk_ioctl+0x252>
    
    SELECT();
 800165c:	f7ff fc0e 	bl	8000e7c <SELECT>
    
    switch (ctrl) 
 8001660:	79bb      	ldrb	r3, [r7, #6]
 8001662:	2b0d      	cmp	r3, #13
 8001664:	f200 80ca 	bhi.w	80017fc <SD_disk_ioctl+0x230>
 8001668:	a201      	add	r2, pc, #4	@ (adr r2, 8001670 <SD_disk_ioctl+0xa4>)
 800166a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166e:	bf00      	nop
 8001670:	08001767 	.word	0x08001767
 8001674:	080016a9 	.word	0x080016a9
 8001678:	08001757 	.word	0x08001757
 800167c:	080017fd 	.word	0x080017fd
 8001680:	080017fd 	.word	0x080017fd
 8001684:	080017fd 	.word	0x080017fd
 8001688:	080017fd 	.word	0x080017fd
 800168c:	080017fd 	.word	0x080017fd
 8001690:	080017fd 	.word	0x080017fd
 8001694:	080017fd 	.word	0x080017fd
 8001698:	080017fd 	.word	0x080017fd
 800169c:	08001779 	.word	0x08001779
 80016a0:	0800179d 	.word	0x0800179d
 80016a4:	080017c1 	.word	0x080017c1
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80016a8:	2100      	movs	r1, #0
 80016aa:	2049      	movs	r0, #73	@ 0x49
 80016ac:	f7ff fd4e 	bl	800114c <SD_SendCmd>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f040 80a6 	bne.w	8001804 <SD_disk_ioctl+0x238>
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	2110      	movs	r1, #16
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fcba 	bl	8001038 <SD_RxDataBlock>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 809c 	beq.w	8001804 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1) 
 80016cc:	7b3b      	ldrb	r3, [r7, #12]
 80016ce:	099b      	lsrs	r3, r3, #6
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d10d      	bne.n	80016f2 <SD_disk_ioctl+0x126>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80016d6:	7d7b      	ldrb	r3, [r7, #21]
 80016d8:	461a      	mov	r2, r3
 80016da:	7d3b      	ldrb	r3, [r7, #20]
 80016dc:	021b      	lsls	r3, r3, #8
 80016de:	b29b      	uxth	r3, r3
 80016e0:	4413      	add	r3, r2
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	3301      	adds	r3, #1
 80016e6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80016e8:	8bfb      	ldrh	r3, [r7, #30]
 80016ea:	029a      	lsls	r2, r3, #10
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	e02d      	b.n	800174e <SD_disk_ioctl+0x182>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80016f2:	7c7b      	ldrb	r3, [r7, #17]
 80016f4:	f003 030f 	and.w	r3, r3, #15
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	7dbb      	ldrb	r3, [r7, #22]
 80016fc:	09db      	lsrs	r3, r3, #7
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	4413      	add	r3, r2
 8001702:	b2da      	uxtb	r2, r3
 8001704:	7d7b      	ldrb	r3, [r7, #21]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	b2db      	uxtb	r3, r3
 800170a:	f003 0306 	and.w	r3, r3, #6
 800170e:	b2db      	uxtb	r3, r3
 8001710:	4413      	add	r3, r2
 8001712:	b2db      	uxtb	r3, r3
 8001714:	3302      	adds	r3, #2
 8001716:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800171a:	7d3b      	ldrb	r3, [r7, #20]
 800171c:	099b      	lsrs	r3, r3, #6
 800171e:	b2db      	uxtb	r3, r3
 8001720:	461a      	mov	r2, r3
 8001722:	7cfb      	ldrb	r3, [r7, #19]
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	b29b      	uxth	r3, r3
 8001728:	4413      	add	r3, r2
 800172a:	b29a      	uxth	r2, r3
 800172c:	7cbb      	ldrb	r3, [r7, #18]
 800172e:	029b      	lsls	r3, r3, #10
 8001730:	b29b      	uxth	r3, r3
 8001732:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001736:	b29b      	uxth	r3, r3
 8001738:	4413      	add	r3, r2
 800173a:	b29b      	uxth	r3, r3
 800173c:	3301      	adds	r3, #1
 800173e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001740:	8bfa      	ldrh	r2, [r7, #30]
 8001742:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001746:	3b09      	subs	r3, #9
 8001748:	409a      	lsls	r2, r3
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8001754:	e056      	b.n	8001804 <SD_disk_ioctl+0x238>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800175c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001764:	e055      	b.n	8001812 <SD_disk_ioctl+0x246>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001766:	f7ff fbe7 	bl	8000f38 <SD_ReadyWait>
 800176a:	4603      	mov	r3, r0
 800176c:	2bff      	cmp	r3, #255	@ 0xff
 800176e:	d14b      	bne.n	8001808 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001776:	e047      	b.n	8001808 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001778:	2100      	movs	r1, #0
 800177a:	2049      	movs	r0, #73	@ 0x49
 800177c:	f7ff fce6 	bl	800114c <SD_SendCmd>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d142      	bne.n	800180c <SD_disk_ioctl+0x240>
 8001786:	2110      	movs	r1, #16
 8001788:	6a38      	ldr	r0, [r7, #32]
 800178a:	f7ff fc55 	bl	8001038 <SD_RxDataBlock>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d03b      	beq.n	800180c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800179a:	e037      	b.n	800180c <SD_disk_ioctl+0x240>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800179c:	2100      	movs	r1, #0
 800179e:	204a      	movs	r0, #74	@ 0x4a
 80017a0:	f7ff fcd4 	bl	800114c <SD_SendCmd>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d132      	bne.n	8001810 <SD_disk_ioctl+0x244>
 80017aa:	2110      	movs	r1, #16
 80017ac:	6a38      	ldr	r0, [r7, #32]
 80017ae:	f7ff fc43 	bl	8001038 <SD_RxDataBlock>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d02b      	beq.n	8001810 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80017be:	e027      	b.n	8001810 <SD_disk_ioctl+0x244>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 80017c0:	2100      	movs	r1, #0
 80017c2:	207a      	movs	r0, #122	@ 0x7a
 80017c4:	f7ff fcc2 	bl	800114c <SD_SendCmd>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d116      	bne.n	80017fc <SD_disk_ioctl+0x230>
      {         
        for (n = 0; n < 4; n++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80017d4:	e00b      	b.n	80017ee <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 80017d6:	6a3c      	ldr	r4, [r7, #32]
 80017d8:	1c63      	adds	r3, r4, #1
 80017da:	623b      	str	r3, [r7, #32]
 80017dc:	f7ff fb80 	bl	8000ee0 <SPI_RxByte>
 80017e0:	4603      	mov	r3, r0
 80017e2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80017e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80017e8:	3301      	adds	r3, #1
 80017ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80017ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d9ef      	bls.n	80017d6 <SD_disk_ioctl+0x20a>
        }
        
        res = RES_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }     
      
    default:
      res = RES_PARERR;
 80017fc:	2304      	movs	r3, #4
 80017fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001802:	e006      	b.n	8001812 <SD_disk_ioctl+0x246>
      break;
 8001804:	bf00      	nop
 8001806:	e004      	b.n	8001812 <SD_disk_ioctl+0x246>
      break;
 8001808:	bf00      	nop
 800180a:	e002      	b.n	8001812 <SD_disk_ioctl+0x246>
      break;
 800180c:	bf00      	nop
 800180e:	e000      	b.n	8001812 <SD_disk_ioctl+0x246>
      break;
 8001810:	bf00      	nop
    }
    
    DESELECT();
 8001812:	f7ff fb3f 	bl	8000e94 <DESELECT>
    SPI_RxByte();
 8001816:	f7ff fb63 	bl	8000ee0 <SPI_RxByte>
  }
  
  return res;
 800181a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800181e:	4618      	mov	r0, r3
 8001820:	372c      	adds	r7, #44	@ 0x2c
 8001822:	46bd      	mov	sp, r7
 8001824:	bd90      	pop	{r4, r7, pc}
 8001826:	bf00      	nop
 8001828:	20000000 	.word	0x20000000

0800182c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4a07      	ldr	r2, [pc, #28]	@ (8001858 <vApplicationGetIdleTaskMemory+0x2c>)
 800183c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	4a06      	ldr	r2, [pc, #24]	@ (800185c <vApplicationGetIdleTaskMemory+0x30>)
 8001842:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2280      	movs	r2, #128	@ 0x80
 8001848:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	200000b8 	.word	0x200000b8
 800185c:	2000010c 	.word	0x2000010c

08001860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001866:	f002 f9b7 	bl	8003bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800186a:	f000 f877 	bl	800195c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800186e:	f000 fa89 	bl	8001d84 <MX_GPIO_Init>
  MX_DMA_Init();
 8001872:	f000 fa67 	bl	8001d44 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001876:	f000 fa3b 	bl	8001cf0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800187a:	f000 f92d 	bl	8001ad8 <MX_I2C1_Init>
  MX_SPI3_Init();
 800187e:	f000 f9b3 	bl	8001be8 <MX_SPI3_Init>
  MX_RTC_Init();
 8001882:	f000 f957 	bl	8001b34 <MX_RTC_Init>
  MX_ADC1_Init();
 8001886:	f000 f8d5 	bl	8001a34 <MX_ADC1_Init>
  MX_TIM3_Init();
 800188a:	f000 f9e3 	bl	8001c54 <MX_TIM3_Init>
  MX_FATFS_Init();
 800188e:	f006 ff3f 	bl	8008710 <MX_FATFS_Init>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  keypad_sd_sync = xSemaphoreCreateBinary();
 8001892:	2203      	movs	r2, #3
 8001894:	2100      	movs	r1, #0
 8001896:	2001      	movs	r0, #1
 8001898:	f00c fdfb 	bl	800e492 <xQueueGenericCreate>
 800189c:	4603      	mov	r3, r0
 800189e:	4a23      	ldr	r2, [pc, #140]	@ (800192c <main+0xcc>)
 80018a0:	6013      	str	r3, [r2, #0]
  sd_display_sync = xSemaphoreCreateBinary();
 80018a2:	2203      	movs	r2, #3
 80018a4:	2100      	movs	r1, #0
 80018a6:	2001      	movs	r0, #1
 80018a8:	f00c fdf3 	bl	800e492 <xQueueGenericCreate>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4a20      	ldr	r2, [pc, #128]	@ (8001930 <main+0xd0>)
 80018b0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  display_queue = xQueueCreate(1, sizeof(uint8_t));
 80018b2:	2200      	movs	r2, #0
 80018b4:	2101      	movs	r1, #1
 80018b6:	2001      	movs	r0, #1
 80018b8:	f00c fdeb 	bl	800e492 <xQueueGenericCreate>
 80018bc:	4603      	mov	r3, r0
 80018be:	4a1d      	ldr	r2, [pc, #116]	@ (8001934 <main+0xd4>)
 80018c0:	6013      	str	r3, [r2, #0]
  sequence_queue = xQueueCreate(1, sizeof(char));
 80018c2:	2200      	movs	r2, #0
 80018c4:	2101      	movs	r1, #1
 80018c6:	2001      	movs	r0, #1
 80018c8:	f00c fde3 	bl	800e492 <xQueueGenericCreate>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4a1a      	ldr	r2, [pc, #104]	@ (8001938 <main+0xd8>)
 80018d0:	6013      	str	r3, [r2, #0]
  /* Create the thread(s) */
  /* definition and creation of defaultTask */


  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(display_task, "Tarea display", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 4, NULL);
 80018d2:	2300      	movs	r3, #0
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	2304      	movs	r3, #4
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2300      	movs	r3, #0
 80018dc:	2280      	movs	r2, #128	@ 0x80
 80018de:	4917      	ldr	r1, [pc, #92]	@ (800193c <main+0xdc>)
 80018e0:	4817      	ldr	r0, [pc, #92]	@ (8001940 <main+0xe0>)
 80018e2:	f00d fc0d 	bl	800f100 <xTaskCreate>
  //xTaskCreate(LockControl, "Tarea 04", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL);
  //xTaskCreate(VoiceProcessing, "Tarea 03", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
  xTaskCreate(sd_task, "Tarea SD", 10 * configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
 80018e6:	2300      	movs	r3, #0
 80018e8:	9301      	str	r3, [sp, #4]
 80018ea:	2302      	movs	r3, #2
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2300      	movs	r3, #0
 80018f0:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80018f4:	4913      	ldr	r1, [pc, #76]	@ (8001944 <main+0xe4>)
 80018f6:	4814      	ldr	r0, [pc, #80]	@ (8001948 <main+0xe8>)
 80018f8:	f00d fc02 	bl	800f100 <xTaskCreate>
  xTaskCreate(keypad_task, "Tarea keypad", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 80018fc:	2300      	movs	r3, #0
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	2301      	movs	r3, #1
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	2300      	movs	r3, #0
 8001906:	2280      	movs	r2, #128	@ 0x80
 8001908:	4910      	ldr	r1, [pc, #64]	@ (800194c <main+0xec>)
 800190a:	4811      	ldr	r0, [pc, #68]	@ (8001950 <main+0xf0>)
 800190c:	f00d fbf8 	bl	800f100 <xTaskCreate>
  xTaskCreate(idle_task, "Tarea Idle", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 8001910:	2300      	movs	r3, #0
 8001912:	9301      	str	r3, [sp, #4]
 8001914:	2300      	movs	r3, #0
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	2300      	movs	r3, #0
 800191a:	2280      	movs	r2, #128	@ 0x80
 800191c:	490d      	ldr	r1, [pc, #52]	@ (8001954 <main+0xf4>)
 800191e:	480e      	ldr	r0, [pc, #56]	@ (8001958 <main+0xf8>)
 8001920:	f00d fbee 	bl	800f100 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 8001924:	f00d fd5a 	bl	800f3dc <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <main+0xc8>
 800192c:	20000518 	.word	0x20000518
 8001930:	2000051c 	.word	0x2000051c
 8001934:	20000514 	.word	0x20000514
 8001938:	20000510 	.word	0x20000510
 800193c:	08012c54 	.word	0x08012c54
 8001940:	080038b9 	.word	0x080038b9
 8001944:	08012c64 	.word	0x08012c64
 8001948:	08003b11 	.word	0x08003b11
 800194c:	08012c70 	.word	0x08012c70
 8001950:	08003a75 	.word	0x08003a75
 8001954:	08012c80 	.word	0x08012c80
 8001958:	08001ed1 	.word	0x08001ed1

0800195c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b094      	sub	sp, #80	@ 0x50
 8001960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001962:	f107 0320 	add.w	r3, r7, #32
 8001966:	2230      	movs	r2, #48	@ 0x30
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f010 fcde 	bl	801232c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001980:	2300      	movs	r3, #0
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	4b29      	ldr	r3, [pc, #164]	@ (8001a2c <SystemClock_Config+0xd0>)
 8001986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001988:	4a28      	ldr	r2, [pc, #160]	@ (8001a2c <SystemClock_Config+0xd0>)
 800198a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800198e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001990:	4b26      	ldr	r3, [pc, #152]	@ (8001a2c <SystemClock_Config+0xd0>)
 8001992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800199c:	2300      	movs	r3, #0
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	4b23      	ldr	r3, [pc, #140]	@ (8001a30 <SystemClock_Config+0xd4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80019a8:	4a21      	ldr	r2, [pc, #132]	@ (8001a30 <SystemClock_Config+0xd4>)
 80019aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a30 <SystemClock_Config+0xd4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019bc:	2309      	movs	r3, #9
 80019be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019c0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80019c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019c6:	2301      	movs	r3, #1
 80019c8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ca:	2302      	movs	r3, #2
 80019cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019d4:	2304      	movs	r3, #4
 80019d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80019d8:	2340      	movs	r3, #64	@ 0x40
 80019da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019dc:	2302      	movs	r3, #2
 80019de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80019e0:	2307      	movs	r3, #7
 80019e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e4:	f107 0320 	add.w	r3, r7, #32
 80019e8:	4618      	mov	r0, r3
 80019ea:	f004 f9c3 	bl	8005d74 <HAL_RCC_OscConfig>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80019f4:	f000 fa99 	bl	8001f2a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f8:	230f      	movs	r3, #15
 80019fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019fc:	2302      	movs	r3, #2
 80019fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	2102      	movs	r1, #2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f004 fc25 	bl	8006264 <HAL_RCC_ClockConfig>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001a20:	f000 fa83 	bl	8001f2a <Error_Handler>
  }
}
 8001a24:	bf00      	nop
 8001a26:	3750      	adds	r7, #80	@ 0x50
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40007000 	.word	0x40007000

08001a34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a46:	4b22      	ldr	r3, [pc, #136]	@ (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a48:	4a22      	ldr	r2, [pc, #136]	@ (8001ad4 <MX_ADC1_Init+0xa0>)
 8001a4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a4c:	4b20      	ldr	r3, [pc, #128]	@ (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a52:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a58:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001a6c:	4b18      	ldr	r3, [pc, #96]	@ (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001a74:	4b16      	ldr	r3, [pc, #88]	@ (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a76:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a82:	4b13      	ldr	r3, [pc, #76]	@ (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a88:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a90:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a96:	480e      	ldr	r0, [pc, #56]	@ (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a98:	f002 f8e0 	bl	8003c5c <HAL_ADC_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001aa2:	f000 fa42 	bl	8001f2a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4806      	ldr	r0, [pc, #24]	@ (8001ad0 <MX_ADC1_Init+0x9c>)
 8001ab8:	f002 fb8c 	bl	80041d4 <HAL_ADC_ConfigChannel>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001ac2:	f000 fa32 	bl	8001f2a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2000030c 	.word	0x2000030c
 8001ad4:	40012000 	.word	0x40012000

08001ad8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001adc:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <MX_I2C1_Init+0x50>)
 8001ade:	4a13      	ldr	r2, [pc, #76]	@ (8001b2c <MX_I2C1_Init+0x54>)
 8001ae0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001ae2:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <MX_I2C1_Init+0x50>)
 8001ae4:	4a12      	ldr	r2, [pc, #72]	@ (8001b30 <MX_I2C1_Init+0x58>)
 8001ae6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <MX_I2C1_Init+0x50>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001aee:	4b0e      	ldr	r3, [pc, #56]	@ (8001b28 <MX_I2C1_Init+0x50>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001af4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <MX_I2C1_Init+0x50>)
 8001af6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001afa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001afc:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <MX_I2C1_Init+0x50>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b02:	4b09      	ldr	r3, [pc, #36]	@ (8001b28 <MX_I2C1_Init+0x50>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b08:	4b07      	ldr	r3, [pc, #28]	@ (8001b28 <MX_I2C1_Init+0x50>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b0e:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <MX_I2C1_Init+0x50>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b14:	4804      	ldr	r0, [pc, #16]	@ (8001b28 <MX_I2C1_Init+0x50>)
 8001b16:	f003 fc7f 	bl	8005418 <HAL_I2C_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b20:	f000 fa03 	bl	8001f2a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	200003b4 	.word	0x200003b4
 8001b2c:	40005400 	.word	0x40005400
 8001b30:	00061a80 	.word	0x00061a80

08001b34 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001b48:	2300      	movs	r3, #0
 8001b4a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b4c:	4b24      	ldr	r3, [pc, #144]	@ (8001be0 <MX_RTC_Init+0xac>)
 8001b4e:	4a25      	ldr	r2, [pc, #148]	@ (8001be4 <MX_RTC_Init+0xb0>)
 8001b50:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b52:	4b23      	ldr	r3, [pc, #140]	@ (8001be0 <MX_RTC_Init+0xac>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b58:	4b21      	ldr	r3, [pc, #132]	@ (8001be0 <MX_RTC_Init+0xac>)
 8001b5a:	227f      	movs	r2, #127	@ 0x7f
 8001b5c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b5e:	4b20      	ldr	r3, [pc, #128]	@ (8001be0 <MX_RTC_Init+0xac>)
 8001b60:	22ff      	movs	r2, #255	@ 0xff
 8001b62:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b64:	4b1e      	ldr	r3, [pc, #120]	@ (8001be0 <MX_RTC_Init+0xac>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001be0 <MX_RTC_Init+0xac>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b70:	4b1b      	ldr	r3, [pc, #108]	@ (8001be0 <MX_RTC_Init+0xac>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b76:	481a      	ldr	r0, [pc, #104]	@ (8001be0 <MX_RTC_Init+0xac>)
 8001b78:	f004 feb4 	bl	80068e4 <HAL_RTC_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001b82:	f000 f9d2 	bl	8001f2a <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 15;
 8001b86:	230f      	movs	r3, #15
 8001b88:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	480f      	ldr	r0, [pc, #60]	@ (8001be0 <MX_RTC_Init+0xac>)
 8001ba2:	f004 ff22 	bl	80069ea <HAL_RTC_SetTime>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001bac:	f000 f9bd 	bl	8001f2a <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8001bb0:	2306      	movs	r3, #6
 8001bb2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8001bb4:	2307      	movs	r3, #7
 8001bb6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 6;
 8001bb8:	2306      	movs	r3, #6
 8001bba:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 8001bbc:	2318      	movs	r3, #24
 8001bbe:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001bc0:	463b      	mov	r3, r7
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4806      	ldr	r0, [pc, #24]	@ (8001be0 <MX_RTC_Init+0xac>)
 8001bc8:	f004 ffa9 	bl	8006b1e <HAL_RTC_SetDate>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001bd2:	f000 f9aa 	bl	8001f2a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001bd6:	bf00      	nop
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000408 	.word	0x20000408
 8001be4:	40002800 	.word	0x40002800

08001be8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001bec:	4b17      	ldr	r3, [pc, #92]	@ (8001c4c <MX_SPI3_Init+0x64>)
 8001bee:	4a18      	ldr	r2, [pc, #96]	@ (8001c50 <MX_SPI3_Init+0x68>)
 8001bf0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001bf2:	4b16      	ldr	r3, [pc, #88]	@ (8001c4c <MX_SPI3_Init+0x64>)
 8001bf4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bf8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001bfa:	4b14      	ldr	r3, [pc, #80]	@ (8001c4c <MX_SPI3_Init+0x64>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c00:	4b12      	ldr	r3, [pc, #72]	@ (8001c4c <MX_SPI3_Init+0x64>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c06:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <MX_SPI3_Init+0x64>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c4c <MX_SPI3_Init+0x64>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001c12:	4b0e      	ldr	r3, [pc, #56]	@ (8001c4c <MX_SPI3_Init+0x64>)
 8001c14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c18:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c4c <MX_SPI3_Init+0x64>)
 8001c1c:	2210      	movs	r2, #16
 8001c1e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c20:	4b0a      	ldr	r3, [pc, #40]	@ (8001c4c <MX_SPI3_Init+0x64>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c26:	4b09      	ldr	r3, [pc, #36]	@ (8001c4c <MX_SPI3_Init+0x64>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c2c:	4b07      	ldr	r3, [pc, #28]	@ (8001c4c <MX_SPI3_Init+0x64>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001c32:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <MX_SPI3_Init+0x64>)
 8001c34:	220a      	movs	r2, #10
 8001c36:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001c38:	4804      	ldr	r0, [pc, #16]	@ (8001c4c <MX_SPI3_Init+0x64>)
 8001c3a:	f005 f895 	bl	8006d68 <HAL_SPI_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001c44:	f000 f971 	bl	8001f2a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000428 	.word	0x20000428
 8001c50:	40003c00 	.word	0x40003c00

08001c54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c5a:	f107 0308 	add.w	r3, r7, #8
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c68:	463b      	mov	r3, r7
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c70:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce8 <MX_TIM3_Init+0x94>)
 8001c72:	4a1e      	ldr	r2, [pc, #120]	@ (8001cec <MX_TIM3_Init+0x98>)
 8001c74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c76:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce8 <MX_TIM3_Init+0x94>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <MX_TIM3_Init+0x94>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5334 - 1;
 8001c82:	4b19      	ldr	r3, [pc, #100]	@ (8001ce8 <MX_TIM3_Init+0x94>)
 8001c84:	f241 42d5 	movw	r2, #5333	@ 0x14d5
 8001c88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ce8 <MX_TIM3_Init+0x94>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c90:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <MX_TIM3_Init+0x94>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c96:	4814      	ldr	r0, [pc, #80]	@ (8001ce8 <MX_TIM3_Init+0x94>)
 8001c98:	f005 fcc6 	bl	8007628 <HAL_TIM_Base_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001ca2:	f000 f942 	bl	8001f2a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ca6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001caa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cac:	f107 0308 	add.w	r3, r7, #8
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	480d      	ldr	r0, [pc, #52]	@ (8001ce8 <MX_TIM3_Init+0x94>)
 8001cb4:	f005 fe89 	bl	80079ca <HAL_TIM_ConfigClockSource>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001cbe:	f000 f934 	bl	8001f2a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001cc2:	2320      	movs	r3, #32
 8001cc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cca:	463b      	mov	r3, r7
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4806      	ldr	r0, [pc, #24]	@ (8001ce8 <MX_TIM3_Init+0x94>)
 8001cd0:	f006 f890 	bl	8007df4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001cda:	f000 f926 	bl	8001f2a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000480 	.word	0x20000480
 8001cec:	40000400 	.word	0x40000400

08001cf0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	@ (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001cf6:	4a12      	ldr	r2, [pc, #72]	@ (8001d40 <MX_USART2_UART_Init+0x50>)
 8001cf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cfa:	4b10      	ldr	r3, [pc, #64]	@ (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001cfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	@ (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d08:	4b0c      	ldr	r3, [pc, #48]	@ (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d14:	4b09      	ldr	r3, [pc, #36]	@ (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d16:	220c      	movs	r2, #12
 8001d18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1a:	4b08      	ldr	r3, [pc, #32]	@ (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d20:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d26:	4805      	ldr	r0, [pc, #20]	@ (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d28:	f006 f8e6 	bl	8007ef8 <HAL_UART_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d32:	f000 f8fa 	bl	8001f2a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200004c8 	.word	0x200004c8
 8001d40:	40004400 	.word	0x40004400

08001d44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d80 <MX_DMA_Init+0x3c>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	4a0b      	ldr	r2, [pc, #44]	@ (8001d80 <MX_DMA_Init+0x3c>)
 8001d54:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5a:	4b09      	ldr	r3, [pc, #36]	@ (8001d80 <MX_DMA_Init+0x3c>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2105      	movs	r1, #5
 8001d6a:	2038      	movs	r0, #56	@ 0x38
 8001d6c:	f002 fd94 	bl	8004898 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d70:	2038      	movs	r0, #56	@ 0x38
 8001d72:	f002 fdad 	bl	80048d0 <HAL_NVIC_EnableIRQ>

}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800

08001d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	@ 0x28
 8001d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
 8001d98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	4b48      	ldr	r3, [pc, #288]	@ (8001ec0 <MX_GPIO_Init+0x13c>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	4a47      	ldr	r2, [pc, #284]	@ (8001ec0 <MX_GPIO_Init+0x13c>)
 8001da4:	f043 0304 	orr.w	r3, r3, #4
 8001da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001daa:	4b45      	ldr	r3, [pc, #276]	@ (8001ec0 <MX_GPIO_Init+0x13c>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	4b41      	ldr	r3, [pc, #260]	@ (8001ec0 <MX_GPIO_Init+0x13c>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	4a40      	ldr	r2, [pc, #256]	@ (8001ec0 <MX_GPIO_Init+0x13c>)
 8001dc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ec0 <MX_GPIO_Init+0x13c>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ec0 <MX_GPIO_Init+0x13c>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	4a39      	ldr	r2, [pc, #228]	@ (8001ec0 <MX_GPIO_Init+0x13c>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de2:	4b37      	ldr	r3, [pc, #220]	@ (8001ec0 <MX_GPIO_Init+0x13c>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	4b33      	ldr	r3, [pc, #204]	@ (8001ec0 <MX_GPIO_Init+0x13c>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	4a32      	ldr	r2, [pc, #200]	@ (8001ec0 <MX_GPIO_Init+0x13c>)
 8001df8:	f043 0302 	orr.w	r3, r3, #2
 8001dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfe:	4b30      	ldr	r3, [pc, #192]	@ (8001ec0 <MX_GPIO_Init+0x13c>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|CS_SD_Pin, GPIO_PIN_RESET);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f248 0120 	movw	r1, #32800	@ 0x8020
 8001e10:	482c      	ldr	r0, [pc, #176]	@ (8001ec4 <MX_GPIO_Init+0x140>)
 8001e12:	f003 fae7 	bl	80053e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001e16:	2200      	movs	r2, #0
 8001e18:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 8001e1c:	482a      	ldr	r0, [pc, #168]	@ (8001ec8 <MX_GPIO_Init+0x144>)
 8001e1e:	f003 fae1 	bl	80053e4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SDB4_GPIO_Port, CS_SDB4_Pin, GPIO_PIN_RESET);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2110      	movs	r1, #16
 8001e26:	4829      	ldr	r0, [pc, #164]	@ (8001ecc <MX_GPIO_Init+0x148>)
 8001e28:	f003 fadc 	bl	80053e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e32:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	4619      	mov	r1, r3
 8001e42:	4821      	ldr	r0, [pc, #132]	@ (8001ec8 <MX_GPIO_Init+0x144>)
 8001e44:	f003 f932 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001e48:	230f      	movs	r3, #15
 8001e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e50:	2302      	movs	r3, #2
 8001e52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4619      	mov	r1, r3
 8001e5a:	481b      	ldr	r0, [pc, #108]	@ (8001ec8 <MX_GPIO_Init+0x144>)
 8001e5c:	f003 f926 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin CS_SD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|CS_SD_Pin;
 8001e60:	f248 0320 	movw	r3, #32800	@ 0x8020
 8001e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e66:	2301      	movs	r3, #1
 8001e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	4812      	ldr	r0, [pc, #72]	@ (8001ec4 <MX_GPIO_Init+0x140>)
 8001e7a:	f003 f917 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pins : Lock_Pin PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001e7e:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8001e82:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e84:	2301      	movs	r3, #1
 8001e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4619      	mov	r1, r3
 8001e96:	480c      	ldr	r0, [pc, #48]	@ (8001ec8 <MX_GPIO_Init+0x144>)
 8001e98:	f003 f908 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SDB4_Pin */
  GPIO_InitStruct.Pin = CS_SDB4_Pin;
 8001e9c:	2310      	movs	r3, #16
 8001e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_SDB4_GPIO_Port, &GPIO_InitStruct);
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4806      	ldr	r0, [pc, #24]	@ (8001ecc <MX_GPIO_Init+0x148>)
 8001eb4:	f003 f8fa 	bl	80050ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eb8:	bf00      	nop
 8001eba:	3728      	adds	r7, #40	@ 0x28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020000 	.word	0x40020000
 8001ec8:	40020800 	.word	0x40020800
 8001ecc:	40020400 	.word	0x40020400

08001ed0 <idle_task>:

/* USER CODE BEGIN 4 */
void idle_task(void *pvParameters){
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	while(1);
 8001ed8:	bf00      	nop
 8001eda:	e7fd      	b.n	8001ed8 <idle_task+0x8>

08001edc <HAL_ADC_ConvCpltCallback>:
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim3);
 8001ee4:	4806      	ldr	r0, [pc, #24]	@ (8001f00 <HAL_ADC_ConvCpltCallback+0x24>)
 8001ee6:	f005 fc51 	bl	800778c <HAL_TIM_Base_Stop_IT>
	HAL_ADC_Stop_DMA(&hadc1);
 8001eea:	4806      	ldr	r0, [pc, #24]	@ (8001f04 <HAL_ADC_ConvCpltCallback+0x28>)
 8001eec:	f002 f8fa 	bl	80040e4 <HAL_ADC_Stop_DMA>
	conv_cplt_flag = true;
 8001ef0:	4b05      	ldr	r3, [pc, #20]	@ (8001f08 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000480 	.word	0x20000480
 8001f04:	2000030c 	.word	0x2000030c
 8001f08:	20000520 	.word	0x20000520

08001f0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f1c:	d101      	bne.n	8001f22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f1e:	f001 fe7d 	bl	8003c1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f2e:	b672      	cpsid	i
}
 8001f30:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f32:	bf00      	nop
 8001f34:	e7fd      	b.n	8001f32 <Error_Handler+0x8>
	...

08001f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	4b12      	ldr	r3, [pc, #72]	@ (8001f8c <HAL_MspInit+0x54>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f46:	4a11      	ldr	r2, [pc, #68]	@ (8001f8c <HAL_MspInit+0x54>)
 8001f48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f8c <HAL_MspInit+0x54>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f8c <HAL_MspInit+0x54>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	4a0a      	ldr	r2, [pc, #40]	@ (8001f8c <HAL_MspInit+0x54>)
 8001f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f6a:	4b08      	ldr	r3, [pc, #32]	@ (8001f8c <HAL_MspInit+0x54>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	210f      	movs	r1, #15
 8001f7a:	f06f 0001 	mvn.w	r0, #1
 8001f7e:	f002 fc8b 	bl	8004898 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800

08001f90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08a      	sub	sp, #40	@ 0x28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a32      	ldr	r2, [pc, #200]	@ (8002078 <HAL_ADC_MspInit+0xe8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d15e      	bne.n	8002070 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	4b31      	ldr	r3, [pc, #196]	@ (800207c <HAL_ADC_MspInit+0xec>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fba:	4a30      	ldr	r2, [pc, #192]	@ (800207c <HAL_ADC_MspInit+0xec>)
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fc2:	4b2e      	ldr	r3, [pc, #184]	@ (800207c <HAL_ADC_MspInit+0xec>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800207c <HAL_ADC_MspInit+0xec>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	4a29      	ldr	r2, [pc, #164]	@ (800207c <HAL_ADC_MspInit+0xec>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fde:	4b27      	ldr	r3, [pc, #156]	@ (800207c <HAL_ADC_MspInit+0xec>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fea:	2301      	movs	r3, #1
 8001fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff6:	f107 0314 	add.w	r3, r7, #20
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4820      	ldr	r0, [pc, #128]	@ (8002080 <HAL_ADC_MspInit+0xf0>)
 8001ffe:	f003 f855 	bl	80050ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002002:	4b20      	ldr	r3, [pc, #128]	@ (8002084 <HAL_ADC_MspInit+0xf4>)
 8002004:	4a20      	ldr	r2, [pc, #128]	@ (8002088 <HAL_ADC_MspInit+0xf8>)
 8002006:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002008:	4b1e      	ldr	r3, [pc, #120]	@ (8002084 <HAL_ADC_MspInit+0xf4>)
 800200a:	2200      	movs	r2, #0
 800200c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800200e:	4b1d      	ldr	r3, [pc, #116]	@ (8002084 <HAL_ADC_MspInit+0xf4>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002014:	4b1b      	ldr	r3, [pc, #108]	@ (8002084 <HAL_ADC_MspInit+0xf4>)
 8002016:	2200      	movs	r2, #0
 8002018:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800201a:	4b1a      	ldr	r3, [pc, #104]	@ (8002084 <HAL_ADC_MspInit+0xf4>)
 800201c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002020:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002022:	4b18      	ldr	r3, [pc, #96]	@ (8002084 <HAL_ADC_MspInit+0xf4>)
 8002024:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002028:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800202a:	4b16      	ldr	r3, [pc, #88]	@ (8002084 <HAL_ADC_MspInit+0xf4>)
 800202c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002030:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002032:	4b14      	ldr	r3, [pc, #80]	@ (8002084 <HAL_ADC_MspInit+0xf4>)
 8002034:	2200      	movs	r2, #0
 8002036:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002038:	4b12      	ldr	r3, [pc, #72]	@ (8002084 <HAL_ADC_MspInit+0xf4>)
 800203a:	2200      	movs	r2, #0
 800203c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800203e:	4b11      	ldr	r3, [pc, #68]	@ (8002084 <HAL_ADC_MspInit+0xf4>)
 8002040:	2200      	movs	r2, #0
 8002042:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002044:	480f      	ldr	r0, [pc, #60]	@ (8002084 <HAL_ADC_MspInit+0xf4>)
 8002046:	f002 fc51 	bl	80048ec <HAL_DMA_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002050:	f7ff ff6b 	bl	8001f2a <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a0b      	ldr	r2, [pc, #44]	@ (8002084 <HAL_ADC_MspInit+0xf4>)
 8002058:	639a      	str	r2, [r3, #56]	@ 0x38
 800205a:	4a0a      	ldr	r2, [pc, #40]	@ (8002084 <HAL_ADC_MspInit+0xf4>)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002060:	2200      	movs	r2, #0
 8002062:	2105      	movs	r1, #5
 8002064:	2012      	movs	r0, #18
 8002066:	f002 fc17 	bl	8004898 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800206a:	2012      	movs	r0, #18
 800206c:	f002 fc30 	bl	80048d0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002070:	bf00      	nop
 8002072:	3728      	adds	r7, #40	@ 0x28
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40012000 	.word	0x40012000
 800207c:	40023800 	.word	0x40023800
 8002080:	40020000 	.word	0x40020000
 8002084:	20000354 	.word	0x20000354
 8002088:	40026410 	.word	0x40026410

0800208c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	@ 0x28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a19      	ldr	r2, [pc, #100]	@ (8002110 <HAL_I2C_MspInit+0x84>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d12b      	bne.n	8002106 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	4b18      	ldr	r3, [pc, #96]	@ (8002114 <HAL_I2C_MspInit+0x88>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	4a17      	ldr	r2, [pc, #92]	@ (8002114 <HAL_I2C_MspInit+0x88>)
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020be:	4b15      	ldr	r3, [pc, #84]	@ (8002114 <HAL_I2C_MspInit+0x88>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020ca:	23c0      	movs	r3, #192	@ 0xc0
 80020cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ce:	2312      	movs	r3, #18
 80020d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d6:	2303      	movs	r3, #3
 80020d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020da:	2304      	movs	r3, #4
 80020dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020de:	f107 0314 	add.w	r3, r7, #20
 80020e2:	4619      	mov	r1, r3
 80020e4:	480c      	ldr	r0, [pc, #48]	@ (8002118 <HAL_I2C_MspInit+0x8c>)
 80020e6:	f002 ffe1 	bl	80050ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	4b09      	ldr	r3, [pc, #36]	@ (8002114 <HAL_I2C_MspInit+0x88>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	4a08      	ldr	r2, [pc, #32]	@ (8002114 <HAL_I2C_MspInit+0x88>)
 80020f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020fa:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <HAL_I2C_MspInit+0x88>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002106:	bf00      	nop
 8002108:	3728      	adds	r7, #40	@ 0x28
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40005400 	.word	0x40005400
 8002114:	40023800 	.word	0x40023800
 8002118:	40020400 	.word	0x40020400

0800211c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002124:	f107 030c 	add.w	r3, r7, #12
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0c      	ldr	r2, [pc, #48]	@ (800216c <HAL_RTC_MspInit+0x50>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d111      	bne.n	8002162 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800213e:	2302      	movs	r3, #2
 8002140:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002142:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002146:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002148:	f107 030c 	add.w	r3, r7, #12
 800214c:	4618      	mov	r0, r3
 800214e:	f004 fadb 	bl	8006708 <HAL_RCCEx_PeriphCLKConfig>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002158:	f7ff fee7 	bl	8001f2a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800215c:	4b04      	ldr	r3, [pc, #16]	@ (8002170 <HAL_RTC_MspInit+0x54>)
 800215e:	2201      	movs	r2, #1
 8002160:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002162:	bf00      	nop
 8002164:	3720      	adds	r7, #32
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40002800 	.word	0x40002800
 8002170:	42470e3c 	.word	0x42470e3c

08002174 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08a      	sub	sp, #40	@ 0x28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a22      	ldr	r2, [pc, #136]	@ (800221c <HAL_SPI_MspInit+0xa8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d13d      	bne.n	8002212 <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	4b21      	ldr	r3, [pc, #132]	@ (8002220 <HAL_SPI_MspInit+0xac>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	4a20      	ldr	r2, [pc, #128]	@ (8002220 <HAL_SPI_MspInit+0xac>)
 80021a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002220 <HAL_SPI_MspInit+0xac>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002220 <HAL_SPI_MspInit+0xac>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	4a19      	ldr	r2, [pc, #100]	@ (8002220 <HAL_SPI_MspInit+0xac>)
 80021bc:	f043 0304 	orr.w	r3, r3, #4
 80021c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c2:	4b17      	ldr	r3, [pc, #92]	@ (8002220 <HAL_SPI_MspInit+0xac>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	f003 0304 	and.w	r3, r3, #4
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021dc:	2303      	movs	r3, #3
 80021de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021e0:	2306      	movs	r3, #6
 80021e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	4619      	mov	r1, r3
 80021ea:	480e      	ldr	r0, [pc, #56]	@ (8002224 <HAL_SPI_MspInit+0xb0>)
 80021ec:	f002 ff5e 	bl	80050ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80021f0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80021f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021fa:	2301      	movs	r3, #1
 80021fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fe:	2303      	movs	r3, #3
 8002200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002202:	2306      	movs	r3, #6
 8002204:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002206:	f107 0314 	add.w	r3, r7, #20
 800220a:	4619      	mov	r1, r3
 800220c:	4805      	ldr	r0, [pc, #20]	@ (8002224 <HAL_SPI_MspInit+0xb0>)
 800220e:	f002 ff4d 	bl	80050ac <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002212:	bf00      	nop
 8002214:	3728      	adds	r7, #40	@ 0x28
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40003c00 	.word	0x40003c00
 8002220:	40023800 	.word	0x40023800
 8002224:	40020800 	.word	0x40020800

08002228 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0e      	ldr	r2, [pc, #56]	@ (8002270 <HAL_TIM_Base_MspInit+0x48>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d115      	bne.n	8002266 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	4b0d      	ldr	r3, [pc, #52]	@ (8002274 <HAL_TIM_Base_MspInit+0x4c>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	4a0c      	ldr	r2, [pc, #48]	@ (8002274 <HAL_TIM_Base_MspInit+0x4c>)
 8002244:	f043 0302 	orr.w	r3, r3, #2
 8002248:	6413      	str	r3, [r2, #64]	@ 0x40
 800224a:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <HAL_TIM_Base_MspInit+0x4c>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	2105      	movs	r1, #5
 800225a:	201d      	movs	r0, #29
 800225c:	f002 fb1c 	bl	8004898 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002260:	201d      	movs	r0, #29
 8002262:	f002 fb35 	bl	80048d0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40000400 	.word	0x40000400
 8002274:	40023800 	.word	0x40023800

08002278 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	@ 0x28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a19      	ldr	r2, [pc, #100]	@ (80022fc <HAL_UART_MspInit+0x84>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d12b      	bne.n	80022f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	4b18      	ldr	r3, [pc, #96]	@ (8002300 <HAL_UART_MspInit+0x88>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	4a17      	ldr	r2, [pc, #92]	@ (8002300 <HAL_UART_MspInit+0x88>)
 80022a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022aa:	4b15      	ldr	r3, [pc, #84]	@ (8002300 <HAL_UART_MspInit+0x88>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	4b11      	ldr	r3, [pc, #68]	@ (8002300 <HAL_UART_MspInit+0x88>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022be:	4a10      	ldr	r2, [pc, #64]	@ (8002300 <HAL_UART_MspInit+0x88>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002300 <HAL_UART_MspInit+0x88>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022d2:	230c      	movs	r3, #12
 80022d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2300      	movs	r3, #0
 80022e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022e2:	2307      	movs	r3, #7
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e6:	f107 0314 	add.w	r3, r7, #20
 80022ea:	4619      	mov	r1, r3
 80022ec:	4805      	ldr	r0, [pc, #20]	@ (8002304 <HAL_UART_MspInit+0x8c>)
 80022ee:	f002 fedd 	bl	80050ac <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80022f2:	bf00      	nop
 80022f4:	3728      	adds	r7, #40	@ 0x28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40004400 	.word	0x40004400
 8002300:	40023800 	.word	0x40023800
 8002304:	40020000 	.word	0x40020000

08002308 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08e      	sub	sp, #56	@ 0x38
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	4b34      	ldr	r3, [pc, #208]	@ (80023f0 <HAL_InitTick+0xe8>)
 800231e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002320:	4a33      	ldr	r2, [pc, #204]	@ (80023f0 <HAL_InitTick+0xe8>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6413      	str	r3, [r2, #64]	@ 0x40
 8002328:	4b31      	ldr	r3, [pc, #196]	@ (80023f0 <HAL_InitTick+0xe8>)
 800232a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002334:	f107 0210 	add.w	r2, r7, #16
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	4611      	mov	r1, r2
 800233e:	4618      	mov	r0, r3
 8002340:	f004 f9b0 	bl	80066a4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800234a:	2b00      	cmp	r3, #0
 800234c:	d103      	bne.n	8002356 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800234e:	f004 f981 	bl	8006654 <HAL_RCC_GetPCLK1Freq>
 8002352:	6378      	str	r0, [r7, #52]	@ 0x34
 8002354:	e004      	b.n	8002360 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002356:	f004 f97d 	bl	8006654 <HAL_RCC_GetPCLK1Freq>
 800235a:	4603      	mov	r3, r0
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002362:	4a24      	ldr	r2, [pc, #144]	@ (80023f4 <HAL_InitTick+0xec>)
 8002364:	fba2 2303 	umull	r2, r3, r2, r3
 8002368:	0c9b      	lsrs	r3, r3, #18
 800236a:	3b01      	subs	r3, #1
 800236c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800236e:	4b22      	ldr	r3, [pc, #136]	@ (80023f8 <HAL_InitTick+0xf0>)
 8002370:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002374:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002376:	4b20      	ldr	r3, [pc, #128]	@ (80023f8 <HAL_InitTick+0xf0>)
 8002378:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800237c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800237e:	4a1e      	ldr	r2, [pc, #120]	@ (80023f8 <HAL_InitTick+0xf0>)
 8002380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002382:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002384:	4b1c      	ldr	r3, [pc, #112]	@ (80023f8 <HAL_InitTick+0xf0>)
 8002386:	2200      	movs	r2, #0
 8002388:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800238a:	4b1b      	ldr	r3, [pc, #108]	@ (80023f8 <HAL_InitTick+0xf0>)
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002390:	4b19      	ldr	r3, [pc, #100]	@ (80023f8 <HAL_InitTick+0xf0>)
 8002392:	2200      	movs	r2, #0
 8002394:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8002396:	4818      	ldr	r0, [pc, #96]	@ (80023f8 <HAL_InitTick+0xf0>)
 8002398:	f005 f946 	bl	8007628 <HAL_TIM_Base_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80023a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d11b      	bne.n	80023e2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80023aa:	4813      	ldr	r0, [pc, #76]	@ (80023f8 <HAL_InitTick+0xf0>)
 80023ac:	f005 f98c 	bl	80076c8 <HAL_TIM_Base_Start_IT>
 80023b0:	4603      	mov	r3, r0
 80023b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80023b6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d111      	bne.n	80023e2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023be:	201c      	movs	r0, #28
 80023c0:	f002 fa86 	bl	80048d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b0f      	cmp	r3, #15
 80023c8:	d808      	bhi.n	80023dc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80023ca:	2200      	movs	r2, #0
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	201c      	movs	r0, #28
 80023d0:	f002 fa62 	bl	8004898 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023d4:	4a09      	ldr	r2, [pc, #36]	@ (80023fc <HAL_InitTick+0xf4>)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e002      	b.n	80023e2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80023e2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3738      	adds	r7, #56	@ 0x38
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40023800 	.word	0x40023800
 80023f4:	431bde83 	.word	0x431bde83
 80023f8:	20000524 	.word	0x20000524
 80023fc:	20000024 	.word	0x20000024

08002400 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002404:	4b0e      	ldr	r3, [pc, #56]	@ (8002440 <SDTimer_Handler+0x40>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d006      	beq.n	800241c <SDTimer_Handler+0x1c>
    Timer1--;
 800240e:	4b0c      	ldr	r3, [pc, #48]	@ (8002440 <SDTimer_Handler+0x40>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	b2da      	uxtb	r2, r3
 8002418:	4b09      	ldr	r3, [pc, #36]	@ (8002440 <SDTimer_Handler+0x40>)
 800241a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 800241c:	4b09      	ldr	r3, [pc, #36]	@ (8002444 <SDTimer_Handler+0x44>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d006      	beq.n	8002434 <SDTimer_Handler+0x34>
    Timer2--;
 8002426:	4b07      	ldr	r3, [pc, #28]	@ (8002444 <SDTimer_Handler+0x44>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b2da      	uxtb	r2, r3
 8002430:	4b04      	ldr	r3, [pc, #16]	@ (8002444 <SDTimer_Handler+0x44>)
 8002432:	701a      	strb	r2, [r3, #0]
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	2000056d 	.word	0x2000056d
 8002444:	2000056e 	.word	0x2000056e

08002448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800244c:	bf00      	nop
 800244e:	e7fd      	b.n	800244c <NMI_Handler+0x4>

08002450 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <HardFault_Handler+0x4>

08002458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <MemManage_Handler+0x4>

08002460 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002464:	bf00      	nop
 8002466:	e7fd      	b.n	8002464 <BusFault_Handler+0x4>

08002468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800246c:	bf00      	nop
 800246e:	e7fd      	b.n	800246c <UsageFault_Handler+0x4>

08002470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
	...

08002480 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002484:	4802      	ldr	r0, [pc, #8]	@ (8002490 <ADC_IRQHandler+0x10>)
 8002486:	f001 fc2c 	bl	8003ce2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	2000030c 	.word	0x2000030c

08002494 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  FatFsCnt++;
 8002498:	4b0a      	ldr	r3, [pc, #40]	@ (80024c4 <TIM2_IRQHandler+0x30>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	3301      	adds	r3, #1
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b08      	ldr	r3, [pc, #32]	@ (80024c4 <TIM2_IRQHandler+0x30>)
 80024a4:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10){
 80024a6:	4b07      	ldr	r3, [pc, #28]	@ (80024c4 <TIM2_IRQHandler+0x30>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b09      	cmp	r3, #9
 80024ae:	d904      	bls.n	80024ba <TIM2_IRQHandler+0x26>
	  FatFsCnt = 0;
 80024b0:	4b04      	ldr	r3, [pc, #16]	@ (80024c4 <TIM2_IRQHandler+0x30>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 80024b6:	f7ff ffa3 	bl	8002400 <SDTimer_Handler>
  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024ba:	4803      	ldr	r0, [pc, #12]	@ (80024c8 <TIM2_IRQHandler+0x34>)
 80024bc:	f005 f995 	bl	80077ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	2000056c 	.word	0x2000056c
 80024c8:	20000524 	.word	0x20000524

080024cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024d0:	4802      	ldr	r0, [pc, #8]	@ (80024dc <TIM3_IRQHandler+0x10>)
 80024d2:	f005 f98a 	bl	80077ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000480 	.word	0x20000480

080024e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024e4:	4802      	ldr	r0, [pc, #8]	@ (80024f0 <DMA2_Stream0_IRQHandler+0x10>)
 80024e6:	f002 fb77 	bl	8004bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000354 	.word	0x20000354

080024f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024fc:	4a14      	ldr	r2, [pc, #80]	@ (8002550 <_sbrk+0x5c>)
 80024fe:	4b15      	ldr	r3, [pc, #84]	@ (8002554 <_sbrk+0x60>)
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002508:	4b13      	ldr	r3, [pc, #76]	@ (8002558 <_sbrk+0x64>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d102      	bne.n	8002516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002510:	4b11      	ldr	r3, [pc, #68]	@ (8002558 <_sbrk+0x64>)
 8002512:	4a12      	ldr	r2, [pc, #72]	@ (800255c <_sbrk+0x68>)
 8002514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002516:	4b10      	ldr	r3, [pc, #64]	@ (8002558 <_sbrk+0x64>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	429a      	cmp	r2, r3
 8002522:	d207      	bcs.n	8002534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002524:	f00f ff0a 	bl	801233c <__errno>
 8002528:	4603      	mov	r3, r0
 800252a:	220c      	movs	r2, #12
 800252c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800252e:	f04f 33ff 	mov.w	r3, #4294967295
 8002532:	e009      	b.n	8002548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002534:	4b08      	ldr	r3, [pc, #32]	@ (8002558 <_sbrk+0x64>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800253a:	4b07      	ldr	r3, [pc, #28]	@ (8002558 <_sbrk+0x64>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	4a05      	ldr	r2, [pc, #20]	@ (8002558 <_sbrk+0x64>)
 8002544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002546:	68fb      	ldr	r3, [r7, #12]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20018000 	.word	0x20018000
 8002554:	00000400 	.word	0x00000400
 8002558:	20000570 	.word	0x20000570
 800255c:	20010458 	.word	0x20010458

08002560 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002564:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <SystemInit+0x20>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256a:	4a05      	ldr	r2, [pc, #20]	@ (8002580 <SystemInit+0x20>)
 800256c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002570:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8002584:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002588:	f7ff ffea 	bl	8002560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800258c:	480c      	ldr	r0, [pc, #48]	@ (80025c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800258e:	490d      	ldr	r1, [pc, #52]	@ (80025c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002590:	4a0d      	ldr	r2, [pc, #52]	@ (80025c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002594:	e002      	b.n	800259c <LoopCopyDataInit>

08002596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800259a:	3304      	adds	r3, #4

0800259c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800259c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800259e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a0:	d3f9      	bcc.n	8002596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025a2:	4a0a      	ldr	r2, [pc, #40]	@ (80025cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025a4:	4c0a      	ldr	r4, [pc, #40]	@ (80025d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025a8:	e001      	b.n	80025ae <LoopFillZerobss>

080025aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025ac:	3204      	adds	r2, #4

080025ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b0:	d3fb      	bcc.n	80025aa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80025b2:	f00f fec9 	bl	8012348 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025b6:	f7ff f953 	bl	8001860 <main>
  bx  lr    
 80025ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80025c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025c4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80025c8:	0802ab1c 	.word	0x0802ab1c
  ldr r2, =_sbss
 80025cc:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80025d0:	20010458 	.word	0x20010458

080025d4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025d4:	e7fe      	b.n	80025d4 <DMA1_Stream0_IRQHandler>
	...

080025d8 <capture_voice>:
#include "sd_functions.h"
#define ARM_MATH_CM4
#include "arm_math.h"
#include "dsp_functions.h"
/*================[Public functions]=====================*/
void capture_voice(uint16_t *buffer, uint32_t size){
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Start_IT(&htim3);
 80025e2:	4806      	ldr	r0, [pc, #24]	@ (80025fc <capture_voice+0x24>)
 80025e4:	f005 f870 	bl	80076c8 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, size);
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4804      	ldr	r0, [pc, #16]	@ (8002600 <capture_voice+0x28>)
 80025ee:	f001 fc89 	bl	8003f04 <HAL_ADC_Start_DMA>
	return;
 80025f2:	bf00      	nop
}
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000480 	.word	0x20000480
 8002600:	2000030c 	.word	0x2000030c
 8002604:	00000000 	.word	0x00000000

08002608 <get_voltage>:

void get_voltage(uint16_t *in_buffer, float *out_buffer, uint32_t size){
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
	for(uint32_t i = 0; i < size; i++){
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	e029      	b.n	800266e <get_voltage+0x66>
		out_buffer[i] = VOLTAGE_REFERENCE * ((float)in_buffer[i]) / ADC_RESOLUTION;
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4413      	add	r3, r2
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	ee07 3a90 	vmov	s15, r3
 8002628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800262c:	ee17 0a90 	vmov	r0, s15
 8002630:	f7fd fff2 	bl	8000618 <__aeabi_f2d>
 8002634:	a313      	add	r3, pc, #76	@ (adr r3, 8002684 <get_voltage+0x7c>)
 8002636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263a:	f7fe f845 	bl	80006c8 <__aeabi_dmul>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4610      	mov	r0, r2
 8002644:	4619      	mov	r1, r3
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	4b0d      	ldr	r3, [pc, #52]	@ (8002680 <get_voltage+0x78>)
 800264c:	f7fe f966 	bl	800091c <__aeabi_ddiv>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4610      	mov	r0, r2
 8002656:	4619      	mov	r1, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	18d4      	adds	r4, r2, r3
 8002660:	f7fe fa44 	bl	8000aec <__aeabi_d2f>
 8002664:	4603      	mov	r3, r0
 8002666:	6023      	str	r3, [r4, #0]
	for(uint32_t i = 0; i < size; i++){
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	3301      	adds	r3, #1
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	429a      	cmp	r2, r3
 8002674:	d3d1      	bcc.n	800261a <get_voltage+0x12>
	}
}
 8002676:	bf00      	nop
 8002678:	bf00      	nop
 800267a:	371c      	adds	r7, #28
 800267c:	46bd      	mov	sp, r7
 800267e:	bd90      	pop	{r4, r7, pc}
 8002680:	40b00000 	.word	0x40b00000
 8002684:	66666666 	.word	0x66666666
 8002688:	400a6666 	.word	0x400a6666

0800268c <capture_and_store_voice>:

void capture_and_store_voice(uint16_t *voice_buffer, uint32_t size, char *filename){
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
	indicatorMessage current_message;
	//Capturo voz
	capture_voice(voice_buffer, size);
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f7ff ff9c 	bl	80025d8 <capture_voice>
	while(!conv_cplt_flag);
 80026a0:	bf00      	nop
 80026a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002720 <capture_and_store_voice+0x94>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f083 0301 	eor.w	r3, r3, #1
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f7      	bne.n	80026a2 <capture_and_store_voice+0x16>
	conv_cplt_flag = false;
 80026b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002720 <capture_and_store_voice+0x94>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]

	//Aviso al display que termino la captura y empieza el procesamiento
	current_message = PANTALLA_PROCESANDO_DATOS;
 80026b8:	230e      	movs	r3, #14
 80026ba:	75fb      	strb	r3, [r7, #23]
	xQueueSend(display_queue, &current_message, portMAX_DELAY);
 80026bc:	4b19      	ldr	r3, [pc, #100]	@ (8002724 <capture_and_store_voice+0x98>)
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	f107 0117 	add.w	r1, r7, #23
 80026c4:	2300      	movs	r3, #0
 80026c6:	f04f 32ff 	mov.w	r2, #4294967295
 80026ca:	f00b ff3d 	bl	800e548 <xQueueGenericSend>

	//Reservo memoria para el bloque de procesamiento
	float *current_block = pvPortMalloc(FLOAT_SIZE_BYTES(BLOCK_SIZE));
 80026ce:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80026d2:	f00d ff13 	bl	80104fc <pvPortMalloc>
 80026d6:	61b8      	str	r0, [r7, #24]
	if(current_block == NULL){
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d01c      	beq.n	8002718 <capture_and_store_voice+0x8c>
		//Manejar este caso, enviar un print
		return;
	}


	for(uint8_t i = 0; i < NUM_OF_BLOCKS; i++){
 80026de:	2300      	movs	r3, #0
 80026e0:	77fb      	strb	r3, [r7, #31]
 80026e2:	e012      	b.n	800270a <capture_and_store_voice+0x7e>
		//Convierto los valores obtenidos a tension
		get_voltage(&voice_buffer[i * BLOCK_SIZE], current_block, BLOCK_SIZE);
 80026e4:	7ffb      	ldrb	r3, [r7, #31]
 80026e6:	031b      	lsls	r3, r3, #12
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4413      	add	r3, r2
 80026ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80026f0:	69b9      	ldr	r1, [r7, #24]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff ff88 	bl	8002608 <get_voltage>

		//Guardo en la SD
		save_buffer_on_sd(filename, current_block, BLOCK_SIZE);
 80026f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80026fc:	69b9      	ldr	r1, [r7, #24]
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 fff8 	bl	80036f4 <save_buffer_on_sd>
	for(uint8_t i = 0; i < NUM_OF_BLOCKS; i++){
 8002704:	7ffb      	ldrb	r3, [r7, #31]
 8002706:	3301      	adds	r3, #1
 8002708:	77fb      	strb	r3, [r7, #31]
 800270a:	7ffb      	ldrb	r3, [r7, #31]
 800270c:	2b08      	cmp	r3, #8
 800270e:	d9e9      	bls.n	80026e4 <capture_and_store_voice+0x58>
	}

	//Libero memoria utilizada
	vPortFree(current_block);
 8002710:	69b8      	ldr	r0, [r7, #24]
 8002712:	f00d ffc1 	bl	8010698 <vPortFree>
 8002716:	e000      	b.n	800271a <capture_and_store_voice+0x8e>
		return;
 8002718:	bf00      	nop
}
 800271a:	3720      	adds	r7, #32
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20000520 	.word	0x20000520
 8002724:	20000514 	.word	0x20000514

08002728 <generate_template>:

void generate_template(void){
 8002728:	b590      	push	{r4, r7, lr}
 800272a:	b0a3      	sub	sp, #140	@ 0x8c
 800272c:	af00      	add	r7, sp, #0
	float *template, *aux;
	float *voices[TEMPLATE_SAMPLES];
	char filenames[TEMPLATE_SAMPLES][DIR_STR_SIZE] = {"voice_1.bin", "voice_2.bin", "voice_3.bin", "voice_4.bin", "voice_5.bin"};
 800272e:	4a68      	ldr	r2, [pc, #416]	@ (80028d0 <generate_template+0x1a8>)
 8002730:	463b      	mov	r3, r7
 8002732:	4611      	mov	r1, r2
 8002734:	2264      	movs	r2, #100	@ 0x64
 8002736:	4618      	mov	r0, r3
 8002738:	f00f fe2c 	bl	8012394 <memcpy>

	//Reservo memoria para el template y para el buffer auxiliar
	template = pvPortMalloc(FLOAT_SIZE_BYTES(BLOCK_SIZE / 2));
 800273c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002740:	f00d fedc 	bl	80104fc <pvPortMalloc>
 8002744:	67f8      	str	r0, [r7, #124]	@ 0x7c
	aux = pvPortMalloc(FLOAT_SIZE_BYTES(BLOCK_SIZE / 2));
 8002746:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800274a:	f00d fed7 	bl	80104fc <pvPortMalloc>
 800274e:	67b8      	str	r0, [r7, #120]	@ 0x78

	//Reservo memoria para cada buffer de voz
	for(uint8_t i = 0; i < TEMPLATE_SAMPLES; i++){
 8002750:	2300      	movs	r3, #0
 8002752:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8002756:	e010      	b.n	800277a <generate_template+0x52>
		voices[i] = pvPortMalloc(FLOAT_SIZE_BYTES(BLOCK_SIZE));
 8002758:	f897 4087 	ldrb.w	r4, [r7, #135]	@ 0x87
 800275c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002760:	f00d fecc 	bl	80104fc <pvPortMalloc>
 8002764:	4602      	mov	r2, r0
 8002766:	00a3      	lsls	r3, r4, #2
 8002768:	3388      	adds	r3, #136	@ 0x88
 800276a:	443b      	add	r3, r7
 800276c:	f843 2c24 	str.w	r2, [r3, #-36]
	for(uint8_t i = 0; i < TEMPLATE_SAMPLES; i++){
 8002770:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002774:	3301      	adds	r3, #1
 8002776:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800277a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800277e:	2b04      	cmp	r3, #4
 8002780:	d9ea      	bls.n	8002758 <generate_template+0x30>
	}

	//Inicializo bloque de template con ceros
	arm_fill_f32(0.0f, template, BLOCK_SIZE / 2);
 8002782:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002786:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8002788:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 80028d4 <generate_template+0x1ac>
 800278c:	f00e f8a4 	bl	80108d8 <arm_fill_f32>

	for(uint8_t i = 0; i < NUM_OF_BLOCKS; i++){
 8002790:	2300      	movs	r3, #0
 8002792:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8002796:	e05d      	b.n	8002854 <generate_template+0x12c>
		//Leo un bloque de cada archivo
		for(uint8_t j = 0; j < TEMPLATE_SAMPLES; j++){
 8002798:	2300      	movs	r3, #0
 800279a:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
 800279e:	e01a      	b.n	80027d6 <generate_template+0xae>
			read_buffer_from_sd(filenames[j], voices[j], BLOCK_SIZE, i * BLOCK_SIZE);
 80027a0:	f897 2085 	ldrb.w	r2, [r7, #133]	@ 0x85
 80027a4:	4639      	mov	r1, r7
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	18c8      	adds	r0, r1, r3
 80027b0:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	3388      	adds	r3, #136	@ 0x88
 80027b8:	443b      	add	r3, r7
 80027ba:	f853 1c24 	ldr.w	r1, [r3, #-36]
 80027be:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80027c2:	02db      	lsls	r3, r3, #11
 80027c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027c8:	f001 f802 	bl	80037d0 <read_buffer_from_sd>
		for(uint8_t j = 0; j < TEMPLATE_SAMPLES; j++){
 80027cc:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 80027d0:	3301      	adds	r3, #1
 80027d2:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
 80027d6:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d9e0      	bls.n	80027a0 <generate_template+0x78>
		}

		//Proceso cada bloque de las diferentes voces y lo sumo al template
		for(uint8_t j = 0; j < TEMPLATE_SAMPLES; j++){
 80027de:	2300      	movs	r3, #0
 80027e0:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
 80027e4:	e01f      	b.n	8002826 <generate_template+0xfe>
			process_signal(voices[j], aux, BLOCK_SIZE);
 80027e6:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	3388      	adds	r3, #136	@ 0x88
 80027ee:	443b      	add	r3, r7
 80027f0:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80027f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027f8:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fee8 	bl	80035d0 <process_signal>
			arm_add_f32(template, aux, template, BLOCK_SIZE / 2);
 8002800:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002804:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002806:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8002808:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800280a:	f00f fa19 	bl	8011c40 <arm_add_f32>
			arm_fill_f32(0.0f, aux, BLOCK_SIZE / 2);								//Reseteo para el siguiente procesamiento
 800280e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002812:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002814:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 80028d4 <generate_template+0x1ac>
 8002818:	f00e f85e 	bl	80108d8 <arm_fill_f32>
		for(uint8_t j = 0; j < TEMPLATE_SAMPLES; j++){
 800281c:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8002820:	3301      	adds	r3, #1
 8002822:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
 8002826:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800282a:	2b04      	cmp	r3, #4
 800282c:	d9db      	bls.n	80027e6 <generate_template+0xbe>
		}

		//Escalo para obtener el promedio
		arm_scale_f32(template, 1.0f / TEMPLATE_SAMPLES, template, BLOCK_SIZE / 2);
 800282e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002832:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002834:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 80028d8 <generate_template+0x1b0>
 8002838:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800283a:	f00f f9cb 	bl	8011bd4 <arm_scale_f32>

		//Guardo bloque de template en la SD
		save_buffer_on_sd("current_template.bin", template, BLOCK_SIZE / 2);
 800283e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002842:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002844:	4825      	ldr	r0, [pc, #148]	@ (80028dc <generate_template+0x1b4>)
 8002846:	f000 ff55 	bl	80036f4 <save_buffer_on_sd>
	for(uint8_t i = 0; i < NUM_OF_BLOCKS; i++){
 800284a:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800284e:	3301      	adds	r3, #1
 8002850:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8002854:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002858:	2b08      	cmp	r3, #8
 800285a:	d99d      	bls.n	8002798 <generate_template+0x70>
	}
	//Borro los archivos creados para hacer el template
	for(uint8_t i = 0; i < TEMPLATE_SAMPLES; i++){
 800285c:	2300      	movs	r3, #0
 800285e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8002862:	e00f      	b.n	8002884 <generate_template+0x15c>
		f_unlink(filenames[i]);
 8002864:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8002868:	4639      	mov	r1, r7
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	4618      	mov	r0, r3
 8002876:	f00b f906 	bl	800da86 <f_unlink>
	for(uint8_t i = 0; i < TEMPLATE_SAMPLES; i++){
 800287a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800287e:	3301      	adds	r3, #1
 8002880:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8002884:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8002888:	2b04      	cmp	r3, #4
 800288a:	d9eb      	bls.n	8002864 <generate_template+0x13c>
	}

	//Libero memoria alocada dinamicamente para las voces
	for(uint8_t i = 0; i < TEMPLATE_SAMPLES; i++){
 800288c:	2300      	movs	r3, #0
 800288e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8002892:	e00e      	b.n	80028b2 <generate_template+0x18a>
		vPortFree(voices[i]);
 8002894:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	3388      	adds	r3, #136	@ 0x88
 800289c:	443b      	add	r3, r7
 800289e:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f00d fef8 	bl	8010698 <vPortFree>
	for(uint8_t i = 0; i < TEMPLATE_SAMPLES; i++){
 80028a8:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80028ac:	3301      	adds	r3, #1
 80028ae:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 80028b2:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d9ec      	bls.n	8002894 <generate_template+0x16c>
	}

	//Libero memoria utilizada por template y aux
	vPortFree(template);
 80028ba:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80028bc:	f00d feec 	bl	8010698 <vPortFree>
	vPortFree(aux);
 80028c0:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80028c2:	f00d fee9 	bl	8010698 <vPortFree>
	return;
 80028c6:	bf00      	nop
}
 80028c8:	378c      	adds	r7, #140	@ 0x8c
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd90      	pop	{r4, r7, pc}
 80028ce:	bf00      	nop
 80028d0:	08012ca4 	.word	0x08012ca4
 80028d4:	00000000 	.word	0x00000000
 80028d8:	3e4ccccd 	.word	0x3e4ccccd
 80028dc:	08012c8c 	.word	0x08012c8c

080028e0 <display_init>:

#define LINE_HEIGHT 18  // Altura de la fuente (ajustar según la fuente usada)
#define DISPLAY_WIDTH 128
#define DISPLAY_HEIGHT 64
/*================[Public functions]=====================*/
void display_init(void){
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
	/*Wrapper de la función que inicializa el display*/
	ssd1306_Init();
 80028e4:	f000 fa20 	bl	8002d28 <ssd1306_Init>
	return;
 80028e8:	bf00      	nop
}
 80028ea:	bd80      	pop	{r7, pc}

080028ec <display_text>:

void display_text(const char *text,  uint8_t font_size) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	70fb      	strb	r3, [r7, #3]
    uint8_t x = 0;  			// Posición inicial en X
 80028f8:	2300      	movs	r3, #0
 80028fa:	73fb      	strb	r3, [r7, #15]
    uint8_t y = 0;  			// Posición inicial en Y
 80028fc:	2300      	movs	r3, #0
 80028fe:	73bb      	strb	r3, [r7, #14]
    uint8_t char_width = 0;   	// Ancho del carácter actual
 8002900:	2300      	movs	r3, #0
 8002902:	737b      	strb	r3, [r7, #13]
    uint8_t line_height = 0;  	// Altura de la línea actual
 8002904:	2300      	movs	r3, #0
 8002906:	733b      	strb	r3, [r7, #12]
    // Configurar la fuente según el tamaño
    switch (font_size) {
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	2b03      	cmp	r3, #3
 800290c:	d010      	beq.n	8002930 <display_text+0x44>
 800290e:	2b03      	cmp	r3, #3
 8002910:	dc13      	bgt.n	800293a <display_text+0x4e>
 8002912:	2b01      	cmp	r3, #1
 8002914:	d002      	beq.n	800291c <display_text+0x30>
 8002916:	2b02      	cmp	r3, #2
 8002918:	d005      	beq.n	8002926 <display_text+0x3a>
 800291a:	e00e      	b.n	800293a <display_text+0x4e>
        case 1: 									// Tamaño pequeño
            char_width = 7;
 800291c:	2307      	movs	r3, #7
 800291e:	737b      	strb	r3, [r7, #13]
            line_height = 10;
 8002920:	230a      	movs	r3, #10
 8002922:	733b      	strb	r3, [r7, #12]
            break;
 8002924:	e00e      	b.n	8002944 <display_text+0x58>
        case 2: 									// Tamaño mediano
            char_width = 11;
 8002926:	230b      	movs	r3, #11
 8002928:	737b      	strb	r3, [r7, #13]
            line_height = 18;
 800292a:	2312      	movs	r3, #18
 800292c:	733b      	strb	r3, [r7, #12]
            break;
 800292e:	e009      	b.n	8002944 <display_text+0x58>
        case 3: 									// Tamaño grande
            char_width = 16;
 8002930:	2310      	movs	r3, #16
 8002932:	737b      	strb	r3, [r7, #13]
            line_height = 24;
 8002934:	2318      	movs	r3, #24
 8002936:	733b      	strb	r3, [r7, #12]
            break;
 8002938:	e004      	b.n	8002944 <display_text+0x58>
        default: 									// Tamaño por defecto
            char_width = 7;
 800293a:	2307      	movs	r3, #7
 800293c:	737b      	strb	r3, [r7, #13]
            line_height = 10;
 800293e:	230a      	movs	r3, #10
 8002940:	733b      	strb	r3, [r7, #12]
            break;
 8002942:	bf00      	nop
    }

    ssd1306_Fill(Black);  // Limpiar la pantalla
 8002944:	2000      	movs	r0, #0
 8002946:	f000 fa59 	bl	8002dfc <ssd1306_Fill>

    while (*text) {
 800294a:	e053      	b.n	80029f4 <display_text+0x108>
        // Verificar si es un salto de línea manual
        if (*text == '\n') {
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b0a      	cmp	r3, #10
 8002952:	d106      	bne.n	8002962 <display_text+0x76>
            y += line_height;  											// Avanzo a la siguiente linea
 8002954:	7bba      	ldrb	r2, [r7, #14]
 8002956:	7b3b      	ldrb	r3, [r7, #12]
 8002958:	4413      	add	r3, r2
 800295a:	73bb      	strb	r3, [r7, #14]
            x = 0;             											// Reinicio x
 800295c:	2300      	movs	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]
 8002960:	e040      	b.n	80029e4 <display_text+0xf8>
        } else {
            // Escribir el carácter actual
            ssd1306_SetCursor(x, y);
 8002962:	7bba      	ldrb	r2, [r7, #14]
 8002964:	7bfb      	ldrb	r3, [r7, #15]
 8002966:	4611      	mov	r1, r2
 8002968:	4618      	mov	r0, r3
 800296a:	f000 fb91 	bl	8003090 <ssd1306_SetCursor>
            if(font_size == 1){
 800296e:	78fb      	ldrb	r3, [r7, #3]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d108      	bne.n	8002986 <display_text+0x9a>
            	ssd1306_WriteChar(*text, Font_7x10, White);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	7818      	ldrb	r0, [r3, #0]
 8002978:	4b24      	ldr	r3, [pc, #144]	@ (8002a0c <display_text+0x120>)
 800297a:	2201      	movs	r2, #1
 800297c:	9200      	str	r2, [sp, #0]
 800297e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002980:	f000 fad0 	bl	8002f24 <ssd1306_WriteChar>
 8002984:	e01f      	b.n	80029c6 <display_text+0xda>
            }
            else if(font_size == 2){
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d108      	bne.n	800299e <display_text+0xb2>
            	ssd1306_WriteChar(*text, Font_11x18, White);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	7818      	ldrb	r0, [r3, #0]
 8002990:	4b1f      	ldr	r3, [pc, #124]	@ (8002a10 <display_text+0x124>)
 8002992:	2201      	movs	r2, #1
 8002994:	9200      	str	r2, [sp, #0]
 8002996:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002998:	f000 fac4 	bl	8002f24 <ssd1306_WriteChar>
 800299c:	e013      	b.n	80029c6 <display_text+0xda>
            }
            else if(font_size == 3){
 800299e:	78fb      	ldrb	r3, [r7, #3]
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d108      	bne.n	80029b6 <display_text+0xca>
            	ssd1306_WriteChar(*text, Font_16x24, White);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	7818      	ldrb	r0, [r3, #0]
 80029a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a14 <display_text+0x128>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	9200      	str	r2, [sp, #0]
 80029ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029b0:	f000 fab8 	bl	8002f24 <ssd1306_WriteChar>
 80029b4:	e007      	b.n	80029c6 <display_text+0xda>
            }
            else{
            	ssd1306_WriteChar(*text, Font_7x10, White);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	7818      	ldrb	r0, [r3, #0]
 80029ba:	4b14      	ldr	r3, [pc, #80]	@ (8002a0c <display_text+0x120>)
 80029bc:	2201      	movs	r2, #1
 80029be:	9200      	str	r2, [sp, #0]
 80029c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029c2:	f000 faaf 	bl	8002f24 <ssd1306_WriteChar>
            }

            // Avanzar la posición X
            x += char_width;  // Avanzar por el ancho de la fuente
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	7b7b      	ldrb	r3, [r7, #13]
 80029ca:	4413      	add	r3, r2
 80029cc:	73fb      	strb	r3, [r7, #15]
            if (x + char_width > DISPLAY_WIDTH) {  							// Si se pasa del ancho de pantalla
 80029ce:	7bfa      	ldrb	r2, [r7, #15]
 80029d0:	7b7b      	ldrb	r3, [r7, #13]
 80029d2:	4413      	add	r3, r2
 80029d4:	2b80      	cmp	r3, #128	@ 0x80
 80029d6:	dd05      	ble.n	80029e4 <display_text+0xf8>
                x = 0;                      								// Reinicio x
 80029d8:	2300      	movs	r3, #0
 80029da:	73fb      	strb	r3, [r7, #15]
                y += line_height;           								// Avanzo a la siguiente linea
 80029dc:	7bba      	ldrb	r2, [r7, #14]
 80029de:	7b3b      	ldrb	r3, [r7, #12]
 80029e0:	4413      	add	r3, r2
 80029e2:	73bb      	strb	r3, [r7, #14]
            }
        }

        // Avanzar al siguiente carácter
        text++;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3301      	adds	r3, #1
 80029e8:	607b      	str	r3, [r7, #4]

        // Verificar si alcanzamos el final de la pantalla
        if (y + line_height > DISPLAY_HEIGHT) {
 80029ea:	7bba      	ldrb	r2, [r7, #14]
 80029ec:	7b3b      	ldrb	r3, [r7, #12]
 80029ee:	4413      	add	r3, r2
 80029f0:	2b40      	cmp	r3, #64	@ 0x40
 80029f2:	dc04      	bgt.n	80029fe <display_text+0x112>
    while (*text) {
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1a7      	bne.n	800294c <display_text+0x60>
 80029fc:	e000      	b.n	8002a00 <display_text+0x114>
            break;  // No hay más espacio para mostrar texto
 80029fe:	bf00      	nop
        }
    }

    ssd1306_UpdateScreen();  // Actualizar pantalla
 8002a00:	f000 fa14 	bl	8002e2c <ssd1306_UpdateScreen>
}
 8002a04:	bf00      	nop
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	0801693c 	.word	0x0801693c
 8002a10:	08016948 	.word	0x08016948
 8002a14:	08016960 	.word	0x08016960

08002a18 <display_start_msg>:

void display_start_msg(void){
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af02      	add	r7, sp, #8
	/*Muestra mensaje de insertar clave*/
	uint8_t x = 5;
 8002a1e:	2305      	movs	r3, #5
 8002a20:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8002a26:	2000      	movs	r0, #0
 8002a28:	f000 f9e8 	bl	8002dfc <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8002a2c:	79ba      	ldrb	r2, [r7, #6]
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	4611      	mov	r1, r2
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 fb2c 	bl	8003090 <ssd1306_SetCursor>
	ssd1306_WriteString("Ingrese", Font_16x26, White);
 8002a38:	4b0f      	ldr	r3, [pc, #60]	@ (8002a78 <display_start_msg+0x60>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	9200      	str	r2, [sp, #0]
 8002a3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a40:	480e      	ldr	r0, [pc, #56]	@ (8002a7c <display_start_msg+0x64>)
 8002a42:	f000 faff 	bl	8003044 <ssd1306_WriteString>
	x += 15;
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	330f      	adds	r3, #15
 8002a4a:	71fb      	strb	r3, [r7, #7]
	y += 28;
 8002a4c:	79bb      	ldrb	r3, [r7, #6]
 8002a4e:	331c      	adds	r3, #28
 8002a50:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8002a52:	79ba      	ldrb	r2, [r7, #6]
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	4611      	mov	r1, r2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 fb19 	bl	8003090 <ssd1306_SetCursor>
	ssd1306_WriteString("clave", Font_16x26, White);
 8002a5e:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <display_start_msg+0x60>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	9200      	str	r2, [sp, #0]
 8002a64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a66:	4806      	ldr	r0, [pc, #24]	@ (8002a80 <display_start_msg+0x68>)
 8002a68:	f000 faec 	bl	8003044 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002a6c:	f000 f9de 	bl	8002e2c <ssd1306_UpdateScreen>
	return;
 8002a70:	bf00      	nop
}
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	08016954 	.word	0x08016954
 8002a7c:	08012d08 	.word	0x08012d08
 8002a80:	08012d10 	.word	0x08012d10

08002a84 <display_sequence_entry_msg>:

void display_sequence_entry_msg(uint8_t input_cont){
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af02      	add	r7, sp, #8
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
	/*Maneja el ingreso de digitos en el display*/
	char message[MAX_DIGITS + 1] = {0};
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	f107 0310 	add.w	r3, r7, #16
 8002a96:	2100      	movs	r1, #0
 8002a98:	460a      	mov	r2, r1
 8002a9a:	801a      	strh	r2, [r3, #0]
 8002a9c:	460a      	mov	r2, r1
 8002a9e:	709a      	strb	r2, [r3, #2]
	uint8_t x = 10;														//x e y definen coordenadas en pantalla
 8002aa0:	230a      	movs	r3, #10
 8002aa2:	75bb      	strb	r3, [r7, #22]
	uint8_t y = 26;
 8002aa4:	231a      	movs	r3, #26
 8002aa6:	757b      	strb	r3, [r7, #21]
	//Chequeo que counter no supere el numero maximo de digitos
	if(input_cont <= MAX_DIGITS){
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	2b06      	cmp	r3, #6
 8002aac:	d823      	bhi.n	8002af6 <display_sequence_entry_msg+0x72>
		//Armo el string a mostrar en el display
		for(uint8_t i = 0; i < input_cont; i++){
 8002aae:	2300      	movs	r3, #0
 8002ab0:	75fb      	strb	r3, [r7, #23]
 8002ab2:	e008      	b.n	8002ac6 <display_sequence_entry_msg+0x42>
			message[i] = '*';
 8002ab4:	7dfb      	ldrb	r3, [r7, #23]
 8002ab6:	3318      	adds	r3, #24
 8002ab8:	443b      	add	r3, r7
 8002aba:	222a      	movs	r2, #42	@ 0x2a
 8002abc:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t i = 0; i < input_cont; i++){
 8002ac0:	7dfb      	ldrb	r3, [r7, #23]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	75fb      	strb	r3, [r7, #23]
 8002ac6:	7dfa      	ldrb	r2, [r7, #23]
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d3f2      	bcc.n	8002ab4 <display_sequence_entry_msg+0x30>
		}
		//Muestro el string
		ssd1306_Fill(Black);
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f000 f994 	bl	8002dfc <ssd1306_Fill>
		ssd1306_SetCursor(x, y);
 8002ad4:	7d7a      	ldrb	r2, [r7, #21]
 8002ad6:	7dbb      	ldrb	r3, [r7, #22]
 8002ad8:	4611      	mov	r1, r2
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 fad8 	bl	8003090 <ssd1306_SetCursor>
		ssd1306_WriteString(message, Font_16x26, White);
 8002ae0:	4b07      	ldr	r3, [pc, #28]	@ (8002b00 <display_sequence_entry_msg+0x7c>)
 8002ae2:	f107 000c 	add.w	r0, r7, #12
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	9200      	str	r2, [sp, #0]
 8002aea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aec:	f000 faaa 	bl	8003044 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8002af0:	f000 f99c 	bl	8002e2c <ssd1306_UpdateScreen>
	}
	return;
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
}
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	08016954 	.word	0x08016954

08002b04 <display_timeout_msg>:


void display_timeout_msg(void){
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
	display_text("\n Timeout!!!", 2);
 8002b08:	2102      	movs	r1, #2
 8002b0a:	4802      	ldr	r0, [pc, #8]	@ (8002b14 <display_timeout_msg+0x10>)
 8002b0c:	f7ff feee 	bl	80028ec <display_text>
	return;
 8002b10:	bf00      	nop
}
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	08012d18 	.word	0x08012d18

08002b18 <display_incomplete_entry_msg>:

void display_incomplete_entry_msg(void){
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
	display_text("  Ingrese\n secuencia\n  valida", 2);
 8002b1c:	2102      	movs	r1, #2
 8002b1e:	4802      	ldr	r0, [pc, #8]	@ (8002b28 <display_incomplete_entry_msg+0x10>)
 8002b20:	f7ff fee4 	bl	80028ec <display_text>
	return;
 8002b24:	bf00      	nop
}
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	08012d28 	.word	0x08012d28

08002b2c <display_access_granted_msg>:

void display_access_granted_msg(void){
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
	display_text("  Acceso\n concedido", 2);
 8002b30:	2102      	movs	r1, #2
 8002b32:	4802      	ldr	r0, [pc, #8]	@ (8002b3c <display_access_granted_msg+0x10>)
 8002b34:	f7ff feda 	bl	80028ec <display_text>
	return;
 8002b38:	bf00      	nop
}
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	08012d48 	.word	0x08012d48

08002b40 <display_user_found_msg>:

void display_user_found_msg(void){
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
	display_text("  Usuario\n  hallado", 2);
 8002b44:	2102      	movs	r1, #2
 8002b46:	4802      	ldr	r0, [pc, #8]	@ (8002b50 <display_user_found_msg+0x10>)
 8002b48:	f7ff fed0 	bl	80028ec <display_text>
	return;
 8002b4c:	bf00      	nop
}
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	08012d5c 	.word	0x08012d5c

08002b54 <display_user_not_found_msg>:

void display_user_not_found_msg(void){
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
	display_text("  Usuario\n    no\n  existe", 2);
 8002b58:	2102      	movs	r1, #2
 8002b5a:	4802      	ldr	r0, [pc, #8]	@ (8002b64 <display_user_not_found_msg+0x10>)
 8002b5c:	f7ff fec6 	bl	80028ec <display_text>
	return;
 8002b60:	bf00      	nop
}
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	08012d70 	.word	0x08012d70

08002b68 <display_start_voice_recognition_msg>:

void display_start_voice_recognition_msg(void){
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
	display_text("  Comienza\n  captura\n  de voz", 2);
 8002b6c:	2102      	movs	r1, #2
 8002b6e:	4802      	ldr	r0, [pc, #8]	@ (8002b78 <display_start_voice_recognition_msg+0x10>)
 8002b70:	f7ff febc 	bl	80028ec <display_text>
	return;
 8002b74:	bf00      	nop
}
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	08012d8c 	.word	0x08012d8c

08002b7c <countdown_msg>:

void countdown_msg(void){
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af02      	add	r7, sp, #8
	/*Muestra mensaje de cuenta regresiva en pantalla*/
	uint8_t x = 50;
 8002b82:	2332      	movs	r3, #50	@ 0x32
 8002b84:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 26;
 8002b86:	231a      	movs	r3, #26
 8002b88:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	f000 f936 	bl	8002dfc <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8002b90:	79ba      	ldrb	r2, [r7, #6]
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	4611      	mov	r1, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 fa7a 	bl	8003090 <ssd1306_SetCursor>
	ssd1306_WriteString("3", Font_16x26, White);
 8002b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8002c18 <countdown_msg+0x9c>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	9200      	str	r2, [sp, #0]
 8002ba2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ba4:	481d      	ldr	r0, [pc, #116]	@ (8002c1c <countdown_msg+0xa0>)
 8002ba6:	f000 fa4d 	bl	8003044 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002baa:	f000 f93f 	bl	8002e2c <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 8002bae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bb2:	f00c fbdd 	bl	800f370 <vTaskDelay>
	ssd1306_Fill(Black);
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	f000 f920 	bl	8002dfc <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8002bbc:	79ba      	ldrb	r2, [r7, #6]
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 fa64 	bl	8003090 <ssd1306_SetCursor>
	ssd1306_WriteString("2", Font_16x26, White);
 8002bc8:	4b13      	ldr	r3, [pc, #76]	@ (8002c18 <countdown_msg+0x9c>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	9200      	str	r2, [sp, #0]
 8002bce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bd0:	4813      	ldr	r0, [pc, #76]	@ (8002c20 <countdown_msg+0xa4>)
 8002bd2:	f000 fa37 	bl	8003044 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002bd6:	f000 f929 	bl	8002e2c <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 8002bda:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bde:	f00c fbc7 	bl	800f370 <vTaskDelay>
	ssd1306_Fill(Black);
 8002be2:	2000      	movs	r0, #0
 8002be4:	f000 f90a 	bl	8002dfc <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8002be8:	79ba      	ldrb	r2, [r7, #6]
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	4611      	mov	r1, r2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fa4e 	bl	8003090 <ssd1306_SetCursor>
	ssd1306_WriteString("1", Font_16x26, White);
 8002bf4:	4b08      	ldr	r3, [pc, #32]	@ (8002c18 <countdown_msg+0x9c>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	9200      	str	r2, [sp, #0]
 8002bfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bfc:	4809      	ldr	r0, [pc, #36]	@ (8002c24 <countdown_msg+0xa8>)
 8002bfe:	f000 fa21 	bl	8003044 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002c02:	f000 f913 	bl	8002e2c <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 8002c06:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c0a:	f00c fbb1 	bl	800f370 <vTaskDelay>
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	08016954 	.word	0x08016954
 8002c1c:	08012dac 	.word	0x08012dac
 8002c20:	08012db0 	.word	0x08012db0
 8002c24:	08012db4 	.word	0x08012db4

08002c28 <display_capturing_voice_msg>:

void display_capturing_voice_msg(void){
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
	display_text("  Captura\n    ...", 2);
 8002c2c:	2102      	movs	r1, #2
 8002c2e:	4802      	ldr	r0, [pc, #8]	@ (8002c38 <display_capturing_voice_msg+0x10>)
 8002c30:	f7ff fe5c 	bl	80028ec <display_text>
	return;
 8002c34:	bf00      	nop
}
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	08012db8 	.word	0x08012db8

08002c3c <display_recognized_voice_msg>:

void display_recognized_voice_msg(void){
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
	display_text("    Voz\n reconocida", 2);
 8002c40:	2102      	movs	r1, #2
 8002c42:	4802      	ldr	r0, [pc, #8]	@ (8002c4c <display_recognized_voice_msg+0x10>)
 8002c44:	f7ff fe52 	bl	80028ec <display_text>
	return;
 8002c48:	bf00      	nop
}
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	08012dcc 	.word	0x08012dcc

08002c50 <display_not_recognized_voice_msg>:


void display_not_recognized_voice_msg(void){
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
	display_text("   Voz no\n reconocida", 2);
 8002c54:	2102      	movs	r1, #2
 8002c56:	4802      	ldr	r0, [pc, #8]	@ (8002c60 <display_not_recognized_voice_msg+0x10>)
 8002c58:	f7ff fe48 	bl	80028ec <display_text>
	return;
 8002c5c:	bf00      	nop
}
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	08012de0 	.word	0x08012de0

08002c64 <display_processing_data_msg>:

void display_processing_data_msg(void){
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
	display_text("  Aguarde\n    ...", 2);
 8002c68:	2102      	movs	r1, #2
 8002c6a:	4802      	ldr	r0, [pc, #8]	@ (8002c74 <display_processing_data_msg+0x10>)
 8002c6c:	f7ff fe3e 	bl	80028ec <display_text>
	return;
 8002c70:	bf00      	nop
}
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	08012df8 	.word	0x08012df8

08002c78 <display_missing_database_msg>:

void display_missing_database_msg(void){
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
	display_text("  Database\n  faltante", 2);
 8002c7c:	2102      	movs	r1, #2
 8002c7e:	4802      	ldr	r0, [pc, #8]	@ (8002c88 <display_missing_database_msg+0x10>)
 8002c80:	f7ff fe34 	bl	80028ec <display_text>
	return;
 8002c84:	bf00      	nop
}
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	08012e0c 	.word	0x08012e0c

08002c8c <display_missing_template_msg>:

void display_missing_template_msg(void){
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
	display_text("  Template\n  faltante", 2);
 8002c90:	2102      	movs	r1, #2
 8002c92:	4802      	ldr	r0, [pc, #8]	@ (8002c9c <display_missing_template_msg+0x10>)
 8002c94:	f7ff fe2a 	bl	80028ec <display_text>
	return;
 8002c98:	bf00      	nop
}
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	08012e24 	.word	0x08012e24

08002ca0 <display_template_saved_msg>:

void display_template_saved_msg(void){
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
	display_text("  Template\n  guardado", 2);
 8002ca4:	2102      	movs	r1, #2
 8002ca6:	4802      	ldr	r0, [pc, #8]	@ (8002cb0 <display_template_saved_msg+0x10>)
 8002ca8:	f7ff fe20 	bl	80028ec <display_text>
	return;
 8002cac:	bf00      	nop
}
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	08012e3c 	.word	0x08012e3c

08002cb4 <ssd1306_Reset>:
#include "main.h"
#include "cmsis_os.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af04      	add	r7, sp, #16
 8002cca:	4603      	mov	r3, r0
 8002ccc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002cce:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd2:	9302      	str	r3, [sp, #8]
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	9301      	str	r3, [sp, #4]
 8002cd8:	1dfb      	adds	r3, r7, #7
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	2301      	movs	r3, #1
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2178      	movs	r1, #120	@ 0x78
 8002ce2:	4803      	ldr	r0, [pc, #12]	@ (8002cf0 <ssd1306_WriteCommand+0x2c>)
 8002ce4:	f002 fcdc 	bl	80056a0 <HAL_I2C_Mem_Write>
}
 8002ce8:	bf00      	nop
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	200003b4 	.word	0x200003b4

08002cf4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af04      	add	r7, sp, #16
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	f04f 32ff 	mov.w	r2, #4294967295
 8002d06:	9202      	str	r2, [sp, #8]
 8002d08:	9301      	str	r3, [sp, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	2301      	movs	r3, #1
 8002d10:	2240      	movs	r2, #64	@ 0x40
 8002d12:	2178      	movs	r1, #120	@ 0x78
 8002d14:	4803      	ldr	r0, [pc, #12]	@ (8002d24 <ssd1306_WriteData+0x30>)
 8002d16:	f002 fcc3 	bl	80056a0 <HAL_I2C_Mem_Write>
}
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	200003b4 	.word	0x200003b4

08002d28 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002d2c:	f7ff ffc2 	bl	8002cb4 <ssd1306_Reset>

    // Wait for the screen to boot
    vTaskDelay(100 / portTICK_RATE_MS);
 8002d30:	2064      	movs	r0, #100	@ 0x64
 8002d32:	f00c fb1d 	bl	800f370 <vTaskDelay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002d36:	2000      	movs	r0, #0
 8002d38:	f000 f9d6 	bl	80030e8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002d3c:	2020      	movs	r0, #32
 8002d3e:	f7ff ffc1 	bl	8002cc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002d42:	2000      	movs	r0, #0
 8002d44:	f7ff ffbe 	bl	8002cc4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002d48:	20b0      	movs	r0, #176	@ 0xb0
 8002d4a:	f7ff ffbb 	bl	8002cc4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002d4e:	20c8      	movs	r0, #200	@ 0xc8
 8002d50:	f7ff ffb8 	bl	8002cc4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002d54:	2000      	movs	r0, #0
 8002d56:	f7ff ffb5 	bl	8002cc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002d5a:	2010      	movs	r0, #16
 8002d5c:	f7ff ffb2 	bl	8002cc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002d60:	2040      	movs	r0, #64	@ 0x40
 8002d62:	f7ff ffaf 	bl	8002cc4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002d66:	20ff      	movs	r0, #255	@ 0xff
 8002d68:	f000 f9aa 	bl	80030c0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002d6c:	20a1      	movs	r0, #161	@ 0xa1
 8002d6e:	f7ff ffa9 	bl	8002cc4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002d72:	20a6      	movs	r0, #166	@ 0xa6
 8002d74:	f7ff ffa6 	bl	8002cc4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002d78:	20a8      	movs	r0, #168	@ 0xa8
 8002d7a:	f7ff ffa3 	bl	8002cc4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002d7e:	203f      	movs	r0, #63	@ 0x3f
 8002d80:	f7ff ffa0 	bl	8002cc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002d84:	20a4      	movs	r0, #164	@ 0xa4
 8002d86:	f7ff ff9d 	bl	8002cc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002d8a:	20d3      	movs	r0, #211	@ 0xd3
 8002d8c:	f7ff ff9a 	bl	8002cc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002d90:	2000      	movs	r0, #0
 8002d92:	f7ff ff97 	bl	8002cc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002d96:	20d5      	movs	r0, #213	@ 0xd5
 8002d98:	f7ff ff94 	bl	8002cc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002d9c:	20f0      	movs	r0, #240	@ 0xf0
 8002d9e:	f7ff ff91 	bl	8002cc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002da2:	20d9      	movs	r0, #217	@ 0xd9
 8002da4:	f7ff ff8e 	bl	8002cc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002da8:	2022      	movs	r0, #34	@ 0x22
 8002daa:	f7ff ff8b 	bl	8002cc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002dae:	20da      	movs	r0, #218	@ 0xda
 8002db0:	f7ff ff88 	bl	8002cc4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002db4:	2012      	movs	r0, #18
 8002db6:	f7ff ff85 	bl	8002cc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002dba:	20db      	movs	r0, #219	@ 0xdb
 8002dbc:	f7ff ff82 	bl	8002cc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002dc0:	2020      	movs	r0, #32
 8002dc2:	f7ff ff7f 	bl	8002cc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002dc6:	208d      	movs	r0, #141	@ 0x8d
 8002dc8:	f7ff ff7c 	bl	8002cc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002dcc:	2014      	movs	r0, #20
 8002dce:	f7ff ff79 	bl	8002cc4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002dd2:	2001      	movs	r0, #1
 8002dd4:	f000 f988 	bl	80030e8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f000 f80f 	bl	8002dfc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002dde:	f000 f825 	bl	8002e2c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002de2:	4b05      	ldr	r3, [pc, #20]	@ (8002df8 <ssd1306_Init+0xd0>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002de8:	4b03      	ldr	r3, [pc, #12]	@ (8002df8 <ssd1306_Init+0xd0>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002dee:	4b02      	ldr	r3, [pc, #8]	@ (8002df8 <ssd1306_Init+0xd0>)
 8002df0:	2201      	movs	r2, #1
 8002df2:	711a      	strb	r2, [r3, #4]
}
 8002df4:	bf00      	nop
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20000974 	.word	0x20000974

08002dfc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <ssd1306_Fill+0x14>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e000      	b.n	8002e12 <ssd1306_Fill+0x16>
 8002e10:	23ff      	movs	r3, #255	@ 0xff
 8002e12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e16:	4619      	mov	r1, r3
 8002e18:	4803      	ldr	r0, [pc, #12]	@ (8002e28 <ssd1306_Fill+0x2c>)
 8002e1a:	f00f fa87 	bl	801232c <memset>
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000574 	.word	0x20000574

08002e2c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002e32:	2300      	movs	r3, #0
 8002e34:	71fb      	strb	r3, [r7, #7]
 8002e36:	e016      	b.n	8002e66 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	3b50      	subs	r3, #80	@ 0x50
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff ff40 	bl	8002cc4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7ff ff3d 	bl	8002cc4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002e4a:	2010      	movs	r0, #16
 8002e4c:	f7ff ff3a 	bl	8002cc4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	01db      	lsls	r3, r3, #7
 8002e54:	4a08      	ldr	r2, [pc, #32]	@ (8002e78 <ssd1306_UpdateScreen+0x4c>)
 8002e56:	4413      	add	r3, r2
 8002e58:	2180      	movs	r1, #128	@ 0x80
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff ff4a 	bl	8002cf4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	3301      	adds	r3, #1
 8002e64:	71fb      	strb	r3, [r7, #7]
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	2b07      	cmp	r3, #7
 8002e6a:	d9e5      	bls.n	8002e38 <ssd1306_UpdateScreen+0xc>
    }
}
 8002e6c:	bf00      	nop
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000574 	.word	0x20000574

08002e7c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
 8002e86:	460b      	mov	r3, r1
 8002e88:	71bb      	strb	r3, [r7, #6]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	db3d      	blt.n	8002f12 <ssd1306_DrawPixel+0x96>
 8002e96:	79bb      	ldrb	r3, [r7, #6]
 8002e98:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e9a:	d83a      	bhi.n	8002f12 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002e9c:	797b      	ldrb	r3, [r7, #5]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d11a      	bne.n	8002ed8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002ea2:	79fa      	ldrb	r2, [r7, #7]
 8002ea4:	79bb      	ldrb	r3, [r7, #6]
 8002ea6:	08db      	lsrs	r3, r3, #3
 8002ea8:	b2d8      	uxtb	r0, r3
 8002eaa:	4603      	mov	r3, r0
 8002eac:	01db      	lsls	r3, r3, #7
 8002eae:	4413      	add	r3, r2
 8002eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8002f20 <ssd1306_DrawPixel+0xa4>)
 8002eb2:	5cd3      	ldrb	r3, [r2, r3]
 8002eb4:	b25a      	sxtb	r2, r3
 8002eb6:	79bb      	ldrb	r3, [r7, #6]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec2:	b25b      	sxtb	r3, r3
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	b259      	sxtb	r1, r3
 8002ec8:	79fa      	ldrb	r2, [r7, #7]
 8002eca:	4603      	mov	r3, r0
 8002ecc:	01db      	lsls	r3, r3, #7
 8002ece:	4413      	add	r3, r2
 8002ed0:	b2c9      	uxtb	r1, r1
 8002ed2:	4a13      	ldr	r2, [pc, #76]	@ (8002f20 <ssd1306_DrawPixel+0xa4>)
 8002ed4:	54d1      	strb	r1, [r2, r3]
 8002ed6:	e01d      	b.n	8002f14 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002ed8:	79fa      	ldrb	r2, [r7, #7]
 8002eda:	79bb      	ldrb	r3, [r7, #6]
 8002edc:	08db      	lsrs	r3, r3, #3
 8002ede:	b2d8      	uxtb	r0, r3
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	01db      	lsls	r3, r3, #7
 8002ee4:	4413      	add	r3, r2
 8002ee6:	4a0e      	ldr	r2, [pc, #56]	@ (8002f20 <ssd1306_DrawPixel+0xa4>)
 8002ee8:	5cd3      	ldrb	r3, [r2, r3]
 8002eea:	b25a      	sxtb	r2, r3
 8002eec:	79bb      	ldrb	r3, [r7, #6]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef8:	b25b      	sxtb	r3, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	b25b      	sxtb	r3, r3
 8002efe:	4013      	ands	r3, r2
 8002f00:	b259      	sxtb	r1, r3
 8002f02:	79fa      	ldrb	r2, [r7, #7]
 8002f04:	4603      	mov	r3, r0
 8002f06:	01db      	lsls	r3, r3, #7
 8002f08:	4413      	add	r3, r2
 8002f0a:	b2c9      	uxtb	r1, r1
 8002f0c:	4a04      	ldr	r2, [pc, #16]	@ (8002f20 <ssd1306_DrawPixel+0xa4>)
 8002f0e:	54d1      	strb	r1, [r2, r3]
 8002f10:	e000      	b.n	8002f14 <ssd1306_DrawPixel+0x98>
        return;
 8002f12:	bf00      	nop
    }
}
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20000574 	.word	0x20000574

08002f24 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002f24:	b590      	push	{r4, r7, lr}
 8002f26:	b089      	sub	sp, #36	@ 0x24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	4638      	mov	r0, r7
 8002f2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002f32:	4623      	mov	r3, r4
 8002f34:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	2b1f      	cmp	r3, #31
 8002f3a:	d902      	bls.n	8002f42 <ssd1306_WriteChar+0x1e>
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	2b7e      	cmp	r3, #126	@ 0x7e
 8002f40:	d901      	bls.n	8002f46 <ssd1306_WriteChar+0x22>
        return 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	e077      	b.n	8003036 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002f46:	4b3e      	ldr	r3, [pc, #248]	@ (8003040 <ssd1306_WriteChar+0x11c>)
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	783b      	ldrb	r3, [r7, #0]
 8002f4e:	4413      	add	r3, r2
 8002f50:	2b80      	cmp	r3, #128	@ 0x80
 8002f52:	dc06      	bgt.n	8002f62 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002f54:	4b3a      	ldr	r3, [pc, #232]	@ (8003040 <ssd1306_WriteChar+0x11c>)
 8002f56:	885b      	ldrh	r3, [r3, #2]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	787b      	ldrb	r3, [r7, #1]
 8002f5c:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002f5e:	2b40      	cmp	r3, #64	@ 0x40
 8002f60:	dd01      	ble.n	8002f66 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	e067      	b.n	8003036 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	e04e      	b.n	800300a <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	3b20      	subs	r3, #32
 8002f72:	7879      	ldrb	r1, [r7, #1]
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	4619      	mov	r1, r3
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	440b      	add	r3, r1
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4413      	add	r3, r2
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8002f86:	2300      	movs	r3, #0
 8002f88:	61bb      	str	r3, [r7, #24]
 8002f8a:	e036      	b.n	8002ffa <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d013      	beq.n	8002fc4 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002f9c:	4b28      	ldr	r3, [pc, #160]	@ (8003040 <ssd1306_WriteChar+0x11c>)
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	b2d8      	uxtb	r0, r3
 8002faa:	4b25      	ldr	r3, [pc, #148]	@ (8003040 <ssd1306_WriteChar+0x11c>)
 8002fac:	885b      	ldrh	r3, [r3, #2]
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	f7ff ff5d 	bl	8002e7c <ssd1306_DrawPixel>
 8002fc2:	e017      	b.n	8002ff4 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002fc4:	4b1e      	ldr	r3, [pc, #120]	@ (8003040 <ssd1306_WriteChar+0x11c>)
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	4413      	add	r3, r2
 8002fd0:	b2d8      	uxtb	r0, r3
 8002fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8003040 <ssd1306_WriteChar+0x11c>)
 8002fd4:	885b      	ldrh	r3, [r3, #2]
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	4413      	add	r3, r2
 8002fde:	b2d9      	uxtb	r1, r3
 8002fe0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	f7ff ff44 	bl	8002e7c <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	783b      	ldrb	r3, [r7, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	4293      	cmp	r3, r2
 8003002:	d3c3      	bcc.n	8002f8c <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	3301      	adds	r3, #1
 8003008:	61fb      	str	r3, [r7, #28]
 800300a:	787b      	ldrb	r3, [r7, #1]
 800300c:	461a      	mov	r2, r3
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	4293      	cmp	r3, r2
 8003012:	d3ab      	bcc.n	8002f6c <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8003014:	4b0a      	ldr	r3, [pc, #40]	@ (8003040 <ssd1306_WriteChar+0x11c>)
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	2a00      	cmp	r2, #0
 800301c:	d005      	beq.n	800302a <ssd1306_WriteChar+0x106>
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	7bfa      	ldrb	r2, [r7, #15]
 8003022:	3a20      	subs	r2, #32
 8003024:	440a      	add	r2, r1
 8003026:	7812      	ldrb	r2, [r2, #0]
 8003028:	e000      	b.n	800302c <ssd1306_WriteChar+0x108>
 800302a:	783a      	ldrb	r2, [r7, #0]
 800302c:	4413      	add	r3, r2
 800302e:	b29a      	uxth	r2, r3
 8003030:	4b03      	ldr	r3, [pc, #12]	@ (8003040 <ssd1306_WriteChar+0x11c>)
 8003032:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003034:	7bfb      	ldrb	r3, [r7, #15]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3724      	adds	r7, #36	@ 0x24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd90      	pop	{r4, r7, pc}
 800303e:	bf00      	nop
 8003040:	20000974 	.word	0x20000974

08003044 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af02      	add	r7, sp, #8
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	4638      	mov	r0, r7
 800304e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8003052:	e013      	b.n	800307c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	7818      	ldrb	r0, [r3, #0]
 8003058:	7e3b      	ldrb	r3, [r7, #24]
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	463b      	mov	r3, r7
 800305e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003060:	f7ff ff60 	bl	8002f24 <ssd1306_WriteChar>
 8003064:	4603      	mov	r3, r0
 8003066:	461a      	mov	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d002      	beq.n	8003076 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	e008      	b.n	8003088 <ssd1306_WriteString+0x44>
        }
        str++;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	3301      	adds	r3, #1
 800307a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e7      	bne.n	8003054 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	781b      	ldrb	r3, [r3, #0]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	460a      	mov	r2, r1
 800309a:	71fb      	strb	r3, [r7, #7]
 800309c:	4613      	mov	r3, r2
 800309e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	4b05      	ldr	r3, [pc, #20]	@ (80030bc <ssd1306_SetCursor+0x2c>)
 80030a6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80030a8:	79bb      	ldrb	r3, [r7, #6]
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	4b03      	ldr	r3, [pc, #12]	@ (80030bc <ssd1306_SetCursor+0x2c>)
 80030ae:	805a      	strh	r2, [r3, #2]
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	20000974 	.word	0x20000974

080030c0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80030ca:	2381      	movs	r3, #129	@ 0x81
 80030cc:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fdf7 	bl	8002cc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff fdf3 	bl	8002cc4 <ssd1306_WriteCommand>
}
 80030de:	bf00      	nop
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80030f8:	23af      	movs	r3, #175	@ 0xaf
 80030fa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80030fc:	4b08      	ldr	r3, [pc, #32]	@ (8003120 <ssd1306_SetDisplayOn+0x38>)
 80030fe:	2201      	movs	r2, #1
 8003100:	715a      	strb	r2, [r3, #5]
 8003102:	e004      	b.n	800310e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003104:	23ae      	movs	r3, #174	@ 0xae
 8003106:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003108:	4b05      	ldr	r3, [pc, #20]	@ (8003120 <ssd1306_SetDisplayOn+0x38>)
 800310a:	2200      	movs	r2, #0
 800310c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff fdd7 	bl	8002cc4 <ssd1306_WriteCommand>
}
 8003116:	bf00      	nop
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20000974 	.word	0x20000974

08003124 <handle_keypad_input>:
	TickType_t start_time;
	char buffer[SEQUENCE_LENGTH + 1];
}keypad_context_t;


indicatorMessage handle_keypad_input(char input, char *buffer, uint8_t *send_flag){
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	73fb      	strb	r3, [r7, #15]
	static keypad_context_t context = { .current_state = ESPERANDO_DIGITO_1,
										.current_index = 0,
										.start_time = 0,					};
	indicatorMessage current_message = PANTALLA_IDLE;
 8003132:	2300      	movs	r3, #0
 8003134:	75fb      	strb	r3, [r7, #23]
	switch(context.current_state){
 8003136:	4b61      	ldr	r3, [pc, #388]	@ (80032bc <handle_keypad_input+0x198>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b07      	cmp	r3, #7
 800313c:	f000 80a1 	beq.w	8003282 <handle_keypad_input+0x15e>
 8003140:	2b07      	cmp	r3, #7
 8003142:	f300 80a8 	bgt.w	8003296 <handle_keypad_input+0x172>
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <handle_keypad_input+0x36>
 800314a:	2b00      	cmp	r3, #0
 800314c:	f2c0 80a3 	blt.w	8003296 <handle_keypad_input+0x172>
 8003150:	3b01      	subs	r3, #1
 8003152:	2b05      	cmp	r3, #5
 8003154:	f200 809f 	bhi.w	8003296 <handle_keypad_input+0x172>
 8003158:	e01c      	b.n	8003194 <handle_keypad_input+0x70>
	case ESPERANDO_DIGITO_1:
		if(input != 0 && input != BORRAR_DIGITO && input != ENTER){
 800315a:	7bfb      	ldrb	r3, [r7, #15]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d016      	beq.n	800318e <handle_keypad_input+0x6a>
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	2b23      	cmp	r3, #35	@ 0x23
 8003164:	d013      	beq.n	800318e <handle_keypad_input+0x6a>
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	2b2a      	cmp	r3, #42	@ 0x2a
 800316a:	d010      	beq.n	800318e <handle_keypad_input+0x6a>
			buffer[0] = input;													//Guardo digito en el buffer
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	7bfa      	ldrb	r2, [r7, #15]
 8003170:	701a      	strb	r2, [r3, #0]
			context.current_index = 1;
 8003172:	4b52      	ldr	r3, [pc, #328]	@ (80032bc <handle_keypad_input+0x198>)
 8003174:	2201      	movs	r2, #1
 8003176:	705a      	strb	r2, [r3, #1]
			context.start_time = xTaskGetTickCount();							//Reinicio el timeout
 8003178:	f00c fa3e 	bl	800f5f8 <xTaskGetTickCount>
 800317c:	4603      	mov	r3, r0
 800317e:	4a4f      	ldr	r2, [pc, #316]	@ (80032bc <handle_keypad_input+0x198>)
 8003180:	6053      	str	r3, [r2, #4]
			context.current_state = ESPERANDO_DIGITO_2;							//Avanzo al siguiente estado
 8003182:	4b4e      	ldr	r3, [pc, #312]	@ (80032bc <handle_keypad_input+0x198>)
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]
			current_message = PANTALLA_INGRESO_KEYPAD;
 8003188:	2302      	movs	r3, #2
 800318a:	75fb      	strb	r3, [r7, #23]
		}
		else{
			current_message = PANTALLA_DE_INICIO;
		}
		break;
 800318c:	e091      	b.n	80032b2 <handle_keypad_input+0x18e>
			current_message = PANTALLA_DE_INICIO;
 800318e:	2301      	movs	r3, #1
 8003190:	75fb      	strb	r3, [r7, #23]
		break;
 8003192:	e08e      	b.n	80032b2 <handle_keypad_input+0x18e>
	case ESPERANDO_DIGITO_3:
	case ESPERANDO_DIGITO_4:
	case ESPERANDO_DIGITO_5:
	case ESPERANDO_DIGITO_6:
	case ESPERANDO_CONFIRMACION:
		if((xTaskGetTickCount() - context.start_time) < pdMS_TO_TICKS(KEYPAD_TIMEOUT)){
 8003194:	f00c fa30 	bl	800f5f8 <xTaskGetTickCount>
 8003198:	4602      	mov	r2, r0
 800319a:	4b48      	ldr	r3, [pc, #288]	@ (80032bc <handle_keypad_input+0x198>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	f241 3287 	movw	r2, #4999	@ 0x1387
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d866      	bhi.n	8003276 <handle_keypad_input+0x152>
			if(input != 0){
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d060      	beq.n	8003270 <handle_keypad_input+0x14c>
				if(input == BORRAR_DIGITO){
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	2b23      	cmp	r3, #35	@ 0x23
 80031b2:	d124      	bne.n	80031fe <handle_keypad_input+0xda>
					if(context.current_index > 0){
 80031b4:	4b41      	ldr	r3, [pc, #260]	@ (80032bc <handle_keypad_input+0x198>)
 80031b6:	785b      	ldrb	r3, [r3, #1]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d079      	beq.n	80032b0 <handle_keypad_input+0x18c>
						context.current_index--;
 80031bc:	4b3f      	ldr	r3, [pc, #252]	@ (80032bc <handle_keypad_input+0x198>)
 80031be:	785b      	ldrb	r3, [r3, #1]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	4b3d      	ldr	r3, [pc, #244]	@ (80032bc <handle_keypad_input+0x198>)
 80031c6:	705a      	strb	r2, [r3, #1]
						buffer[context.current_index] = '\0';					//Borro el contenido previo
 80031c8:	4b3c      	ldr	r3, [pc, #240]	@ (80032bc <handle_keypad_input+0x198>)
 80031ca:	785b      	ldrb	r3, [r3, #1]
 80031cc:	461a      	mov	r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	4413      	add	r3, r2
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
						context.start_time = xTaskGetTickCount();				//Reinicio el timeout
 80031d6:	f00c fa0f 	bl	800f5f8 <xTaskGetTickCount>
 80031da:	4603      	mov	r3, r0
 80031dc:	4a37      	ldr	r2, [pc, #220]	@ (80032bc <handle_keypad_input+0x198>)
 80031de:	6053      	str	r3, [r2, #4]
						current_message = PANTALLA_BORRAR_KEYPAD;
 80031e0:	2303      	movs	r3, #3
 80031e2:	75fb      	strb	r3, [r7, #23]
						context.current_state = (context.current_state > ESPERANDO_DIGITO_1) ? context.current_state - 1 : ESPERANDO_DIGITO_1;
 80031e4:	4b35      	ldr	r3, [pc, #212]	@ (80032bc <handle_keypad_input+0x198>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d004      	beq.n	80031f6 <handle_keypad_input+0xd2>
 80031ec:	4b33      	ldr	r3, [pc, #204]	@ (80032bc <handle_keypad_input+0x198>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	e000      	b.n	80031f8 <handle_keypad_input+0xd4>
 80031f6:	2300      	movs	r3, #0
 80031f8:	4a30      	ldr	r2, [pc, #192]	@ (80032bc <handle_keypad_input+0x198>)
 80031fa:	7013      	strb	r3, [r2, #0]
		}
		else{
			context.current_state = TIMEOUT;
			current_message = PANTALLA_TIMEOUT;
		}
		break;
 80031fc:	e058      	b.n	80032b0 <handle_keypad_input+0x18c>
				else if(input == ENTER){
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	2b2a      	cmp	r3, #42	@ 0x2a
 8003202:	d10d      	bne.n	8003220 <handle_keypad_input+0xfc>
					if(context.current_state == ESPERANDO_CONFIRMACION){
 8003204:	4b2d      	ldr	r3, [pc, #180]	@ (80032bc <handle_keypad_input+0x198>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b06      	cmp	r3, #6
 800320a:	d103      	bne.n	8003214 <handle_keypad_input+0xf0>
						context.current_state = BUSQUEDA_DE_USUARIO;
 800320c:	4b2b      	ldr	r3, [pc, #172]	@ (80032bc <handle_keypad_input+0x198>)
 800320e:	2207      	movs	r2, #7
 8003210:	701a      	strb	r2, [r3, #0]
		break;
 8003212:	e04d      	b.n	80032b0 <handle_keypad_input+0x18c>
						context.current_state = SECUENCIA_INCOMPLETA;
 8003214:	4b29      	ldr	r3, [pc, #164]	@ (80032bc <handle_keypad_input+0x198>)
 8003216:	2208      	movs	r2, #8
 8003218:	701a      	strb	r2, [r3, #0]
						current_message = PANTALLA_SECUENCIA_INCOMPLETA;
 800321a:	230b      	movs	r3, #11
 800321c:	75fb      	strb	r3, [r7, #23]
		break;
 800321e:	e047      	b.n	80032b0 <handle_keypad_input+0x18c>
					if(context.current_index < SEQUENCE_LENGTH){
 8003220:	4b26      	ldr	r3, [pc, #152]	@ (80032bc <handle_keypad_input+0x198>)
 8003222:	785b      	ldrb	r3, [r3, #1]
 8003224:	2b05      	cmp	r3, #5
 8003226:	d843      	bhi.n	80032b0 <handle_keypad_input+0x18c>
						buffer[context.current_index++] = input;				//Agrego el digito al buffer
 8003228:	4b24      	ldr	r3, [pc, #144]	@ (80032bc <handle_keypad_input+0x198>)
 800322a:	785b      	ldrb	r3, [r3, #1]
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	b2d1      	uxtb	r1, r2
 8003230:	4a22      	ldr	r2, [pc, #136]	@ (80032bc <handle_keypad_input+0x198>)
 8003232:	7051      	strb	r1, [r2, #1]
 8003234:	461a      	mov	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	4413      	add	r3, r2
 800323a:	7bfa      	ldrb	r2, [r7, #15]
 800323c:	701a      	strb	r2, [r3, #0]
						buffer[context.current_index] = '\0';					//Aseguro que el buffer siempre termine en caracter nulo
 800323e:	4b1f      	ldr	r3, [pc, #124]	@ (80032bc <handle_keypad_input+0x198>)
 8003240:	785b      	ldrb	r3, [r3, #1]
 8003242:	461a      	mov	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4413      	add	r3, r2
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]
						context.start_time = xTaskGetTickCount();				//Reinicio el timeout
 800324c:	f00c f9d4 	bl	800f5f8 <xTaskGetTickCount>
 8003250:	4603      	mov	r3, r0
 8003252:	4a1a      	ldr	r2, [pc, #104]	@ (80032bc <handle_keypad_input+0x198>)
 8003254:	6053      	str	r3, [r2, #4]
						current_message = PANTALLA_INGRESO_KEYPAD;
 8003256:	2302      	movs	r3, #2
 8003258:	75fb      	strb	r3, [r7, #23]
						if(context.current_state != ESPERANDO_CONFIRMACION){
 800325a:	4b18      	ldr	r3, [pc, #96]	@ (80032bc <handle_keypad_input+0x198>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b06      	cmp	r3, #6
 8003260:	d026      	beq.n	80032b0 <handle_keypad_input+0x18c>
							context.current_state++;
 8003262:	4b16      	ldr	r3, [pc, #88]	@ (80032bc <handle_keypad_input+0x198>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	3301      	adds	r3, #1
 8003268:	b2da      	uxtb	r2, r3
 800326a:	4b14      	ldr	r3, [pc, #80]	@ (80032bc <handle_keypad_input+0x198>)
 800326c:	701a      	strb	r2, [r3, #0]
		break;
 800326e:	e01f      	b.n	80032b0 <handle_keypad_input+0x18c>
				current_message = PANTALLA_IDLE;
 8003270:	2300      	movs	r3, #0
 8003272:	75fb      	strb	r3, [r7, #23]
		break;
 8003274:	e01c      	b.n	80032b0 <handle_keypad_input+0x18c>
			context.current_state = TIMEOUT;
 8003276:	4b11      	ldr	r3, [pc, #68]	@ (80032bc <handle_keypad_input+0x198>)
 8003278:	2209      	movs	r2, #9
 800327a:	701a      	strb	r2, [r3, #0]
			current_message = PANTALLA_TIMEOUT;
 800327c:	230a      	movs	r3, #10
 800327e:	75fb      	strb	r3, [r7, #23]
		break;
 8003280:	e016      	b.n	80032b0 <handle_keypad_input+0x18c>
	case BUSQUEDA_DE_USUARIO:
		*send_flag = 1;															//Habilito flag para enviar el string
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	701a      	strb	r2, [r3, #0]
		context.current_state = ESPERANDO_DIGITO_1;
 8003288:	4b0c      	ldr	r3, [pc, #48]	@ (80032bc <handle_keypad_input+0x198>)
 800328a:	2200      	movs	r2, #0
 800328c:	701a      	strb	r2, [r3, #0]
		context.current_index = 0;
 800328e:	4b0b      	ldr	r3, [pc, #44]	@ (80032bc <handle_keypad_input+0x198>)
 8003290:	2200      	movs	r2, #0
 8003292:	705a      	strb	r2, [r3, #1]
		//current_message = PANTALLA_DE_INICIO;									//Luego del procesamiento se vuelve al estado inicial
		break;
 8003294:	e00d      	b.n	80032b2 <handle_keypad_input+0x18e>
	case SECUENCIA_INCOMPLETA:
	case TIMEOUT:
	default:
		clear_buffer(buffer, SEQUENCE_LENGTH + 1);
 8003296:	2107      	movs	r1, #7
 8003298:	68b8      	ldr	r0, [r7, #8]
 800329a:	f000 faef 	bl	800387c <clear_buffer>
		context.current_state = ESPERANDO_DIGITO_1;								//Vuelvo al estado inicial
 800329e:	4b07      	ldr	r3, [pc, #28]	@ (80032bc <handle_keypad_input+0x198>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	701a      	strb	r2, [r3, #0]
		context.current_index = 0;
 80032a4:	4b05      	ldr	r3, [pc, #20]	@ (80032bc <handle_keypad_input+0x198>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	705a      	strb	r2, [r3, #1]
		current_message = PANTALLA_DE_INICIO;
 80032aa:	2301      	movs	r3, #1
 80032ac:	75fb      	strb	r3, [r7, #23]
		break;
 80032ae:	e000      	b.n	80032b2 <handle_keypad_input+0x18e>
		break;
 80032b0:	bf00      	nop
	}
	return current_message;
 80032b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	2000097c 	.word	0x2000097c

080032c0 <set_row>:
	      	  	  	  	  		  	  	  	  {'4', '5', '6', 'B'},
											  {'7', '8', '9', 'C'},
											  {'*', '0', '#', 'D'} };

/*================[Private functions]====================*/
static void set_row(row_t row){
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIO_ROW, row, GPIO_PIN_SET);
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	2201      	movs	r2, #1
 80032ce:	4619      	mov	r1, r3
 80032d0:	4803      	ldr	r0, [pc, #12]	@ (80032e0 <set_row+0x20>)
 80032d2:	f002 f887 	bl	80053e4 <HAL_GPIO_WritePin>
	return;
 80032d6:	bf00      	nop
}
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40020800 	.word	0x40020800

080032e4 <reset_row>:

static void reset_row(row_t row){
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIO_ROW, row, GPIO_PIN_RESET);
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	2200      	movs	r2, #0
 80032f2:	4619      	mov	r1, r3
 80032f4:	4803      	ldr	r0, [pc, #12]	@ (8003304 <reset_row+0x20>)
 80032f6:	f002 f875 	bl	80053e4 <HAL_GPIO_WritePin>
	return;
 80032fa:	bf00      	nop
}
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40020800 	.word	0x40020800

08003308 <read_col>:

static GPIO_PinState read_col(col_t col){
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	71fb      	strb	r3, [r7, #7]
	return HAL_GPIO_ReadPin(GPIO_COL, col);
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	b29b      	uxth	r3, r3
 8003316:	4619      	mov	r1, r3
 8003318:	4803      	ldr	r0, [pc, #12]	@ (8003328 <read_col+0x20>)
 800331a:	f002 f84b 	bl	80053b4 <HAL_GPIO_ReadPin>
 800331e:	4603      	mov	r3, r0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40020800 	.word	0x40020800

0800332c <read_keypad>:

/*================[Public functions]=====================*/
char read_keypad(void){
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
	/* La funcion barre las filas del keypad, activando una por una individualmente y leyendo la columna asociada,
	 * para así poder triangular la tecla presionada. Se realiza doble confirmacion de tecla presionada.
	 */
	char key_pressed;
	for(uint8_t i = 0; i < ROW_LENGTH; i++){
 8003332:	2300      	movs	r3, #0
 8003334:	71fb      	strb	r3, [r7, #7]
 8003336:	e04c      	b.n	80033d2 <read_keypad+0xa6>
		set_row(keypad_rows[i]);
 8003338:	79fb      	ldrb	r3, [r7, #7]
 800333a:	4a2a      	ldr	r2, [pc, #168]	@ (80033e4 <read_keypad+0xb8>)
 800333c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff ffbd 	bl	80032c0 <set_row>
		for(uint8_t j = 0; j < COL_LENGTH; j++){
 8003346:	2300      	movs	r3, #0
 8003348:	71bb      	strb	r3, [r7, #6]
 800334a:	e035      	b.n	80033b8 <read_keypad+0x8c>
			if(read_col(keypad_cols[j]) == GPIO_PIN_SET){					//Verifico si alguna columna esta en alto (tecla presionada)
 800334c:	79bb      	ldrb	r3, [r7, #6]
 800334e:	4a26      	ldr	r2, [pc, #152]	@ (80033e8 <read_keypad+0xbc>)
 8003350:	5cd3      	ldrb	r3, [r2, r3]
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff ffd8 	bl	8003308 <read_col>
 8003358:	4603      	mov	r3, r0
 800335a:	2b01      	cmp	r3, #1
 800335c:	d129      	bne.n	80033b2 <read_keypad+0x86>
				vTaskDelay(20 / portTICK_RATE_MS);							//Si una de las columnas dio alto, espero 20ms y verifico que siga en alto para confirmar
 800335e:	2014      	movs	r0, #20
 8003360:	f00c f806 	bl	800f370 <vTaskDelay>
				if(read_col(keypad_cols[j]) == GPIO_PIN_SET){
 8003364:	79bb      	ldrb	r3, [r7, #6]
 8003366:	4a20      	ldr	r2, [pc, #128]	@ (80033e8 <read_keypad+0xbc>)
 8003368:	5cd3      	ldrb	r3, [r2, r3]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff ffcc 	bl	8003308 <read_col>
 8003370:	4603      	mov	r3, r0
 8003372:	2b01      	cmp	r3, #1
 8003374:	d11d      	bne.n	80033b2 <read_keypad+0x86>
					key_pressed = keypad_chars[i][j];						//Guardo la tecla presionada
 8003376:	79fa      	ldrb	r2, [r7, #7]
 8003378:	79bb      	ldrb	r3, [r7, #6]
 800337a:	491c      	ldr	r1, [pc, #112]	@ (80033ec <read_keypad+0xc0>)
 800337c:	0092      	lsls	r2, r2, #2
 800337e:	440a      	add	r2, r1
 8003380:	4413      	add	r3, r2
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	717b      	strb	r3, [r7, #5]
					while(read_col(keypad_cols[j]) == GPIO_PIN_SET);		//Espero a que se deje de apretar la tecla
 8003386:	bf00      	nop
 8003388:	79bb      	ldrb	r3, [r7, #6]
 800338a:	4a17      	ldr	r2, [pc, #92]	@ (80033e8 <read_keypad+0xbc>)
 800338c:	5cd3      	ldrb	r3, [r2, r3]
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff ffba 	bl	8003308 <read_col>
 8003394:	4603      	mov	r3, r0
 8003396:	2b01      	cmp	r3, #1
 8003398:	d0f6      	beq.n	8003388 <read_keypad+0x5c>
					reset_row(keypad_rows[i]);								//Reseteo la fila en alto antes de salir de la funcion
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	4a11      	ldr	r2, [pc, #68]	@ (80033e4 <read_keypad+0xb8>)
 800339e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff ff9e 	bl	80032e4 <reset_row>
					vTaskDelay(10/portTICK_RATE_MS);						//Pequeño delay para asegurar que el boton fue liberado completamente
 80033a8:	200a      	movs	r0, #10
 80033aa:	f00b ffe1 	bl	800f370 <vTaskDelay>
					return key_pressed;
 80033ae:	797b      	ldrb	r3, [r7, #5]
 80033b0:	e013      	b.n	80033da <read_keypad+0xae>
		for(uint8_t j = 0; j < COL_LENGTH; j++){
 80033b2:	79bb      	ldrb	r3, [r7, #6]
 80033b4:	3301      	adds	r3, #1
 80033b6:	71bb      	strb	r3, [r7, #6]
 80033b8:	79bb      	ldrb	r3, [r7, #6]
 80033ba:	2b03      	cmp	r3, #3
 80033bc:	d9c6      	bls.n	800334c <read_keypad+0x20>
				}
			}
		}
		reset_row(keypad_rows[i]);
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	4a08      	ldr	r2, [pc, #32]	@ (80033e4 <read_keypad+0xb8>)
 80033c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff ff8c 	bl	80032e4 <reset_row>
	for(uint8_t i = 0; i < ROW_LENGTH; i++){
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	3301      	adds	r3, #1
 80033d0:	71fb      	strb	r3, [r7, #7]
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d9af      	bls.n	8003338 <read_keypad+0xc>
	}
	return 0;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000008 	.word	0x20000008
 80033e8:	20000010 	.word	0x20000010
 80033ec:	20000014 	.word	0x20000014

080033f0 <fir_filter>:
										  -0.02485046961359185, 0.006276987439723166, -0.007413256377189857, -0.01872037528825959, 0.009067929219325404,
										  0.003579388809249739, -0.019344649278080953, 0.009987413560588994, 0.043161199365629975, 0.025663017507547244   };

/*Defino instancias para el filtro fir y la fft*/

static void fir_filter(float32_t *psrc, float32_t *pdst, const float32_t *coeff, uint16_t num_coeff, size_t block_size){
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	807b      	strh	r3, [r7, #2]
	static uint8_t fir_init_flag = 0;
	float32_t *fir_state = pvPortMalloc(STATE_SIZE * sizeof(float32_t));
 80033fe:	f242 00c4 	movw	r0, #8388	@ 0x20c4
 8003402:	f00d f87b 	bl	80104fc <pvPortMalloc>
 8003406:	6178      	str	r0, [r7, #20]
	if(!fir_init_flag){
 8003408:	4b0e      	ldr	r3, [pc, #56]	@ (8003444 <fir_filter+0x54>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10a      	bne.n	8003426 <fir_filter+0x36>
		arm_fir_init_f32(&fir_instance, num_coeff, (float32_t *)coeff, fir_state, block_size);
 8003410:	8879      	ldrh	r1, [r7, #2]
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	480b      	ldr	r0, [pc, #44]	@ (8003448 <fir_filter+0x58>)
 800341c:	f00e f83c 	bl	8011498 <arm_fir_init_f32>
		fir_init_flag = 1;
 8003420:	4b08      	ldr	r3, [pc, #32]	@ (8003444 <fir_filter+0x54>)
 8003422:	2201      	movs	r2, #1
 8003424:	701a      	strb	r2, [r3, #0]
	}
	arm_fir_f32(&fir_instance, psrc, pdst, block_size);
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	68f9      	ldr	r1, [r7, #12]
 800342c:	4806      	ldr	r0, [pc, #24]	@ (8003448 <fir_filter+0x58>)
 800342e:	f00e f845 	bl	80114bc <arm_fir_f32>
	vPortFree(fir_state);
 8003432:	6978      	ldr	r0, [r7, #20]
 8003434:	f00d f930 	bl	8010698 <vPortFree>
	fir_state = NULL;
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]
	return;
 800343c:	bf00      	nop
}
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	200009b0 	.word	0x200009b0
 8003448:	2000098c 	.word	0x2000098c

0800344c <hamming_window>:

static void hamming_window(float32_t *psrc, size_t block_size){
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
	// Constantes para la ventana de hamming
	const float32_t alpha = 0.54f;
 8003456:	4b21      	ldr	r3, [pc, #132]	@ (80034dc <hamming_window+0x90>)
 8003458:	613b      	str	r3, [r7, #16]
	const float32_t beta = 0.46f;
 800345a:	4b21      	ldr	r3, [pc, #132]	@ (80034e0 <hamming_window+0x94>)
 800345c:	60fb      	str	r3, [r7, #12]
	float32_t hamming_coeff;
	for(size_t i = 0; i < block_size; i++){
 800345e:	2300      	movs	r3, #0
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	e033      	b.n	80034cc <hamming_window+0x80>
		// Calculo el coeficiente de hamming para la muestra actual
		hamming_coeff = alpha - beta * arm_cos_f32((2.0f * PI * i) / (block_size - 1));
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800346e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80034e4 <hamming_window+0x98>
 8003472:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	3b01      	subs	r3, #1
 800347a:	ee07 3a90 	vmov	s15, r3
 800347e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003482:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003486:	eeb0 0a66 	vmov.f32	s0, s13
 800348a:	f00e fb63 	bl	8011b54 <arm_cos_f32>
 800348e:	eeb0 7a40 	vmov.f32	s14, s0
 8003492:	edd7 7a03 	vldr	s15, [r7, #12]
 8003496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349a:	ed97 7a04 	vldr	s14, [r7, #16]
 800349e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034a2:	edc7 7a02 	vstr	s15, [r7, #8]
		// Aplico coeficiente de hamming a la muestra de la señal
		psrc[i] *= hamming_coeff;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	4413      	add	r3, r2
 80034ae:	ed93 7a00 	vldr	s14, [r3]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	4413      	add	r3, r2
 80034ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80034be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c2:	edc3 7a00 	vstr	s15, [r3]
	for(size_t i = 0; i < block_size; i++){
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	3301      	adds	r3, #1
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d3c7      	bcc.n	8003464 <hamming_window+0x18>
	}
	return;
 80034d4:	bf00      	nop
}
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	3f0a3d71 	.word	0x3f0a3d71
 80034e0:	3eeb851f 	.word	0x3eeb851f
 80034e4:	40c90fdb 	.word	0x40c90fdb

080034e8 <calculate_fft>:

static void calculate_fft(float32_t *psrc, float32_t *pdst, size_t block_size){
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
	static uint8_t fft_init_flag = 0;
	/*Inicializo la instancia de fft si corresponde*/
	if(!fft_init_flag){
 80034f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003524 <calculate_fft+0x3c>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d108      	bne.n	800350e <calculate_fft+0x26>
		arm_rfft_fast_init_f32(&fft_instance, block_size);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	4619      	mov	r1, r3
 8003502:	4809      	ldr	r0, [pc, #36]	@ (8003528 <calculate_fft+0x40>)
 8003504:	f00d fad6 	bl	8010ab4 <arm_rfft_fast_init_f32>
		fft_init_flag = 1;
 8003508:	4b06      	ldr	r3, [pc, #24]	@ (8003524 <calculate_fft+0x3c>)
 800350a:	2201      	movs	r2, #1
 800350c:	701a      	strb	r2, [r3, #0]
	}
	/*Calculo la fft*/
	arm_rfft_fast_f32(&fft_instance, psrc, pdst, 0);					//El cero indica que se hace transformada, no antitransformada
 800350e:	2300      	movs	r3, #0
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	68f9      	ldr	r1, [r7, #12]
 8003514:	4804      	ldr	r0, [pc, #16]	@ (8003528 <calculate_fft+0x40>)
 8003516:	f00d fb51 	bl	8010bbc <arm_rfft_fast_f32>
	return;
 800351a:	bf00      	nop
}
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	200009b1 	.word	0x200009b1
 8003528:	20000998 	.word	0x20000998

0800352c <normalize_array>:

static void normalize_array(float32_t *psrc, size_t block_size){
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
	float32_t min_val, max_val;
	uint32_t min_index, max_index;
	float32_t range;
	/*Encuentro el maximo y el minimo del array*/
	arm_min_f32(psrc, block_size, &min_val, &min_index);
 8003536:	f107 030c 	add.w	r3, r7, #12
 800353a:	f107 0214 	add.w	r2, r7, #20
 800353e:	6839      	ldr	r1, [r7, #0]
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f00d f9e7 	bl	8010914 <arm_min_f32>
	arm_max_f32(psrc, block_size, &max_val, &max_index);
 8003546:	f107 0308 	add.w	r3, r7, #8
 800354a:	f107 0210 	add.w	r2, r7, #16
 800354e:	6839      	ldr	r1, [r7, #0]
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f00d fa47 	bl	80109e4 <arm_max_f32>
	/*Calculo el rango*/
	range = max_val - min_val;
 8003556:	ed97 7a04 	vldr	s14, [r7, #16]
 800355a:	edd7 7a05 	vldr	s15, [r7, #20]
 800355e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003562:	edc7 7a06 	vstr	s15, [r7, #24]
	/*Normalizo el array*/
	for(size_t i = 0; i < block_size; i++){
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	e016      	b.n	800359a <normalize_array+0x6e>
		psrc[i] = (psrc[i] - min_val) / range;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	4413      	add	r3, r2
 8003574:	ed93 7a00 	vldr	s14, [r3]
 8003578:	edd7 7a05 	vldr	s15, [r7, #20]
 800357c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	4413      	add	r3, r2
 8003588:	ed97 7a06 	vldr	s14, [r7, #24]
 800358c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003590:	edc3 7a00 	vstr	s15, [r3]
	for(size_t i = 0; i < block_size; i++){
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	3301      	adds	r3, #1
 8003598:	61fb      	str	r3, [r7, #28]
 800359a:	69fa      	ldr	r2, [r7, #28]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d3e4      	bcc.n	800356c <normalize_array+0x40>
	}
	return;
 80035a2:	bf00      	nop
}
 80035a4:	3720      	adds	r7, #32
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <get_fft_norm_mag>:

static void get_fft_norm_mag(float32_t *psrc, float32_t *pdst, size_t block_size){
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
	/*Se tienen en cuenta la cantidad de numeros complejos, no de elementos en p_src*/
	/*Calculo la magnitud de la fft*/
	arm_cmplx_mag_f32(psrc, pdst, block_size);
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	68b9      	ldr	r1, [r7, #8]
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f00e f9e2 	bl	8011984 <arm_cmplx_mag_f32>
	/*Normalizo*/
	normalize_array(pdst, block_size);
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	68b8      	ldr	r0, [r7, #8]
 80035c4:	f7ff ffb2 	bl	800352c <normalize_array>
	return;
 80035c8:	bf00      	nop
}
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <process_signal>:

void process_signal(float32_t *psrc, float32_t *pdst, size_t block_size){
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
	/*Reservo memoria para salida filtrada y filtro la señal.*/
	float32_t *filtered = pvPortMalloc(block_size * sizeof(float32_t));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f00c ff8b 	bl	80104fc <pvPortMalloc>
 80035e6:	6178      	str	r0, [r7, #20]
	fir_filter(psrc, filtered, filter_taps, NUM_TAPS, block_size);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	2332      	movs	r3, #50	@ 0x32
 80035ee:	4a14      	ldr	r2, [pc, #80]	@ (8003640 <process_signal+0x70>)
 80035f0:	6979      	ldr	r1, [r7, #20]
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f7ff fefc 	bl	80033f0 <fir_filter>

	//Aplico ventana de hamming al vector
	hamming_window(filtered, block_size);
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	6978      	ldr	r0, [r7, #20]
 80035fc:	f7ff ff26 	bl	800344c <hamming_window>

	/*Reservo memoria para la salida de FFT y calculo la fft. Libero memoria de salida filtrada*/
	float32_t *fft_output = pvPortMalloc(block_size * sizeof(float32_t));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4618      	mov	r0, r3
 8003606:	f00c ff79 	bl	80104fc <pvPortMalloc>
 800360a:	6138      	str	r0, [r7, #16]
	calculate_fft(filtered, fft_output, block_size);
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6939      	ldr	r1, [r7, #16]
 8003610:	6978      	ldr	r0, [r7, #20]
 8003612:	f7ff ff69 	bl	80034e8 <calculate_fft>
	vPortFree(filtered);
 8003616:	6978      	ldr	r0, [r7, #20]
 8003618:	f00d f83e 	bl	8010698 <vPortFree>
	filtered = NULL;
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]

	/*Calculo la magnitud de la fft y libero la memoria ocupada por la fft.*/
	get_fft_norm_mag(fft_output, pdst, block_size / 2);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	085b      	lsrs	r3, r3, #1
 8003624:	461a      	mov	r2, r3
 8003626:	68b9      	ldr	r1, [r7, #8]
 8003628:	6938      	ldr	r0, [r7, #16]
 800362a:	f7ff ffbe 	bl	80035aa <get_fft_norm_mag>
	vPortFree(fft_output);
 800362e:	6938      	ldr	r0, [r7, #16]
 8003630:	f00d f832 	bl	8010698 <vPortFree>
	fft_output = NULL;
 8003634:	2300      	movs	r3, #0
 8003636:	613b      	str	r3, [r7, #16]
	return;
 8003638:	bf00      	nop
}
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	0801696c 	.word	0x0801696c

08003644 <send_uart>:

extern UART_HandleTypeDef huart2;
extern RTC_HandleTypeDef hrtc;			//Handler del RTC


void send_uart(char *string){
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7fc fe27 	bl	80002a0 <strlen>
 8003652:	4603      	mov	r3, r0
 8003654:	b29a      	uxth	r2, r3
 8003656:	f04f 33ff 	mov.w	r3, #4294967295
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4803      	ldr	r0, [pc, #12]	@ (800366c <send_uart+0x28>)
 800365e:	f004 fc9b 	bl	8007f98 <HAL_UART_Transmit>
	return;
 8003662:	bf00      	nop
}
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	200004c8 	.word	0x200004c8

08003670 <mount_sd>:
		send_uart(str);
	}
	return;
}

FRESULT mount_sd(char* path){
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8003678:	2201      	movs	r2, #1
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	480a      	ldr	r0, [pc, #40]	@ (80036a8 <mount_sd+0x38>)
 800367e:	f008 fd27 	bl	800c0d0 <f_mount>
 8003682:	4603      	mov	r3, r0
 8003684:	461a      	mov	r2, r3
 8003686:	4b09      	ldr	r3, [pc, #36]	@ (80036ac <mount_sd+0x3c>)
 8003688:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 800368a:	4b08      	ldr	r3, [pc, #32]	@ (80036ac <mount_sd+0x3c>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d004      	beq.n	800369c <mount_sd+0x2c>
		send_uart("Error al montar la tarjeta SD!!!\n");
 8003692:	4807      	ldr	r0, [pc, #28]	@ (80036b0 <mount_sd+0x40>)
 8003694:	f7ff ffd6 	bl	8003644 <send_uart>
		while(1);
 8003698:	bf00      	nop
 800369a:	e7fd      	b.n	8003698 <mount_sd+0x28>
	}
	return fresult;
 800369c:	4b03      	ldr	r3, [pc, #12]	@ (80036ac <mount_sd+0x3c>)
 800369e:	781b      	ldrb	r3, [r3, #0]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	200009b4 	.word	0x200009b4
 80036ac:	20002a50 	.word	0x20002a50
 80036b0:	08012e58 	.word	0x08012e58

080036b4 <unmount_sd>:

FRESULT unmount_sd(char* path){
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 80036bc:	2201      	movs	r2, #1
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	2000      	movs	r0, #0
 80036c2:	f008 fd05 	bl	800c0d0 <f_mount>
 80036c6:	4603      	mov	r3, r0
 80036c8:	461a      	mov	r2, r3
 80036ca:	4b08      	ldr	r3, [pc, #32]	@ (80036ec <unmount_sd+0x38>)
 80036cc:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 80036ce:	4b07      	ldr	r3, [pc, #28]	@ (80036ec <unmount_sd+0x38>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d004      	beq.n	80036e0 <unmount_sd+0x2c>
		send_uart("Error al desmontar la tarjeta SD!!!\n");
 80036d6:	4806      	ldr	r0, [pc, #24]	@ (80036f0 <unmount_sd+0x3c>)
 80036d8:	f7ff ffb4 	bl	8003644 <send_uart>
		while(1);
 80036dc:	bf00      	nop
 80036de:	e7fd      	b.n	80036dc <unmount_sd+0x28>
	}
	return fresult;
 80036e0:	4b02      	ldr	r3, [pc, #8]	@ (80036ec <unmount_sd+0x38>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20002a50 	.word	0x20002a50
 80036f0:	08012e7c 	.word	0x08012e7c

080036f4 <save_buffer_on_sd>:
	strcat(rtc_lecture, time);
	vPortFree(time);
	return;
}

FRESULT save_buffer_on_sd(char *filename, float *buffer, size_t size){
 80036f4:	b580      	push	{r7, lr}
 80036f6:	f5ad 5d83 	sub.w	sp, sp, #4192	@ 0x1060
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003702:	f843 0c5c 	str.w	r0, [r3, #-92]
 8003706:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800370a:	f843 1c60 	str.w	r1, [r3, #-96]
 800370e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003712:	f843 2c64 	str.w	r2, [r3, #-100]
	 * Es importante que el archivo sea .bin, ya que es más conveniente guardar
	 * los datos en este formato (ocupa menos espacio y es más directa la escritura).
	 */
	//Abro el archivo
	FIL fil;
	fresult = f_open(&fil, filename, FA_OPEN_APPEND | FA_WRITE);						//Se abre con append por si es necesario seguir escribiendo desde el final
 8003716:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800371a:	4619      	mov	r1, r3
 800371c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003720:	3b18      	subs	r3, #24
 8003722:	2232      	movs	r2, #50	@ 0x32
 8003724:	f851 1c5c 	ldr.w	r1, [r1, #-92]
 8003728:	4618      	mov	r0, r3
 800372a:	f008 fd35 	bl	800c198 <f_open>
 800372e:	4603      	mov	r3, r0
 8003730:	461a      	mov	r2, r3
 8003732:	4b25      	ldr	r3, [pc, #148]	@ (80037c8 <save_buffer_on_sd+0xd4>)
 8003734:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003736:	4b24      	ldr	r3, [pc, #144]	@ (80037c8 <save_buffer_on_sd+0xd4>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <save_buffer_on_sd+0x50>
		return fresult;
 800373e:	4b22      	ldr	r3, [pc, #136]	@ (80037c8 <save_buffer_on_sd+0xd4>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	e03a      	b.n	80037ba <save_buffer_on_sd+0xc6>
	}
	//Escribo los datos del buffer en el archivo
	fresult = f_write(&fil, buffer, FLOAT_SIZE_BYTES(size), &bw);
 8003744:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003748:	f853 3c64 	ldr.w	r3, [r3, #-100]
 800374c:	009a      	lsls	r2, r3, #2
 800374e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003752:	4619      	mov	r1, r3
 8003754:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003758:	3818      	subs	r0, #24
 800375a:	4b1c      	ldr	r3, [pc, #112]	@ (80037cc <save_buffer_on_sd+0xd8>)
 800375c:	f851 1c60 	ldr.w	r1, [r1, #-96]
 8003760:	f009 f9d6 	bl	800cb10 <f_write>
 8003764:	4603      	mov	r3, r0
 8003766:	461a      	mov	r2, r3
 8003768:	4b17      	ldr	r3, [pc, #92]	@ (80037c8 <save_buffer_on_sd+0xd4>)
 800376a:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK || bw < FLOAT_SIZE_BYTES(size)){
 800376c:	4b16      	ldr	r3, [pc, #88]	@ (80037c8 <save_buffer_on_sd+0xd4>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d108      	bne.n	8003786 <save_buffer_on_sd+0x92>
 8003774:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003778:	f853 3c64 	ldr.w	r3, [r3, #-100]
 800377c:	009a      	lsls	r2, r3, #2
 800377e:	4b13      	ldr	r3, [pc, #76]	@ (80037cc <save_buffer_on_sd+0xd8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d90e      	bls.n	80037a4 <save_buffer_on_sd+0xb0>
		f_close(&fil);																	//Frente a un error cierro el archivo y salgo de la funcion
 8003786:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800378a:	3b18      	subs	r3, #24
 800378c:	4618      	mov	r0, r3
 800378e:	f009 fd08 	bl	800d1a2 <f_close>
		return (fresult != FR_OK) ? fresult : FR_DISK_ERR;								//Si se escribieron bytes de menos, devuelve FR_DISK_ERR
 8003792:	4b0d      	ldr	r3, [pc, #52]	@ (80037c8 <save_buffer_on_sd+0xd4>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <save_buffer_on_sd+0xac>
 800379a:	4b0b      	ldr	r3, [pc, #44]	@ (80037c8 <save_buffer_on_sd+0xd4>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	e00c      	b.n	80037ba <save_buffer_on_sd+0xc6>
 80037a0:	2301      	movs	r3, #1
 80037a2:	e00a      	b.n	80037ba <save_buffer_on_sd+0xc6>
	}

	//Cierro el archivo
	fresult = f_close(&fil);
 80037a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80037a8:	3b18      	subs	r3, #24
 80037aa:	4618      	mov	r0, r3
 80037ac:	f009 fcf9 	bl	800d1a2 <f_close>
 80037b0:	4603      	mov	r3, r0
 80037b2:	461a      	mov	r2, r3
 80037b4:	4b04      	ldr	r3, [pc, #16]	@ (80037c8 <save_buffer_on_sd+0xd4>)
 80037b6:	701a      	strb	r2, [r3, #0]
	return FR_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	f507 5783 	add.w	r7, r7, #4192	@ 0x1060
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20002a50 	.word	0x20002a50
 80037cc:	20002a58 	.word	0x20002a58

080037d0 <read_buffer_from_sd>:

FRESULT read_buffer_from_sd(char *filename, float *buffer, size_t size, uint32_t current_pos){
 80037d0:	b5b0      	push	{r4, r5, r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
 80037dc:	603b      	str	r3, [r7, #0]
	 * La funcion esta pensada para leer de a bloques iguales, no guarda la ultima
	 * posicion del puntero de lectura, se debe llevar cuenta externamente.
	 */

	//Abro el archivo
	fresult = f_open(&fil, filename, FA_READ);
 80037de:	2201      	movs	r2, #1
 80037e0:	68f9      	ldr	r1, [r7, #12]
 80037e2:	4823      	ldr	r0, [pc, #140]	@ (8003870 <read_buffer_from_sd+0xa0>)
 80037e4:	f008 fcd8 	bl	800c198 <f_open>
 80037e8:	4603      	mov	r3, r0
 80037ea:	461a      	mov	r2, r3
 80037ec:	4b21      	ldr	r3, [pc, #132]	@ (8003874 <read_buffer_from_sd+0xa4>)
 80037ee:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 80037f0:	4b20      	ldr	r3, [pc, #128]	@ (8003874 <read_buffer_from_sd+0xa4>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <read_buffer_from_sd+0x2e>
		return fresult;
 80037f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003874 <read_buffer_from_sd+0xa4>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	e033      	b.n	8003866 <read_buffer_from_sd+0x96>
	}

	//Posiciono el puntero de lectura en el archivo
	fresult = f_lseek(&fil, current_pos);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2200      	movs	r2, #0
 8003802:	461c      	mov	r4, r3
 8003804:	4615      	mov	r5, r2
 8003806:	4622      	mov	r2, r4
 8003808:	462b      	mov	r3, r5
 800380a:	4819      	ldr	r0, [pc, #100]	@ (8003870 <read_buffer_from_sd+0xa0>)
 800380c:	f009 fcf8 	bl	800d200 <f_lseek>
 8003810:	4603      	mov	r3, r0
 8003812:	461a      	mov	r2, r3
 8003814:	4b17      	ldr	r3, [pc, #92]	@ (8003874 <read_buffer_from_sd+0xa4>)
 8003816:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003818:	4b16      	ldr	r3, [pc, #88]	@ (8003874 <read_buffer_from_sd+0xa4>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <read_buffer_from_sd+0x5c>
		f_close(&fil);
 8003820:	4813      	ldr	r0, [pc, #76]	@ (8003870 <read_buffer_from_sd+0xa0>)
 8003822:	f009 fcbe 	bl	800d1a2 <f_close>
		return fresult;
 8003826:	4b13      	ldr	r3, [pc, #76]	@ (8003874 <read_buffer_from_sd+0xa4>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	e01c      	b.n	8003866 <read_buffer_from_sd+0x96>
	}

	//Leo el bloque de tamaño size desde el archivo
	fresult = f_read(&fil, buffer, FLOAT_SIZE_BYTES(size), &br);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	009a      	lsls	r2, r3, #2
 8003830:	4b11      	ldr	r3, [pc, #68]	@ (8003878 <read_buffer_from_sd+0xa8>)
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	480e      	ldr	r0, [pc, #56]	@ (8003870 <read_buffer_from_sd+0xa0>)
 8003836:	f008 ffa4 	bl	800c782 <f_read>
 800383a:	4603      	mov	r3, r0
 800383c:	461a      	mov	r2, r3
 800383e:	4b0d      	ldr	r3, [pc, #52]	@ (8003874 <read_buffer_from_sd+0xa4>)
 8003840:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003842:	4b0c      	ldr	r3, [pc, #48]	@ (8003874 <read_buffer_from_sd+0xa4>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d005      	beq.n	8003856 <read_buffer_from_sd+0x86>
		f_close(&fil);
 800384a:	4809      	ldr	r0, [pc, #36]	@ (8003870 <read_buffer_from_sd+0xa0>)
 800384c:	f009 fca9 	bl	800d1a2 <f_close>
		return fresult;
 8003850:	4b08      	ldr	r3, [pc, #32]	@ (8003874 <read_buffer_from_sd+0xa4>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	e007      	b.n	8003866 <read_buffer_from_sd+0x96>
	}

	//Cierro el archivo
	fresult = f_close(&fil);
 8003856:	4806      	ldr	r0, [pc, #24]	@ (8003870 <read_buffer_from_sd+0xa0>)
 8003858:	f009 fca3 	bl	800d1a2 <f_close>
 800385c:	4603      	mov	r3, r0
 800385e:	461a      	mov	r2, r3
 8003860:	4b04      	ldr	r3, [pc, #16]	@ (8003874 <read_buffer_from_sd+0xa4>)
 8003862:	701a      	strb	r2, [r3, #0]
	return FR_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bdb0      	pop	{r4, r5, r7, pc}
 800386e:	bf00      	nop
 8003870:	200019f8 	.word	0x200019f8
 8003874:	20002a50 	.word	0x20002a50
 8003878:	20002a54 	.word	0x20002a54

0800387c <clear_buffer>:
#include "utils.h"
//Funciones utiles
void clear_buffer(char *buffer, size_t length) {
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
    if (buffer == NULL) {
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00f      	beq.n	80038ac <clear_buffer+0x30>
        return; // Verifica que el puntero no sea nulo
    }
    for (size_t i = 0; i < length; i++) {
 800388c:	2300      	movs	r3, #0
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	e007      	b.n	80038a2 <clear_buffer+0x26>
        buffer[i] = '\0'; // Llena el buffer con caracteres nulos
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4413      	add	r3, r2
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < length; i++) {
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	3301      	adds	r3, #1
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d3f3      	bcc.n	8003892 <clear_buffer+0x16>
 80038aa:	e000      	b.n	80038ae <clear_buffer+0x32>
        return; // Verifica que el puntero no sea nulo
 80038ac:	bf00      	nop
    }
}
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <display_task>:
	}
}

#elif DISPLAY_FUNCTION == 1
//Version funcional que utiliza el control de acceso
void display_task(void *pvParameters){
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
	indicatorMessage display_message;
	uint8_t counter = 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	73fb      	strb	r3, [r7, #15]
	display_init();						//Inicializo el display
 80038c4:	f7ff f80c 	bl	80028e0 <display_init>
	display_start_msg();				//Muestro mensaje inicial
 80038c8:	f7ff f8a6 	bl	8002a18 <display_start_msg>
	while(1){
		xQueueReceive(display_queue, &display_message, portMAX_DELAY);
 80038cc:	4b67      	ldr	r3, [pc, #412]	@ (8003a6c <display_task+0x1b4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f107 010e 	add.w	r1, r7, #14
 80038d4:	f04f 32ff 	mov.w	r2, #4294967295
 80038d8:	4618      	mov	r0, r3
 80038da:	f00a ffc7 	bl	800e86c <xQueueReceive>
		switch(display_message){
 80038de:	7bbb      	ldrb	r3, [r7, #14]
 80038e0:	3b01      	subs	r3, #1
 80038e2:	2b0e      	cmp	r3, #14
 80038e4:	d8f2      	bhi.n	80038cc <display_task+0x14>
 80038e6:	a201      	add	r2, pc, #4	@ (adr r2, 80038ec <display_task+0x34>)
 80038e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ec:	08003929 	.word	0x08003929
 80038f0:	0800392f 	.word	0x0800392f
 80038f4:	08003947 	.word	0x08003947
 80038f8:	0800395f 	.word	0x0800395f
 80038fc:	0800398d 	.word	0x0800398d
 8003900:	0800399f 	.word	0x0800399f
 8003904:	080039d1 	.word	0x080039d1
 8003908:	080039df 	.word	0x080039df
 800390c:	08003a17 	.word	0x08003a17
 8003910:	08003a25 	.word	0x08003a25
 8003914:	08003a37 	.word	0x08003a37
 8003918:	08003a4f 	.word	0x08003a4f
 800391c:	08003a49 	.word	0x08003a49
 8003920:	08003a09 	.word	0x08003a09
 8003924:	08003a5d 	.word	0x08003a5d
		case PANTALLA_DE_INICIO:
			display_start_msg();
 8003928:	f7ff f876 	bl	8002a18 <display_start_msg>
			break;
 800392c:	e09d      	b.n	8003a6a <display_task+0x1b2>
		case PANTALLA_INGRESO_KEYPAD:
			if(counter < MAX_DIGITS){
 800392e:	7bfb      	ldrb	r3, [r7, #15]
 8003930:	2b05      	cmp	r3, #5
 8003932:	f200 8096 	bhi.w	8003a62 <display_task+0x1aa>
				counter++;
 8003936:	7bfb      	ldrb	r3, [r7, #15]
 8003938:	3301      	adds	r3, #1
 800393a:	73fb      	strb	r3, [r7, #15]
				display_sequence_entry_msg(counter);
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff f8a0 	bl	8002a84 <display_sequence_entry_msg>
			}
			break;
 8003944:	e08d      	b.n	8003a62 <display_task+0x1aa>
		case PANTALLA_BORRAR_KEYPAD:
			if(counter > 0){
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 808c 	beq.w	8003a66 <display_task+0x1ae>
				counter--;
 800394e:	7bfb      	ldrb	r3, [r7, #15]
 8003950:	3b01      	subs	r3, #1
 8003952:	73fb      	strb	r3, [r7, #15]
				display_sequence_entry_msg(counter);
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff f894 	bl	8002a84 <display_sequence_entry_msg>
			}
			break;
 800395c:	e083      	b.n	8003a66 <display_task+0x1ae>
		case PANTALLA_USUARIO_ENCONTRADO:
			xSemaphoreTake(sd_display_sync, portMAX_DELAY);			//Se utiliza para sincronizar las tareas sd y display
 800395e:	4b44      	ldr	r3, [pc, #272]	@ (8003a70 <display_task+0x1b8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f04f 31ff 	mov.w	r1, #4294967295
 8003966:	4618      	mov	r0, r3
 8003968:	f00b f862 	bl	800ea30 <xQueueSemaphoreTake>
			display_user_found_msg();
 800396c:	f7ff f8e8 	bl	8002b40 <display_user_found_msg>
			counter = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8003974:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003978:	f00b fcfa 	bl	800f370 <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 800397c:	4b3c      	ldr	r3, [pc, #240]	@ (8003a70 <display_task+0x1b8>)
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	2300      	movs	r3, #0
 8003982:	2200      	movs	r2, #0
 8003984:	2100      	movs	r1, #0
 8003986:	f00a fddf 	bl	800e548 <xQueueGenericSend>
			break;
 800398a:	e06e      	b.n	8003a6a <display_task+0x1b2>
		case PANTALLA_USUARIO_NO_EXISTE:
			display_user_not_found_msg();
 800398c:	f7ff f8e2 	bl	8002b54 <display_user_not_found_msg>
			counter = 0;							//Reinicio el contador
 8003990:	2300      	movs	r3, #0
 8003992:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8003994:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003998:	f00b fcea 	bl	800f370 <vTaskDelay>
			break;
 800399c:	e065      	b.n	8003a6a <display_task+0x1b2>
		case PANTALLA_RECONOCIMIENTO_DE_VOZ:
			xSemaphoreTake(sd_display_sync, portMAX_DELAY);
 800399e:	4b34      	ldr	r3, [pc, #208]	@ (8003a70 <display_task+0x1b8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f04f 31ff 	mov.w	r1, #4294967295
 80039a6:	4618      	mov	r0, r3
 80039a8:	f00b f842 	bl	800ea30 <xQueueSemaphoreTake>
			display_start_voice_recognition_msg();
 80039ac:	f7ff f8dc 	bl	8002b68 <display_start_voice_recognition_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 80039b0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80039b4:	f00b fcdc 	bl	800f370 <vTaskDelay>
			countdown_msg();
 80039b8:	f7ff f8e0 	bl	8002b7c <countdown_msg>
			display_capturing_voice_msg();
 80039bc:	f7ff f934 	bl	8002c28 <display_capturing_voice_msg>
			xSemaphoreGive(sd_display_sync);
 80039c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003a70 <display_task+0x1b8>)
 80039c2:	6818      	ldr	r0, [r3, #0]
 80039c4:	2300      	movs	r3, #0
 80039c6:	2200      	movs	r2, #0
 80039c8:	2100      	movs	r1, #0
 80039ca:	f00a fdbd 	bl	800e548 <xQueueGenericSend>
			break;
 80039ce:	e04c      	b.n	8003a6a <display_task+0x1b2>
		case PANTALLA_VOZ_RECONOCIDA:
			display_recognized_voice_msg();
 80039d0:	f7ff f934 	bl	8002c3c <display_recognized_voice_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 80039d4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80039d8:	f00b fcca 	bl	800f370 <vTaskDelay>
			break;
 80039dc:	e045      	b.n	8003a6a <display_task+0x1b2>
		case PANTALLA_VOZ_NO_RECONOCIDA:
			display_not_recognized_voice_msg();
 80039de:	f7ff f937 	bl	8002c50 <display_not_recognized_voice_msg>
			xSemaphoreTake(sd_display_sync, portMAX_DELAY);
 80039e2:	4b23      	ldr	r3, [pc, #140]	@ (8003a70 <display_task+0x1b8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f04f 31ff 	mov.w	r1, #4294967295
 80039ea:	4618      	mov	r0, r3
 80039ec:	f00b f820 	bl	800ea30 <xQueueSemaphoreTake>
			vTaskDelay(2000 / portTICK_RATE_MS);
 80039f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80039f4:	f00b fcbc 	bl	800f370 <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 80039f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003a70 <display_task+0x1b8>)
 80039fa:	6818      	ldr	r0, [r3, #0]
 80039fc:	2300      	movs	r3, #0
 80039fe:	2200      	movs	r2, #0
 8003a00:	2100      	movs	r1, #0
 8003a02:	f00a fda1 	bl	800e548 <xQueueGenericSend>
			break;
 8003a06:	e030      	b.n	8003a6a <display_task+0x1b2>
		case PANTALLA_PROCESANDO_DATOS:
			display_processing_data_msg();
 8003a08:	f7ff f92c 	bl	8002c64 <display_processing_data_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8003a0c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003a10:	f00b fcae 	bl	800f370 <vTaskDelay>
			break;
 8003a14:	e029      	b.n	8003a6a <display_task+0x1b2>
		case PANTALLA_ACCESO_CONCEDIDO:
			display_access_granted_msg();
 8003a16:	f7ff f889 	bl	8002b2c <display_access_granted_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8003a1a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003a1e:	f00b fca7 	bl	800f370 <vTaskDelay>
			break;
 8003a22:	e022      	b.n	8003a6a <display_task+0x1b2>
		case PANTALLA_TIMEOUT:
			display_timeout_msg();
 8003a24:	f7ff f86e 	bl	8002b04 <display_timeout_msg>
			counter = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8003a2c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003a30:	f00b fc9e 	bl	800f370 <vTaskDelay>
			break;
 8003a34:	e019      	b.n	8003a6a <display_task+0x1b2>
		case PANTALLA_SECUENCIA_INCOMPLETA:
			display_incomplete_entry_msg();
 8003a36:	f7ff f86f 	bl	8002b18 <display_incomplete_entry_msg>
			counter = 0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8003a3e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003a42:	f00b fc95 	bl	800f370 <vTaskDelay>
			break;
 8003a46:	e010      	b.n	8003a6a <display_task+0x1b2>
		case PANTALLA_DATABASE_NO_EXISTE:
			display_missing_database_msg();
 8003a48:	f7ff f916 	bl	8002c78 <display_missing_database_msg>
			break;
 8003a4c:	e00d      	b.n	8003a6a <display_task+0x1b2>
		case PANTALLA_TEMPLATE_NO_EXISTE:
			display_missing_template_msg();
 8003a4e:	f7ff f91d 	bl	8002c8c <display_missing_template_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8003a52:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003a56:	f00b fc8b 	bl	800f370 <vTaskDelay>
			break;
 8003a5a:	e006      	b.n	8003a6a <display_task+0x1b2>
		case PANTALLA_TEMPLATE_GUARDADO:
			display_template_saved_msg();
 8003a5c:	f7ff f920 	bl	8002ca0 <display_template_saved_msg>
			break;
 8003a60:	e003      	b.n	8003a6a <display_task+0x1b2>
			break;
 8003a62:	bf00      	nop
 8003a64:	e732      	b.n	80038cc <display_task+0x14>
			break;
 8003a66:	bf00      	nop
 8003a68:	e730      	b.n	80038cc <display_task+0x14>
		xQueueReceive(display_queue, &display_message, portMAX_DELAY);
 8003a6a:	e72f      	b.n	80038cc <display_task+0x14>
 8003a6c:	20000514 	.word	0x20000514
 8003a70:	2000051c 	.word	0x2000051c

08003a74 <keypad_task>:
#include "input_sequence_handle.h"
#include "display_functions.h"

char kp_buffer[SEQUENCE_LENGTH + 1] = {0};
/*================[Public Task]=====================*/
void keypad_task(void *pvParameters){
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
	char input;
	uint8_t send_flag = 0;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	737b      	strb	r3, [r7, #13]
	indicatorMessage display_message;
	while(1){
		input = read_keypad();
 8003a80:	f7ff fc54 	bl	800332c <read_keypad>
 8003a84:	4603      	mov	r3, r0
 8003a86:	73bb      	strb	r3, [r7, #14]
		display_message = handle_keypad_input(input, kp_buffer, &send_flag);
 8003a88:	f107 020d 	add.w	r2, r7, #13
 8003a8c:	7bbb      	ldrb	r3, [r7, #14]
 8003a8e:	491c      	ldr	r1, [pc, #112]	@ (8003b00 <keypad_task+0x8c>)
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff fb47 	bl	8003124 <handle_keypad_input>
 8003a96:	4603      	mov	r3, r0
 8003a98:	733b      	strb	r3, [r7, #12]
		if(send_flag){
 8003a9a:	7b7b      	ldrb	r3, [r7, #13]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d022      	beq.n	8003ae6 <keypad_task+0x72>
			//Doy el semaforo
			xSemaphoreGive(keypad_sd_sync);
 8003aa0:	4b18      	ldr	r3, [pc, #96]	@ (8003b04 <keypad_task+0x90>)
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	f00a fd4d 	bl	800e548 <xQueueGenericSend>
			//Envio uno por uno los datos del buffer
			for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 8003aae:	2300      	movs	r3, #0
 8003ab0:	73fb      	strb	r3, [r7, #15]
 8003ab2:	e00c      	b.n	8003ace <keypad_task+0x5a>
				xQueueSend(sequence_queue, &kp_buffer[i], portMAX_DELAY);
 8003ab4:	4b14      	ldr	r3, [pc, #80]	@ (8003b08 <keypad_task+0x94>)
 8003ab6:	6818      	ldr	r0, [r3, #0]
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	4a11      	ldr	r2, [pc, #68]	@ (8003b00 <keypad_task+0x8c>)
 8003abc:	1899      	adds	r1, r3, r2
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac4:	f00a fd40 	bl	800e548 <xQueueGenericSend>
			for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	3301      	adds	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	2b06      	cmp	r3, #6
 8003ad2:	d9ef      	bls.n	8003ab4 <keypad_task+0x40>
			}

			//Bloqueo la tarea keypad hasta que
			xSemaphoreTake(keypad_sd_sync, portMAX_DELAY);
 8003ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b04 <keypad_task+0x90>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8003adc:	4618      	mov	r0, r3
 8003ade:	f00a ffa7 	bl	800ea30 <xQueueSemaphoreTake>
			//Reinicio el flag de envio
			send_flag = 0;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	737b      	strb	r3, [r7, #13]
		}
		//Envio el mensaje a la tarea display si no hay pantalla idle
		if(display_message != PANTALLA_IDLE){
 8003ae6:	7b3b      	ldrb	r3, [r7, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0c9      	beq.n	8003a80 <keypad_task+0xc>
			xQueueSend(display_queue, &display_message, portMAX_DELAY);
 8003aec:	4b07      	ldr	r3, [pc, #28]	@ (8003b0c <keypad_task+0x98>)
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	f107 010c 	add.w	r1, r7, #12
 8003af4:	2300      	movs	r3, #0
 8003af6:	f04f 32ff 	mov.w	r2, #4294967295
 8003afa:	f00a fd25 	bl	800e548 <xQueueGenericSend>
		input = read_keypad();
 8003afe:	e7bf      	b.n	8003a80 <keypad_task+0xc>
 8003b00:	20002a5c 	.word	0x20002a5c
 8003b04:	20000518 	.word	0x20000518
 8003b08:	20000510 	.word	0x20000510
 8003b0c:	20000514 	.word	0x20000514

08003b10 <sd_task>:
	}
}

#elif CODE_VERSION == 2
//Generador de template
void sd_task(void *pvParameters){
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
	indicatorMessage current_message;
	uint16_t *voice_buffer;
	char *filename = pvPortMalloc(DIR_STR_SIZE * sizeof(char));
 8003b18:	2014      	movs	r0, #20
 8003b1a:	f00c fcef 	bl	80104fc <pvPortMalloc>
 8003b1e:	6138      	str	r0, [r7, #16]

	//Monto la tarjeta SD. Si  esta correcto, se continua con el procesamiento.
	if(mount_sd("") == FR_OK){
 8003b20:	4829      	ldr	r0, [pc, #164]	@ (8003bc8 <sd_task+0xb8>)
 8003b22:	f7ff fda5 	bl	8003670 <mount_sd>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d14a      	bne.n	8003bc2 <sd_task+0xb2>
		voice_buffer = pvPortMalloc(VOICE_BUFFER_SIZE * sizeof(uint16_t));
 8003b2c:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 8003b30:	f00c fce4 	bl	80104fc <pvPortMalloc>
 8003b34:	60f8      	str	r0, [r7, #12]
		for(uint8_t i = 0; i < TEMPLATE_SAMPLES; i++){
 8003b36:	2300      	movs	r3, #0
 8003b38:	75fb      	strb	r3, [r7, #23]
 8003b3a:	e028      	b.n	8003b8e <sd_task+0x7e>
			//Indico al display que se inicia el reconocimiento de voz
			current_message = PANTALLA_RECONOCIMIENTO_DE_VOZ;
 8003b3c:	2306      	movs	r3, #6
 8003b3e:	72fb      	strb	r3, [r7, #11]

			//Sincronizo tarea de display y memoria SD
			xSemaphoreGive(sd_display_sync);												//Doy el semaforo para que lo tome el display
 8003b40:	4b22      	ldr	r3, [pc, #136]	@ (8003bcc <sd_task+0xbc>)
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	2300      	movs	r3, #0
 8003b46:	2200      	movs	r2, #0
 8003b48:	2100      	movs	r1, #0
 8003b4a:	f00a fcfd 	bl	800e548 <xQueueGenericSend>
			xQueueSend(display_queue, &current_message, portMAX_DELAY);						//Envio el evento de reconocimiento al display
 8003b4e:	4b20      	ldr	r3, [pc, #128]	@ (8003bd0 <sd_task+0xc0>)
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	f107 010b 	add.w	r1, r7, #11
 8003b56:	2300      	movs	r3, #0
 8003b58:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5c:	f00a fcf4 	bl	800e548 <xQueueGenericSend>
			xSemaphoreTake(sd_display_sync, portMAX_DELAY);									//Bloqueo la tarea hasta que el display me devuelva el semaforo
 8003b60:	4b1a      	ldr	r3, [pc, #104]	@ (8003bcc <sd_task+0xbc>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f04f 31ff 	mov.w	r1, #4294967295
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f00a ff61 	bl	800ea30 <xQueueSemaphoreTake>

			//Capturo 1.5 segundos de voz
			snprintf(filename, DIR_STR_SIZE, "voice_%d.bin", i + 1);
 8003b6e:	7dfb      	ldrb	r3, [r7, #23]
 8003b70:	3301      	adds	r3, #1
 8003b72:	4a18      	ldr	r2, [pc, #96]	@ (8003bd4 <sd_task+0xc4>)
 8003b74:	2114      	movs	r1, #20
 8003b76:	6938      	ldr	r0, [r7, #16]
 8003b78:	f00e fb8a 	bl	8012290 <sniprintf>
			capture_and_store_voice(voice_buffer, VOICE_BUFFER_SIZE, filename);
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f7fe fd82 	bl	800268c <capture_and_store_voice>
		for(uint8_t i = 0; i < TEMPLATE_SAMPLES; i++){
 8003b88:	7dfb      	ldrb	r3, [r7, #23]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	75fb      	strb	r3, [r7, #23]
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d9d3      	bls.n	8003b3c <sd_task+0x2c>
		}
		vPortFree(voice_buffer);
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f00c fd7f 	bl	8010698 <vPortFree>

		//Genero template
		generate_template();
 8003b9a:	f7fe fdc5 	bl	8002728 <generate_template>

		//Envio mensaje al display para indicarle que ya se guardo el template
		current_message = PANTALLA_TEMPLATE_GUARDADO;
 8003b9e:	230f      	movs	r3, #15
 8003ba0:	72fb      	strb	r3, [r7, #11]
		xQueueSend(display_queue, &current_message, portMAX_DELAY);
 8003ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd0 <sd_task+0xc0>)
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	f107 010b 	add.w	r1, r7, #11
 8003baa:	2300      	movs	r3, #0
 8003bac:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb0:	f00a fcca 	bl	800e548 <xQueueGenericSend>

		//Desmonto tarjeta SD y libero memoria ocupada con filename
		unmount_sd("");
 8003bb4:	4804      	ldr	r0, [pc, #16]	@ (8003bc8 <sd_task+0xb8>)
 8003bb6:	f7ff fd7d 	bl	80036b4 <unmount_sd>
		vPortFree(filename);
 8003bba:	6938      	ldr	r0, [r7, #16]
 8003bbc:	f00c fd6c 	bl	8010698 <vPortFree>
	}

	while(1){
 8003bc0:	bf00      	nop
 8003bc2:	bf00      	nop
 8003bc4:	e7fd      	b.n	8003bc2 <sd_task+0xb2>
 8003bc6:	bf00      	nop
 8003bc8:	08012ed0 	.word	0x08012ed0
 8003bcc:	2000051c 	.word	0x2000051c
 8003bd0:	20000514 	.word	0x20000514
 8003bd4:	08012ed4 	.word	0x08012ed4

08003bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8003c18 <HAL_Init+0x40>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a0d      	ldr	r2, [pc, #52]	@ (8003c18 <HAL_Init+0x40>)
 8003be2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003be6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003be8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c18 <HAL_Init+0x40>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a0a      	ldr	r2, [pc, #40]	@ (8003c18 <HAL_Init+0x40>)
 8003bee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bf4:	4b08      	ldr	r3, [pc, #32]	@ (8003c18 <HAL_Init+0x40>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a07      	ldr	r2, [pc, #28]	@ (8003c18 <HAL_Init+0x40>)
 8003bfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c00:	2003      	movs	r0, #3
 8003c02:	f000 fe3e 	bl	8004882 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c06:	200f      	movs	r0, #15
 8003c08:	f7fe fb7e 	bl	8002308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c0c:	f7fe f994 	bl	8001f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40023c00 	.word	0x40023c00

08003c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c20:	4b06      	ldr	r3, [pc, #24]	@ (8003c3c <HAL_IncTick+0x20>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	4b06      	ldr	r3, [pc, #24]	@ (8003c40 <HAL_IncTick+0x24>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	4a04      	ldr	r2, [pc, #16]	@ (8003c40 <HAL_IncTick+0x24>)
 8003c2e:	6013      	str	r3, [r2, #0]
}
 8003c30:	bf00      	nop
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	20000028 	.word	0x20000028
 8003c40:	20002a64 	.word	0x20002a64

08003c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  return uwTick;
 8003c48:	4b03      	ldr	r3, [pc, #12]	@ (8003c58 <HAL_GetTick+0x14>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	20002a64 	.word	0x20002a64

08003c5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e033      	b.n	8003cda <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d109      	bne.n	8003c8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fe f988 	bl	8001f90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c92:	f003 0310 	and.w	r3, r3, #16
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d118      	bne.n	8003ccc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003ca2:	f023 0302 	bic.w	r3, r3, #2
 8003ca6:	f043 0202 	orr.w	r2, r3, #2
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fbb2 	bl	8004418 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbe:	f023 0303 	bic.w	r3, r3, #3
 8003cc2:	f043 0201 	orr.w	r2, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	641a      	str	r2, [r3, #64]	@ 0x40
 8003cca:	e001      	b.n	8003cd0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b086      	sub	sp, #24
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]
 8003cee:	2300      	movs	r3, #0
 8003cf0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f003 0320 	and.w	r3, r3, #32
 8003d10:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d049      	beq.n	8003dac <HAL_ADC_IRQHandler+0xca>
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d046      	beq.n	8003dac <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d105      	bne.n	8003d36 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d12b      	bne.n	8003d9c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d127      	bne.n	8003d9c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d52:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d006      	beq.n	8003d68 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d119      	bne.n	8003d9c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0220 	bic.w	r2, r2, #32
 8003d76:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d105      	bne.n	8003d9c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d94:	f043 0201 	orr.w	r2, r3, #1
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7fe f89d 	bl	8001edc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f06f 0212 	mvn.w	r2, #18
 8003daa:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dba:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d057      	beq.n	8003e72 <HAL_ADC_IRQHandler+0x190>
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d054      	beq.n	8003e72 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d105      	bne.n	8003de0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d139      	bne.n	8003e62 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d006      	beq.n	8003e0a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d12b      	bne.n	8003e62 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d124      	bne.n	8003e62 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d11d      	bne.n	8003e62 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d119      	bne.n	8003e62 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e3c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d105      	bne.n	8003e62 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5a:	f043 0201 	orr.w	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fc56 	bl	8004714 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f06f 020c 	mvn.w	r2, #12
 8003e70:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e80:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d017      	beq.n	8003eb8 <HAL_ADC_IRQHandler+0x1d6>
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d014      	beq.n	8003eb8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d10d      	bne.n	8003eb8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f97f 	bl	80041ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f06f 0201 	mvn.w	r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f003 0320 	and.w	r3, r3, #32
 8003ebe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ec6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d015      	beq.n	8003efa <HAL_ADC_IRQHandler+0x218>
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d012      	beq.n	8003efa <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed8:	f043 0202 	orr.w	r2, r3, #2
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f06f 0220 	mvn.w	r2, #32
 8003ee8:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f968 	bl	80041c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f06f 0220 	mvn.w	r2, #32
 8003ef8:	601a      	str	r2, [r3, #0]
  }
}
 8003efa:	bf00      	nop
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_ADC_Start_DMA+0x1e>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e0ce      	b.n	80040c0 <HAL_ADC_Start_DMA+0x1bc>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d018      	beq.n	8003f6a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0201 	orr.w	r2, r2, #1
 8003f46:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f48:	4b5f      	ldr	r3, [pc, #380]	@ (80040c8 <HAL_ADC_Start_DMA+0x1c4>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a5f      	ldr	r2, [pc, #380]	@ (80040cc <HAL_ADC_Start_DMA+0x1c8>)
 8003f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f52:	0c9a      	lsrs	r2, r3, #18
 8003f54:	4613      	mov	r3, r2
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	4413      	add	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003f5c:	e002      	b.n	8003f64 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f9      	bne.n	8003f5e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f78:	d107      	bne.n	8003f8a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f88:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	f040 8086 	bne.w	80040a6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003fa2:	f023 0301 	bic.w	r3, r3, #1
 8003fa6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d007      	beq.n	8003fcc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003fc4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fd8:	d106      	bne.n	8003fe8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fde:	f023 0206 	bic.w	r2, r3, #6
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	645a      	str	r2, [r3, #68]	@ 0x44
 8003fe6:	e002      	b.n	8003fee <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ff6:	4b36      	ldr	r3, [pc, #216]	@ (80040d0 <HAL_ADC_Start_DMA+0x1cc>)
 8003ff8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffe:	4a35      	ldr	r2, [pc, #212]	@ (80040d4 <HAL_ADC_Start_DMA+0x1d0>)
 8004000:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004006:	4a34      	ldr	r2, [pc, #208]	@ (80040d8 <HAL_ADC_Start_DMA+0x1d4>)
 8004008:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800400e:	4a33      	ldr	r2, [pc, #204]	@ (80040dc <HAL_ADC_Start_DMA+0x1d8>)
 8004010:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800401a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800402a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689a      	ldr	r2, [r3, #8]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800403a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	334c      	adds	r3, #76	@ 0x4c
 8004046:	4619      	mov	r1, r3
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f000 fcfc 	bl	8004a48 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10f      	bne.n	800407c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d129      	bne.n	80040be <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004078:	609a      	str	r2, [r3, #8]
 800407a:	e020      	b.n	80040be <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a17      	ldr	r2, [pc, #92]	@ (80040e0 <HAL_ADC_Start_DMA+0x1dc>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d11b      	bne.n	80040be <HAL_ADC_Start_DMA+0x1ba>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d114      	bne.n	80040be <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80040a2:	609a      	str	r2, [r3, #8]
 80040a4:	e00b      	b.n	80040be <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040aa:	f043 0210 	orr.w	r2, r3, #16
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b6:	f043 0201 	orr.w	r2, r3, #1
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	20000004 	.word	0x20000004
 80040cc:	431bde83 	.word	0x431bde83
 80040d0:	40012300 	.word	0x40012300
 80040d4:	08004611 	.word	0x08004611
 80040d8:	080046cb 	.word	0x080046cb
 80040dc:	080046e7 	.word	0x080046e7
 80040e0:	40012000 	.word	0x40012000

080040e4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_ADC_Stop_DMA+0x1a>
 80040fa:	2302      	movs	r3, #2
 80040fc:	e048      	b.n	8004190 <HAL_ADC_Stop_DMA+0xac>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0201 	bic.w	r2, r2, #1
 8004114:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d130      	bne.n	8004186 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004132:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004138:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d10f      	bne.n	8004162 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fcd6 	bl	8004af8 <HAL_DMA_Abort>
 800414c:	4603      	mov	r3, r0
 800414e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d005      	beq.n	8004162 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8004170:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004176:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800417a:	f023 0301 	bic.w	r3, r3, #1
 800417e:	f043 0201 	orr.w	r2, r3, #1
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800418e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <HAL_ADC_ConfigChannel+0x1c>
 80041ec:	2302      	movs	r3, #2
 80041ee:	e105      	b.n	80043fc <HAL_ADC_ConfigChannel+0x228>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b09      	cmp	r3, #9
 80041fe:	d925      	bls.n	800424c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68d9      	ldr	r1, [r3, #12]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	b29b      	uxth	r3, r3
 800420c:	461a      	mov	r2, r3
 800420e:	4613      	mov	r3, r2
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	4413      	add	r3, r2
 8004214:	3b1e      	subs	r3, #30
 8004216:	2207      	movs	r2, #7
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	43da      	mvns	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	400a      	ands	r2, r1
 8004224:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68d9      	ldr	r1, [r3, #12]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	b29b      	uxth	r3, r3
 8004236:	4618      	mov	r0, r3
 8004238:	4603      	mov	r3, r0
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	4403      	add	r3, r0
 800423e:	3b1e      	subs	r3, #30
 8004240:	409a      	lsls	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	60da      	str	r2, [r3, #12]
 800424a:	e022      	b.n	8004292 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6919      	ldr	r1, [r3, #16]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	b29b      	uxth	r3, r3
 8004258:	461a      	mov	r2, r3
 800425a:	4613      	mov	r3, r2
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	4413      	add	r3, r2
 8004260:	2207      	movs	r2, #7
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	43da      	mvns	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	400a      	ands	r2, r1
 800426e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6919      	ldr	r1, [r3, #16]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	b29b      	uxth	r3, r3
 8004280:	4618      	mov	r0, r3
 8004282:	4603      	mov	r3, r0
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	4403      	add	r3, r0
 8004288:	409a      	lsls	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b06      	cmp	r3, #6
 8004298:	d824      	bhi.n	80042e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	3b05      	subs	r3, #5
 80042ac:	221f      	movs	r2, #31
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	43da      	mvns	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	400a      	ands	r2, r1
 80042ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	4618      	mov	r0, r3
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	3b05      	subs	r3, #5
 80042d6:	fa00 f203 	lsl.w	r2, r0, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80042e2:	e04c      	b.n	800437e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b0c      	cmp	r3, #12
 80042ea:	d824      	bhi.n	8004336 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	4613      	mov	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	3b23      	subs	r3, #35	@ 0x23
 80042fe:	221f      	movs	r2, #31
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	43da      	mvns	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	400a      	ands	r2, r1
 800430c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	b29b      	uxth	r3, r3
 800431a:	4618      	mov	r0, r3
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	4613      	mov	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	3b23      	subs	r3, #35	@ 0x23
 8004328:	fa00 f203 	lsl.w	r2, r0, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	631a      	str	r2, [r3, #48]	@ 0x30
 8004334:	e023      	b.n	800437e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	4613      	mov	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	3b41      	subs	r3, #65	@ 0x41
 8004348:	221f      	movs	r2, #31
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43da      	mvns	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	400a      	ands	r2, r1
 8004356:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	b29b      	uxth	r3, r3
 8004364:	4618      	mov	r0, r3
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	4613      	mov	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	3b41      	subs	r3, #65	@ 0x41
 8004372:	fa00 f203 	lsl.w	r2, r0, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800437e:	4b22      	ldr	r3, [pc, #136]	@ (8004408 <HAL_ADC_ConfigChannel+0x234>)
 8004380:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a21      	ldr	r2, [pc, #132]	@ (800440c <HAL_ADC_ConfigChannel+0x238>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d109      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x1cc>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b12      	cmp	r3, #18
 8004392:	d105      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a19      	ldr	r2, [pc, #100]	@ (800440c <HAL_ADC_ConfigChannel+0x238>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d123      	bne.n	80043f2 <HAL_ADC_ConfigChannel+0x21e>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b10      	cmp	r3, #16
 80043b0:	d003      	beq.n	80043ba <HAL_ADC_ConfigChannel+0x1e6>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b11      	cmp	r3, #17
 80043b8:	d11b      	bne.n	80043f2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b10      	cmp	r3, #16
 80043cc:	d111      	bne.n	80043f2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80043ce:	4b10      	ldr	r3, [pc, #64]	@ (8004410 <HAL_ADC_ConfigChannel+0x23c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a10      	ldr	r2, [pc, #64]	@ (8004414 <HAL_ADC_ConfigChannel+0x240>)
 80043d4:	fba2 2303 	umull	r2, r3, r2, r3
 80043d8:	0c9a      	lsrs	r2, r3, #18
 80043da:	4613      	mov	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80043e4:	e002      	b.n	80043ec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	3b01      	subs	r3, #1
 80043ea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f9      	bne.n	80043e6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	40012300 	.word	0x40012300
 800440c:	40012000 	.word	0x40012000
 8004410:	20000004 	.word	0x20000004
 8004414:	431bde83 	.word	0x431bde83

08004418 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004420:	4b79      	ldr	r3, [pc, #484]	@ (8004608 <ADC_Init+0x1f0>)
 8004422:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	431a      	orrs	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800444c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6859      	ldr	r1, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	021a      	lsls	r2, r3, #8
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004470:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6859      	ldr	r1, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004492:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6899      	ldr	r1, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044aa:	4a58      	ldr	r2, [pc, #352]	@ (800460c <ADC_Init+0x1f4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d022      	beq.n	80044f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80044be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6899      	ldr	r1, [r3, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80044e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6899      	ldr	r1, [r3, #8]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	609a      	str	r2, [r3, #8]
 80044f4:	e00f      	b.n	8004516 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004504:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004514:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0202 	bic.w	r2, r2, #2
 8004524:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6899      	ldr	r1, [r3, #8]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	7e1b      	ldrb	r3, [r3, #24]
 8004530:	005a      	lsls	r2, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01b      	beq.n	800457c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004552:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004562:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6859      	ldr	r1, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456e:	3b01      	subs	r3, #1
 8004570:	035a      	lsls	r2, r3, #13
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	605a      	str	r2, [r3, #4]
 800457a:	e007      	b.n	800458c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800458a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800459a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	051a      	lsls	r2, r3, #20
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80045c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6899      	ldr	r1, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80045ce:	025a      	lsls	r2, r3, #9
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6899      	ldr	r1, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	029a      	lsls	r2, r3, #10
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	609a      	str	r2, [r3, #8]
}
 80045fc:	bf00      	nop
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	40012300 	.word	0x40012300
 800460c:	0f000001 	.word	0x0f000001

08004610 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004622:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004626:	2b00      	cmp	r3, #0
 8004628:	d13c      	bne.n	80046a4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d12b      	bne.n	800469c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004648:	2b00      	cmp	r3, #0
 800464a:	d127      	bne.n	800469c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004652:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004656:	2b00      	cmp	r3, #0
 8004658:	d006      	beq.n	8004668 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004664:	2b00      	cmp	r3, #0
 8004666:	d119      	bne.n	800469c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0220 	bic.w	r2, r2, #32
 8004676:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004688:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d105      	bne.n	800469c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004694:	f043 0201 	orr.w	r2, r3, #1
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f7fd fc1d 	bl	8001edc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80046a2:	e00e      	b.n	80046c2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a8:	f003 0310 	and.w	r3, r3, #16
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f7ff fd85 	bl	80041c0 <HAL_ADC_ErrorCallback>
}
 80046b6:	e004      	b.n	80046c2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	4798      	blx	r3
}
 80046c2:	bf00      	nop
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b084      	sub	sp, #16
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f7ff fd5d 	bl	8004198 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046de:	bf00      	nop
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b084      	sub	sp, #16
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2240      	movs	r2, #64	@ 0x40
 80046f8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fe:	f043 0204 	orr.w	r2, r3, #4
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f7ff fd5a 	bl	80041c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800470c:	bf00      	nop
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004738:	4b0c      	ldr	r3, [pc, #48]	@ (800476c <__NVIC_SetPriorityGrouping+0x44>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004744:	4013      	ands	r3, r2
 8004746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004750:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004754:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800475a:	4a04      	ldr	r2, [pc, #16]	@ (800476c <__NVIC_SetPriorityGrouping+0x44>)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	60d3      	str	r3, [r2, #12]
}
 8004760:	bf00      	nop
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	e000ed00 	.word	0xe000ed00

08004770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004774:	4b04      	ldr	r3, [pc, #16]	@ (8004788 <__NVIC_GetPriorityGrouping+0x18>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	0a1b      	lsrs	r3, r3, #8
 800477a:	f003 0307 	and.w	r3, r3, #7
}
 800477e:	4618      	mov	r0, r3
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	e000ed00 	.word	0xe000ed00

0800478c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	4603      	mov	r3, r0
 8004794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479a:	2b00      	cmp	r3, #0
 800479c:	db0b      	blt.n	80047b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	f003 021f 	and.w	r2, r3, #31
 80047a4:	4907      	ldr	r1, [pc, #28]	@ (80047c4 <__NVIC_EnableIRQ+0x38>)
 80047a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047aa:	095b      	lsrs	r3, r3, #5
 80047ac:	2001      	movs	r0, #1
 80047ae:	fa00 f202 	lsl.w	r2, r0, r2
 80047b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	e000e100 	.word	0xe000e100

080047c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	4603      	mov	r3, r0
 80047d0:	6039      	str	r1, [r7, #0]
 80047d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	db0a      	blt.n	80047f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	490c      	ldr	r1, [pc, #48]	@ (8004814 <__NVIC_SetPriority+0x4c>)
 80047e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e6:	0112      	lsls	r2, r2, #4
 80047e8:	b2d2      	uxtb	r2, r2
 80047ea:	440b      	add	r3, r1
 80047ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047f0:	e00a      	b.n	8004808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	4908      	ldr	r1, [pc, #32]	@ (8004818 <__NVIC_SetPriority+0x50>)
 80047f8:	79fb      	ldrb	r3, [r7, #7]
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	3b04      	subs	r3, #4
 8004800:	0112      	lsls	r2, r2, #4
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	440b      	add	r3, r1
 8004806:	761a      	strb	r2, [r3, #24]
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	e000e100 	.word	0xe000e100
 8004818:	e000ed00 	.word	0xe000ed00

0800481c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800481c:	b480      	push	{r7}
 800481e:	b089      	sub	sp, #36	@ 0x24
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	f1c3 0307 	rsb	r3, r3, #7
 8004836:	2b04      	cmp	r3, #4
 8004838:	bf28      	it	cs
 800483a:	2304      	movcs	r3, #4
 800483c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	3304      	adds	r3, #4
 8004842:	2b06      	cmp	r3, #6
 8004844:	d902      	bls.n	800484c <NVIC_EncodePriority+0x30>
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	3b03      	subs	r3, #3
 800484a:	e000      	b.n	800484e <NVIC_EncodePriority+0x32>
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004850:	f04f 32ff 	mov.w	r2, #4294967295
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	43da      	mvns	r2, r3
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	401a      	ands	r2, r3
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004864:	f04f 31ff 	mov.w	r1, #4294967295
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	fa01 f303 	lsl.w	r3, r1, r3
 800486e:	43d9      	mvns	r1, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004874:	4313      	orrs	r3, r2
         );
}
 8004876:	4618      	mov	r0, r3
 8004878:	3724      	adds	r7, #36	@ 0x24
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b082      	sub	sp, #8
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7ff ff4c 	bl	8004728 <__NVIC_SetPriorityGrouping>
}
 8004890:	bf00      	nop
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	4603      	mov	r3, r0
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048aa:	f7ff ff61 	bl	8004770 <__NVIC_GetPriorityGrouping>
 80048ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	68b9      	ldr	r1, [r7, #8]
 80048b4:	6978      	ldr	r0, [r7, #20]
 80048b6:	f7ff ffb1 	bl	800481c <NVIC_EncodePriority>
 80048ba:	4602      	mov	r2, r0
 80048bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048c0:	4611      	mov	r1, r2
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff ff80 	bl	80047c8 <__NVIC_SetPriority>
}
 80048c8:	bf00      	nop
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7ff ff54 	bl	800478c <__NVIC_EnableIRQ>
}
 80048e4:	bf00      	nop
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80048f8:	f7ff f9a4 	bl	8003c44 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e099      	b.n	8004a3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 0201 	bic.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004928:	e00f      	b.n	800494a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800492a:	f7ff f98b 	bl	8003c44 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b05      	cmp	r3, #5
 8004936:	d908      	bls.n	800494a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2220      	movs	r2, #32
 800493c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2203      	movs	r2, #3
 8004942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e078      	b.n	8004a3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e8      	bne.n	800492a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	4b38      	ldr	r3, [pc, #224]	@ (8004a44 <HAL_DMA_Init+0x158>)
 8004964:	4013      	ands	r3, r2
 8004966:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004976:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004982:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800498e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	4313      	orrs	r3, r2
 800499a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d107      	bne.n	80049b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ac:	4313      	orrs	r3, r2
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f023 0307 	bic.w	r3, r3, #7
 80049ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d117      	bne.n	8004a0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00e      	beq.n	8004a0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fadf 	bl	8004fb4 <DMA_CheckFifoParam>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d008      	beq.n	8004a0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2240      	movs	r2, #64	@ 0x40
 8004a00:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e016      	b.n	8004a3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fa96 	bl	8004f48 <DMA_CalcBaseAndBitshift>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a24:	223f      	movs	r2, #63	@ 0x3f
 8004a26:	409a      	lsls	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	f010803f 	.word	0xf010803f

08004a48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <HAL_DMA_Start_IT+0x26>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e040      	b.n	8004af0 <HAL_DMA_Start_IT+0xa8>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d12f      	bne.n	8004ae2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2202      	movs	r2, #2
 8004a86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	68b9      	ldr	r1, [r7, #8]
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 fa28 	bl	8004eec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa0:	223f      	movs	r2, #63	@ 0x3f
 8004aa2:	409a      	lsls	r2, r3
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0216 	orr.w	r2, r2, #22
 8004ab6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d007      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0208 	orr.w	r2, r2, #8
 8004ace:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	e005      	b.n	8004aee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004aea:	2302      	movs	r3, #2
 8004aec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b06:	f7ff f89d 	bl	8003c44 <HAL_GetTick>
 8004b0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d008      	beq.n	8004b2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2280      	movs	r2, #128	@ 0x80
 8004b1c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e052      	b.n	8004bd0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0216 	bic.w	r2, r2, #22
 8004b38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695a      	ldr	r2, [r3, #20]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d103      	bne.n	8004b5a <HAL_DMA_Abort+0x62>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d007      	beq.n	8004b6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 0208 	bic.w	r2, r2, #8
 8004b68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0201 	bic.w	r2, r2, #1
 8004b78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b7a:	e013      	b.n	8004ba4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b7c:	f7ff f862 	bl	8003c44 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b05      	cmp	r3, #5
 8004b88:	d90c      	bls.n	8004ba4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2203      	movs	r2, #3
 8004b94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e015      	b.n	8004bd0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1e4      	bne.n	8004b7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb6:	223f      	movs	r2, #63	@ 0x3f
 8004bb8:	409a      	lsls	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004be4:	4b8e      	ldr	r3, [pc, #568]	@ (8004e20 <HAL_DMA_IRQHandler+0x248>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a8e      	ldr	r2, [pc, #568]	@ (8004e24 <HAL_DMA_IRQHandler+0x24c>)
 8004bea:	fba2 2303 	umull	r2, r3, r2, r3
 8004bee:	0a9b      	lsrs	r3, r3, #10
 8004bf0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c02:	2208      	movs	r2, #8
 8004c04:	409a      	lsls	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d01a      	beq.n	8004c44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d013      	beq.n	8004c44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0204 	bic.w	r2, r2, #4
 8004c2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c30:	2208      	movs	r2, #8
 8004c32:	409a      	lsls	r2, r3
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c3c:	f043 0201 	orr.w	r2, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c48:	2201      	movs	r2, #1
 8004c4a:	409a      	lsls	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d012      	beq.n	8004c7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00b      	beq.n	8004c7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c66:	2201      	movs	r2, #1
 8004c68:	409a      	lsls	r2, r3
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c72:	f043 0202 	orr.w	r2, r3, #2
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c7e:	2204      	movs	r2, #4
 8004c80:	409a      	lsls	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4013      	ands	r3, r2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d012      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00b      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c9c:	2204      	movs	r2, #4
 8004c9e:	409a      	lsls	r2, r3
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca8:	f043 0204 	orr.w	r2, r3, #4
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb4:	2210      	movs	r2, #16
 8004cb6:	409a      	lsls	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d043      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d03c      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd2:	2210      	movs	r2, #16
 8004cd4:	409a      	lsls	r2, r3
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d018      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d108      	bne.n	8004d08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d024      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	4798      	blx	r3
 8004d06:	e01f      	b.n	8004d48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01b      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	4798      	blx	r3
 8004d18:	e016      	b.n	8004d48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d107      	bne.n	8004d38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0208 	bic.w	r2, r2, #8
 8004d36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	409a      	lsls	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4013      	ands	r3, r2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 808f 	beq.w	8004e78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0310 	and.w	r3, r3, #16
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 8087 	beq.w	8004e78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d6e:	2220      	movs	r2, #32
 8004d70:	409a      	lsls	r2, r3
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b05      	cmp	r3, #5
 8004d80:	d136      	bne.n	8004df0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0216 	bic.w	r2, r2, #22
 8004d90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695a      	ldr	r2, [r3, #20]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004da0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d103      	bne.n	8004db2 <HAL_DMA_IRQHandler+0x1da>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d007      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0208 	bic.w	r2, r2, #8
 8004dc0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc6:	223f      	movs	r2, #63	@ 0x3f
 8004dc8:	409a      	lsls	r2, r3
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d07e      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	4798      	blx	r3
        }
        return;
 8004dee:	e079      	b.n	8004ee4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d01d      	beq.n	8004e3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10d      	bne.n	8004e28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d031      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	4798      	blx	r3
 8004e1c:	e02c      	b.n	8004e78 <HAL_DMA_IRQHandler+0x2a0>
 8004e1e:	bf00      	nop
 8004e20:	20000004 	.word	0x20000004
 8004e24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d023      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	4798      	blx	r3
 8004e38:	e01e      	b.n	8004e78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10f      	bne.n	8004e68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0210 	bic.w	r2, r2, #16
 8004e56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d032      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d022      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2205      	movs	r2, #5
 8004e90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0201 	bic.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	60bb      	str	r3, [r7, #8]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d307      	bcc.n	8004ec0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f2      	bne.n	8004ea4 <HAL_DMA_IRQHandler+0x2cc>
 8004ebe:	e000      	b.n	8004ec2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ec0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d005      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	4798      	blx	r3
 8004ee2:	e000      	b.n	8004ee6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ee4:	bf00      	nop
    }
  }
}
 8004ee6:	3718      	adds	r7, #24
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004f08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	2b40      	cmp	r3, #64	@ 0x40
 8004f18:	d108      	bne.n	8004f2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f2a:	e007      	b.n	8004f3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	60da      	str	r2, [r3, #12]
}
 8004f3c:	bf00      	nop
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	3b10      	subs	r3, #16
 8004f58:	4a14      	ldr	r2, [pc, #80]	@ (8004fac <DMA_CalcBaseAndBitshift+0x64>)
 8004f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5e:	091b      	lsrs	r3, r3, #4
 8004f60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f62:	4a13      	ldr	r2, [pc, #76]	@ (8004fb0 <DMA_CalcBaseAndBitshift+0x68>)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4413      	add	r3, r2
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	d909      	bls.n	8004f8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004f7e:	f023 0303 	bic.w	r3, r3, #3
 8004f82:	1d1a      	adds	r2, r3, #4
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	659a      	str	r2, [r3, #88]	@ 0x58
 8004f88:	e007      	b.n	8004f9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004f92:	f023 0303 	bic.w	r3, r3, #3
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	aaaaaaab 	.word	0xaaaaaaab
 8004fb0:	08016a34 	.word	0x08016a34

08004fb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d11f      	bne.n	800500e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b03      	cmp	r3, #3
 8004fd2:	d856      	bhi.n	8005082 <DMA_CheckFifoParam+0xce>
 8004fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8004fdc <DMA_CheckFifoParam+0x28>)
 8004fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fda:	bf00      	nop
 8004fdc:	08004fed 	.word	0x08004fed
 8004fe0:	08004fff 	.word	0x08004fff
 8004fe4:	08004fed 	.word	0x08004fed
 8004fe8:	08005083 	.word	0x08005083
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d046      	beq.n	8005086 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ffc:	e043      	b.n	8005086 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005002:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005006:	d140      	bne.n	800508a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800500c:	e03d      	b.n	800508a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005016:	d121      	bne.n	800505c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	2b03      	cmp	r3, #3
 800501c:	d837      	bhi.n	800508e <DMA_CheckFifoParam+0xda>
 800501e:	a201      	add	r2, pc, #4	@ (adr r2, 8005024 <DMA_CheckFifoParam+0x70>)
 8005020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005024:	08005035 	.word	0x08005035
 8005028:	0800503b 	.word	0x0800503b
 800502c:	08005035 	.word	0x08005035
 8005030:	0800504d 	.word	0x0800504d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	73fb      	strb	r3, [r7, #15]
      break;
 8005038:	e030      	b.n	800509c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d025      	beq.n	8005092 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800504a:	e022      	b.n	8005092 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005050:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005054:	d11f      	bne.n	8005096 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800505a:	e01c      	b.n	8005096 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2b02      	cmp	r3, #2
 8005060:	d903      	bls.n	800506a <DMA_CheckFifoParam+0xb6>
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2b03      	cmp	r3, #3
 8005066:	d003      	beq.n	8005070 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005068:	e018      	b.n	800509c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	73fb      	strb	r3, [r7, #15]
      break;
 800506e:	e015      	b.n	800509c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005074:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00e      	beq.n	800509a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	73fb      	strb	r3, [r7, #15]
      break;
 8005080:	e00b      	b.n	800509a <DMA_CheckFifoParam+0xe6>
      break;
 8005082:	bf00      	nop
 8005084:	e00a      	b.n	800509c <DMA_CheckFifoParam+0xe8>
      break;
 8005086:	bf00      	nop
 8005088:	e008      	b.n	800509c <DMA_CheckFifoParam+0xe8>
      break;
 800508a:	bf00      	nop
 800508c:	e006      	b.n	800509c <DMA_CheckFifoParam+0xe8>
      break;
 800508e:	bf00      	nop
 8005090:	e004      	b.n	800509c <DMA_CheckFifoParam+0xe8>
      break;
 8005092:	bf00      	nop
 8005094:	e002      	b.n	800509c <DMA_CheckFifoParam+0xe8>
      break;   
 8005096:	bf00      	nop
 8005098:	e000      	b.n	800509c <DMA_CheckFifoParam+0xe8>
      break;
 800509a:	bf00      	nop
    }
  } 
  
  return status; 
 800509c:	7bfb      	ldrb	r3, [r7, #15]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop

080050ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b089      	sub	sp, #36	@ 0x24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050be:	2300      	movs	r3, #0
 80050c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050c2:	2300      	movs	r3, #0
 80050c4:	61fb      	str	r3, [r7, #28]
 80050c6:	e159      	b.n	800537c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050c8:	2201      	movs	r2, #1
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	fa02 f303 	lsl.w	r3, r2, r3
 80050d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	4013      	ands	r3, r2
 80050da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	f040 8148 	bne.w	8005376 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d005      	beq.n	80050fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d130      	bne.n	8005160 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	2203      	movs	r2, #3
 800510a:	fa02 f303 	lsl.w	r3, r2, r3
 800510e:	43db      	mvns	r3, r3
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	4013      	ands	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68da      	ldr	r2, [r3, #12]
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	fa02 f303 	lsl.w	r3, r2, r3
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	4313      	orrs	r3, r2
 8005126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005134:	2201      	movs	r2, #1
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	fa02 f303 	lsl.w	r3, r2, r3
 800513c:	43db      	mvns	r3, r3
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	4013      	ands	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	091b      	lsrs	r3, r3, #4
 800514a:	f003 0201 	and.w	r2, r3, #1
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	fa02 f303 	lsl.w	r3, r2, r3
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	4313      	orrs	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f003 0303 	and.w	r3, r3, #3
 8005168:	2b03      	cmp	r3, #3
 800516a:	d017      	beq.n	800519c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	2203      	movs	r2, #3
 8005178:	fa02 f303 	lsl.w	r3, r2, r3
 800517c:	43db      	mvns	r3, r3
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	4013      	ands	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	fa02 f303 	lsl.w	r3, r2, r3
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	4313      	orrs	r3, r2
 8005194:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f003 0303 	and.w	r3, r3, #3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d123      	bne.n	80051f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	08da      	lsrs	r2, r3, #3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3208      	adds	r2, #8
 80051b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	220f      	movs	r2, #15
 80051c0:	fa02 f303 	lsl.w	r3, r2, r3
 80051c4:	43db      	mvns	r3, r3
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	4013      	ands	r3, r2
 80051ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	691a      	ldr	r2, [r3, #16]
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	fa02 f303 	lsl.w	r3, r2, r3
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	4313      	orrs	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	08da      	lsrs	r2, r3, #3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	3208      	adds	r2, #8
 80051ea:	69b9      	ldr	r1, [r7, #24]
 80051ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	2203      	movs	r2, #3
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	43db      	mvns	r3, r3
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	4013      	ands	r3, r2
 8005206:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f003 0203 	and.w	r2, r3, #3
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	fa02 f303 	lsl.w	r3, r2, r3
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	4313      	orrs	r3, r2
 800521c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 80a2 	beq.w	8005376 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005232:	2300      	movs	r3, #0
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	4b57      	ldr	r3, [pc, #348]	@ (8005394 <HAL_GPIO_Init+0x2e8>)
 8005238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800523a:	4a56      	ldr	r2, [pc, #344]	@ (8005394 <HAL_GPIO_Init+0x2e8>)
 800523c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005240:	6453      	str	r3, [r2, #68]	@ 0x44
 8005242:	4b54      	ldr	r3, [pc, #336]	@ (8005394 <HAL_GPIO_Init+0x2e8>)
 8005244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005246:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800524e:	4a52      	ldr	r2, [pc, #328]	@ (8005398 <HAL_GPIO_Init+0x2ec>)
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	089b      	lsrs	r3, r3, #2
 8005254:	3302      	adds	r3, #2
 8005256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800525a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f003 0303 	and.w	r3, r3, #3
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	220f      	movs	r2, #15
 8005266:	fa02 f303 	lsl.w	r3, r2, r3
 800526a:	43db      	mvns	r3, r3
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	4013      	ands	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a49      	ldr	r2, [pc, #292]	@ (800539c <HAL_GPIO_Init+0x2f0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d019      	beq.n	80052ae <HAL_GPIO_Init+0x202>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a48      	ldr	r2, [pc, #288]	@ (80053a0 <HAL_GPIO_Init+0x2f4>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d013      	beq.n	80052aa <HAL_GPIO_Init+0x1fe>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a47      	ldr	r2, [pc, #284]	@ (80053a4 <HAL_GPIO_Init+0x2f8>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d00d      	beq.n	80052a6 <HAL_GPIO_Init+0x1fa>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a46      	ldr	r2, [pc, #280]	@ (80053a8 <HAL_GPIO_Init+0x2fc>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d007      	beq.n	80052a2 <HAL_GPIO_Init+0x1f6>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a45      	ldr	r2, [pc, #276]	@ (80053ac <HAL_GPIO_Init+0x300>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d101      	bne.n	800529e <HAL_GPIO_Init+0x1f2>
 800529a:	2304      	movs	r3, #4
 800529c:	e008      	b.n	80052b0 <HAL_GPIO_Init+0x204>
 800529e:	2307      	movs	r3, #7
 80052a0:	e006      	b.n	80052b0 <HAL_GPIO_Init+0x204>
 80052a2:	2303      	movs	r3, #3
 80052a4:	e004      	b.n	80052b0 <HAL_GPIO_Init+0x204>
 80052a6:	2302      	movs	r3, #2
 80052a8:	e002      	b.n	80052b0 <HAL_GPIO_Init+0x204>
 80052aa:	2301      	movs	r3, #1
 80052ac:	e000      	b.n	80052b0 <HAL_GPIO_Init+0x204>
 80052ae:	2300      	movs	r3, #0
 80052b0:	69fa      	ldr	r2, [r7, #28]
 80052b2:	f002 0203 	and.w	r2, r2, #3
 80052b6:	0092      	lsls	r2, r2, #2
 80052b8:	4093      	lsls	r3, r2
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	4313      	orrs	r3, r2
 80052be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052c0:	4935      	ldr	r1, [pc, #212]	@ (8005398 <HAL_GPIO_Init+0x2ec>)
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	089b      	lsrs	r3, r3, #2
 80052c6:	3302      	adds	r3, #2
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052ce:	4b38      	ldr	r3, [pc, #224]	@ (80053b0 <HAL_GPIO_Init+0x304>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	43db      	mvns	r3, r3
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	4013      	ands	r3, r2
 80052dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052f2:	4a2f      	ldr	r2, [pc, #188]	@ (80053b0 <HAL_GPIO_Init+0x304>)
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052f8:	4b2d      	ldr	r3, [pc, #180]	@ (80053b0 <HAL_GPIO_Init+0x304>)
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	43db      	mvns	r3, r3
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	4013      	ands	r3, r2
 8005306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	4313      	orrs	r3, r2
 800531a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800531c:	4a24      	ldr	r2, [pc, #144]	@ (80053b0 <HAL_GPIO_Init+0x304>)
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005322:	4b23      	ldr	r3, [pc, #140]	@ (80053b0 <HAL_GPIO_Init+0x304>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	43db      	mvns	r3, r3
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	4013      	ands	r3, r2
 8005330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	4313      	orrs	r3, r2
 8005344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005346:	4a1a      	ldr	r2, [pc, #104]	@ (80053b0 <HAL_GPIO_Init+0x304>)
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800534c:	4b18      	ldr	r3, [pc, #96]	@ (80053b0 <HAL_GPIO_Init+0x304>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	43db      	mvns	r3, r3
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	4013      	ands	r3, r2
 800535a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	4313      	orrs	r3, r2
 800536e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005370:	4a0f      	ldr	r2, [pc, #60]	@ (80053b0 <HAL_GPIO_Init+0x304>)
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	3301      	adds	r3, #1
 800537a:	61fb      	str	r3, [r7, #28]
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	2b0f      	cmp	r3, #15
 8005380:	f67f aea2 	bls.w	80050c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005384:	bf00      	nop
 8005386:	bf00      	nop
 8005388:	3724      	adds	r7, #36	@ 0x24
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40023800 	.word	0x40023800
 8005398:	40013800 	.word	0x40013800
 800539c:	40020000 	.word	0x40020000
 80053a0:	40020400 	.word	0x40020400
 80053a4:	40020800 	.word	0x40020800
 80053a8:	40020c00 	.word	0x40020c00
 80053ac:	40021000 	.word	0x40021000
 80053b0:	40013c00 	.word	0x40013c00

080053b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	460b      	mov	r3, r1
 80053be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691a      	ldr	r2, [r3, #16]
 80053c4:	887b      	ldrh	r3, [r7, #2]
 80053c6:	4013      	ands	r3, r2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d002      	beq.n	80053d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80053cc:	2301      	movs	r3, #1
 80053ce:	73fb      	strb	r3, [r7, #15]
 80053d0:	e001      	b.n	80053d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053d2:	2300      	movs	r3, #0
 80053d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	460b      	mov	r3, r1
 80053ee:	807b      	strh	r3, [r7, #2]
 80053f0:	4613      	mov	r3, r2
 80053f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053f4:	787b      	ldrb	r3, [r7, #1]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053fa:	887a      	ldrh	r2, [r7, #2]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005400:	e003      	b.n	800540a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005402:	887b      	ldrh	r3, [r7, #2]
 8005404:	041a      	lsls	r2, r3, #16
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	619a      	str	r2, [r3, #24]
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
	...

08005418 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e12b      	b.n	8005682 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fc fe24 	bl	800208c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2224      	movs	r2, #36	@ 0x24
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0201 	bic.w	r2, r2, #1
 800545a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800546a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800547a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800547c:	f001 f8ea 	bl	8006654 <HAL_RCC_GetPCLK1Freq>
 8005480:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	4a81      	ldr	r2, [pc, #516]	@ (800568c <HAL_I2C_Init+0x274>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d807      	bhi.n	800549c <HAL_I2C_Init+0x84>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4a80      	ldr	r2, [pc, #512]	@ (8005690 <HAL_I2C_Init+0x278>)
 8005490:	4293      	cmp	r3, r2
 8005492:	bf94      	ite	ls
 8005494:	2301      	movls	r3, #1
 8005496:	2300      	movhi	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	e006      	b.n	80054aa <HAL_I2C_Init+0x92>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4a7d      	ldr	r2, [pc, #500]	@ (8005694 <HAL_I2C_Init+0x27c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	bf94      	ite	ls
 80054a4:	2301      	movls	r3, #1
 80054a6:	2300      	movhi	r3, #0
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e0e7      	b.n	8005682 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	4a78      	ldr	r2, [pc, #480]	@ (8005698 <HAL_I2C_Init+0x280>)
 80054b6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ba:	0c9b      	lsrs	r3, r3, #18
 80054bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	4a6a      	ldr	r2, [pc, #424]	@ (800568c <HAL_I2C_Init+0x274>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d802      	bhi.n	80054ec <HAL_I2C_Init+0xd4>
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	3301      	adds	r3, #1
 80054ea:	e009      	b.n	8005500 <HAL_I2C_Init+0xe8>
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80054f2:	fb02 f303 	mul.w	r3, r2, r3
 80054f6:	4a69      	ldr	r2, [pc, #420]	@ (800569c <HAL_I2C_Init+0x284>)
 80054f8:	fba2 2303 	umull	r2, r3, r2, r3
 80054fc:	099b      	lsrs	r3, r3, #6
 80054fe:	3301      	adds	r3, #1
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6812      	ldr	r2, [r2, #0]
 8005504:	430b      	orrs	r3, r1
 8005506:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005512:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	495c      	ldr	r1, [pc, #368]	@ (800568c <HAL_I2C_Init+0x274>)
 800551c:	428b      	cmp	r3, r1
 800551e:	d819      	bhi.n	8005554 <HAL_I2C_Init+0x13c>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	1e59      	subs	r1, r3, #1
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	fbb1 f3f3 	udiv	r3, r1, r3
 800552e:	1c59      	adds	r1, r3, #1
 8005530:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005534:	400b      	ands	r3, r1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00a      	beq.n	8005550 <HAL_I2C_Init+0x138>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	1e59      	subs	r1, r3, #1
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	fbb1 f3f3 	udiv	r3, r1, r3
 8005548:	3301      	adds	r3, #1
 800554a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800554e:	e051      	b.n	80055f4 <HAL_I2C_Init+0x1dc>
 8005550:	2304      	movs	r3, #4
 8005552:	e04f      	b.n	80055f4 <HAL_I2C_Init+0x1dc>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d111      	bne.n	8005580 <HAL_I2C_Init+0x168>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	1e58      	subs	r0, r3, #1
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6859      	ldr	r1, [r3, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	440b      	add	r3, r1
 800556a:	fbb0 f3f3 	udiv	r3, r0, r3
 800556e:	3301      	adds	r3, #1
 8005570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005574:	2b00      	cmp	r3, #0
 8005576:	bf0c      	ite	eq
 8005578:	2301      	moveq	r3, #1
 800557a:	2300      	movne	r3, #0
 800557c:	b2db      	uxtb	r3, r3
 800557e:	e012      	b.n	80055a6 <HAL_I2C_Init+0x18e>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	1e58      	subs	r0, r3, #1
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6859      	ldr	r1, [r3, #4]
 8005588:	460b      	mov	r3, r1
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	440b      	add	r3, r1
 800558e:	0099      	lsls	r1, r3, #2
 8005590:	440b      	add	r3, r1
 8005592:	fbb0 f3f3 	udiv	r3, r0, r3
 8005596:	3301      	adds	r3, #1
 8005598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800559c:	2b00      	cmp	r3, #0
 800559e:	bf0c      	ite	eq
 80055a0:	2301      	moveq	r3, #1
 80055a2:	2300      	movne	r3, #0
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <HAL_I2C_Init+0x196>
 80055aa:	2301      	movs	r3, #1
 80055ac:	e022      	b.n	80055f4 <HAL_I2C_Init+0x1dc>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10e      	bne.n	80055d4 <HAL_I2C_Init+0x1bc>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	1e58      	subs	r0, r3, #1
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6859      	ldr	r1, [r3, #4]
 80055be:	460b      	mov	r3, r1
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	440b      	add	r3, r1
 80055c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80055c8:	3301      	adds	r3, #1
 80055ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055d2:	e00f      	b.n	80055f4 <HAL_I2C_Init+0x1dc>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	1e58      	subs	r0, r3, #1
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6859      	ldr	r1, [r3, #4]
 80055dc:	460b      	mov	r3, r1
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	440b      	add	r3, r1
 80055e2:	0099      	lsls	r1, r3, #2
 80055e4:	440b      	add	r3, r1
 80055e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ea:	3301      	adds	r3, #1
 80055ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	6809      	ldr	r1, [r1, #0]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69da      	ldr	r2, [r3, #28]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	431a      	orrs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005622:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6911      	ldr	r1, [r2, #16]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	68d2      	ldr	r2, [r2, #12]
 800562e:	4311      	orrs	r1, r2
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6812      	ldr	r2, [r2, #0]
 8005634:	430b      	orrs	r3, r1
 8005636:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	695a      	ldr	r2, [r3, #20]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0201 	orr.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2220      	movs	r2, #32
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	000186a0 	.word	0x000186a0
 8005690:	001e847f 	.word	0x001e847f
 8005694:	003d08ff 	.word	0x003d08ff
 8005698:	431bde83 	.word	0x431bde83
 800569c:	10624dd3 	.word	0x10624dd3

080056a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af02      	add	r7, sp, #8
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	4608      	mov	r0, r1
 80056aa:	4611      	mov	r1, r2
 80056ac:	461a      	mov	r2, r3
 80056ae:	4603      	mov	r3, r0
 80056b0:	817b      	strh	r3, [r7, #10]
 80056b2:	460b      	mov	r3, r1
 80056b4:	813b      	strh	r3, [r7, #8]
 80056b6:	4613      	mov	r3, r2
 80056b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056ba:	f7fe fac3 	bl	8003c44 <HAL_GetTick>
 80056be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b20      	cmp	r3, #32
 80056ca:	f040 80d9 	bne.w	8005880 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	2319      	movs	r3, #25
 80056d4:	2201      	movs	r2, #1
 80056d6:	496d      	ldr	r1, [pc, #436]	@ (800588c <HAL_I2C_Mem_Write+0x1ec>)
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 f971 	bl	80059c0 <I2C_WaitOnFlagUntilTimeout>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80056e4:	2302      	movs	r3, #2
 80056e6:	e0cc      	b.n	8005882 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d101      	bne.n	80056f6 <HAL_I2C_Mem_Write+0x56>
 80056f2:	2302      	movs	r3, #2
 80056f4:	e0c5      	b.n	8005882 <HAL_I2C_Mem_Write+0x1e2>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b01      	cmp	r3, #1
 800570a:	d007      	beq.n	800571c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 0201 	orr.w	r2, r2, #1
 800571a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800572a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2221      	movs	r2, #33	@ 0x21
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2240      	movs	r2, #64	@ 0x40
 8005738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6a3a      	ldr	r2, [r7, #32]
 8005746:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800574c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005752:	b29a      	uxth	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4a4d      	ldr	r2, [pc, #308]	@ (8005890 <HAL_I2C_Mem_Write+0x1f0>)
 800575c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800575e:	88f8      	ldrh	r0, [r7, #6]
 8005760:	893a      	ldrh	r2, [r7, #8]
 8005762:	8979      	ldrh	r1, [r7, #10]
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	9301      	str	r3, [sp, #4]
 8005768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	4603      	mov	r3, r0
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 f890 	bl	8005894 <I2C_RequestMemoryWrite>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d052      	beq.n	8005820 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e081      	b.n	8005882 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 fa36 	bl	8005bf4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00d      	beq.n	80057aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005792:	2b04      	cmp	r3, #4
 8005794:	d107      	bne.n	80057a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e06b      	b.n	8005882 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ae:	781a      	ldrb	r2, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	3b01      	subs	r3, #1
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d11b      	bne.n	8005820 <HAL_I2C_Mem_Write+0x180>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d017      	beq.n	8005820 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f4:	781a      	ldrb	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005800:	1c5a      	adds	r2, r3, #1
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800580a:	3b01      	subs	r3, #1
 800580c:	b29a      	uxth	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005816:	b29b      	uxth	r3, r3
 8005818:	3b01      	subs	r3, #1
 800581a:	b29a      	uxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1aa      	bne.n	800577e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 fa29 	bl	8005c84 <I2C_WaitOnBTFFlagUntilTimeout>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00d      	beq.n	8005854 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583c:	2b04      	cmp	r3, #4
 800583e:	d107      	bne.n	8005850 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800584e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e016      	b.n	8005882 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005862:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800587c:	2300      	movs	r3, #0
 800587e:	e000      	b.n	8005882 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005880:	2302      	movs	r3, #2
  }
}
 8005882:	4618      	mov	r0, r3
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	00100002 	.word	0x00100002
 8005890:	ffff0000 	.word	0xffff0000

08005894 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af02      	add	r7, sp, #8
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	4608      	mov	r0, r1
 800589e:	4611      	mov	r1, r2
 80058a0:	461a      	mov	r2, r3
 80058a2:	4603      	mov	r3, r0
 80058a4:	817b      	strh	r3, [r7, #10]
 80058a6:	460b      	mov	r3, r1
 80058a8:	813b      	strh	r3, [r7, #8]
 80058aa:	4613      	mov	r3, r2
 80058ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 f878 	bl	80059c0 <I2C_WaitOnFlagUntilTimeout>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00d      	beq.n	80058f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058e4:	d103      	bne.n	80058ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e05f      	b.n	80059b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058f2:	897b      	ldrh	r3, [r7, #10]
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	461a      	mov	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005900:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005904:	6a3a      	ldr	r2, [r7, #32]
 8005906:	492d      	ldr	r1, [pc, #180]	@ (80059bc <I2C_RequestMemoryWrite+0x128>)
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 f8d3 	bl	8005ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e04c      	b.n	80059b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005918:	2300      	movs	r3, #0
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800592e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005930:	6a39      	ldr	r1, [r7, #32]
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 f95e 	bl	8005bf4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00d      	beq.n	800595a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005942:	2b04      	cmp	r3, #4
 8005944:	d107      	bne.n	8005956 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005954:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e02b      	b.n	80059b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800595a:	88fb      	ldrh	r3, [r7, #6]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d105      	bne.n	800596c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005960:	893b      	ldrh	r3, [r7, #8]
 8005962:	b2da      	uxtb	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	611a      	str	r2, [r3, #16]
 800596a:	e021      	b.n	80059b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800596c:	893b      	ldrh	r3, [r7, #8]
 800596e:	0a1b      	lsrs	r3, r3, #8
 8005970:	b29b      	uxth	r3, r3
 8005972:	b2da      	uxtb	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800597a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800597c:	6a39      	ldr	r1, [r7, #32]
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 f938 	bl	8005bf4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00d      	beq.n	80059a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598e:	2b04      	cmp	r3, #4
 8005990:	d107      	bne.n	80059a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e005      	b.n	80059b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059a6:	893b      	ldrh	r3, [r7, #8]
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	00010002 	.word	0x00010002

080059c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	603b      	str	r3, [r7, #0]
 80059cc:	4613      	mov	r3, r2
 80059ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059d0:	e048      	b.n	8005a64 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d8:	d044      	beq.n	8005a64 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059da:	f7fe f933 	bl	8003c44 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d302      	bcc.n	80059f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d139      	bne.n	8005a64 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	0c1b      	lsrs	r3, r3, #16
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d10d      	bne.n	8005a16 <I2C_WaitOnFlagUntilTimeout+0x56>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	43da      	mvns	r2, r3
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	4013      	ands	r3, r2
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	bf0c      	ite	eq
 8005a0c:	2301      	moveq	r3, #1
 8005a0e:	2300      	movne	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	461a      	mov	r2, r3
 8005a14:	e00c      	b.n	8005a30 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	43da      	mvns	r2, r3
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	4013      	ands	r3, r2
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	bf0c      	ite	eq
 8005a28:	2301      	moveq	r3, #1
 8005a2a:	2300      	movne	r3, #0
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	461a      	mov	r2, r3
 8005a30:	79fb      	ldrb	r3, [r7, #7]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d116      	bne.n	8005a64 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a50:	f043 0220 	orr.w	r2, r3, #32
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e023      	b.n	8005aac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	0c1b      	lsrs	r3, r3, #16
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d10d      	bne.n	8005a8a <I2C_WaitOnFlagUntilTimeout+0xca>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	43da      	mvns	r2, r3
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	bf0c      	ite	eq
 8005a80:	2301      	moveq	r3, #1
 8005a82:	2300      	movne	r3, #0
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	461a      	mov	r2, r3
 8005a88:	e00c      	b.n	8005aa4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	43da      	mvns	r2, r3
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	4013      	ands	r3, r2
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	bf0c      	ite	eq
 8005a9c:	2301      	moveq	r3, #1
 8005a9e:	2300      	movne	r3, #0
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	79fb      	ldrb	r3, [r7, #7]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d093      	beq.n	80059d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ac2:	e071      	b.n	8005ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ad2:	d123      	bne.n	8005b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ae2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005aec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b08:	f043 0204 	orr.w	r2, r3, #4
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e067      	b.n	8005bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b22:	d041      	beq.n	8005ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b24:	f7fe f88e 	bl	8003c44 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d302      	bcc.n	8005b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d136      	bne.n	8005ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	0c1b      	lsrs	r3, r3, #16
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d10c      	bne.n	8005b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	43da      	mvns	r2, r3
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	bf14      	ite	ne
 8005b56:	2301      	movne	r3, #1
 8005b58:	2300      	moveq	r3, #0
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	e00b      	b.n	8005b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	43da      	mvns	r2, r3
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	4013      	ands	r3, r2
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	bf14      	ite	ne
 8005b70:	2301      	movne	r3, #1
 8005b72:	2300      	moveq	r3, #0
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d016      	beq.n	8005ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b94:	f043 0220 	orr.w	r2, r3, #32
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e021      	b.n	8005bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	0c1b      	lsrs	r3, r3, #16
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d10c      	bne.n	8005bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	43da      	mvns	r2, r3
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	bf14      	ite	ne
 8005bc4:	2301      	movne	r3, #1
 8005bc6:	2300      	moveq	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	e00b      	b.n	8005be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	43da      	mvns	r2, r3
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	bf14      	ite	ne
 8005bde:	2301      	movne	r3, #1
 8005be0:	2300      	moveq	r3, #0
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f47f af6d 	bne.w	8005ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c00:	e034      	b.n	8005c6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 f886 	bl	8005d14 <I2C_IsAcknowledgeFailed>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e034      	b.n	8005c7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c18:	d028      	beq.n	8005c6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c1a:	f7fe f813 	bl	8003c44 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d302      	bcc.n	8005c30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d11d      	bne.n	8005c6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c3a:	2b80      	cmp	r3, #128	@ 0x80
 8005c3c:	d016      	beq.n	8005c6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c58:	f043 0220 	orr.w	r2, r3, #32
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e007      	b.n	8005c7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c76:	2b80      	cmp	r3, #128	@ 0x80
 8005c78:	d1c3      	bne.n	8005c02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c90:	e034      	b.n	8005cfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 f83e 	bl	8005d14 <I2C_IsAcknowledgeFailed>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e034      	b.n	8005d0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca8:	d028      	beq.n	8005cfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005caa:	f7fd ffcb 	bl	8003c44 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d302      	bcc.n	8005cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d11d      	bne.n	8005cfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	f003 0304 	and.w	r3, r3, #4
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	d016      	beq.n	8005cfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce8:	f043 0220 	orr.w	r2, r3, #32
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e007      	b.n	8005d0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d1c3      	bne.n	8005c92 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d2a:	d11b      	bne.n	8005d64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d50:	f043 0204 	orr.w	r2, r3, #4
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e000      	b.n	8005d66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
	...

08005d74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e267      	b.n	8006256 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d075      	beq.n	8005e7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d92:	4b88      	ldr	r3, [pc, #544]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f003 030c 	and.w	r3, r3, #12
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d00c      	beq.n	8005db8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d9e:	4b85      	ldr	r3, [pc, #532]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005da6:	2b08      	cmp	r3, #8
 8005da8:	d112      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005daa:	4b82      	ldr	r3, [pc, #520]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005db2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005db6:	d10b      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005db8:	4b7e      	ldr	r3, [pc, #504]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d05b      	beq.n	8005e7c <HAL_RCC_OscConfig+0x108>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d157      	bne.n	8005e7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e242      	b.n	8006256 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dd8:	d106      	bne.n	8005de8 <HAL_RCC_OscConfig+0x74>
 8005dda:	4b76      	ldr	r3, [pc, #472]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a75      	ldr	r2, [pc, #468]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005de4:	6013      	str	r3, [r2, #0]
 8005de6:	e01d      	b.n	8005e24 <HAL_RCC_OscConfig+0xb0>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005df0:	d10c      	bne.n	8005e0c <HAL_RCC_OscConfig+0x98>
 8005df2:	4b70      	ldr	r3, [pc, #448]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a6f      	ldr	r2, [pc, #444]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005df8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	4b6d      	ldr	r3, [pc, #436]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a6c      	ldr	r2, [pc, #432]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e08:	6013      	str	r3, [r2, #0]
 8005e0a:	e00b      	b.n	8005e24 <HAL_RCC_OscConfig+0xb0>
 8005e0c:	4b69      	ldr	r3, [pc, #420]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a68      	ldr	r2, [pc, #416]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005e12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e16:	6013      	str	r3, [r2, #0]
 8005e18:	4b66      	ldr	r3, [pc, #408]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a65      	ldr	r2, [pc, #404]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005e1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d013      	beq.n	8005e54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e2c:	f7fd ff0a 	bl	8003c44 <HAL_GetTick>
 8005e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e32:	e008      	b.n	8005e46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e34:	f7fd ff06 	bl	8003c44 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b64      	cmp	r3, #100	@ 0x64
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e207      	b.n	8006256 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e46:	4b5b      	ldr	r3, [pc, #364]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d0f0      	beq.n	8005e34 <HAL_RCC_OscConfig+0xc0>
 8005e52:	e014      	b.n	8005e7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e54:	f7fd fef6 	bl	8003c44 <HAL_GetTick>
 8005e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e5a:	e008      	b.n	8005e6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e5c:	f7fd fef2 	bl	8003c44 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	2b64      	cmp	r3, #100	@ 0x64
 8005e68:	d901      	bls.n	8005e6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e1f3      	b.n	8006256 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e6e:	4b51      	ldr	r3, [pc, #324]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1f0      	bne.n	8005e5c <HAL_RCC_OscConfig+0xe8>
 8005e7a:	e000      	b.n	8005e7e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d063      	beq.n	8005f52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e8a:	4b4a      	ldr	r3, [pc, #296]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 030c 	and.w	r3, r3, #12
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00b      	beq.n	8005eae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e96:	4b47      	ldr	r3, [pc, #284]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e9e:	2b08      	cmp	r3, #8
 8005ea0:	d11c      	bne.n	8005edc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ea2:	4b44      	ldr	r3, [pc, #272]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d116      	bne.n	8005edc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eae:	4b41      	ldr	r3, [pc, #260]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0302 	and.w	r3, r3, #2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d005      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x152>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d001      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e1c7      	b.n	8006256 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	00db      	lsls	r3, r3, #3
 8005ed4:	4937      	ldr	r1, [pc, #220]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eda:	e03a      	b.n	8005f52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d020      	beq.n	8005f26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ee4:	4b34      	ldr	r3, [pc, #208]	@ (8005fb8 <HAL_RCC_OscConfig+0x244>)
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eea:	f7fd feab 	bl	8003c44 <HAL_GetTick>
 8005eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ef0:	e008      	b.n	8005f04 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ef2:	f7fd fea7 	bl	8003c44 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d901      	bls.n	8005f04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e1a8      	b.n	8006256 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f04:	4b2b      	ldr	r3, [pc, #172]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d0f0      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f10:	4b28      	ldr	r3, [pc, #160]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	00db      	lsls	r3, r3, #3
 8005f1e:	4925      	ldr	r1, [pc, #148]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	600b      	str	r3, [r1, #0]
 8005f24:	e015      	b.n	8005f52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f26:	4b24      	ldr	r3, [pc, #144]	@ (8005fb8 <HAL_RCC_OscConfig+0x244>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2c:	f7fd fe8a 	bl	8003c44 <HAL_GetTick>
 8005f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f34:	f7fd fe86 	bl	8003c44 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e187      	b.n	8006256 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f46:	4b1b      	ldr	r3, [pc, #108]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1f0      	bne.n	8005f34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0308 	and.w	r3, r3, #8
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d036      	beq.n	8005fcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d016      	beq.n	8005f94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f66:	4b15      	ldr	r3, [pc, #84]	@ (8005fbc <HAL_RCC_OscConfig+0x248>)
 8005f68:	2201      	movs	r2, #1
 8005f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f6c:	f7fd fe6a 	bl	8003c44 <HAL_GetTick>
 8005f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f72:	e008      	b.n	8005f86 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f74:	f7fd fe66 	bl	8003c44 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e167      	b.n	8006256 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f86:	4b0b      	ldr	r3, [pc, #44]	@ (8005fb4 <HAL_RCC_OscConfig+0x240>)
 8005f88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d0f0      	beq.n	8005f74 <HAL_RCC_OscConfig+0x200>
 8005f92:	e01b      	b.n	8005fcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f94:	4b09      	ldr	r3, [pc, #36]	@ (8005fbc <HAL_RCC_OscConfig+0x248>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f9a:	f7fd fe53 	bl	8003c44 <HAL_GetTick>
 8005f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fa0:	e00e      	b.n	8005fc0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fa2:	f7fd fe4f 	bl	8003c44 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d907      	bls.n	8005fc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e150      	b.n	8006256 <HAL_RCC_OscConfig+0x4e2>
 8005fb4:	40023800 	.word	0x40023800
 8005fb8:	42470000 	.word	0x42470000
 8005fbc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fc0:	4b88      	ldr	r3, [pc, #544]	@ (80061e4 <HAL_RCC_OscConfig+0x470>)
 8005fc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1ea      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 8097 	beq.w	8006108 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fde:	4b81      	ldr	r3, [pc, #516]	@ (80061e4 <HAL_RCC_OscConfig+0x470>)
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10f      	bne.n	800600a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fea:	2300      	movs	r3, #0
 8005fec:	60bb      	str	r3, [r7, #8]
 8005fee:	4b7d      	ldr	r3, [pc, #500]	@ (80061e4 <HAL_RCC_OscConfig+0x470>)
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff2:	4a7c      	ldr	r2, [pc, #496]	@ (80061e4 <HAL_RCC_OscConfig+0x470>)
 8005ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ffa:	4b7a      	ldr	r3, [pc, #488]	@ (80061e4 <HAL_RCC_OscConfig+0x470>)
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006002:	60bb      	str	r3, [r7, #8]
 8006004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006006:	2301      	movs	r3, #1
 8006008:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800600a:	4b77      	ldr	r3, [pc, #476]	@ (80061e8 <HAL_RCC_OscConfig+0x474>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006012:	2b00      	cmp	r3, #0
 8006014:	d118      	bne.n	8006048 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006016:	4b74      	ldr	r3, [pc, #464]	@ (80061e8 <HAL_RCC_OscConfig+0x474>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a73      	ldr	r2, [pc, #460]	@ (80061e8 <HAL_RCC_OscConfig+0x474>)
 800601c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006022:	f7fd fe0f 	bl	8003c44 <HAL_GetTick>
 8006026:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006028:	e008      	b.n	800603c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800602a:	f7fd fe0b 	bl	8003c44 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b02      	cmp	r3, #2
 8006036:	d901      	bls.n	800603c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e10c      	b.n	8006256 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800603c:	4b6a      	ldr	r3, [pc, #424]	@ (80061e8 <HAL_RCC_OscConfig+0x474>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006044:	2b00      	cmp	r3, #0
 8006046:	d0f0      	beq.n	800602a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d106      	bne.n	800605e <HAL_RCC_OscConfig+0x2ea>
 8006050:	4b64      	ldr	r3, [pc, #400]	@ (80061e4 <HAL_RCC_OscConfig+0x470>)
 8006052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006054:	4a63      	ldr	r2, [pc, #396]	@ (80061e4 <HAL_RCC_OscConfig+0x470>)
 8006056:	f043 0301 	orr.w	r3, r3, #1
 800605a:	6713      	str	r3, [r2, #112]	@ 0x70
 800605c:	e01c      	b.n	8006098 <HAL_RCC_OscConfig+0x324>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	2b05      	cmp	r3, #5
 8006064:	d10c      	bne.n	8006080 <HAL_RCC_OscConfig+0x30c>
 8006066:	4b5f      	ldr	r3, [pc, #380]	@ (80061e4 <HAL_RCC_OscConfig+0x470>)
 8006068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800606a:	4a5e      	ldr	r2, [pc, #376]	@ (80061e4 <HAL_RCC_OscConfig+0x470>)
 800606c:	f043 0304 	orr.w	r3, r3, #4
 8006070:	6713      	str	r3, [r2, #112]	@ 0x70
 8006072:	4b5c      	ldr	r3, [pc, #368]	@ (80061e4 <HAL_RCC_OscConfig+0x470>)
 8006074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006076:	4a5b      	ldr	r2, [pc, #364]	@ (80061e4 <HAL_RCC_OscConfig+0x470>)
 8006078:	f043 0301 	orr.w	r3, r3, #1
 800607c:	6713      	str	r3, [r2, #112]	@ 0x70
 800607e:	e00b      	b.n	8006098 <HAL_RCC_OscConfig+0x324>
 8006080:	4b58      	ldr	r3, [pc, #352]	@ (80061e4 <HAL_RCC_OscConfig+0x470>)
 8006082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006084:	4a57      	ldr	r2, [pc, #348]	@ (80061e4 <HAL_RCC_OscConfig+0x470>)
 8006086:	f023 0301 	bic.w	r3, r3, #1
 800608a:	6713      	str	r3, [r2, #112]	@ 0x70
 800608c:	4b55      	ldr	r3, [pc, #340]	@ (80061e4 <HAL_RCC_OscConfig+0x470>)
 800608e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006090:	4a54      	ldr	r2, [pc, #336]	@ (80061e4 <HAL_RCC_OscConfig+0x470>)
 8006092:	f023 0304 	bic.w	r3, r3, #4
 8006096:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d015      	beq.n	80060cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a0:	f7fd fdd0 	bl	8003c44 <HAL_GetTick>
 80060a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060a6:	e00a      	b.n	80060be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060a8:	f7fd fdcc 	bl	8003c44 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e0cb      	b.n	8006256 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060be:	4b49      	ldr	r3, [pc, #292]	@ (80061e4 <HAL_RCC_OscConfig+0x470>)
 80060c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c2:	f003 0302 	and.w	r3, r3, #2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0ee      	beq.n	80060a8 <HAL_RCC_OscConfig+0x334>
 80060ca:	e014      	b.n	80060f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060cc:	f7fd fdba 	bl	8003c44 <HAL_GetTick>
 80060d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060d2:	e00a      	b.n	80060ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060d4:	f7fd fdb6 	bl	8003c44 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e0b5      	b.n	8006256 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060ea:	4b3e      	ldr	r3, [pc, #248]	@ (80061e4 <HAL_RCC_OscConfig+0x470>)
 80060ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1ee      	bne.n	80060d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80060f6:	7dfb      	ldrb	r3, [r7, #23]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d105      	bne.n	8006108 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060fc:	4b39      	ldr	r3, [pc, #228]	@ (80061e4 <HAL_RCC_OscConfig+0x470>)
 80060fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006100:	4a38      	ldr	r2, [pc, #224]	@ (80061e4 <HAL_RCC_OscConfig+0x470>)
 8006102:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006106:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 80a1 	beq.w	8006254 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006112:	4b34      	ldr	r3, [pc, #208]	@ (80061e4 <HAL_RCC_OscConfig+0x470>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f003 030c 	and.w	r3, r3, #12
 800611a:	2b08      	cmp	r3, #8
 800611c:	d05c      	beq.n	80061d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	2b02      	cmp	r3, #2
 8006124:	d141      	bne.n	80061aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006126:	4b31      	ldr	r3, [pc, #196]	@ (80061ec <HAL_RCC_OscConfig+0x478>)
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800612c:	f7fd fd8a 	bl	8003c44 <HAL_GetTick>
 8006130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006134:	f7fd fd86 	bl	8003c44 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e087      	b.n	8006256 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006146:	4b27      	ldr	r3, [pc, #156]	@ (80061e4 <HAL_RCC_OscConfig+0x470>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1f0      	bne.n	8006134 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	69da      	ldr	r2, [r3, #28]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	431a      	orrs	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006160:	019b      	lsls	r3, r3, #6
 8006162:	431a      	orrs	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006168:	085b      	lsrs	r3, r3, #1
 800616a:	3b01      	subs	r3, #1
 800616c:	041b      	lsls	r3, r3, #16
 800616e:	431a      	orrs	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006174:	061b      	lsls	r3, r3, #24
 8006176:	491b      	ldr	r1, [pc, #108]	@ (80061e4 <HAL_RCC_OscConfig+0x470>)
 8006178:	4313      	orrs	r3, r2
 800617a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800617c:	4b1b      	ldr	r3, [pc, #108]	@ (80061ec <HAL_RCC_OscConfig+0x478>)
 800617e:	2201      	movs	r2, #1
 8006180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006182:	f7fd fd5f 	bl	8003c44 <HAL_GetTick>
 8006186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006188:	e008      	b.n	800619c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800618a:	f7fd fd5b 	bl	8003c44 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	2b02      	cmp	r3, #2
 8006196:	d901      	bls.n	800619c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e05c      	b.n	8006256 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800619c:	4b11      	ldr	r3, [pc, #68]	@ (80061e4 <HAL_RCC_OscConfig+0x470>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d0f0      	beq.n	800618a <HAL_RCC_OscConfig+0x416>
 80061a8:	e054      	b.n	8006254 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061aa:	4b10      	ldr	r3, [pc, #64]	@ (80061ec <HAL_RCC_OscConfig+0x478>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061b0:	f7fd fd48 	bl	8003c44 <HAL_GetTick>
 80061b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061b6:	e008      	b.n	80061ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061b8:	f7fd fd44 	bl	8003c44 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e045      	b.n	8006256 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ca:	4b06      	ldr	r3, [pc, #24]	@ (80061e4 <HAL_RCC_OscConfig+0x470>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1f0      	bne.n	80061b8 <HAL_RCC_OscConfig+0x444>
 80061d6:	e03d      	b.n	8006254 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d107      	bne.n	80061f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e038      	b.n	8006256 <HAL_RCC_OscConfig+0x4e2>
 80061e4:	40023800 	.word	0x40023800
 80061e8:	40007000 	.word	0x40007000
 80061ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061f0:	4b1b      	ldr	r3, [pc, #108]	@ (8006260 <HAL_RCC_OscConfig+0x4ec>)
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d028      	beq.n	8006250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006208:	429a      	cmp	r2, r3
 800620a:	d121      	bne.n	8006250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006216:	429a      	cmp	r2, r3
 8006218:	d11a      	bne.n	8006250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006220:	4013      	ands	r3, r2
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006226:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006228:	4293      	cmp	r3, r2
 800622a:	d111      	bne.n	8006250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006236:	085b      	lsrs	r3, r3, #1
 8006238:	3b01      	subs	r3, #1
 800623a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800623c:	429a      	cmp	r2, r3
 800623e:	d107      	bne.n	8006250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800624a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800624c:	429a      	cmp	r2, r3
 800624e:	d001      	beq.n	8006254 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e000      	b.n	8006256 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3718      	adds	r7, #24
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	40023800 	.word	0x40023800

08006264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e0cc      	b.n	8006412 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006278:	4b68      	ldr	r3, [pc, #416]	@ (800641c <HAL_RCC_ClockConfig+0x1b8>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0307 	and.w	r3, r3, #7
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	429a      	cmp	r2, r3
 8006284:	d90c      	bls.n	80062a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006286:	4b65      	ldr	r3, [pc, #404]	@ (800641c <HAL_RCC_ClockConfig+0x1b8>)
 8006288:	683a      	ldr	r2, [r7, #0]
 800628a:	b2d2      	uxtb	r2, r2
 800628c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800628e:	4b63      	ldr	r3, [pc, #396]	@ (800641c <HAL_RCC_ClockConfig+0x1b8>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	429a      	cmp	r2, r3
 800629a:	d001      	beq.n	80062a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e0b8      	b.n	8006412 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0302 	and.w	r3, r3, #2
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d020      	beq.n	80062ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0304 	and.w	r3, r3, #4
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d005      	beq.n	80062c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062b8:	4b59      	ldr	r3, [pc, #356]	@ (8006420 <HAL_RCC_ClockConfig+0x1bc>)
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	4a58      	ldr	r2, [pc, #352]	@ (8006420 <HAL_RCC_ClockConfig+0x1bc>)
 80062be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80062c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0308 	and.w	r3, r3, #8
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d005      	beq.n	80062dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062d0:	4b53      	ldr	r3, [pc, #332]	@ (8006420 <HAL_RCC_ClockConfig+0x1bc>)
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	4a52      	ldr	r2, [pc, #328]	@ (8006420 <HAL_RCC_ClockConfig+0x1bc>)
 80062d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80062da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062dc:	4b50      	ldr	r3, [pc, #320]	@ (8006420 <HAL_RCC_ClockConfig+0x1bc>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	494d      	ldr	r1, [pc, #308]	@ (8006420 <HAL_RCC_ClockConfig+0x1bc>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d044      	beq.n	8006384 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d107      	bne.n	8006312 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006302:	4b47      	ldr	r3, [pc, #284]	@ (8006420 <HAL_RCC_ClockConfig+0x1bc>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d119      	bne.n	8006342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e07f      	b.n	8006412 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2b02      	cmp	r3, #2
 8006318:	d003      	beq.n	8006322 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800631e:	2b03      	cmp	r3, #3
 8006320:	d107      	bne.n	8006332 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006322:	4b3f      	ldr	r3, [pc, #252]	@ (8006420 <HAL_RCC_ClockConfig+0x1bc>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d109      	bne.n	8006342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e06f      	b.n	8006412 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006332:	4b3b      	ldr	r3, [pc, #236]	@ (8006420 <HAL_RCC_ClockConfig+0x1bc>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e067      	b.n	8006412 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006342:	4b37      	ldr	r3, [pc, #220]	@ (8006420 <HAL_RCC_ClockConfig+0x1bc>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f023 0203 	bic.w	r2, r3, #3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	4934      	ldr	r1, [pc, #208]	@ (8006420 <HAL_RCC_ClockConfig+0x1bc>)
 8006350:	4313      	orrs	r3, r2
 8006352:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006354:	f7fd fc76 	bl	8003c44 <HAL_GetTick>
 8006358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800635a:	e00a      	b.n	8006372 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800635c:	f7fd fc72 	bl	8003c44 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800636a:	4293      	cmp	r3, r2
 800636c:	d901      	bls.n	8006372 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e04f      	b.n	8006412 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006372:	4b2b      	ldr	r3, [pc, #172]	@ (8006420 <HAL_RCC_ClockConfig+0x1bc>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f003 020c 	and.w	r2, r3, #12
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	429a      	cmp	r2, r3
 8006382:	d1eb      	bne.n	800635c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006384:	4b25      	ldr	r3, [pc, #148]	@ (800641c <HAL_RCC_ClockConfig+0x1b8>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0307 	and.w	r3, r3, #7
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	429a      	cmp	r2, r3
 8006390:	d20c      	bcs.n	80063ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006392:	4b22      	ldr	r3, [pc, #136]	@ (800641c <HAL_RCC_ClockConfig+0x1b8>)
 8006394:	683a      	ldr	r2, [r7, #0]
 8006396:	b2d2      	uxtb	r2, r2
 8006398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800639a:	4b20      	ldr	r3, [pc, #128]	@ (800641c <HAL_RCC_ClockConfig+0x1b8>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0307 	and.w	r3, r3, #7
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d001      	beq.n	80063ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e032      	b.n	8006412 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d008      	beq.n	80063ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063b8:	4b19      	ldr	r3, [pc, #100]	@ (8006420 <HAL_RCC_ClockConfig+0x1bc>)
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	4916      	ldr	r1, [pc, #88]	@ (8006420 <HAL_RCC_ClockConfig+0x1bc>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0308 	and.w	r3, r3, #8
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d009      	beq.n	80063ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063d6:	4b12      	ldr	r3, [pc, #72]	@ (8006420 <HAL_RCC_ClockConfig+0x1bc>)
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	00db      	lsls	r3, r3, #3
 80063e4:	490e      	ldr	r1, [pc, #56]	@ (8006420 <HAL_RCC_ClockConfig+0x1bc>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80063ea:	f000 f821 	bl	8006430 <HAL_RCC_GetSysClockFreq>
 80063ee:	4602      	mov	r2, r0
 80063f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006420 <HAL_RCC_ClockConfig+0x1bc>)
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	091b      	lsrs	r3, r3, #4
 80063f6:	f003 030f 	and.w	r3, r3, #15
 80063fa:	490a      	ldr	r1, [pc, #40]	@ (8006424 <HAL_RCC_ClockConfig+0x1c0>)
 80063fc:	5ccb      	ldrb	r3, [r1, r3]
 80063fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006402:	4a09      	ldr	r2, [pc, #36]	@ (8006428 <HAL_RCC_ClockConfig+0x1c4>)
 8006404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006406:	4b09      	ldr	r3, [pc, #36]	@ (800642c <HAL_RCC_ClockConfig+0x1c8>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4618      	mov	r0, r3
 800640c:	f7fb ff7c 	bl	8002308 <HAL_InitTick>

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	40023c00 	.word	0x40023c00
 8006420:	40023800 	.word	0x40023800
 8006424:	08012f40 	.word	0x08012f40
 8006428:	20000004 	.word	0x20000004
 800642c:	20000024 	.word	0x20000024

08006430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006434:	b094      	sub	sp, #80	@ 0x50
 8006436:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800643c:	2300      	movs	r3, #0
 800643e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006440:	2300      	movs	r3, #0
 8006442:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006444:	2300      	movs	r3, #0
 8006446:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006448:	4b79      	ldr	r3, [pc, #484]	@ (8006630 <HAL_RCC_GetSysClockFreq+0x200>)
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 030c 	and.w	r3, r3, #12
 8006450:	2b08      	cmp	r3, #8
 8006452:	d00d      	beq.n	8006470 <HAL_RCC_GetSysClockFreq+0x40>
 8006454:	2b08      	cmp	r3, #8
 8006456:	f200 80e1 	bhi.w	800661c <HAL_RCC_GetSysClockFreq+0x1ec>
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <HAL_RCC_GetSysClockFreq+0x34>
 800645e:	2b04      	cmp	r3, #4
 8006460:	d003      	beq.n	800646a <HAL_RCC_GetSysClockFreq+0x3a>
 8006462:	e0db      	b.n	800661c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006464:	4b73      	ldr	r3, [pc, #460]	@ (8006634 <HAL_RCC_GetSysClockFreq+0x204>)
 8006466:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006468:	e0db      	b.n	8006622 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800646a:	4b73      	ldr	r3, [pc, #460]	@ (8006638 <HAL_RCC_GetSysClockFreq+0x208>)
 800646c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800646e:	e0d8      	b.n	8006622 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006470:	4b6f      	ldr	r3, [pc, #444]	@ (8006630 <HAL_RCC_GetSysClockFreq+0x200>)
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006478:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800647a:	4b6d      	ldr	r3, [pc, #436]	@ (8006630 <HAL_RCC_GetSysClockFreq+0x200>)
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d063      	beq.n	800654e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006486:	4b6a      	ldr	r3, [pc, #424]	@ (8006630 <HAL_RCC_GetSysClockFreq+0x200>)
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	099b      	lsrs	r3, r3, #6
 800648c:	2200      	movs	r2, #0
 800648e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006490:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006498:	633b      	str	r3, [r7, #48]	@ 0x30
 800649a:	2300      	movs	r3, #0
 800649c:	637b      	str	r3, [r7, #52]	@ 0x34
 800649e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80064a2:	4622      	mov	r2, r4
 80064a4:	462b      	mov	r3, r5
 80064a6:	f04f 0000 	mov.w	r0, #0
 80064aa:	f04f 0100 	mov.w	r1, #0
 80064ae:	0159      	lsls	r1, r3, #5
 80064b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064b4:	0150      	lsls	r0, r2, #5
 80064b6:	4602      	mov	r2, r0
 80064b8:	460b      	mov	r3, r1
 80064ba:	4621      	mov	r1, r4
 80064bc:	1a51      	subs	r1, r2, r1
 80064be:	6139      	str	r1, [r7, #16]
 80064c0:	4629      	mov	r1, r5
 80064c2:	eb63 0301 	sbc.w	r3, r3, r1
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	f04f 0200 	mov.w	r2, #0
 80064cc:	f04f 0300 	mov.w	r3, #0
 80064d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064d4:	4659      	mov	r1, fp
 80064d6:	018b      	lsls	r3, r1, #6
 80064d8:	4651      	mov	r1, sl
 80064da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064de:	4651      	mov	r1, sl
 80064e0:	018a      	lsls	r2, r1, #6
 80064e2:	4651      	mov	r1, sl
 80064e4:	ebb2 0801 	subs.w	r8, r2, r1
 80064e8:	4659      	mov	r1, fp
 80064ea:	eb63 0901 	sbc.w	r9, r3, r1
 80064ee:	f04f 0200 	mov.w	r2, #0
 80064f2:	f04f 0300 	mov.w	r3, #0
 80064f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006502:	4690      	mov	r8, r2
 8006504:	4699      	mov	r9, r3
 8006506:	4623      	mov	r3, r4
 8006508:	eb18 0303 	adds.w	r3, r8, r3
 800650c:	60bb      	str	r3, [r7, #8]
 800650e:	462b      	mov	r3, r5
 8006510:	eb49 0303 	adc.w	r3, r9, r3
 8006514:	60fb      	str	r3, [r7, #12]
 8006516:	f04f 0200 	mov.w	r2, #0
 800651a:	f04f 0300 	mov.w	r3, #0
 800651e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006522:	4629      	mov	r1, r5
 8006524:	024b      	lsls	r3, r1, #9
 8006526:	4621      	mov	r1, r4
 8006528:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800652c:	4621      	mov	r1, r4
 800652e:	024a      	lsls	r2, r1, #9
 8006530:	4610      	mov	r0, r2
 8006532:	4619      	mov	r1, r3
 8006534:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006536:	2200      	movs	r2, #0
 8006538:	62bb      	str	r3, [r7, #40]	@ 0x28
 800653a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800653c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006540:	f7fa fb24 	bl	8000b8c <__aeabi_uldivmod>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	4613      	mov	r3, r2
 800654a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800654c:	e058      	b.n	8006600 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800654e:	4b38      	ldr	r3, [pc, #224]	@ (8006630 <HAL_RCC_GetSysClockFreq+0x200>)
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	099b      	lsrs	r3, r3, #6
 8006554:	2200      	movs	r2, #0
 8006556:	4618      	mov	r0, r3
 8006558:	4611      	mov	r1, r2
 800655a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800655e:	623b      	str	r3, [r7, #32]
 8006560:	2300      	movs	r3, #0
 8006562:	627b      	str	r3, [r7, #36]	@ 0x24
 8006564:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006568:	4642      	mov	r2, r8
 800656a:	464b      	mov	r3, r9
 800656c:	f04f 0000 	mov.w	r0, #0
 8006570:	f04f 0100 	mov.w	r1, #0
 8006574:	0159      	lsls	r1, r3, #5
 8006576:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800657a:	0150      	lsls	r0, r2, #5
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	4641      	mov	r1, r8
 8006582:	ebb2 0a01 	subs.w	sl, r2, r1
 8006586:	4649      	mov	r1, r9
 8006588:	eb63 0b01 	sbc.w	fp, r3, r1
 800658c:	f04f 0200 	mov.w	r2, #0
 8006590:	f04f 0300 	mov.w	r3, #0
 8006594:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006598:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800659c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80065a0:	ebb2 040a 	subs.w	r4, r2, sl
 80065a4:	eb63 050b 	sbc.w	r5, r3, fp
 80065a8:	f04f 0200 	mov.w	r2, #0
 80065ac:	f04f 0300 	mov.w	r3, #0
 80065b0:	00eb      	lsls	r3, r5, #3
 80065b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065b6:	00e2      	lsls	r2, r4, #3
 80065b8:	4614      	mov	r4, r2
 80065ba:	461d      	mov	r5, r3
 80065bc:	4643      	mov	r3, r8
 80065be:	18e3      	adds	r3, r4, r3
 80065c0:	603b      	str	r3, [r7, #0]
 80065c2:	464b      	mov	r3, r9
 80065c4:	eb45 0303 	adc.w	r3, r5, r3
 80065c8:	607b      	str	r3, [r7, #4]
 80065ca:	f04f 0200 	mov.w	r2, #0
 80065ce:	f04f 0300 	mov.w	r3, #0
 80065d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065d6:	4629      	mov	r1, r5
 80065d8:	028b      	lsls	r3, r1, #10
 80065da:	4621      	mov	r1, r4
 80065dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065e0:	4621      	mov	r1, r4
 80065e2:	028a      	lsls	r2, r1, #10
 80065e4:	4610      	mov	r0, r2
 80065e6:	4619      	mov	r1, r3
 80065e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065ea:	2200      	movs	r2, #0
 80065ec:	61bb      	str	r3, [r7, #24]
 80065ee:	61fa      	str	r2, [r7, #28]
 80065f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065f4:	f7fa faca 	bl	8000b8c <__aeabi_uldivmod>
 80065f8:	4602      	mov	r2, r0
 80065fa:	460b      	mov	r3, r1
 80065fc:	4613      	mov	r3, r2
 80065fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006600:	4b0b      	ldr	r3, [pc, #44]	@ (8006630 <HAL_RCC_GetSysClockFreq+0x200>)
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	0c1b      	lsrs	r3, r3, #16
 8006606:	f003 0303 	and.w	r3, r3, #3
 800660a:	3301      	adds	r3, #1
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006610:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006614:	fbb2 f3f3 	udiv	r3, r2, r3
 8006618:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800661a:	e002      	b.n	8006622 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800661c:	4b05      	ldr	r3, [pc, #20]	@ (8006634 <HAL_RCC_GetSysClockFreq+0x204>)
 800661e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006620:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006622:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006624:	4618      	mov	r0, r3
 8006626:	3750      	adds	r7, #80	@ 0x50
 8006628:	46bd      	mov	sp, r7
 800662a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800662e:	bf00      	nop
 8006630:	40023800 	.word	0x40023800
 8006634:	00f42400 	.word	0x00f42400
 8006638:	007a1200 	.word	0x007a1200

0800663c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800663c:	b480      	push	{r7}
 800663e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006640:	4b03      	ldr	r3, [pc, #12]	@ (8006650 <HAL_RCC_GetHCLKFreq+0x14>)
 8006642:	681b      	ldr	r3, [r3, #0]
}
 8006644:	4618      	mov	r0, r3
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	20000004 	.word	0x20000004

08006654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006658:	f7ff fff0 	bl	800663c <HAL_RCC_GetHCLKFreq>
 800665c:	4602      	mov	r2, r0
 800665e:	4b05      	ldr	r3, [pc, #20]	@ (8006674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	0a9b      	lsrs	r3, r3, #10
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	4903      	ldr	r1, [pc, #12]	@ (8006678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800666a:	5ccb      	ldrb	r3, [r1, r3]
 800666c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006670:	4618      	mov	r0, r3
 8006672:	bd80      	pop	{r7, pc}
 8006674:	40023800 	.word	0x40023800
 8006678:	08012f50 	.word	0x08012f50

0800667c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006680:	f7ff ffdc 	bl	800663c <HAL_RCC_GetHCLKFreq>
 8006684:	4602      	mov	r2, r0
 8006686:	4b05      	ldr	r3, [pc, #20]	@ (800669c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	0b5b      	lsrs	r3, r3, #13
 800668c:	f003 0307 	and.w	r3, r3, #7
 8006690:	4903      	ldr	r1, [pc, #12]	@ (80066a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006692:	5ccb      	ldrb	r3, [r1, r3]
 8006694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006698:	4618      	mov	r0, r3
 800669a:	bd80      	pop	{r7, pc}
 800669c:	40023800 	.word	0x40023800
 80066a0:	08012f50 	.word	0x08012f50

080066a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	220f      	movs	r2, #15
 80066b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80066b4:	4b12      	ldr	r3, [pc, #72]	@ (8006700 <HAL_RCC_GetClockConfig+0x5c>)
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f003 0203 	and.w	r2, r3, #3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80066c0:	4b0f      	ldr	r3, [pc, #60]	@ (8006700 <HAL_RCC_GetClockConfig+0x5c>)
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80066cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006700 <HAL_RCC_GetClockConfig+0x5c>)
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80066d8:	4b09      	ldr	r3, [pc, #36]	@ (8006700 <HAL_RCC_GetClockConfig+0x5c>)
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	08db      	lsrs	r3, r3, #3
 80066de:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80066e6:	4b07      	ldr	r3, [pc, #28]	@ (8006704 <HAL_RCC_GetClockConfig+0x60>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0207 	and.w	r2, r3, #7
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	601a      	str	r2, [r3, #0]
}
 80066f2:	bf00      	nop
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	40023800 	.word	0x40023800
 8006704:	40023c00 	.word	0x40023c00

08006708 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d105      	bne.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800672c:	2b00      	cmp	r3, #0
 800672e:	d035      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006730:	4b67      	ldr	r3, [pc, #412]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006732:	2200      	movs	r2, #0
 8006734:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006736:	f7fd fa85 	bl	8003c44 <HAL_GetTick>
 800673a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800673c:	e008      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800673e:	f7fd fa81 	bl	8003c44 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	2b02      	cmp	r3, #2
 800674a:	d901      	bls.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e0ba      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006750:	4b60      	ldr	r3, [pc, #384]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1f0      	bne.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	019a      	lsls	r2, r3, #6
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	071b      	lsls	r3, r3, #28
 8006768:	495a      	ldr	r1, [pc, #360]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800676a:	4313      	orrs	r3, r2
 800676c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006770:	4b57      	ldr	r3, [pc, #348]	@ (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006772:	2201      	movs	r2, #1
 8006774:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006776:	f7fd fa65 	bl	8003c44 <HAL_GetTick>
 800677a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800677c:	e008      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800677e:	f7fd fa61 	bl	8003c44 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b02      	cmp	r3, #2
 800678a:	d901      	bls.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e09a      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006790:	4b50      	ldr	r3, [pc, #320]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d0f0      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0302 	and.w	r3, r3, #2
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f000 8083 	beq.w	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80067aa:	2300      	movs	r3, #0
 80067ac:	60fb      	str	r3, [r7, #12]
 80067ae:	4b49      	ldr	r3, [pc, #292]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80067b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b2:	4a48      	ldr	r2, [pc, #288]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80067b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80067ba:	4b46      	ldr	r3, [pc, #280]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80067bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067c2:	60fb      	str	r3, [r7, #12]
 80067c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80067c6:	4b44      	ldr	r3, [pc, #272]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a43      	ldr	r2, [pc, #268]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067d2:	f7fd fa37 	bl	8003c44 <HAL_GetTick>
 80067d6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80067d8:	e008      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067da:	f7fd fa33 	bl	8003c44 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d901      	bls.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e06c      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80067ec:	4b3a      	ldr	r3, [pc, #232]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d0f0      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067f8:	4b36      	ldr	r3, [pc, #216]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80067fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006800:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d02f      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	429a      	cmp	r2, r3
 8006814:	d028      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006816:	4b2f      	ldr	r3, [pc, #188]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800681a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800681e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006820:	4b2e      	ldr	r3, [pc, #184]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006822:	2201      	movs	r2, #1
 8006824:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006826:	4b2d      	ldr	r3, [pc, #180]	@ (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800682c:	4a29      	ldr	r2, [pc, #164]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006832:	4b28      	ldr	r3, [pc, #160]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b01      	cmp	r3, #1
 800683c:	d114      	bne.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800683e:	f7fd fa01 	bl	8003c44 <HAL_GetTick>
 8006842:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006844:	e00a      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006846:	f7fd f9fd 	bl	8003c44 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006854:	4293      	cmp	r3, r2
 8006856:	d901      	bls.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e034      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800685c:	4b1d      	ldr	r3, [pc, #116]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800685e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b00      	cmp	r3, #0
 8006866:	d0ee      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006870:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006874:	d10d      	bne.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006876:	4b17      	ldr	r3, [pc, #92]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006886:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800688a:	4912      	ldr	r1, [pc, #72]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800688c:	4313      	orrs	r3, r2
 800688e:	608b      	str	r3, [r1, #8]
 8006890:	e005      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006892:	4b10      	ldr	r3, [pc, #64]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	4a0f      	ldr	r2, [pc, #60]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006898:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800689c:	6093      	str	r3, [r2, #8]
 800689e:	4b0d      	ldr	r3, [pc, #52]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80068a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068aa:	490a      	ldr	r1, [pc, #40]	@ (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0308 	and.w	r3, r3, #8
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d003      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	7c1a      	ldrb	r2, [r3, #16]
 80068c0:	4b07      	ldr	r3, [pc, #28]	@ (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80068c2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	42470068 	.word	0x42470068
 80068d4:	40023800 	.word	0x40023800
 80068d8:	40007000 	.word	0x40007000
 80068dc:	42470e40 	.word	0x42470e40
 80068e0:	424711e0 	.word	0x424711e0

080068e4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e073      	b.n	80069e2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	7f5b      	ldrb	r3, [r3, #29]
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d105      	bne.n	8006910 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7fb fc06 	bl	800211c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2202      	movs	r2, #2
 8006914:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	f003 0310 	and.w	r3, r3, #16
 8006920:	2b10      	cmp	r3, #16
 8006922:	d055      	beq.n	80069d0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	22ca      	movs	r2, #202	@ 0xca
 800692a:	625a      	str	r2, [r3, #36]	@ 0x24
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2253      	movs	r2, #83	@ 0x53
 8006932:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f99d 	bl	8006c74 <RTC_EnterInitMode>
 800693a:	4603      	mov	r3, r0
 800693c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800693e:	7bfb      	ldrb	r3, [r7, #15]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d12c      	bne.n	800699e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6812      	ldr	r2, [r2, #0]
 800694e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006952:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006956:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6899      	ldr	r1, [r3, #8]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	431a      	orrs	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	431a      	orrs	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	68d2      	ldr	r2, [r2, #12]
 800697e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6919      	ldr	r1, [r3, #16]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	041a      	lsls	r2, r3, #16
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	430a      	orrs	r2, r1
 8006992:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f9a4 	bl	8006ce2 <RTC_ExitInitMode>
 800699a:	4603      	mov	r3, r0
 800699c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d110      	bne.n	80069c6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80069b2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	699a      	ldr	r2, [r3, #24]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	22ff      	movs	r2, #255	@ 0xff
 80069cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80069ce:	e001      	b.n	80069d4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d102      	bne.n	80069e0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80069e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80069ea:	b590      	push	{r4, r7, lr}
 80069ec:	b087      	sub	sp, #28
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	60f8      	str	r0, [r7, #12]
 80069f2:	60b9      	str	r1, [r7, #8]
 80069f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	7f1b      	ldrb	r3, [r3, #28]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d101      	bne.n	8006a06 <HAL_RTC_SetTime+0x1c>
 8006a02:	2302      	movs	r3, #2
 8006a04:	e087      	b.n	8006b16 <HAL_RTC_SetTime+0x12c>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d126      	bne.n	8006a66 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d102      	bne.n	8006a2c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 f97b 	bl	8006d2c <RTC_ByteToBcd2>
 8006a36:	4603      	mov	r3, r0
 8006a38:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	785b      	ldrb	r3, [r3, #1]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 f974 	bl	8006d2c <RTC_ByteToBcd2>
 8006a44:	4603      	mov	r3, r0
 8006a46:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006a48:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	789b      	ldrb	r3, [r3, #2]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 f96c 	bl	8006d2c <RTC_ByteToBcd2>
 8006a54:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a56:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	78db      	ldrb	r3, [r3, #3]
 8006a5e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006a60:	4313      	orrs	r3, r2
 8006a62:	617b      	str	r3, [r7, #20]
 8006a64:	e018      	b.n	8006a98 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d102      	bne.n	8006a7a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2200      	movs	r2, #0
 8006a78:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	785b      	ldrb	r3, [r3, #1]
 8006a84:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006a86:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006a8c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	78db      	ldrb	r3, [r3, #3]
 8006a92:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006a94:	4313      	orrs	r3, r2
 8006a96:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	22ca      	movs	r2, #202	@ 0xca
 8006a9e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2253      	movs	r2, #83	@ 0x53
 8006aa6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 f8e3 	bl	8006c74 <RTC_EnterInitMode>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006ab2:	7cfb      	ldrb	r3, [r7, #19]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d120      	bne.n	8006afa <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006ac2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006ac6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	689a      	ldr	r2, [r3, #8]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006ad6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6899      	ldr	r1, [r3, #8]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	68da      	ldr	r2, [r3, #12]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f000 f8f6 	bl	8006ce2 <RTC_ExitInitMode>
 8006af6:	4603      	mov	r3, r0
 8006af8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006afa:	7cfb      	ldrb	r3, [r7, #19]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d102      	bne.n	8006b06 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2201      	movs	r2, #1
 8006b04:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	22ff      	movs	r2, #255	@ 0xff
 8006b0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	771a      	strb	r2, [r3, #28]

  return status;
 8006b14:	7cfb      	ldrb	r3, [r7, #19]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	371c      	adds	r7, #28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd90      	pop	{r4, r7, pc}

08006b1e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006b1e:	b590      	push	{r4, r7, lr}
 8006b20:	b087      	sub	sp, #28
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	60f8      	str	r0, [r7, #12]
 8006b26:	60b9      	str	r1, [r7, #8]
 8006b28:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	7f1b      	ldrb	r3, [r3, #28]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d101      	bne.n	8006b3a <HAL_RTC_SetDate+0x1c>
 8006b36:	2302      	movs	r3, #2
 8006b38:	e071      	b.n	8006c1e <HAL_RTC_SetDate+0x100>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2202      	movs	r2, #2
 8006b44:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10e      	bne.n	8006b6a <HAL_RTC_SetDate+0x4c>
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	785b      	ldrb	r3, [r3, #1]
 8006b50:	f003 0310 	and.w	r3, r3, #16
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d008      	beq.n	8006b6a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	785b      	ldrb	r3, [r3, #1]
 8006b5c:	f023 0310 	bic.w	r3, r3, #16
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	330a      	adds	r3, #10
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d11c      	bne.n	8006baa <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	78db      	ldrb	r3, [r3, #3]
 8006b74:	4618      	mov	r0, r3
 8006b76:	f000 f8d9 	bl	8006d2c <RTC_ByteToBcd2>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	785b      	ldrb	r3, [r3, #1]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 f8d2 	bl	8006d2c <RTC_ByteToBcd2>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006b8c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	789b      	ldrb	r3, [r3, #2]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 f8ca 	bl	8006d2c <RTC_ByteToBcd2>
 8006b98:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006b9a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	617b      	str	r3, [r7, #20]
 8006ba8:	e00e      	b.n	8006bc8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	78db      	ldrb	r3, [r3, #3]
 8006bae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	785b      	ldrb	r3, [r3, #1]
 8006bb4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006bb6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006bbc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	22ca      	movs	r2, #202	@ 0xca
 8006bce:	625a      	str	r2, [r3, #36]	@ 0x24
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2253      	movs	r2, #83	@ 0x53
 8006bd6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 f84b 	bl	8006c74 <RTC_EnterInitMode>
 8006bde:	4603      	mov	r3, r0
 8006be0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006be2:	7cfb      	ldrb	r3, [r7, #19]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10c      	bne.n	8006c02 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006bf2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006bf6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 f872 	bl	8006ce2 <RTC_ExitInitMode>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006c02:	7cfb      	ldrb	r3, [r7, #19]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d102      	bne.n	8006c0e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	22ff      	movs	r2, #255	@ 0xff
 8006c14:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	771a      	strb	r2, [r3, #28]

  return status;
 8006c1c:	7cfb      	ldrb	r3, [r7, #19]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	371c      	adds	r7, #28
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd90      	pop	{r4, r7, pc}
	...

08006c28 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a0d      	ldr	r2, [pc, #52]	@ (8006c70 <HAL_RTC_WaitForSynchro+0x48>)
 8006c3a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c3c:	f7fd f802 	bl	8003c44 <HAL_GetTick>
 8006c40:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006c42:	e009      	b.n	8006c58 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006c44:	f7fc fffe 	bl	8003c44 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c52:	d901      	bls.n	8006c58 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e007      	b.n	8006c68 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	f003 0320 	and.w	r3, r3, #32
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d0ee      	beq.n	8006c44 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	00013f5f 	.word	0x00013f5f

08006c74 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006c80:	2300      	movs	r3, #0
 8006c82:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d122      	bne.n	8006cd8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68da      	ldr	r2, [r3, #12]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006ca0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ca2:	f7fc ffcf 	bl	8003c44 <HAL_GetTick>
 8006ca6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006ca8:	e00c      	b.n	8006cc4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006caa:	f7fc ffcb 	bl	8003c44 <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006cb8:	d904      	bls.n	8006cc4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2204      	movs	r2, #4
 8006cbe:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d102      	bne.n	8006cd8 <RTC_EnterInitMode+0x64>
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d1e8      	bne.n	8006caa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b084      	sub	sp, #16
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68da      	ldr	r2, [r3, #12]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006cfc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f003 0320 	and.w	r3, r3, #32
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10a      	bne.n	8006d22 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7ff ff8b 	bl	8006c28 <HAL_RTC_WaitForSynchro>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d004      	beq.n	8006d22 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2204      	movs	r2, #4
 8006d1c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	4603      	mov	r3, r0
 8006d34:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006d36:	2300      	movs	r3, #0
 8006d38:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006d3a:	e005      	b.n	8006d48 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8006d42:	79fb      	ldrb	r3, [r7, #7]
 8006d44:	3b0a      	subs	r3, #10
 8006d46:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006d48:	79fb      	ldrb	r3, [r7, #7]
 8006d4a:	2b09      	cmp	r3, #9
 8006d4c:	d8f6      	bhi.n	8006d3c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	011b      	lsls	r3, r3, #4
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	79fb      	ldrb	r3, [r7, #7]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	b2db      	uxtb	r3, r3
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e07b      	b.n	8006e72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d108      	bne.n	8006d94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d8a:	d009      	beq.n	8006da0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	61da      	str	r2, [r3, #28]
 8006d92:	e005      	b.n	8006da0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d106      	bne.n	8006dc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7fb f9da 	bl	8002174 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006de8:	431a      	orrs	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006df2:	431a      	orrs	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	431a      	orrs	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	431a      	orrs	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e10:	431a      	orrs	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e1a:	431a      	orrs	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e24:	ea42 0103 	orr.w	r1, r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e2c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	0c1b      	lsrs	r3, r3, #16
 8006e3e:	f003 0104 	and.w	r1, r3, #4
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e46:	f003 0210 	and.w	r2, r3, #16
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	69da      	ldr	r2, [r3, #28]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3708      	adds	r7, #8
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b088      	sub	sp, #32
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	60f8      	str	r0, [r7, #12]
 8006e82:	60b9      	str	r1, [r7, #8]
 8006e84:	603b      	str	r3, [r7, #0]
 8006e86:	4613      	mov	r3, r2
 8006e88:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e8a:	f7fc fedb 	bl	8003c44 <HAL_GetTick>
 8006e8e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006e90:	88fb      	ldrh	r3, [r7, #6]
 8006e92:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d001      	beq.n	8006ea4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	e12a      	b.n	80070fa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d002      	beq.n	8006eb0 <HAL_SPI_Transmit+0x36>
 8006eaa:	88fb      	ldrh	r3, [r7, #6]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e122      	b.n	80070fa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d101      	bne.n	8006ec2 <HAL_SPI_Transmit+0x48>
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	e11b      	b.n	80070fa <HAL_SPI_Transmit+0x280>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2203      	movs	r2, #3
 8006ece:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	88fa      	ldrh	r2, [r7, #6]
 8006ee2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	88fa      	ldrh	r2, [r7, #6]
 8006ee8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f10:	d10f      	bne.n	8006f32 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f3c:	2b40      	cmp	r3, #64	@ 0x40
 8006f3e:	d007      	beq.n	8006f50 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f58:	d152      	bne.n	8007000 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d002      	beq.n	8006f68 <HAL_SPI_Transmit+0xee>
 8006f62:	8b7b      	ldrh	r3, [r7, #26]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d145      	bne.n	8006ff4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f6c:	881a      	ldrh	r2, [r3, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f78:	1c9a      	adds	r2, r3, #2
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	3b01      	subs	r3, #1
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f8c:	e032      	b.n	8006ff4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f003 0302 	and.w	r3, r3, #2
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d112      	bne.n	8006fc2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa0:	881a      	ldrh	r2, [r3, #0]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fac:	1c9a      	adds	r2, r3, #2
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006fc0:	e018      	b.n	8006ff4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fc2:	f7fc fe3f 	bl	8003c44 <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d803      	bhi.n	8006fda <HAL_SPI_Transmit+0x160>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd8:	d102      	bne.n	8006fe0 <HAL_SPI_Transmit+0x166>
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d109      	bne.n	8006ff4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e082      	b.n	80070fa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1c7      	bne.n	8006f8e <HAL_SPI_Transmit+0x114>
 8006ffe:	e053      	b.n	80070a8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d002      	beq.n	800700e <HAL_SPI_Transmit+0x194>
 8007008:	8b7b      	ldrh	r3, [r7, #26]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d147      	bne.n	800709e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	330c      	adds	r3, #12
 8007018:	7812      	ldrb	r2, [r2, #0]
 800701a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800702a:	b29b      	uxth	r3, r3
 800702c:	3b01      	subs	r3, #1
 800702e:	b29a      	uxth	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007034:	e033      	b.n	800709e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	2b02      	cmp	r3, #2
 8007042:	d113      	bne.n	800706c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	330c      	adds	r3, #12
 800704e:	7812      	ldrb	r2, [r2, #0]
 8007050:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007056:	1c5a      	adds	r2, r3, #1
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007060:	b29b      	uxth	r3, r3
 8007062:	3b01      	subs	r3, #1
 8007064:	b29a      	uxth	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	86da      	strh	r2, [r3, #54]	@ 0x36
 800706a:	e018      	b.n	800709e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800706c:	f7fc fdea 	bl	8003c44 <HAL_GetTick>
 8007070:	4602      	mov	r2, r0
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	683a      	ldr	r2, [r7, #0]
 8007078:	429a      	cmp	r2, r3
 800707a:	d803      	bhi.n	8007084 <HAL_SPI_Transmit+0x20a>
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007082:	d102      	bne.n	800708a <HAL_SPI_Transmit+0x210>
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d109      	bne.n	800709e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e02d      	b.n	80070fa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1c6      	bne.n	8007036 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070a8:	69fa      	ldr	r2, [r7, #28]
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f000 fa67 	bl	8007580 <SPI_EndRxTxTransaction>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d002      	beq.n	80070be <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2220      	movs	r2, #32
 80070bc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10a      	bne.n	80070dc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070c6:	2300      	movs	r3, #0
 80070c8:	617b      	str	r3, [r7, #20]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	617b      	str	r3, [r7, #20]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	617b      	str	r3, [r7, #20]
 80070da:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e000      	b.n	80070fa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80070f8:	2300      	movs	r3, #0
  }
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3720      	adds	r7, #32
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b08a      	sub	sp, #40	@ 0x28
 8007106:	af00      	add	r7, sp, #0
 8007108:	60f8      	str	r0, [r7, #12]
 800710a:	60b9      	str	r1, [r7, #8]
 800710c:	607a      	str	r2, [r7, #4]
 800710e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007110:	2301      	movs	r3, #1
 8007112:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007114:	f7fc fd96 	bl	8003c44 <HAL_GetTick>
 8007118:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007120:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007128:	887b      	ldrh	r3, [r7, #2]
 800712a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800712c:	7ffb      	ldrb	r3, [r7, #31]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d00c      	beq.n	800714c <HAL_SPI_TransmitReceive+0x4a>
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007138:	d106      	bne.n	8007148 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d102      	bne.n	8007148 <HAL_SPI_TransmitReceive+0x46>
 8007142:	7ffb      	ldrb	r3, [r7, #31]
 8007144:	2b04      	cmp	r3, #4
 8007146:	d001      	beq.n	800714c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007148:	2302      	movs	r3, #2
 800714a:	e17f      	b.n	800744c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d005      	beq.n	800715e <HAL_SPI_TransmitReceive+0x5c>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d002      	beq.n	800715e <HAL_SPI_TransmitReceive+0x5c>
 8007158:	887b      	ldrh	r3, [r7, #2]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e174      	b.n	800744c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007168:	2b01      	cmp	r3, #1
 800716a:	d101      	bne.n	8007170 <HAL_SPI_TransmitReceive+0x6e>
 800716c:	2302      	movs	r3, #2
 800716e:	e16d      	b.n	800744c <HAL_SPI_TransmitReceive+0x34a>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b04      	cmp	r3, #4
 8007182:	d003      	beq.n	800718c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2205      	movs	r2, #5
 8007188:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	887a      	ldrh	r2, [r7, #2]
 800719c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	887a      	ldrh	r2, [r7, #2]
 80071a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	887a      	ldrh	r2, [r7, #2]
 80071ae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	887a      	ldrh	r2, [r7, #2]
 80071b4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071cc:	2b40      	cmp	r3, #64	@ 0x40
 80071ce:	d007      	beq.n	80071e0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071e8:	d17e      	bne.n	80072e8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d002      	beq.n	80071f8 <HAL_SPI_TransmitReceive+0xf6>
 80071f2:	8afb      	ldrh	r3, [r7, #22]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d16c      	bne.n	80072d2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071fc:	881a      	ldrh	r2, [r3, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007208:	1c9a      	adds	r2, r3, #2
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007212:	b29b      	uxth	r3, r3
 8007214:	3b01      	subs	r3, #1
 8007216:	b29a      	uxth	r2, r3
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800721c:	e059      	b.n	80072d2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f003 0302 	and.w	r3, r3, #2
 8007228:	2b02      	cmp	r3, #2
 800722a:	d11b      	bne.n	8007264 <HAL_SPI_TransmitReceive+0x162>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007230:	b29b      	uxth	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d016      	beq.n	8007264 <HAL_SPI_TransmitReceive+0x162>
 8007236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007238:	2b01      	cmp	r3, #1
 800723a:	d113      	bne.n	8007264 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007240:	881a      	ldrh	r2, [r3, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800724c:	1c9a      	adds	r2, r3, #2
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007256:	b29b      	uxth	r3, r3
 8007258:	3b01      	subs	r3, #1
 800725a:	b29a      	uxth	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b01      	cmp	r3, #1
 8007270:	d119      	bne.n	80072a6 <HAL_SPI_TransmitReceive+0x1a4>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007276:	b29b      	uxth	r3, r3
 8007278:	2b00      	cmp	r3, #0
 800727a:	d014      	beq.n	80072a6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68da      	ldr	r2, [r3, #12]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007286:	b292      	uxth	r2, r2
 8007288:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800728e:	1c9a      	adds	r2, r3, #2
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007298:	b29b      	uxth	r3, r3
 800729a:	3b01      	subs	r3, #1
 800729c:	b29a      	uxth	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072a2:	2301      	movs	r3, #1
 80072a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80072a6:	f7fc fccd 	bl	8003c44 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	6a3b      	ldr	r3, [r7, #32]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d80d      	bhi.n	80072d2 <HAL_SPI_TransmitReceive+0x1d0>
 80072b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072bc:	d009      	beq.n	80072d2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e0bc      	b.n	800744c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1a0      	bne.n	800721e <HAL_SPI_TransmitReceive+0x11c>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d19b      	bne.n	800721e <HAL_SPI_TransmitReceive+0x11c>
 80072e6:	e082      	b.n	80073ee <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <HAL_SPI_TransmitReceive+0x1f4>
 80072f0:	8afb      	ldrh	r3, [r7, #22]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d171      	bne.n	80073da <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	330c      	adds	r3, #12
 8007300:	7812      	ldrb	r2, [r2, #0]
 8007302:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007308:	1c5a      	adds	r2, r3, #1
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007312:	b29b      	uxth	r3, r3
 8007314:	3b01      	subs	r3, #1
 8007316:	b29a      	uxth	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800731c:	e05d      	b.n	80073da <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f003 0302 	and.w	r3, r3, #2
 8007328:	2b02      	cmp	r3, #2
 800732a:	d11c      	bne.n	8007366 <HAL_SPI_TransmitReceive+0x264>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007330:	b29b      	uxth	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d017      	beq.n	8007366 <HAL_SPI_TransmitReceive+0x264>
 8007336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007338:	2b01      	cmp	r3, #1
 800733a:	d114      	bne.n	8007366 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	330c      	adds	r3, #12
 8007346:	7812      	ldrb	r2, [r2, #0]
 8007348:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007358:	b29b      	uxth	r3, r3
 800735a:	3b01      	subs	r3, #1
 800735c:	b29a      	uxth	r2, r3
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	2b01      	cmp	r3, #1
 8007372:	d119      	bne.n	80073a8 <HAL_SPI_TransmitReceive+0x2a6>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007378:	b29b      	uxth	r3, r3
 800737a:	2b00      	cmp	r3, #0
 800737c:	d014      	beq.n	80073a8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68da      	ldr	r2, [r3, #12]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007388:	b2d2      	uxtb	r2, r2
 800738a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800739a:	b29b      	uxth	r3, r3
 800739c:	3b01      	subs	r3, #1
 800739e:	b29a      	uxth	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073a4:	2301      	movs	r3, #1
 80073a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80073a8:	f7fc fc4c 	bl	8003c44 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	6a3b      	ldr	r3, [r7, #32]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d803      	bhi.n	80073c0 <HAL_SPI_TransmitReceive+0x2be>
 80073b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073be:	d102      	bne.n	80073c6 <HAL_SPI_TransmitReceive+0x2c4>
 80073c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d109      	bne.n	80073da <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e038      	b.n	800744c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073de:	b29b      	uxth	r3, r3
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d19c      	bne.n	800731e <HAL_SPI_TransmitReceive+0x21c>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d197      	bne.n	800731e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073ee:	6a3a      	ldr	r2, [r7, #32]
 80073f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f000 f8c4 	bl	8007580 <SPI_EndRxTxTransaction>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d008      	beq.n	8007410 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2220      	movs	r2, #32
 8007402:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e01d      	b.n	800744c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10a      	bne.n	800742e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007418:	2300      	movs	r3, #0
 800741a:	613b      	str	r3, [r7, #16]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	613b      	str	r3, [r7, #16]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	613b      	str	r3, [r7, #16]
 800742c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007442:	2b00      	cmp	r3, #0
 8007444:	d001      	beq.n	800744a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e000      	b.n	800744c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800744a:	2300      	movs	r3, #0
  }
}
 800744c:	4618      	mov	r0, r3
 800744e:	3728      	adds	r7, #40	@ 0x28
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007462:	b2db      	uxtb	r3, r3
}
 8007464:	4618      	mov	r0, r3
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b088      	sub	sp, #32
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	603b      	str	r3, [r7, #0]
 800747c:	4613      	mov	r3, r2
 800747e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007480:	f7fc fbe0 	bl	8003c44 <HAL_GetTick>
 8007484:	4602      	mov	r2, r0
 8007486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007488:	1a9b      	subs	r3, r3, r2
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	4413      	add	r3, r2
 800748e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007490:	f7fc fbd8 	bl	8003c44 <HAL_GetTick>
 8007494:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007496:	4b39      	ldr	r3, [pc, #228]	@ (800757c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	015b      	lsls	r3, r3, #5
 800749c:	0d1b      	lsrs	r3, r3, #20
 800749e:	69fa      	ldr	r2, [r7, #28]
 80074a0:	fb02 f303 	mul.w	r3, r2, r3
 80074a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074a6:	e054      	b.n	8007552 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ae:	d050      	beq.n	8007552 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074b0:	f7fc fbc8 	bl	8003c44 <HAL_GetTick>
 80074b4:	4602      	mov	r2, r0
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	69fa      	ldr	r2, [r7, #28]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d902      	bls.n	80074c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d13d      	bne.n	8007542 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80074d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80074de:	d111      	bne.n	8007504 <SPI_WaitFlagStateUntilTimeout+0x94>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074e8:	d004      	beq.n	80074f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074f2:	d107      	bne.n	8007504 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007502:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007508:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800750c:	d10f      	bne.n	800752e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800752c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e017      	b.n	8007572 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007548:	2300      	movs	r3, #0
 800754a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	3b01      	subs	r3, #1
 8007550:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	689a      	ldr	r2, [r3, #8]
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	4013      	ands	r3, r2
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	429a      	cmp	r2, r3
 8007560:	bf0c      	ite	eq
 8007562:	2301      	moveq	r3, #1
 8007564:	2300      	movne	r3, #0
 8007566:	b2db      	uxtb	r3, r3
 8007568:	461a      	mov	r2, r3
 800756a:	79fb      	ldrb	r3, [r7, #7]
 800756c:	429a      	cmp	r2, r3
 800756e:	d19b      	bne.n	80074a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3720      	adds	r7, #32
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	20000004 	.word	0x20000004

08007580 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b088      	sub	sp, #32
 8007584:	af02      	add	r7, sp, #8
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2201      	movs	r2, #1
 8007594:	2102      	movs	r1, #2
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f7ff ff6a 	bl	8007470 <SPI_WaitFlagStateUntilTimeout>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d007      	beq.n	80075b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075a6:	f043 0220 	orr.w	r2, r3, #32
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e032      	b.n	8007618 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80075b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007620 <SPI_EndRxTxTransaction+0xa0>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a1b      	ldr	r2, [pc, #108]	@ (8007624 <SPI_EndRxTxTransaction+0xa4>)
 80075b8:	fba2 2303 	umull	r2, r3, r2, r3
 80075bc:	0d5b      	lsrs	r3, r3, #21
 80075be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80075c2:	fb02 f303 	mul.w	r3, r2, r3
 80075c6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075d0:	d112      	bne.n	80075f8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2200      	movs	r2, #0
 80075da:	2180      	movs	r1, #128	@ 0x80
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f7ff ff47 	bl	8007470 <SPI_WaitFlagStateUntilTimeout>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d016      	beq.n	8007616 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ec:	f043 0220 	orr.w	r2, r3, #32
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e00f      	b.n	8007618 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00a      	beq.n	8007614 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	3b01      	subs	r3, #1
 8007602:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800760e:	2b80      	cmp	r3, #128	@ 0x80
 8007610:	d0f2      	beq.n	80075f8 <SPI_EndRxTxTransaction+0x78>
 8007612:	e000      	b.n	8007616 <SPI_EndRxTxTransaction+0x96>
        break;
 8007614:	bf00      	nop
  }

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3718      	adds	r7, #24
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	20000004 	.word	0x20000004
 8007624:	165e9f81 	.word	0x165e9f81

08007628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d101      	bne.n	800763a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e041      	b.n	80076be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d106      	bne.n	8007654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7fa fdea 	bl	8002228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2202      	movs	r2, #2
 8007658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	3304      	adds	r3, #4
 8007664:	4619      	mov	r1, r3
 8007666:	4610      	mov	r0, r2
 8007668:	f000 fa9e 	bl	8007ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
	...

080076c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d001      	beq.n	80076e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e044      	b.n	800776a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68da      	ldr	r2, [r3, #12]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f042 0201 	orr.w	r2, r2, #1
 80076f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a1e      	ldr	r2, [pc, #120]	@ (8007778 <HAL_TIM_Base_Start_IT+0xb0>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d018      	beq.n	8007734 <HAL_TIM_Base_Start_IT+0x6c>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800770a:	d013      	beq.n	8007734 <HAL_TIM_Base_Start_IT+0x6c>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a1a      	ldr	r2, [pc, #104]	@ (800777c <HAL_TIM_Base_Start_IT+0xb4>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d00e      	beq.n	8007734 <HAL_TIM_Base_Start_IT+0x6c>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a19      	ldr	r2, [pc, #100]	@ (8007780 <HAL_TIM_Base_Start_IT+0xb8>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d009      	beq.n	8007734 <HAL_TIM_Base_Start_IT+0x6c>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a17      	ldr	r2, [pc, #92]	@ (8007784 <HAL_TIM_Base_Start_IT+0xbc>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d004      	beq.n	8007734 <HAL_TIM_Base_Start_IT+0x6c>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a16      	ldr	r2, [pc, #88]	@ (8007788 <HAL_TIM_Base_Start_IT+0xc0>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d111      	bne.n	8007758 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f003 0307 	and.w	r3, r3, #7
 800773e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b06      	cmp	r3, #6
 8007744:	d010      	beq.n	8007768 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f042 0201 	orr.w	r2, r2, #1
 8007754:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007756:	e007      	b.n	8007768 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f042 0201 	orr.w	r2, r2, #1
 8007766:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	40010000 	.word	0x40010000
 800777c:	40000400 	.word	0x40000400
 8007780:	40000800 	.word	0x40000800
 8007784:	40000c00 	.word	0x40000c00
 8007788:	40014000 	.word	0x40014000

0800778c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68da      	ldr	r2, [r3, #12]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f022 0201 	bic.w	r2, r2, #1
 80077a2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	6a1a      	ldr	r2, [r3, #32]
 80077aa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80077ae:	4013      	ands	r3, r2
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10f      	bne.n	80077d4 <HAL_TIM_Base_Stop_IT+0x48>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	6a1a      	ldr	r2, [r3, #32]
 80077ba:	f240 4344 	movw	r3, #1092	@ 0x444
 80077be:	4013      	ands	r3, r2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d107      	bne.n	80077d4 <HAL_TIM_Base_Stop_IT+0x48>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 0201 	bic.w	r2, r2, #1
 80077d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d020      	beq.n	800784e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f003 0302 	and.w	r3, r3, #2
 8007812:	2b00      	cmp	r3, #0
 8007814:	d01b      	beq.n	800784e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f06f 0202 	mvn.w	r2, #2
 800781e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	f003 0303 	and.w	r3, r3, #3
 8007830:	2b00      	cmp	r3, #0
 8007832:	d003      	beq.n	800783c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f999 	bl	8007b6c <HAL_TIM_IC_CaptureCallback>
 800783a:	e005      	b.n	8007848 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f98b 	bl	8007b58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f99c 	bl	8007b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	f003 0304 	and.w	r3, r3, #4
 8007854:	2b00      	cmp	r3, #0
 8007856:	d020      	beq.n	800789a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f003 0304 	and.w	r3, r3, #4
 800785e:	2b00      	cmp	r3, #0
 8007860:	d01b      	beq.n	800789a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f06f 0204 	mvn.w	r2, #4
 800786a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2202      	movs	r2, #2
 8007870:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800787c:	2b00      	cmp	r3, #0
 800787e:	d003      	beq.n	8007888 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f973 	bl	8007b6c <HAL_TIM_IC_CaptureCallback>
 8007886:	e005      	b.n	8007894 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f965 	bl	8007b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f976 	bl	8007b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	f003 0308 	and.w	r3, r3, #8
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d020      	beq.n	80078e6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f003 0308 	and.w	r3, r3, #8
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d01b      	beq.n	80078e6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f06f 0208 	mvn.w	r2, #8
 80078b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2204      	movs	r2, #4
 80078bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	f003 0303 	and.w	r3, r3, #3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f94d 	bl	8007b6c <HAL_TIM_IC_CaptureCallback>
 80078d2:	e005      	b.n	80078e0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f93f 	bl	8007b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f950 	bl	8007b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	f003 0310 	and.w	r3, r3, #16
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d020      	beq.n	8007932 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f003 0310 	and.w	r3, r3, #16
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d01b      	beq.n	8007932 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f06f 0210 	mvn.w	r2, #16
 8007902:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2208      	movs	r2, #8
 8007908:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007914:	2b00      	cmp	r3, #0
 8007916:	d003      	beq.n	8007920 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f927 	bl	8007b6c <HAL_TIM_IC_CaptureCallback>
 800791e:	e005      	b.n	800792c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f919 	bl	8007b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f92a 	bl	8007b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00c      	beq.n	8007956 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	2b00      	cmp	r3, #0
 8007944:	d007      	beq.n	8007956 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f06f 0201 	mvn.w	r2, #1
 800794e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7fa fadb 	bl	8001f0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00c      	beq.n	800797a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007966:	2b00      	cmp	r3, #0
 8007968:	d007      	beq.n	800797a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fab5 	bl	8007ee4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00c      	beq.n	800799e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800798a:	2b00      	cmp	r3, #0
 800798c:	d007      	beq.n	800799e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f8fb 	bl	8007b94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	f003 0320 	and.w	r3, r3, #32
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00c      	beq.n	80079c2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d007      	beq.n	80079c2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f06f 0220 	mvn.w	r2, #32
 80079ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fa87 	bl	8007ed0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079c2:	bf00      	nop
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b084      	sub	sp, #16
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079d4:	2300      	movs	r3, #0
 80079d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d101      	bne.n	80079e6 <HAL_TIM_ConfigClockSource+0x1c>
 80079e2:	2302      	movs	r3, #2
 80079e4:	e0b4      	b.n	8007b50 <HAL_TIM_ConfigClockSource+0x186>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2202      	movs	r2, #2
 80079f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007a04:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a0c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a1e:	d03e      	beq.n	8007a9e <HAL_TIM_ConfigClockSource+0xd4>
 8007a20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a24:	f200 8087 	bhi.w	8007b36 <HAL_TIM_ConfigClockSource+0x16c>
 8007a28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a2c:	f000 8086 	beq.w	8007b3c <HAL_TIM_ConfigClockSource+0x172>
 8007a30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a34:	d87f      	bhi.n	8007b36 <HAL_TIM_ConfigClockSource+0x16c>
 8007a36:	2b70      	cmp	r3, #112	@ 0x70
 8007a38:	d01a      	beq.n	8007a70 <HAL_TIM_ConfigClockSource+0xa6>
 8007a3a:	2b70      	cmp	r3, #112	@ 0x70
 8007a3c:	d87b      	bhi.n	8007b36 <HAL_TIM_ConfigClockSource+0x16c>
 8007a3e:	2b60      	cmp	r3, #96	@ 0x60
 8007a40:	d050      	beq.n	8007ae4 <HAL_TIM_ConfigClockSource+0x11a>
 8007a42:	2b60      	cmp	r3, #96	@ 0x60
 8007a44:	d877      	bhi.n	8007b36 <HAL_TIM_ConfigClockSource+0x16c>
 8007a46:	2b50      	cmp	r3, #80	@ 0x50
 8007a48:	d03c      	beq.n	8007ac4 <HAL_TIM_ConfigClockSource+0xfa>
 8007a4a:	2b50      	cmp	r3, #80	@ 0x50
 8007a4c:	d873      	bhi.n	8007b36 <HAL_TIM_ConfigClockSource+0x16c>
 8007a4e:	2b40      	cmp	r3, #64	@ 0x40
 8007a50:	d058      	beq.n	8007b04 <HAL_TIM_ConfigClockSource+0x13a>
 8007a52:	2b40      	cmp	r3, #64	@ 0x40
 8007a54:	d86f      	bhi.n	8007b36 <HAL_TIM_ConfigClockSource+0x16c>
 8007a56:	2b30      	cmp	r3, #48	@ 0x30
 8007a58:	d064      	beq.n	8007b24 <HAL_TIM_ConfigClockSource+0x15a>
 8007a5a:	2b30      	cmp	r3, #48	@ 0x30
 8007a5c:	d86b      	bhi.n	8007b36 <HAL_TIM_ConfigClockSource+0x16c>
 8007a5e:	2b20      	cmp	r3, #32
 8007a60:	d060      	beq.n	8007b24 <HAL_TIM_ConfigClockSource+0x15a>
 8007a62:	2b20      	cmp	r3, #32
 8007a64:	d867      	bhi.n	8007b36 <HAL_TIM_ConfigClockSource+0x16c>
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d05c      	beq.n	8007b24 <HAL_TIM_ConfigClockSource+0x15a>
 8007a6a:	2b10      	cmp	r3, #16
 8007a6c:	d05a      	beq.n	8007b24 <HAL_TIM_ConfigClockSource+0x15a>
 8007a6e:	e062      	b.n	8007b36 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a80:	f000 f998 	bl	8007db4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007a92:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	609a      	str	r2, [r3, #8]
      break;
 8007a9c:	e04f      	b.n	8007b3e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007aae:	f000 f981 	bl	8007db4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	689a      	ldr	r2, [r3, #8]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ac0:	609a      	str	r2, [r3, #8]
      break;
 8007ac2:	e03c      	b.n	8007b3e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	f000 f8f5 	bl	8007cc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2150      	movs	r1, #80	@ 0x50
 8007adc:	4618      	mov	r0, r3
 8007ade:	f000 f94e 	bl	8007d7e <TIM_ITRx_SetConfig>
      break;
 8007ae2:	e02c      	b.n	8007b3e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007af0:	461a      	mov	r2, r3
 8007af2:	f000 f914 	bl	8007d1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2160      	movs	r1, #96	@ 0x60
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 f93e 	bl	8007d7e <TIM_ITRx_SetConfig>
      break;
 8007b02:	e01c      	b.n	8007b3e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b10:	461a      	mov	r2, r3
 8007b12:	f000 f8d5 	bl	8007cc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2140      	movs	r1, #64	@ 0x40
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f000 f92e 	bl	8007d7e <TIM_ITRx_SetConfig>
      break;
 8007b22:	e00c      	b.n	8007b3e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	4610      	mov	r0, r2
 8007b30:	f000 f925 	bl	8007d7e <TIM_ITRx_SetConfig>
      break;
 8007b34:	e003      	b.n	8007b3e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	73fb      	strb	r3, [r7, #15]
      break;
 8007b3a:	e000      	b.n	8007b3e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007b3c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a3a      	ldr	r2, [pc, #232]	@ (8007ca4 <TIM_Base_SetConfig+0xfc>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d00f      	beq.n	8007be0 <TIM_Base_SetConfig+0x38>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bc6:	d00b      	beq.n	8007be0 <TIM_Base_SetConfig+0x38>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a37      	ldr	r2, [pc, #220]	@ (8007ca8 <TIM_Base_SetConfig+0x100>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d007      	beq.n	8007be0 <TIM_Base_SetConfig+0x38>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a36      	ldr	r2, [pc, #216]	@ (8007cac <TIM_Base_SetConfig+0x104>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d003      	beq.n	8007be0 <TIM_Base_SetConfig+0x38>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a35      	ldr	r2, [pc, #212]	@ (8007cb0 <TIM_Base_SetConfig+0x108>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d108      	bne.n	8007bf2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a2b      	ldr	r2, [pc, #172]	@ (8007ca4 <TIM_Base_SetConfig+0xfc>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d01b      	beq.n	8007c32 <TIM_Base_SetConfig+0x8a>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c00:	d017      	beq.n	8007c32 <TIM_Base_SetConfig+0x8a>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a28      	ldr	r2, [pc, #160]	@ (8007ca8 <TIM_Base_SetConfig+0x100>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d013      	beq.n	8007c32 <TIM_Base_SetConfig+0x8a>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a27      	ldr	r2, [pc, #156]	@ (8007cac <TIM_Base_SetConfig+0x104>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d00f      	beq.n	8007c32 <TIM_Base_SetConfig+0x8a>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a26      	ldr	r2, [pc, #152]	@ (8007cb0 <TIM_Base_SetConfig+0x108>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d00b      	beq.n	8007c32 <TIM_Base_SetConfig+0x8a>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a25      	ldr	r2, [pc, #148]	@ (8007cb4 <TIM_Base_SetConfig+0x10c>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d007      	beq.n	8007c32 <TIM_Base_SetConfig+0x8a>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a24      	ldr	r2, [pc, #144]	@ (8007cb8 <TIM_Base_SetConfig+0x110>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d003      	beq.n	8007c32 <TIM_Base_SetConfig+0x8a>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a23      	ldr	r2, [pc, #140]	@ (8007cbc <TIM_Base_SetConfig+0x114>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d108      	bne.n	8007c44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	689a      	ldr	r2, [r3, #8]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a0e      	ldr	r2, [pc, #56]	@ (8007ca4 <TIM_Base_SetConfig+0xfc>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d103      	bne.n	8007c78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	691a      	ldr	r2, [r3, #16]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	f003 0301 	and.w	r3, r3, #1
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d105      	bne.n	8007c96 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	f023 0201 	bic.w	r2, r3, #1
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	611a      	str	r2, [r3, #16]
  }
}
 8007c96:	bf00      	nop
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	40010000 	.word	0x40010000
 8007ca8:	40000400 	.word	0x40000400
 8007cac:	40000800 	.word	0x40000800
 8007cb0:	40000c00 	.word	0x40000c00
 8007cb4:	40014000 	.word	0x40014000
 8007cb8:	40014400 	.word	0x40014400
 8007cbc:	40014800 	.word	0x40014800

08007cc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b087      	sub	sp, #28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6a1b      	ldr	r3, [r3, #32]
 8007cd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	f023 0201 	bic.w	r2, r3, #1
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	011b      	lsls	r3, r3, #4
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	f023 030a 	bic.w	r3, r3, #10
 8007cfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007cfe:	697a      	ldr	r2, [r7, #20]
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	621a      	str	r2, [r3, #32]
}
 8007d12:	bf00      	nop
 8007d14:	371c      	adds	r7, #28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b087      	sub	sp, #28
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	60f8      	str	r0, [r7, #12]
 8007d26:	60b9      	str	r1, [r7, #8]
 8007d28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6a1b      	ldr	r3, [r3, #32]
 8007d34:	f023 0210 	bic.w	r2, r3, #16
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	031b      	lsls	r3, r3, #12
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007d5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	011b      	lsls	r3, r3, #4
 8007d60:	697a      	ldr	r2, [r7, #20]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	621a      	str	r2, [r3, #32]
}
 8007d72:	bf00      	nop
 8007d74:	371c      	adds	r7, #28
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b085      	sub	sp, #20
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	f043 0307 	orr.w	r3, r3, #7
 8007da0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	609a      	str	r2, [r3, #8]
}
 8007da8:	bf00      	nop
 8007daa:	3714      	adds	r7, #20
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b087      	sub	sp, #28
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
 8007dc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007dce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	021a      	lsls	r2, r3, #8
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	609a      	str	r2, [r3, #8]
}
 8007de8:	bf00      	nop
 8007dea:	371c      	adds	r7, #28
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d101      	bne.n	8007e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e08:	2302      	movs	r3, #2
 8007e0a:	e050      	b.n	8007eae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2202      	movs	r2, #2
 8007e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8007ebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d018      	beq.n	8007e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e58:	d013      	beq.n	8007e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a18      	ldr	r2, [pc, #96]	@ (8007ec0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d00e      	beq.n	8007e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a16      	ldr	r2, [pc, #88]	@ (8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d009      	beq.n	8007e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a15      	ldr	r2, [pc, #84]	@ (8007ec8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d004      	beq.n	8007e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a13      	ldr	r2, [pc, #76]	@ (8007ecc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d10c      	bne.n	8007e9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	40010000 	.word	0x40010000
 8007ec0:	40000400 	.word	0x40000400
 8007ec4:	40000800 	.word	0x40000800
 8007ec8:	40000c00 	.word	0x40000c00
 8007ecc:	40014000 	.word	0x40014000

08007ed0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d101      	bne.n	8007f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e042      	b.n	8007f90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d106      	bne.n	8007f24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7fa f9aa 	bl	8002278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2224      	movs	r2, #36	@ 0x24
 8007f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68da      	ldr	r2, [r3, #12]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f973 	bl	8008228 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	691a      	ldr	r2, [r3, #16]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007f50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	695a      	ldr	r2, [r3, #20]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007f60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68da      	ldr	r2, [r3, #12]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2220      	movs	r2, #32
 8007f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b08a      	sub	sp, #40	@ 0x28
 8007f9c:	af02      	add	r7, sp, #8
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	603b      	str	r3, [r7, #0]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b20      	cmp	r3, #32
 8007fb6:	d175      	bne.n	80080a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d002      	beq.n	8007fc4 <HAL_UART_Transmit+0x2c>
 8007fbe:	88fb      	ldrh	r3, [r7, #6]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d101      	bne.n	8007fc8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e06e      	b.n	80080a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2221      	movs	r2, #33	@ 0x21
 8007fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007fd6:	f7fb fe35 	bl	8003c44 <HAL_GetTick>
 8007fda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	88fa      	ldrh	r2, [r7, #6]
 8007fe0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	88fa      	ldrh	r2, [r7, #6]
 8007fe6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ff0:	d108      	bne.n	8008004 <HAL_UART_Transmit+0x6c>
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d104      	bne.n	8008004 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	61bb      	str	r3, [r7, #24]
 8008002:	e003      	b.n	800800c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008008:	2300      	movs	r3, #0
 800800a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800800c:	e02e      	b.n	800806c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	2200      	movs	r2, #0
 8008016:	2180      	movs	r1, #128	@ 0x80
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	f000 f848 	bl	80080ae <UART_WaitOnFlagUntilTimeout>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d005      	beq.n	8008030 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2220      	movs	r2, #32
 8008028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e03a      	b.n	80080a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d10b      	bne.n	800804e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	461a      	mov	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008044:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	3302      	adds	r3, #2
 800804a:	61bb      	str	r3, [r7, #24]
 800804c:	e007      	b.n	800805e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	781a      	ldrb	r2, [r3, #0]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	3301      	adds	r3, #1
 800805c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008062:	b29b      	uxth	r3, r3
 8008064:	3b01      	subs	r3, #1
 8008066:	b29a      	uxth	r2, r3
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008070:	b29b      	uxth	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1cb      	bne.n	800800e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	2200      	movs	r2, #0
 800807e:	2140      	movs	r1, #64	@ 0x40
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 f814 	bl	80080ae <UART_WaitOnFlagUntilTimeout>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d005      	beq.n	8008098 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2220      	movs	r2, #32
 8008090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008094:	2303      	movs	r3, #3
 8008096:	e006      	b.n	80080a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2220      	movs	r2, #32
 800809c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	e000      	b.n	80080a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80080a4:	2302      	movs	r3, #2
  }
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3720      	adds	r7, #32
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b086      	sub	sp, #24
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	60f8      	str	r0, [r7, #12]
 80080b6:	60b9      	str	r1, [r7, #8]
 80080b8:	603b      	str	r3, [r7, #0]
 80080ba:	4613      	mov	r3, r2
 80080bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080be:	e03b      	b.n	8008138 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080c0:	6a3b      	ldr	r3, [r7, #32]
 80080c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c6:	d037      	beq.n	8008138 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080c8:	f7fb fdbc 	bl	8003c44 <HAL_GetTick>
 80080cc:	4602      	mov	r2, r0
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	6a3a      	ldr	r2, [r7, #32]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d302      	bcc.n	80080de <UART_WaitOnFlagUntilTimeout+0x30>
 80080d8:	6a3b      	ldr	r3, [r7, #32]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d101      	bne.n	80080e2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e03a      	b.n	8008158 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	f003 0304 	and.w	r3, r3, #4
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d023      	beq.n	8008138 <UART_WaitOnFlagUntilTimeout+0x8a>
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	2b80      	cmp	r3, #128	@ 0x80
 80080f4:	d020      	beq.n	8008138 <UART_WaitOnFlagUntilTimeout+0x8a>
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	2b40      	cmp	r3, #64	@ 0x40
 80080fa:	d01d      	beq.n	8008138 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 0308 	and.w	r3, r3, #8
 8008106:	2b08      	cmp	r3, #8
 8008108:	d116      	bne.n	8008138 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800810a:	2300      	movs	r3, #0
 800810c:	617b      	str	r3, [r7, #20]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	617b      	str	r3, [r7, #20]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	617b      	str	r3, [r7, #20]
 800811e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 f81d 	bl	8008160 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2208      	movs	r2, #8
 800812a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e00f      	b.n	8008158 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	4013      	ands	r3, r2
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	429a      	cmp	r2, r3
 8008146:	bf0c      	ite	eq
 8008148:	2301      	moveq	r3, #1
 800814a:	2300      	movne	r3, #0
 800814c:	b2db      	uxtb	r3, r3
 800814e:	461a      	mov	r2, r3
 8008150:	79fb      	ldrb	r3, [r7, #7]
 8008152:	429a      	cmp	r2, r3
 8008154:	d0b4      	beq.n	80080c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3718      	adds	r7, #24
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008160:	b480      	push	{r7}
 8008162:	b095      	sub	sp, #84	@ 0x54
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	330c      	adds	r3, #12
 800816e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008172:	e853 3f00 	ldrex	r3, [r3]
 8008176:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800817e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	330c      	adds	r3, #12
 8008186:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008188:	643a      	str	r2, [r7, #64]	@ 0x40
 800818a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800818e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008190:	e841 2300 	strex	r3, r2, [r1]
 8008194:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1e5      	bne.n	8008168 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	3314      	adds	r3, #20
 80081a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a4:	6a3b      	ldr	r3, [r7, #32]
 80081a6:	e853 3f00 	ldrex	r3, [r3]
 80081aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	f023 0301 	bic.w	r3, r3, #1
 80081b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	3314      	adds	r3, #20
 80081ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80081be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081c4:	e841 2300 	strex	r3, r2, [r1]
 80081c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1e5      	bne.n	800819c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d119      	bne.n	800820c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	330c      	adds	r3, #12
 80081de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	e853 3f00 	ldrex	r3, [r3]
 80081e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	f023 0310 	bic.w	r3, r3, #16
 80081ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	330c      	adds	r3, #12
 80081f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081f8:	61ba      	str	r2, [r7, #24]
 80081fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fc:	6979      	ldr	r1, [r7, #20]
 80081fe:	69ba      	ldr	r2, [r7, #24]
 8008200:	e841 2300 	strex	r3, r2, [r1]
 8008204:	613b      	str	r3, [r7, #16]
   return(result);
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1e5      	bne.n	80081d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2220      	movs	r2, #32
 8008210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800821a:	bf00      	nop
 800821c:	3754      	adds	r7, #84	@ 0x54
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
	...

08008228 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800822c:	b0c0      	sub	sp, #256	@ 0x100
 800822e:	af00      	add	r7, sp, #0
 8008230:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008244:	68d9      	ldr	r1, [r3, #12]
 8008246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	ea40 0301 	orr.w	r3, r0, r1
 8008250:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008256:	689a      	ldr	r2, [r3, #8]
 8008258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	431a      	orrs	r2, r3
 8008260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	431a      	orrs	r2, r3
 8008268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	4313      	orrs	r3, r2
 8008270:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008280:	f021 010c 	bic.w	r1, r1, #12
 8008284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800828e:	430b      	orrs	r3, r1
 8008290:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800829e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082a2:	6999      	ldr	r1, [r3, #24]
 80082a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	ea40 0301 	orr.w	r3, r0, r1
 80082ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80082b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	4b8f      	ldr	r3, [pc, #572]	@ (80084f4 <UART_SetConfig+0x2cc>)
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d005      	beq.n	80082c8 <UART_SetConfig+0xa0>
 80082bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	4b8d      	ldr	r3, [pc, #564]	@ (80084f8 <UART_SetConfig+0x2d0>)
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d104      	bne.n	80082d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082c8:	f7fe f9d8 	bl	800667c <HAL_RCC_GetPCLK2Freq>
 80082cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80082d0:	e003      	b.n	80082da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80082d2:	f7fe f9bf 	bl	8006654 <HAL_RCC_GetPCLK1Freq>
 80082d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082de:	69db      	ldr	r3, [r3, #28]
 80082e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082e4:	f040 810c 	bne.w	8008500 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082ec:	2200      	movs	r2, #0
 80082ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80082f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80082f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80082fa:	4622      	mov	r2, r4
 80082fc:	462b      	mov	r3, r5
 80082fe:	1891      	adds	r1, r2, r2
 8008300:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008302:	415b      	adcs	r3, r3
 8008304:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008306:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800830a:	4621      	mov	r1, r4
 800830c:	eb12 0801 	adds.w	r8, r2, r1
 8008310:	4629      	mov	r1, r5
 8008312:	eb43 0901 	adc.w	r9, r3, r1
 8008316:	f04f 0200 	mov.w	r2, #0
 800831a:	f04f 0300 	mov.w	r3, #0
 800831e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008322:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008326:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800832a:	4690      	mov	r8, r2
 800832c:	4699      	mov	r9, r3
 800832e:	4623      	mov	r3, r4
 8008330:	eb18 0303 	adds.w	r3, r8, r3
 8008334:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008338:	462b      	mov	r3, r5
 800833a:	eb49 0303 	adc.w	r3, r9, r3
 800833e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800834e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008352:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008356:	460b      	mov	r3, r1
 8008358:	18db      	adds	r3, r3, r3
 800835a:	653b      	str	r3, [r7, #80]	@ 0x50
 800835c:	4613      	mov	r3, r2
 800835e:	eb42 0303 	adc.w	r3, r2, r3
 8008362:	657b      	str	r3, [r7, #84]	@ 0x54
 8008364:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008368:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800836c:	f7f8 fc0e 	bl	8000b8c <__aeabi_uldivmod>
 8008370:	4602      	mov	r2, r0
 8008372:	460b      	mov	r3, r1
 8008374:	4b61      	ldr	r3, [pc, #388]	@ (80084fc <UART_SetConfig+0x2d4>)
 8008376:	fba3 2302 	umull	r2, r3, r3, r2
 800837a:	095b      	lsrs	r3, r3, #5
 800837c:	011c      	lsls	r4, r3, #4
 800837e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008382:	2200      	movs	r2, #0
 8008384:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008388:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800838c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008390:	4642      	mov	r2, r8
 8008392:	464b      	mov	r3, r9
 8008394:	1891      	adds	r1, r2, r2
 8008396:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008398:	415b      	adcs	r3, r3
 800839a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800839c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80083a0:	4641      	mov	r1, r8
 80083a2:	eb12 0a01 	adds.w	sl, r2, r1
 80083a6:	4649      	mov	r1, r9
 80083a8:	eb43 0b01 	adc.w	fp, r3, r1
 80083ac:	f04f 0200 	mov.w	r2, #0
 80083b0:	f04f 0300 	mov.w	r3, #0
 80083b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80083b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80083bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083c0:	4692      	mov	sl, r2
 80083c2:	469b      	mov	fp, r3
 80083c4:	4643      	mov	r3, r8
 80083c6:	eb1a 0303 	adds.w	r3, sl, r3
 80083ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80083ce:	464b      	mov	r3, r9
 80083d0:	eb4b 0303 	adc.w	r3, fp, r3
 80083d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80083d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80083e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80083e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80083ec:	460b      	mov	r3, r1
 80083ee:	18db      	adds	r3, r3, r3
 80083f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80083f2:	4613      	mov	r3, r2
 80083f4:	eb42 0303 	adc.w	r3, r2, r3
 80083f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80083fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80083fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008402:	f7f8 fbc3 	bl	8000b8c <__aeabi_uldivmod>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	4611      	mov	r1, r2
 800840c:	4b3b      	ldr	r3, [pc, #236]	@ (80084fc <UART_SetConfig+0x2d4>)
 800840e:	fba3 2301 	umull	r2, r3, r3, r1
 8008412:	095b      	lsrs	r3, r3, #5
 8008414:	2264      	movs	r2, #100	@ 0x64
 8008416:	fb02 f303 	mul.w	r3, r2, r3
 800841a:	1acb      	subs	r3, r1, r3
 800841c:	00db      	lsls	r3, r3, #3
 800841e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008422:	4b36      	ldr	r3, [pc, #216]	@ (80084fc <UART_SetConfig+0x2d4>)
 8008424:	fba3 2302 	umull	r2, r3, r3, r2
 8008428:	095b      	lsrs	r3, r3, #5
 800842a:	005b      	lsls	r3, r3, #1
 800842c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008430:	441c      	add	r4, r3
 8008432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008436:	2200      	movs	r2, #0
 8008438:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800843c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008440:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008444:	4642      	mov	r2, r8
 8008446:	464b      	mov	r3, r9
 8008448:	1891      	adds	r1, r2, r2
 800844a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800844c:	415b      	adcs	r3, r3
 800844e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008450:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008454:	4641      	mov	r1, r8
 8008456:	1851      	adds	r1, r2, r1
 8008458:	6339      	str	r1, [r7, #48]	@ 0x30
 800845a:	4649      	mov	r1, r9
 800845c:	414b      	adcs	r3, r1
 800845e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008460:	f04f 0200 	mov.w	r2, #0
 8008464:	f04f 0300 	mov.w	r3, #0
 8008468:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800846c:	4659      	mov	r1, fp
 800846e:	00cb      	lsls	r3, r1, #3
 8008470:	4651      	mov	r1, sl
 8008472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008476:	4651      	mov	r1, sl
 8008478:	00ca      	lsls	r2, r1, #3
 800847a:	4610      	mov	r0, r2
 800847c:	4619      	mov	r1, r3
 800847e:	4603      	mov	r3, r0
 8008480:	4642      	mov	r2, r8
 8008482:	189b      	adds	r3, r3, r2
 8008484:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008488:	464b      	mov	r3, r9
 800848a:	460a      	mov	r2, r1
 800848c:	eb42 0303 	adc.w	r3, r2, r3
 8008490:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80084a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80084a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80084a8:	460b      	mov	r3, r1
 80084aa:	18db      	adds	r3, r3, r3
 80084ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80084ae:	4613      	mov	r3, r2
 80084b0:	eb42 0303 	adc.w	r3, r2, r3
 80084b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80084ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80084be:	f7f8 fb65 	bl	8000b8c <__aeabi_uldivmod>
 80084c2:	4602      	mov	r2, r0
 80084c4:	460b      	mov	r3, r1
 80084c6:	4b0d      	ldr	r3, [pc, #52]	@ (80084fc <UART_SetConfig+0x2d4>)
 80084c8:	fba3 1302 	umull	r1, r3, r3, r2
 80084cc:	095b      	lsrs	r3, r3, #5
 80084ce:	2164      	movs	r1, #100	@ 0x64
 80084d0:	fb01 f303 	mul.w	r3, r1, r3
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	00db      	lsls	r3, r3, #3
 80084d8:	3332      	adds	r3, #50	@ 0x32
 80084da:	4a08      	ldr	r2, [pc, #32]	@ (80084fc <UART_SetConfig+0x2d4>)
 80084dc:	fba2 2303 	umull	r2, r3, r2, r3
 80084e0:	095b      	lsrs	r3, r3, #5
 80084e2:	f003 0207 	and.w	r2, r3, #7
 80084e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4422      	add	r2, r4
 80084ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084f0:	e106      	b.n	8008700 <UART_SetConfig+0x4d8>
 80084f2:	bf00      	nop
 80084f4:	40011000 	.word	0x40011000
 80084f8:	40011400 	.word	0x40011400
 80084fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008504:	2200      	movs	r2, #0
 8008506:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800850a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800850e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008512:	4642      	mov	r2, r8
 8008514:	464b      	mov	r3, r9
 8008516:	1891      	adds	r1, r2, r2
 8008518:	6239      	str	r1, [r7, #32]
 800851a:	415b      	adcs	r3, r3
 800851c:	627b      	str	r3, [r7, #36]	@ 0x24
 800851e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008522:	4641      	mov	r1, r8
 8008524:	1854      	adds	r4, r2, r1
 8008526:	4649      	mov	r1, r9
 8008528:	eb43 0501 	adc.w	r5, r3, r1
 800852c:	f04f 0200 	mov.w	r2, #0
 8008530:	f04f 0300 	mov.w	r3, #0
 8008534:	00eb      	lsls	r3, r5, #3
 8008536:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800853a:	00e2      	lsls	r2, r4, #3
 800853c:	4614      	mov	r4, r2
 800853e:	461d      	mov	r5, r3
 8008540:	4643      	mov	r3, r8
 8008542:	18e3      	adds	r3, r4, r3
 8008544:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008548:	464b      	mov	r3, r9
 800854a:	eb45 0303 	adc.w	r3, r5, r3
 800854e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800855e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008562:	f04f 0200 	mov.w	r2, #0
 8008566:	f04f 0300 	mov.w	r3, #0
 800856a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800856e:	4629      	mov	r1, r5
 8008570:	008b      	lsls	r3, r1, #2
 8008572:	4621      	mov	r1, r4
 8008574:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008578:	4621      	mov	r1, r4
 800857a:	008a      	lsls	r2, r1, #2
 800857c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008580:	f7f8 fb04 	bl	8000b8c <__aeabi_uldivmod>
 8008584:	4602      	mov	r2, r0
 8008586:	460b      	mov	r3, r1
 8008588:	4b60      	ldr	r3, [pc, #384]	@ (800870c <UART_SetConfig+0x4e4>)
 800858a:	fba3 2302 	umull	r2, r3, r3, r2
 800858e:	095b      	lsrs	r3, r3, #5
 8008590:	011c      	lsls	r4, r3, #4
 8008592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008596:	2200      	movs	r2, #0
 8008598:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800859c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80085a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80085a4:	4642      	mov	r2, r8
 80085a6:	464b      	mov	r3, r9
 80085a8:	1891      	adds	r1, r2, r2
 80085aa:	61b9      	str	r1, [r7, #24]
 80085ac:	415b      	adcs	r3, r3
 80085ae:	61fb      	str	r3, [r7, #28]
 80085b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085b4:	4641      	mov	r1, r8
 80085b6:	1851      	adds	r1, r2, r1
 80085b8:	6139      	str	r1, [r7, #16]
 80085ba:	4649      	mov	r1, r9
 80085bc:	414b      	adcs	r3, r1
 80085be:	617b      	str	r3, [r7, #20]
 80085c0:	f04f 0200 	mov.w	r2, #0
 80085c4:	f04f 0300 	mov.w	r3, #0
 80085c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80085cc:	4659      	mov	r1, fp
 80085ce:	00cb      	lsls	r3, r1, #3
 80085d0:	4651      	mov	r1, sl
 80085d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085d6:	4651      	mov	r1, sl
 80085d8:	00ca      	lsls	r2, r1, #3
 80085da:	4610      	mov	r0, r2
 80085dc:	4619      	mov	r1, r3
 80085de:	4603      	mov	r3, r0
 80085e0:	4642      	mov	r2, r8
 80085e2:	189b      	adds	r3, r3, r2
 80085e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80085e8:	464b      	mov	r3, r9
 80085ea:	460a      	mov	r2, r1
 80085ec:	eb42 0303 	adc.w	r3, r2, r3
 80085f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80085f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80085fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008600:	f04f 0200 	mov.w	r2, #0
 8008604:	f04f 0300 	mov.w	r3, #0
 8008608:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800860c:	4649      	mov	r1, r9
 800860e:	008b      	lsls	r3, r1, #2
 8008610:	4641      	mov	r1, r8
 8008612:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008616:	4641      	mov	r1, r8
 8008618:	008a      	lsls	r2, r1, #2
 800861a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800861e:	f7f8 fab5 	bl	8000b8c <__aeabi_uldivmod>
 8008622:	4602      	mov	r2, r0
 8008624:	460b      	mov	r3, r1
 8008626:	4611      	mov	r1, r2
 8008628:	4b38      	ldr	r3, [pc, #224]	@ (800870c <UART_SetConfig+0x4e4>)
 800862a:	fba3 2301 	umull	r2, r3, r3, r1
 800862e:	095b      	lsrs	r3, r3, #5
 8008630:	2264      	movs	r2, #100	@ 0x64
 8008632:	fb02 f303 	mul.w	r3, r2, r3
 8008636:	1acb      	subs	r3, r1, r3
 8008638:	011b      	lsls	r3, r3, #4
 800863a:	3332      	adds	r3, #50	@ 0x32
 800863c:	4a33      	ldr	r2, [pc, #204]	@ (800870c <UART_SetConfig+0x4e4>)
 800863e:	fba2 2303 	umull	r2, r3, r2, r3
 8008642:	095b      	lsrs	r3, r3, #5
 8008644:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008648:	441c      	add	r4, r3
 800864a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800864e:	2200      	movs	r2, #0
 8008650:	673b      	str	r3, [r7, #112]	@ 0x70
 8008652:	677a      	str	r2, [r7, #116]	@ 0x74
 8008654:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008658:	4642      	mov	r2, r8
 800865a:	464b      	mov	r3, r9
 800865c:	1891      	adds	r1, r2, r2
 800865e:	60b9      	str	r1, [r7, #8]
 8008660:	415b      	adcs	r3, r3
 8008662:	60fb      	str	r3, [r7, #12]
 8008664:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008668:	4641      	mov	r1, r8
 800866a:	1851      	adds	r1, r2, r1
 800866c:	6039      	str	r1, [r7, #0]
 800866e:	4649      	mov	r1, r9
 8008670:	414b      	adcs	r3, r1
 8008672:	607b      	str	r3, [r7, #4]
 8008674:	f04f 0200 	mov.w	r2, #0
 8008678:	f04f 0300 	mov.w	r3, #0
 800867c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008680:	4659      	mov	r1, fp
 8008682:	00cb      	lsls	r3, r1, #3
 8008684:	4651      	mov	r1, sl
 8008686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800868a:	4651      	mov	r1, sl
 800868c:	00ca      	lsls	r2, r1, #3
 800868e:	4610      	mov	r0, r2
 8008690:	4619      	mov	r1, r3
 8008692:	4603      	mov	r3, r0
 8008694:	4642      	mov	r2, r8
 8008696:	189b      	adds	r3, r3, r2
 8008698:	66bb      	str	r3, [r7, #104]	@ 0x68
 800869a:	464b      	mov	r3, r9
 800869c:	460a      	mov	r2, r1
 800869e:	eb42 0303 	adc.w	r3, r2, r3
 80086a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80086a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80086ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80086b0:	f04f 0200 	mov.w	r2, #0
 80086b4:	f04f 0300 	mov.w	r3, #0
 80086b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80086bc:	4649      	mov	r1, r9
 80086be:	008b      	lsls	r3, r1, #2
 80086c0:	4641      	mov	r1, r8
 80086c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086c6:	4641      	mov	r1, r8
 80086c8:	008a      	lsls	r2, r1, #2
 80086ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80086ce:	f7f8 fa5d 	bl	8000b8c <__aeabi_uldivmod>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	4b0d      	ldr	r3, [pc, #52]	@ (800870c <UART_SetConfig+0x4e4>)
 80086d8:	fba3 1302 	umull	r1, r3, r3, r2
 80086dc:	095b      	lsrs	r3, r3, #5
 80086de:	2164      	movs	r1, #100	@ 0x64
 80086e0:	fb01 f303 	mul.w	r3, r1, r3
 80086e4:	1ad3      	subs	r3, r2, r3
 80086e6:	011b      	lsls	r3, r3, #4
 80086e8:	3332      	adds	r3, #50	@ 0x32
 80086ea:	4a08      	ldr	r2, [pc, #32]	@ (800870c <UART_SetConfig+0x4e4>)
 80086ec:	fba2 2303 	umull	r2, r3, r2, r3
 80086f0:	095b      	lsrs	r3, r3, #5
 80086f2:	f003 020f 	and.w	r2, r3, #15
 80086f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4422      	add	r2, r4
 80086fe:	609a      	str	r2, [r3, #8]
}
 8008700:	bf00      	nop
 8008702:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008706:	46bd      	mov	sp, r7
 8008708:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800870c:	51eb851f 	.word	0x51eb851f

08008710 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008714:	4904      	ldr	r1, [pc, #16]	@ (8008728 <MX_FATFS_Init+0x18>)
 8008716:	4805      	ldr	r0, [pc, #20]	@ (800872c <MX_FATFS_Init+0x1c>)
 8008718:	f005 fb0a 	bl	800dd30 <FATFS_LinkDriver>
 800871c:	4603      	mov	r3, r0
 800871e:	461a      	mov	r2, r3
 8008720:	4b03      	ldr	r3, [pc, #12]	@ (8008730 <MX_FATFS_Init+0x20>)
 8008722:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008724:	bf00      	nop
 8008726:	bd80      	pop	{r7, pc}
 8008728:	20002a6c 	.word	0x20002a6c
 800872c:	2000002c 	.word	0x2000002c
 8008730:	20002a68 	.word	0x20002a68

08008734 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008734:	b480      	push	{r7}
 8008736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008738:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800873a:	4618      	mov	r0, r3
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	4603      	mov	r3, r0
 800874c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800874e:	79fb      	ldrb	r3, [r7, #7]
 8008750:	4618      	mov	r0, r3
 8008752:	f7f8 fd4d 	bl	80011f0 <SD_disk_initialize>
 8008756:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008758:	4618      	mov	r0, r3
 800875a:	3708      	adds	r7, #8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	4603      	mov	r3, r0
 8008768:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800876a:	79fb      	ldrb	r3, [r7, #7]
 800876c:	4618      	mov	r0, r3
 800876e:	f7f8 fe29 	bl	80013c4 <SD_disk_status>
 8008772:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008774:	4618      	mov	r0, r3
 8008776:	3708      	adds	r7, #8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	60b9      	str	r1, [r7, #8]
 8008784:	607a      	str	r2, [r7, #4]
 8008786:	603b      	str	r3, [r7, #0]
 8008788:	4603      	mov	r3, r0
 800878a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800878c:	7bf8      	ldrb	r0, [r7, #15]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	68b9      	ldr	r1, [r7, #8]
 8008794:	f7f8 fe2c 	bl	80013f0 <SD_disk_read>
 8008798:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b084      	sub	sp, #16
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
 80087ac:	603b      	str	r3, [r7, #0]
 80087ae:	4603      	mov	r3, r0
 80087b0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80087b2:	7bf8      	ldrb	r0, [r7, #15]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	68b9      	ldr	r1, [r7, #8]
 80087ba:	f7f8 fe83 	bl	80014c4 <SD_disk_write>
 80087be:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	603a      	str	r2, [r7, #0]
 80087d2:	71fb      	strb	r3, [r7, #7]
 80087d4:	460b      	mov	r3, r1
 80087d6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80087d8:	79b9      	ldrb	r1, [r7, #6]
 80087da:	79fb      	ldrb	r3, [r7, #7]
 80087dc:	683a      	ldr	r2, [r7, #0]
 80087de:	4618      	mov	r0, r3
 80087e0:	f7f8 fef4 	bl	80015cc <SD_disk_ioctl>
 80087e4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
	...

080087f0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	4603      	mov	r3, r0
 80087f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80087fa:	79fb      	ldrb	r3, [r7, #7]
 80087fc:	4a08      	ldr	r2, [pc, #32]	@ (8008820 <disk_status+0x30>)
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4413      	add	r3, r2
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	79fa      	ldrb	r2, [r7, #7]
 8008808:	4905      	ldr	r1, [pc, #20]	@ (8008820 <disk_status+0x30>)
 800880a:	440a      	add	r2, r1
 800880c:	7a12      	ldrb	r2, [r2, #8]
 800880e:	4610      	mov	r0, r2
 8008810:	4798      	blx	r3
 8008812:	4603      	mov	r3, r0
 8008814:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008816:	7bfb      	ldrb	r3, [r7, #15]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	20002a98 	.word	0x20002a98

08008824 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	4603      	mov	r3, r0
 800882c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008832:	79fb      	ldrb	r3, [r7, #7]
 8008834:	4a0e      	ldr	r2, [pc, #56]	@ (8008870 <disk_initialize+0x4c>)
 8008836:	5cd3      	ldrb	r3, [r2, r3]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d114      	bne.n	8008866 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800883c:	79fb      	ldrb	r3, [r7, #7]
 800883e:	4a0c      	ldr	r2, [pc, #48]	@ (8008870 <disk_initialize+0x4c>)
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	4413      	add	r3, r2
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	79fa      	ldrb	r2, [r7, #7]
 800884a:	4909      	ldr	r1, [pc, #36]	@ (8008870 <disk_initialize+0x4c>)
 800884c:	440a      	add	r2, r1
 800884e:	7a12      	ldrb	r2, [r2, #8]
 8008850:	4610      	mov	r0, r2
 8008852:	4798      	blx	r3
 8008854:	4603      	mov	r3, r0
 8008856:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8008858:	7bfb      	ldrb	r3, [r7, #15]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d103      	bne.n	8008866 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800885e:	79fb      	ldrb	r3, [r7, #7]
 8008860:	4a03      	ldr	r2, [pc, #12]	@ (8008870 <disk_initialize+0x4c>)
 8008862:	2101      	movs	r1, #1
 8008864:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8008866:	7bfb      	ldrb	r3, [r7, #15]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	20002a98 	.word	0x20002a98

08008874 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008874:	b590      	push	{r4, r7, lr}
 8008876:	b087      	sub	sp, #28
 8008878:	af00      	add	r7, sp, #0
 800887a:	60b9      	str	r1, [r7, #8]
 800887c:	607a      	str	r2, [r7, #4]
 800887e:	603b      	str	r3, [r7, #0]
 8008880:	4603      	mov	r3, r0
 8008882:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008884:	7bfb      	ldrb	r3, [r7, #15]
 8008886:	4a0a      	ldr	r2, [pc, #40]	@ (80088b0 <disk_read+0x3c>)
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	689c      	ldr	r4, [r3, #8]
 8008890:	7bfb      	ldrb	r3, [r7, #15]
 8008892:	4a07      	ldr	r2, [pc, #28]	@ (80088b0 <disk_read+0x3c>)
 8008894:	4413      	add	r3, r2
 8008896:	7a18      	ldrb	r0, [r3, #8]
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	68b9      	ldr	r1, [r7, #8]
 800889e:	47a0      	blx	r4
 80088a0:	4603      	mov	r3, r0
 80088a2:	75fb      	strb	r3, [r7, #23]
  return res;
 80088a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	371c      	adds	r7, #28
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd90      	pop	{r4, r7, pc}
 80088ae:	bf00      	nop
 80088b0:	20002a98 	.word	0x20002a98

080088b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80088b4:	b590      	push	{r4, r7, lr}
 80088b6:	b087      	sub	sp, #28
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60b9      	str	r1, [r7, #8]
 80088bc:	607a      	str	r2, [r7, #4]
 80088be:	603b      	str	r3, [r7, #0]
 80088c0:	4603      	mov	r3, r0
 80088c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80088c4:	7bfb      	ldrb	r3, [r7, #15]
 80088c6:	4a0a      	ldr	r2, [pc, #40]	@ (80088f0 <disk_write+0x3c>)
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4413      	add	r3, r2
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	68dc      	ldr	r4, [r3, #12]
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
 80088d2:	4a07      	ldr	r2, [pc, #28]	@ (80088f0 <disk_write+0x3c>)
 80088d4:	4413      	add	r3, r2
 80088d6:	7a18      	ldrb	r0, [r3, #8]
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	68b9      	ldr	r1, [r7, #8]
 80088de:	47a0      	blx	r4
 80088e0:	4603      	mov	r3, r0
 80088e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80088e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	371c      	adds	r7, #28
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd90      	pop	{r4, r7, pc}
 80088ee:	bf00      	nop
 80088f0:	20002a98 	.word	0x20002a98

080088f4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	4603      	mov	r3, r0
 80088fc:	603a      	str	r2, [r7, #0]
 80088fe:	71fb      	strb	r3, [r7, #7]
 8008900:	460b      	mov	r3, r1
 8008902:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008904:	79fb      	ldrb	r3, [r7, #7]
 8008906:	4a09      	ldr	r2, [pc, #36]	@ (800892c <disk_ioctl+0x38>)
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	4413      	add	r3, r2
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	79fa      	ldrb	r2, [r7, #7]
 8008912:	4906      	ldr	r1, [pc, #24]	@ (800892c <disk_ioctl+0x38>)
 8008914:	440a      	add	r2, r1
 8008916:	7a10      	ldrb	r0, [r2, #8]
 8008918:	79b9      	ldrb	r1, [r7, #6]
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	4798      	blx	r3
 800891e:	4603      	mov	r3, r0
 8008920:	73fb      	strb	r3, [r7, #15]
  return res;
 8008922:	7bfb      	ldrb	r3, [r7, #15]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	20002a98 	.word	0x20002a98

08008930 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	3301      	adds	r3, #1
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008940:	89fb      	ldrh	r3, [r7, #14]
 8008942:	021b      	lsls	r3, r3, #8
 8008944:	b21a      	sxth	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	b21b      	sxth	r3, r3
 800894c:	4313      	orrs	r3, r2
 800894e:	b21b      	sxth	r3, r3
 8008950:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008952:	89fb      	ldrh	r3, [r7, #14]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3714      	adds	r7, #20
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	3303      	adds	r3, #3
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	021b      	lsls	r3, r3, #8
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	3202      	adds	r2, #2
 8008978:	7812      	ldrb	r2, [r2, #0]
 800897a:	4313      	orrs	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	021b      	lsls	r3, r3, #8
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	3201      	adds	r2, #1
 8008986:	7812      	ldrb	r2, [r2, #0]
 8008988:	4313      	orrs	r3, r2
 800898a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	021b      	lsls	r3, r3, #8
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	7812      	ldrb	r2, [r2, #0]
 8008994:	4313      	orrs	r3, r2
 8008996:	60fb      	str	r3, [r7, #12]
	return rv;
 8008998:	68fb      	ldr	r3, [r7, #12]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 80089a6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80089aa:	b09d      	sub	sp, #116	@ 0x74
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 80089b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089b2:	3307      	adds	r3, #7
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2200      	movs	r2, #0
 80089ba:	469a      	mov	sl, r3
 80089bc:	4693      	mov	fp, r2
 80089be:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 80089c2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80089c6:	f04f 0000 	mov.w	r0, #0
 80089ca:	f04f 0100 	mov.w	r1, #0
 80089ce:	0219      	lsls	r1, r3, #8
 80089d0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80089d4:	0210      	lsls	r0, r2, #8
 80089d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089d8:	3306      	adds	r3, #6
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2200      	movs	r2, #0
 80089e0:	461c      	mov	r4, r3
 80089e2:	4615      	mov	r5, r2
 80089e4:	ea40 0804 	orr.w	r8, r0, r4
 80089e8:	ea41 0905 	orr.w	r9, r1, r5
 80089ec:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 80089f0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80089f4:	f04f 0000 	mov.w	r0, #0
 80089f8:	f04f 0100 	mov.w	r1, #0
 80089fc:	0219      	lsls	r1, r3, #8
 80089fe:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008a02:	0210      	lsls	r0, r2, #8
 8008a04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a06:	3305      	adds	r3, #5
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a10:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8008a12:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8008a16:	4623      	mov	r3, r4
 8008a18:	4303      	orrs	r3, r0
 8008a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a1c:	462b      	mov	r3, r5
 8008a1e:	430b      	orrs	r3, r1
 8008a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a22:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8008a26:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 8008a2a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008a2e:	f04f 0000 	mov.w	r0, #0
 8008a32:	f04f 0100 	mov.w	r1, #0
 8008a36:	0219      	lsls	r1, r3, #8
 8008a38:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008a3c:	0210      	lsls	r0, r2, #8
 8008a3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a40:	3304      	adds	r3, #4
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2200      	movs	r2, #0
 8008a48:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a4a:	657a      	str	r2, [r7, #84]	@ 0x54
 8008a4c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8008a50:	4623      	mov	r3, r4
 8008a52:	4303      	orrs	r3, r0
 8008a54:	623b      	str	r3, [r7, #32]
 8008a56:	462b      	mov	r3, r5
 8008a58:	430b      	orrs	r3, r1
 8008a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a5c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008a60:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 8008a64:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008a68:	f04f 0000 	mov.w	r0, #0
 8008a6c:	f04f 0100 	mov.w	r1, #0
 8008a70:	0219      	lsls	r1, r3, #8
 8008a72:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008a76:	0210      	lsls	r0, r2, #8
 8008a78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a7a:	3303      	adds	r3, #3
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	2200      	movs	r2, #0
 8008a82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a84:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008a86:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8008a8a:	4623      	mov	r3, r4
 8008a8c:	4303      	orrs	r3, r0
 8008a8e:	61bb      	str	r3, [r7, #24]
 8008a90:	462b      	mov	r3, r5
 8008a92:	430b      	orrs	r3, r1
 8008a94:	61fb      	str	r3, [r7, #28]
 8008a96:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008a9a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 8008a9e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008aa2:	f04f 0000 	mov.w	r0, #0
 8008aa6:	f04f 0100 	mov.w	r1, #0
 8008aaa:	0219      	lsls	r1, r3, #8
 8008aac:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008ab0:	0210      	lsls	r0, r2, #8
 8008ab2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ab4:	3302      	adds	r3, #2
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	2200      	movs	r2, #0
 8008abc:	643b      	str	r3, [r7, #64]	@ 0x40
 8008abe:	647a      	str	r2, [r7, #68]	@ 0x44
 8008ac0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8008ac4:	4623      	mov	r3, r4
 8008ac6:	4303      	orrs	r3, r0
 8008ac8:	613b      	str	r3, [r7, #16]
 8008aca:	462b      	mov	r3, r5
 8008acc:	430b      	orrs	r3, r1
 8008ace:	617b      	str	r3, [r7, #20]
 8008ad0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008ad4:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 8008ad8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008adc:	f04f 0200 	mov.w	r2, #0
 8008ae0:	f04f 0300 	mov.w	r3, #0
 8008ae4:	020b      	lsls	r3, r1, #8
 8008ae6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008aea:	0202      	lsls	r2, r0, #8
 8008aec:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008aee:	3101      	adds	r1, #1
 8008af0:	7809      	ldrb	r1, [r1, #0]
 8008af2:	b2c9      	uxtb	r1, r1
 8008af4:	2000      	movs	r0, #0
 8008af6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008af8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8008afa:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8008afe:	4621      	mov	r1, r4
 8008b00:	4311      	orrs	r1, r2
 8008b02:	60b9      	str	r1, [r7, #8]
 8008b04:	4629      	mov	r1, r5
 8008b06:	4319      	orrs	r1, r3
 8008b08:	60f9      	str	r1, [r7, #12]
 8008b0a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008b0e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 8008b12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008b16:	f04f 0200 	mov.w	r2, #0
 8008b1a:	f04f 0300 	mov.w	r3, #0
 8008b1e:	020b      	lsls	r3, r1, #8
 8008b20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b24:	0202      	lsls	r2, r0, #8
 8008b26:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008b28:	7809      	ldrb	r1, [r1, #0]
 8008b2a:	b2c9      	uxtb	r1, r1
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	6339      	str	r1, [r7, #48]	@ 0x30
 8008b30:	6378      	str	r0, [r7, #52]	@ 0x34
 8008b32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008b36:	4621      	mov	r1, r4
 8008b38:	4311      	orrs	r1, r2
 8008b3a:	6039      	str	r1, [r7, #0]
 8008b3c:	4629      	mov	r1, r5
 8008b3e:	4319      	orrs	r1, r3
 8008b40:	6079      	str	r1, [r7, #4]
 8008b42:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008b46:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 8008b4a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 8008b4e:	4610      	mov	r0, r2
 8008b50:	4619      	mov	r1, r3
 8008b52:	3774      	adds	r7, #116	@ 0x74
 8008b54:	46bd      	mov	sp, r7
 8008b56:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008b5a:	4770      	bx	lr

08008b5c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	1c5a      	adds	r2, r3, #1
 8008b6c:	607a      	str	r2, [r7, #4]
 8008b6e:	887a      	ldrh	r2, [r7, #2]
 8008b70:	b2d2      	uxtb	r2, r2
 8008b72:	701a      	strb	r2, [r3, #0]
 8008b74:	887b      	ldrh	r3, [r7, #2]
 8008b76:	0a1b      	lsrs	r3, r3, #8
 8008b78:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	1c5a      	adds	r2, r3, #1
 8008b7e:	607a      	str	r2, [r7, #4]
 8008b80:	887a      	ldrh	r2, [r7, #2]
 8008b82:	b2d2      	uxtb	r2, r2
 8008b84:	701a      	strb	r2, [r3, #0]
}
 8008b86:	bf00      	nop
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008b92:	b480      	push	{r7}
 8008b94:	b083      	sub	sp, #12
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	1c5a      	adds	r2, r3, #1
 8008ba0:	607a      	str	r2, [r7, #4]
 8008ba2:	683a      	ldr	r2, [r7, #0]
 8008ba4:	b2d2      	uxtb	r2, r2
 8008ba6:	701a      	strb	r2, [r3, #0]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	0a1b      	lsrs	r3, r3, #8
 8008bac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	1c5a      	adds	r2, r3, #1
 8008bb2:	607a      	str	r2, [r7, #4]
 8008bb4:	683a      	ldr	r2, [r7, #0]
 8008bb6:	b2d2      	uxtb	r2, r2
 8008bb8:	701a      	strb	r2, [r3, #0]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	0a1b      	lsrs	r3, r3, #8
 8008bbe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	1c5a      	adds	r2, r3, #1
 8008bc4:	607a      	str	r2, [r7, #4]
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	b2d2      	uxtb	r2, r2
 8008bca:	701a      	strb	r2, [r3, #0]
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	0a1b      	lsrs	r3, r3, #8
 8008bd0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	1c5a      	adds	r2, r3, #1
 8008bd6:	607a      	str	r2, [r7, #4]
 8008bd8:	683a      	ldr	r2, [r7, #0]
 8008bda:	b2d2      	uxtb	r2, r2
 8008bdc:	701a      	strb	r2, [r3, #0]
}
 8008bde:	bf00      	nop
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8008bea:	b480      	push	{r7}
 8008bec:	b085      	sub	sp, #20
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	60f8      	str	r0, [r7, #12]
 8008bf2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	1c5a      	adds	r2, r3, #1
 8008bfa:	60fa      	str	r2, [r7, #12]
 8008bfc:	783a      	ldrb	r2, [r7, #0]
 8008bfe:	701a      	strb	r2, [r3, #0]
 8008c00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c04:	f04f 0200 	mov.w	r2, #0
 8008c08:	f04f 0300 	mov.w	r3, #0
 8008c0c:	0a02      	lsrs	r2, r0, #8
 8008c0e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008c12:	0a0b      	lsrs	r3, r1, #8
 8008c14:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	1c5a      	adds	r2, r3, #1
 8008c1c:	60fa      	str	r2, [r7, #12]
 8008c1e:	783a      	ldrb	r2, [r7, #0]
 8008c20:	701a      	strb	r2, [r3, #0]
 8008c22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c26:	f04f 0200 	mov.w	r2, #0
 8008c2a:	f04f 0300 	mov.w	r3, #0
 8008c2e:	0a02      	lsrs	r2, r0, #8
 8008c30:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008c34:	0a0b      	lsrs	r3, r1, #8
 8008c36:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	1c5a      	adds	r2, r3, #1
 8008c3e:	60fa      	str	r2, [r7, #12]
 8008c40:	783a      	ldrb	r2, [r7, #0]
 8008c42:	701a      	strb	r2, [r3, #0]
 8008c44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c48:	f04f 0200 	mov.w	r2, #0
 8008c4c:	f04f 0300 	mov.w	r3, #0
 8008c50:	0a02      	lsrs	r2, r0, #8
 8008c52:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008c56:	0a0b      	lsrs	r3, r1, #8
 8008c58:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	1c5a      	adds	r2, r3, #1
 8008c60:	60fa      	str	r2, [r7, #12]
 8008c62:	783a      	ldrb	r2, [r7, #0]
 8008c64:	701a      	strb	r2, [r3, #0]
 8008c66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c6a:	f04f 0200 	mov.w	r2, #0
 8008c6e:	f04f 0300 	mov.w	r3, #0
 8008c72:	0a02      	lsrs	r2, r0, #8
 8008c74:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008c78:	0a0b      	lsrs	r3, r1, #8
 8008c7a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	1c5a      	adds	r2, r3, #1
 8008c82:	60fa      	str	r2, [r7, #12]
 8008c84:	783a      	ldrb	r2, [r7, #0]
 8008c86:	701a      	strb	r2, [r3, #0]
 8008c88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c8c:	f04f 0200 	mov.w	r2, #0
 8008c90:	f04f 0300 	mov.w	r3, #0
 8008c94:	0a02      	lsrs	r2, r0, #8
 8008c96:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008c9a:	0a0b      	lsrs	r3, r1, #8
 8008c9c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	1c5a      	adds	r2, r3, #1
 8008ca4:	60fa      	str	r2, [r7, #12]
 8008ca6:	783a      	ldrb	r2, [r7, #0]
 8008ca8:	701a      	strb	r2, [r3, #0]
 8008caa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cae:	f04f 0200 	mov.w	r2, #0
 8008cb2:	f04f 0300 	mov.w	r3, #0
 8008cb6:	0a02      	lsrs	r2, r0, #8
 8008cb8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008cbc:	0a0b      	lsrs	r3, r1, #8
 8008cbe:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	1c5a      	adds	r2, r3, #1
 8008cc6:	60fa      	str	r2, [r7, #12]
 8008cc8:	783a      	ldrb	r2, [r7, #0]
 8008cca:	701a      	strb	r2, [r3, #0]
 8008ccc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cd0:	f04f 0200 	mov.w	r2, #0
 8008cd4:	f04f 0300 	mov.w	r3, #0
 8008cd8:	0a02      	lsrs	r2, r0, #8
 8008cda:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008cde:	0a0b      	lsrs	r3, r1, #8
 8008ce0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	1c5a      	adds	r2, r3, #1
 8008ce8:	60fa      	str	r2, [r7, #12]
 8008cea:	783a      	ldrb	r2, [r7, #0]
 8008cec:	701a      	strb	r2, [r3, #0]
}
 8008cee:	bf00      	nop
 8008cf0:	3714      	adds	r7, #20
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr

08008cfa <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008cfa:	b480      	push	{r7}
 8008cfc:	b087      	sub	sp, #28
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	60f8      	str	r0, [r7, #12]
 8008d02:	60b9      	str	r1, [r7, #8]
 8008d04:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00d      	beq.n	8008d30 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	1c53      	adds	r3, r2, #1
 8008d18:	613b      	str	r3, [r7, #16]
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	1c59      	adds	r1, r3, #1
 8008d1e:	6179      	str	r1, [r7, #20]
 8008d20:	7812      	ldrb	r2, [r2, #0]
 8008d22:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	3b01      	subs	r3, #1
 8008d28:	607b      	str	r3, [r7, #4]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1f1      	bne.n	8008d14 <mem_cpy+0x1a>
	}
}
 8008d30:	bf00      	nop
 8008d32:	371c      	adds	r7, #28
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008d3c:	b480      	push	{r7}
 8008d3e:	b087      	sub	sp, #28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	1c5a      	adds	r2, r3, #1
 8008d50:	617a      	str	r2, [r7, #20]
 8008d52:	68ba      	ldr	r2, [r7, #8]
 8008d54:	b2d2      	uxtb	r2, r2
 8008d56:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	607b      	str	r3, [r7, #4]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1f3      	bne.n	8008d4c <mem_set+0x10>
}
 8008d64:	bf00      	nop
 8008d66:	bf00      	nop
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008d72:	b480      	push	{r7}
 8008d74:	b089      	sub	sp, #36	@ 0x24
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	60f8      	str	r0, [r7, #12]
 8008d7a:	60b9      	str	r1, [r7, #8]
 8008d7c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	61fb      	str	r3, [r7, #28]
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008d86:	2300      	movs	r3, #0
 8008d88:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	1c5a      	adds	r2, r3, #1
 8008d8e:	61fa      	str	r2, [r7, #28]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	4619      	mov	r1, r3
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	1c5a      	adds	r2, r3, #1
 8008d98:	61ba      	str	r2, [r7, #24]
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	1acb      	subs	r3, r1, r3
 8008d9e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	3b01      	subs	r3, #1
 8008da4:	607b      	str	r3, [r7, #4]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d002      	beq.n	8008db2 <mem_cmp+0x40>
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d0eb      	beq.n	8008d8a <mem_cmp+0x18>

	return r;
 8008db2:	697b      	ldr	r3, [r7, #20]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3724      	adds	r7, #36	@ 0x24
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008dca:	e002      	b.n	8008dd2 <chk_chr+0x12>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	607b      	str	r3, [r7, #4]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d005      	beq.n	8008de6 <chk_chr+0x26>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	461a      	mov	r2, r3
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d1f2      	bne.n	8008dcc <chk_chr+0xc>
	return *str;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	781b      	ldrb	r3, [r3, #0]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	370c      	adds	r7, #12
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b082      	sub	sp, #8
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d009      	beq.n	8008e18 <lock_fs+0x22>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f005 f893 	bl	800df34 <ff_req_grant>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d001      	beq.n	8008e18 <lock_fs+0x22>
 8008e14:	2301      	movs	r3, #1
 8008e16:	e000      	b.n	8008e1a <lock_fs+0x24>
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b082      	sub	sp, #8
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00d      	beq.n	8008e50 <unlock_fs+0x2e>
 8008e34:	78fb      	ldrb	r3, [r7, #3]
 8008e36:	2b0c      	cmp	r3, #12
 8008e38:	d00a      	beq.n	8008e50 <unlock_fs+0x2e>
 8008e3a:	78fb      	ldrb	r3, [r7, #3]
 8008e3c:	2b0b      	cmp	r3, #11
 8008e3e:	d007      	beq.n	8008e50 <unlock_fs+0x2e>
 8008e40:	78fb      	ldrb	r3, [r7, #3]
 8008e42:	2b0f      	cmp	r3, #15
 8008e44:	d004      	beq.n	8008e50 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	699b      	ldr	r3, [r3, #24]
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f005 f887 	bl	800df5e <ff_rel_grant>
	}
}
 8008e50:	bf00      	nop
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008e62:	2300      	movs	r3, #0
 8008e64:	60bb      	str	r3, [r7, #8]
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	60fb      	str	r3, [r7, #12]
 8008e6a:	e029      	b.n	8008ec0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008e6c:	4a27      	ldr	r2, [pc, #156]	@ (8008f0c <chk_lock+0xb4>)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	011b      	lsls	r3, r3, #4
 8008e72:	4413      	add	r3, r2
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d01d      	beq.n	8008eb6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008e7a:	4a24      	ldr	r2, [pc, #144]	@ (8008f0c <chk_lock+0xb4>)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	011b      	lsls	r3, r3, #4
 8008e80:	4413      	add	r3, r2
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d116      	bne.n	8008eba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008e8c:	4a1f      	ldr	r2, [pc, #124]	@ (8008f0c <chk_lock+0xb4>)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	011b      	lsls	r3, r3, #4
 8008e92:	4413      	add	r3, r2
 8008e94:	3304      	adds	r3, #4
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d10c      	bne.n	8008eba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008ea0:	4a1a      	ldr	r2, [pc, #104]	@ (8008f0c <chk_lock+0xb4>)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	011b      	lsls	r3, r3, #4
 8008ea6:	4413      	add	r3, r2
 8008ea8:	3308      	adds	r3, #8
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d102      	bne.n	8008eba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008eb4:	e007      	b.n	8008ec6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	60fb      	str	r3, [r7, #12]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d9d2      	bls.n	8008e6c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d109      	bne.n	8008ee0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d102      	bne.n	8008ed8 <chk_lock+0x80>
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	2b02      	cmp	r3, #2
 8008ed6:	d101      	bne.n	8008edc <chk_lock+0x84>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	e010      	b.n	8008efe <chk_lock+0xa6>
 8008edc:	2312      	movs	r3, #18
 8008ede:	e00e      	b.n	8008efe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d108      	bne.n	8008ef8 <chk_lock+0xa0>
 8008ee6:	4a09      	ldr	r2, [pc, #36]	@ (8008f0c <chk_lock+0xb4>)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	011b      	lsls	r3, r3, #4
 8008eec:	4413      	add	r3, r2
 8008eee:	330c      	adds	r3, #12
 8008ef0:	881b      	ldrh	r3, [r3, #0]
 8008ef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ef6:	d101      	bne.n	8008efc <chk_lock+0xa4>
 8008ef8:	2310      	movs	r3, #16
 8008efa:	e000      	b.n	8008efe <chk_lock+0xa6>
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	20002a78 	.word	0x20002a78

08008f10 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008f16:	2300      	movs	r3, #0
 8008f18:	607b      	str	r3, [r7, #4]
 8008f1a:	e002      	b.n	8008f22 <enq_lock+0x12>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	607b      	str	r3, [r7, #4]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d806      	bhi.n	8008f36 <enq_lock+0x26>
 8008f28:	4a09      	ldr	r2, [pc, #36]	@ (8008f50 <enq_lock+0x40>)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	011b      	lsls	r3, r3, #4
 8008f2e:	4413      	add	r3, r2
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1f2      	bne.n	8008f1c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	bf14      	ite	ne
 8008f3c:	2301      	movne	r3, #1
 8008f3e:	2300      	moveq	r3, #0
 8008f40:	b2db      	uxtb	r3, r3
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	370c      	adds	r7, #12
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	20002a78 	.word	0x20002a78

08008f54 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008f5e:	2300      	movs	r3, #0
 8008f60:	60fb      	str	r3, [r7, #12]
 8008f62:	e01f      	b.n	8008fa4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008f64:	4a41      	ldr	r2, [pc, #260]	@ (800906c <inc_lock+0x118>)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	011b      	lsls	r3, r3, #4
 8008f6a:	4413      	add	r3, r2
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d113      	bne.n	8008f9e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008f76:	4a3d      	ldr	r2, [pc, #244]	@ (800906c <inc_lock+0x118>)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	011b      	lsls	r3, r3, #4
 8008f7c:	4413      	add	r3, r2
 8008f7e:	3304      	adds	r3, #4
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d109      	bne.n	8008f9e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008f8a:	4a38      	ldr	r2, [pc, #224]	@ (800906c <inc_lock+0x118>)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	011b      	lsls	r3, r3, #4
 8008f90:	4413      	add	r3, r2
 8008f92:	3308      	adds	r3, #8
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d006      	beq.n	8008fac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	60fb      	str	r3, [r7, #12]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d9dc      	bls.n	8008f64 <inc_lock+0x10>
 8008faa:	e000      	b.n	8008fae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008fac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d132      	bne.n	800901a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	60fb      	str	r3, [r7, #12]
 8008fb8:	e002      	b.n	8008fc0 <inc_lock+0x6c>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	60fb      	str	r3, [r7, #12]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d806      	bhi.n	8008fd4 <inc_lock+0x80>
 8008fc6:	4a29      	ldr	r2, [pc, #164]	@ (800906c <inc_lock+0x118>)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	011b      	lsls	r3, r3, #4
 8008fcc:	4413      	add	r3, r2
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1f2      	bne.n	8008fba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d101      	bne.n	8008fde <inc_lock+0x8a>
 8008fda:	2300      	movs	r3, #0
 8008fdc:	e040      	b.n	8009060 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	4922      	ldr	r1, [pc, #136]	@ (800906c <inc_lock+0x118>)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	011b      	lsls	r3, r3, #4
 8008fe8:	440b      	add	r3, r1
 8008fea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	689a      	ldr	r2, [r3, #8]
 8008ff0:	491e      	ldr	r1, [pc, #120]	@ (800906c <inc_lock+0x118>)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	011b      	lsls	r3, r3, #4
 8008ff6:	440b      	add	r3, r1
 8008ff8:	3304      	adds	r3, #4
 8008ffa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009000:	491a      	ldr	r1, [pc, #104]	@ (800906c <inc_lock+0x118>)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	011b      	lsls	r3, r3, #4
 8009006:	440b      	add	r3, r1
 8009008:	3308      	adds	r3, #8
 800900a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800900c:	4a17      	ldr	r2, [pc, #92]	@ (800906c <inc_lock+0x118>)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	011b      	lsls	r3, r3, #4
 8009012:	4413      	add	r3, r2
 8009014:	330c      	adds	r3, #12
 8009016:	2200      	movs	r2, #0
 8009018:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d009      	beq.n	8009034 <inc_lock+0xe0>
 8009020:	4a12      	ldr	r2, [pc, #72]	@ (800906c <inc_lock+0x118>)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	011b      	lsls	r3, r3, #4
 8009026:	4413      	add	r3, r2
 8009028:	330c      	adds	r3, #12
 800902a:	881b      	ldrh	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d001      	beq.n	8009034 <inc_lock+0xe0>
 8009030:	2300      	movs	r3, #0
 8009032:	e015      	b.n	8009060 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d108      	bne.n	800904c <inc_lock+0xf8>
 800903a:	4a0c      	ldr	r2, [pc, #48]	@ (800906c <inc_lock+0x118>)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	011b      	lsls	r3, r3, #4
 8009040:	4413      	add	r3, r2
 8009042:	330c      	adds	r3, #12
 8009044:	881b      	ldrh	r3, [r3, #0]
 8009046:	3301      	adds	r3, #1
 8009048:	b29a      	uxth	r2, r3
 800904a:	e001      	b.n	8009050 <inc_lock+0xfc>
 800904c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009050:	4906      	ldr	r1, [pc, #24]	@ (800906c <inc_lock+0x118>)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	011b      	lsls	r3, r3, #4
 8009056:	440b      	add	r3, r1
 8009058:	330c      	adds	r3, #12
 800905a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	3301      	adds	r3, #1
}
 8009060:	4618      	mov	r0, r3
 8009062:	3714      	adds	r7, #20
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr
 800906c:	20002a78 	.word	0x20002a78

08009070 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	3b01      	subs	r3, #1
 800907c:	607b      	str	r3, [r7, #4]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2b01      	cmp	r3, #1
 8009082:	d825      	bhi.n	80090d0 <dec_lock+0x60>
		n = Files[i].ctr;
 8009084:	4a17      	ldr	r2, [pc, #92]	@ (80090e4 <dec_lock+0x74>)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	011b      	lsls	r3, r3, #4
 800908a:	4413      	add	r3, r2
 800908c:	330c      	adds	r3, #12
 800908e:	881b      	ldrh	r3, [r3, #0]
 8009090:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009092:	89fb      	ldrh	r3, [r7, #14]
 8009094:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009098:	d101      	bne.n	800909e <dec_lock+0x2e>
 800909a:	2300      	movs	r3, #0
 800909c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800909e:	89fb      	ldrh	r3, [r7, #14]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d002      	beq.n	80090aa <dec_lock+0x3a>
 80090a4:	89fb      	ldrh	r3, [r7, #14]
 80090a6:	3b01      	subs	r3, #1
 80090a8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80090aa:	4a0e      	ldr	r2, [pc, #56]	@ (80090e4 <dec_lock+0x74>)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	011b      	lsls	r3, r3, #4
 80090b0:	4413      	add	r3, r2
 80090b2:	330c      	adds	r3, #12
 80090b4:	89fa      	ldrh	r2, [r7, #14]
 80090b6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80090b8:	89fb      	ldrh	r3, [r7, #14]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d105      	bne.n	80090ca <dec_lock+0x5a>
 80090be:	4a09      	ldr	r2, [pc, #36]	@ (80090e4 <dec_lock+0x74>)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	011b      	lsls	r3, r3, #4
 80090c4:	4413      	add	r3, r2
 80090c6:	2200      	movs	r2, #0
 80090c8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	737b      	strb	r3, [r7, #13]
 80090ce:	e001      	b.n	80090d4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80090d0:	2302      	movs	r3, #2
 80090d2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80090d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	20002a78 	.word	0x20002a78

080090e8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80090f0:	2300      	movs	r3, #0
 80090f2:	60fb      	str	r3, [r7, #12]
 80090f4:	e010      	b.n	8009118 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80090f6:	4a0d      	ldr	r2, [pc, #52]	@ (800912c <clear_lock+0x44>)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	011b      	lsls	r3, r3, #4
 80090fc:	4413      	add	r3, r2
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	429a      	cmp	r2, r3
 8009104:	d105      	bne.n	8009112 <clear_lock+0x2a>
 8009106:	4a09      	ldr	r2, [pc, #36]	@ (800912c <clear_lock+0x44>)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	011b      	lsls	r3, r3, #4
 800910c:	4413      	add	r3, r2
 800910e:	2200      	movs	r2, #0
 8009110:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	3301      	adds	r3, #1
 8009116:	60fb      	str	r3, [r7, #12]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2b01      	cmp	r3, #1
 800911c:	d9eb      	bls.n	80090f6 <clear_lock+0xe>
	}
}
 800911e:	bf00      	nop
 8009120:	bf00      	nop
 8009122:	3714      	adds	r7, #20
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr
 800912c:	20002a78 	.word	0x20002a78

08009130 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	78db      	ldrb	r3, [r3, #3]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d034      	beq.n	80091ae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009148:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	7858      	ldrb	r0, [r3, #1]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009154:	2301      	movs	r3, #1
 8009156:	697a      	ldr	r2, [r7, #20]
 8009158:	f7ff fbac 	bl	80088b4 <disk_write>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d002      	beq.n	8009168 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009162:	2301      	movs	r3, #1
 8009164:	73fb      	strb	r3, [r7, #15]
 8009166:	e022      	b.n	80091ae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009172:	697a      	ldr	r2, [r7, #20]
 8009174:	1ad2      	subs	r2, r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800917a:	429a      	cmp	r2, r3
 800917c:	d217      	bcs.n	80091ae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	789b      	ldrb	r3, [r3, #2]
 8009182:	613b      	str	r3, [r7, #16]
 8009184:	e010      	b.n	80091a8 <sync_window+0x78>
					wsect += fs->fsize;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	4413      	add	r3, r2
 800918e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	7858      	ldrb	r0, [r3, #1]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800919a:	2301      	movs	r3, #1
 800919c:	697a      	ldr	r2, [r7, #20]
 800919e:	f7ff fb89 	bl	80088b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	3b01      	subs	r3, #1
 80091a6:	613b      	str	r3, [r7, #16]
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d8eb      	bhi.n	8009186 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80091ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3718      	adds	r7, #24
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d01b      	beq.n	8009208 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f7ff ffad 	bl	8009130 <sync_window>
 80091d6:	4603      	mov	r3, r0
 80091d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80091da:	7bfb      	ldrb	r3, [r7, #15]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d113      	bne.n	8009208 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	7858      	ldrb	r0, [r3, #1]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80091ea:	2301      	movs	r3, #1
 80091ec:	683a      	ldr	r2, [r7, #0]
 80091ee:	f7ff fb41 	bl	8008874 <disk_read>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d004      	beq.n	8009202 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80091f8:	f04f 33ff 	mov.w	r3, #4294967295
 80091fc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80091fe:	2301      	movs	r3, #1
 8009200:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
	}
	return res;
 8009208:	7bfb      	ldrb	r3, [r7, #15]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
	...

08009214 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f7ff ff87 	bl	8009130 <sync_window>
 8009222:	4603      	mov	r3, r0
 8009224:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009226:	7bfb      	ldrb	r3, [r7, #15]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d159      	bne.n	80092e0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	2b03      	cmp	r3, #3
 8009232:	d149      	bne.n	80092c8 <sync_fs+0xb4>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	791b      	ldrb	r3, [r3, #4]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d145      	bne.n	80092c8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	899b      	ldrh	r3, [r3, #12]
 8009246:	461a      	mov	r2, r3
 8009248:	2100      	movs	r1, #0
 800924a:	f7ff fd77 	bl	8008d3c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	3340      	adds	r3, #64	@ 0x40
 8009252:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009256:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800925a:	4618      	mov	r0, r3
 800925c:	f7ff fc7e 	bl	8008b5c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	3340      	adds	r3, #64	@ 0x40
 8009264:	4921      	ldr	r1, [pc, #132]	@ (80092ec <sync_fs+0xd8>)
 8009266:	4618      	mov	r0, r3
 8009268:	f7ff fc93 	bl	8008b92 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	3340      	adds	r3, #64	@ 0x40
 8009270:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009274:	491e      	ldr	r1, [pc, #120]	@ (80092f0 <sync_fs+0xdc>)
 8009276:	4618      	mov	r0, r3
 8009278:	f7ff fc8b 	bl	8008b92 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	3340      	adds	r3, #64	@ 0x40
 8009280:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6a1b      	ldr	r3, [r3, #32]
 8009288:	4619      	mov	r1, r3
 800928a:	4610      	mov	r0, r2
 800928c:	f7ff fc81 	bl	8008b92 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	3340      	adds	r3, #64	@ 0x40
 8009294:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	69db      	ldr	r3, [r3, #28]
 800929c:	4619      	mov	r1, r3
 800929e:	4610      	mov	r0, r2
 80092a0:	f7ff fc77 	bl	8008b92 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a8:	1c5a      	adds	r2, r3, #1
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	63da      	str	r2, [r3, #60]	@ 0x3c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	7858      	ldrb	r0, [r3, #1]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092bc:	2301      	movs	r3, #1
 80092be:	f7ff faf9 	bl	80088b4 <disk_write>
			fs->fsi_flag = 0;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	785b      	ldrb	r3, [r3, #1]
 80092cc:	2200      	movs	r2, #0
 80092ce:	2100      	movs	r1, #0
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7ff fb0f 	bl	80088f4 <disk_ioctl>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d001      	beq.n	80092e0 <sync_fs+0xcc>
 80092dc:	2301      	movs	r3, #1
 80092de:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80092e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	41615252 	.word	0x41615252
 80092f0:	61417272 	.word	0x61417272

080092f4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	3b02      	subs	r3, #2
 8009302:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009308:	3b02      	subs	r3, #2
 800930a:	683a      	ldr	r2, [r7, #0]
 800930c:	429a      	cmp	r2, r3
 800930e:	d301      	bcc.n	8009314 <clust2sect+0x20>
 8009310:	2300      	movs	r3, #0
 8009312:	e008      	b.n	8009326 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	895b      	ldrh	r3, [r3, #10]
 8009318:	461a      	mov	r2, r3
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	fb03 f202 	mul.w	r2, r3, r2
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009324:	4413      	add	r3, r2
}
 8009326:	4618      	mov	r0, r3
 8009328:	370c      	adds	r7, #12
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
	...

08009334 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009334:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009338:	b088      	sub	sp, #32
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d904      	bls.n	8009356 <get_fat+0x22>
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	429a      	cmp	r2, r3
 8009354:	d302      	bcc.n	800935c <get_fat+0x28>
		val = 1;	/* Internal error */
 8009356:	2301      	movs	r3, #1
 8009358:	61fb      	str	r3, [r7, #28]
 800935a:	e139      	b.n	80095d0 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800935c:	f04f 33ff 	mov.w	r3, #4294967295
 8009360:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	3b01      	subs	r3, #1
 8009368:	2b03      	cmp	r3, #3
 800936a:	f200 8125 	bhi.w	80095b8 <get_fat+0x284>
 800936e:	a201      	add	r2, pc, #4	@ (adr r2, 8009374 <get_fat+0x40>)
 8009370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009374:	08009385 	.word	0x08009385
 8009378:	08009431 	.word	0x08009431
 800937c:	0800947d 	.word	0x0800947d
 8009380:	080094cd 	.word	0x080094cd
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	60fb      	str	r3, [r7, #12]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	085b      	lsrs	r3, r3, #1
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	4413      	add	r3, r2
 8009390:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	899b      	ldrh	r3, [r3, #12]
 800939a:	4619      	mov	r1, r3
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	fbb3 f3f1 	udiv	r3, r3, r1
 80093a2:	4413      	add	r3, r2
 80093a4:	4619      	mov	r1, r3
 80093a6:	69b8      	ldr	r0, [r7, #24]
 80093a8:	f7ff ff06 	bl	80091b8 <move_window>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	f040 8105 	bne.w	80095be <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	1c5a      	adds	r2, r3, #1
 80093b8:	60fa      	str	r2, [r7, #12]
 80093ba:	69ba      	ldr	r2, [r7, #24]
 80093bc:	8992      	ldrh	r2, [r2, #12]
 80093be:	fbb3 f1f2 	udiv	r1, r3, r2
 80093c2:	fb01 f202 	mul.w	r2, r1, r2
 80093c6:	1a9b      	subs	r3, r3, r2
 80093c8:	69ba      	ldr	r2, [r7, #24]
 80093ca:	4413      	add	r3, r2
 80093cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80093d0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	899b      	ldrh	r3, [r3, #12]
 80093da:	4619      	mov	r1, r3
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	fbb3 f3f1 	udiv	r3, r3, r1
 80093e2:	4413      	add	r3, r2
 80093e4:	4619      	mov	r1, r3
 80093e6:	69b8      	ldr	r0, [r7, #24]
 80093e8:	f7ff fee6 	bl	80091b8 <move_window>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f040 80e7 	bne.w	80095c2 <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 80093f4:	69bb      	ldr	r3, [r7, #24]
 80093f6:	899b      	ldrh	r3, [r3, #12]
 80093f8:	461a      	mov	r2, r3
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8009400:	fb01 f202 	mul.w	r2, r1, r2
 8009404:	1a9b      	subs	r3, r3, r2
 8009406:	69ba      	ldr	r2, [r7, #24]
 8009408:	4413      	add	r3, r2
 800940a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800940e:	021b      	lsls	r3, r3, #8
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	4313      	orrs	r3, r2
 8009414:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	f003 0301 	and.w	r3, r3, #1
 800941c:	2b00      	cmp	r3, #0
 800941e:	d002      	beq.n	8009426 <get_fat+0xf2>
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	091b      	lsrs	r3, r3, #4
 8009424:	e002      	b.n	800942c <get_fat+0xf8>
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800942c:	61fb      	str	r3, [r7, #28]
			break;
 800942e:	e0cf      	b.n	80095d0 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	899b      	ldrh	r3, [r3, #12]
 8009438:	085b      	lsrs	r3, r3, #1
 800943a:	b29b      	uxth	r3, r3
 800943c:	4619      	mov	r1, r3
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	fbb3 f3f1 	udiv	r3, r3, r1
 8009444:	4413      	add	r3, r2
 8009446:	4619      	mov	r1, r3
 8009448:	69b8      	ldr	r0, [r7, #24]
 800944a:	f7ff feb5 	bl	80091b8 <move_window>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	f040 80b8 	bne.w	80095c6 <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	005b      	lsls	r3, r3, #1
 8009460:	69ba      	ldr	r2, [r7, #24]
 8009462:	8992      	ldrh	r2, [r2, #12]
 8009464:	fbb3 f0f2 	udiv	r0, r3, r2
 8009468:	fb00 f202 	mul.w	r2, r0, r2
 800946c:	1a9b      	subs	r3, r3, r2
 800946e:	440b      	add	r3, r1
 8009470:	4618      	mov	r0, r3
 8009472:	f7ff fa5d 	bl	8008930 <ld_word>
 8009476:	4603      	mov	r3, r0
 8009478:	61fb      	str	r3, [r7, #28]
			break;
 800947a:	e0a9      	b.n	80095d0 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	899b      	ldrh	r3, [r3, #12]
 8009484:	089b      	lsrs	r3, r3, #2
 8009486:	b29b      	uxth	r3, r3
 8009488:	4619      	mov	r1, r3
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009490:	4413      	add	r3, r2
 8009492:	4619      	mov	r1, r3
 8009494:	69b8      	ldr	r0, [r7, #24]
 8009496:	f7ff fe8f 	bl	80091b8 <move_window>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	f040 8094 	bne.w	80095ca <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	69ba      	ldr	r2, [r7, #24]
 80094ae:	8992      	ldrh	r2, [r2, #12]
 80094b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80094b4:	fb00 f202 	mul.w	r2, r0, r2
 80094b8:	1a9b      	subs	r3, r3, r2
 80094ba:	440b      	add	r3, r1
 80094bc:	4618      	mov	r0, r3
 80094be:	f7ff fa4f 	bl	8008960 <ld_dword>
 80094c2:	4603      	mov	r3, r0
 80094c4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80094c8:	61fb      	str	r3, [r7, #28]
			break;
 80094ca:	e081      	b.n	80095d0 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80094d2:	4313      	orrs	r3, r2
 80094d4:	d070      	beq.n	80095b8 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	683a      	ldr	r2, [r7, #0]
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80094e6:	1e54      	subs	r4, r2, #1
 80094e8:	f143 35ff 	adc.w	r5, r3, #4294967295
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	899b      	ldrh	r3, [r3, #12]
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	2200      	movs	r2, #0
 80094f4:	4698      	mov	r8, r3
 80094f6:	4691      	mov	r9, r2
 80094f8:	4642      	mov	r2, r8
 80094fa:	464b      	mov	r3, r9
 80094fc:	4620      	mov	r0, r4
 80094fe:	4629      	mov	r1, r5
 8009500:	f7f7 fb44 	bl	8000b8c <__aeabi_uldivmod>
 8009504:	4602      	mov	r2, r0
 8009506:	460b      	mov	r3, r1
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	895b      	ldrh	r3, [r3, #10]
 800950c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009510:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	79db      	ldrb	r3, [r3, #7]
 8009516:	2b02      	cmp	r3, #2
 8009518:	d10e      	bne.n	8009538 <get_fat+0x204>
					if (cofs <= clen) {
 800951a:	697a      	ldr	r2, [r7, #20]
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	429a      	cmp	r2, r3
 8009520:	d80a      	bhi.n	8009538 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8009522:	697a      	ldr	r2, [r7, #20]
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	429a      	cmp	r2, r3
 8009528:	d002      	beq.n	8009530 <get_fat+0x1fc>
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	3301      	adds	r3, #1
 800952e:	e001      	b.n	8009534 <get_fat+0x200>
 8009530:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009534:	61fb      	str	r3, [r7, #28]
						break;
 8009536:	e04b      	b.n	80095d0 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	79db      	ldrb	r3, [r3, #7]
 800953c:	2b03      	cmp	r3, #3
 800953e:	d108      	bne.n	8009552 <get_fat+0x21e>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	699b      	ldr	r3, [r3, #24]
 8009544:	697a      	ldr	r2, [r7, #20]
 8009546:	429a      	cmp	r2, r3
 8009548:	d203      	bcs.n	8009552 <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	3301      	adds	r3, #1
 800954e:	61fb      	str	r3, [r7, #28]
					break;
 8009550:	e03e      	b.n	80095d0 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	79db      	ldrb	r3, [r3, #7]
 8009556:	2b02      	cmp	r3, #2
 8009558:	d02e      	beq.n	80095b8 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	69db      	ldr	r3, [r3, #28]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d003      	beq.n	800956a <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8009562:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009566:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8009568:	e032      	b.n	80095d0 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	899b      	ldrh	r3, [r3, #12]
 8009572:	089b      	lsrs	r3, r3, #2
 8009574:	b29b      	uxth	r3, r3
 8009576:	4619      	mov	r1, r3
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	fbb3 f3f1 	udiv	r3, r3, r1
 800957e:	4413      	add	r3, r2
 8009580:	4619      	mov	r1, r3
 8009582:	69b8      	ldr	r0, [r7, #24]
 8009584:	f7ff fe18 	bl	80091b8 <move_window>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d11f      	bne.n	80095ce <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	69ba      	ldr	r2, [r7, #24]
 800959a:	8992      	ldrh	r2, [r2, #12]
 800959c:	fbb3 f0f2 	udiv	r0, r3, r2
 80095a0:	fb00 f202 	mul.w	r2, r0, r2
 80095a4:	1a9b      	subs	r3, r3, r2
 80095a6:	440b      	add	r3, r1
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7ff f9d9 	bl	8008960 <ld_dword>
 80095ae:	4603      	mov	r3, r0
 80095b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80095b4:	61fb      	str	r3, [r7, #28]
					break;
 80095b6:	e00b      	b.n	80095d0 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80095b8:	2301      	movs	r3, #1
 80095ba:	61fb      	str	r3, [r7, #28]
 80095bc:	e008      	b.n	80095d0 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80095be:	bf00      	nop
 80095c0:	e006      	b.n	80095d0 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80095c2:	bf00      	nop
 80095c4:	e004      	b.n	80095d0 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80095c6:	bf00      	nop
 80095c8:	e002      	b.n	80095d0 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80095ca:	bf00      	nop
 80095cc:	e000      	b.n	80095d0 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80095ce:	bf00      	nop
		}
	}

	return val;
 80095d0:	69fb      	ldr	r3, [r7, #28]
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3720      	adds	r7, #32
 80095d6:	46bd      	mov	sp, r7
 80095d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080095dc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80095dc:	b590      	push	{r4, r7, lr}
 80095de:	b089      	sub	sp, #36	@ 0x24
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80095e8:	2302      	movs	r3, #2
 80095ea:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	f240 810d 	bls.w	800980e <put_fat+0x232>
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	f080 8107 	bcs.w	800980e <put_fat+0x232>
		switch (fs->fs_type) {
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	2b04      	cmp	r3, #4
 8009606:	f300 8102 	bgt.w	800980e <put_fat+0x232>
 800960a:	2b03      	cmp	r3, #3
 800960c:	f280 80b3 	bge.w	8009776 <put_fat+0x19a>
 8009610:	2b01      	cmp	r3, #1
 8009612:	d003      	beq.n	800961c <put_fat+0x40>
 8009614:	2b02      	cmp	r3, #2
 8009616:	f000 8083 	beq.w	8009720 <put_fat+0x144>
 800961a:	e0f8      	b.n	800980e <put_fat+0x232>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	61bb      	str	r3, [r7, #24]
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	085b      	lsrs	r3, r3, #1
 8009624:	69ba      	ldr	r2, [r7, #24]
 8009626:	4413      	add	r3, r2
 8009628:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	899b      	ldrh	r3, [r3, #12]
 8009632:	4619      	mov	r1, r3
 8009634:	69bb      	ldr	r3, [r7, #24]
 8009636:	fbb3 f3f1 	udiv	r3, r3, r1
 800963a:	4413      	add	r3, r2
 800963c:	4619      	mov	r1, r3
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f7ff fdba 	bl	80091b8 <move_window>
 8009644:	4603      	mov	r3, r0
 8009646:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009648:	7ffb      	ldrb	r3, [r7, #31]
 800964a:	2b00      	cmp	r3, #0
 800964c:	f040 80d8 	bne.w	8009800 <put_fat+0x224>
			p = fs->win + bc++ % SS(fs);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	1c5a      	adds	r2, r3, #1
 800965a:	61ba      	str	r2, [r7, #24]
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	8992      	ldrh	r2, [r2, #12]
 8009660:	fbb3 f0f2 	udiv	r0, r3, r2
 8009664:	fb00 f202 	mul.w	r2, r0, r2
 8009668:	1a9b      	subs	r3, r3, r2
 800966a:	440b      	add	r3, r1
 800966c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	f003 0301 	and.w	r3, r3, #1
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00d      	beq.n	8009694 <put_fat+0xb8>
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	b25b      	sxtb	r3, r3
 800967e:	f003 030f 	and.w	r3, r3, #15
 8009682:	b25a      	sxtb	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	b2db      	uxtb	r3, r3
 8009688:	011b      	lsls	r3, r3, #4
 800968a:	b25b      	sxtb	r3, r3
 800968c:	4313      	orrs	r3, r2
 800968e:	b25b      	sxtb	r3, r3
 8009690:	b2db      	uxtb	r3, r3
 8009692:	e001      	b.n	8009698 <put_fat+0xbc>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	b2db      	uxtb	r3, r3
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2201      	movs	r2, #1
 80096a0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	899b      	ldrh	r3, [r3, #12]
 80096aa:	4619      	mov	r1, r3
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80096b2:	4413      	add	r3, r2
 80096b4:	4619      	mov	r1, r3
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f7ff fd7e 	bl	80091b8 <move_window>
 80096bc:	4603      	mov	r3, r0
 80096be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80096c0:	7ffb      	ldrb	r3, [r7, #31]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	f040 809e 	bne.w	8009804 <put_fat+0x228>
			p = fs->win + bc % SS(fs);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	899b      	ldrh	r3, [r3, #12]
 80096d2:	461a      	mov	r2, r3
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80096da:	fb00 f202 	mul.w	r2, r0, r2
 80096de:	1a9b      	subs	r3, r3, r2
 80096e0:	440b      	add	r3, r1
 80096e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d003      	beq.n	80096f6 <put_fat+0x11a>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	091b      	lsrs	r3, r3, #4
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	e00e      	b.n	8009714 <put_fat+0x138>
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	b25b      	sxtb	r3, r3
 80096fc:	f023 030f 	bic.w	r3, r3, #15
 8009700:	b25a      	sxtb	r2, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	0a1b      	lsrs	r3, r3, #8
 8009706:	b25b      	sxtb	r3, r3
 8009708:	f003 030f 	and.w	r3, r3, #15
 800970c:	b25b      	sxtb	r3, r3
 800970e:	4313      	orrs	r3, r2
 8009710:	b25b      	sxtb	r3, r3
 8009712:	b2db      	uxtb	r3, r3
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2201      	movs	r2, #1
 800971c:	70da      	strb	r2, [r3, #3]
			break;
 800971e:	e076      	b.n	800980e <put_fat+0x232>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	899b      	ldrh	r3, [r3, #12]
 8009728:	085b      	lsrs	r3, r3, #1
 800972a:	b29b      	uxth	r3, r3
 800972c:	4619      	mov	r1, r3
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	fbb3 f3f1 	udiv	r3, r3, r1
 8009734:	4413      	add	r3, r2
 8009736:	4619      	mov	r1, r3
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f7ff fd3d 	bl	80091b8 <move_window>
 800973e:	4603      	mov	r3, r0
 8009740:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009742:	7ffb      	ldrb	r3, [r7, #31]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d15f      	bne.n	8009808 <put_fat+0x22c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	005b      	lsls	r3, r3, #1
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	8992      	ldrh	r2, [r2, #12]
 8009756:	fbb3 f0f2 	udiv	r0, r3, r2
 800975a:	fb00 f202 	mul.w	r2, r0, r2
 800975e:	1a9b      	subs	r3, r3, r2
 8009760:	440b      	add	r3, r1
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	b292      	uxth	r2, r2
 8009766:	4611      	mov	r1, r2
 8009768:	4618      	mov	r0, r3
 800976a:	f7ff f9f7 	bl	8008b5c <st_word>
			fs->wflag = 1;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2201      	movs	r2, #1
 8009772:	70da      	strb	r2, [r3, #3]
			break;
 8009774:	e04b      	b.n	800980e <put_fat+0x232>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	899b      	ldrh	r3, [r3, #12]
 800977e:	089b      	lsrs	r3, r3, #2
 8009780:	b29b      	uxth	r3, r3
 8009782:	4619      	mov	r1, r3
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	fbb3 f3f1 	udiv	r3, r3, r1
 800978a:	4413      	add	r3, r2
 800978c:	4619      	mov	r1, r3
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f7ff fd12 	bl	80091b8 <move_window>
 8009794:	4603      	mov	r3, r0
 8009796:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009798:	7ffb      	ldrb	r3, [r7, #31]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d136      	bne.n	800980c <put_fat+0x230>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	2b04      	cmp	r3, #4
 80097a4:	d017      	beq.n	80097d6 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	8992      	ldrh	r2, [r2, #12]
 80097ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80097be:	fb00 f202 	mul.w	r2, r0, r2
 80097c2:	1a9b      	subs	r3, r3, r2
 80097c4:	440b      	add	r3, r1
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7ff f8ca 	bl	8008960 <ld_dword>
 80097cc:	4603      	mov	r3, r0
 80097ce:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80097d2:	4323      	orrs	r3, r4
 80097d4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	8992      	ldrh	r2, [r2, #12]
 80097e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80097e8:	fb00 f202 	mul.w	r2, r0, r2
 80097ec:	1a9b      	subs	r3, r3, r2
 80097ee:	440b      	add	r3, r1
 80097f0:	6879      	ldr	r1, [r7, #4]
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7ff f9cd 	bl	8008b92 <st_dword>
			fs->wflag = 1;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2201      	movs	r2, #1
 80097fc:	70da      	strb	r2, [r3, #3]
			break;
 80097fe:	e006      	b.n	800980e <put_fat+0x232>
			if (res != FR_OK) break;
 8009800:	bf00      	nop
 8009802:	e004      	b.n	800980e <put_fat+0x232>
			if (res != FR_OK) break;
 8009804:	bf00      	nop
 8009806:	e002      	b.n	800980e <put_fat+0x232>
			if (res != FR_OK) break;
 8009808:	bf00      	nop
 800980a:	e000      	b.n	800980e <put_fat+0x232>
			if (res != FR_OK) break;
 800980c:	bf00      	nop
		}
	}
	return res;
 800980e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3724      	adds	r7, #36	@ 0x24
 8009814:	46bd      	mov	sp, r7
 8009816:	bd90      	pop	{r4, r7, pc}

08009818 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b08a      	sub	sp, #40	@ 0x28
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	3b02      	subs	r3, #2
 8009828:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800982e:	3b02      	subs	r3, #2
 8009830:	68ba      	ldr	r2, [r7, #8]
 8009832:	429a      	cmp	r2, r3
 8009834:	d301      	bcc.n	800983a <find_bitmap+0x22>
 8009836:	2300      	movs	r3, #0
 8009838:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	61fb      	str	r3, [r7, #28]
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	61bb      	str	r3, [r7, #24]
 8009842:	2300      	movs	r3, #0
 8009844:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	08db      	lsrs	r3, r3, #3
 800984e:	68f9      	ldr	r1, [r7, #12]
 8009850:	8989      	ldrh	r1, [r1, #12]
 8009852:	fbb3 f3f1 	udiv	r3, r3, r1
 8009856:	4413      	add	r3, r2
 8009858:	4619      	mov	r1, r3
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f7ff fcac 	bl	80091b8 <move_window>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d002      	beq.n	800986c <find_bitmap+0x54>
 8009866:	f04f 33ff 	mov.w	r3, #4294967295
 800986a:	e058      	b.n	800991e <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	08db      	lsrs	r3, r3, #3
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	8992      	ldrh	r2, [r2, #12]
 8009874:	fbb3 f1f2 	udiv	r1, r3, r2
 8009878:	fb01 f202 	mul.w	r2, r1, r2
 800987c:	1a9b      	subs	r3, r3, r2
 800987e:	623b      	str	r3, [r7, #32]
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	f003 0307 	and.w	r3, r3, #7
 8009886:	2201      	movs	r2, #1
 8009888:	fa02 f303 	lsl.w	r3, r2, r3
 800988c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	6a3b      	ldr	r3, [r7, #32]
 8009894:	4413      	add	r3, r2
 8009896:	3340      	adds	r3, #64	@ 0x40
 8009898:	781a      	ldrb	r2, [r3, #0]
 800989a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800989e:	4013      	ands	r3, r2
 80098a0:	74fb      	strb	r3, [r7, #19]
 80098a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098a6:	005b      	lsls	r3, r3, #1
 80098a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	3301      	adds	r3, #1
 80098b0:	61fb      	str	r3, [r7, #28]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b6:	3b02      	subs	r3, #2
 80098b8:	69fa      	ldr	r2, [r7, #28]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d307      	bcc.n	80098ce <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 80098be:	2300      	movs	r3, #0
 80098c0:	61fb      	str	r3, [r7, #28]
 80098c2:	2300      	movs	r3, #0
 80098c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	899b      	ldrh	r3, [r3, #12]
 80098cc:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 80098ce:	7cfb      	ldrb	r3, [r7, #19]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d109      	bne.n	80098e8 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	3301      	adds	r3, #1
 80098d8:	617b      	str	r3, [r7, #20]
 80098da:	697a      	ldr	r2, [r7, #20]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d106      	bne.n	80098f0 <find_bitmap+0xd8>
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	3302      	adds	r3, #2
 80098e6:	e01a      	b.n	800991e <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	61bb      	str	r3, [r7, #24]
 80098ec:	2300      	movs	r3, #0
 80098ee:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 80098f0:	69fa      	ldr	r2, [r7, #28]
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d101      	bne.n	80098fc <find_bitmap+0xe4>
 80098f8:	2300      	movs	r3, #0
 80098fa:	e010      	b.n	800991e <find_bitmap+0x106>
			} while (bm);
 80098fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1c5      	bne.n	8009890 <find_bitmap+0x78>
			bm = 1;
 8009904:	2301      	movs	r3, #1
 8009906:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 800990a:	6a3b      	ldr	r3, [r7, #32]
 800990c:	3301      	adds	r3, #1
 800990e:	623b      	str	r3, [r7, #32]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	899b      	ldrh	r3, [r3, #12]
 8009914:	461a      	mov	r2, r3
 8009916:	6a3b      	ldr	r3, [r7, #32]
 8009918:	4293      	cmp	r3, r2
 800991a:	d3b9      	bcc.n	8009890 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800991c:	e793      	b.n	8009846 <find_bitmap+0x2e>
	}
}
 800991e:	4618      	mov	r0, r3
 8009920:	3728      	adds	r7, #40	@ 0x28
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b088      	sub	sp, #32
 800992a:	af00      	add	r7, sp, #0
 800992c:	60f8      	str	r0, [r7, #12]
 800992e:	60b9      	str	r1, [r7, #8]
 8009930:	607a      	str	r2, [r7, #4]
 8009932:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	3b02      	subs	r3, #2
 8009938:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	08db      	lsrs	r3, r3, #3
 8009942:	68f9      	ldr	r1, [r7, #12]
 8009944:	8989      	ldrh	r1, [r1, #12]
 8009946:	fbb3 f3f1 	udiv	r3, r3, r1
 800994a:	4413      	add	r3, r2
 800994c:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	08db      	lsrs	r3, r3, #3
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	8992      	ldrh	r2, [r2, #12]
 8009956:	fbb3 f1f2 	udiv	r1, r3, r2
 800995a:	fb01 f202 	mul.w	r2, r1, r2
 800995e:	1a9b      	subs	r3, r3, r2
 8009960:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	f003 0307 	and.w	r3, r3, #7
 8009968:	2201      	movs	r2, #1
 800996a:	fa02 f303 	lsl.w	r3, r2, r3
 800996e:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	1c5a      	adds	r2, r3, #1
 8009974:	617a      	str	r2, [r7, #20]
 8009976:	4619      	mov	r1, r3
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f7ff fc1d 	bl	80091b8 <move_window>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d001      	beq.n	8009988 <change_bitmap+0x62>
 8009984:	2301      	movs	r3, #1
 8009986:	e03f      	b.n	8009a08 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	4413      	add	r3, r2
 800998e:	3340      	adds	r3, #64	@ 0x40
 8009990:	781a      	ldrb	r2, [r3, #0]
 8009992:	7ffb      	ldrb	r3, [r7, #31]
 8009994:	4013      	ands	r3, r2
 8009996:	b2db      	uxtb	r3, r3
 8009998:	2b00      	cmp	r3, #0
 800999a:	bf14      	ite	ne
 800999c:	2301      	movne	r3, #1
 800999e:	2300      	moveq	r3, #0
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	461a      	mov	r2, r3
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d101      	bne.n	80099ae <change_bitmap+0x88>
 80099aa:	2302      	movs	r3, #2
 80099ac:	e02c      	b.n	8009a08 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	4413      	add	r3, r2
 80099b4:	3340      	adds	r3, #64	@ 0x40
 80099b6:	781a      	ldrb	r2, [r3, #0]
 80099b8:	7ffb      	ldrb	r3, [r7, #31]
 80099ba:	4053      	eors	r3, r2
 80099bc:	b2d9      	uxtb	r1, r3
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	4413      	add	r3, r2
 80099c4:	3340      	adds	r3, #64	@ 0x40
 80099c6:	460a      	mov	r2, r1
 80099c8:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2201      	movs	r2, #1
 80099ce:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	3b01      	subs	r3, #1
 80099d4:	607b      	str	r3, [r7, #4]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d101      	bne.n	80099e0 <change_bitmap+0xba>
 80099dc:	2300      	movs	r3, #0
 80099de:	e013      	b.n	8009a08 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 80099e0:	7ffb      	ldrb	r3, [r7, #31]
 80099e2:	005b      	lsls	r3, r3, #1
 80099e4:	77fb      	strb	r3, [r7, #31]
 80099e6:	7ffb      	ldrb	r3, [r7, #31]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1cd      	bne.n	8009988 <change_bitmap+0x62>
			bm = 1;
 80099ec:	2301      	movs	r3, #1
 80099ee:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	3301      	adds	r3, #1
 80099f4:	61bb      	str	r3, [r7, #24]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	899b      	ldrh	r3, [r3, #12]
 80099fa:	461a      	mov	r2, r3
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d3c2      	bcc.n	8009988 <change_bitmap+0x62>
		i = 0;
 8009a02:	2300      	movs	r3, #0
 8009a04:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8009a06:	e7b3      	b.n	8009970 <change_bitmap+0x4a>
	}
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3720      	adds	r7, #32
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	79db      	ldrb	r3, [r3, #7]
 8009a1c:	2b03      	cmp	r3, #3
 8009a1e:	d121      	bne.n	8009a64 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	617b      	str	r3, [r7, #20]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	699b      	ldr	r3, [r3, #24]
 8009a2a:	613b      	str	r3, [r7, #16]
 8009a2c:	e014      	b.n	8009a58 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6818      	ldr	r0, [r3, #0]
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	3301      	adds	r3, #1
 8009a36:	461a      	mov	r2, r3
 8009a38:	6979      	ldr	r1, [r7, #20]
 8009a3a:	f7ff fdcf 	bl	80095dc <put_fat>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8009a42:	7bfb      	ldrb	r3, [r7, #15]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d001      	beq.n	8009a4c <fill_first_frag+0x3c>
 8009a48:	7bfb      	ldrb	r3, [r7, #15]
 8009a4a:	e00c      	b.n	8009a66 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	3301      	adds	r3, #1
 8009a50:	617b      	str	r3, [r7, #20]
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	3b01      	subs	r3, #1
 8009a56:	613b      	str	r3, [r7, #16]
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1e7      	bne.n	8009a2e <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3718      	adds	r7, #24
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b086      	sub	sp, #24
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	60f8      	str	r0, [r7, #12]
 8009a76:	60b9      	str	r1, [r7, #8]
 8009a78:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8009a7a:	e020      	b.n	8009abe <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6818      	ldr	r0, [r3, #0]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	69db      	ldr	r3, [r3, #28]
 8009a84:	68ba      	ldr	r2, [r7, #8]
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	1c59      	adds	r1, r3, #1
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	69db      	ldr	r3, [r3, #28]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d905      	bls.n	8009a9e <fill_last_frag+0x30>
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	69db      	ldr	r3, [r3, #28]
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	1ad3      	subs	r3, r2, r3
 8009a9a:	3302      	adds	r3, #2
 8009a9c:	e000      	b.n	8009aa0 <fill_last_frag+0x32>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	f7ff fd9b 	bl	80095dc <put_fat>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8009aaa:	7dfb      	ldrb	r3, [r7, #23]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d001      	beq.n	8009ab4 <fill_last_frag+0x46>
 8009ab0:	7dfb      	ldrb	r3, [r7, #23]
 8009ab2:	e009      	b.n	8009ac8 <fill_last_frag+0x5a>
		obj->n_frag--;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	69db      	ldr	r3, [r3, #28]
 8009ab8:	1e5a      	subs	r2, r3, #1
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	69db      	ldr	r3, [r3, #28]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1da      	bne.n	8009a7c <fill_last_frag+0xe>
	}
	return FR_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3718      	adds	r7, #24
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b08a      	sub	sp, #40	@ 0x28
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009adc:	2300      	movs	r3, #0
 8009ade:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d904      	bls.n	8009afe <remove_chain+0x2e>
 8009af4:	69bb      	ldr	r3, [r7, #24]
 8009af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009af8:	68ba      	ldr	r2, [r7, #8]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d301      	bcc.n	8009b02 <remove_chain+0x32>
 8009afe:	2302      	movs	r3, #2
 8009b00:	e096      	b.n	8009c30 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d014      	beq.n	8009b32 <remove_chain+0x62>
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	2b04      	cmp	r3, #4
 8009b0e:	d103      	bne.n	8009b18 <remove_chain+0x48>
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	79db      	ldrb	r3, [r3, #7]
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	d00c      	beq.n	8009b32 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009b18:	f04f 32ff 	mov.w	r2, #4294967295
 8009b1c:	6879      	ldr	r1, [r7, #4]
 8009b1e:	69b8      	ldr	r0, [r7, #24]
 8009b20:	f7ff fd5c 	bl	80095dc <put_fat>
 8009b24:	4603      	mov	r3, r0
 8009b26:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009b28:	7ffb      	ldrb	r3, [r7, #31]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d001      	beq.n	8009b32 <remove_chain+0x62>
 8009b2e:	7ffb      	ldrb	r3, [r7, #31]
 8009b30:	e07e      	b.n	8009c30 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009b32:	68b9      	ldr	r1, [r7, #8]
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	f7ff fbfd 	bl	8009334 <get_fat>
 8009b3a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d055      	beq.n	8009bee <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d101      	bne.n	8009b4c <remove_chain+0x7c>
 8009b48:	2302      	movs	r3, #2
 8009b4a:	e071      	b.n	8009c30 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b52:	d101      	bne.n	8009b58 <remove_chain+0x88>
 8009b54:	2301      	movs	r3, #1
 8009b56:	e06b      	b.n	8009c30 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	2b04      	cmp	r3, #4
 8009b5e:	d00b      	beq.n	8009b78 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009b60:	2200      	movs	r2, #0
 8009b62:	68b9      	ldr	r1, [r7, #8]
 8009b64:	69b8      	ldr	r0, [r7, #24]
 8009b66:	f7ff fd39 	bl	80095dc <put_fat>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009b6e:	7ffb      	ldrb	r3, [r7, #31]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d001      	beq.n	8009b78 <remove_chain+0xa8>
 8009b74:	7ffb      	ldrb	r3, [r7, #31]
 8009b76:	e05b      	b.n	8009c30 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	6a1a      	ldr	r2, [r3, #32]
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b80:	3b02      	subs	r3, #2
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d20b      	bcs.n	8009b9e <remove_chain+0xce>
			fs->free_clst++;
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	6a1b      	ldr	r3, [r3, #32]
 8009b8a:	1c5a      	adds	r2, r3, #1
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	621a      	str	r2, [r3, #32]
			fs->fsi_flag |= 1;
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	791b      	ldrb	r3, [r3, #4]
 8009b94:	f043 0301 	orr.w	r3, r3, #1
 8009b98:	b2da      	uxtb	r2, r3
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8009b9e:	6a3b      	ldr	r3, [r7, #32]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	697a      	ldr	r2, [r7, #20]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d102      	bne.n	8009bae <remove_chain+0xde>
			ecl = nxt;
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	623b      	str	r3, [r7, #32]
 8009bac:	e017      	b.n	8009bde <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	2b04      	cmp	r3, #4
 8009bb4:	d10f      	bne.n	8009bd6 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8009bb6:	6a3a      	ldr	r2, [r7, #32]
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	1c5a      	adds	r2, r3, #1
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009bc2:	69b8      	ldr	r0, [r7, #24]
 8009bc4:	f7ff feaf 	bl	8009926 <change_bitmap>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8009bcc:	7ffb      	ldrb	r3, [r7, #31]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d001      	beq.n	8009bd6 <remove_chain+0x106>
 8009bd2:	7ffb      	ldrb	r3, [r7, #31]
 8009bd4:	e02c      	b.n	8009c30 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	623b      	str	r3, [r7, #32]
 8009bda:	6a3b      	ldr	r3, [r7, #32]
 8009bdc:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d3a2      	bcc.n	8009b32 <remove_chain+0x62>
 8009bec:	e000      	b.n	8009bf0 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8009bee:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	2b04      	cmp	r3, #4
 8009bf6:	d11a      	bne.n	8009c2e <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d103      	bne.n	8009c06 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2200      	movs	r2, #0
 8009c02:	71da      	strb	r2, [r3, #7]
 8009c04:	e013      	b.n	8009c2e <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	79db      	ldrb	r3, [r3, #7]
 8009c0a:	2b03      	cmp	r3, #3
 8009c0c:	d10f      	bne.n	8009c2e <remove_chain+0x15e>
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d30a      	bcc.n	8009c2e <remove_chain+0x15e>
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	689a      	ldr	r2, [r3, #8]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	4413      	add	r3, r2
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d802      	bhi.n	8009c2e <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2202      	movs	r2, #2
 8009c2c:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3728      	adds	r7, #40	@ 0x28
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b088      	sub	sp, #32
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10d      	bne.n	8009c6a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	69db      	ldr	r3, [r3, #28]
 8009c52:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d004      	beq.n	8009c64 <create_chain+0x2c>
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c5e:	69ba      	ldr	r2, [r7, #24]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d31b      	bcc.n	8009c9c <create_chain+0x64>
 8009c64:	2301      	movs	r3, #1
 8009c66:	61bb      	str	r3, [r7, #24]
 8009c68:	e018      	b.n	8009c9c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f7ff fb61 	bl	8009334 <get_fat>
 8009c72:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d801      	bhi.n	8009c7e <create_chain+0x46>
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e0d9      	b.n	8009e32 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c84:	d101      	bne.n	8009c8a <create_chain+0x52>
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	e0d3      	b.n	8009e32 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d201      	bcs.n	8009c98 <create_chain+0x60>
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	e0cc      	b.n	8009e32 <create_chain+0x1fa>
		scl = clst;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	2b04      	cmp	r3, #4
 8009ca2:	d164      	bne.n	8009d6e <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	69b9      	ldr	r1, [r7, #24]
 8009ca8:	6938      	ldr	r0, [r7, #16]
 8009caa:	f7ff fdb5 	bl	8009818 <find_bitmap>
 8009cae:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d003      	beq.n	8009cbe <create_chain+0x86>
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cbc:	d101      	bne.n	8009cc2 <create_chain+0x8a>
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	e0b7      	b.n	8009e32 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	69f9      	ldr	r1, [r7, #28]
 8009cc8:	6938      	ldr	r0, [r7, #16]
 8009cca:	f7ff fe2c 	bl	8009926 <change_bitmap>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8009cd2:	7dfb      	ldrb	r3, [r7, #23]
 8009cd4:	2b02      	cmp	r3, #2
 8009cd6:	d101      	bne.n	8009cdc <create_chain+0xa4>
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e0aa      	b.n	8009e32 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8009cdc:	7dfb      	ldrb	r3, [r7, #23]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d102      	bne.n	8009ce8 <create_chain+0xb0>
 8009ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce6:	e0a4      	b.n	8009e32 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d103      	bne.n	8009cf6 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2202      	movs	r2, #2
 8009cf2:	71da      	strb	r2, [r3, #7]
 8009cf4:	e011      	b.n	8009d1a <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	79db      	ldrb	r3, [r3, #7]
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d10d      	bne.n	8009d1a <create_chain+0xe2>
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	3301      	adds	r3, #1
 8009d02:	69fa      	ldr	r2, [r7, #28]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d008      	beq.n	8009d1a <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	69ba      	ldr	r2, [r7, #24]
 8009d0e:	1ad2      	subs	r2, r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2203      	movs	r2, #3
 8009d18:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	79db      	ldrb	r3, [r3, #7]
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d064      	beq.n	8009dec <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	3301      	adds	r3, #1
 8009d26:	69fa      	ldr	r2, [r7, #28]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d10b      	bne.n	8009d44 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	69db      	ldr	r3, [r3, #28]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d003      	beq.n	8009d3c <create_chain+0x104>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	69db      	ldr	r3, [r3, #28]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	e000      	b.n	8009d3e <create_chain+0x106>
 8009d3c:	2302      	movs	r3, #2
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	61d3      	str	r3, [r2, #28]
 8009d42:	e053      	b.n	8009dec <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	69db      	ldr	r3, [r3, #28]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d102      	bne.n	8009d52 <create_chain+0x11a>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8009d52:	69fa      	ldr	r2, [r7, #28]
 8009d54:	6839      	ldr	r1, [r7, #0]
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f7ff fe89 	bl	8009a6e <fill_last_frag>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8009d60:	7dfb      	ldrb	r3, [r7, #23]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d142      	bne.n	8009dec <create_chain+0x1b4>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	61da      	str	r2, [r3, #28]
 8009d6c:	e03e      	b.n	8009dec <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	3301      	adds	r3, #1
 8009d76:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d7c:	69fa      	ldr	r2, [r7, #28]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d307      	bcc.n	8009d92 <create_chain+0x15a>
				ncl = 2;
 8009d82:	2302      	movs	r3, #2
 8009d84:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009d86:	69fa      	ldr	r2, [r7, #28]
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d901      	bls.n	8009d92 <create_chain+0x15a>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	e04f      	b.n	8009e32 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009d92:	69f9      	ldr	r1, [r7, #28]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f7ff facd 	bl	8009334 <get_fat>
 8009d9a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00e      	beq.n	8009dc0 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d003      	beq.n	8009db0 <create_chain+0x178>
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dae:	d101      	bne.n	8009db4 <create_chain+0x17c>
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	e03e      	b.n	8009e32 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8009db4:	69fa      	ldr	r2, [r7, #28]
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d1da      	bne.n	8009d72 <create_chain+0x13a>
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	e038      	b.n	8009e32 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8009dc0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8009dc6:	69f9      	ldr	r1, [r7, #28]
 8009dc8:	6938      	ldr	r0, [r7, #16]
 8009dca:	f7ff fc07 	bl	80095dc <put_fat>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009dd2:	7dfb      	ldrb	r3, [r7, #23]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d109      	bne.n	8009dec <create_chain+0x1b4>
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d006      	beq.n	8009dec <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009dde:	69fa      	ldr	r2, [r7, #28]
 8009de0:	6839      	ldr	r1, [r7, #0]
 8009de2:	6938      	ldr	r0, [r7, #16]
 8009de4:	f7ff fbfa 	bl	80095dc <put_fat>
 8009de8:	4603      	mov	r3, r0
 8009dea:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009dec:	7dfb      	ldrb	r3, [r7, #23]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d116      	bne.n	8009e20 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	69fa      	ldr	r2, [r7, #28]
 8009df6:	61da      	str	r2, [r3, #28]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	6a1a      	ldr	r2, [r3, #32]
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e00:	3b02      	subs	r3, #2
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d804      	bhi.n	8009e10 <create_chain+0x1d8>
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	1e5a      	subs	r2, r3, #1
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	621a      	str	r2, [r3, #32]
		fs->fsi_flag |= 1;
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	791b      	ldrb	r3, [r3, #4]
 8009e14:	f043 0301 	orr.w	r3, r3, #1
 8009e18:	b2da      	uxtb	r2, r3
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	711a      	strb	r2, [r3, #4]
 8009e1e:	e007      	b.n	8009e30 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009e20:	7dfb      	ldrb	r3, [r7, #23]
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d102      	bne.n	8009e2c <create_chain+0x1f4>
 8009e26:	f04f 33ff 	mov.w	r3, #4294967295
 8009e2a:	e000      	b.n	8009e2e <create_chain+0x1f6>
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009e30:	69fb      	ldr	r3, [r7, #28]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3720      	adds	r7, #32
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009e3a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009e3e:	b088      	sub	sp, #32
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e52:	3304      	adds	r3, #4
 8009e54:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	899b      	ldrh	r3, [r3, #12]
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	4698      	mov	r8, r3
 8009e60:	4691      	mov	r9, r2
 8009e62:	4642      	mov	r2, r8
 8009e64:	464b      	mov	r3, r9
 8009e66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e6a:	f7f6 fe8f 	bl	8000b8c <__aeabi_uldivmod>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	460b      	mov	r3, r1
 8009e72:	4610      	mov	r0, r2
 8009e74:	4619      	mov	r1, r3
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	895b      	ldrh	r3, [r3, #10]
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	461c      	mov	r4, r3
 8009e80:	4615      	mov	r5, r2
 8009e82:	4622      	mov	r2, r4
 8009e84:	462b      	mov	r3, r5
 8009e86:	f7f6 fe81 	bl	8000b8c <__aeabi_uldivmod>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	4613      	mov	r3, r2
 8009e90:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	1d1a      	adds	r2, r3, #4
 8009e96:	61ba      	str	r2, [r7, #24]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d101      	bne.n	8009ea6 <clmt_clust+0x6c>
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	e010      	b.n	8009ec8 <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 8009ea6:	69fa      	ldr	r2, [r7, #28]
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d307      	bcc.n	8009ebe <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 8009eae:	69fa      	ldr	r2, [r7, #28]
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	1ad3      	subs	r3, r2, r3
 8009eb4:	61fb      	str	r3, [r7, #28]
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	3304      	adds	r3, #4
 8009eba:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009ebc:	e7e9      	b.n	8009e92 <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 8009ebe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	4413      	add	r3, r2
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3720      	adds	r7, #32
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08009ed2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b086      	sub	sp, #24
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	2b04      	cmp	r3, #4
 8009ee8:	d102      	bne.n	8009ef0 <dir_sdi+0x1e>
 8009eea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009eee:	e001      	b.n	8009ef4 <dir_sdi+0x22>
 8009ef0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d904      	bls.n	8009f04 <dir_sdi+0x32>
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	f003 031f 	and.w	r3, r3, #31
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d001      	beq.n	8009f08 <dir_sdi+0x36>
		return FR_INT_ERR;
 8009f04:	2302      	movs	r3, #2
 8009f06:	e074      	b.n	8009ff2 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	683a      	ldr	r2, [r7, #0]
 8009f0c:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d109      	bne.n	8009f2e <dir_sdi+0x5c>
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	2b02      	cmp	r3, #2
 8009f20:	d905      	bls.n	8009f2e <dir_sdi+0x5c>
		clst = fs->dirbase;
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f26:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d10c      	bne.n	8009f4e <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	095b      	lsrs	r3, r3, #5
 8009f38:	693a      	ldr	r2, [r7, #16]
 8009f3a:	8912      	ldrh	r2, [r2, #8]
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d301      	bcc.n	8009f44 <dir_sdi+0x72>
 8009f40:	2302      	movs	r3, #2
 8009f42:	e056      	b.n	8009ff2 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8009f4c:	e02d      	b.n	8009faa <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	895b      	ldrh	r3, [r3, #10]
 8009f52:	461a      	mov	r2, r3
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	899b      	ldrh	r3, [r3, #12]
 8009f58:	fb02 f303 	mul.w	r3, r2, r3
 8009f5c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009f5e:	e019      	b.n	8009f94 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6979      	ldr	r1, [r7, #20]
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7ff f9e5 	bl	8009334 <get_fat>
 8009f6a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f72:	d101      	bne.n	8009f78 <dir_sdi+0xa6>
 8009f74:	2301      	movs	r3, #1
 8009f76:	e03c      	b.n	8009ff2 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d904      	bls.n	8009f88 <dir_sdi+0xb6>
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f82:	697a      	ldr	r2, [r7, #20]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d301      	bcc.n	8009f8c <dir_sdi+0xba>
 8009f88:	2302      	movs	r3, #2
 8009f8a:	e032      	b.n	8009ff2 <dir_sdi+0x120>
			ofs -= csz;
 8009f8c:	683a      	ldr	r2, [r7, #0]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009f94:	683a      	ldr	r2, [r7, #0]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d2e1      	bcs.n	8009f60 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 8009f9c:	6979      	ldr	r1, [r7, #20]
 8009f9e:	6938      	ldr	r0, [r7, #16]
 8009fa0:	f7ff f9a8 	bl	80092f4 <clust2sect>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	697a      	ldr	r2, [r7, #20]
 8009fae:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d101      	bne.n	8009fbc <dir_sdi+0xea>
 8009fb8:	2302      	movs	r3, #2
 8009fba:	e01a      	b.n	8009ff2 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	899b      	ldrh	r3, [r3, #12]
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8009fcc:	441a      	add	r2, r3
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	899b      	ldrh	r3, [r3, #12]
 8009fdc:	461a      	mov	r2, r3
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	fbb3 f0f2 	udiv	r0, r3, r2
 8009fe4:	fb00 f202 	mul.w	r2, r0, r2
 8009fe8:	1a9b      	subs	r3, r3, r2
 8009fea:	18ca      	adds	r2, r1, r3
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3718      	adds	r7, #24
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b086      	sub	sp, #24
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
 800a002:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a00e:	3320      	adds	r3, #32
 800a010:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a016:	2b00      	cmp	r3, #0
 800a018:	d00b      	beq.n	800a032 <dir_next+0x38>
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	2b04      	cmp	r3, #4
 800a020:	d102      	bne.n	800a028 <dir_next+0x2e>
 800a022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a026:	e001      	b.n	800a02c <dir_next+0x32>
 800a028:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d801      	bhi.n	800a036 <dir_next+0x3c>
 800a032:	2304      	movs	r3, #4
 800a034:	e0c3      	b.n	800a1be <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	899b      	ldrh	r3, [r3, #12]
 800a03a:	461a      	mov	r2, r3
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a042:	fb01 f202 	mul.w	r2, r1, r2
 800a046:	1a9b      	subs	r3, r3, r2
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f040 80a5 	bne.w	800a198 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a052:	1c5a      	adds	r2, r3, #1
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d10b      	bne.n	800a078 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	095b      	lsrs	r3, r3, #5
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	8912      	ldrh	r2, [r2, #8]
 800a068:	4293      	cmp	r3, r2
 800a06a:	f0c0 8095 	bcc.w	800a198 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2200      	movs	r2, #0
 800a072:	639a      	str	r2, [r3, #56]	@ 0x38
 800a074:	2304      	movs	r3, #4
 800a076:	e0a2      	b.n	800a1be <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	899b      	ldrh	r3, [r3, #12]
 800a07c:	461a      	mov	r2, r3
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	fbb3 f3f2 	udiv	r3, r3, r2
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	8952      	ldrh	r2, [r2, #10]
 800a088:	3a01      	subs	r2, #1
 800a08a:	4013      	ands	r3, r2
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	f040 8083 	bne.w	800a198 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a098:	4619      	mov	r1, r3
 800a09a:	4610      	mov	r0, r2
 800a09c:	f7ff f94a 	bl	8009334 <get_fat>
 800a0a0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d801      	bhi.n	800a0ac <dir_next+0xb2>
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	e088      	b.n	800a1be <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b2:	d101      	bne.n	800a0b8 <dir_next+0xbe>
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e082      	b.n	800a1be <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0bc:	697a      	ldr	r2, [r7, #20]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d360      	bcc.n	800a184 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d104      	bne.n	800a0d2 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	639a      	str	r2, [r3, #56]	@ 0x38
 800a0ce:	2304      	movs	r3, #4
 800a0d0:	e075      	b.n	800a1be <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0d8:	4619      	mov	r1, r3
 800a0da:	4610      	mov	r0, r2
 800a0dc:	f7ff fdac 	bl	8009c38 <create_chain>
 800a0e0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d101      	bne.n	800a0ec <dir_next+0xf2>
 800a0e8:	2307      	movs	r3, #7
 800a0ea:	e068      	b.n	800a1be <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d101      	bne.n	800a0f6 <dir_next+0xfc>
 800a0f2:	2302      	movs	r3, #2
 800a0f4:	e063      	b.n	800a1be <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0fc:	d101      	bne.n	800a102 <dir_next+0x108>
 800a0fe:	2301      	movs	r3, #1
 800a100:	e05d      	b.n	800a1be <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	79db      	ldrb	r3, [r3, #7]
 800a106:	f043 0304 	orr.w	r3, r3, #4
 800a10a:	b2da      	uxtb	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f7ff f80d 	bl	8009130 <sync_window>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d001      	beq.n	800a120 <dir_next+0x126>
 800a11c:	2301      	movs	r3, #1
 800a11e:	e04e      	b.n	800a1be <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	899b      	ldrh	r3, [r3, #12]
 800a12a:	461a      	mov	r2, r3
 800a12c:	2100      	movs	r1, #0
 800a12e:	f7fe fe05 	bl	8008d3c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a132:	2300      	movs	r3, #0
 800a134:	613b      	str	r3, [r7, #16]
 800a136:	6979      	ldr	r1, [r7, #20]
 800a138:	68f8      	ldr	r0, [r7, #12]
 800a13a:	f7ff f8db 	bl	80092f4 <clust2sect>
 800a13e:	4602      	mov	r2, r0
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a144:	e012      	b.n	800a16c <dir_next+0x172>
						fs->wflag = 1;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2201      	movs	r2, #1
 800a14a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f7fe ffef 	bl	8009130 <sync_window>
 800a152:	4603      	mov	r3, r0
 800a154:	2b00      	cmp	r3, #0
 800a156:	d001      	beq.n	800a15c <dir_next+0x162>
 800a158:	2301      	movs	r3, #1
 800a15a:	e030      	b.n	800a1be <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	3301      	adds	r3, #1
 800a160:	613b      	str	r3, [r7, #16]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a166:	1c5a      	adds	r2, r3, #1
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	895b      	ldrh	r3, [r3, #10]
 800a170:	461a      	mov	r2, r3
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	4293      	cmp	r3, r2
 800a176:	d3e6      	bcc.n	800a146 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	1ad2      	subs	r2, r2, r3
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	63da      	str	r2, [r3, #60]	@ 0x3c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	697a      	ldr	r2, [r7, #20]
 800a188:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 800a18a:	6979      	ldr	r1, [r7, #20]
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f7ff f8b1 	bl	80092f4 <clust2sect>
 800a192:	4602      	mov	r2, r0
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	68ba      	ldr	r2, [r7, #8]
 800a19c:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	899b      	ldrh	r3, [r3, #12]
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	fbb3 f0f2 	udiv	r0, r3, r2
 800a1b0:	fb00 f202 	mul.w	r2, r0, r2
 800a1b4:	1a9b      	subs	r3, r3, r2
 800a1b6:	18ca      	adds	r2, r1, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3718      	adds	r7, #24
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b086      	sub	sp, #24
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
 800a1ce:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f7ff fe7a 	bl	8009ed2 <dir_sdi>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a1e2:	7dfb      	ldrb	r3, [r7, #23]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d140      	bne.n	800a26a <dir_alloc+0xa4>
		n = 0;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f7fe ffe0 	bl	80091b8 <move_window>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a1fc:	7dfb      	ldrb	r3, [r7, #23]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d132      	bne.n	800a268 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	2b04      	cmp	r3, #4
 800a208:	d108      	bne.n	800a21c <dir_alloc+0x56>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	b25b      	sxtb	r3, r3
 800a212:	43db      	mvns	r3, r3
 800a214:	b2db      	uxtb	r3, r3
 800a216:	09db      	lsrs	r3, r3, #7
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	e00f      	b.n	800a23c <dir_alloc+0x76>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	2be5      	cmp	r3, #229	@ 0xe5
 800a224:	d004      	beq.n	800a230 <dir_alloc+0x6a>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d101      	bne.n	800a234 <dir_alloc+0x6e>
 800a230:	2301      	movs	r3, #1
 800a232:	e000      	b.n	800a236 <dir_alloc+0x70>
 800a234:	2300      	movs	r3, #0
 800a236:	f003 0301 	and.w	r3, r3, #1
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d007      	beq.n	800a250 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	3301      	adds	r3, #1
 800a244:	613b      	str	r3, [r7, #16]
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d102      	bne.n	800a254 <dir_alloc+0x8e>
 800a24e:	e00c      	b.n	800a26a <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a250:	2300      	movs	r3, #0
 800a252:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a254:	2101      	movs	r1, #1
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f7ff fecf 	bl	8009ffa <dir_next>
 800a25c:	4603      	mov	r3, r0
 800a25e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a260:	7dfb      	ldrb	r3, [r7, #23]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d0c2      	beq.n	800a1ec <dir_alloc+0x26>
 800a266:	e000      	b.n	800a26a <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800a268:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a26a:	7dfb      	ldrb	r3, [r7, #23]
 800a26c:	2b04      	cmp	r3, #4
 800a26e:	d101      	bne.n	800a274 <dir_alloc+0xae>
 800a270:	2307      	movs	r3, #7
 800a272:	75fb      	strb	r3, [r7, #23]
	return res;
 800a274:	7dfb      	ldrb	r3, [r7, #23]
}
 800a276:	4618      	mov	r0, r3
 800a278:	3718      	adds	r7, #24
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b084      	sub	sp, #16
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
 800a286:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	331a      	adds	r3, #26
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7fe fb4f 	bl	8008930 <ld_word>
 800a292:	4603      	mov	r3, r0
 800a294:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	2b03      	cmp	r3, #3
 800a29c:	d109      	bne.n	800a2b2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	3314      	adds	r3, #20
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fe fb44 	bl	8008930 <ld_word>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	041b      	lsls	r3, r3, #16
 800a2ac:	68fa      	ldr	r2, [r7, #12]
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3710      	adds	r7, #16
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	331a      	adds	r3, #26
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	b292      	uxth	r2, r2
 800a2d0:	4611      	mov	r1, r2
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7fe fc42 	bl	8008b5c <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	2b03      	cmp	r3, #3
 800a2de:	d109      	bne.n	800a2f4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	f103 0214 	add.w	r2, r3, #20
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	0c1b      	lsrs	r3, r3, #16
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	4610      	mov	r0, r2
 800a2f0:	f7fe fc34 	bl	8008b5c <st_word>
	}
}
 800a2f4:	bf00      	nop
 800a2f6:	3710      	adds	r7, #16
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a2fc:	b590      	push	{r4, r7, lr}
 800a2fe:	b087      	sub	sp, #28
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	331a      	adds	r3, #26
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fe fb10 	bl	8008930 <ld_word>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d001      	beq.n	800a31a <cmp_lfn+0x1e>
 800a316:	2300      	movs	r3, #0
 800a318:	e059      	b.n	800a3ce <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a322:	1e5a      	subs	r2, r3, #1
 800a324:	4613      	mov	r3, r2
 800a326:	005b      	lsls	r3, r3, #1
 800a328:	4413      	add	r3, r2
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	4413      	add	r3, r2
 800a32e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a330:	2301      	movs	r3, #1
 800a332:	81fb      	strh	r3, [r7, #14]
 800a334:	2300      	movs	r3, #0
 800a336:	613b      	str	r3, [r7, #16]
 800a338:	e033      	b.n	800a3a2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a33a:	4a27      	ldr	r2, [pc, #156]	@ (800a3d8 <cmp_lfn+0xdc>)
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	4413      	add	r3, r2
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	461a      	mov	r2, r3
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	4413      	add	r3, r2
 800a348:	4618      	mov	r0, r3
 800a34a:	f7fe faf1 	bl	8008930 <ld_word>
 800a34e:	4603      	mov	r3, r0
 800a350:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a352:	89fb      	ldrh	r3, [r7, #14]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d01a      	beq.n	800a38e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	2bfe      	cmp	r3, #254	@ 0xfe
 800a35c:	d812      	bhi.n	800a384 <cmp_lfn+0x88>
 800a35e:	89bb      	ldrh	r3, [r7, #12]
 800a360:	4618      	mov	r0, r3
 800a362:	f003 fd31 	bl	800ddc8 <ff_wtoupper>
 800a366:	4603      	mov	r3, r0
 800a368:	461c      	mov	r4, r3
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	1c5a      	adds	r2, r3, #1
 800a36e:	617a      	str	r2, [r7, #20]
 800a370:	005b      	lsls	r3, r3, #1
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	4413      	add	r3, r2
 800a376:	881b      	ldrh	r3, [r3, #0]
 800a378:	4618      	mov	r0, r3
 800a37a:	f003 fd25 	bl	800ddc8 <ff_wtoupper>
 800a37e:	4603      	mov	r3, r0
 800a380:	429c      	cmp	r4, r3
 800a382:	d001      	beq.n	800a388 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a384:	2300      	movs	r3, #0
 800a386:	e022      	b.n	800a3ce <cmp_lfn+0xd2>
			}
			wc = uc;
 800a388:	89bb      	ldrh	r3, [r7, #12]
 800a38a:	81fb      	strh	r3, [r7, #14]
 800a38c:	e006      	b.n	800a39c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a38e:	89bb      	ldrh	r3, [r7, #12]
 800a390:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a394:	4293      	cmp	r3, r2
 800a396:	d001      	beq.n	800a39c <cmp_lfn+0xa0>
 800a398:	2300      	movs	r3, #0
 800a39a:	e018      	b.n	800a3ce <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	613b      	str	r3, [r7, #16]
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	2b0c      	cmp	r3, #12
 800a3a6:	d9c8      	bls.n	800a33a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d00b      	beq.n	800a3cc <cmp_lfn+0xd0>
 800a3b4:	89fb      	ldrh	r3, [r7, #14]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d008      	beq.n	800a3cc <cmp_lfn+0xd0>
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	005b      	lsls	r3, r3, #1
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	881b      	ldrh	r3, [r3, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d001      	beq.n	800a3cc <cmp_lfn+0xd0>
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	e000      	b.n	800a3ce <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a3cc:	2301      	movs	r3, #1
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	371c      	adds	r7, #28
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd90      	pop	{r4, r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	08016abc 	.word	0x08016abc

0800a3dc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b086      	sub	sp, #24
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	331a      	adds	r3, #26
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7fe faa0 	bl	8008930 <ld_word>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d001      	beq.n	800a3fa <pick_lfn+0x1e>
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	e04d      	b.n	800a496 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a402:	1e5a      	subs	r2, r3, #1
 800a404:	4613      	mov	r3, r2
 800a406:	005b      	lsls	r3, r3, #1
 800a408:	4413      	add	r3, r2
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	4413      	add	r3, r2
 800a40e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a410:	2301      	movs	r3, #1
 800a412:	81fb      	strh	r3, [r7, #14]
 800a414:	2300      	movs	r3, #0
 800a416:	613b      	str	r3, [r7, #16]
 800a418:	e028      	b.n	800a46c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a41a:	4a21      	ldr	r2, [pc, #132]	@ (800a4a0 <pick_lfn+0xc4>)
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	4413      	add	r3, r2
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	461a      	mov	r2, r3
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	4413      	add	r3, r2
 800a428:	4618      	mov	r0, r3
 800a42a:	f7fe fa81 	bl	8008930 <ld_word>
 800a42e:	4603      	mov	r3, r0
 800a430:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a432:	89fb      	ldrh	r3, [r7, #14]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00f      	beq.n	800a458 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	2bfe      	cmp	r3, #254	@ 0xfe
 800a43c:	d901      	bls.n	800a442 <pick_lfn+0x66>
 800a43e:	2300      	movs	r3, #0
 800a440:	e029      	b.n	800a496 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a442:	89bb      	ldrh	r3, [r7, #12]
 800a444:	81fb      	strh	r3, [r7, #14]
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	1c5a      	adds	r2, r3, #1
 800a44a:	617a      	str	r2, [r7, #20]
 800a44c:	005b      	lsls	r3, r3, #1
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	4413      	add	r3, r2
 800a452:	89fa      	ldrh	r2, [r7, #14]
 800a454:	801a      	strh	r2, [r3, #0]
 800a456:	e006      	b.n	800a466 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a458:	89bb      	ldrh	r3, [r7, #12]
 800a45a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a45e:	4293      	cmp	r3, r2
 800a460:	d001      	beq.n	800a466 <pick_lfn+0x8a>
 800a462:	2300      	movs	r3, #0
 800a464:	e017      	b.n	800a496 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	3301      	adds	r3, #1
 800a46a:	613b      	str	r3, [r7, #16]
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	2b0c      	cmp	r3, #12
 800a470:	d9d3      	bls.n	800a41a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00a      	beq.n	800a494 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	2bfe      	cmp	r3, #254	@ 0xfe
 800a482:	d901      	bls.n	800a488 <pick_lfn+0xac>
 800a484:	2300      	movs	r3, #0
 800a486:	e006      	b.n	800a496 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	005b      	lsls	r3, r3, #1
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	4413      	add	r3, r2
 800a490:	2200      	movs	r2, #0
 800a492:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800a494:	2301      	movs	r3, #1
}
 800a496:	4618      	mov	r0, r3
 800a498:	3718      	adds	r7, #24
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	08016abc 	.word	0x08016abc

0800a4a4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b088      	sub	sp, #32
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	60b9      	str	r1, [r7, #8]
 800a4ae:	4611      	mov	r1, r2
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	71fb      	strb	r3, [r7, #7]
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	330d      	adds	r3, #13
 800a4be:	79ba      	ldrb	r2, [r7, #6]
 800a4c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	330b      	adds	r3, #11
 800a4c6:	220f      	movs	r2, #15
 800a4c8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	330c      	adds	r3, #12
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	331a      	adds	r3, #26
 800a4d6:	2100      	movs	r1, #0
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7fe fb3f 	bl	8008b5c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a4de:	79fb      	ldrb	r3, [r7, #7]
 800a4e0:	1e5a      	subs	r2, r3, #1
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	005b      	lsls	r3, r3, #1
 800a4e6:	4413      	add	r3, r2
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	4413      	add	r3, r2
 800a4ec:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	82fb      	strh	r3, [r7, #22]
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a4f6:	8afb      	ldrh	r3, [r7, #22]
 800a4f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d007      	beq.n	800a510 <put_lfn+0x6c>
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	1c5a      	adds	r2, r3, #1
 800a504:	61fa      	str	r2, [r7, #28]
 800a506:	005b      	lsls	r3, r3, #1
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	4413      	add	r3, r2
 800a50c:	881b      	ldrh	r3, [r3, #0]
 800a50e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a510:	4a17      	ldr	r2, [pc, #92]	@ (800a570 <put_lfn+0xcc>)
 800a512:	69bb      	ldr	r3, [r7, #24]
 800a514:	4413      	add	r3, r2
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	461a      	mov	r2, r3
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	4413      	add	r3, r2
 800a51e:	8afa      	ldrh	r2, [r7, #22]
 800a520:	4611      	mov	r1, r2
 800a522:	4618      	mov	r0, r3
 800a524:	f7fe fb1a 	bl	8008b5c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a528:	8afb      	ldrh	r3, [r7, #22]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d102      	bne.n	800a534 <put_lfn+0x90>
 800a52e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a532:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	3301      	adds	r3, #1
 800a538:	61bb      	str	r3, [r7, #24]
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	2b0c      	cmp	r3, #12
 800a53e:	d9da      	bls.n	800a4f6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a540:	8afb      	ldrh	r3, [r7, #22]
 800a542:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a546:	4293      	cmp	r3, r2
 800a548:	d006      	beq.n	800a558 <put_lfn+0xb4>
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	005b      	lsls	r3, r3, #1
 800a54e:	68fa      	ldr	r2, [r7, #12]
 800a550:	4413      	add	r3, r2
 800a552:	881b      	ldrh	r3, [r3, #0]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d103      	bne.n	800a560 <put_lfn+0xbc>
 800a558:	79fb      	ldrb	r3, [r7, #7]
 800a55a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a55e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	79fa      	ldrb	r2, [r7, #7]
 800a564:	701a      	strb	r2, [r3, #0]
}
 800a566:	bf00      	nop
 800a568:	3720      	adds	r7, #32
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	08016abc 	.word	0x08016abc

0800a574 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b08c      	sub	sp, #48	@ 0x30
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	607a      	str	r2, [r7, #4]
 800a580:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a582:	220b      	movs	r2, #11
 800a584:	68b9      	ldr	r1, [r7, #8]
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f7fe fbb7 	bl	8008cfa <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	2b05      	cmp	r3, #5
 800a590:	d92b      	bls.n	800a5ea <gen_numname+0x76>
		sr = seq;
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a596:	e022      	b.n	800a5de <gen_numname+0x6a>
			wc = *lfn++;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	1c9a      	adds	r2, r3, #2
 800a59c:	607a      	str	r2, [r7, #4]
 800a59e:	881b      	ldrh	r3, [r3, #0]
 800a5a0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a5a6:	e017      	b.n	800a5d8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	005a      	lsls	r2, r3, #1
 800a5ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a5ae:	f003 0301 	and.w	r3, r3, #1
 800a5b2:	4413      	add	r3, r2
 800a5b4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a5b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a5b8:	085b      	lsrs	r3, r3, #1
 800a5ba:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d005      	beq.n	800a5d2 <gen_numname+0x5e>
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800a5cc:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800a5d0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a5d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5da:	2b0f      	cmp	r3, #15
 800a5dc:	d9e4      	bls.n	800a5a8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	881b      	ldrh	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d1d8      	bne.n	800a598 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a5e6:	69fb      	ldr	r3, [r7, #28]
 800a5e8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a5ea:	2307      	movs	r3, #7
 800a5ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	f003 030f 	and.w	r3, r3, #15
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	3330      	adds	r3, #48	@ 0x30
 800a5fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800a5fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a602:	2b39      	cmp	r3, #57	@ 0x39
 800a604:	d904      	bls.n	800a610 <gen_numname+0x9c>
 800a606:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a60a:	3307      	adds	r3, #7
 800a60c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800a610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a612:	1e5a      	subs	r2, r3, #1
 800a614:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a616:	3330      	adds	r3, #48	@ 0x30
 800a618:	443b      	add	r3, r7
 800a61a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800a61e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	091b      	lsrs	r3, r3, #4
 800a626:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d1df      	bne.n	800a5ee <gen_numname+0x7a>
	ns[i] = '~';
 800a62e:	f107 0214 	add.w	r2, r7, #20
 800a632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a634:	4413      	add	r3, r2
 800a636:	227e      	movs	r2, #126	@ 0x7e
 800a638:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a63a:	2300      	movs	r3, #0
 800a63c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a63e:	e002      	b.n	800a646 <gen_numname+0xd2>
 800a640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a642:	3301      	adds	r3, #1
 800a644:	627b      	str	r3, [r7, #36]	@ 0x24
 800a646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d205      	bcs.n	800a65a <gen_numname+0xe6>
 800a64e:	68fa      	ldr	r2, [r7, #12]
 800a650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a652:	4413      	add	r3, r2
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	2b20      	cmp	r3, #32
 800a658:	d1f2      	bne.n	800a640 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a65c:	2b07      	cmp	r3, #7
 800a65e:	d807      	bhi.n	800a670 <gen_numname+0xfc>
 800a660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a662:	1c5a      	adds	r2, r3, #1
 800a664:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a666:	3330      	adds	r3, #48	@ 0x30
 800a668:	443b      	add	r3, r7
 800a66a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a66e:	e000      	b.n	800a672 <gen_numname+0xfe>
 800a670:	2120      	movs	r1, #32
 800a672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a674:	1c5a      	adds	r2, r3, #1
 800a676:	627a      	str	r2, [r7, #36]	@ 0x24
 800a678:	68fa      	ldr	r2, [r7, #12]
 800a67a:	4413      	add	r3, r2
 800a67c:	460a      	mov	r2, r1
 800a67e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a682:	2b07      	cmp	r3, #7
 800a684:	d9e9      	bls.n	800a65a <gen_numname+0xe6>
}
 800a686:	bf00      	nop
 800a688:	bf00      	nop
 800a68a:	3730      	adds	r7, #48	@ 0x30
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a690:	b480      	push	{r7}
 800a692:	b085      	sub	sp, #20
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a698:	2300      	movs	r3, #0
 800a69a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a69c:	230b      	movs	r3, #11
 800a69e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a6a0:	7bfb      	ldrb	r3, [r7, #15]
 800a6a2:	b2da      	uxtb	r2, r3
 800a6a4:	0852      	lsrs	r2, r2, #1
 800a6a6:	01db      	lsls	r3, r3, #7
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	b2da      	uxtb	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	1c59      	adds	r1, r3, #1
 800a6b0:	6079      	str	r1, [r7, #4]
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	60bb      	str	r3, [r7, #8]
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1ed      	bne.n	800a6a0 <sum_sfn+0x10>
	return sum;
 800a6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3714      	adds	r7, #20
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr

0800a6d2 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800a6d2:	b480      	push	{r7}
 800a6d4:	b087      	sub	sp, #28
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	3301      	adds	r3, #1
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	015b      	lsls	r3, r3, #5
 800a6e4:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	827b      	strh	r3, [r7, #18]
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	617b      	str	r3, [r7, #20]
 800a6ee:	e017      	b.n	800a720 <xdir_sum+0x4e>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	d103      	bne.n	800a6fe <xdir_sum+0x2c>
			i++;
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	617b      	str	r3, [r7, #20]
 800a6fc:	e00d      	b.n	800a71a <xdir_sum+0x48>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800a6fe:	8a7b      	ldrh	r3, [r7, #18]
 800a700:	03db      	lsls	r3, r3, #15
 800a702:	b29a      	uxth	r2, r3
 800a704:	8a7b      	ldrh	r3, [r7, #18]
 800a706:	085b      	lsrs	r3, r3, #1
 800a708:	b29b      	uxth	r3, r3
 800a70a:	4413      	add	r3, r2
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	6879      	ldr	r1, [r7, #4]
 800a710:	697a      	ldr	r2, [r7, #20]
 800a712:	440a      	add	r2, r1
 800a714:	7812      	ldrb	r2, [r2, #0]
 800a716:	4413      	add	r3, r2
 800a718:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	3301      	adds	r3, #1
 800a71e:	617b      	str	r3, [r7, #20]
 800a720:	697a      	ldr	r2, [r7, #20]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	429a      	cmp	r2, r3
 800a726:	d3e3      	bcc.n	800a6f0 <xdir_sum+0x1e>
		}
	}
	return sum;
 800a728:	8a7b      	ldrh	r3, [r7, #18]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	371c      	adds	r7, #28
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr

0800a736 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800a736:	b580      	push	{r7, lr}
 800a738:	b084      	sub	sp, #16
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800a73e:	2300      	movs	r3, #0
 800a740:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800a742:	e01f      	b.n	800a784 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800a744:	89bb      	ldrh	r3, [r7, #12]
 800a746:	4618      	mov	r0, r3
 800a748:	f003 fb3e 	bl	800ddc8 <ff_wtoupper>
 800a74c:	4603      	mov	r3, r0
 800a74e:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800a750:	89fb      	ldrh	r3, [r7, #14]
 800a752:	03db      	lsls	r3, r3, #15
 800a754:	b29a      	uxth	r2, r3
 800a756:	89fb      	ldrh	r3, [r7, #14]
 800a758:	085b      	lsrs	r3, r3, #1
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	4413      	add	r3, r2
 800a75e:	b29a      	uxth	r2, r3
 800a760:	89bb      	ldrh	r3, [r7, #12]
 800a762:	b2db      	uxtb	r3, r3
 800a764:	b29b      	uxth	r3, r3
 800a766:	4413      	add	r3, r2
 800a768:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800a76a:	89fb      	ldrh	r3, [r7, #14]
 800a76c:	03db      	lsls	r3, r3, #15
 800a76e:	b29a      	uxth	r2, r3
 800a770:	89fb      	ldrh	r3, [r7, #14]
 800a772:	085b      	lsrs	r3, r3, #1
 800a774:	b29b      	uxth	r3, r3
 800a776:	4413      	add	r3, r2
 800a778:	b29a      	uxth	r2, r3
 800a77a:	89bb      	ldrh	r3, [r7, #12]
 800a77c:	0a1b      	lsrs	r3, r3, #8
 800a77e:	b29b      	uxth	r3, r3
 800a780:	4413      	add	r3, r2
 800a782:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	1c9a      	adds	r2, r3, #2
 800a788:	607a      	str	r2, [r7, #4]
 800a78a:	881b      	ldrh	r3, [r3, #0]
 800a78c:	81bb      	strh	r3, [r7, #12]
 800a78e:	89bb      	ldrh	r3, [r7, #12]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d1d7      	bne.n	800a744 <xname_sum+0xe>
	}
	return sum;
 800a794:	89fb      	ldrh	r3, [r7, #14]
}
 800a796:	4618      	mov	r0, r3
 800a798:	3710      	adds	r7, #16
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
	...

0800a7a0 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800a7a0:	b590      	push	{r4, r7, lr}
 800a7a2:	b087      	sub	sp, #28
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	695b      	ldr	r3, [r3, #20]
 800a7ae:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	4610      	mov	r0, r2
 800a7bc:	f7fe fcfc 	bl	80091b8 <move_window>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800a7c4:	7bfb      	ldrb	r3, [r7, #15]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d001      	beq.n	800a7ce <load_xdir+0x2e>
 800a7ca:	7bfb      	ldrb	r3, [r7, #15]
 800a7cc:	e09f      	b.n	800a90e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	2b85      	cmp	r3, #133	@ 0x85
 800a7d6:	d001      	beq.n	800a7dc <load_xdir+0x3c>
 800a7d8:	2302      	movs	r3, #2
 800a7da:	e098      	b.n	800a90e <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7e0:	2220      	movs	r2, #32
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	6938      	ldr	r0, [r7, #16]
 800a7e6:	f7fe fa88 	bl	8008cfa <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	015b      	lsls	r3, r3, #5
 800a7f4:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	2b5f      	cmp	r3, #95	@ 0x5f
 800a7fa:	d903      	bls.n	800a804 <load_xdir+0x64>
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800a802:	d901      	bls.n	800a808 <load_xdir+0x68>
 800a804:	2302      	movs	r3, #2
 800a806:	e082      	b.n	800a90e <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800a808:	2100      	movs	r1, #0
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f7ff fbf5 	bl	8009ffa <dir_next>
 800a810:	4603      	mov	r3, r0
 800a812:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800a814:	7bfb      	ldrb	r3, [r7, #15]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d001      	beq.n	800a81e <load_xdir+0x7e>
 800a81a:	7bfb      	ldrb	r3, [r7, #15]
 800a81c:	e077      	b.n	800a90e <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a826:	4619      	mov	r1, r3
 800a828:	4610      	mov	r0, r2
 800a82a:	f7fe fcc5 	bl	80091b8 <move_window>
 800a82e:	4603      	mov	r3, r0
 800a830:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800a832:	7bfb      	ldrb	r3, [r7, #15]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d001      	beq.n	800a83c <load_xdir+0x9c>
 800a838:	7bfb      	ldrb	r3, [r7, #15]
 800a83a:	e068      	b.n	800a90e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	2bc0      	cmp	r3, #192	@ 0xc0
 800a844:	d001      	beq.n	800a84a <load_xdir+0xaa>
 800a846:	2302      	movs	r3, #2
 800a848:	e061      	b.n	800a90e <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	f103 0020 	add.w	r0, r3, #32
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a854:	2220      	movs	r2, #32
 800a856:	4619      	mov	r1, r3
 800a858:	f7fe fa4f 	bl	8008cfa <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	3323      	adds	r3, #35	@ 0x23
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	332c      	adds	r3, #44	@ 0x2c
 800a864:	4a2c      	ldr	r2, [pc, #176]	@ (800a918 <load_xdir+0x178>)
 800a866:	fba2 2303 	umull	r2, r3, r2, r3
 800a86a:	08db      	lsrs	r3, r3, #3
 800a86c:	015b      	lsls	r3, r3, #5
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	429a      	cmp	r2, r3
 800a872:	d201      	bcs.n	800a878 <load_xdir+0xd8>
 800a874:	2302      	movs	r3, #2
 800a876:	e04a      	b.n	800a90e <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800a878:	2340      	movs	r3, #64	@ 0x40
 800a87a:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800a87c:	2100      	movs	r1, #0
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f7ff fbbb 	bl	8009ffa <dir_next>
 800a884:	4603      	mov	r3, r0
 800a886:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800a888:	7bfb      	ldrb	r3, [r7, #15]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d001      	beq.n	800a892 <load_xdir+0xf2>
 800a88e:	7bfb      	ldrb	r3, [r7, #15]
 800a890:	e03d      	b.n	800a90e <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a89a:	4619      	mov	r1, r3
 800a89c:	4610      	mov	r0, r2
 800a89e:	f7fe fc8b 	bl	80091b8 <move_window>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800a8a6:	7bfb      	ldrb	r3, [r7, #15]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d001      	beq.n	800a8b0 <load_xdir+0x110>
 800a8ac:	7bfb      	ldrb	r3, [r7, #15]
 800a8ae:	e02e      	b.n	800a90e <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	2bc1      	cmp	r3, #193	@ 0xc1
 800a8b8:	d001      	beq.n	800a8be <load_xdir+0x11e>
 800a8ba:	2302      	movs	r3, #2
 800a8bc:	e027      	b.n	800a90e <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800a8c4:	d208      	bcs.n	800a8d8 <load_xdir+0x138>
 800a8c6:	693a      	ldr	r2, [r7, #16]
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	18d0      	adds	r0, r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8d0:	2220      	movs	r2, #32
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	f7fe fa11 	bl	8008cfa <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	3320      	adds	r3, #32
 800a8dc:	617b      	str	r3, [r7, #20]
 800a8de:	697a      	ldr	r2, [r7, #20]
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d3ca      	bcc.n	800a87c <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800a8ec:	d80e      	bhi.n	800a90c <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800a8ee:	6938      	ldr	r0, [r7, #16]
 800a8f0:	f7ff feef 	bl	800a6d2 <xdir_sum>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	461c      	mov	r4, r3
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	3302      	adds	r3, #2
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7fe f817 	bl	8008930 <ld_word>
 800a902:	4603      	mov	r3, r0
 800a904:	429c      	cmp	r4, r3
 800a906:	d001      	beq.n	800a90c <load_xdir+0x16c>
 800a908:	2302      	movs	r3, #2
 800a90a:	e000      	b.n	800a90e <load_xdir+0x16e>
	}
	return FR_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	371c      	adds	r7, #28
 800a912:	46bd      	mov	sp, r7
 800a914:	bd90      	pop	{r4, r7, pc}
 800a916:	bf00      	nop
 800a918:	88888889 	.word	0x88888889

0800a91c <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800a91c:	b5b0      	push	{r4, r5, r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800a926:	6839      	ldr	r1, [r7, #0]
 800a928:	6808      	ldr	r0, [r1, #0]
 800a92a:	6879      	ldr	r1, [r7, #4]
 800a92c:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800a92e:	6839      	ldr	r1, [r7, #0]
 800a930:	6a08      	ldr	r0, [r1, #32]
 800a932:	6879      	ldr	r1, [r7, #4]
 800a934:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800a936:	6839      	ldr	r1, [r7, #0]
 800a938:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800a93a:	b2c8      	uxtb	r0, r1
 800a93c:	6879      	ldr	r1, [r7, #4]
 800a93e:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800a940:	6839      	ldr	r1, [r7, #0]
 800a942:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800a944:	2000      	movs	r0, #0
 800a946:	460c      	mov	r4, r1
 800a948:	4605      	mov	r5, r0
 800a94a:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 800a94e:	2300      	movs	r3, #0
 800a950:	6879      	ldr	r1, [r7, #4]
 800a952:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a962:	4619      	mov	r1, r3
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f7ff fab4 	bl	8009ed2 <dir_sdi>
 800a96a:	4603      	mov	r3, r0
 800a96c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a96e:	7bfb      	ldrb	r3, [r7, #15]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d104      	bne.n	800a97e <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f7ff ff13 	bl	800a7a0 <load_xdir>
 800a97a:	4603      	mov	r3, r0
 800a97c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800a97e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a980:	4618      	mov	r0, r3
 800a982:	3710      	adds	r7, #16
 800a984:	46bd      	mov	sp, r7
 800a986:	bdb0      	pop	{r4, r5, r7, pc}

0800a988 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800a988:	b590      	push	{r4, r7, lr}
 800a98a:	b087      	sub	sp, #28
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	695b      	ldr	r3, [r3, #20]
 800a996:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	1c9c      	adds	r4, r3, #2
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f7ff fe98 	bl	800a6d2 <xdir_sum>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f7fe f8d8 	bl	8008b5c <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f7ff fa88 	bl	8009ed2 <dir_sdi>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800a9c6:	e026      	b.n	800aa16 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	4610      	mov	r0, r2
 800a9d4:	f7fe fbf0 	bl	80091b8 <move_window>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a9dc:	7dfb      	ldrb	r3, [r7, #23]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d11d      	bne.n	800aa1e <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9e6:	2220      	movs	r2, #32
 800a9e8:	68f9      	ldr	r1, [r7, #12]
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fe f985 	bl	8008cfa <mem_cpy>
		dp->obj.fs->wflag = 1;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	613b      	str	r3, [r7, #16]
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d00e      	beq.n	800aa22 <store_xdir+0x9a>
		dirb += SZDIRE;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	3320      	adds	r3, #32
 800aa08:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f7ff faf4 	bl	8009ffa <dir_next>
 800aa12:	4603      	mov	r3, r0
 800aa14:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800aa16:	7dfb      	ldrb	r3, [r7, #23]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d0d5      	beq.n	800a9c8 <store_xdir+0x40>
 800aa1c:	e002      	b.n	800aa24 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800aa1e:	bf00      	nop
 800aa20:	e000      	b.n	800aa24 <store_xdir+0x9c>
		if (--nent == 0) break;
 800aa22:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800aa24:	7dfb      	ldrb	r3, [r7, #23]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d002      	beq.n	800aa30 <store_xdir+0xa8>
 800aa2a:	7dfb      	ldrb	r3, [r7, #23]
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d101      	bne.n	800aa34 <store_xdir+0xac>
 800aa30:	7dfb      	ldrb	r3, [r7, #23]
 800aa32:	e000      	b.n	800aa36 <store_xdir+0xae>
 800aa34:	2302      	movs	r3, #2
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	371c      	adds	r7, #28
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd90      	pop	{r4, r7, pc}

0800aa3e <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800aa3e:	b590      	push	{r4, r7, lr}
 800aa40:	b085      	sub	sp, #20
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
 800aa46:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800aa48:	2240      	movs	r2, #64	@ 0x40
 800aa4a:	2100      	movs	r1, #0
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f7fe f975 	bl	8008d3c <mem_set>
	dirb[XDIR_Type] = 0x85;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2285      	movs	r2, #133	@ 0x85
 800aa56:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	3320      	adds	r3, #32
 800aa5c:	22c0      	movs	r2, #192	@ 0xc0
 800aa5e:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800aa60:	2300      	movs	r3, #0
 800aa62:	72bb      	strb	r3, [r7, #10]
 800aa64:	2301      	movs	r3, #1
 800aa66:	72fb      	strb	r3, [r7, #11]
 800aa68:	2301      	movs	r3, #1
 800aa6a:	813b      	strh	r3, [r7, #8]
 800aa6c:	2340      	movs	r3, #64	@ 0x40
 800aa6e:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	1c5a      	adds	r2, r3, #1
 800aa74:	60fa      	str	r2, [r7, #12]
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	4413      	add	r3, r2
 800aa7a:	22c1      	movs	r2, #193	@ 0xc1
 800aa7c:	701a      	strb	r2, [r3, #0]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	1c5a      	adds	r2, r3, #1
 800aa82:	60fa      	str	r2, [r7, #12]
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	4413      	add	r3, r2
 800aa88:	2200      	movs	r2, #0
 800aa8a:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800aa8c:	893b      	ldrh	r3, [r7, #8]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d00b      	beq.n	800aaaa <create_xdir+0x6c>
 800aa92:	7abb      	ldrb	r3, [r7, #10]
 800aa94:	005b      	lsls	r3, r3, #1
 800aa96:	683a      	ldr	r2, [r7, #0]
 800aa98:	4413      	add	r3, r2
 800aa9a:	881b      	ldrh	r3, [r3, #0]
 800aa9c:	813b      	strh	r3, [r7, #8]
 800aa9e:	893b      	ldrh	r3, [r7, #8]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d002      	beq.n	800aaaa <create_xdir+0x6c>
 800aaa4:	7abb      	ldrb	r3, [r7, #10]
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	4413      	add	r3, r2
 800aab0:	893a      	ldrh	r2, [r7, #8]
 800aab2:	4611      	mov	r1, r2
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7fe f851 	bl	8008b5c <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	3302      	adds	r3, #2
 800aabe:	60fb      	str	r3, [r7, #12]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f003 031f 	and.w	r3, r3, #31
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1e0      	bne.n	800aa8c <create_xdir+0x4e>
		nb++;
 800aaca:	7afb      	ldrb	r3, [r7, #11]
 800aacc:	3301      	adds	r3, #1
 800aace:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800aad0:	7abb      	ldrb	r3, [r7, #10]
 800aad2:	005b      	lsls	r3, r3, #1
 800aad4:	683a      	ldr	r2, [r7, #0]
 800aad6:	4413      	add	r3, r2
 800aad8:	881b      	ldrh	r3, [r3, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d1c8      	bne.n	800aa70 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	3323      	adds	r3, #35	@ 0x23
 800aae2:	7aba      	ldrb	r2, [r7, #10]
 800aae4:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	3301      	adds	r3, #1
 800aaea:	7afa      	ldrb	r2, [r7, #11]
 800aaec:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800aaf4:	6838      	ldr	r0, [r7, #0]
 800aaf6:	f7ff fe1e 	bl	800a736 <xname_sum>
 800aafa:	4603      	mov	r3, r0
 800aafc:	4619      	mov	r1, r3
 800aafe:	4620      	mov	r0, r4
 800ab00:	f7fe f82c 	bl	8008b5c <st_word>
}
 800ab04:	bf00      	nop
 800ab06:	3714      	adds	r7, #20
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd90      	pop	{r4, r7, pc}

0800ab0c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b086      	sub	sp, #24
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800ab16:	2304      	movs	r3, #4
 800ab18:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800ab20:	23ff      	movs	r3, #255	@ 0xff
 800ab22:	757b      	strb	r3, [r7, #21]
 800ab24:	23ff      	movs	r3, #255	@ 0xff
 800ab26:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800ab28:	e09f      	b.n	800ac6a <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab2e:	4619      	mov	r1, r3
 800ab30:	6938      	ldr	r0, [r7, #16]
 800ab32:	f7fe fb41 	bl	80091b8 <move_window>
 800ab36:	4603      	mov	r3, r0
 800ab38:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ab3a:	7dfb      	ldrb	r3, [r7, #23]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f040 809a 	bne.w	800ac76 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800ab4a:	7dbb      	ldrb	r3, [r7, #22]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d102      	bne.n	800ab56 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ab50:	2304      	movs	r3, #4
 800ab52:	75fb      	strb	r3, [r7, #23]
 800ab54:	e096      	b.n	800ac84 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	2b04      	cmp	r3, #4
 800ab5c:	d118      	bne.n	800ab90 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800ab5e:	7dbb      	ldrb	r3, [r7, #22]
 800ab60:	2b85      	cmp	r3, #133	@ 0x85
 800ab62:	d179      	bne.n	800ac58 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f7ff fe17 	bl	800a7a0 <load_xdir>
 800ab72:	4603      	mov	r3, r0
 800ab74:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800ab76:	7dfb      	ldrb	r3, [r7, #23]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d17e      	bne.n	800ac7a <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	695b      	ldr	r3, [r3, #20]
 800ab80:	3304      	adds	r3, #4
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab88:	b2da      	uxtb	r2, r3
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	719a      	strb	r2, [r3, #6]
					}
					break;
 800ab8e:	e074      	b.n	800ac7a <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab94:	330b      	adds	r3, #11
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab9c:	73fb      	strb	r3, [r7, #15]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	7bfa      	ldrb	r2, [r7, #15]
 800aba2:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800aba4:	7dbb      	ldrb	r3, [r7, #22]
 800aba6:	2be5      	cmp	r3, #229	@ 0xe5
 800aba8:	d00e      	beq.n	800abc8 <dir_read+0xbc>
 800abaa:	7dbb      	ldrb	r3, [r7, #22]
 800abac:	2b2e      	cmp	r3, #46	@ 0x2e
 800abae:	d00b      	beq.n	800abc8 <dir_read+0xbc>
 800abb0:	7bfb      	ldrb	r3, [r7, #15]
 800abb2:	f023 0320 	bic.w	r3, r3, #32
 800abb6:	2b08      	cmp	r3, #8
 800abb8:	bf0c      	ite	eq
 800abba:	2301      	moveq	r3, #1
 800abbc:	2300      	movne	r3, #0
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	461a      	mov	r2, r3
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d002      	beq.n	800abce <dir_read+0xc2>
				ord = 0xFF;
 800abc8:	23ff      	movs	r3, #255	@ 0xff
 800abca:	757b      	strb	r3, [r7, #21]
 800abcc:	e044      	b.n	800ac58 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800abce:	7bfb      	ldrb	r3, [r7, #15]
 800abd0:	2b0f      	cmp	r3, #15
 800abd2:	d12f      	bne.n	800ac34 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800abd4:	7dbb      	ldrb	r3, [r7, #22]
 800abd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d00d      	beq.n	800abfa <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abe2:	7b5b      	ldrb	r3, [r3, #13]
 800abe4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800abe6:	7dbb      	ldrb	r3, [r7, #22]
 800abe8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abec:	75bb      	strb	r3, [r7, #22]
 800abee:	7dbb      	ldrb	r3, [r7, #22]
 800abf0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800abfa:	7dba      	ldrb	r2, [r7, #22]
 800abfc:	7d7b      	ldrb	r3, [r7, #21]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d115      	bne.n	800ac2e <dir_read+0x122>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac06:	330d      	adds	r3, #13
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	7d3a      	ldrb	r2, [r7, #20]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d10e      	bne.n	800ac2e <dir_read+0x122>
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	691a      	ldr	r2, [r3, #16]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac18:	4619      	mov	r1, r3
 800ac1a:	4610      	mov	r0, r2
 800ac1c:	f7ff fbde 	bl	800a3dc <pick_lfn>
 800ac20:	4603      	mov	r3, r0
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d003      	beq.n	800ac2e <dir_read+0x122>
 800ac26:	7d7b      	ldrb	r3, [r7, #21]
 800ac28:	3b01      	subs	r3, #1
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	e000      	b.n	800ac30 <dir_read+0x124>
 800ac2e:	23ff      	movs	r3, #255	@ 0xff
 800ac30:	757b      	strb	r3, [r7, #21]
 800ac32:	e011      	b.n	800ac58 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800ac34:	7d7b      	ldrb	r3, [r7, #21]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d109      	bne.n	800ac4e <dir_read+0x142>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7ff fd26 	bl	800a690 <sum_sfn>
 800ac44:	4603      	mov	r3, r0
 800ac46:	461a      	mov	r2, r3
 800ac48:	7d3b      	ldrb	r3, [r7, #20]
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d017      	beq.n	800ac7e <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f04f 32ff 	mov.w	r2, #4294967295
 800ac54:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800ac56:	e012      	b.n	800ac7e <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ac58:	2100      	movs	r1, #0
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f7ff f9cd 	bl	8009ffa <dir_next>
 800ac60:	4603      	mov	r3, r0
 800ac62:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ac64:	7dfb      	ldrb	r3, [r7, #23]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d10b      	bne.n	800ac82 <dir_read+0x176>
	while (dp->sect) {
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	f47f af5b 	bne.w	800ab2a <dir_read+0x1e>
 800ac74:	e006      	b.n	800ac84 <dir_read+0x178>
		if (res != FR_OK) break;
 800ac76:	bf00      	nop
 800ac78:	e004      	b.n	800ac84 <dir_read+0x178>
					break;
 800ac7a:	bf00      	nop
 800ac7c:	e002      	b.n	800ac84 <dir_read+0x178>
					break;
 800ac7e:	bf00      	nop
 800ac80:	e000      	b.n	800ac84 <dir_read+0x178>
		if (res != FR_OK) break;
 800ac82:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ac84:	7dfb      	ldrb	r3, [r7, #23]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d002      	beq.n	800ac90 <dir_read+0x184>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800ac90:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3718      	adds	r7, #24
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ac9a:	b590      	push	{r4, r7, lr}
 800ac9c:	b089      	sub	sp, #36	@ 0x24
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800aca8:	2100      	movs	r1, #0
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f7ff f911 	bl	8009ed2 <dir_sdi>
 800acb0:	4603      	mov	r3, r0
 800acb2:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800acb4:	7ffb      	ldrb	r3, [r7, #31]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d001      	beq.n	800acbe <dir_find+0x24>
 800acba:	7ffb      	ldrb	r3, [r7, #31]
 800acbc:	e113      	b.n	800aee6 <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	2b04      	cmp	r3, #4
 800acc4:	d165      	bne.n	800ad92 <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	4618      	mov	r0, r3
 800accc:	f7ff fd33 	bl	800a736 <xname_sum>
 800acd0:	4603      	mov	r3, r0
 800acd2:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800acd4:	e050      	b.n	800ad78 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	695b      	ldr	r3, [r3, #20]
 800acda:	3324      	adds	r3, #36	@ 0x24
 800acdc:	4618      	mov	r0, r3
 800acde:	f7fd fe27 	bl	8008930 <ld_word>
 800ace2:	4603      	mov	r3, r0
 800ace4:	461a      	mov	r2, r3
 800ace6:	893b      	ldrh	r3, [r7, #8]
 800ace8:	4293      	cmp	r3, r2
 800acea:	d144      	bne.n	800ad76 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	695b      	ldr	r3, [r3, #20]
 800acf0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800acf4:	76fb      	strb	r3, [r7, #27]
 800acf6:	2340      	movs	r3, #64	@ 0x40
 800acf8:	617b      	str	r3, [r7, #20]
 800acfa:	2300      	movs	r3, #0
 800acfc:	613b      	str	r3, [r7, #16]
 800acfe:	e029      	b.n	800ad54 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	f003 031f 	and.w	r3, r3, #31
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d102      	bne.n	800ad10 <dir_find+0x76>
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	3302      	adds	r3, #2
 800ad0e:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	695a      	ldr	r2, [r3, #20]
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	4413      	add	r3, r2
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7fd fe09 	bl	8008930 <ld_word>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	4618      	mov	r0, r3
 800ad22:	f003 f851 	bl	800ddc8 <ff_wtoupper>
 800ad26:	4603      	mov	r3, r0
 800ad28:	461c      	mov	r4, r3
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	691a      	ldr	r2, [r3, #16]
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	005b      	lsls	r3, r3, #1
 800ad32:	4413      	add	r3, r2
 800ad34:	881b      	ldrh	r3, [r3, #0]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f003 f846 	bl	800ddc8 <ff_wtoupper>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	429c      	cmp	r4, r3
 800ad40:	d10c      	bne.n	800ad5c <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800ad42:	7efb      	ldrb	r3, [r7, #27]
 800ad44:	3b01      	subs	r3, #1
 800ad46:	76fb      	strb	r3, [r7, #27]
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	3302      	adds	r3, #2
 800ad4c:	617b      	str	r3, [r7, #20]
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	3301      	adds	r3, #1
 800ad52:	613b      	str	r3, [r7, #16]
 800ad54:	7efb      	ldrb	r3, [r7, #27]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1d2      	bne.n	800ad00 <dir_find+0x66>
 800ad5a:	e000      	b.n	800ad5e <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800ad5c:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800ad5e:	7efb      	ldrb	r3, [r7, #27]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d109      	bne.n	800ad78 <dir_find+0xde>
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	691a      	ldr	r2, [r3, #16]
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	005b      	lsls	r3, r3, #1
 800ad6c:	4413      	add	r3, r2
 800ad6e:	881b      	ldrh	r3, [r3, #0]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d00b      	beq.n	800ad8c <dir_find+0xf2>
 800ad74:	e000      	b.n	800ad78 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800ad76:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800ad78:	2100      	movs	r1, #0
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f7ff fec6 	bl	800ab0c <dir_read>
 800ad80:	4603      	mov	r3, r0
 800ad82:	77fb      	strb	r3, [r7, #31]
 800ad84:	7ffb      	ldrb	r3, [r7, #31]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d0a5      	beq.n	800acd6 <dir_find+0x3c>
 800ad8a:	e000      	b.n	800ad8e <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800ad8c:	bf00      	nop
		}
		return res;
 800ad8e:	7ffb      	ldrb	r3, [r7, #31]
 800ad90:	e0a9      	b.n	800aee6 <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ad92:	23ff      	movs	r3, #255	@ 0xff
 800ad94:	773b      	strb	r3, [r7, #28]
 800ad96:	7f3b      	ldrb	r3, [r7, #28]
 800ad98:	777b      	strb	r3, [r7, #29]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f04f 32ff 	mov.w	r2, #4294967295
 800ada0:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ada6:	4619      	mov	r1, r3
 800ada8:	68f8      	ldr	r0, [r7, #12]
 800adaa:	f7fe fa05 	bl	80091b8 <move_window>
 800adae:	4603      	mov	r3, r0
 800adb0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800adb2:	7ffb      	ldrb	r3, [r7, #31]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f040 8090 	bne.w	800aeda <dir_find+0x240>
		c = dp->dir[DIR_Name];
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800adc2:	7fbb      	ldrb	r3, [r7, #30]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d102      	bne.n	800adce <dir_find+0x134>
 800adc8:	2304      	movs	r3, #4
 800adca:	77fb      	strb	r3, [r7, #31]
 800adcc:	e08a      	b.n	800aee4 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800add2:	330b      	adds	r3, #11
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800adda:	72fb      	strb	r3, [r7, #11]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	7afa      	ldrb	r2, [r7, #11]
 800ade0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ade2:	7fbb      	ldrb	r3, [r7, #30]
 800ade4:	2be5      	cmp	r3, #229	@ 0xe5
 800ade6:	d007      	beq.n	800adf8 <dir_find+0x15e>
 800ade8:	7afb      	ldrb	r3, [r7, #11]
 800adea:	f003 0308 	and.w	r3, r3, #8
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d009      	beq.n	800ae06 <dir_find+0x16c>
 800adf2:	7afb      	ldrb	r3, [r7, #11]
 800adf4:	2b0f      	cmp	r3, #15
 800adf6:	d006      	beq.n	800ae06 <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800adf8:	23ff      	movs	r3, #255	@ 0xff
 800adfa:	777b      	strb	r3, [r7, #29]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f04f 32ff 	mov.w	r2, #4294967295
 800ae02:	64da      	str	r2, [r3, #76]	@ 0x4c
 800ae04:	e05e      	b.n	800aec4 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ae06:	7afb      	ldrb	r3, [r7, #11]
 800ae08:	2b0f      	cmp	r3, #15
 800ae0a:	d136      	bne.n	800ae7a <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800ae12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d154      	bne.n	800aec4 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ae1a:	7fbb      	ldrb	r3, [r7, #30]
 800ae1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d00d      	beq.n	800ae40 <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae28:	7b5b      	ldrb	r3, [r3, #13]
 800ae2a:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ae2c:	7fbb      	ldrb	r3, [r7, #30]
 800ae2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae32:	77bb      	strb	r3, [r7, #30]
 800ae34:	7fbb      	ldrb	r3, [r7, #30]
 800ae36:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ae40:	7fba      	ldrb	r2, [r7, #30]
 800ae42:	7f7b      	ldrb	r3, [r7, #29]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d115      	bne.n	800ae74 <dir_find+0x1da>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae4c:	330d      	adds	r3, #13
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	7f3a      	ldrb	r2, [r7, #28]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d10e      	bne.n	800ae74 <dir_find+0x1da>
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	691a      	ldr	r2, [r3, #16]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae5e:	4619      	mov	r1, r3
 800ae60:	4610      	mov	r0, r2
 800ae62:	f7ff fa4b 	bl	800a2fc <cmp_lfn>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d003      	beq.n	800ae74 <dir_find+0x1da>
 800ae6c:	7f7b      	ldrb	r3, [r7, #29]
 800ae6e:	3b01      	subs	r3, #1
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	e000      	b.n	800ae76 <dir_find+0x1dc>
 800ae74:	23ff      	movs	r3, #255	@ 0xff
 800ae76:	777b      	strb	r3, [r7, #29]
 800ae78:	e024      	b.n	800aec4 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ae7a:	7f7b      	ldrb	r3, [r7, #29]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d109      	bne.n	800ae94 <dir_find+0x1fa>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7ff fc03 	bl	800a690 <sum_sfn>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	7f3b      	ldrb	r3, [r7, #28]
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d024      	beq.n	800aede <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800ae9a:	f003 0301 	and.w	r3, r3, #1
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d10a      	bne.n	800aeb8 <dir_find+0x21e>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	3340      	adds	r3, #64	@ 0x40
 800aeaa:	220b      	movs	r2, #11
 800aeac:	4619      	mov	r1, r3
 800aeae:	f7fd ff60 	bl	8008d72 <mem_cmp>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d014      	beq.n	800aee2 <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800aeb8:	23ff      	movs	r3, #255	@ 0xff
 800aeba:	777b      	strb	r3, [r7, #29]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f04f 32ff 	mov.w	r2, #4294967295
 800aec2:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800aec4:	2100      	movs	r1, #0
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f7ff f897 	bl	8009ffa <dir_next>
 800aecc:	4603      	mov	r3, r0
 800aece:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800aed0:	7ffb      	ldrb	r3, [r7, #31]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	f43f af65 	beq.w	800ada2 <dir_find+0x108>
 800aed8:	e004      	b.n	800aee4 <dir_find+0x24a>
		if (res != FR_OK) break;
 800aeda:	bf00      	nop
 800aedc:	e002      	b.n	800aee4 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800aede:	bf00      	nop
 800aee0:	e000      	b.n	800aee4 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800aee2:	bf00      	nop

	return res;
 800aee4:	7ffb      	ldrb	r3, [r7, #31]
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3724      	adds	r7, #36	@ 0x24
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd90      	pop	{r4, r7, pc}
	...

0800aef0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aef0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800aef4:	b0a0      	sub	sp, #128	@ 0x80
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800af06:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d001      	beq.n	800af12 <dir_register+0x22>
 800af0e:	2306      	movs	r3, #6
 800af10:	e192      	b.n	800b238 <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800af12:	2300      	movs	r3, #0
 800af14:	677b      	str	r3, [r7, #116]	@ 0x74
 800af16:	e002      	b.n	800af1e <dir_register+0x2e>
 800af18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af1a:	3301      	adds	r3, #1
 800af1c:	677b      	str	r3, [r7, #116]	@ 0x74
 800af1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af20:	691a      	ldr	r2, [r3, #16]
 800af22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af24:	005b      	lsls	r3, r3, #1
 800af26:	4413      	add	r3, r2
 800af28:	881b      	ldrh	r3, [r3, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d1f4      	bne.n	800af18 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800af2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	2b04      	cmp	r3, #4
 800af34:	f040 80a3 	bne.w	800b07e <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800af38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af3a:	330e      	adds	r3, #14
 800af3c:	4aa4      	ldr	r2, [pc, #656]	@ (800b1d0 <dir_register+0x2e0>)
 800af3e:	fba2 2303 	umull	r2, r3, r2, r3
 800af42:	08db      	lsrs	r3, r3, #3
 800af44:	3302      	adds	r3, #2
 800af46:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800af48:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f7ff f93b 	bl	800a1c6 <dir_alloc>
 800af50:	4603      	mov	r3, r0
 800af52:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 800af56:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d002      	beq.n	800af64 <dir_register+0x74>
 800af5e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800af62:	e169      	b.n	800b238 <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800af6a:	3b01      	subs	r3, #1
 800af6c:	015b      	lsls	r3, r3, #5
 800af6e:	1ad2      	subs	r2, r2, r3
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d076      	beq.n	800b06a <dir_register+0x17a>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	79db      	ldrb	r3, [r3, #7]
 800af80:	f003 0304 	and.w	r3, r3, #4
 800af84:	2b00      	cmp	r3, #0
 800af86:	d070      	beq.n	800b06a <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800af8e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800af90:	8949      	ldrh	r1, [r1, #10]
 800af92:	4608      	mov	r0, r1
 800af94:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800af96:	8989      	ldrh	r1, [r1, #12]
 800af98:	fb00 f101 	mul.w	r1, r0, r1
 800af9c:	2000      	movs	r0, #0
 800af9e:	460c      	mov	r4, r1
 800afa0:	4605      	mov	r5, r0
 800afa2:	eb12 0804 	adds.w	r8, r2, r4
 800afa6:	eb43 0905 	adc.w	r9, r3, r5
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7fe fd2c 	bl	8009a10 <fill_first_frag>
 800afb8:	4603      	mov	r3, r0
 800afba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800afbe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d002      	beq.n	800afcc <dir_register+0xdc>
 800afc6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800afca:	e135      	b.n	800b238 <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afd2:	f04f 32ff 	mov.w	r2, #4294967295
 800afd6:	4619      	mov	r1, r3
 800afd8:	f7fe fd49 	bl	8009a6e <fill_last_frag>
 800afdc:	4603      	mov	r3, r0
 800afde:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800afe2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d002      	beq.n	800aff0 <dir_register+0x100>
 800afea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800afee:	e123      	b.n	800b238 <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	f107 0308 	add.w	r3, r7, #8
 800aff6:	4611      	mov	r1, r2
 800aff8:	4618      	mov	r0, r3
 800affa:	f7ff fc8f 	bl	800a91c <load_obj_dir>
 800affe:	4603      	mov	r3, r0
 800b000:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800b004:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d002      	beq.n	800b012 <dir_register+0x122>
 800b00c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b010:	e112      	b.n	800b238 <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800b012:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b014:	695b      	ldr	r3, [r3, #20]
 800b016:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b020:	4608      	mov	r0, r1
 800b022:	f7fd fde2 	bl	8008bea <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800b026:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b028:	695b      	ldr	r3, [r3, #20]
 800b02a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b034:	4608      	mov	r0, r1
 800b036:	f7fd fdd8 	bl	8008bea <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	79da      	ldrb	r2, [r3, #7]
 800b03e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b040:	695b      	ldr	r3, [r3, #20]
 800b042:	3321      	adds	r3, #33	@ 0x21
 800b044:	f042 0201 	orr.w	r2, r2, #1
 800b048:	b2d2      	uxtb	r2, r2
 800b04a:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800b04c:	f107 0308 	add.w	r3, r7, #8
 800b050:	4618      	mov	r0, r3
 800b052:	f7ff fc99 	bl	800a988 <store_xdir>
 800b056:	4603      	mov	r3, r0
 800b058:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800b05c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b060:	2b00      	cmp	r3, #0
 800b062:	d002      	beq.n	800b06a <dir_register+0x17a>
 800b064:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b068:	e0e6      	b.n	800b238 <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800b06a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b06c:	695a      	ldr	r2, [r3, #20]
 800b06e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b070:	691b      	ldr	r3, [r3, #16]
 800b072:	4619      	mov	r1, r3
 800b074:	4610      	mov	r0, r2
 800b076:	f7ff fce2 	bl	800aa3e <create_xdir>
		return FR_OK;
 800b07a:	2300      	movs	r3, #0
 800b07c:	e0dc      	b.n	800b238 <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800b084:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800b088:	220c      	movs	r2, #12
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7fd fe35 	bl	8008cfa <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b090:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b094:	f003 0301 	and.w	r3, r3, #1
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d033      	beq.n	800b104 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2240      	movs	r2, #64	@ 0x40
 800b0a0:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b0a8:	e016      	b.n	800b0d8 <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800b0b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0b2:	691a      	ldr	r2, [r3, #16]
 800b0b4:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800b0b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b0ba:	f7ff fa5b 	bl	800a574 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f7ff fdeb 	bl	800ac9a <dir_find>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 800b0ca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d106      	bne.n	800b0e0 <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 800b0d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b0d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b0da:	2b63      	cmp	r3, #99	@ 0x63
 800b0dc:	d9e5      	bls.n	800b0aa <dir_register+0x1ba>
 800b0de:	e000      	b.n	800b0e2 <dir_register+0x1f2>
			if (res != FR_OK) break;
 800b0e0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b0e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b0e4:	2b64      	cmp	r3, #100	@ 0x64
 800b0e6:	d101      	bne.n	800b0ec <dir_register+0x1fc>
 800b0e8:	2307      	movs	r3, #7
 800b0ea:	e0a5      	b.n	800b238 <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b0ec:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b0f0:	2b04      	cmp	r3, #4
 800b0f2:	d002      	beq.n	800b0fa <dir_register+0x20a>
 800b0f4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b0f8:	e09e      	b.n	800b238 <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b0fa:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b104:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b108:	f003 0302 	and.w	r3, r3, #2
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d007      	beq.n	800b120 <dir_register+0x230>
 800b110:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b112:	330c      	adds	r3, #12
 800b114:	4a2f      	ldr	r2, [pc, #188]	@ (800b1d4 <dir_register+0x2e4>)
 800b116:	fba2 2303 	umull	r2, r3, r2, r3
 800b11a:	089b      	lsrs	r3, r3, #2
 800b11c:	3301      	adds	r3, #1
 800b11e:	e000      	b.n	800b122 <dir_register+0x232>
 800b120:	2301      	movs	r3, #1
 800b122:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b124:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f7ff f84d 	bl	800a1c6 <dir_alloc>
 800b12c:	4603      	mov	r3, r0
 800b12e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b132:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b136:	2b00      	cmp	r3, #0
 800b138:	d14f      	bne.n	800b1da <dir_register+0x2ea>
 800b13a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b13c:	3b01      	subs	r3, #1
 800b13e:	673b      	str	r3, [r7, #112]	@ 0x70
 800b140:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b142:	2b00      	cmp	r3, #0
 800b144:	d049      	beq.n	800b1da <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b14a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b14c:	015b      	lsls	r3, r3, #5
 800b14e:	1ad3      	subs	r3, r2, r3
 800b150:	4619      	mov	r1, r3
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f7fe febd 	bl	8009ed2 <dir_sdi>
 800b158:	4603      	mov	r3, r0
 800b15a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800b15e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b162:	2b00      	cmp	r3, #0
 800b164:	d139      	bne.n	800b1da <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	3340      	adds	r3, #64	@ 0x40
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7ff fa90 	bl	800a690 <sum_sfn>
 800b170:	4603      	mov	r3, r0
 800b172:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b17a:	4619      	mov	r1, r3
 800b17c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b17e:	f7fe f81b 	bl	80091b8 <move_window>
 800b182:	4603      	mov	r3, r0
 800b184:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 800b188:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d123      	bne.n	800b1d8 <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b190:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b192:	6918      	ldr	r0, [r3, #16]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800b198:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b19a:	b2da      	uxtb	r2, r3
 800b19c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800b1a0:	f7ff f980 	bl	800a4a4 <put_lfn>
				fs->wflag = 1;
 800b1a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f7fe ff24 	bl	8009ffa <dir_next>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 800b1b8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d10c      	bne.n	800b1da <dir_register+0x2ea>
 800b1c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b1c2:	3b01      	subs	r3, #1
 800b1c4:	673b      	str	r3, [r7, #112]	@ 0x70
 800b1c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d1d4      	bne.n	800b176 <dir_register+0x286>
 800b1cc:	e005      	b.n	800b1da <dir_register+0x2ea>
 800b1ce:	bf00      	nop
 800b1d0:	88888889 	.word	0x88888889
 800b1d4:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800b1d8:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b1da:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d128      	bne.n	800b234 <dir_register+0x344>
		res = move_window(fs, dp->sect);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b1ea:	f7fd ffe5 	bl	80091b8 <move_window>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800b1f4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d11b      	bne.n	800b234 <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b200:	2220      	movs	r2, #32
 800b202:	2100      	movs	r1, #0
 800b204:	4618      	mov	r0, r3
 800b206:	f7fd fd99 	bl	8008d3c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	3340      	adds	r3, #64	@ 0x40
 800b212:	220b      	movs	r2, #11
 800b214:	4619      	mov	r1, r3
 800b216:	f7fd fd70 	bl	8008cfa <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b224:	330c      	adds	r3, #12
 800b226:	f002 0218 	and.w	r2, r2, #24
 800b22a:	b2d2      	uxtb	r2, r2
 800b22c:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b22e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b230:	2201      	movs	r2, #1
 800b232:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b234:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3780      	adds	r7, #128	@ 0x80
 800b23c:	46bd      	mov	sp, r7
 800b23e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b242:	bf00      	nop

0800b244 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b086      	sub	sp, #24
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b256:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b260:	d007      	beq.n	800b272 <dir_remove+0x2e>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b266:	4619      	mov	r1, r3
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f7fe fe32 	bl	8009ed2 <dir_sdi>
 800b26e:	4603      	mov	r3, r0
 800b270:	e000      	b.n	800b274 <dir_remove+0x30>
 800b272:	2300      	movs	r3, #0
 800b274:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b276:	7dfb      	ldrb	r3, [r7, #23]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d136      	bne.n	800b2ea <dir_remove+0xa6>
		do {
			res = move_window(fs, dp->sect);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b280:	4619      	mov	r1, r3
 800b282:	6938      	ldr	r0, [r7, #16]
 800b284:	f7fd ff98 	bl	80091b8 <move_window>
 800b288:	4603      	mov	r3, r0
 800b28a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b28c:	7dfb      	ldrb	r3, [r7, #23]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d123      	bne.n	800b2da <dir_remove+0x96>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	2b04      	cmp	r3, #4
 800b298:	d109      	bne.n	800b2ae <dir_remove+0x6a>
				dp->dir[XDIR_Type] &= 0x7F;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b29e:	781a      	ldrb	r2, [r3, #0]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b2a8:	b2d2      	uxtb	r2, r2
 800b2aa:	701a      	strb	r2, [r3, #0]
 800b2ac:	e003      	b.n	800b2b6 <dir_remove+0x72>
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2b2:	22e5      	movs	r2, #229	@ 0xe5
 800b2b4:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d90b      	bls.n	800b2de <dir_remove+0x9a>
			res = dir_next(dp, 0);	/* Next entry */
 800b2c6:	2100      	movs	r1, #0
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f7fe fe96 	bl	8009ffa <dir_next>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800b2d2:	7dfb      	ldrb	r3, [r7, #23]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d0d1      	beq.n	800b27c <dir_remove+0x38>
 800b2d8:	e002      	b.n	800b2e0 <dir_remove+0x9c>
			if (res != FR_OK) break;
 800b2da:	bf00      	nop
 800b2dc:	e000      	b.n	800b2e0 <dir_remove+0x9c>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800b2de:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800b2e0:	7dfb      	ldrb	r3, [r7, #23]
 800b2e2:	2b04      	cmp	r3, #4
 800b2e4:	d101      	bne.n	800b2ea <dir_remove+0xa6>
 800b2e6:	2302      	movs	r3, #2
 800b2e8:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800b2ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3718      	adds	r7, #24
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b08a      	sub	sp, #40	@ 0x28
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	613b      	str	r3, [r7, #16]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	691b      	ldr	r3, [r3, #16]
 800b30a:	60fb      	str	r3, [r7, #12]
 800b30c:	2300      	movs	r3, #0
 800b30e:	617b      	str	r3, [r7, #20]
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b314:	69bb      	ldr	r3, [r7, #24]
 800b316:	1c5a      	adds	r2, r3, #1
 800b318:	61ba      	str	r2, [r7, #24]
 800b31a:	693a      	ldr	r2, [r7, #16]
 800b31c:	4413      	add	r3, r2
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b322:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b324:	2b1f      	cmp	r3, #31
 800b326:	d940      	bls.n	800b3aa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b328:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b32a:	2b2f      	cmp	r3, #47	@ 0x2f
 800b32c:	d006      	beq.n	800b33c <create_name+0x48>
 800b32e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b330:	2b5c      	cmp	r3, #92	@ 0x5c
 800b332:	d110      	bne.n	800b356 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b334:	e002      	b.n	800b33c <create_name+0x48>
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	3301      	adds	r3, #1
 800b33a:	61bb      	str	r3, [r7, #24]
 800b33c:	693a      	ldr	r2, [r7, #16]
 800b33e:	69bb      	ldr	r3, [r7, #24]
 800b340:	4413      	add	r3, r2
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	2b2f      	cmp	r3, #47	@ 0x2f
 800b346:	d0f6      	beq.n	800b336 <create_name+0x42>
 800b348:	693a      	ldr	r2, [r7, #16]
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	4413      	add	r3, r2
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	2b5c      	cmp	r3, #92	@ 0x5c
 800b352:	d0f0      	beq.n	800b336 <create_name+0x42>
			break;
 800b354:	e02a      	b.n	800b3ac <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	2bfe      	cmp	r3, #254	@ 0xfe
 800b35a:	d901      	bls.n	800b360 <create_name+0x6c>
 800b35c:	2306      	movs	r3, #6
 800b35e:	e17d      	b.n	800b65c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b360:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b362:	b2db      	uxtb	r3, r3
 800b364:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b366:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b368:	2101      	movs	r1, #1
 800b36a:	4618      	mov	r0, r3
 800b36c:	f002 fcf0 	bl	800dd50 <ff_convert>
 800b370:	4603      	mov	r3, r0
 800b372:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b374:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b376:	2b00      	cmp	r3, #0
 800b378:	d101      	bne.n	800b37e <create_name+0x8a>
 800b37a:	2306      	movs	r3, #6
 800b37c:	e16e      	b.n	800b65c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b37e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b380:	2b7f      	cmp	r3, #127	@ 0x7f
 800b382:	d809      	bhi.n	800b398 <create_name+0xa4>
 800b384:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b386:	4619      	mov	r1, r3
 800b388:	488d      	ldr	r0, [pc, #564]	@ (800b5c0 <create_name+0x2cc>)
 800b38a:	f7fd fd19 	bl	8008dc0 <chk_chr>
 800b38e:	4603      	mov	r3, r0
 800b390:	2b00      	cmp	r3, #0
 800b392:	d001      	beq.n	800b398 <create_name+0xa4>
 800b394:	2306      	movs	r3, #6
 800b396:	e161      	b.n	800b65c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	1c5a      	adds	r2, r3, #1
 800b39c:	617a      	str	r2, [r7, #20]
 800b39e:	005b      	lsls	r3, r3, #1
 800b3a0:	68fa      	ldr	r2, [r7, #12]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b3a6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b3a8:	e7b4      	b.n	800b314 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b3aa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b3ac:	693a      	ldr	r2, [r7, #16]
 800b3ae:	69bb      	ldr	r3, [r7, #24]
 800b3b0:	441a      	add	r2, r3
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b3b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3b8:	2b1f      	cmp	r3, #31
 800b3ba:	d801      	bhi.n	800b3c0 <create_name+0xcc>
 800b3bc:	2304      	movs	r3, #4
 800b3be:	e000      	b.n	800b3c2 <create_name+0xce>
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b3c6:	e011      	b.n	800b3ec <create_name+0xf8>
		w = lfn[di - 1];
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	005b      	lsls	r3, r3, #1
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	881b      	ldrh	r3, [r3, #0]
 800b3d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800b3da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3dc:	2b20      	cmp	r3, #32
 800b3de:	d002      	beq.n	800b3e6 <create_name+0xf2>
 800b3e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b3e4:	d106      	bne.n	800b3f4 <create_name+0x100>
		di--;
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	3b01      	subs	r3, #1
 800b3ea:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1ea      	bne.n	800b3c8 <create_name+0xd4>
 800b3f2:	e000      	b.n	800b3f6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b3f4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	005b      	lsls	r3, r3, #1
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	2200      	movs	r2, #0
 800b400:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d101      	bne.n	800b40c <create_name+0x118>
 800b408:	2306      	movs	r3, #6
 800b40a:	e127      	b.n	800b65c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	3340      	adds	r3, #64	@ 0x40
 800b410:	220b      	movs	r2, #11
 800b412:	2120      	movs	r1, #32
 800b414:	4618      	mov	r0, r3
 800b416:	f7fd fc91 	bl	8008d3c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b41a:	2300      	movs	r3, #0
 800b41c:	61bb      	str	r3, [r7, #24]
 800b41e:	e002      	b.n	800b426 <create_name+0x132>
 800b420:	69bb      	ldr	r3, [r7, #24]
 800b422:	3301      	adds	r3, #1
 800b424:	61bb      	str	r3, [r7, #24]
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	005b      	lsls	r3, r3, #1
 800b42a:	68fa      	ldr	r2, [r7, #12]
 800b42c:	4413      	add	r3, r2
 800b42e:	881b      	ldrh	r3, [r3, #0]
 800b430:	2b20      	cmp	r3, #32
 800b432:	d0f5      	beq.n	800b420 <create_name+0x12c>
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	005b      	lsls	r3, r3, #1
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	4413      	add	r3, r2
 800b43c:	881b      	ldrh	r3, [r3, #0]
 800b43e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b440:	d0ee      	beq.n	800b420 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d009      	beq.n	800b45c <create_name+0x168>
 800b448:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b44c:	f043 0303 	orr.w	r3, r3, #3
 800b450:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b454:	e002      	b.n	800b45c <create_name+0x168>
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	3b01      	subs	r3, #1
 800b45a:	617b      	str	r3, [r7, #20]
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d009      	beq.n	800b476 <create_name+0x182>
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b468:	3b01      	subs	r3, #1
 800b46a:	005b      	lsls	r3, r3, #1
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	4413      	add	r3, r2
 800b470:	881b      	ldrh	r3, [r3, #0]
 800b472:	2b2e      	cmp	r3, #46	@ 0x2e
 800b474:	d1ef      	bne.n	800b456 <create_name+0x162>

	i = b = 0; ni = 8;
 800b476:	2300      	movs	r3, #0
 800b478:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b47c:	2300      	movs	r3, #0
 800b47e:	623b      	str	r3, [r7, #32]
 800b480:	2308      	movs	r3, #8
 800b482:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	1c5a      	adds	r2, r3, #1
 800b488:	61ba      	str	r2, [r7, #24]
 800b48a:	005b      	lsls	r3, r3, #1
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	4413      	add	r3, r2
 800b490:	881b      	ldrh	r3, [r3, #0]
 800b492:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b494:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b496:	2b00      	cmp	r3, #0
 800b498:	f000 8090 	beq.w	800b5bc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b49c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b49e:	2b20      	cmp	r3, #32
 800b4a0:	d006      	beq.n	800b4b0 <create_name+0x1bc>
 800b4a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4a6:	d10a      	bne.n	800b4be <create_name+0x1ca>
 800b4a8:	69ba      	ldr	r2, [r7, #24]
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d006      	beq.n	800b4be <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b4b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4b4:	f043 0303 	orr.w	r3, r3, #3
 800b4b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b4bc:	e07d      	b.n	800b5ba <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b4be:	6a3a      	ldr	r2, [r7, #32]
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d203      	bcs.n	800b4ce <create_name+0x1da>
 800b4c6:	69ba      	ldr	r2, [r7, #24]
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d123      	bne.n	800b516 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b4ce:	69fb      	ldr	r3, [r7, #28]
 800b4d0:	2b0b      	cmp	r3, #11
 800b4d2:	d106      	bne.n	800b4e2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b4d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4d8:	f043 0303 	orr.w	r3, r3, #3
 800b4dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b4e0:	e075      	b.n	800b5ce <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b4e2:	69ba      	ldr	r2, [r7, #24]
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d005      	beq.n	800b4f6 <create_name+0x202>
 800b4ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4ee:	f043 0303 	orr.w	r3, r3, #3
 800b4f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800b4f6:	69ba      	ldr	r2, [r7, #24]
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d866      	bhi.n	800b5cc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	61bb      	str	r3, [r7, #24]
 800b502:	2308      	movs	r3, #8
 800b504:	623b      	str	r3, [r7, #32]
 800b506:	230b      	movs	r3, #11
 800b508:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b50a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b50e:	009b      	lsls	r3, r3, #2
 800b510:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b514:	e051      	b.n	800b5ba <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b516:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b518:	2b7f      	cmp	r3, #127	@ 0x7f
 800b51a:	d914      	bls.n	800b546 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b51c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b51e:	2100      	movs	r1, #0
 800b520:	4618      	mov	r0, r3
 800b522:	f002 fc15 	bl	800dd50 <ff_convert>
 800b526:	4603      	mov	r3, r0
 800b528:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b52a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d004      	beq.n	800b53a <create_name+0x246>
 800b530:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b532:	3b80      	subs	r3, #128	@ 0x80
 800b534:	4a23      	ldr	r2, [pc, #140]	@ (800b5c4 <create_name+0x2d0>)
 800b536:	5cd3      	ldrb	r3, [r2, r3]
 800b538:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b53a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b53e:	f043 0302 	orr.w	r3, r3, #2
 800b542:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b546:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d007      	beq.n	800b55c <create_name+0x268>
 800b54c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b54e:	4619      	mov	r1, r3
 800b550:	481d      	ldr	r0, [pc, #116]	@ (800b5c8 <create_name+0x2d4>)
 800b552:	f7fd fc35 	bl	8008dc0 <chk_chr>
 800b556:	4603      	mov	r3, r0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d008      	beq.n	800b56e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b55c:	235f      	movs	r3, #95	@ 0x5f
 800b55e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b560:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b564:	f043 0303 	orr.w	r3, r3, #3
 800b568:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b56c:	e01b      	b.n	800b5a6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b56e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b570:	2b40      	cmp	r3, #64	@ 0x40
 800b572:	d909      	bls.n	800b588 <create_name+0x294>
 800b574:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b576:	2b5a      	cmp	r3, #90	@ 0x5a
 800b578:	d806      	bhi.n	800b588 <create_name+0x294>
					b |= 2;
 800b57a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b57e:	f043 0302 	orr.w	r3, r3, #2
 800b582:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b586:	e00e      	b.n	800b5a6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b588:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b58a:	2b60      	cmp	r3, #96	@ 0x60
 800b58c:	d90b      	bls.n	800b5a6 <create_name+0x2b2>
 800b58e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b590:	2b7a      	cmp	r3, #122	@ 0x7a
 800b592:	d808      	bhi.n	800b5a6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b594:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b598:	f043 0301 	orr.w	r3, r3, #1
 800b59c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b5a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b5a2:	3b20      	subs	r3, #32
 800b5a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b5a6:	6a3b      	ldr	r3, [r7, #32]
 800b5a8:	1c5a      	adds	r2, r3, #1
 800b5aa:	623a      	str	r2, [r7, #32]
 800b5ac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b5ae:	b2d1      	uxtb	r1, r2
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	4413      	add	r3, r2
 800b5b4:	460a      	mov	r2, r1
 800b5b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 800b5ba:	e763      	b.n	800b484 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b5bc:	bf00      	nop
 800b5be:	e006      	b.n	800b5ce <create_name+0x2da>
 800b5c0:	08012ee4 	.word	0x08012ee4
 800b5c4:	08016a3c 	.word	0x08016a3c
 800b5c8:	08012ef0 	.word	0x08012ef0
			if (si > di) break;			/* No extension */
 800b5cc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b5d4:	2be5      	cmp	r3, #229	@ 0xe5
 800b5d6:	d103      	bne.n	800b5e0 <create_name+0x2ec>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2205      	movs	r2, #5
 800b5dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 800b5e0:	69fb      	ldr	r3, [r7, #28]
 800b5e2:	2b08      	cmp	r3, #8
 800b5e4:	d104      	bne.n	800b5f0 <create_name+0x2fc>
 800b5e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b5f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b5f4:	f003 030c 	and.w	r3, r3, #12
 800b5f8:	2b0c      	cmp	r3, #12
 800b5fa:	d005      	beq.n	800b608 <create_name+0x314>
 800b5fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b600:	f003 0303 	and.w	r3, r3, #3
 800b604:	2b03      	cmp	r3, #3
 800b606:	d105      	bne.n	800b614 <create_name+0x320>
 800b608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b60c:	f043 0302 	orr.w	r3, r3, #2
 800b610:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b614:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b618:	f003 0302 	and.w	r3, r3, #2
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d117      	bne.n	800b650 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b620:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b624:	f003 0303 	and.w	r3, r3, #3
 800b628:	2b01      	cmp	r3, #1
 800b62a:	d105      	bne.n	800b638 <create_name+0x344>
 800b62c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b630:	f043 0310 	orr.w	r3, r3, #16
 800b634:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b638:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b63c:	f003 030c 	and.w	r3, r3, #12
 800b640:	2b04      	cmp	r3, #4
 800b642:	d105      	bne.n	800b650 <create_name+0x35c>
 800b644:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b648:	f043 0308 	orr.w	r3, r3, #8
 800b64c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b656:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800b65a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3728      	adds	r7, #40	@ 0x28
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b086      	sub	sp, #24
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b678:	e002      	b.n	800b680 <follow_path+0x1c>
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	3301      	adds	r3, #1
 800b67e:	603b      	str	r3, [r7, #0]
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	2b2f      	cmp	r3, #47	@ 0x2f
 800b686:	d0f8      	beq.n	800b67a <follow_path+0x16>
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	2b5c      	cmp	r3, #92	@ 0x5c
 800b68e:	d0f4      	beq.n	800b67a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	2200      	movs	r2, #0
 800b694:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	2200      	movs	r2, #0
 800b69a:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	781b      	ldrb	r3, [r3, #0]
 800b6a0:	2b1f      	cmp	r3, #31
 800b6a2:	d80a      	bhi.n	800b6ba <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2280      	movs	r2, #128	@ 0x80
 800b6a8:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800b6ac:	2100      	movs	r1, #0
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f7fe fc0f 	bl	8009ed2 <dir_sdi>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	75fb      	strb	r3, [r7, #23]
 800b6b8:	e07d      	b.n	800b7b6 <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b6ba:	463b      	mov	r3, r7
 800b6bc:	4619      	mov	r1, r3
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f7ff fe18 	bl	800b2f4 <create_name>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b6c8:	7dfb      	ldrb	r3, [r7, #23]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d16e      	bne.n	800b7ac <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f7ff fae3 	bl	800ac9a <dir_find>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800b6de:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b6e0:	7dfb      	ldrb	r3, [r7, #23]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d00a      	beq.n	800b6fc <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b6e6:	7dfb      	ldrb	r3, [r7, #23]
 800b6e8:	2b04      	cmp	r3, #4
 800b6ea:	d161      	bne.n	800b7b0 <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b6ec:	7afb      	ldrb	r3, [r7, #11]
 800b6ee:	f003 0304 	and.w	r3, r3, #4
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d15c      	bne.n	800b7b0 <follow_path+0x14c>
 800b6f6:	2305      	movs	r3, #5
 800b6f8:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b6fa:	e059      	b.n	800b7b0 <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b6fc:	7afb      	ldrb	r3, [r7, #11]
 800b6fe:	f003 0304 	and.w	r3, r3, #4
 800b702:	2b00      	cmp	r3, #0
 800b704:	d156      	bne.n	800b7b4 <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	799b      	ldrb	r3, [r3, #6]
 800b70a:	f003 0310 	and.w	r3, r3, #16
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d102      	bne.n	800b718 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800b712:	2305      	movs	r3, #5
 800b714:	75fb      	strb	r3, [r7, #23]
 800b716:	e04e      	b.n	800b7b6 <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	2b04      	cmp	r3, #4
 800b71e:	d130      	bne.n	800b782 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	689a      	ldr	r2, [r3, #8]
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b72e:	4613      	mov	r3, r2
 800b730:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b734:	693a      	ldr	r2, [r7, #16]
 800b736:	79d2      	ldrb	r2, [r2, #7]
 800b738:	431a      	orrs	r2, r3
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	695b      	ldr	r3, [r3, #20]
 800b74a:	3334      	adds	r3, #52	@ 0x34
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7fd f907 	bl	8008960 <ld_dword>
 800b752:	4602      	mov	r2, r0
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	695b      	ldr	r3, [r3, #20]
 800b75c:	3321      	adds	r3, #33	@ 0x21
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	f003 0302 	and.w	r3, r3, #2
 800b764:	b2da      	uxtb	r2, r3
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	695b      	ldr	r3, [r3, #20]
 800b76e:	3338      	adds	r3, #56	@ 0x38
 800b770:	4618      	mov	r0, r3
 800b772:	f7fd f918 	bl	80089a6 <ld_qword>
 800b776:	4602      	mov	r2, r0
 800b778:	460b      	mov	r3, r1
 800b77a:	6939      	ldr	r1, [r7, #16]
 800b77c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800b780:	e79b      	b.n	800b6ba <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	8992      	ldrh	r2, [r2, #12]
 800b790:	fbb3 f0f2 	udiv	r0, r3, r2
 800b794:	fb00 f202 	mul.w	r2, r0, r2
 800b798:	1a9b      	subs	r3, r3, r2
 800b79a:	440b      	add	r3, r1
 800b79c:	4619      	mov	r1, r3
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	f7fe fd6d 	bl	800a27e <ld_clust>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b7aa:	e786      	b.n	800b6ba <follow_path+0x56>
			if (res != FR_OK) break;
 800b7ac:	bf00      	nop
 800b7ae:	e002      	b.n	800b7b6 <follow_path+0x152>
				break;
 800b7b0:	bf00      	nop
 800b7b2:	e000      	b.n	800b7b6 <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b7b4:	bf00      	nop
			}
		}
	}

	return res;
 800b7b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3718      	adds	r7, #24
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b087      	sub	sp, #28
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b7c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7cc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d031      	beq.n	800b83a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	617b      	str	r3, [r7, #20]
 800b7dc:	e002      	b.n	800b7e4 <get_ldnumber+0x24>
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	617b      	str	r3, [r7, #20]
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	2b1f      	cmp	r3, #31
 800b7ea:	d903      	bls.n	800b7f4 <get_ldnumber+0x34>
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	2b3a      	cmp	r3, #58	@ 0x3a
 800b7f2:	d1f4      	bne.n	800b7de <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	2b3a      	cmp	r3, #58	@ 0x3a
 800b7fa:	d11c      	bne.n	800b836 <get_ldnumber+0x76>
			tp = *path;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	1c5a      	adds	r2, r3, #1
 800b806:	60fa      	str	r2, [r7, #12]
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	3b30      	subs	r3, #48	@ 0x30
 800b80c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	2b09      	cmp	r3, #9
 800b812:	d80e      	bhi.n	800b832 <get_ldnumber+0x72>
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	429a      	cmp	r2, r3
 800b81a:	d10a      	bne.n	800b832 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d107      	bne.n	800b832 <get_ldnumber+0x72>
					vol = (int)i;
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	3301      	adds	r3, #1
 800b82a:	617b      	str	r3, [r7, #20]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	697a      	ldr	r2, [r7, #20]
 800b830:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	e002      	b.n	800b83c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b836:	2300      	movs	r3, #0
 800b838:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b83a:	693b      	ldr	r3, [r7, #16]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	371c      	adds	r7, #28
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2200      	movs	r2, #0
 800b856:	70da      	strb	r2, [r3, #3]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f04f 32ff 	mov.w	r2, #4294967295
 800b85e:	63da      	str	r2, [r3, #60]	@ 0x3c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b860:	6839      	ldr	r1, [r7, #0]
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f7fd fca8 	bl	80091b8 <move_window>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d001      	beq.n	800b872 <check_fs+0x2a>
 800b86e:	2304      	movs	r3, #4
 800b870:	e044      	b.n	800b8fc <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	3340      	adds	r3, #64	@ 0x40
 800b876:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7fd f858 	bl	8008930 <ld_word>
 800b880:	4603      	mov	r3, r0
 800b882:	461a      	mov	r2, r3
 800b884:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b888:	429a      	cmp	r2, r3
 800b88a:	d001      	beq.n	800b890 <check_fs+0x48>
 800b88c:	2303      	movs	r3, #3
 800b88e:	e035      	b.n	800b8fc <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b896:	2be9      	cmp	r3, #233	@ 0xe9
 800b898:	d009      	beq.n	800b8ae <check_fs+0x66>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b8a0:	2beb      	cmp	r3, #235	@ 0xeb
 800b8a2:	d11e      	bne.n	800b8e2 <check_fs+0x9a>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b8aa:	2b90      	cmp	r3, #144	@ 0x90
 800b8ac:	d119      	bne.n	800b8e2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	3340      	adds	r3, #64	@ 0x40
 800b8b2:	3336      	adds	r3, #54	@ 0x36
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f7fd f853 	bl	8008960 <ld_dword>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b8c0:	4a10      	ldr	r2, [pc, #64]	@ (800b904 <check_fs+0xbc>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d101      	bne.n	800b8ca <check_fs+0x82>
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	e018      	b.n	800b8fc <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	3340      	adds	r3, #64	@ 0x40
 800b8ce:	3352      	adds	r3, #82	@ 0x52
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7fd f845 	bl	8008960 <ld_dword>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	4a0b      	ldr	r2, [pc, #44]	@ (800b908 <check_fs+0xc0>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d101      	bne.n	800b8e2 <check_fs+0x9a>
 800b8de:	2300      	movs	r3, #0
 800b8e0:	e00c      	b.n	800b8fc <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	3340      	adds	r3, #64	@ 0x40
 800b8e6:	220b      	movs	r2, #11
 800b8e8:	4908      	ldr	r1, [pc, #32]	@ (800b90c <check_fs+0xc4>)
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7fd fa41 	bl	8008d72 <mem_cmp>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d101      	bne.n	800b8fa <check_fs+0xb2>
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e000      	b.n	800b8fc <check_fs+0xb4>
#endif
	return 2;
 800b8fa:	2302      	movs	r3, #2
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3708      	adds	r7, #8
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}
 800b904:	00544146 	.word	0x00544146
 800b908:	33544146 	.word	0x33544146
 800b90c:	08012ef8 	.word	0x08012ef8

0800b910 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b914:	b09c      	sub	sp, #112	@ 0x70
 800b916:	af00      	add	r7, sp, #0
 800b918:	61f8      	str	r0, [r7, #28]
 800b91a:	61b9      	str	r1, [r7, #24]
 800b91c:	4613      	mov	r3, r2
 800b91e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	2200      	movs	r2, #0
 800b924:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b926:	69f8      	ldr	r0, [r7, #28]
 800b928:	f7ff ff4a 	bl	800b7c0 <get_ldnumber>
 800b92c:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800b92e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b930:	2b00      	cmp	r3, #0
 800b932:	da01      	bge.n	800b938 <find_volume+0x28>
 800b934:	230b      	movs	r3, #11
 800b936:	e378      	b.n	800c02a <find_volume+0x71a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b938:	4aa2      	ldr	r2, [pc, #648]	@ (800bbc4 <find_volume+0x2b4>)
 800b93a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b93c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b940:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b942:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b944:	2b00      	cmp	r3, #0
 800b946:	d101      	bne.n	800b94c <find_volume+0x3c>
 800b948:	230c      	movs	r3, #12
 800b94a:	e36e      	b.n	800c02a <find_volume+0x71a>

	ENTER_FF(fs);						/* Lock the volume */
 800b94c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800b94e:	f7fd fa52 	bl	8008df6 <lock_fs>
 800b952:	4603      	mov	r3, r0
 800b954:	2b00      	cmp	r3, #0
 800b956:	d101      	bne.n	800b95c <find_volume+0x4c>
 800b958:	230f      	movs	r3, #15
 800b95a:	e366      	b.n	800c02a <find_volume+0x71a>
	*rfs = fs;							/* Return pointer to the file system object */
 800b95c:	69bb      	ldr	r3, [r7, #24]
 800b95e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b960:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b962:	7dfb      	ldrb	r3, [r7, #23]
 800b964:	f023 0301 	bic.w	r3, r3, #1
 800b968:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b96a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d01a      	beq.n	800b9a8 <find_volume+0x98>
		stat = disk_status(fs->drv);
 800b972:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b974:	785b      	ldrb	r3, [r3, #1]
 800b976:	4618      	mov	r0, r3
 800b978:	f7fc ff3a 	bl	80087f0 <disk_status>
 800b97c:	4603      	mov	r3, r0
 800b97e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b982:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b986:	f003 0301 	and.w	r3, r3, #1
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d10c      	bne.n	800b9a8 <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b98e:	7dfb      	ldrb	r3, [r7, #23]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d007      	beq.n	800b9a4 <find_volume+0x94>
 800b994:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b998:	f003 0304 	and.w	r3, r3, #4
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d001      	beq.n	800b9a4 <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 800b9a0:	230a      	movs	r3, #10
 800b9a2:	e342      	b.n	800c02a <find_volume+0x71a>
			}
			return FR_OK;				/* The file system object is valid */
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	e340      	b.n	800c02a <find_volume+0x71a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b9a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b9ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9b0:	b2da      	uxtb	r2, r3
 800b9b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9b4:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b9b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9b8:	785b      	ldrb	r3, [r3, #1]
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7fc ff32 	bl	8008824 <disk_initialize>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b9c6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b9ca:	f003 0301 	and.w	r3, r3, #1
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d001      	beq.n	800b9d6 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b9d2:	2303      	movs	r3, #3
 800b9d4:	e329      	b.n	800c02a <find_volume+0x71a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b9d6:	7dfb      	ldrb	r3, [r7, #23]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d007      	beq.n	800b9ec <find_volume+0xdc>
 800b9dc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b9e0:	f003 0304 	and.w	r3, r3, #4
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d001      	beq.n	800b9ec <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800b9e8:	230a      	movs	r3, #10
 800b9ea:	e31e      	b.n	800c02a <find_volume+0x71a>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b9ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9ee:	7858      	ldrb	r0, [r3, #1]
 800b9f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9f2:	330c      	adds	r3, #12
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	2102      	movs	r1, #2
 800b9f8:	f7fc ff7c 	bl	80088f4 <disk_ioctl>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d001      	beq.n	800ba06 <find_volume+0xf6>
 800ba02:	2301      	movs	r3, #1
 800ba04:	e311      	b.n	800c02a <find_volume+0x71a>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ba06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba08:	899b      	ldrh	r3, [r3, #12]
 800ba0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba0e:	d80d      	bhi.n	800ba2c <find_volume+0x11c>
 800ba10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba12:	899b      	ldrh	r3, [r3, #12]
 800ba14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba18:	d308      	bcc.n	800ba2c <find_volume+0x11c>
 800ba1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba1c:	899b      	ldrh	r3, [r3, #12]
 800ba1e:	461a      	mov	r2, r3
 800ba20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba22:	899b      	ldrh	r3, [r3, #12]
 800ba24:	3b01      	subs	r3, #1
 800ba26:	4013      	ands	r3, r2
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d001      	beq.n	800ba30 <find_volume+0x120>
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	e2fc      	b.n	800c02a <find_volume+0x71a>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ba30:	2300      	movs	r3, #0
 800ba32:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ba34:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ba36:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ba38:	f7ff ff06 	bl	800b848 <check_fs>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ba42:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ba46:	2b02      	cmp	r3, #2
 800ba48:	d14d      	bne.n	800bae6 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ba4e:	e020      	b.n	800ba92 <find_volume+0x182>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ba50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba52:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800ba56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba58:	011b      	lsls	r3, r3, #4
 800ba5a:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ba5e:	4413      	add	r3, r2
 800ba60:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ba62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba64:	3304      	adds	r3, #4
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d006      	beq.n	800ba7a <find_volume+0x16a>
 800ba6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba6e:	3308      	adds	r3, #8
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7fc ff75 	bl	8008960 <ld_dword>
 800ba76:	4602      	mov	r2, r0
 800ba78:	e000      	b.n	800ba7c <find_volume+0x16c>
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	3360      	adds	r3, #96	@ 0x60
 800ba82:	f107 0110 	add.w	r1, r7, #16
 800ba86:	440b      	add	r3, r1
 800ba88:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ba8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba8e:	3301      	adds	r3, #1
 800ba90:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ba92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba94:	2b03      	cmp	r3, #3
 800ba96:	d9db      	bls.n	800ba50 <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ba98:	2300      	movs	r3, #0
 800ba9a:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 800ba9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d002      	beq.n	800baa8 <find_volume+0x198>
 800baa2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800baa4:	3b01      	subs	r3, #1
 800baa6:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800baa8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800baaa:	009b      	lsls	r3, r3, #2
 800baac:	3360      	adds	r3, #96	@ 0x60
 800baae:	f107 0210 	add.w	r2, r7, #16
 800bab2:	4413      	add	r3, r2
 800bab4:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800bab8:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800baba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800babc:	2b00      	cmp	r3, #0
 800babe:	d005      	beq.n	800bacc <find_volume+0x1bc>
 800bac0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bac2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bac4:	f7ff fec0 	bl	800b848 <check_fs>
 800bac8:	4603      	mov	r3, r0
 800baca:	e000      	b.n	800bace <find_volume+0x1be>
 800bacc:	2303      	movs	r3, #3
 800bace:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bad2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d905      	bls.n	800bae6 <find_volume+0x1d6>
 800bada:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800badc:	3301      	adds	r3, #1
 800bade:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bae0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bae2:	2b03      	cmp	r3, #3
 800bae4:	d9e0      	bls.n	800baa8 <find_volume+0x198>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bae6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800baea:	2b04      	cmp	r3, #4
 800baec:	d101      	bne.n	800baf2 <find_volume+0x1e2>
 800baee:	2301      	movs	r3, #1
 800baf0:	e29b      	b.n	800c02a <find_volume+0x71a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800baf2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d901      	bls.n	800bafe <find_volume+0x1ee>
 800bafa:	230d      	movs	r3, #13
 800bafc:	e295      	b.n	800c02a <find_volume+0x71a>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800bafe:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	f040 8100 	bne.w	800bd08 <find_volume+0x3f8>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800bb08:	230b      	movs	r3, #11
 800bb0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bb0c:	e002      	b.n	800bb14 <find_volume+0x204>
 800bb0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb10:	3301      	adds	r3, #1
 800bb12:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bb14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb16:	2b3f      	cmp	r3, #63	@ 0x3f
 800bb18:	d806      	bhi.n	800bb28 <find_volume+0x218>
 800bb1a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bb1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb1e:	4413      	add	r3, r2
 800bb20:	3340      	adds	r3, #64	@ 0x40
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d0f2      	beq.n	800bb0e <find_volume+0x1fe>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800bb28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb2a:	2b3f      	cmp	r3, #63	@ 0x3f
 800bb2c:	d801      	bhi.n	800bb32 <find_volume+0x222>
 800bb2e:	230d      	movs	r3, #13
 800bb30:	e27b      	b.n	800c02a <find_volume+0x71a>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800bb32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb34:	3340      	adds	r3, #64	@ 0x40
 800bb36:	3368      	adds	r3, #104	@ 0x68
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7fc fef9 	bl	8008930 <ld_word>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb44:	d001      	beq.n	800bb4a <find_volume+0x23a>
 800bb46:	230d      	movs	r3, #13
 800bb48:	e26f      	b.n	800c02a <find_volume+0x71a>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800bb4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb4c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bb50:	461a      	mov	r2, r3
 800bb52:	2301      	movs	r3, #1
 800bb54:	4093      	lsls	r3, r2
 800bb56:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bb58:	8992      	ldrh	r2, [r2, #12]
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	d001      	beq.n	800bb62 <find_volume+0x252>
			return FR_NO_FILESYSTEM;
 800bb5e:	230d      	movs	r3, #13
 800bb60:	e263      	b.n	800c02a <find_volume+0x71a>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800bb62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb64:	3340      	adds	r3, #64	@ 0x40
 800bb66:	3348      	adds	r3, #72	@ 0x48
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7fc ff1c 	bl	80089a6 <ld_qword>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	460b      	mov	r3, r1
 800bb72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bb74:	2000      	movs	r0, #0
 800bb76:	60b9      	str	r1, [r7, #8]
 800bb78:	60f8      	str	r0, [r7, #12]
 800bb7a:	68b9      	ldr	r1, [r7, #8]
 800bb7c:	1851      	adds	r1, r2, r1
 800bb7e:	6039      	str	r1, [r7, #0]
 800bb80:	68f9      	ldr	r1, [r7, #12]
 800bb82:	eb43 0101 	adc.w	r1, r3, r1
 800bb86:	6079      	str	r1, [r7, #4]
 800bb88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb8c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800bb90:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d301      	bcc.n	800bb9c <find_volume+0x28c>
 800bb98:	230d      	movs	r3, #13
 800bb9a:	e246      	b.n	800c02a <find_volume+0x71a>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800bb9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb9e:	3340      	adds	r3, #64	@ 0x40
 800bba0:	3354      	adds	r3, #84	@ 0x54
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7fc fedc 	bl	8008960 <ld_dword>
 800bba8:	4602      	mov	r2, r0
 800bbaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbac:	629a      	str	r2, [r3, #40]	@ 0x28

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800bbae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbb0:	f893 20ae 	ldrb.w	r2, [r3, #174]	@ 0xae
 800bbb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbb6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800bbb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbba:	789b      	ldrb	r3, [r3, #2]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d003      	beq.n	800bbc8 <find_volume+0x2b8>
 800bbc0:	230d      	movs	r3, #13
 800bbc2:	e232      	b.n	800c02a <find_volume+0x71a>
 800bbc4:	20002a70 	.word	0x20002a70

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800bbc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbca:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800bbce:	461a      	mov	r2, r3
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	4093      	lsls	r3, r2
 800bbd4:	b29a      	uxth	r2, r3
 800bbd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbd8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800bbda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbdc:	895b      	ldrh	r3, [r3, #10]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d101      	bne.n	800bbe6 <find_volume+0x2d6>
 800bbe2:	230d      	movs	r3, #13
 800bbe4:	e221      	b.n	800c02a <find_volume+0x71a>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800bbe6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbe8:	3340      	adds	r3, #64	@ 0x40
 800bbea:	335c      	adds	r3, #92	@ 0x5c
 800bbec:	4618      	mov	r0, r3
 800bbee:	f7fc feb7 	bl	8008960 <ld_dword>
 800bbf2:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800bbf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbf6:	4a9a      	ldr	r2, [pc, #616]	@ (800be60 <find_volume+0x550>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d901      	bls.n	800bc00 <find_volume+0x2f0>
 800bbfc:	230d      	movs	r3, #13
 800bbfe:	e214      	b.n	800c02a <find_volume+0x71a>
		fs->n_fatent = nclst + 2;
 800bc00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc02:	1c9a      	adds	r2, r3, #2
 800bc04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc06:	625a      	str	r2, [r3, #36]	@ 0x24

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800bc08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc0a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bc0c:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800bc0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc10:	3340      	adds	r3, #64	@ 0x40
 800bc12:	3358      	adds	r3, #88	@ 0x58
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7fc fea3 	bl	8008960 <ld_dword>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bc1e:	441a      	add	r2, r3
 800bc20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc22:	639a      	str	r2, [r3, #56]	@ 0x38
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800bc24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc26:	3340      	adds	r3, #64	@ 0x40
 800bc28:	3350      	adds	r3, #80	@ 0x50
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7fc fe98 	bl	8008960 <ld_dword>
 800bc30:	4602      	mov	r2, r0
 800bc32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bc34:	441a      	add	r2, r3
 800bc36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc38:	631a      	str	r2, [r3, #48]	@ 0x30
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800bc3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc3e:	2200      	movs	r2, #0
 800bc40:	469a      	mov	sl, r3
 800bc42:	4693      	mov	fp, r2
 800bc44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc46:	895b      	ldrh	r3, [r3, #10]
 800bc48:	461a      	mov	r2, r3
 800bc4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc4c:	fb02 f303 	mul.w	r3, r2, r3
 800bc50:	2200      	movs	r2, #0
 800bc52:	4698      	mov	r8, r3
 800bc54:	4691      	mov	r9, r2
 800bc56:	eb1a 0408 	adds.w	r4, sl, r8
 800bc5a:	eb4b 0509 	adc.w	r5, fp, r9
 800bc5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800bc62:	42a2      	cmp	r2, r4
 800bc64:	41ab      	sbcs	r3, r5
 800bc66:	d201      	bcs.n	800bc6c <find_volume+0x35c>
 800bc68:	230d      	movs	r3, #13
 800bc6a:	e1de      	b.n	800c02a <find_volume+0x71a>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800bc6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc6e:	3340      	adds	r3, #64	@ 0x40
 800bc70:	3360      	adds	r3, #96	@ 0x60
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7fc fe74 	bl	8008960 <ld_dword>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc7c:	635a      	str	r2, [r3, #52]	@ 0x34

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800bc7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc82:	4619      	mov	r1, r3
 800bc84:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bc86:	f7fd fb35 	bl	80092f4 <clust2sect>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bc90:	f7fd fa92 	bl	80091b8 <move_window>
 800bc94:	4603      	mov	r3, r0
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d001      	beq.n	800bc9e <find_volume+0x38e>
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e1c5      	b.n	800c02a <find_volume+0x71a>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800bc9e:	2300      	movs	r3, #0
 800bca0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bca2:	e015      	b.n	800bcd0 <find_volume+0x3c0>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800bca4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bca6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bca8:	4413      	add	r3, r2
 800bcaa:	3340      	adds	r3, #64	@ 0x40
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	2b81      	cmp	r3, #129	@ 0x81
 800bcb0:	d10b      	bne.n	800bcca <find_volume+0x3ba>
 800bcb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcb4:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800bcb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bcba:	3314      	adds	r3, #20
 800bcbc:	4413      	add	r3, r2
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7fc fe4e 	bl	8008960 <ld_dword>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	2b02      	cmp	r3, #2
 800bcc8:	d009      	beq.n	800bcde <find_volume+0x3ce>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800bcca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bccc:	3320      	adds	r3, #32
 800bcce:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bcd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcd2:	899b      	ldrh	r3, [r3, #12]
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d3e3      	bcc.n	800bca4 <find_volume+0x394>
 800bcdc:	e000      	b.n	800bce0 <find_volume+0x3d0>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800bcde:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800bce0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bce2:	899b      	ldrh	r3, [r3, #12]
 800bce4:	461a      	mov	r2, r3
 800bce6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d101      	bne.n	800bcf0 <find_volume+0x3e0>
 800bcec:	230d      	movs	r3, #13
 800bcee:	e19c      	b.n	800c02a <find_volume+0x71a>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bcf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcf2:	f04f 32ff 	mov.w	r2, #4294967295
 800bcf6:	621a      	str	r2, [r3, #32]
 800bcf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcfa:	6a1a      	ldr	r2, [r3, #32]
 800bcfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcfe:	61da      	str	r2, [r3, #28]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800bd00:	2304      	movs	r3, #4
 800bd02:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800bd06:	e17e      	b.n	800c006 <find_volume+0x6f6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bd08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd0a:	3340      	adds	r3, #64	@ 0x40
 800bd0c:	330b      	adds	r3, #11
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7fc fe0e 	bl	8008930 <ld_word>
 800bd14:	4603      	mov	r3, r0
 800bd16:	461a      	mov	r2, r3
 800bd18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd1a:	899b      	ldrh	r3, [r3, #12]
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d001      	beq.n	800bd24 <find_volume+0x414>
 800bd20:	230d      	movs	r3, #13
 800bd22:	e182      	b.n	800c02a <find_volume+0x71a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bd24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd26:	3340      	adds	r3, #64	@ 0x40
 800bd28:	3316      	adds	r3, #22
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7fc fe00 	bl	8008930 <ld_word>
 800bd30:	4603      	mov	r3, r0
 800bd32:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bd34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d106      	bne.n	800bd48 <find_volume+0x438>
 800bd3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd3c:	3340      	adds	r3, #64	@ 0x40
 800bd3e:	3324      	adds	r3, #36	@ 0x24
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7fc fe0d 	bl	8008960 <ld_dword>
 800bd46:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800bd48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd4a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bd4c:	629a      	str	r2, [r3, #40]	@ 0x28

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bd4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd50:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800bd54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd56:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bd58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd5a:	789b      	ldrb	r3, [r3, #2]
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d005      	beq.n	800bd6c <find_volume+0x45c>
 800bd60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd62:	789b      	ldrb	r3, [r3, #2]
 800bd64:	2b02      	cmp	r3, #2
 800bd66:	d001      	beq.n	800bd6c <find_volume+0x45c>
 800bd68:	230d      	movs	r3, #13
 800bd6a:	e15e      	b.n	800c02a <find_volume+0x71a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bd6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd6e:	789b      	ldrb	r3, [r3, #2]
 800bd70:	461a      	mov	r2, r3
 800bd72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd74:	fb02 f303 	mul.w	r3, r2, r3
 800bd78:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bd7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd7c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800bd80:	461a      	mov	r2, r3
 800bd82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd84:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bd86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd88:	895b      	ldrh	r3, [r3, #10]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d008      	beq.n	800bda0 <find_volume+0x490>
 800bd8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd90:	895b      	ldrh	r3, [r3, #10]
 800bd92:	461a      	mov	r2, r3
 800bd94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd96:	895b      	ldrh	r3, [r3, #10]
 800bd98:	3b01      	subs	r3, #1
 800bd9a:	4013      	ands	r3, r2
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d001      	beq.n	800bda4 <find_volume+0x494>
 800bda0:	230d      	movs	r3, #13
 800bda2:	e142      	b.n	800c02a <find_volume+0x71a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bda4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bda6:	3340      	adds	r3, #64	@ 0x40
 800bda8:	3311      	adds	r3, #17
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7fc fdc0 	bl	8008930 <ld_word>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdb6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bdb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdba:	891b      	ldrh	r3, [r3, #8]
 800bdbc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bdbe:	8992      	ldrh	r2, [r2, #12]
 800bdc0:	0952      	lsrs	r2, r2, #5
 800bdc2:	b292      	uxth	r2, r2
 800bdc4:	fbb3 f1f2 	udiv	r1, r3, r2
 800bdc8:	fb01 f202 	mul.w	r2, r1, r2
 800bdcc:	1a9b      	subs	r3, r3, r2
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d001      	beq.n	800bdd8 <find_volume+0x4c8>
 800bdd4:	230d      	movs	r3, #13
 800bdd6:	e128      	b.n	800c02a <find_volume+0x71a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bdd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdda:	3340      	adds	r3, #64	@ 0x40
 800bddc:	3313      	adds	r3, #19
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7fc fda6 	bl	8008930 <ld_word>
 800bde4:	4603      	mov	r3, r0
 800bde6:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bde8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d106      	bne.n	800bdfc <find_volume+0x4ec>
 800bdee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdf0:	3340      	adds	r3, #64	@ 0x40
 800bdf2:	3320      	adds	r3, #32
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7fc fdb3 	bl	8008960 <ld_dword>
 800bdfa:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bdfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdfe:	3340      	adds	r3, #64	@ 0x40
 800be00:	330e      	adds	r3, #14
 800be02:	4618      	mov	r0, r3
 800be04:	f7fc fd94 	bl	8008930 <ld_word>
 800be08:	4603      	mov	r3, r0
 800be0a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800be0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800be12:	2b00      	cmp	r3, #0
 800be14:	d101      	bne.n	800be1a <find_volume+0x50a>
 800be16:	230d      	movs	r3, #13
 800be18:	e107      	b.n	800c02a <find_volume+0x71a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800be1a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800be1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be20:	4413      	add	r3, r2
 800be22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be24:	8911      	ldrh	r1, [r2, #8]
 800be26:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be28:	8992      	ldrh	r2, [r2, #12]
 800be2a:	0952      	lsrs	r2, r2, #5
 800be2c:	b292      	uxth	r2, r2
 800be2e:	fbb1 f2f2 	udiv	r2, r1, r2
 800be32:	b292      	uxth	r2, r2
 800be34:	4413      	add	r3, r2
 800be36:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800be38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800be3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d201      	bcs.n	800be44 <find_volume+0x534>
 800be40:	230d      	movs	r3, #13
 800be42:	e0f2      	b.n	800c02a <find_volume+0x71a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800be44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800be46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be48:	1ad3      	subs	r3, r2, r3
 800be4a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be4c:	8952      	ldrh	r2, [r2, #10]
 800be4e:	fbb3 f3f2 	udiv	r3, r3, r2
 800be52:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800be54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be56:	2b00      	cmp	r3, #0
 800be58:	d104      	bne.n	800be64 <find_volume+0x554>
 800be5a:	230d      	movs	r3, #13
 800be5c:	e0e5      	b.n	800c02a <find_volume+0x71a>
 800be5e:	bf00      	nop
 800be60:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 800be64:	2303      	movs	r3, #3
 800be66:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800be6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be6c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800be70:	4293      	cmp	r3, r2
 800be72:	d802      	bhi.n	800be7a <find_volume+0x56a>
 800be74:	2302      	movs	r3, #2
 800be76:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800be7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be7c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800be80:	4293      	cmp	r3, r2
 800be82:	d802      	bhi.n	800be8a <find_volume+0x57a>
 800be84:	2301      	movs	r3, #1
 800be86:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800be8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be8c:	1c9a      	adds	r2, r3, #2
 800be8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be90:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->volbase = bsect;							/* Volume start sector */
 800be92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be94:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800be96:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800be98:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800be9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800be9e:	441a      	add	r2, r3
 800bea0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bea2:	631a      	str	r2, [r3, #48]	@ 0x30
		fs->database = bsect + sysect;					/* Data start sector */
 800bea4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bea6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bea8:	441a      	add	r2, r3
 800beaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800beac:	639a      	str	r2, [r3, #56]	@ 0x38
		if (fmt == FS_FAT32) {
 800beae:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800beb2:	2b03      	cmp	r3, #3
 800beb4:	d11e      	bne.n	800bef4 <find_volume+0x5e4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800beb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800beb8:	3340      	adds	r3, #64	@ 0x40
 800beba:	332a      	adds	r3, #42	@ 0x2a
 800bebc:	4618      	mov	r0, r3
 800bebe:	f7fc fd37 	bl	8008930 <ld_word>
 800bec2:	4603      	mov	r3, r0
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d001      	beq.n	800becc <find_volume+0x5bc>
 800bec8:	230d      	movs	r3, #13
 800beca:	e0ae      	b.n	800c02a <find_volume+0x71a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800becc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bece:	891b      	ldrh	r3, [r3, #8]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d001      	beq.n	800bed8 <find_volume+0x5c8>
 800bed4:	230d      	movs	r3, #13
 800bed6:	e0a8      	b.n	800c02a <find_volume+0x71a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bed8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800beda:	3340      	adds	r3, #64	@ 0x40
 800bedc:	332c      	adds	r3, #44	@ 0x2c
 800bede:	4618      	mov	r0, r3
 800bee0:	f7fc fd3e 	bl	8008960 <ld_dword>
 800bee4:	4602      	mov	r2, r0
 800bee6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bee8:	635a      	str	r2, [r3, #52]	@ 0x34
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800beea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800beec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bef2:	e01f      	b.n	800bf34 <find_volume+0x624>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bef4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bef6:	891b      	ldrh	r3, [r3, #8]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d101      	bne.n	800bf00 <find_volume+0x5f0>
 800befc:	230d      	movs	r3, #13
 800befe:	e094      	b.n	800c02a <find_volume+0x71a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bf00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf06:	441a      	add	r2, r3
 800bf08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf0a:	635a      	str	r2, [r3, #52]	@ 0x34
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bf0c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bf10:	2b02      	cmp	r3, #2
 800bf12:	d103      	bne.n	800bf1c <find_volume+0x60c>
 800bf14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf18:	005b      	lsls	r3, r3, #1
 800bf1a:	e00a      	b.n	800bf32 <find_volume+0x622>
 800bf1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bf20:	4613      	mov	r3, r2
 800bf22:	005b      	lsls	r3, r3, #1
 800bf24:	4413      	add	r3, r2
 800bf26:	085a      	lsrs	r2, r3, #1
 800bf28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf2c:	f003 0301 	and.w	r3, r3, #1
 800bf30:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bf32:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bf34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bf38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf3a:	899b      	ldrh	r3, [r3, #12]
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf40:	440b      	add	r3, r1
 800bf42:	3b01      	subs	r3, #1
 800bf44:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bf46:	8989      	ldrh	r1, [r1, #12]
 800bf48:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d201      	bcs.n	800bf54 <find_volume+0x644>
 800bf50:	230d      	movs	r3, #13
 800bf52:	e06a      	b.n	800c02a <find_volume+0x71a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bf54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf56:	f04f 32ff 	mov.w	r2, #4294967295
 800bf5a:	621a      	str	r2, [r3, #32]
 800bf5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf5e:	6a1a      	ldr	r2, [r3, #32]
 800bf60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf62:	61da      	str	r2, [r3, #28]
		fs->fsi_flag = 0x80;
 800bf64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf66:	2280      	movs	r2, #128	@ 0x80
 800bf68:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bf6a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bf6e:	2b03      	cmp	r3, #3
 800bf70:	d149      	bne.n	800c006 <find_volume+0x6f6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bf72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf74:	3340      	adds	r3, #64	@ 0x40
 800bf76:	3330      	adds	r3, #48	@ 0x30
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7fc fcd9 	bl	8008930 <ld_word>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d140      	bne.n	800c006 <find_volume+0x6f6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bf84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf86:	3301      	adds	r3, #1
 800bf88:	4619      	mov	r1, r3
 800bf8a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bf8c:	f7fd f914 	bl	80091b8 <move_window>
 800bf90:	4603      	mov	r3, r0
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d137      	bne.n	800c006 <find_volume+0x6f6>
		{
			fs->fsi_flag = 0;
 800bf96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf98:	2200      	movs	r2, #0
 800bf9a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bf9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf9e:	3340      	adds	r3, #64	@ 0x40
 800bfa0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7fc fcc3 	bl	8008930 <ld_word>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	461a      	mov	r2, r3
 800bfae:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d127      	bne.n	800c006 <find_volume+0x6f6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bfb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfb8:	3340      	adds	r3, #64	@ 0x40
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7fc fcd0 	bl	8008960 <ld_dword>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	4a1c      	ldr	r2, [pc, #112]	@ (800c034 <find_volume+0x724>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d11e      	bne.n	800c006 <find_volume+0x6f6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bfc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfca:	3340      	adds	r3, #64	@ 0x40
 800bfcc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7fc fcc5 	bl	8008960 <ld_dword>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	4a17      	ldr	r2, [pc, #92]	@ (800c038 <find_volume+0x728>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d113      	bne.n	800c006 <find_volume+0x6f6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bfde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfe0:	3340      	adds	r3, #64	@ 0x40
 800bfe2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7fc fcba 	bl	8008960 <ld_dword>
 800bfec:	4602      	mov	r2, r0
 800bfee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bff0:	621a      	str	r2, [r3, #32]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bff4:	3340      	adds	r3, #64	@ 0x40
 800bff6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800bffa:	4618      	mov	r0, r3
 800bffc:	f7fc fcb0 	bl	8008960 <ld_dword>
 800c000:	4602      	mov	r2, r0
 800c002:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c004:	61da      	str	r2, [r3, #28]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c008:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800c00c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c00e:	4b0b      	ldr	r3, [pc, #44]	@ (800c03c <find_volume+0x72c>)
 800c010:	881b      	ldrh	r3, [r3, #0]
 800c012:	3301      	adds	r3, #1
 800c014:	b29a      	uxth	r2, r3
 800c016:	4b09      	ldr	r3, [pc, #36]	@ (800c03c <find_volume+0x72c>)
 800c018:	801a      	strh	r2, [r3, #0]
 800c01a:	4b08      	ldr	r3, [pc, #32]	@ (800c03c <find_volume+0x72c>)
 800c01c:	881a      	ldrh	r2, [r3, #0]
 800c01e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c020:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c022:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c024:	f7fd f860 	bl	80090e8 <clear_lock>
#endif
	return FR_OK;
 800c028:	2300      	movs	r3, #0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3770      	adds	r7, #112	@ 0x70
 800c02e:	46bd      	mov	sp, r7
 800c030:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c034:	41615252 	.word	0x41615252
 800c038:	61417272 	.word	0x61417272
 800c03c:	20002a74 	.word	0x20002a74

0800c040 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b084      	sub	sp, #16
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c04a:	2309      	movs	r3, #9
 800c04c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d02e      	beq.n	800c0b2 <validate+0x72>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d02a      	beq.n	800c0b2 <validate+0x72>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	781b      	ldrb	r3, [r3, #0]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d025      	beq.n	800c0b2 <validate+0x72>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	889a      	ldrh	r2, [r3, #4]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	88db      	ldrh	r3, [r3, #6]
 800c070:	429a      	cmp	r2, r3
 800c072:	d11e      	bne.n	800c0b2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4618      	mov	r0, r3
 800c07a:	f7fc febc 	bl	8008df6 <lock_fs>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d014      	beq.n	800c0ae <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	785b      	ldrb	r3, [r3, #1]
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7fc fbb0 	bl	80087f0 <disk_status>
 800c090:	4603      	mov	r3, r0
 800c092:	f003 0301 	and.w	r3, r3, #1
 800c096:	2b00      	cmp	r3, #0
 800c098:	d102      	bne.n	800c0a0 <validate+0x60>
				res = FR_OK;
 800c09a:	2300      	movs	r3, #0
 800c09c:	73fb      	strb	r3, [r7, #15]
 800c09e:	e008      	b.n	800c0b2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7fc febb 	bl	8008e22 <unlock_fs>
 800c0ac:	e001      	b.n	800c0b2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800c0ae:	230f      	movs	r3, #15
 800c0b0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c0b2:	7bfb      	ldrb	r3, [r7, #15]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d102      	bne.n	800c0be <validate+0x7e>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	e000      	b.n	800c0c0 <validate+0x80>
 800c0be:	2300      	movs	r3, #0
 800c0c0:	683a      	ldr	r2, [r7, #0]
 800c0c2:	6013      	str	r3, [r2, #0]
	return res;
 800c0c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3710      	adds	r7, #16
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
	...

0800c0d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b088      	sub	sp, #32
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	60b9      	str	r1, [r7, #8]
 800c0da:	4613      	mov	r3, r2
 800c0dc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c0e2:	f107 0310 	add.w	r3, r7, #16
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7ff fb6a 	bl	800b7c0 <get_ldnumber>
 800c0ec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c0ee:	69fb      	ldr	r3, [r7, #28]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	da01      	bge.n	800c0f8 <f_mount+0x28>
 800c0f4:	230b      	movs	r3, #11
 800c0f6:	e048      	b.n	800c18a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c0f8:	4a26      	ldr	r2, [pc, #152]	@ (800c194 <f_mount+0xc4>)
 800c0fa:	69fb      	ldr	r3, [r7, #28]
 800c0fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c100:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c102:	69bb      	ldr	r3, [r7, #24]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d00f      	beq.n	800c128 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c108:	69b8      	ldr	r0, [r7, #24]
 800c10a:	f7fc ffed 	bl	80090e8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800c10e:	69bb      	ldr	r3, [r7, #24]
 800c110:	699b      	ldr	r3, [r3, #24]
 800c112:	4618      	mov	r0, r3
 800c114:	f001 ff02 	bl	800df1c <ff_del_syncobj>
 800c118:	4603      	mov	r3, r0
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d101      	bne.n	800c122 <f_mount+0x52>
 800c11e:	2302      	movs	r3, #2
 800c120:	e033      	b.n	800c18a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	2200      	movs	r2, #0
 800c126:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00f      	beq.n	800c14e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2200      	movs	r2, #0
 800c132:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800c134:	69fb      	ldr	r3, [r7, #28]
 800c136:	b2da      	uxtb	r2, r3
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	3318      	adds	r3, #24
 800c13c:	4619      	mov	r1, r3
 800c13e:	4610      	mov	r0, r2
 800c140:	f001 fecc 	bl	800dedc <ff_cre_syncobj>
 800c144:	4603      	mov	r3, r0
 800c146:	2b00      	cmp	r3, #0
 800c148:	d101      	bne.n	800c14e <f_mount+0x7e>
 800c14a:	2302      	movs	r3, #2
 800c14c:	e01d      	b.n	800c18a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c14e:	68fa      	ldr	r2, [r7, #12]
 800c150:	4910      	ldr	r1, [pc, #64]	@ (800c194 <f_mount+0xc4>)
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d002      	beq.n	800c164 <f_mount+0x94>
 800c15e:	79fb      	ldrb	r3, [r7, #7]
 800c160:	2b01      	cmp	r3, #1
 800c162:	d001      	beq.n	800c168 <f_mount+0x98>
 800c164:	2300      	movs	r3, #0
 800c166:	e010      	b.n	800c18a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c168:	f107 010c 	add.w	r1, r7, #12
 800c16c:	f107 0308 	add.w	r3, r7, #8
 800c170:	2200      	movs	r2, #0
 800c172:	4618      	mov	r0, r3
 800c174:	f7ff fbcc 	bl	800b910 <find_volume>
 800c178:	4603      	mov	r3, r0
 800c17a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	7dfa      	ldrb	r2, [r7, #23]
 800c180:	4611      	mov	r1, r2
 800c182:	4618      	mov	r0, r3
 800c184:	f7fc fe4d 	bl	8008e22 <unlock_fs>
 800c188:	7dfb      	ldrb	r3, [r7, #23]
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3720      	adds	r7, #32
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	20002a70 	.word	0x20002a70

0800c198 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c19c:	b0aa      	sub	sp, #168	@ 0xa8
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6278      	str	r0, [r7, #36]	@ 0x24
 800c1a2:	6239      	str	r1, [r7, #32]
 800c1a4:	4613      	mov	r3, r2
 800c1a6:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d101      	bne.n	800c1b2 <f_open+0x1a>
 800c1ae:	2309      	movs	r3, #9
 800c1b0:	e2e2      	b.n	800c778 <f_open+0x5e0>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c1b2:	7ffb      	ldrb	r3, [r7, #31]
 800c1b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c1b8:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 800c1ba:	7ffb      	ldrb	r3, [r7, #31]
 800c1bc:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800c1c0:	f107 0020 	add.w	r0, r7, #32
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	f7ff fba3 	bl	800b910 <find_volume>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	if (res == FR_OK) {
 800c1d0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	f040 82bf 	bne.w	800c758 <f_open+0x5c0>
		dj.obj.fs = fs;
 800c1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1dc:	633b      	str	r3, [r7, #48]	@ 0x30
		INIT_NAMBUF(fs);
 800c1de:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800c1e2:	f001 fec7 	bl	800df74 <ff_memalloc>
 800c1e6:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 800c1ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d106      	bne.n	800c200 <f_open+0x68>
 800c1f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1f4:	2111      	movs	r1, #17
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7fc fe13 	bl	8008e22 <unlock_fs>
 800c1fc:	2311      	movs	r3, #17
 800c1fe:	e2bb      	b.n	800c778 <f_open+0x5e0>
 800c200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c202:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c206:	611a      	str	r2, [r3, #16]
 800c208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c20a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c20e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800c212:	6153      	str	r3, [r2, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c214:	6a3b      	ldr	r3, [r7, #32]
 800c216:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800c21a:	4619      	mov	r1, r3
 800c21c:	4610      	mov	r0, r2
 800c21e:	f7ff fa21 	bl	800b664 <follow_path>
 800c222:	4603      	mov	r3, r0
 800c224:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c228:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d118      	bne.n	800c262 <f_open+0xca>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c230:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800c234:	b25b      	sxtb	r3, r3
 800c236:	2b00      	cmp	r3, #0
 800c238:	da03      	bge.n	800c242 <f_open+0xaa>
				res = FR_INVALID_NAME;
 800c23a:	2306      	movs	r3, #6
 800c23c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800c240:	e00f      	b.n	800c262 <f_open+0xca>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c242:	7ffb      	ldrb	r3, [r7, #31]
 800c244:	2b01      	cmp	r3, #1
 800c246:	bf8c      	ite	hi
 800c248:	2301      	movhi	r3, #1
 800c24a:	2300      	movls	r3, #0
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	461a      	mov	r2, r3
 800c250:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c254:	4611      	mov	r1, r2
 800c256:	4618      	mov	r0, r3
 800c258:	f7fc fdfe 	bl	8008e58 <chk_lock>
 800c25c:	4603      	mov	r3, r0
 800c25e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c262:	7ffb      	ldrb	r3, [r7, #31]
 800c264:	f003 031c 	and.w	r3, r3, #28
 800c268:	2b00      	cmp	r3, #0
 800c26a:	f000 8117 	beq.w	800c49c <f_open+0x304>
			if (res != FR_OK) {					/* No file, create new */
 800c26e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c272:	2b00      	cmp	r3, #0
 800c274:	d017      	beq.n	800c2a6 <f_open+0x10e>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c276:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c27a:	2b04      	cmp	r3, #4
 800c27c:	d10e      	bne.n	800c29c <f_open+0x104>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c27e:	f7fc fe47 	bl	8008f10 <enq_lock>
 800c282:	4603      	mov	r3, r0
 800c284:	2b00      	cmp	r3, #0
 800c286:	d006      	beq.n	800c296 <f_open+0xfe>
 800c288:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7fe fe2f 	bl	800aef0 <dir_register>
 800c292:	4603      	mov	r3, r0
 800c294:	e000      	b.n	800c298 <f_open+0x100>
 800c296:	2312      	movs	r3, #18
 800c298:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c29c:	7ffb      	ldrb	r3, [r7, #31]
 800c29e:	f043 0308 	orr.w	r3, r3, #8
 800c2a2:	77fb      	strb	r3, [r7, #31]
 800c2a4:	e011      	b.n	800c2ca <f_open+0x132>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c2a6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800c2aa:	f003 0311 	and.w	r3, r3, #17
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d003      	beq.n	800c2ba <f_open+0x122>
					res = FR_DENIED;
 800c2b2:	2307      	movs	r3, #7
 800c2b4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800c2b8:	e007      	b.n	800c2ca <f_open+0x132>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c2ba:	7ffb      	ldrb	r3, [r7, #31]
 800c2bc:	f003 0304 	and.w	r3, r3, #4
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d002      	beq.n	800c2ca <f_open+0x132>
 800c2c4:	2308      	movs	r3, #8
 800c2c6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c2ca:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	f040 8100 	bne.w	800c4d4 <f_open+0x33c>
 800c2d4:	7ffb      	ldrb	r3, [r7, #31]
 800c2d6:	f003 0308 	and.w	r3, r3, #8
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	f000 80fa 	beq.w	800c4d4 <f_open+0x33c>
				dw = GET_FATTIME();
 800c2e0:	f7fc fa28 	bl	8008734 <get_fattime>
 800c2e4:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800c2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	2b04      	cmp	r3, #4
 800c2ee:	f040 8085 	bne.w	800c3fc <f_open+0x264>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800c2f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2f6:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800c2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2fa:	695b      	ldr	r3, [r3, #20]
 800c2fc:	3334      	adds	r3, #52	@ 0x34
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7fc fb2e 	bl	8008960 <ld_dword>
 800c304:	4602      	mov	r2, r0
 800c306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c308:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c30a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c30c:	695b      	ldr	r3, [r3, #20]
 800c30e:	3338      	adds	r3, #56	@ 0x38
 800c310:	4618      	mov	r0, r3
 800c312:	f7fc fb48 	bl	80089a6 <ld_qword>
 800c316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c318:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c31e:	695b      	ldr	r3, [r3, #20]
 800c320:	3321      	adds	r3, #33	@ 0x21
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	f003 0302 	and.w	r3, r3, #2
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c32c:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 800c32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c330:	2200      	movs	r2, #0
 800c332:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800c334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c336:	695b      	ldr	r3, [r3, #20]
 800c338:	3308      	adds	r3, #8
 800c33a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c33e:	4618      	mov	r0, r3
 800c340:	f7fc fc27 	bl	8008b92 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800c344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c346:	695b      	ldr	r3, [r3, #20]
 800c348:	f103 0214 	add.w	r2, r3, #20
 800c34c:	2300      	movs	r3, #0
 800c34e:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800c350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c352:	695b      	ldr	r3, [r3, #20]
 800c354:	330c      	adds	r3, #12
 800c356:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7fc fc19 	bl	8008b92 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800c360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c362:	695b      	ldr	r3, [r3, #20]
 800c364:	f103 0215 	add.w	r2, r3, #21
 800c368:	2300      	movs	r3, #0
 800c36a:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800c36c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c36e:	695b      	ldr	r3, [r3, #20]
 800c370:	1d1a      	adds	r2, r3, #4
 800c372:	2320      	movs	r3, #32
 800c374:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800c376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c378:	695b      	ldr	r3, [r3, #20]
 800c37a:	3334      	adds	r3, #52	@ 0x34
 800c37c:	2100      	movs	r1, #0
 800c37e:	4618      	mov	r0, r3
 800c380:	f7fc fc07 	bl	8008b92 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800c384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c386:	695b      	ldr	r3, [r3, #20]
 800c388:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c38c:	f04f 0200 	mov.w	r2, #0
 800c390:	f04f 0300 	mov.w	r3, #0
 800c394:	4608      	mov	r0, r1
 800c396:	f7fc fc28 	bl	8008bea <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800c39a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c39c:	695b      	ldr	r3, [r3, #20]
 800c39e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800c3a2:	f04f 0200 	mov.w	r2, #0
 800c3a6:	f04f 0300 	mov.w	r3, #0
 800c3aa:	4608      	mov	r0, r1
 800c3ac:	f7fc fc1d 	bl	8008bea <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800c3b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3b2:	695b      	ldr	r3, [r3, #20]
 800c3b4:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 800c3bc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7fe fae1 	bl	800a988 <store_xdir>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800c3cc:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d17f      	bne.n	800c4d4 <f_open+0x33c>
 800c3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d6:	689b      	ldr	r3, [r3, #8]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d07b      	beq.n	800c4d4 <f_open+0x33c>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800c3dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c3de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e0:	689b      	ldr	r3, [r3, #8]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	f7fd fb73 	bl	8009ad0 <remove_chain>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800c3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f2:	689b      	ldr	r3, [r3, #8]
 800c3f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3f6:	3b01      	subs	r3, #1
 800c3f8:	61d3      	str	r3, [r2, #28]
 800c3fa:	e06b      	b.n	800c4d4 <f_open+0x33c>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c3fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3fe:	330e      	adds	r3, #14
 800c400:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c404:	4618      	mov	r0, r3
 800c406:	f7fc fbc4 	bl	8008b92 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c40a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c40c:	3316      	adds	r3, #22
 800c40e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c412:	4618      	mov	r0, r3
 800c414:	f7fc fbbd 	bl	8008b92 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c418:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c41a:	f103 020b 	add.w	r2, r3, #11
 800c41e:	2320      	movs	r3, #32
 800c420:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c422:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c424:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c426:	4619      	mov	r1, r3
 800c428:	4610      	mov	r0, r2
 800c42a:	f7fd ff28 	bl	800a27e <ld_clust>
 800c42e:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c432:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c436:	2200      	movs	r2, #0
 800c438:	4619      	mov	r1, r3
 800c43a:	f7fd ff3f 	bl	800a2bc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c43e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c440:	331c      	adds	r3, #28
 800c442:	2100      	movs	r1, #0
 800c444:	4618      	mov	r0, r3
 800c446:	f7fc fba4 	bl	8008b92 <st_dword>
					fs->wflag = 1;
 800c44a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c44c:	2301      	movs	r3, #1
 800c44e:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c450:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c454:	2b00      	cmp	r3, #0
 800c456:	d03d      	beq.n	800c4d4 <f_open+0x33c>
						dw = fs->winsect;
 800c458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c45a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c45c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
						res = remove_chain(&dj.obj, cl, 0);
 800c460:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c464:	2200      	movs	r2, #0
 800c466:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7fd fb30 	bl	8009ad0 <remove_chain>
 800c470:	4603      	mov	r3, r0
 800c472:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
						if (res == FR_OK) {
 800c476:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d12a      	bne.n	800c4d4 <f_open+0x33c>
							res = move_window(fs, dw);
 800c47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c480:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c484:	4618      	mov	r0, r3
 800c486:	f7fc fe97 	bl	80091b8 <move_window>
 800c48a:	4603      	mov	r3, r0
 800c48c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c490:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c492:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c496:	3b01      	subs	r3, #1
 800c498:	61d3      	str	r3, [r2, #28]
 800c49a:	e01b      	b.n	800c4d4 <f_open+0x33c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c49c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d117      	bne.n	800c4d4 <f_open+0x33c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c4a4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800c4a8:	f003 0310 	and.w	r3, r3, #16
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d003      	beq.n	800c4b8 <f_open+0x320>
					res = FR_NO_FILE;
 800c4b0:	2304      	movs	r3, #4
 800c4b2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800c4b6:	e00d      	b.n	800c4d4 <f_open+0x33c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c4b8:	7ffb      	ldrb	r3, [r7, #31]
 800c4ba:	f003 0302 	and.w	r3, r3, #2
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d008      	beq.n	800c4d4 <f_open+0x33c>
 800c4c2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800c4c6:	f003 0301 	and.w	r3, r3, #1
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d002      	beq.n	800c4d4 <f_open+0x33c>
						res = FR_DENIED;
 800c4ce:	2307      	movs	r3, #7
 800c4d0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					}
				}
			}
		}
		if (res == FR_OK) {
 800c4d4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d126      	bne.n	800c52a <f_open+0x392>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c4dc:	7ffb      	ldrb	r3, [r7, #31]
 800c4de:	f003 0308 	and.w	r3, r3, #8
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d003      	beq.n	800c4ee <f_open+0x356>
				mode |= FA_MODIFIED;
 800c4e6:	7ffb      	ldrb	r3, [r7, #31]
 800c4e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4ec:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f4:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800c4f6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4fa:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c4fc:	7ffb      	ldrb	r3, [r7, #31]
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	bf8c      	ite	hi
 800c502:	2301      	movhi	r3, #1
 800c504:	2300      	movls	r3, #0
 800c506:	b2db      	uxtb	r3, r3
 800c508:	461a      	mov	r2, r3
 800c50a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c50e:	4611      	mov	r1, r2
 800c510:	4618      	mov	r0, r3
 800c512:	f7fc fd1f 	bl	8008f54 <inc_lock>
 800c516:	4602      	mov	r2, r0
 800c518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c51a:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c520:	2b00      	cmp	r3, #0
 800c522:	d102      	bne.n	800c52a <f_open+0x392>
 800c524:	2302      	movs	r3, #2
 800c526:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c52a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c52e:	2b00      	cmp	r3, #0
 800c530:	f040 810e 	bne.w	800c750 <f_open+0x5b8>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800c534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	2b04      	cmp	r3, #4
 800c53a:	d12d      	bne.n	800c598 <f_open+0x400>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800c53c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c540:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800c542:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c546:	4613      	mov	r3, r2
 800c548:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c54c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800c550:	431a      	orrs	r2, r3
 800c552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c554:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800c556:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c55a:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800c55c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c55e:	695b      	ldr	r3, [r3, #20]
 800c560:	3334      	adds	r3, #52	@ 0x34
 800c562:	4618      	mov	r0, r3
 800c564:	f7fc f9fc 	bl	8008960 <ld_dword>
 800c568:	4602      	mov	r2, r0
 800c56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c56c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c56e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c570:	695b      	ldr	r3, [r3, #20]
 800c572:	3338      	adds	r3, #56	@ 0x38
 800c574:	4618      	mov	r0, r3
 800c576:	f7fc fa16 	bl	80089a6 <ld_qword>
 800c57a:	4602      	mov	r2, r0
 800c57c:	460b      	mov	r3, r1
 800c57e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c580:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c586:	695b      	ldr	r3, [r3, #20]
 800c588:	3321      	adds	r3, #33	@ 0x21
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	f003 0302 	and.w	r3, r3, #2
 800c590:	b2da      	uxtb	r2, r3
 800c592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c594:	71da      	strb	r2, [r3, #7]
 800c596:	e016      	b.n	800c5c6 <f_open+0x42e>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c598:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c59a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c59c:	4619      	mov	r1, r3
 800c59e:	4610      	mov	r0, r2
 800c5a0:	f7fd fe6d 	bl	800a27e <ld_clust>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c5aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5ac:	331c      	adds	r3, #28
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7fc f9d6 	bl	8008960 <ld_dword>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	613b      	str	r3, [r7, #16]
 800c5ba:	617a      	str	r2, [r7, #20]
 800c5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5be:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c5c2:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c5cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c5d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5d4:	88da      	ldrh	r2, [r3, #6]
 800c5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5dc:	7ffa      	ldrb	r2, [r7, #31]
 800c5de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 800c5e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800c5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c5f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c5f2:	f04f 0200 	mov.w	r2, #0
 800c5f6:	f04f 0300 	mov.w	r3, #0
 800c5fa:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c600:	3354      	adds	r3, #84	@ 0x54
 800c602:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c606:	2100      	movs	r1, #0
 800c608:	4618      	mov	r0, r3
 800c60a:	f7fc fb97 	bl	8008d3c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c60e:	7ffb      	ldrb	r3, [r7, #31]
 800c610:	f003 0320 	and.w	r3, r3, #32
 800c614:	2b00      	cmp	r3, #0
 800c616:	f000 809b 	beq.w	800c750 <f_open+0x5b8>
 800c61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c61c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c620:	4313      	orrs	r3, r2
 800c622:	f000 8095 	beq.w	800c750 <f_open+0x5b8>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c628:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c62c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c62e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c634:	895b      	ldrh	r3, [r3, #10]
 800c636:	461a      	mov	r2, r3
 800c638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c63a:	899b      	ldrh	r3, [r3, #12]
 800c63c:	fb02 f303 	mul.w	r3, r2, r3
 800c640:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c64e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c652:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
 800c656:	e023      	b.n	800c6a0 <f_open+0x508>
					clst = get_fat(&fp->obj, clst);
 800c658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c65a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800c65e:	4618      	mov	r0, r3
 800c660:	f7fc fe68 	bl	8009334 <get_fat>
 800c664:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
					if (clst <= 1) res = FR_INT_ERR;
 800c668:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d802      	bhi.n	800c676 <f_open+0x4de>
 800c670:	2302      	movs	r3, #2
 800c672:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c676:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c67a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c67e:	d102      	bne.n	800c686 <f_open+0x4ee>
 800c680:	2301      	movs	r3, #1
 800c682:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c686:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c68a:	2200      	movs	r2, #0
 800c68c:	4698      	mov	r8, r3
 800c68e:	4691      	mov	r9, r2
 800c690:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800c694:	ebb2 0a08 	subs.w	sl, r2, r8
 800c698:	eb63 0b09 	sbc.w	fp, r3, r9
 800c69c:	e9c7 ab26 	strd	sl, fp, [r7, #152]	@ 0x98
 800c6a0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d10a      	bne.n	800c6be <f_open+0x526>
 800c6a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	461c      	mov	r4, r3
 800c6b0:	4615      	mov	r5, r2
 800c6b2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800c6b6:	4294      	cmp	r4, r2
 800c6b8:	eb75 0303 	sbcs.w	r3, r5, r3
 800c6bc:	d3cc      	bcc.n	800c658 <f_open+0x4c0>
				}
				fp->clust = clst;
 800c6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800c6c4:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c6c6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d140      	bne.n	800c750 <f_open+0x5b8>
 800c6ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6d0:	899b      	ldrh	r3, [r3, #12]
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	60bb      	str	r3, [r7, #8]
 800c6d8:	60fa      	str	r2, [r7, #12]
 800c6da:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c6de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c6e2:	f7f4 fa53 	bl	8000b8c <__aeabi_uldivmod>
 800c6e6:	4313      	orrs	r3, r2
 800c6e8:	d032      	beq.n	800c750 <f_open+0x5b8>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c6ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ec:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7fc fdff 	bl	80092f4 <clust2sect>
 800c6f6:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
 800c6fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d103      	bne.n	800c70a <f_open+0x572>
						res = FR_INT_ERR;
 800c702:	2302      	movs	r3, #2
 800c704:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800c708:	e022      	b.n	800c750 <f_open+0x5b8>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c70a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c70c:	899b      	ldrh	r3, [r3, #12]
 800c70e:	b29b      	uxth	r3, r3
 800c710:	2200      	movs	r2, #0
 800c712:	603b      	str	r3, [r7, #0]
 800c714:	607a      	str	r2, [r7, #4]
 800c716:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c71a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c71e:	f7f4 fa35 	bl	8000b8c <__aeabi_uldivmod>
 800c722:	4602      	mov	r2, r0
 800c724:	460b      	mov	r3, r1
 800c726:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c72a:	441a      	add	r2, r3
 800c72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c72e:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c732:	7858      	ldrb	r0, [r3, #1]
 800c734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c736:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800c73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c73c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c73e:	2301      	movs	r3, #1
 800c740:	f7fc f898 	bl	8008874 <disk_read>
 800c744:	4603      	mov	r3, r0
 800c746:	2b00      	cmp	r3, #0
 800c748:	d002      	beq.n	800c750 <f_open+0x5b8>
 800c74a:	2301      	movs	r3, #1
 800c74c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				}
			}
#endif
		}

		FREE_NAMBUF();
 800c750:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800c754:	f001 fc1a 	bl	800df8c <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c758:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d002      	beq.n	800c766 <f_open+0x5ce>
 800c760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c762:	2200      	movs	r2, #0
 800c764:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c768:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 800c76c:	4611      	mov	r1, r2
 800c76e:	4618      	mov	r0, r3
 800c770:	f7fc fb57 	bl	8008e22 <unlock_fs>
 800c774:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
}
 800c778:	4618      	mov	r0, r3
 800c77a:	37a8      	adds	r7, #168	@ 0xa8
 800c77c:	46bd      	mov	sp, r7
 800c77e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c782 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c782:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c786:	b098      	sub	sp, #96	@ 0x60
 800c788:	af00      	add	r7, sp, #0
 800c78a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c78c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c78e:	627a      	str	r2, [r7, #36]	@ 0x24
 800c790:	623b      	str	r3, [r7, #32]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c794:	64fb      	str	r3, [r7, #76]	@ 0x4c


	*br = 0;	/* Clear read byte counter */
 800c796:	6a3a      	ldr	r2, [r7, #32]
 800c798:	2300      	movs	r3, #0
 800c79a:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c79c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c79e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	4610      	mov	r0, r2
 800c7a6:	f7ff fc4b 	bl	800c040 <validate>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c7b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d108      	bne.n	800c7ca <f_read+0x48>
 800c7b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ba:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c7be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c7c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d009      	beq.n	800c7de <f_read+0x5c>
 800c7ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7cc:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800c7d0:	4611      	mov	r1, r2
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7fc fb25 	bl	8008e22 <unlock_fs>
 800c7d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c7dc:	e193      	b.n	800cb06 <f_read+0x384>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c7de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c7e4:	f003 0301 	and.w	r3, r3, #1
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d106      	bne.n	800c7fa <f_read+0x78>
 800c7ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7ee:	2107      	movs	r1, #7
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7fc fb16 	bl	8008e22 <unlock_fs>
 800c7f6:	2307      	movs	r3, #7
 800c7f8:	e185      	b.n	800cb06 <f_read+0x384>
	remain = fp->obj.objsize - fp->fptr;
 800c7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7fc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c802:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800c806:	ebb0 0802 	subs.w	r8, r0, r2
 800c80a:	eb61 0903 	sbc.w	r9, r1, r3
 800c80e:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c814:	2200      	movs	r2, #0
 800c816:	461c      	mov	r4, r3
 800c818:	4615      	mov	r5, r2
 800c81a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c81e:	42a2      	cmp	r2, r4
 800c820:	41ab      	sbcs	r3, r5
 800c822:	f080 8166 	bcs.w	800caf2 <f_read+0x370>
 800c826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c828:	627b      	str	r3, [r7, #36]	@ 0x24

	for ( ;  btr;								/* Repeat until all data read */
 800c82a:	e162      	b.n	800caf2 <f_read+0x370>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c82c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c82e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800c832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c834:	899b      	ldrh	r3, [r3, #12]
 800c836:	b29b      	uxth	r3, r3
 800c838:	2200      	movs	r2, #0
 800c83a:	61bb      	str	r3, [r7, #24]
 800c83c:	61fa      	str	r2, [r7, #28]
 800c83e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c842:	f7f4 f9a3 	bl	8000b8c <__aeabi_uldivmod>
 800c846:	4313      	orrs	r3, r2
 800c848:	f040 8107 	bne.w	800ca5a <f_read+0x2d8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c84c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c84e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800c852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c854:	899b      	ldrh	r3, [r3, #12]
 800c856:	b29b      	uxth	r3, r3
 800c858:	2200      	movs	r2, #0
 800c85a:	613b      	str	r3, [r7, #16]
 800c85c:	617a      	str	r2, [r7, #20]
 800c85e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c862:	f7f4 f993 	bl	8000b8c <__aeabi_uldivmod>
 800c866:	4602      	mov	r2, r0
 800c868:	460b      	mov	r3, r1
 800c86a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c86c:	895b      	ldrh	r3, [r3, #10]
 800c86e:	3b01      	subs	r3, #1
 800c870:	4013      	ands	r3, r2
 800c872:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (csect == 0) {					/* On the cluster boundary? */
 800c874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c876:	2b00      	cmp	r3, #0
 800c878:	d13c      	bne.n	800c8f4 <f_read+0x172>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c87a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c87c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800c880:	4313      	orrs	r3, r2
 800c882:	d103      	bne.n	800c88c <f_read+0x10a>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c88a:	e013      	b.n	800c8b4 <f_read+0x132>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c88e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c890:	2b00      	cmp	r3, #0
 800c892:	d007      	beq.n	800c8a4 <f_read+0x122>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c896:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800c89a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c89c:	f7fd facd 	bl	8009e3a <clmt_clust>
 800c8a0:	65b8      	str	r0, [r7, #88]	@ 0x58
 800c8a2:	e007      	b.n	800c8b4 <f_read+0x132>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c8a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	4610      	mov	r0, r2
 800c8ae:	f7fc fd41 	bl	8009334 <get_fat>
 800c8b2:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c8b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d80a      	bhi.n	800c8d0 <f_read+0x14e>
 800c8ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8bc:	2202      	movs	r2, #2
 800c8be:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800c8c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8c4:	2102      	movs	r1, #2
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f7fc faab 	bl	8008e22 <unlock_fs>
 800c8cc:	2302      	movs	r3, #2
 800c8ce:	e11a      	b.n	800cb06 <f_read+0x384>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c8d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c8d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8d6:	d10a      	bne.n	800c8ee <f_read+0x16c>
 800c8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8da:	2201      	movs	r2, #1
 800c8dc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800c8e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8e2:	2101      	movs	r1, #1
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f7fc fa9c 	bl	8008e22 <unlock_fs>
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	e10b      	b.n	800cb06 <f_read+0x384>
				fp->clust = clst;				/* Update current cluster */
 800c8ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c8f2:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c8f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c8f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	4610      	mov	r0, r2
 800c8fe:	f7fc fcf9 	bl	80092f4 <clust2sect>
 800c902:	63b8      	str	r0, [r7, #56]	@ 0x38
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c906:	2b00      	cmp	r3, #0
 800c908:	d10a      	bne.n	800c920 <f_read+0x19e>
 800c90a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c90c:	2202      	movs	r2, #2
 800c90e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800c912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c914:	2102      	movs	r1, #2
 800c916:	4618      	mov	r0, r3
 800c918:	f7fc fa83 	bl	8008e22 <unlock_fs>
 800c91c:	2302      	movs	r3, #2
 800c91e:	e0f2      	b.n	800cb06 <f_read+0x384>
			sect += csect;
 800c920:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c924:	4413      	add	r3, r2
 800c926:	63bb      	str	r3, [r7, #56]	@ 0x38
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c92a:	899b      	ldrh	r3, [r3, #12]
 800c92c:	461a      	mov	r2, r3
 800c92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c930:	fbb3 f3f2 	udiv	r3, r3, r2
 800c934:	653b      	str	r3, [r7, #80]	@ 0x50
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c936:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d048      	beq.n	800c9ce <f_read+0x24c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c93c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c93e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c940:	4413      	add	r3, r2
 800c942:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c944:	8952      	ldrh	r2, [r2, #10]
 800c946:	4293      	cmp	r3, r2
 800c948:	d905      	bls.n	800c956 <f_read+0x1d4>
					cc = fs->csize - csect;
 800c94a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c94c:	895b      	ldrh	r3, [r3, #10]
 800c94e:	461a      	mov	r2, r3
 800c950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c952:	1ad3      	subs	r3, r2, r3
 800c954:	653b      	str	r3, [r7, #80]	@ 0x50
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c958:	7858      	ldrb	r0, [r3, #1]
 800c95a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c95c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c95e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800c960:	f7fb ff88 	bl	8008874 <disk_read>
 800c964:	4603      	mov	r3, r0
 800c966:	2b00      	cmp	r3, #0
 800c968:	d00a      	beq.n	800c980 <f_read+0x1fe>
 800c96a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c96c:	2201      	movs	r2, #1
 800c96e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800c972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c974:	2101      	movs	r1, #1
 800c976:	4618      	mov	r0, r3
 800c978:	f7fc fa53 	bl	8008e22 <unlock_fs>
 800c97c:	2301      	movs	r3, #1
 800c97e:	e0c2      	b.n	800cb06 <f_read+0x384>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c982:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c986:	b25b      	sxtb	r3, r3
 800c988:	2b00      	cmp	r3, #0
 800c98a:	da18      	bge.n	800c9be <f_read+0x23c>
 800c98c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c98e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c992:	1ad3      	subs	r3, r2, r3
 800c994:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c996:	429a      	cmp	r2, r3
 800c998:	d911      	bls.n	800c9be <f_read+0x23c>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c99a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c99c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9a0:	1ad3      	subs	r3, r2, r3
 800c9a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c9a4:	8992      	ldrh	r2, [r2, #12]
 800c9a6:	fb02 f303 	mul.w	r3, r2, r3
 800c9aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c9ac:	18d0      	adds	r0, r2, r3
 800c9ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9b0:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800c9b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9b6:	899b      	ldrh	r3, [r3, #12]
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	f7fc f99e 	bl	8008cfa <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c9be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9c0:	899b      	ldrh	r3, [r3, #12]
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9c6:	fb02 f303 	mul.w	r3, r2, r3
 800c9ca:	657b      	str	r3, [r7, #84]	@ 0x54
				continue;
 800c9cc:	e071      	b.n	800cab2 <f_read+0x330>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c9ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d03d      	beq.n	800ca54 <f_read+0x2d2>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c9d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c9de:	b25b      	sxtb	r3, r3
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	da20      	bge.n	800ca26 <f_read+0x2a4>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c9e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9e6:	7858      	ldrb	r0, [r3, #1]
 800c9e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ea:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800c9ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	f7fb ff5e 	bl	80088b4 <disk_write>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d00a      	beq.n	800ca14 <f_read+0x292>
 800c9fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca00:	2201      	movs	r2, #1
 800ca02:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ca06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca08:	2101      	movs	r1, #1
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f7fc fa09 	bl	8008e22 <unlock_fs>
 800ca10:	2301      	movs	r3, #1
 800ca12:	e078      	b.n	800cb06 <f_read+0x384>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ca14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ca1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca1e:	b2da      	uxtb	r2, r3
 800ca20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca22:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ca26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca28:	7858      	ldrb	r0, [r3, #1]
 800ca2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca2c:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ca30:	2301      	movs	r3, #1
 800ca32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca34:	f7fb ff1e 	bl	8008874 <disk_read>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d00a      	beq.n	800ca54 <f_read+0x2d2>
 800ca3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca40:	2201      	movs	r2, #1
 800ca42:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ca46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca48:	2101      	movs	r1, #1
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7fc f9e9 	bl	8008e22 <unlock_fs>
 800ca50:	2301      	movs	r3, #1
 800ca52:	e058      	b.n	800cb06 <f_read+0x384>
			}
#endif
			fp->sect = sect;
 800ca54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca58:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ca5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca5c:	899b      	ldrh	r3, [r3, #12]
 800ca5e:	4618      	mov	r0, r3
 800ca60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca62:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ca66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca68:	899b      	ldrh	r3, [r3, #12]
 800ca6a:	fbb2 f1f3 	udiv	r1, r2, r3
 800ca6e:	fb01 f303 	mul.w	r3, r1, r3
 800ca72:	1ad3      	subs	r3, r2, r3
 800ca74:	1ac3      	subs	r3, r0, r3
 800ca76:	657b      	str	r3, [r7, #84]	@ 0x54
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ca78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ca7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d901      	bls.n	800ca84 <f_read+0x302>
 800ca80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca82:	657b      	str	r3, [r7, #84]	@ 0x54
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ca84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca86:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 800ca8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca8c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ca90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca92:	899b      	ldrh	r3, [r3, #12]
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	2200      	movs	r2, #0
 800ca98:	60bb      	str	r3, [r7, #8]
 800ca9a:	60fa      	str	r2, [r7, #12]
 800ca9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800caa0:	f7f4 f874 	bl	8000b8c <__aeabi_uldivmod>
 800caa4:	4613      	mov	r3, r2
 800caa6:	4423      	add	r3, r4
 800caa8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800caaa:	4619      	mov	r1, r3
 800caac:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800caae:	f7fc f924 	bl	8008cfa <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800cab2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cab6:	4413      	add	r3, r2
 800cab8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800caba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cabc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cac0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cac2:	2000      	movs	r0, #0
 800cac4:	468a      	mov	sl, r1
 800cac6:	4683      	mov	fp, r0
 800cac8:	eb12 010a 	adds.w	r1, r2, sl
 800cacc:	6039      	str	r1, [r7, #0]
 800cace:	eb43 030b 	adc.w	r3, r3, fp
 800cad2:	607b      	str	r3, [r7, #4]
 800cad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cad6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cada:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 800cade:	6a3b      	ldr	r3, [r7, #32]
 800cae0:	681a      	ldr	r2, [r3, #0]
 800cae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cae4:	441a      	add	r2, r3
 800cae6:	6a3b      	ldr	r3, [r7, #32]
 800cae8:	601a      	str	r2, [r3, #0]
 800caea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800caec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800caee:	1ad3      	subs	r3, r2, r3
 800caf0:	627b      	str	r3, [r7, #36]	@ 0x24
	for ( ;  btr;								/* Repeat until all data read */
 800caf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	f47f ae99 	bne.w	800c82c <f_read+0xaa>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800cafa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cafc:	2100      	movs	r1, #0
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7fc f98f 	bl	8008e22 <unlock_fs>
 800cb04:	2300      	movs	r3, #0
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3760      	adds	r7, #96	@ 0x60
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cb10 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb14:	b091      	sub	sp, #68	@ 0x44
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	61f8      	str	r0, [r7, #28]
 800cb1a:	61b9      	str	r1, [r7, #24]
 800cb1c:	617a      	str	r2, [r7, #20]
 800cb1e:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	62fb      	str	r3, [r7, #44]	@ 0x2c


	*bw = 0;	/* Clear write byte counter */
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	2200      	movs	r2, #0
 800cb28:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cb2a:	69fb      	ldr	r3, [r7, #28]
 800cb2c:	f107 0220 	add.w	r2, r7, #32
 800cb30:	4611      	mov	r1, r2
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7ff fa84 	bl	800c040 <validate>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cb3e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d108      	bne.n	800cb58 <f_write+0x48>
 800cb46:	69fb      	ldr	r3, [r7, #28]
 800cb48:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800cb4c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cb50:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d009      	beq.n	800cb6c <f_write+0x5c>
 800cb58:	6a3b      	ldr	r3, [r7, #32]
 800cb5a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cb5e:	4611      	mov	r1, r2
 800cb60:	4618      	mov	r0, r3
 800cb62:	f7fc f95e 	bl	8008e22 <unlock_fs>
 800cb66:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cb6a:	e1d2      	b.n	800cf12 <f_write+0x402>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cb72:	f003 0302 	and.w	r3, r3, #2
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d106      	bne.n	800cb88 <f_write+0x78>
 800cb7a:	6a3b      	ldr	r3, [r7, #32]
 800cb7c:	2107      	movs	r1, #7
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7fc f94f 	bl	8008e22 <unlock_fs>
 800cb84:	2307      	movs	r3, #7
 800cb86:	e1c4      	b.n	800cf12 <f_write+0x402>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800cb88:	6a3b      	ldr	r3, [r7, #32]
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	2b04      	cmp	r3, #4
 800cb8e:	f000 81ab 	beq.w	800cee8 <f_write+0x3d8>
 800cb92:	69fb      	ldr	r3, [r7, #28]
 800cb94:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	18d1      	adds	r1, r2, r3
 800cb9c:	69fb      	ldr	r3, [r7, #28]
 800cb9e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cba2:	4613      	mov	r3, r2
 800cba4:	4299      	cmp	r1, r3
 800cba6:	f080 819f 	bcs.w	800cee8 <f_write+0x3d8>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cbaa:	69fb      	ldr	r3, [r7, #28]
 800cbac:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cbb0:	4613      	mov	r3, r2
 800cbb2:	43db      	mvns	r3, r3
 800cbb4:	617b      	str	r3, [r7, #20]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800cbb6:	e197      	b.n	800cee8 <f_write+0x3d8>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800cbbe:	6a3b      	ldr	r3, [r7, #32]
 800cbc0:	899b      	ldrh	r3, [r3, #12]
 800cbc2:	b29b      	uxth	r3, r3
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	461d      	mov	r5, r3
 800cbc8:	4616      	mov	r6, r2
 800cbca:	462a      	mov	r2, r5
 800cbcc:	4633      	mov	r3, r6
 800cbce:	f7f3 ffdd 	bl	8000b8c <__aeabi_uldivmod>
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	f040 8128 	bne.w	800ce28 <f_write+0x318>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800cbd8:	69fb      	ldr	r3, [r7, #28]
 800cbda:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800cbde:	6a3b      	ldr	r3, [r7, #32]
 800cbe0:	899b      	ldrh	r3, [r3, #12]
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	60bb      	str	r3, [r7, #8]
 800cbe8:	60fa      	str	r2, [r7, #12]
 800cbea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cbee:	f7f3 ffcd 	bl	8000b8c <__aeabi_uldivmod>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	6a3b      	ldr	r3, [r7, #32]
 800cbf8:	895b      	ldrh	r3, [r3, #10]
 800cbfa:	3b01      	subs	r3, #1
 800cbfc:	4013      	ands	r3, r2
 800cbfe:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 800cc00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d150      	bne.n	800cca8 <f_write+0x198>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800cc06:	69fb      	ldr	r3, [r7, #28]
 800cc08:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	d10c      	bne.n	800cc2a <f_write+0x11a>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	689b      	ldr	r3, [r3, #8]
 800cc14:	63bb      	str	r3, [r7, #56]	@ 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 800cc16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d11a      	bne.n	800cc52 <f_write+0x142>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800cc1c:	69fb      	ldr	r3, [r7, #28]
 800cc1e:	2100      	movs	r1, #0
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7fd f809 	bl	8009c38 <create_chain>
 800cc26:	63b8      	str	r0, [r7, #56]	@ 0x38
 800cc28:	e013      	b.n	800cc52 <f_write+0x142>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d007      	beq.n	800cc42 <f_write+0x132>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cc32:	69fb      	ldr	r3, [r7, #28]
 800cc34:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cc38:	69f8      	ldr	r0, [r7, #28]
 800cc3a:	f7fd f8fe 	bl	8009e3a <clmt_clust>
 800cc3e:	63b8      	str	r0, [r7, #56]	@ 0x38
 800cc40:	e007      	b.n	800cc52 <f_write+0x142>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800cc42:	69fa      	ldr	r2, [r7, #28]
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc48:	4619      	mov	r1, r3
 800cc4a:	4610      	mov	r0, r2
 800cc4c:	f7fc fff4 	bl	8009c38 <create_chain>
 800cc50:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cc52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	f000 814c 	beq.w	800cef2 <f_write+0x3e2>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cc5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	d10a      	bne.n	800cc76 <f_write+0x166>
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	2202      	movs	r2, #2
 800cc64:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cc68:	6a3b      	ldr	r3, [r7, #32]
 800cc6a:	2102      	movs	r1, #2
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7fc f8d8 	bl	8008e22 <unlock_fs>
 800cc72:	2302      	movs	r3, #2
 800cc74:	e14d      	b.n	800cf12 <f_write+0x402>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cc76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc7c:	d10a      	bne.n	800cc94 <f_write+0x184>
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	2201      	movs	r2, #1
 800cc82:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cc86:	6a3b      	ldr	r3, [r7, #32]
 800cc88:	2101      	movs	r1, #1
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7fc f8c9 	bl	8008e22 <unlock_fs>
 800cc90:	2301      	movs	r3, #1
 800cc92:	e13e      	b.n	800cf12 <f_write+0x402>
				fp->clust = clst;			/* Update current cluster */
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc98:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	689b      	ldr	r3, [r3, #8]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d102      	bne.n	800cca8 <f_write+0x198>
 800cca2:	69fb      	ldr	r3, [r7, #28]
 800cca4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cca6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800cca8:	69fb      	ldr	r3, [r7, #28]
 800ccaa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ccae:	b25b      	sxtb	r3, r3
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	da20      	bge.n	800ccf6 <f_write+0x1e6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ccb4:	6a3b      	ldr	r3, [r7, #32]
 800ccb6:	7858      	ldrb	r0, [r3, #1]
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ccbe:	69fb      	ldr	r3, [r7, #28]
 800ccc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	f7fb fdf6 	bl	80088b4 <disk_write>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d00a      	beq.n	800cce4 <f_write+0x1d4>
 800ccce:	69fb      	ldr	r3, [r7, #28]
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ccd6:	6a3b      	ldr	r3, [r7, #32]
 800ccd8:	2101      	movs	r1, #1
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7fc f8a1 	bl	8008e22 <unlock_fs>
 800cce0:	2301      	movs	r3, #1
 800cce2:	e116      	b.n	800cf12 <f_write+0x402>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ccea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccee:	b2da      	uxtb	r2, r3
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ccf6:	6a3a      	ldr	r2, [r7, #32]
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccfc:	4619      	mov	r1, r3
 800ccfe:	4610      	mov	r0, r2
 800cd00:	f7fc faf8 	bl	80092f4 <clust2sect>
 800cd04:	6278      	str	r0, [r7, #36]	@ 0x24
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cd06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d10a      	bne.n	800cd22 <f_write+0x212>
 800cd0c:	69fb      	ldr	r3, [r7, #28]
 800cd0e:	2202      	movs	r2, #2
 800cd10:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cd14:	6a3b      	ldr	r3, [r7, #32]
 800cd16:	2102      	movs	r1, #2
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7fc f882 	bl	8008e22 <unlock_fs>
 800cd1e:	2302      	movs	r3, #2
 800cd20:	e0f7      	b.n	800cf12 <f_write+0x402>
			sect += csect;
 800cd22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd26:	4413      	add	r3, r2
 800cd28:	627b      	str	r3, [r7, #36]	@ 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800cd2a:	6a3b      	ldr	r3, [r7, #32]
 800cd2c:	899b      	ldrh	r3, [r3, #12]
 800cd2e:	461a      	mov	r2, r3
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd36:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cc) {						/* Write maximum contiguous sectors directly */
 800cd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d04b      	beq.n	800cdd6 <f_write+0x2c6>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cd3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd42:	4413      	add	r3, r2
 800cd44:	6a3a      	ldr	r2, [r7, #32]
 800cd46:	8952      	ldrh	r2, [r2, #10]
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	d905      	bls.n	800cd58 <f_write+0x248>
					cc = fs->csize - csect;
 800cd4c:	6a3b      	ldr	r3, [r7, #32]
 800cd4e:	895b      	ldrh	r3, [r3, #10]
 800cd50:	461a      	mov	r2, r3
 800cd52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd54:	1ad3      	subs	r3, r2, r3
 800cd56:	633b      	str	r3, [r7, #48]	@ 0x30
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cd58:	6a3b      	ldr	r3, [r7, #32]
 800cd5a:	7858      	ldrb	r0, [r3, #1]
 800cd5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd62:	f7fb fda7 	bl	80088b4 <disk_write>
 800cd66:	4603      	mov	r3, r0
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d00a      	beq.n	800cd82 <f_write+0x272>
 800cd6c:	69fb      	ldr	r3, [r7, #28]
 800cd6e:	2201      	movs	r2, #1
 800cd70:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cd74:	6a3b      	ldr	r3, [r7, #32]
 800cd76:	2101      	movs	r1, #1
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7fc f852 	bl	8008e22 <unlock_fs>
 800cd7e:	2301      	movs	r3, #1
 800cd80:	e0c7      	b.n	800cf12 <f_write+0x402>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cd82:	69fb      	ldr	r3, [r7, #28]
 800cd84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd88:	1ad3      	subs	r3, r2, r3
 800cd8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d91a      	bls.n	800cdc6 <f_write+0x2b6>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cd90:	69fb      	ldr	r3, [r7, #28]
 800cd92:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800cd96:	69fb      	ldr	r3, [r7, #28]
 800cd98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd9c:	1ad3      	subs	r3, r2, r3
 800cd9e:	6a3a      	ldr	r2, [r7, #32]
 800cda0:	8992      	ldrh	r2, [r2, #12]
 800cda2:	fb02 f303 	mul.w	r3, r2, r3
 800cda6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cda8:	18d1      	adds	r1, r2, r3
 800cdaa:	6a3b      	ldr	r3, [r7, #32]
 800cdac:	899b      	ldrh	r3, [r3, #12]
 800cdae:	461a      	mov	r2, r3
 800cdb0:	f7fb ffa3 	bl	8008cfa <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cdb4:	69fb      	ldr	r3, [r7, #28]
 800cdb6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cdba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cdbe:	b2da      	uxtb	r2, r3
 800cdc0:	69fb      	ldr	r3, [r7, #28]
 800cdc2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cdc6:	6a3b      	ldr	r3, [r7, #32]
 800cdc8:	899b      	ldrh	r3, [r3, #12]
 800cdca:	461a      	mov	r2, r3
 800cdcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdce:	fb02 f303 	mul.w	r3, r2, r3
 800cdd2:	637b      	str	r3, [r7, #52]	@ 0x34
				continue;
 800cdd4:	e05d      	b.n	800ce92 <f_write+0x382>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cdd6:	69fb      	ldr	r3, [r7, #28]
 800cdd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d020      	beq.n	800ce22 <f_write+0x312>
				fp->fptr < fp->obj.objsize &&
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800cde6:	69fb      	ldr	r3, [r7, #28]
 800cde8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cdec:	4290      	cmp	r0, r2
 800cdee:	eb71 0303 	sbcs.w	r3, r1, r3
 800cdf2:	d216      	bcs.n	800ce22 <f_write+0x312>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cdf4:	6a3b      	ldr	r3, [r7, #32]
 800cdf6:	7858      	ldrb	r0, [r3, #1]
 800cdf8:	69fb      	ldr	r3, [r7, #28]
 800cdfa:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800cdfe:	2301      	movs	r3, #1
 800ce00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce02:	f7fb fd37 	bl	8008874 <disk_read>
 800ce06:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d00a      	beq.n	800ce22 <f_write+0x312>
					ABORT(fs, FR_DISK_ERR);
 800ce0c:	69fb      	ldr	r3, [r7, #28]
 800ce0e:	2201      	movs	r2, #1
 800ce10:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ce14:	6a3b      	ldr	r3, [r7, #32]
 800ce16:	2101      	movs	r1, #1
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7fc f802 	bl	8008e22 <unlock_fs>
 800ce1e:	2301      	movs	r3, #1
 800ce20:	e077      	b.n	800cf12 <f_write+0x402>
			}
#endif
			fp->sect = sect;
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce26:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ce28:	6a3b      	ldr	r3, [r7, #32]
 800ce2a:	899b      	ldrh	r3, [r3, #12]
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	69fb      	ldr	r3, [r7, #28]
 800ce30:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ce34:	6a3b      	ldr	r3, [r7, #32]
 800ce36:	899b      	ldrh	r3, [r3, #12]
 800ce38:	fbb2 f1f3 	udiv	r1, r2, r3
 800ce3c:	fb01 f303 	mul.w	r3, r1, r3
 800ce40:	1ad3      	subs	r3, r2, r3
 800ce42:	1ac3      	subs	r3, r0, r3
 800ce44:	637b      	str	r3, [r7, #52]	@ 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ce46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d901      	bls.n	800ce52 <f_write+0x342>
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	637b      	str	r3, [r7, #52]	@ 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ce52:	69fb      	ldr	r3, [r7, #28]
 800ce54:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ce5e:	6a3b      	ldr	r3, [r7, #32]
 800ce60:	899b      	ldrh	r3, [r3, #12]
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	2200      	movs	r2, #0
 800ce66:	603b      	str	r3, [r7, #0]
 800ce68:	607a      	str	r2, [r7, #4]
 800ce6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce6e:	f7f3 fe8d 	bl	8000b8c <__aeabi_uldivmod>
 800ce72:	4613      	mov	r3, r2
 800ce74:	4423      	add	r3, r4
 800ce76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7fb ff3d 	bl	8008cfa <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ce80:	69fb      	ldr	r3, [r7, #28]
 800ce82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce86:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ce8a:	b2da      	uxtb	r2, r3
 800ce8c:	69fb      	ldr	r3, [r7, #28]
 800ce8e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ce92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce96:	4413      	add	r3, r2
 800ce98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ce9a:	69fb      	ldr	r3, [r7, #28]
 800ce9c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cea0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cea2:	2000      	movs	r0, #0
 800cea4:	4688      	mov	r8, r1
 800cea6:	4681      	mov	r9, r0
 800cea8:	eb12 0a08 	adds.w	sl, r2, r8
 800ceac:	eb43 0b09 	adc.w	fp, r3, r9
 800ceb0:	69fb      	ldr	r3, [r7, #28]
 800ceb2:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800ceb6:	69fb      	ldr	r3, [r7, #28]
 800ceb8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800cebc:	69fb      	ldr	r3, [r7, #28]
 800cebe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cec2:	4290      	cmp	r0, r2
 800cec4:	eb71 0403 	sbcs.w	r4, r1, r3
 800cec8:	d201      	bcs.n	800cece <f_write+0x3be>
 800ceca:	4610      	mov	r0, r2
 800cecc:	4619      	mov	r1, r3
 800cece:	69fb      	ldr	r3, [r7, #28]
 800ced0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	681a      	ldr	r2, [r3, #0]
 800ced8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceda:	441a      	add	r2, r3
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	601a      	str	r2, [r3, #0]
 800cee0:	697a      	ldr	r2, [r7, #20]
 800cee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cee4:	1ad3      	subs	r3, r2, r3
 800cee6:	617b      	str	r3, [r7, #20]
	for ( ;  btw;							/* Repeat until all data written */
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	f47f ae64 	bne.w	800cbb8 <f_write+0xa8>
 800cef0:	e000      	b.n	800cef4 <f_write+0x3e4>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cef2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800cef4:	69fb      	ldr	r3, [r7, #28]
 800cef6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cefa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cefe:	b2da      	uxtb	r2, r3
 800cf00:	69fb      	ldr	r3, [r7, #28]
 800cf02:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 800cf06:	6a3b      	ldr	r3, [r7, #32]
 800cf08:	2100      	movs	r1, #0
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7fb ff89 	bl	8008e22 <unlock_fs>
 800cf10:	2300      	movs	r3, #0
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3744      	adds	r7, #68	@ 0x44
 800cf16:	46bd      	mov	sp, r7
 800cf18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf1c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b09c      	sub	sp, #112	@ 0x70
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800cf2a:	4611      	mov	r1, r2
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7ff f887 	bl	800c040 <validate>
 800cf32:	4603      	mov	r3, r0
 800cf34:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (res == FR_OK) {
 800cf38:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	f040 8123 	bne.w	800d188 <f_sync+0x26c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cf48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	f000 811b 	beq.w	800d188 <f_sync+0x26c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cf58:	b25b      	sxtb	r3, r3
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	da1c      	bge.n	800cf98 <f_sync+0x7c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cf5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf60:	7858      	ldrb	r0, [r3, #1]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	f7fb fca1 	bl	80088b4 <disk_write>
 800cf72:	4603      	mov	r3, r0
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d006      	beq.n	800cf86 <f_sync+0x6a>
 800cf78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf7a:	2101      	movs	r1, #1
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7fb ff50 	bl	8008e22 <unlock_fs>
 800cf82:	2301      	movs	r3, #1
 800cf84:	e109      	b.n	800d19a <f_sync+0x27e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cf8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf90:	b2da      	uxtb	r2, r3
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cf98:	f7fb fbcc 	bl	8008734 <get_fattime>
 800cf9c:	66b8      	str	r0, [r7, #104]	@ 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800cf9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	2b04      	cmp	r3, #4
 800cfa4:	f040 80a5 	bne.w	800d0f2 <f_sync+0x1d6>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7fc fd30 	bl	8009a10 <fill_first_frag>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 800cfb6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d10a      	bne.n	800cfd4 <f_sync+0xb8>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfc4:	f04f 32ff 	mov.w	r2, #4294967295
 800cfc8:	4619      	mov	r1, r3
 800cfca:	f7fc fd50 	bl	8009a6e <fill_last_frag>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				}
				if (res == FR_OK) {
 800cfd4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	f040 80d5 	bne.w	800d188 <f_sync+0x26c>
					INIT_NAMBUF(fs);
 800cfde:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800cfe2:	f000 ffc7 	bl	800df74 <ff_memalloc>
 800cfe6:	6638      	str	r0, [r7, #96]	@ 0x60
 800cfe8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d106      	bne.n	800cffc <f_sync+0xe0>
 800cfee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cff0:	2111      	movs	r1, #17
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7fb ff15 	bl	8008e22 <unlock_fs>
 800cff8:	2311      	movs	r3, #17
 800cffa:	e0ce      	b.n	800d19a <f_sync+0x27e>
 800cffc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cffe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d000:	611a      	str	r2, [r3, #16]
 800d002:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d004:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d006:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800d00a:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800d00c:	687a      	ldr	r2, [r7, #4]
 800d00e:	f107 0308 	add.w	r3, r7, #8
 800d012:	4611      	mov	r1, r2
 800d014:	4618      	mov	r0, r3
 800d016:	f7fd fc81 	bl	800a91c <load_obj_dir>
 800d01a:	4603      	mov	r3, r0
 800d01c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					if (res == FR_OK) {
 800d020:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d024:	2b00      	cmp	r3, #0
 800d026:	d160      	bne.n	800d0ea <f_sync+0x1ce>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800d028:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d02a:	695b      	ldr	r3, [r3, #20]
 800d02c:	3304      	adds	r3, #4
 800d02e:	781a      	ldrb	r2, [r3, #0]
 800d030:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d032:	695b      	ldr	r3, [r3, #20]
 800d034:	3304      	adds	r3, #4
 800d036:	f042 0220 	orr.w	r2, r2, #32
 800d03a:	b2d2      	uxtb	r2, r2
 800d03c:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	79da      	ldrb	r2, [r3, #7]
 800d042:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d044:	695b      	ldr	r3, [r3, #20]
 800d046:	3321      	adds	r3, #33	@ 0x21
 800d048:	f042 0201 	orr.w	r2, r2, #1
 800d04c:	b2d2      	uxtb	r2, r2
 800d04e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800d050:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d052:	695b      	ldr	r3, [r3, #20]
 800d054:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	689b      	ldr	r3, [r3, #8]
 800d05c:	4619      	mov	r1, r3
 800d05e:	4610      	mov	r0, r2
 800d060:	f7fb fd97 	bl	8008b92 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800d064:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d066:	695b      	ldr	r3, [r3, #20]
 800d068:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d072:	4608      	mov	r0, r1
 800d074:	f7fb fdb9 	bl	8008bea <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800d078:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d07a:	695b      	ldr	r3, [r3, #20]
 800d07c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d086:	4608      	mov	r0, r1
 800d088:	f7fb fdaf 	bl	8008bea <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800d08c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d08e:	695b      	ldr	r3, [r3, #20]
 800d090:	330c      	adds	r3, #12
 800d092:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d094:	4618      	mov	r0, r3
 800d096:	f7fb fd7c 	bl	8008b92 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800d09a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d09c:	695b      	ldr	r3, [r3, #20]
 800d09e:	3315      	adds	r3, #21
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800d0a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0a6:	695b      	ldr	r3, [r3, #20]
 800d0a8:	3310      	adds	r3, #16
 800d0aa:	2100      	movs	r1, #0
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f7fb fd70 	bl	8008b92 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800d0b2:	f107 0308 	add.w	r3, r7, #8
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f7fd fc66 	bl	800a988 <store_xdir>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
						if (res == FR_OK) {
 800d0c2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d10f      	bne.n	800d0ea <f_sync+0x1ce>
							res = sync_fs(fs);
 800d0ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f7fc f8a1 	bl	8009214 <sync_fs>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d0de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d0e2:	b2da      	uxtb	r2, r3
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
						}
					}
					FREE_NAMBUF();
 800d0ea:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800d0ec:	f000 ff4e 	bl	800df8c <ff_memfree>
 800d0f0:	e04a      	b.n	800d188 <f_sync+0x26c>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d0f2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	4610      	mov	r0, r2
 800d0fc:	f7fc f85c 	bl	80091b8 <move_window>
 800d100:	4603      	mov	r3, r0
 800d102:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 800d106:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d13c      	bne.n	800d188 <f_sync+0x26c>
					dir = fp->dir_ptr;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d112:	667b      	str	r3, [r7, #100]	@ 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d116:	330b      	adds	r3, #11
 800d118:	781a      	ldrb	r2, [r3, #0]
 800d11a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d11c:	330b      	adds	r3, #11
 800d11e:	f042 0220 	orr.w	r2, r2, #32
 800d122:	b2d2      	uxtb	r2, r2
 800d124:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6818      	ldr	r0, [r3, #0]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	689b      	ldr	r3, [r3, #8]
 800d12e:	461a      	mov	r2, r3
 800d130:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800d132:	f7fd f8c3 	bl	800a2bc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d136:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d138:	f103 001c 	add.w	r0, r3, #28
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d142:	4613      	mov	r3, r2
 800d144:	4619      	mov	r1, r3
 800d146:	f7fb fd24 	bl	8008b92 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d14a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d14c:	3316      	adds	r3, #22
 800d14e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d150:	4618      	mov	r0, r3
 800d152:	f7fb fd1e 	bl	8008b92 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d156:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d158:	3312      	adds	r3, #18
 800d15a:	2100      	movs	r1, #0
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7fb fcfd 	bl	8008b5c <st_word>
					fs->wflag = 1;
 800d162:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d164:	2201      	movs	r2, #1
 800d166:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d168:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d16a:	4618      	mov	r0, r3
 800d16c:	f7fc f852 	bl	8009214 <sync_fs>
 800d170:	4603      	mov	r3, r0
 800d172:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d17c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d180:	b2da      	uxtb	r2, r3
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d188:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d18a:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800d18e:	4611      	mov	r1, r2
 800d190:	4618      	mov	r0, r3
 800d192:	f7fb fe46 	bl	8008e22 <unlock_fs>
 800d196:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	3770      	adds	r7, #112	@ 0x70
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}

0800d1a2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d1a2:	b580      	push	{r7, lr}
 800d1a4:	b084      	sub	sp, #16
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f7ff feb6 	bl	800cf1c <f_sync>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d1b4:	7bfb      	ldrb	r3, [r7, #15]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d11d      	bne.n	800d1f6 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f107 0208 	add.w	r2, r7, #8
 800d1c0:	4611      	mov	r1, r2
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7fe ff3c 	bl	800c040 <validate>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d1cc:	7bfb      	ldrb	r3, [r7, #15]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d111      	bne.n	800d1f6 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f7fb ff4a 	bl	8009070 <dec_lock>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d1e0:	7bfb      	ldrb	r3, [r7, #15]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d102      	bne.n	800d1ec <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	2100      	movs	r1, #0
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7fb fe16 	bl	8008e22 <unlock_fs>
#endif
		}
	}
	return res;
 800d1f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3710      	adds	r7, #16
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d204:	b0ba      	sub	sp, #232	@ 0xe8
 800d206:	af00      	add	r7, sp, #0
 800d208:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 800d20c:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d210:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800d214:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800d218:	4619      	mov	r1, r3
 800d21a:	4610      	mov	r0, r2
 800d21c:	f7fe ff10 	bl	800c040 <validate>
 800d220:	4603      	mov	r3, r0
 800d222:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d226:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d105      	bne.n	800d23a <f_lseek+0x3a>
 800d22e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d232:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d236:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 800d23a:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d111      	bne.n	800d266 <f_lseek+0x66>
 800d242:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d246:	781b      	ldrb	r3, [r3, #0]
 800d248:	2b04      	cmp	r3, #4
 800d24a:	d10c      	bne.n	800d266 <f_lseek+0x66>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800d24c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800d250:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d256:	f04f 32ff 	mov.w	r2, #4294967295
 800d25a:	4619      	mov	r1, r3
 800d25c:	f7fc fc07 	bl	8009a6e <fill_last_frag>
 800d260:	4603      	mov	r3, r0
 800d262:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d266:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d00a      	beq.n	800d284 <f_lseek+0x84>
 800d26e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d272:	f897 20e7 	ldrb.w	r2, [r7, #231]	@ 0xe7
 800d276:	4611      	mov	r1, r2
 800d278:	4618      	mov	r0, r3
 800d27a:	f7fb fdd2 	bl	8008e22 <unlock_fs>
 800d27e:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800d282:	e3fb      	b.n	800da7c <f_lseek+0x87c>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d284:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	f000 8170 	beq.w	800d570 <f_lseek+0x370>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d290:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800d294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d298:	bf08      	it	eq
 800d29a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800d29e:	f040 8093 	bne.w	800d3c8 <f_lseek+0x1c8>
			tbl = fp->cltbl;
 800d2a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d2a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d2ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d2b0:	1d1a      	adds	r2, r3, #4
 800d2b2:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d2bc:	2302      	movs	r3, #2
 800d2be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d2c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d2c6:	689b      	ldr	r3, [r3, #8]
 800d2c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			if (cl) {
 800d2cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d064      	beq.n	800d39e <f_lseek+0x19e>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d2d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d2d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d2dc:	2300      	movs	r3, #0
 800d2de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d2e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800d2e6:	3302      	adds	r3, #2
 800d2e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
					do {
						pcl = cl; ncl++;
 800d2ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d2f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d2f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
						cl = get_fat(&fp->obj, cl);
 800d2fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d302:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800d306:	4618      	mov	r0, r3
 800d308:	f7fc f814 	bl	8009334 <get_fat>
 800d30c:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d310:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d314:	2b01      	cmp	r3, #1
 800d316:	d80c      	bhi.n	800d332 <f_lseek+0x132>
 800d318:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d31c:	2202      	movs	r2, #2
 800d31e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d322:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d326:	2102      	movs	r1, #2
 800d328:	4618      	mov	r0, r3
 800d32a:	f7fb fd7a 	bl	8008e22 <unlock_fs>
 800d32e:	2302      	movs	r3, #2
 800d330:	e3a4      	b.n	800da7c <f_lseek+0x87c>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d332:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d33a:	d10c      	bne.n	800d356 <f_lseek+0x156>
 800d33c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d340:	2201      	movs	r2, #1
 800d342:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d346:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d34a:	2101      	movs	r1, #1
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7fb fd68 	bl	8008e22 <unlock_fs>
 800d352:	2301      	movs	r3, #1
 800d354:	e392      	b.n	800da7c <f_lseek+0x87c>
					} while (cl == pcl + 1);
 800d356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d35a:	3301      	adds	r3, #1
 800d35c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800d360:	429a      	cmp	r2, r3
 800d362:	d0c3      	beq.n	800d2ec <f_lseek+0xec>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d364:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d368:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d80f      	bhi.n	800d390 <f_lseek+0x190>
						*tbl++ = ncl; *tbl++ = tcl;
 800d370:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d374:	1d1a      	adds	r2, r3, #4
 800d376:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800d37a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800d37e:	601a      	str	r2, [r3, #0]
 800d380:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d384:	1d1a      	adds	r2, r3, #4
 800d386:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800d38a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d38e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d390:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d396:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800d39a:	429a      	cmp	r2, r3
 800d39c:	d39a      	bcc.n	800d2d4 <f_lseek+0xd4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d39e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d3a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3a4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d3a8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d3aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d3ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d804      	bhi.n	800d3c0 <f_lseek+0x1c0>
				*tbl = 0;		/* Terminate table */
 800d3b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	601a      	str	r2, [r3, #0]
 800d3be:	e353      	b.n	800da68 <f_lseek+0x868>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d3c0:	2311      	movs	r3, #17
 800d3c2:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
 800d3c6:	e34f      	b.n	800da68 <f_lseek+0x868>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d3c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d3cc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800d3d0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800d3d4:	4290      	cmp	r0, r2
 800d3d6:	eb71 0303 	sbcs.w	r3, r1, r3
 800d3da:	d205      	bcs.n	800d3e8 <f_lseek+0x1e8>
 800d3dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d3e0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d3e4:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
			fp->fptr = ofs;				/* Set file pointer */
 800d3e8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d3ec:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800d3f0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
			if (ofs) {
 800d3f4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	f000 8335 	beq.w	800da68 <f_lseek+0x868>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d3fe:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800d402:	f112 38ff 	adds.w	r8, r2, #4294967295
 800d406:	f143 39ff 	adc.w	r9, r3, #4294967295
 800d40a:	4642      	mov	r2, r8
 800d40c:	464b      	mov	r3, r9
 800d40e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800d412:	f7fc fd12 	bl	8009e3a <clmt_clust>
 800d416:	4602      	mov	r2, r0
 800d418:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d41c:	641a      	str	r2, [r3, #64]	@ 0x40
				dsc = clust2sect(fs, fp->clust);
 800d41e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d422:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d428:	4619      	mov	r1, r3
 800d42a:	4610      	mov	r0, r2
 800d42c:	f7fb ff62 	bl	80092f4 <clust2sect>
 800d430:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d434:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d10c      	bne.n	800d456 <f_lseek+0x256>
 800d43c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d440:	2202      	movs	r2, #2
 800d442:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d446:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d44a:	2102      	movs	r1, #2
 800d44c:	4618      	mov	r0, r3
 800d44e:	f7fb fce8 	bl	8008e22 <unlock_fs>
 800d452:	2302      	movs	r3, #2
 800d454:	e312      	b.n	800da7c <f_lseek+0x87c>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d456:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800d45a:	1e54      	subs	r4, r2, #1
 800d45c:	f143 35ff 	adc.w	r5, r3, #4294967295
 800d460:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d464:	899b      	ldrh	r3, [r3, #12]
 800d466:	b29b      	uxth	r3, r3
 800d468:	2200      	movs	r2, #0
 800d46a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d46e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d472:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800d476:	4620      	mov	r0, r4
 800d478:	4629      	mov	r1, r5
 800d47a:	f7f3 fb87 	bl	8000b8c <__aeabi_uldivmod>
 800d47e:	4602      	mov	r2, r0
 800d480:	460b      	mov	r3, r1
 800d482:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d486:	895b      	ldrh	r3, [r3, #10]
 800d488:	3b01      	subs	r3, #1
 800d48a:	4013      	ands	r3, r2
 800d48c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d490:	4413      	add	r3, r2
 800d492:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d496:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d49a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800d49e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d4a2:	899b      	ldrh	r3, [r3, #12]
 800d4a4:	b29b      	uxth	r3, r3
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d4ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d4b0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800d4b4:	f7f3 fb6a 	bl	8000b8c <__aeabi_uldivmod>
 800d4b8:	4313      	orrs	r3, r2
 800d4ba:	f000 82d5 	beq.w	800da68 <f_lseek+0x868>
 800d4be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d4c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	f000 82cd 	beq.w	800da68 <f_lseek+0x868>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d4ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d4d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d4d6:	b25b      	sxtb	r3, r3
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	da27      	bge.n	800d52c <f_lseek+0x32c>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d4dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d4e0:	7858      	ldrb	r0, [r3, #1]
 800d4e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d4e6:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800d4ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d4ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	f7fb f9df 	bl	80088b4 <disk_write>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d00c      	beq.n	800d516 <f_lseek+0x316>
 800d4fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d500:	2201      	movs	r2, #1
 800d502:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d506:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d50a:	2101      	movs	r1, #1
 800d50c:	4618      	mov	r0, r3
 800d50e:	f7fb fc88 	bl	8008e22 <unlock_fs>
 800d512:	2301      	movs	r3, #1
 800d514:	e2b2      	b.n	800da7c <f_lseek+0x87c>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d516:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d51a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d51e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d522:	b2da      	uxtb	r2, r3
 800d524:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d528:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d52c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d530:	7858      	ldrb	r0, [r3, #1]
 800d532:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d536:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800d53a:	2301      	movs	r3, #1
 800d53c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d540:	f7fb f998 	bl	8008874 <disk_read>
 800d544:	4603      	mov	r3, r0
 800d546:	2b00      	cmp	r3, #0
 800d548:	d00c      	beq.n	800d564 <f_lseek+0x364>
 800d54a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d54e:	2201      	movs	r2, #1
 800d550:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d554:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d558:	2101      	movs	r1, #1
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7fb fc61 	bl	8008e22 <unlock_fs>
 800d560:	2301      	movs	r3, #1
 800d562:	e28b      	b.n	800da7c <f_lseek+0x87c>
#endif
					fp->sect = dsc;
 800d564:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d568:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d56c:	645a      	str	r2, [r3, #68]	@ 0x44
 800d56e:	e27b      	b.n	800da68 <f_lseek+0x868>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 800d570:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	2b04      	cmp	r3, #4
 800d578:	d009      	beq.n	800d58e <f_lseek+0x38e>
 800d57a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800d57e:	2b01      	cmp	r3, #1
 800d580:	d305      	bcc.n	800d58e <f_lseek+0x38e>
 800d582:	f04f 32ff 	mov.w	r2, #4294967295
 800d586:	f04f 0300 	mov.w	r3, #0
 800d58a:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d58e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d592:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800d596:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800d59a:	4290      	cmp	r0, r2
 800d59c:	eb71 0303 	sbcs.w	r3, r1, r3
 800d5a0:	d20d      	bcs.n	800d5be <f_lseek+0x3be>
 800d5a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d5a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d5aa:	f003 0302 	and.w	r3, r3, #2
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d105      	bne.n	800d5be <f_lseek+0x3be>
			ofs = fp->obj.objsize;
 800d5b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d5b6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d5ba:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
		}
		ifptr = fp->fptr;
 800d5be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d5c2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d5c6:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
		fp->fptr = nsect = 0;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d5d0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d5d4:	f04f 0200 	mov.w	r2, #0
 800d5d8:	f04f 0300 	mov.w	r3, #0
 800d5dc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		if (ofs) {
 800d5e0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800d5e4:	4313      	orrs	r3, r2
 800d5e6:	f000 81b8 	beq.w	800d95a <f_lseek+0x75a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d5ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d5ee:	895b      	ldrh	r3, [r3, #10]
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d5f6:	899b      	ldrh	r3, [r3, #12]
 800d5f8:	fb02 f303 	mul.w	r3, r2, r3
 800d5fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			if (ifptr > 0 &&
 800d600:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800d604:	4313      	orrs	r3, r2
 800d606:	d069      	beq.n	800d6dc <f_lseek+0x4dc>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d608:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800d60c:	1e51      	subs	r1, r2, #1
 800d60e:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800d612:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d616:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d61a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d61e:	2200      	movs	r2, #0
 800d620:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d622:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d624:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800d628:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d62c:	f7f3 faae 	bl	8000b8c <__aeabi_uldivmod>
 800d630:	4602      	mov	r2, r0
 800d632:	460b      	mov	r3, r1
 800d634:	4614      	mov	r4, r2
 800d636:	461d      	mov	r5, r3
 800d638:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800d63c:	1e51      	subs	r1, r2, #1
 800d63e:	6739      	str	r1, [r7, #112]	@ 0x70
 800d640:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d644:	677b      	str	r3, [r7, #116]	@ 0x74
 800d646:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d64a:	2200      	movs	r2, #0
 800d64c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d64e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d650:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800d654:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800d658:	f7f3 fa98 	bl	8000b8c <__aeabi_uldivmod>
 800d65c:	4602      	mov	r2, r0
 800d65e:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 800d660:	4294      	cmp	r4, r2
 800d662:	eb75 0303 	sbcs.w	r3, r5, r3
 800d666:	d339      	bcc.n	800d6dc <f_lseek+0x4dc>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d668:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800d66c:	1e51      	subs	r1, r2, #1
 800d66e:	6639      	str	r1, [r7, #96]	@ 0x60
 800d670:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d674:	667b      	str	r3, [r7, #100]	@ 0x64
 800d676:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d67a:	3b01      	subs	r3, #1
 800d67c:	2200      	movs	r2, #0
 800d67e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d680:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800d682:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800d686:	460b      	mov	r3, r1
 800d688:	ea6f 0a03 	mvn.w	sl, r3
 800d68c:	4613      	mov	r3, r2
 800d68e:	ea6f 0b03 	mvn.w	fp, r3
 800d692:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800d696:	460b      	mov	r3, r1
 800d698:	ea03 030a 	and.w	r3, r3, sl
 800d69c:	653b      	str	r3, [r7, #80]	@ 0x50
 800d69e:	4613      	mov	r3, r2
 800d6a0:	ea03 030b 	and.w	r3, r3, fp
 800d6a4:	657b      	str	r3, [r7, #84]	@ 0x54
 800d6a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d6aa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800d6ae:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
				ofs -= fp->fptr;
 800d6b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d6b6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800d6ba:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800d6be:	1a14      	subs	r4, r2, r0
 800d6c0:	60bc      	str	r4, [r7, #8]
 800d6c2:	eb63 0301 	sbc.w	r3, r3, r1
 800d6c6:	60fb      	str	r3, [r7, #12]
 800d6c8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d6cc:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
				clst = fp->clust;
 800d6d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d6d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d6da:	e03d      	b.n	800d758 <f_lseek+0x558>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d6dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d6e0:	689b      	ldr	r3, [r3, #8]
 800d6e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d6e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d12f      	bne.n	800d74e <f_lseek+0x54e>
					clst = create_chain(&fp->obj, 0);
 800d6ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d6f2:	2100      	movs	r1, #0
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7fc fa9f 	bl	8009c38 <create_chain>
 800d6fa:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d6fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d702:	2b01      	cmp	r3, #1
 800d704:	d10c      	bne.n	800d720 <f_lseek+0x520>
 800d706:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d70a:	2202      	movs	r2, #2
 800d70c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d710:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d714:	2102      	movs	r1, #2
 800d716:	4618      	mov	r0, r3
 800d718:	f7fb fb83 	bl	8008e22 <unlock_fs>
 800d71c:	2302      	movs	r3, #2
 800d71e:	e1ad      	b.n	800da7c <f_lseek+0x87c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d728:	d10c      	bne.n	800d744 <f_lseek+0x544>
 800d72a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d72e:	2201      	movs	r2, #1
 800d730:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d734:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d738:	2101      	movs	r1, #1
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7fb fb71 	bl	8008e22 <unlock_fs>
 800d740:	2301      	movs	r3, #1
 800d742:	e19b      	b.n	800da7c <f_lseek+0x87c>
					fp->obj.sclust = clst;
 800d744:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800d748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d74c:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 800d74e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800d752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d756:	6413      	str	r3, [r2, #64]	@ 0x40
			}
			if (clst != 0) {
 800d758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	f000 80fc 	beq.w	800d95a <f_lseek+0x75a>
				while (ofs > bcs) {						/* Cluster following loop */
 800d762:	e09c      	b.n	800d89e <f_lseek+0x69e>
					ofs -= bcs; fp->fptr += bcs;
 800d764:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d768:	2200      	movs	r2, #0
 800d76a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d76c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800d76e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800d772:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800d776:	4621      	mov	r1, r4
 800d778:	1a51      	subs	r1, r2, r1
 800d77a:	6039      	str	r1, [r7, #0]
 800d77c:	4629      	mov	r1, r5
 800d77e:	eb63 0301 	sbc.w	r3, r3, r1
 800d782:	607b      	str	r3, [r7, #4]
 800d784:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d788:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
 800d78c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d790:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d794:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 800d798:	2000      	movs	r0, #0
 800d79a:	6439      	str	r1, [r7, #64]	@ 0x40
 800d79c:	6478      	str	r0, [r7, #68]	@ 0x44
 800d79e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800d7a2:	4621      	mov	r1, r4
 800d7a4:	1851      	adds	r1, r2, r1
 800d7a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d7a8:	4629      	mov	r1, r5
 800d7aa:	414b      	adcs	r3, r1
 800d7ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d7ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d7b2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800d7b6:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d7ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d7be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d7c2:	f003 0302 	and.w	r3, r3, #2
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d031      	beq.n	800d82e <f_lseek+0x62e>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 800d7ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d7ce:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800d7d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d7d6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d7da:	4282      	cmp	r2, r0
 800d7dc:	418b      	sbcs	r3, r1
 800d7de:	d212      	bcs.n	800d806 <f_lseek+0x606>
							fp->obj.objsize = fp->fptr;
 800d7e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d7e4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800d7e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d7ec:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 800d7f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d7f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d7f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800d802:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d806:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d80a:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800d80e:	4618      	mov	r0, r3
 800d810:	f7fc fa12 	bl	8009c38 <create_chain>
 800d814:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d10f      	bne.n	800d840 <f_lseek+0x640>
							ofs = 0; break;
 800d820:	f04f 0200 	mov.w	r2, #0
 800d824:	f04f 0300 	mov.w	r3, #0
 800d828:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
 800d82c:	e047      	b.n	800d8be <f_lseek+0x6be>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d82e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d832:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800d836:	4618      	mov	r0, r3
 800d838:	f7fb fd7c 	bl	8009334 <get_fat>
 800d83c:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d844:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d848:	d10c      	bne.n	800d864 <f_lseek+0x664>
 800d84a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d84e:	2201      	movs	r2, #1
 800d850:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d854:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d858:	2101      	movs	r1, #1
 800d85a:	4618      	mov	r0, r3
 800d85c:	f7fb fae1 	bl	8008e22 <unlock_fs>
 800d860:	2301      	movs	r3, #1
 800d862:	e10b      	b.n	800da7c <f_lseek+0x87c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d868:	2b01      	cmp	r3, #1
 800d86a:	d906      	bls.n	800d87a <f_lseek+0x67a>
 800d86c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d870:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d876:	4293      	cmp	r3, r2
 800d878:	d30c      	bcc.n	800d894 <f_lseek+0x694>
 800d87a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d87e:	2202      	movs	r2, #2
 800d880:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d884:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d888:	2102      	movs	r1, #2
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7fb fac9 	bl	8008e22 <unlock_fs>
 800d890:	2302      	movs	r3, #2
 800d892:	e0f3      	b.n	800da7c <f_lseek+0x87c>
					fp->clust = clst;
 800d894:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800d898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d89c:	6413      	str	r3, [r2, #64]	@ 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 800d89e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	633b      	str	r3, [r7, #48]	@ 0x30
 800d8a6:	637a      	str	r2, [r7, #52]	@ 0x34
 800d8a8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800d8ac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800d8b0:	4621      	mov	r1, r4
 800d8b2:	4291      	cmp	r1, r2
 800d8b4:	4629      	mov	r1, r5
 800d8b6:	eb71 0303 	sbcs.w	r3, r1, r3
 800d8ba:	f4ff af53 	bcc.w	800d764 <f_lseek+0x564>
				}
				fp->fptr += ofs;
 800d8be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d8c2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800d8c6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800d8ca:	1884      	adds	r4, r0, r2
 800d8cc:	62bc      	str	r4, [r7, #40]	@ 0x28
 800d8ce:	eb41 0303 	adc.w	r3, r1, r3
 800d8d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d8d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d8d8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800d8dc:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
				if (ofs % SS(fs)) {
 800d8e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d8e4:	899b      	ldrh	r3, [r3, #12]
 800d8e6:	b29b      	uxth	r3, r3
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	623b      	str	r3, [r7, #32]
 800d8ec:	627a      	str	r2, [r7, #36]	@ 0x24
 800d8ee:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d8f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d8f6:	f7f3 f949 	bl	8000b8c <__aeabi_uldivmod>
 800d8fa:	4313      	orrs	r3, r2
 800d8fc:	d02d      	beq.n	800d95a <f_lseek+0x75a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d8fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d902:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800d906:	4618      	mov	r0, r3
 800d908:	f7fb fcf4 	bl	80092f4 <clust2sect>
 800d90c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d914:	2b00      	cmp	r3, #0
 800d916:	d10c      	bne.n	800d932 <f_lseek+0x732>
 800d918:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d91c:	2202      	movs	r2, #2
 800d91e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d922:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d926:	2102      	movs	r1, #2
 800d928:	4618      	mov	r0, r3
 800d92a:	f7fb fa7a 	bl	8008e22 <unlock_fs>
 800d92e:	2302      	movs	r3, #2
 800d930:	e0a4      	b.n	800da7c <f_lseek+0x87c>
					nsect += (DWORD)(ofs / SS(fs));
 800d932:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d936:	899b      	ldrh	r3, [r3, #12]
 800d938:	b29b      	uxth	r3, r3
 800d93a:	2200      	movs	r2, #0
 800d93c:	61bb      	str	r3, [r7, #24]
 800d93e:	61fa      	str	r2, [r7, #28]
 800d940:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d944:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d948:	f7f3 f920 	bl	8000b8c <__aeabi_uldivmod>
 800d94c:	4602      	mov	r2, r0
 800d94e:	460b      	mov	r3, r1
 800d950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d954:	4413      	add	r3, r2
 800d956:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d95a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d95e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d962:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d966:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800d96a:	4290      	cmp	r0, r2
 800d96c:	eb71 0303 	sbcs.w	r3, r1, r3
 800d970:	d212      	bcs.n	800d998 <f_lseek+0x798>
			fp->obj.objsize = fp->fptr;
 800d972:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d976:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d97a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d97e:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 800d982:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d986:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d98a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d98e:	b2da      	uxtb	r2, r3
 800d990:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d994:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d998:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d99c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800d9a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d9a4:	899b      	ldrh	r3, [r3, #12]
 800d9a6:	b29b      	uxth	r3, r3
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	613b      	str	r3, [r7, #16]
 800d9ac:	617a      	str	r2, [r7, #20]
 800d9ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d9b2:	f7f3 f8eb 	bl	8000b8c <__aeabi_uldivmod>
 800d9b6:	4313      	orrs	r3, r2
 800d9b8:	d056      	beq.n	800da68 <f_lseek+0x868>
 800d9ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d9be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d04f      	beq.n	800da68 <f_lseek+0x868>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d9c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d9cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d9d0:	b25b      	sxtb	r3, r3
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	da27      	bge.n	800da26 <f_lseek+0x826>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d9d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d9da:	7858      	ldrb	r0, [r3, #1]
 800d9dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d9e0:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800d9e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d9e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	f7fa ff62 	bl	80088b4 <disk_write>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d00c      	beq.n	800da10 <f_lseek+0x810>
 800d9f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800da00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800da04:	2101      	movs	r1, #1
 800da06:	4618      	mov	r0, r3
 800da08:	f7fb fa0b 	bl	8008e22 <unlock_fs>
 800da0c:	2301      	movs	r3, #1
 800da0e:	e035      	b.n	800da7c <f_lseek+0x87c>
				fp->flag &= (BYTE)~FA_DIRTY;
 800da10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800da14:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800da18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da1c:	b2da      	uxtb	r2, r3
 800da1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800da22:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800da26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800da2a:	7858      	ldrb	r0, [r3, #1]
 800da2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800da30:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800da34:	2301      	movs	r3, #1
 800da36:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800da3a:	f7fa ff1b 	bl	8008874 <disk_read>
 800da3e:	4603      	mov	r3, r0
 800da40:	2b00      	cmp	r3, #0
 800da42:	d00c      	beq.n	800da5e <f_lseek+0x85e>
 800da44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800da48:	2201      	movs	r2, #1
 800da4a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800da4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800da52:	2101      	movs	r1, #1
 800da54:	4618      	mov	r0, r3
 800da56:	f7fb f9e4 	bl	8008e22 <unlock_fs>
 800da5a:	2301      	movs	r3, #1
 800da5c:	e00e      	b.n	800da7c <f_lseek+0x87c>
#endif
			fp->sect = nsect;
 800da5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800da62:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800da66:	645a      	str	r2, [r3, #68]	@ 0x44
		}
	}

	LEAVE_FF(fs, res);
 800da68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800da6c:	f897 20e7 	ldrb.w	r2, [r7, #231]	@ 0xe7
 800da70:	4611      	mov	r1, r2
 800da72:	4618      	mov	r0, r3
 800da74:	f7fb f9d5 	bl	8008e22 <unlock_fs>
 800da78:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	37e8      	adds	r7, #232	@ 0xe8
 800da80:	46bd      	mov	sp, r7
 800da82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800da86 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800da86:	b580      	push	{r7, lr}
 800da88:	b0bc      	sub	sp, #240	@ 0xf0
 800da8a:	af00      	add	r7, sp, #0
 800da8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800da8e:	2300      	movs	r3, #0
 800da90:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800da94:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800da98:	1d3b      	adds	r3, r7, #4
 800da9a:	2202      	movs	r2, #2
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7fd ff37 	bl	800b910 <find_volume>
 800daa2:	4603      	mov	r3, r0
 800daa4:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
	dj.obj.fs = fs;
 800daa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daaa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	if (res == FR_OK) {
 800daae:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	f040 80e2 	bne.w	800dc7c <f_unlink+0x1f6>
		INIT_NAMBUF(fs);
 800dab8:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800dabc:	f000 fa5a 	bl	800df74 <ff_memalloc>
 800dac0:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 800dac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d106      	bne.n	800dada <f_unlink+0x54>
 800dacc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dace:	2111      	movs	r1, #17
 800dad0:	4618      	mov	r0, r3
 800dad2:	f7fb f9a6 	bl	8008e22 <unlock_fs>
 800dad6:	2311      	movs	r3, #17
 800dad8:	e0d9      	b.n	800dc8e <f_unlink+0x208>
 800dada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dadc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800dae0:	611a      	str	r2, [r3, #16]
 800dae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dae4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800dae8:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800daec:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);		/* Follow the file path */
 800daee:	687a      	ldr	r2, [r7, #4]
 800daf0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800daf4:	4611      	mov	r1, r2
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7fd fdb4 	bl	800b664 <follow_path>
 800dafc:	4603      	mov	r3, r0
 800dafe:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800db02:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800db06:	2b00      	cmp	r3, #0
 800db08:	d108      	bne.n	800db1c <f_unlink+0x96>
 800db0a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800db0e:	2102      	movs	r1, #2
 800db10:	4618      	mov	r0, r3
 800db12:	f7fb f9a1 	bl	8008e58 <chk_lock>
 800db16:	4603      	mov	r3, r0
 800db18:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800db1c:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800db20:	2b00      	cmp	r3, #0
 800db22:	f040 80a7 	bne.w	800dc74 <f_unlink+0x1ee>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800db26:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800db2a:	b25b      	sxtb	r3, r3
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	da03      	bge.n	800db38 <f_unlink+0xb2>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800db30:	2306      	movs	r3, #6
 800db32:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 800db36:	e008      	b.n	800db4a <f_unlink+0xc4>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800db38:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800db3c:	f003 0301 	and.w	r3, r3, #1
 800db40:	2b00      	cmp	r3, #0
 800db42:	d002      	beq.n	800db4a <f_unlink+0xc4>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800db44:	2307      	movs	r3, #7
 800db46:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
				}
			}
			if (res == FR_OK) {
 800db4a:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d166      	bne.n	800dc20 <f_unlink+0x19a>
#if _FS_EXFAT
				obj.fs = fs;
 800db52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db54:	60bb      	str	r3, [r7, #8]
				if (fs->fs_type == FS_EXFAT) {
 800db56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	2b04      	cmp	r3, #4
 800db5c:	d11d      	bne.n	800db9a <f_unlink+0x114>
					obj.sclust = dclst = ld_dword(fs->dirbuf + XDIR_FstClus);
 800db5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db60:	695b      	ldr	r3, [r3, #20]
 800db62:	3334      	adds	r3, #52	@ 0x34
 800db64:	4618      	mov	r0, r3
 800db66:	f7fa fefb 	bl	8008960 <ld_dword>
 800db6a:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
 800db6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800db72:	613b      	str	r3, [r7, #16]
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800db74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db76:	695b      	ldr	r3, [r3, #20]
 800db78:	3338      	adds	r3, #56	@ 0x38
 800db7a:	4618      	mov	r0, r3
 800db7c:	f7fa ff13 	bl	80089a6 <ld_qword>
 800db80:	4602      	mov	r2, r0
 800db82:	460b      	mov	r3, r1
 800db84:	e9c7 2306 	strd	r2, r3, [r7, #24]
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800db88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db8a:	695b      	ldr	r3, [r3, #20]
 800db8c:	3321      	adds	r3, #33	@ 0x21
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	f003 0302 	and.w	r3, r3, #2
 800db94:	b2db      	uxtb	r3, r3
 800db96:	73fb      	strb	r3, [r7, #15]
 800db98:	e008      	b.n	800dbac <f_unlink+0x126>
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800db9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db9c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800dba0:	4611      	mov	r1, r2
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7fc fb6b 	bl	800a27e <ld_clust>
 800dba8:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800dbac:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800dbb0:	f003 0310 	and.w	r3, r3, #16
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d033      	beq.n	800dc20 <f_unlink+0x19a>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800dbb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbba:	643b      	str	r3, [r7, #64]	@ 0x40
						sdj.obj.sclust = dclst;
 800dbbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800dbc0:	64bb      	str	r3, [r7, #72]	@ 0x48
#if _FS_EXFAT
						if (fs->fs_type == FS_EXFAT) {
 800dbc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbc4:	781b      	ldrb	r3, [r3, #0]
 800dbc6:	2b04      	cmp	r3, #4
 800dbc8:	d106      	bne.n	800dbd8 <f_unlink+0x152>
							sdj.obj.objsize = obj.objsize;
 800dbca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800dbce:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
							sdj.obj.stat = obj.stat;
 800dbd2:	7bfb      	ldrb	r3, [r7, #15]
 800dbd4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
						}
#endif
						res = dir_sdi(&sdj, 0);
 800dbd8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800dbdc:	2100      	movs	r1, #0
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7fc f977 	bl	8009ed2 <dir_sdi>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
						if (res == FR_OK) {
 800dbea:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d116      	bne.n	800dc20 <f_unlink+0x19a>
							res = dir_read(&sdj, 0);			/* Read an item */
 800dbf2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800dbf6:	2100      	movs	r1, #0
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7fc ff87 	bl	800ab0c <dir_read>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800dc04:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d102      	bne.n	800dc12 <f_unlink+0x18c>
 800dc0c:	2307      	movs	r3, #7
 800dc0e:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800dc12:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800dc16:	2b04      	cmp	r3, #4
 800dc18:	d102      	bne.n	800dc20 <f_unlink+0x19a>
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
						}
					}
				}
			}
			if (res == FR_OK) {
 800dc20:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d125      	bne.n	800dc74 <f_unlink+0x1ee>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800dc28:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f7fd fb09 	bl	800b244 <dir_remove>
 800dc32:	4603      	mov	r3, r0
 800dc34:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800dc38:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d10e      	bne.n	800dc5e <f_unlink+0x1d8>
 800dc40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d00a      	beq.n	800dc5e <f_unlink+0x1d8>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
 800dc48:	f107 0308 	add.w	r3, r7, #8
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7fb ff3c 	bl	8009ad0 <remove_chain>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800dc5e:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d106      	bne.n	800dc74 <f_unlink+0x1ee>
 800dc66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7fb fad3 	bl	8009214 <sync_fs>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
			}
		}
		FREE_NAMBUF();
 800dc74:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800dc78:	f000 f988 	bl	800df8c <ff_memfree>
	}

	LEAVE_FF(fs, res);
 800dc7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc7e:	f897 20ef 	ldrb.w	r2, [r7, #239]	@ 0xef
 800dc82:	4611      	mov	r1, r2
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7fb f8cc 	bl	8008e22 <unlock_fs>
 800dc8a:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	37f0      	adds	r7, #240	@ 0xf0
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}
	...

0800dc98 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b087      	sub	sp, #28
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	60f8      	str	r0, [r7, #12]
 800dca0:	60b9      	str	r1, [r7, #8]
 800dca2:	4613      	mov	r3, r2
 800dca4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dca6:	2301      	movs	r3, #1
 800dca8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dcae:	4b1f      	ldr	r3, [pc, #124]	@ (800dd2c <FATFS_LinkDriverEx+0x94>)
 800dcb0:	7a5b      	ldrb	r3, [r3, #9]
 800dcb2:	b2db      	uxtb	r3, r3
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d131      	bne.n	800dd1c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dcb8:	4b1c      	ldr	r3, [pc, #112]	@ (800dd2c <FATFS_LinkDriverEx+0x94>)
 800dcba:	7a5b      	ldrb	r3, [r3, #9]
 800dcbc:	b2db      	uxtb	r3, r3
 800dcbe:	461a      	mov	r2, r3
 800dcc0:	4b1a      	ldr	r3, [pc, #104]	@ (800dd2c <FATFS_LinkDriverEx+0x94>)
 800dcc2:	2100      	movs	r1, #0
 800dcc4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dcc6:	4b19      	ldr	r3, [pc, #100]	@ (800dd2c <FATFS_LinkDriverEx+0x94>)
 800dcc8:	7a5b      	ldrb	r3, [r3, #9]
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	4a17      	ldr	r2, [pc, #92]	@ (800dd2c <FATFS_LinkDriverEx+0x94>)
 800dcce:	009b      	lsls	r3, r3, #2
 800dcd0:	4413      	add	r3, r2
 800dcd2:	68fa      	ldr	r2, [r7, #12]
 800dcd4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dcd6:	4b15      	ldr	r3, [pc, #84]	@ (800dd2c <FATFS_LinkDriverEx+0x94>)
 800dcd8:	7a5b      	ldrb	r3, [r3, #9]
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	461a      	mov	r2, r3
 800dcde:	4b13      	ldr	r3, [pc, #76]	@ (800dd2c <FATFS_LinkDriverEx+0x94>)
 800dce0:	4413      	add	r3, r2
 800dce2:	79fa      	ldrb	r2, [r7, #7]
 800dce4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dce6:	4b11      	ldr	r3, [pc, #68]	@ (800dd2c <FATFS_LinkDriverEx+0x94>)
 800dce8:	7a5b      	ldrb	r3, [r3, #9]
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	1c5a      	adds	r2, r3, #1
 800dcee:	b2d1      	uxtb	r1, r2
 800dcf0:	4a0e      	ldr	r2, [pc, #56]	@ (800dd2c <FATFS_LinkDriverEx+0x94>)
 800dcf2:	7251      	strb	r1, [r2, #9]
 800dcf4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dcf6:	7dbb      	ldrb	r3, [r7, #22]
 800dcf8:	3330      	adds	r3, #48	@ 0x30
 800dcfa:	b2da      	uxtb	r2, r3
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	3301      	adds	r3, #1
 800dd04:	223a      	movs	r2, #58	@ 0x3a
 800dd06:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	3302      	adds	r3, #2
 800dd0c:	222f      	movs	r2, #47	@ 0x2f
 800dd0e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	3303      	adds	r3, #3
 800dd14:	2200      	movs	r2, #0
 800dd16:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dd1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	371c      	adds	r7, #28
 800dd22:	46bd      	mov	sp, r7
 800dd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd28:	4770      	bx	lr
 800dd2a:	bf00      	nop
 800dd2c:	20002a98 	.word	0x20002a98

0800dd30 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b082      	sub	sp, #8
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
 800dd38:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	6839      	ldr	r1, [r7, #0]
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f7ff ffaa 	bl	800dc98 <FATFS_LinkDriverEx>
 800dd44:	4603      	mov	r3, r0
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3708      	adds	r7, #8
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}
	...

0800dd50 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800dd50:	b480      	push	{r7}
 800dd52:	b085      	sub	sp, #20
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	4603      	mov	r3, r0
 800dd58:	6039      	str	r1, [r7, #0]
 800dd5a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800dd5c:	88fb      	ldrh	r3, [r7, #6]
 800dd5e:	2b7f      	cmp	r3, #127	@ 0x7f
 800dd60:	d802      	bhi.n	800dd68 <ff_convert+0x18>
		c = chr;
 800dd62:	88fb      	ldrh	r3, [r7, #6]
 800dd64:	81fb      	strh	r3, [r7, #14]
 800dd66:	e025      	b.n	800ddb4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d00b      	beq.n	800dd86 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800dd6e:	88fb      	ldrh	r3, [r7, #6]
 800dd70:	2bff      	cmp	r3, #255	@ 0xff
 800dd72:	d805      	bhi.n	800dd80 <ff_convert+0x30>
 800dd74:	88fb      	ldrh	r3, [r7, #6]
 800dd76:	3b80      	subs	r3, #128	@ 0x80
 800dd78:	4a12      	ldr	r2, [pc, #72]	@ (800ddc4 <ff_convert+0x74>)
 800dd7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd7e:	e000      	b.n	800dd82 <ff_convert+0x32>
 800dd80:	2300      	movs	r3, #0
 800dd82:	81fb      	strh	r3, [r7, #14]
 800dd84:	e016      	b.n	800ddb4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800dd86:	2300      	movs	r3, #0
 800dd88:	81fb      	strh	r3, [r7, #14]
 800dd8a:	e009      	b.n	800dda0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800dd8c:	89fb      	ldrh	r3, [r7, #14]
 800dd8e:	4a0d      	ldr	r2, [pc, #52]	@ (800ddc4 <ff_convert+0x74>)
 800dd90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd94:	88fa      	ldrh	r2, [r7, #6]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d006      	beq.n	800dda8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800dd9a:	89fb      	ldrh	r3, [r7, #14]
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	81fb      	strh	r3, [r7, #14]
 800dda0:	89fb      	ldrh	r3, [r7, #14]
 800dda2:	2b7f      	cmp	r3, #127	@ 0x7f
 800dda4:	d9f2      	bls.n	800dd8c <ff_convert+0x3c>
 800dda6:	e000      	b.n	800ddaa <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800dda8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ddaa:	89fb      	ldrh	r3, [r7, #14]
 800ddac:	3380      	adds	r3, #128	@ 0x80
 800ddae:	b29b      	uxth	r3, r3
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ddb4:	89fb      	ldrh	r3, [r7, #14]
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3714      	adds	r7, #20
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc0:	4770      	bx	lr
 800ddc2:	bf00      	nop
 800ddc4:	08016acc 	.word	0x08016acc

0800ddc8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b087      	sub	sp, #28
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	4603      	mov	r3, r0
 800ddd0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ddd2:	88fb      	ldrh	r3, [r7, #6]
 800ddd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ddd8:	d201      	bcs.n	800ddde <ff_wtoupper+0x16>
 800ddda:	4b3e      	ldr	r3, [pc, #248]	@ (800ded4 <ff_wtoupper+0x10c>)
 800dddc:	e000      	b.n	800dde0 <ff_wtoupper+0x18>
 800ddde:	4b3e      	ldr	r3, [pc, #248]	@ (800ded8 <ff_wtoupper+0x110>)
 800dde0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	1c9a      	adds	r2, r3, #2
 800dde6:	617a      	str	r2, [r7, #20]
 800dde8:	881b      	ldrh	r3, [r3, #0]
 800ddea:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ddec:	8a7b      	ldrh	r3, [r7, #18]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d068      	beq.n	800dec4 <ff_wtoupper+0xfc>
 800ddf2:	88fa      	ldrh	r2, [r7, #6]
 800ddf4:	8a7b      	ldrh	r3, [r7, #18]
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d364      	bcc.n	800dec4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	1c9a      	adds	r2, r3, #2
 800ddfe:	617a      	str	r2, [r7, #20]
 800de00:	881b      	ldrh	r3, [r3, #0]
 800de02:	823b      	strh	r3, [r7, #16]
 800de04:	8a3b      	ldrh	r3, [r7, #16]
 800de06:	0a1b      	lsrs	r3, r3, #8
 800de08:	81fb      	strh	r3, [r7, #14]
 800de0a:	8a3b      	ldrh	r3, [r7, #16]
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800de10:	88fa      	ldrh	r2, [r7, #6]
 800de12:	8a79      	ldrh	r1, [r7, #18]
 800de14:	8a3b      	ldrh	r3, [r7, #16]
 800de16:	440b      	add	r3, r1
 800de18:	429a      	cmp	r2, r3
 800de1a:	da49      	bge.n	800deb0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800de1c:	89fb      	ldrh	r3, [r7, #14]
 800de1e:	2b08      	cmp	r3, #8
 800de20:	d84f      	bhi.n	800dec2 <ff_wtoupper+0xfa>
 800de22:	a201      	add	r2, pc, #4	@ (adr r2, 800de28 <ff_wtoupper+0x60>)
 800de24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de28:	0800de4d 	.word	0x0800de4d
 800de2c:	0800de5f 	.word	0x0800de5f
 800de30:	0800de75 	.word	0x0800de75
 800de34:	0800de7d 	.word	0x0800de7d
 800de38:	0800de85 	.word	0x0800de85
 800de3c:	0800de8d 	.word	0x0800de8d
 800de40:	0800de95 	.word	0x0800de95
 800de44:	0800de9d 	.word	0x0800de9d
 800de48:	0800dea5 	.word	0x0800dea5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800de4c:	88fa      	ldrh	r2, [r7, #6]
 800de4e:	8a7b      	ldrh	r3, [r7, #18]
 800de50:	1ad3      	subs	r3, r2, r3
 800de52:	005b      	lsls	r3, r3, #1
 800de54:	697a      	ldr	r2, [r7, #20]
 800de56:	4413      	add	r3, r2
 800de58:	881b      	ldrh	r3, [r3, #0]
 800de5a:	80fb      	strh	r3, [r7, #6]
 800de5c:	e027      	b.n	800deae <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800de5e:	88fa      	ldrh	r2, [r7, #6]
 800de60:	8a7b      	ldrh	r3, [r7, #18]
 800de62:	1ad3      	subs	r3, r2, r3
 800de64:	b29b      	uxth	r3, r3
 800de66:	f003 0301 	and.w	r3, r3, #1
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	88fa      	ldrh	r2, [r7, #6]
 800de6e:	1ad3      	subs	r3, r2, r3
 800de70:	80fb      	strh	r3, [r7, #6]
 800de72:	e01c      	b.n	800deae <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800de74:	88fb      	ldrh	r3, [r7, #6]
 800de76:	3b10      	subs	r3, #16
 800de78:	80fb      	strh	r3, [r7, #6]
 800de7a:	e018      	b.n	800deae <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800de7c:	88fb      	ldrh	r3, [r7, #6]
 800de7e:	3b20      	subs	r3, #32
 800de80:	80fb      	strh	r3, [r7, #6]
 800de82:	e014      	b.n	800deae <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800de84:	88fb      	ldrh	r3, [r7, #6]
 800de86:	3b30      	subs	r3, #48	@ 0x30
 800de88:	80fb      	strh	r3, [r7, #6]
 800de8a:	e010      	b.n	800deae <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800de8c:	88fb      	ldrh	r3, [r7, #6]
 800de8e:	3b1a      	subs	r3, #26
 800de90:	80fb      	strh	r3, [r7, #6]
 800de92:	e00c      	b.n	800deae <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800de94:	88fb      	ldrh	r3, [r7, #6]
 800de96:	3308      	adds	r3, #8
 800de98:	80fb      	strh	r3, [r7, #6]
 800de9a:	e008      	b.n	800deae <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800de9c:	88fb      	ldrh	r3, [r7, #6]
 800de9e:	3b50      	subs	r3, #80	@ 0x50
 800dea0:	80fb      	strh	r3, [r7, #6]
 800dea2:	e004      	b.n	800deae <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800dea4:	88fb      	ldrh	r3, [r7, #6]
 800dea6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800deaa:	80fb      	strh	r3, [r7, #6]
 800deac:	bf00      	nop
			}
			break;
 800deae:	e008      	b.n	800dec2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800deb0:	89fb      	ldrh	r3, [r7, #14]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d195      	bne.n	800dde2 <ff_wtoupper+0x1a>
 800deb6:	8a3b      	ldrh	r3, [r7, #16]
 800deb8:	005b      	lsls	r3, r3, #1
 800deba:	697a      	ldr	r2, [r7, #20]
 800debc:	4413      	add	r3, r2
 800debe:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800dec0:	e78f      	b.n	800dde2 <ff_wtoupper+0x1a>
			break;
 800dec2:	bf00      	nop
	}

	return chr;
 800dec4:	88fb      	ldrh	r3, [r7, #6]
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	371c      	adds	r7, #28
 800deca:	46bd      	mov	sp, r7
 800decc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded0:	4770      	bx	lr
 800ded2:	bf00      	nop
 800ded4:	08016bcc 	.word	0x08016bcc
 800ded8:	08016dc0 	.word	0x08016dc0

0800dedc <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b086      	sub	sp, #24
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	4603      	mov	r3, r0
 800dee4:	6039      	str	r1, [r7, #0]
 800dee6:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800dee8:	2300      	movs	r3, #0
 800deea:	60fb      	str	r3, [r7, #12]
 800deec:	2300      	movs	r3, #0
 800deee:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800def0:	f107 030c 	add.w	r3, r7, #12
 800def4:	2101      	movs	r1, #1
 800def6:	4618      	mov	r0, r3
 800def8:	f000 f865 	bl	800dfc6 <osSemaphoreCreate>
 800defc:	4602      	mov	r2, r0
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	2b00      	cmp	r3, #0
 800df08:	bf14      	ite	ne
 800df0a:	2301      	movne	r3, #1
 800df0c:	2300      	moveq	r3, #0
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	617b      	str	r3, [r7, #20]

    return ret;
 800df12:	697b      	ldr	r3, [r7, #20]
}
 800df14:	4618      	mov	r0, r3
 800df16:	3718      	adds	r7, #24
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}

0800df1c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b082      	sub	sp, #8
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f000 f905 	bl	800e134 <osSemaphoreDelete>
#endif
    return 1;
 800df2a:	2301      	movs	r3, #1
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3708      	adds	r7, #8
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800df3c:	2300      	movs	r3, #0
 800df3e:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800df40:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f000 f871 	bl	800e02c <osSemaphoreWait>
 800df4a:	4603      	mov	r3, r0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d101      	bne.n	800df54 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800df50:	2301      	movs	r3, #1
 800df52:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800df54:	68fb      	ldr	r3, [r7, #12]
}
 800df56:	4618      	mov	r0, r3
 800df58:	3710      	adds	r7, #16
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}

0800df5e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800df5e:	b580      	push	{r7, lr}
 800df60:	b082      	sub	sp, #8
 800df62:	af00      	add	r7, sp, #0
 800df64:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f000 f8ae 	bl	800e0c8 <osSemaphoreRelease>
#endif
}
 800df6c:	bf00      	nop
 800df6e:	3708      	adds	r7, #8
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b082      	sub	sp, #8
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f002 fabd 	bl	80104fc <pvPortMalloc>
 800df82:	4603      	mov	r3, r0
}
 800df84:	4618      	mov	r0, r3
 800df86:	3708      	adds	r7, #8
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f002 fb7f 	bl	8010698 <vPortFree>
}
 800df9a:	bf00      	nop
 800df9c:	3708      	adds	r7, #8
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}

0800dfa2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800dfa2:	b480      	push	{r7}
 800dfa4:	b083      	sub	sp, #12
 800dfa6:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfa8:	f3ef 8305 	mrs	r3, IPSR
 800dfac:	607b      	str	r3, [r7, #4]
  return(result);
 800dfae:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	bf14      	ite	ne
 800dfb4:	2301      	movne	r3, #1
 800dfb6:	2300      	moveq	r3, #0
 800dfb8:	b2db      	uxtb	r3, r3
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	370c      	adds	r7, #12
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc4:	4770      	bx	lr

0800dfc6 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800dfc6:	b580      	push	{r7, lr}
 800dfc8:	b086      	sub	sp, #24
 800dfca:	af02      	add	r7, sp, #8
 800dfcc:	6078      	str	r0, [r7, #4]
 800dfce:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	685b      	ldr	r3, [r3, #4]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d00f      	beq.n	800dff8 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d10a      	bne.n	800dff4 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	685b      	ldr	r3, [r3, #4]
 800dfe2:	2203      	movs	r2, #3
 800dfe4:	9200      	str	r2, [sp, #0]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	2100      	movs	r1, #0
 800dfea:	2001      	movs	r0, #1
 800dfec:	f000 f9d4 	bl	800e398 <xQueueGenericCreateStatic>
 800dff0:	4603      	mov	r3, r0
 800dff2:	e016      	b.n	800e022 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800dff4:	2300      	movs	r3, #0
 800dff6:	e014      	b.n	800e022 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	2b01      	cmp	r3, #1
 800dffc:	d110      	bne.n	800e020 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800dffe:	2203      	movs	r2, #3
 800e000:	2100      	movs	r1, #0
 800e002:	2001      	movs	r0, #1
 800e004:	f000 fa45 	bl	800e492 <xQueueGenericCreate>
 800e008:	60f8      	str	r0, [r7, #12]
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d005      	beq.n	800e01c <osSemaphoreCreate+0x56>
 800e010:	2300      	movs	r3, #0
 800e012:	2200      	movs	r2, #0
 800e014:	2100      	movs	r1, #0
 800e016:	68f8      	ldr	r0, [r7, #12]
 800e018:	f000 fa96 	bl	800e548 <xQueueGenericSend>
      return sema;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	e000      	b.n	800e022 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800e020:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800e022:	4618      	mov	r0, r3
 800e024:	3710      	adds	r7, #16
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}
	...

0800e02c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b084      	sub	sp, #16
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e036:	2300      	movs	r3, #0
 800e038:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d101      	bne.n	800e044 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800e040:	2380      	movs	r3, #128	@ 0x80
 800e042:	e03a      	b.n	800e0ba <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800e044:	2300      	movs	r3, #0
 800e046:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e04e:	d103      	bne.n	800e058 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800e050:	f04f 33ff 	mov.w	r3, #4294967295
 800e054:	60fb      	str	r3, [r7, #12]
 800e056:	e009      	b.n	800e06c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d006      	beq.n	800e06c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d101      	bne.n	800e06c <osSemaphoreWait+0x40>
      ticks = 1;
 800e068:	2301      	movs	r3, #1
 800e06a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800e06c:	f7ff ff99 	bl	800dfa2 <inHandlerMode>
 800e070:	4603      	mov	r3, r0
 800e072:	2b00      	cmp	r3, #0
 800e074:	d017      	beq.n	800e0a6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e076:	f107 0308 	add.w	r3, r7, #8
 800e07a:	461a      	mov	r2, r3
 800e07c:	2100      	movs	r1, #0
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f000 fde6 	bl	800ec50 <xQueueReceiveFromISR>
 800e084:	4603      	mov	r3, r0
 800e086:	2b01      	cmp	r3, #1
 800e088:	d001      	beq.n	800e08e <osSemaphoreWait+0x62>
      return osErrorOS;
 800e08a:	23ff      	movs	r3, #255	@ 0xff
 800e08c:	e015      	b.n	800e0ba <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d011      	beq.n	800e0b8 <osSemaphoreWait+0x8c>
 800e094:	4b0b      	ldr	r3, [pc, #44]	@ (800e0c4 <osSemaphoreWait+0x98>)
 800e096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e09a:	601a      	str	r2, [r3, #0]
 800e09c:	f3bf 8f4f 	dsb	sy
 800e0a0:	f3bf 8f6f 	isb	sy
 800e0a4:	e008      	b.n	800e0b8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800e0a6:	68f9      	ldr	r1, [r7, #12]
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f000 fcc1 	bl	800ea30 <xQueueSemaphoreTake>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	2b01      	cmp	r3, #1
 800e0b2:	d001      	beq.n	800e0b8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800e0b4:	23ff      	movs	r3, #255	@ 0xff
 800e0b6:	e000      	b.n	800e0ba <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800e0b8:	2300      	movs	r3, #0
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3710      	adds	r7, #16
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	e000ed04 	.word	0xe000ed04

0800e0c8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b084      	sub	sp, #16
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800e0d8:	f7ff ff63 	bl	800dfa2 <inHandlerMode>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d016      	beq.n	800e110 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e0e2:	f107 0308 	add.w	r3, r7, #8
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f000 fb2f 	bl	800e74c <xQueueGiveFromISR>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d001      	beq.n	800e0f8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800e0f4:	23ff      	movs	r3, #255	@ 0xff
 800e0f6:	e017      	b.n	800e128 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d013      	beq.n	800e126 <osSemaphoreRelease+0x5e>
 800e0fe:	4b0c      	ldr	r3, [pc, #48]	@ (800e130 <osSemaphoreRelease+0x68>)
 800e100:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e104:	601a      	str	r2, [r3, #0]
 800e106:	f3bf 8f4f 	dsb	sy
 800e10a:	f3bf 8f6f 	isb	sy
 800e10e:	e00a      	b.n	800e126 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800e110:	2300      	movs	r3, #0
 800e112:	2200      	movs	r2, #0
 800e114:	2100      	movs	r1, #0
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f000 fa16 	bl	800e548 <xQueueGenericSend>
 800e11c:	4603      	mov	r3, r0
 800e11e:	2b01      	cmp	r3, #1
 800e120:	d001      	beq.n	800e126 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800e122:	23ff      	movs	r3, #255	@ 0xff
 800e124:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800e126:	68fb      	ldr	r3, [r7, #12]
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3710      	adds	r7, #16
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}
 800e130:	e000ed04 	.word	0xe000ed04

0800e134 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b082      	sub	sp, #8
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800e13c:	f7ff ff31 	bl	800dfa2 <inHandlerMode>
 800e140:	4603      	mov	r3, r0
 800e142:	2b00      	cmp	r3, #0
 800e144:	d001      	beq.n	800e14a <osSemaphoreDelete+0x16>
    return osErrorISR;
 800e146:	2382      	movs	r3, #130	@ 0x82
 800e148:	e003      	b.n	800e152 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f000 fe02 	bl	800ed54 <vQueueDelete>

  return osOK; 
 800e150:	2300      	movs	r3, #0
}
 800e152:	4618      	mov	r0, r3
 800e154:	3708      	adds	r7, #8
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}

0800e15a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e15a:	b480      	push	{r7}
 800e15c:	b083      	sub	sp, #12
 800e15e:	af00      	add	r7, sp, #0
 800e160:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f103 0208 	add.w	r2, r3, #8
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f04f 32ff 	mov.w	r2, #4294967295
 800e172:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f103 0208 	add.w	r2, r3, #8
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f103 0208 	add.w	r2, r3, #8
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2200      	movs	r2, #0
 800e18c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e18e:	bf00      	nop
 800e190:	370c      	adds	r7, #12
 800e192:	46bd      	mov	sp, r7
 800e194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e198:	4770      	bx	lr

0800e19a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e19a:	b480      	push	{r7}
 800e19c:	b083      	sub	sp, #12
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e1a8:	bf00      	nop
 800e1aa:	370c      	adds	r7, #12
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b2:	4770      	bx	lr

0800e1b4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b085      	sub	sp, #20
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
 800e1bc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	68fa      	ldr	r2, [r7, #12]
 800e1c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	689a      	ldr	r2, [r3, #8]
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	689b      	ldr	r3, [r3, #8]
 800e1d6:	683a      	ldr	r2, [r7, #0]
 800e1d8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	683a      	ldr	r2, [r7, #0]
 800e1de:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	1c5a      	adds	r2, r3, #1
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	601a      	str	r2, [r3, #0]
}
 800e1f0:	bf00      	nop
 800e1f2:	3714      	adds	r7, #20
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fa:	4770      	bx	lr

0800e1fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	b085      	sub	sp, #20
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e212:	d103      	bne.n	800e21c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	691b      	ldr	r3, [r3, #16]
 800e218:	60fb      	str	r3, [r7, #12]
 800e21a:	e00c      	b.n	800e236 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	3308      	adds	r3, #8
 800e220:	60fb      	str	r3, [r7, #12]
 800e222:	e002      	b.n	800e22a <vListInsert+0x2e>
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	60fb      	str	r3, [r7, #12]
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	685b      	ldr	r3, [r3, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	68ba      	ldr	r2, [r7, #8]
 800e232:	429a      	cmp	r2, r3
 800e234:	d2f6      	bcs.n	800e224 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	685a      	ldr	r2, [r3, #4]
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	685b      	ldr	r3, [r3, #4]
 800e242:	683a      	ldr	r2, [r7, #0]
 800e244:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	68fa      	ldr	r2, [r7, #12]
 800e24a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	683a      	ldr	r2, [r7, #0]
 800e250:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	687a      	ldr	r2, [r7, #4]
 800e256:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	1c5a      	adds	r2, r3, #1
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	601a      	str	r2, [r3, #0]
}
 800e262:	bf00      	nop
 800e264:	3714      	adds	r7, #20
 800e266:	46bd      	mov	sp, r7
 800e268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26c:	4770      	bx	lr

0800e26e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e26e:	b480      	push	{r7}
 800e270:	b085      	sub	sp, #20
 800e272:	af00      	add	r7, sp, #0
 800e274:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	691b      	ldr	r3, [r3, #16]
 800e27a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	687a      	ldr	r2, [r7, #4]
 800e282:	6892      	ldr	r2, [r2, #8]
 800e284:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	689b      	ldr	r3, [r3, #8]
 800e28a:	687a      	ldr	r2, [r7, #4]
 800e28c:	6852      	ldr	r2, [r2, #4]
 800e28e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	685b      	ldr	r3, [r3, #4]
 800e294:	687a      	ldr	r2, [r7, #4]
 800e296:	429a      	cmp	r2, r3
 800e298:	d103      	bne.n	800e2a2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	689a      	ldr	r2, [r3, #8]
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	1e5a      	subs	r2, r3, #1
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	681b      	ldr	r3, [r3, #0]
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3714      	adds	r7, #20
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c0:	4770      	bx	lr
	...

0800e2c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b084      	sub	sp, #16
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d10b      	bne.n	800e2f0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e2d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2dc:	f383 8811 	msr	BASEPRI, r3
 800e2e0:	f3bf 8f6f 	isb	sy
 800e2e4:	f3bf 8f4f 	dsb	sy
 800e2e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e2ea:	bf00      	nop
 800e2ec:	bf00      	nop
 800e2ee:	e7fd      	b.n	800e2ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e2f0:	f001 ffe2 	bl	80102b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681a      	ldr	r2, [r3, #0]
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2fc:	68f9      	ldr	r1, [r7, #12]
 800e2fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e300:	fb01 f303 	mul.w	r3, r1, r3
 800e304:	441a      	add	r2, r3
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	2200      	movs	r2, #0
 800e30e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	681a      	ldr	r2, [r3, #0]
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681a      	ldr	r2, [r3, #0]
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e320:	3b01      	subs	r3, #1
 800e322:	68f9      	ldr	r1, [r7, #12]
 800e324:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e326:	fb01 f303 	mul.w	r3, r1, r3
 800e32a:	441a      	add	r2, r3
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	22ff      	movs	r2, #255	@ 0xff
 800e334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	22ff      	movs	r2, #255	@ 0xff
 800e33c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d114      	bne.n	800e370 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	691b      	ldr	r3, [r3, #16]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d01a      	beq.n	800e384 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	3310      	adds	r3, #16
 800e352:	4618      	mov	r0, r3
 800e354:	f001 fa9c 	bl	800f890 <xTaskRemoveFromEventList>
 800e358:	4603      	mov	r3, r0
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d012      	beq.n	800e384 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e35e:	4b0d      	ldr	r3, [pc, #52]	@ (800e394 <xQueueGenericReset+0xd0>)
 800e360:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e364:	601a      	str	r2, [r3, #0]
 800e366:	f3bf 8f4f 	dsb	sy
 800e36a:	f3bf 8f6f 	isb	sy
 800e36e:	e009      	b.n	800e384 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	3310      	adds	r3, #16
 800e374:	4618      	mov	r0, r3
 800e376:	f7ff fef0 	bl	800e15a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	3324      	adds	r3, #36	@ 0x24
 800e37e:	4618      	mov	r0, r3
 800e380:	f7ff feeb 	bl	800e15a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e384:	f001 ffca 	bl	801031c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e388:	2301      	movs	r3, #1
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3710      	adds	r7, #16
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	e000ed04 	.word	0xe000ed04

0800e398 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b08e      	sub	sp, #56	@ 0x38
 800e39c:	af02      	add	r7, sp, #8
 800e39e:	60f8      	str	r0, [r7, #12]
 800e3a0:	60b9      	str	r1, [r7, #8]
 800e3a2:	607a      	str	r2, [r7, #4]
 800e3a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d10b      	bne.n	800e3c4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800e3ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3b0:	f383 8811 	msr	BASEPRI, r3
 800e3b4:	f3bf 8f6f 	isb	sy
 800e3b8:	f3bf 8f4f 	dsb	sy
 800e3bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e3be:	bf00      	nop
 800e3c0:	bf00      	nop
 800e3c2:	e7fd      	b.n	800e3c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d10b      	bne.n	800e3e2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800e3ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3ce:	f383 8811 	msr	BASEPRI, r3
 800e3d2:	f3bf 8f6f 	isb	sy
 800e3d6:	f3bf 8f4f 	dsb	sy
 800e3da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e3dc:	bf00      	nop
 800e3de:	bf00      	nop
 800e3e0:	e7fd      	b.n	800e3de <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d002      	beq.n	800e3ee <xQueueGenericCreateStatic+0x56>
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d001      	beq.n	800e3f2 <xQueueGenericCreateStatic+0x5a>
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	e000      	b.n	800e3f4 <xQueueGenericCreateStatic+0x5c>
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d10b      	bne.n	800e410 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800e3f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3fc:	f383 8811 	msr	BASEPRI, r3
 800e400:	f3bf 8f6f 	isb	sy
 800e404:	f3bf 8f4f 	dsb	sy
 800e408:	623b      	str	r3, [r7, #32]
}
 800e40a:	bf00      	nop
 800e40c:	bf00      	nop
 800e40e:	e7fd      	b.n	800e40c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d102      	bne.n	800e41c <xQueueGenericCreateStatic+0x84>
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d101      	bne.n	800e420 <xQueueGenericCreateStatic+0x88>
 800e41c:	2301      	movs	r3, #1
 800e41e:	e000      	b.n	800e422 <xQueueGenericCreateStatic+0x8a>
 800e420:	2300      	movs	r3, #0
 800e422:	2b00      	cmp	r3, #0
 800e424:	d10b      	bne.n	800e43e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800e426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e42a:	f383 8811 	msr	BASEPRI, r3
 800e42e:	f3bf 8f6f 	isb	sy
 800e432:	f3bf 8f4f 	dsb	sy
 800e436:	61fb      	str	r3, [r7, #28]
}
 800e438:	bf00      	nop
 800e43a:	bf00      	nop
 800e43c:	e7fd      	b.n	800e43a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e43e:	2348      	movs	r3, #72	@ 0x48
 800e440:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	2b48      	cmp	r3, #72	@ 0x48
 800e446:	d00b      	beq.n	800e460 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800e448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e44c:	f383 8811 	msr	BASEPRI, r3
 800e450:	f3bf 8f6f 	isb	sy
 800e454:	f3bf 8f4f 	dsb	sy
 800e458:	61bb      	str	r3, [r7, #24]
}
 800e45a:	bf00      	nop
 800e45c:	bf00      	nop
 800e45e:	e7fd      	b.n	800e45c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e460:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d00d      	beq.n	800e488 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e46e:	2201      	movs	r2, #1
 800e470:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e474:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e47a:	9300      	str	r3, [sp, #0]
 800e47c:	4613      	mov	r3, r2
 800e47e:	687a      	ldr	r2, [r7, #4]
 800e480:	68b9      	ldr	r1, [r7, #8]
 800e482:	68f8      	ldr	r0, [r7, #12]
 800e484:	f000 f840 	bl	800e508 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3730      	adds	r7, #48	@ 0x30
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}

0800e492 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e492:	b580      	push	{r7, lr}
 800e494:	b08a      	sub	sp, #40	@ 0x28
 800e496:	af02      	add	r7, sp, #8
 800e498:	60f8      	str	r0, [r7, #12]
 800e49a:	60b9      	str	r1, [r7, #8]
 800e49c:	4613      	mov	r3, r2
 800e49e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d10b      	bne.n	800e4be <xQueueGenericCreate+0x2c>
	__asm volatile
 800e4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4aa:	f383 8811 	msr	BASEPRI, r3
 800e4ae:	f3bf 8f6f 	isb	sy
 800e4b2:	f3bf 8f4f 	dsb	sy
 800e4b6:	613b      	str	r3, [r7, #16]
}
 800e4b8:	bf00      	nop
 800e4ba:	bf00      	nop
 800e4bc:	e7fd      	b.n	800e4ba <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	68ba      	ldr	r2, [r7, #8]
 800e4c2:	fb02 f303 	mul.w	r3, r2, r3
 800e4c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e4c8:	69fb      	ldr	r3, [r7, #28]
 800e4ca:	3348      	adds	r3, #72	@ 0x48
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f002 f815 	bl	80104fc <pvPortMalloc>
 800e4d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e4d4:	69bb      	ldr	r3, [r7, #24]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d011      	beq.n	800e4fe <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e4da:	69bb      	ldr	r3, [r7, #24]
 800e4dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	3348      	adds	r3, #72	@ 0x48
 800e4e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e4e4:	69bb      	ldr	r3, [r7, #24]
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e4ec:	79fa      	ldrb	r2, [r7, #7]
 800e4ee:	69bb      	ldr	r3, [r7, #24]
 800e4f0:	9300      	str	r3, [sp, #0]
 800e4f2:	4613      	mov	r3, r2
 800e4f4:	697a      	ldr	r2, [r7, #20]
 800e4f6:	68b9      	ldr	r1, [r7, #8]
 800e4f8:	68f8      	ldr	r0, [r7, #12]
 800e4fa:	f000 f805 	bl	800e508 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e4fe:	69bb      	ldr	r3, [r7, #24]
	}
 800e500:	4618      	mov	r0, r3
 800e502:	3720      	adds	r7, #32
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}

0800e508 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b084      	sub	sp, #16
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	60f8      	str	r0, [r7, #12]
 800e510:	60b9      	str	r1, [r7, #8]
 800e512:	607a      	str	r2, [r7, #4]
 800e514:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d103      	bne.n	800e524 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e51c:	69bb      	ldr	r3, [r7, #24]
 800e51e:	69ba      	ldr	r2, [r7, #24]
 800e520:	601a      	str	r2, [r3, #0]
 800e522:	e002      	b.n	800e52a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e524:	69bb      	ldr	r3, [r7, #24]
 800e526:	687a      	ldr	r2, [r7, #4]
 800e528:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e52a:	69bb      	ldr	r3, [r7, #24]
 800e52c:	68fa      	ldr	r2, [r7, #12]
 800e52e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e530:	69bb      	ldr	r3, [r7, #24]
 800e532:	68ba      	ldr	r2, [r7, #8]
 800e534:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e536:	2101      	movs	r1, #1
 800e538:	69b8      	ldr	r0, [r7, #24]
 800e53a:	f7ff fec3 	bl	800e2c4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e53e:	bf00      	nop
 800e540:	3710      	adds	r7, #16
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
	...

0800e548 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b08e      	sub	sp, #56	@ 0x38
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	60f8      	str	r0, [r7, #12]
 800e550:	60b9      	str	r1, [r7, #8]
 800e552:	607a      	str	r2, [r7, #4]
 800e554:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e556:	2300      	movs	r3, #0
 800e558:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e55e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e560:	2b00      	cmp	r3, #0
 800e562:	d10b      	bne.n	800e57c <xQueueGenericSend+0x34>
	__asm volatile
 800e564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e568:	f383 8811 	msr	BASEPRI, r3
 800e56c:	f3bf 8f6f 	isb	sy
 800e570:	f3bf 8f4f 	dsb	sy
 800e574:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e576:	bf00      	nop
 800e578:	bf00      	nop
 800e57a:	e7fd      	b.n	800e578 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d103      	bne.n	800e58a <xQueueGenericSend+0x42>
 800e582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e586:	2b00      	cmp	r3, #0
 800e588:	d101      	bne.n	800e58e <xQueueGenericSend+0x46>
 800e58a:	2301      	movs	r3, #1
 800e58c:	e000      	b.n	800e590 <xQueueGenericSend+0x48>
 800e58e:	2300      	movs	r3, #0
 800e590:	2b00      	cmp	r3, #0
 800e592:	d10b      	bne.n	800e5ac <xQueueGenericSend+0x64>
	__asm volatile
 800e594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e598:	f383 8811 	msr	BASEPRI, r3
 800e59c:	f3bf 8f6f 	isb	sy
 800e5a0:	f3bf 8f4f 	dsb	sy
 800e5a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e5a6:	bf00      	nop
 800e5a8:	bf00      	nop
 800e5aa:	e7fd      	b.n	800e5a8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	2b02      	cmp	r3, #2
 800e5b0:	d103      	bne.n	800e5ba <xQueueGenericSend+0x72>
 800e5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e5b6:	2b01      	cmp	r3, #1
 800e5b8:	d101      	bne.n	800e5be <xQueueGenericSend+0x76>
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	e000      	b.n	800e5c0 <xQueueGenericSend+0x78>
 800e5be:	2300      	movs	r3, #0
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d10b      	bne.n	800e5dc <xQueueGenericSend+0x94>
	__asm volatile
 800e5c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5c8:	f383 8811 	msr	BASEPRI, r3
 800e5cc:	f3bf 8f6f 	isb	sy
 800e5d0:	f3bf 8f4f 	dsb	sy
 800e5d4:	623b      	str	r3, [r7, #32]
}
 800e5d6:	bf00      	nop
 800e5d8:	bf00      	nop
 800e5da:	e7fd      	b.n	800e5d8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e5dc:	f001 fb18 	bl	800fc10 <xTaskGetSchedulerState>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d102      	bne.n	800e5ec <xQueueGenericSend+0xa4>
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d101      	bne.n	800e5f0 <xQueueGenericSend+0xa8>
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	e000      	b.n	800e5f2 <xQueueGenericSend+0xaa>
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d10b      	bne.n	800e60e <xQueueGenericSend+0xc6>
	__asm volatile
 800e5f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5fa:	f383 8811 	msr	BASEPRI, r3
 800e5fe:	f3bf 8f6f 	isb	sy
 800e602:	f3bf 8f4f 	dsb	sy
 800e606:	61fb      	str	r3, [r7, #28]
}
 800e608:	bf00      	nop
 800e60a:	bf00      	nop
 800e60c:	e7fd      	b.n	800e60a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e60e:	f001 fe53 	bl	80102b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e614:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e61a:	429a      	cmp	r2, r3
 800e61c:	d302      	bcc.n	800e624 <xQueueGenericSend+0xdc>
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	2b02      	cmp	r3, #2
 800e622:	d129      	bne.n	800e678 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e624:	683a      	ldr	r2, [r7, #0]
 800e626:	68b9      	ldr	r1, [r7, #8]
 800e628:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e62a:	f000 fbcf 	bl	800edcc <prvCopyDataToQueue>
 800e62e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e634:	2b00      	cmp	r3, #0
 800e636:	d010      	beq.n	800e65a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e63a:	3324      	adds	r3, #36	@ 0x24
 800e63c:	4618      	mov	r0, r3
 800e63e:	f001 f927 	bl	800f890 <xTaskRemoveFromEventList>
 800e642:	4603      	mov	r3, r0
 800e644:	2b00      	cmp	r3, #0
 800e646:	d013      	beq.n	800e670 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e648:	4b3f      	ldr	r3, [pc, #252]	@ (800e748 <xQueueGenericSend+0x200>)
 800e64a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e64e:	601a      	str	r2, [r3, #0]
 800e650:	f3bf 8f4f 	dsb	sy
 800e654:	f3bf 8f6f 	isb	sy
 800e658:	e00a      	b.n	800e670 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e65a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d007      	beq.n	800e670 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e660:	4b39      	ldr	r3, [pc, #228]	@ (800e748 <xQueueGenericSend+0x200>)
 800e662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e666:	601a      	str	r2, [r3, #0]
 800e668:	f3bf 8f4f 	dsb	sy
 800e66c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e670:	f001 fe54 	bl	801031c <vPortExitCritical>
				return pdPASS;
 800e674:	2301      	movs	r3, #1
 800e676:	e063      	b.n	800e740 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d103      	bne.n	800e686 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e67e:	f001 fe4d 	bl	801031c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e682:	2300      	movs	r3, #0
 800e684:	e05c      	b.n	800e740 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d106      	bne.n	800e69a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e68c:	f107 0314 	add.w	r3, r7, #20
 800e690:	4618      	mov	r0, r3
 800e692:	f001 f961 	bl	800f958 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e696:	2301      	movs	r3, #1
 800e698:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e69a:	f001 fe3f 	bl	801031c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e69e:	f000 feff 	bl	800f4a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e6a2:	f001 fe09 	bl	80102b8 <vPortEnterCritical>
 800e6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e6ac:	b25b      	sxtb	r3, r3
 800e6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6b2:	d103      	bne.n	800e6bc <xQueueGenericSend+0x174>
 800e6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e6c2:	b25b      	sxtb	r3, r3
 800e6c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6c8:	d103      	bne.n	800e6d2 <xQueueGenericSend+0x18a>
 800e6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e6d2:	f001 fe23 	bl	801031c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e6d6:	1d3a      	adds	r2, r7, #4
 800e6d8:	f107 0314 	add.w	r3, r7, #20
 800e6dc:	4611      	mov	r1, r2
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f001 f950 	bl	800f984 <xTaskCheckForTimeOut>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d124      	bne.n	800e734 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e6ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e6ec:	f000 fc66 	bl	800efbc <prvIsQueueFull>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d018      	beq.n	800e728 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6f8:	3310      	adds	r3, #16
 800e6fa:	687a      	ldr	r2, [r7, #4]
 800e6fc:	4611      	mov	r1, r2
 800e6fe:	4618      	mov	r0, r3
 800e700:	f001 f8a0 	bl	800f844 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e704:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e706:	f000 fbf1 	bl	800eeec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e70a:	f000 fed7 	bl	800f4bc <xTaskResumeAll>
 800e70e:	4603      	mov	r3, r0
 800e710:	2b00      	cmp	r3, #0
 800e712:	f47f af7c 	bne.w	800e60e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e716:	4b0c      	ldr	r3, [pc, #48]	@ (800e748 <xQueueGenericSend+0x200>)
 800e718:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e71c:	601a      	str	r2, [r3, #0]
 800e71e:	f3bf 8f4f 	dsb	sy
 800e722:	f3bf 8f6f 	isb	sy
 800e726:	e772      	b.n	800e60e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e728:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e72a:	f000 fbdf 	bl	800eeec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e72e:	f000 fec5 	bl	800f4bc <xTaskResumeAll>
 800e732:	e76c      	b.n	800e60e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e734:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e736:	f000 fbd9 	bl	800eeec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e73a:	f000 febf 	bl	800f4bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e73e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e740:	4618      	mov	r0, r3
 800e742:	3738      	adds	r7, #56	@ 0x38
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}
 800e748:	e000ed04 	.word	0xe000ed04

0800e74c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b08e      	sub	sp, #56	@ 0x38
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d10b      	bne.n	800e778 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800e760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e764:	f383 8811 	msr	BASEPRI, r3
 800e768:	f3bf 8f6f 	isb	sy
 800e76c:	f3bf 8f4f 	dsb	sy
 800e770:	623b      	str	r3, [r7, #32]
}
 800e772:	bf00      	nop
 800e774:	bf00      	nop
 800e776:	e7fd      	b.n	800e774 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e77a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d00b      	beq.n	800e798 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800e780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e784:	f383 8811 	msr	BASEPRI, r3
 800e788:	f3bf 8f6f 	isb	sy
 800e78c:	f3bf 8f4f 	dsb	sy
 800e790:	61fb      	str	r3, [r7, #28]
}
 800e792:	bf00      	nop
 800e794:	bf00      	nop
 800e796:	e7fd      	b.n	800e794 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d103      	bne.n	800e7a8 <xQueueGiveFromISR+0x5c>
 800e7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7a2:	689b      	ldr	r3, [r3, #8]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d101      	bne.n	800e7ac <xQueueGiveFromISR+0x60>
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	e000      	b.n	800e7ae <xQueueGiveFromISR+0x62>
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d10b      	bne.n	800e7ca <xQueueGiveFromISR+0x7e>
	__asm volatile
 800e7b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7b6:	f383 8811 	msr	BASEPRI, r3
 800e7ba:	f3bf 8f6f 	isb	sy
 800e7be:	f3bf 8f4f 	dsb	sy
 800e7c2:	61bb      	str	r3, [r7, #24]
}
 800e7c4:	bf00      	nop
 800e7c6:	bf00      	nop
 800e7c8:	e7fd      	b.n	800e7c6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e7ca:	f001 fe55 	bl	8010478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e7ce:	f3ef 8211 	mrs	r2, BASEPRI
 800e7d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7d6:	f383 8811 	msr	BASEPRI, r3
 800e7da:	f3bf 8f6f 	isb	sy
 800e7de:	f3bf 8f4f 	dsb	sy
 800e7e2:	617a      	str	r2, [r7, #20]
 800e7e4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e7e6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e7e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7ee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e7f6:	429a      	cmp	r2, r3
 800e7f8:	d22b      	bcs.n	800e852 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e800:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e806:	1c5a      	adds	r2, r3, #1
 800e808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e80a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e80c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e810:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e814:	d112      	bne.n	800e83c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d016      	beq.n	800e84c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e820:	3324      	adds	r3, #36	@ 0x24
 800e822:	4618      	mov	r0, r3
 800e824:	f001 f834 	bl	800f890 <xTaskRemoveFromEventList>
 800e828:	4603      	mov	r3, r0
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d00e      	beq.n	800e84c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d00b      	beq.n	800e84c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	2201      	movs	r2, #1
 800e838:	601a      	str	r2, [r3, #0]
 800e83a:	e007      	b.n	800e84c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e83c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e840:	3301      	adds	r3, #1
 800e842:	b2db      	uxtb	r3, r3
 800e844:	b25a      	sxtb	r2, r3
 800e846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e848:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e84c:	2301      	movs	r3, #1
 800e84e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e850:	e001      	b.n	800e856 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e852:	2300      	movs	r3, #0
 800e854:	637b      	str	r3, [r7, #52]	@ 0x34
 800e856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e858:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e860:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e864:	4618      	mov	r0, r3
 800e866:	3738      	adds	r7, #56	@ 0x38
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b08c      	sub	sp, #48	@ 0x30
 800e870:	af00      	add	r7, sp, #0
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	60b9      	str	r1, [r7, #8]
 800e876:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e878:	2300      	movs	r3, #0
 800e87a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e882:	2b00      	cmp	r3, #0
 800e884:	d10b      	bne.n	800e89e <xQueueReceive+0x32>
	__asm volatile
 800e886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e88a:	f383 8811 	msr	BASEPRI, r3
 800e88e:	f3bf 8f6f 	isb	sy
 800e892:	f3bf 8f4f 	dsb	sy
 800e896:	623b      	str	r3, [r7, #32]
}
 800e898:	bf00      	nop
 800e89a:	bf00      	nop
 800e89c:	e7fd      	b.n	800e89a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d103      	bne.n	800e8ac <xQueueReceive+0x40>
 800e8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d101      	bne.n	800e8b0 <xQueueReceive+0x44>
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	e000      	b.n	800e8b2 <xQueueReceive+0x46>
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d10b      	bne.n	800e8ce <xQueueReceive+0x62>
	__asm volatile
 800e8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ba:	f383 8811 	msr	BASEPRI, r3
 800e8be:	f3bf 8f6f 	isb	sy
 800e8c2:	f3bf 8f4f 	dsb	sy
 800e8c6:	61fb      	str	r3, [r7, #28]
}
 800e8c8:	bf00      	nop
 800e8ca:	bf00      	nop
 800e8cc:	e7fd      	b.n	800e8ca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e8ce:	f001 f99f 	bl	800fc10 <xTaskGetSchedulerState>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d102      	bne.n	800e8de <xQueueReceive+0x72>
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d101      	bne.n	800e8e2 <xQueueReceive+0x76>
 800e8de:	2301      	movs	r3, #1
 800e8e0:	e000      	b.n	800e8e4 <xQueueReceive+0x78>
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d10b      	bne.n	800e900 <xQueueReceive+0x94>
	__asm volatile
 800e8e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ec:	f383 8811 	msr	BASEPRI, r3
 800e8f0:	f3bf 8f6f 	isb	sy
 800e8f4:	f3bf 8f4f 	dsb	sy
 800e8f8:	61bb      	str	r3, [r7, #24]
}
 800e8fa:	bf00      	nop
 800e8fc:	bf00      	nop
 800e8fe:	e7fd      	b.n	800e8fc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e900:	f001 fcda 	bl	80102b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e908:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d01f      	beq.n	800e950 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e910:	68b9      	ldr	r1, [r7, #8]
 800e912:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e914:	f000 fac4 	bl	800eea0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e91a:	1e5a      	subs	r2, r3, #1
 800e91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e91e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e922:	691b      	ldr	r3, [r3, #16]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d00f      	beq.n	800e948 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e92a:	3310      	adds	r3, #16
 800e92c:	4618      	mov	r0, r3
 800e92e:	f000 ffaf 	bl	800f890 <xTaskRemoveFromEventList>
 800e932:	4603      	mov	r3, r0
 800e934:	2b00      	cmp	r3, #0
 800e936:	d007      	beq.n	800e948 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e938:	4b3c      	ldr	r3, [pc, #240]	@ (800ea2c <xQueueReceive+0x1c0>)
 800e93a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e93e:	601a      	str	r2, [r3, #0]
 800e940:	f3bf 8f4f 	dsb	sy
 800e944:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e948:	f001 fce8 	bl	801031c <vPortExitCritical>
				return pdPASS;
 800e94c:	2301      	movs	r3, #1
 800e94e:	e069      	b.n	800ea24 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d103      	bne.n	800e95e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e956:	f001 fce1 	bl	801031c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e95a:	2300      	movs	r3, #0
 800e95c:	e062      	b.n	800ea24 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e95e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e960:	2b00      	cmp	r3, #0
 800e962:	d106      	bne.n	800e972 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e964:	f107 0310 	add.w	r3, r7, #16
 800e968:	4618      	mov	r0, r3
 800e96a:	f000 fff5 	bl	800f958 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e96e:	2301      	movs	r3, #1
 800e970:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e972:	f001 fcd3 	bl	801031c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e976:	f000 fd93 	bl	800f4a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e97a:	f001 fc9d 	bl	80102b8 <vPortEnterCritical>
 800e97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e980:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e984:	b25b      	sxtb	r3, r3
 800e986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e98a:	d103      	bne.n	800e994 <xQueueReceive+0x128>
 800e98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e98e:	2200      	movs	r2, #0
 800e990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e996:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e99a:	b25b      	sxtb	r3, r3
 800e99c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9a0:	d103      	bne.n	800e9aa <xQueueReceive+0x13e>
 800e9a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e9aa:	f001 fcb7 	bl	801031c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e9ae:	1d3a      	adds	r2, r7, #4
 800e9b0:	f107 0310 	add.w	r3, r7, #16
 800e9b4:	4611      	mov	r1, r2
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f000 ffe4 	bl	800f984 <xTaskCheckForTimeOut>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d123      	bne.n	800ea0a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e9c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9c4:	f000 fae4 	bl	800ef90 <prvIsQueueEmpty>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d017      	beq.n	800e9fe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e9ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9d0:	3324      	adds	r3, #36	@ 0x24
 800e9d2:	687a      	ldr	r2, [r7, #4]
 800e9d4:	4611      	mov	r1, r2
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f000 ff34 	bl	800f844 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e9dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9de:	f000 fa85 	bl	800eeec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e9e2:	f000 fd6b 	bl	800f4bc <xTaskResumeAll>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d189      	bne.n	800e900 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e9ec:	4b0f      	ldr	r3, [pc, #60]	@ (800ea2c <xQueueReceive+0x1c0>)
 800e9ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9f2:	601a      	str	r2, [r3, #0]
 800e9f4:	f3bf 8f4f 	dsb	sy
 800e9f8:	f3bf 8f6f 	isb	sy
 800e9fc:	e780      	b.n	800e900 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e9fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea00:	f000 fa74 	bl	800eeec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ea04:	f000 fd5a 	bl	800f4bc <xTaskResumeAll>
 800ea08:	e77a      	b.n	800e900 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ea0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea0c:	f000 fa6e 	bl	800eeec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ea10:	f000 fd54 	bl	800f4bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea16:	f000 fabb 	bl	800ef90 <prvIsQueueEmpty>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	f43f af6f 	beq.w	800e900 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ea22:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3730      	adds	r7, #48	@ 0x30
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}
 800ea2c:	e000ed04 	.word	0xe000ed04

0800ea30 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b08e      	sub	sp, #56	@ 0x38
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ea42:	2300      	movs	r3, #0
 800ea44:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ea46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d10b      	bne.n	800ea64 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800ea4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea50:	f383 8811 	msr	BASEPRI, r3
 800ea54:	f3bf 8f6f 	isb	sy
 800ea58:	f3bf 8f4f 	dsb	sy
 800ea5c:	623b      	str	r3, [r7, #32]
}
 800ea5e:	bf00      	nop
 800ea60:	bf00      	nop
 800ea62:	e7fd      	b.n	800ea60 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ea64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d00b      	beq.n	800ea84 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800ea6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea70:	f383 8811 	msr	BASEPRI, r3
 800ea74:	f3bf 8f6f 	isb	sy
 800ea78:	f3bf 8f4f 	dsb	sy
 800ea7c:	61fb      	str	r3, [r7, #28]
}
 800ea7e:	bf00      	nop
 800ea80:	bf00      	nop
 800ea82:	e7fd      	b.n	800ea80 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ea84:	f001 f8c4 	bl	800fc10 <xTaskGetSchedulerState>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d102      	bne.n	800ea94 <xQueueSemaphoreTake+0x64>
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d101      	bne.n	800ea98 <xQueueSemaphoreTake+0x68>
 800ea94:	2301      	movs	r3, #1
 800ea96:	e000      	b.n	800ea9a <xQueueSemaphoreTake+0x6a>
 800ea98:	2300      	movs	r3, #0
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d10b      	bne.n	800eab6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800ea9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaa2:	f383 8811 	msr	BASEPRI, r3
 800eaa6:	f3bf 8f6f 	isb	sy
 800eaaa:	f3bf 8f4f 	dsb	sy
 800eaae:	61bb      	str	r3, [r7, #24]
}
 800eab0:	bf00      	nop
 800eab2:	bf00      	nop
 800eab4:	e7fd      	b.n	800eab2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eab6:	f001 fbff 	bl	80102b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800eaba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eabc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eabe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800eac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d024      	beq.n	800eb10 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800eac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eac8:	1e5a      	subs	r2, r3, #1
 800eaca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eacc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d104      	bne.n	800eae0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ead6:	f001 fa47 	bl	800ff68 <pvTaskIncrementMutexHeldCount>
 800eada:	4602      	mov	r2, r0
 800eadc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eade:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eae2:	691b      	ldr	r3, [r3, #16]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d00f      	beq.n	800eb08 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaea:	3310      	adds	r3, #16
 800eaec:	4618      	mov	r0, r3
 800eaee:	f000 fecf 	bl	800f890 <xTaskRemoveFromEventList>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d007      	beq.n	800eb08 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eaf8:	4b54      	ldr	r3, [pc, #336]	@ (800ec4c <xQueueSemaphoreTake+0x21c>)
 800eafa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eafe:	601a      	str	r2, [r3, #0]
 800eb00:	f3bf 8f4f 	dsb	sy
 800eb04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eb08:	f001 fc08 	bl	801031c <vPortExitCritical>
				return pdPASS;
 800eb0c:	2301      	movs	r3, #1
 800eb0e:	e098      	b.n	800ec42 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d112      	bne.n	800eb3c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800eb16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d00b      	beq.n	800eb34 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800eb1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb20:	f383 8811 	msr	BASEPRI, r3
 800eb24:	f3bf 8f6f 	isb	sy
 800eb28:	f3bf 8f4f 	dsb	sy
 800eb2c:	617b      	str	r3, [r7, #20]
}
 800eb2e:	bf00      	nop
 800eb30:	bf00      	nop
 800eb32:	e7fd      	b.n	800eb30 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800eb34:	f001 fbf2 	bl	801031c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	e082      	b.n	800ec42 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eb3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d106      	bne.n	800eb50 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eb42:	f107 030c 	add.w	r3, r7, #12
 800eb46:	4618      	mov	r0, r3
 800eb48:	f000 ff06 	bl	800f958 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eb50:	f001 fbe4 	bl	801031c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eb54:	f000 fca4 	bl	800f4a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb58:	f001 fbae 	bl	80102b8 <vPortEnterCritical>
 800eb5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb5e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eb62:	b25b      	sxtb	r3, r3
 800eb64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb68:	d103      	bne.n	800eb72 <xQueueSemaphoreTake+0x142>
 800eb6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eb72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eb78:	b25b      	sxtb	r3, r3
 800eb7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb7e:	d103      	bne.n	800eb88 <xQueueSemaphoreTake+0x158>
 800eb80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb82:	2200      	movs	r2, #0
 800eb84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eb88:	f001 fbc8 	bl	801031c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eb8c:	463a      	mov	r2, r7
 800eb8e:	f107 030c 	add.w	r3, r7, #12
 800eb92:	4611      	mov	r1, r2
 800eb94:	4618      	mov	r0, r3
 800eb96:	f000 fef5 	bl	800f984 <xTaskCheckForTimeOut>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d132      	bne.n	800ec06 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eba0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eba2:	f000 f9f5 	bl	800ef90 <prvIsQueueEmpty>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d026      	beq.n	800ebfa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ebac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d109      	bne.n	800ebc8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800ebb4:	f001 fb80 	bl	80102b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ebb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebba:	689b      	ldr	r3, [r3, #8]
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f001 f845 	bl	800fc4c <xTaskPriorityInherit>
 800ebc2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ebc4:	f001 fbaa 	bl	801031c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ebc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebca:	3324      	adds	r3, #36	@ 0x24
 800ebcc:	683a      	ldr	r2, [r7, #0]
 800ebce:	4611      	mov	r1, r2
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f000 fe37 	bl	800f844 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ebd6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ebd8:	f000 f988 	bl	800eeec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ebdc:	f000 fc6e 	bl	800f4bc <xTaskResumeAll>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	f47f af67 	bne.w	800eab6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800ebe8:	4b18      	ldr	r3, [pc, #96]	@ (800ec4c <xQueueSemaphoreTake+0x21c>)
 800ebea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ebee:	601a      	str	r2, [r3, #0]
 800ebf0:	f3bf 8f4f 	dsb	sy
 800ebf4:	f3bf 8f6f 	isb	sy
 800ebf8:	e75d      	b.n	800eab6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ebfa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ebfc:	f000 f976 	bl	800eeec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec00:	f000 fc5c 	bl	800f4bc <xTaskResumeAll>
 800ec04:	e757      	b.n	800eab6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ec06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec08:	f000 f970 	bl	800eeec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec0c:	f000 fc56 	bl	800f4bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec12:	f000 f9bd 	bl	800ef90 <prvIsQueueEmpty>
 800ec16:	4603      	mov	r3, r0
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	f43f af4c 	beq.w	800eab6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ec1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d00d      	beq.n	800ec40 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800ec24:	f001 fb48 	bl	80102b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ec28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec2a:	f000 f8b7 	bl	800ed9c <prvGetDisinheritPriorityAfterTimeout>
 800ec2e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ec30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec32:	689b      	ldr	r3, [r3, #8]
 800ec34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ec36:	4618      	mov	r0, r3
 800ec38:	f001 f906 	bl	800fe48 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ec3c:	f001 fb6e 	bl	801031c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ec40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3738      	adds	r7, #56	@ 0x38
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	e000ed04 	.word	0xe000ed04

0800ec50 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b08e      	sub	sp, #56	@ 0x38
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	60f8      	str	r0, [r7, #12]
 800ec58:	60b9      	str	r1, [r7, #8]
 800ec5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ec60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d10b      	bne.n	800ec7e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800ec66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec6a:	f383 8811 	msr	BASEPRI, r3
 800ec6e:	f3bf 8f6f 	isb	sy
 800ec72:	f3bf 8f4f 	dsb	sy
 800ec76:	623b      	str	r3, [r7, #32]
}
 800ec78:	bf00      	nop
 800ec7a:	bf00      	nop
 800ec7c:	e7fd      	b.n	800ec7a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d103      	bne.n	800ec8c <xQueueReceiveFromISR+0x3c>
 800ec84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d101      	bne.n	800ec90 <xQueueReceiveFromISR+0x40>
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	e000      	b.n	800ec92 <xQueueReceiveFromISR+0x42>
 800ec90:	2300      	movs	r3, #0
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d10b      	bne.n	800ecae <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800ec96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec9a:	f383 8811 	msr	BASEPRI, r3
 800ec9e:	f3bf 8f6f 	isb	sy
 800eca2:	f3bf 8f4f 	dsb	sy
 800eca6:	61fb      	str	r3, [r7, #28]
}
 800eca8:	bf00      	nop
 800ecaa:	bf00      	nop
 800ecac:	e7fd      	b.n	800ecaa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ecae:	f001 fbe3 	bl	8010478 <vPortValidateInterruptPriority>
	__asm volatile
 800ecb2:	f3ef 8211 	mrs	r2, BASEPRI
 800ecb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecba:	f383 8811 	msr	BASEPRI, r3
 800ecbe:	f3bf 8f6f 	isb	sy
 800ecc2:	f3bf 8f4f 	dsb	sy
 800ecc6:	61ba      	str	r2, [r7, #24]
 800ecc8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ecca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ecce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecd2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ecd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d02f      	beq.n	800ed3a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ecda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ece0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ece4:	68b9      	ldr	r1, [r7, #8]
 800ece6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ece8:	f000 f8da 	bl	800eea0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ecec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecee:	1e5a      	subs	r2, r3, #1
 800ecf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecf2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ecf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ecf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecfc:	d112      	bne.n	800ed24 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ecfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed00:	691b      	ldr	r3, [r3, #16]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d016      	beq.n	800ed34 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed08:	3310      	adds	r3, #16
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f000 fdc0 	bl	800f890 <xTaskRemoveFromEventList>
 800ed10:	4603      	mov	r3, r0
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d00e      	beq.n	800ed34 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d00b      	beq.n	800ed34 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2201      	movs	r2, #1
 800ed20:	601a      	str	r2, [r3, #0]
 800ed22:	e007      	b.n	800ed34 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ed24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed28:	3301      	adds	r3, #1
 800ed2a:	b2db      	uxtb	r3, r3
 800ed2c:	b25a      	sxtb	r2, r3
 800ed2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ed34:	2301      	movs	r3, #1
 800ed36:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed38:	e001      	b.n	800ed3e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed40:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	f383 8811 	msr	BASEPRI, r3
}
 800ed48:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ed4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3738      	adds	r7, #56	@ 0x38
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}

0800ed54 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b084      	sub	sp, #16
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d10b      	bne.n	800ed7e <vQueueDelete+0x2a>
	__asm volatile
 800ed66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed6a:	f383 8811 	msr	BASEPRI, r3
 800ed6e:	f3bf 8f6f 	isb	sy
 800ed72:	f3bf 8f4f 	dsb	sy
 800ed76:	60bb      	str	r3, [r7, #8]
}
 800ed78:	bf00      	nop
 800ed7a:	bf00      	nop
 800ed7c:	e7fd      	b.n	800ed7a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ed7e:	68f8      	ldr	r0, [r7, #12]
 800ed80:	f000 f934 	bl	800efec <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d102      	bne.n	800ed94 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800ed8e:	68f8      	ldr	r0, [r7, #12]
 800ed90:	f001 fc82 	bl	8010698 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ed94:	bf00      	nop
 800ed96:	3710      	adds	r7, #16
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ed9c:	b480      	push	{r7}
 800ed9e:	b085      	sub	sp, #20
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d006      	beq.n	800edba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	f1c3 0307 	rsb	r3, r3, #7
 800edb6:	60fb      	str	r3, [r7, #12]
 800edb8:	e001      	b.n	800edbe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800edba:	2300      	movs	r3, #0
 800edbc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800edbe:	68fb      	ldr	r3, [r7, #12]
	}
 800edc0:	4618      	mov	r0, r3
 800edc2:	3714      	adds	r7, #20
 800edc4:	46bd      	mov	sp, r7
 800edc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edca:	4770      	bx	lr

0800edcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b086      	sub	sp, #24
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	60f8      	str	r0, [r7, #12]
 800edd4:	60b9      	str	r1, [r7, #8]
 800edd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800edd8:	2300      	movs	r3, #0
 800edda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ede0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d10d      	bne.n	800ee06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d14d      	bne.n	800ee8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	689b      	ldr	r3, [r3, #8]
 800edf6:	4618      	mov	r0, r3
 800edf8:	f000 ff9e 	bl	800fd38 <xTaskPriorityDisinherit>
 800edfc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2200      	movs	r2, #0
 800ee02:	609a      	str	r2, [r3, #8]
 800ee04:	e043      	b.n	800ee8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d119      	bne.n	800ee40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	6858      	ldr	r0, [r3, #4]
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee14:	461a      	mov	r2, r3
 800ee16:	68b9      	ldr	r1, [r7, #8]
 800ee18:	f003 fabc 	bl	8012394 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	685a      	ldr	r2, [r3, #4]
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee24:	441a      	add	r2, r3
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	685a      	ldr	r2, [r3, #4]
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	689b      	ldr	r3, [r3, #8]
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d32b      	bcc.n	800ee8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	681a      	ldr	r2, [r3, #0]
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	605a      	str	r2, [r3, #4]
 800ee3e:	e026      	b.n	800ee8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	68d8      	ldr	r0, [r3, #12]
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee48:	461a      	mov	r2, r3
 800ee4a:	68b9      	ldr	r1, [r7, #8]
 800ee4c:	f003 faa2 	bl	8012394 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	68da      	ldr	r2, [r3, #12]
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee58:	425b      	negs	r3, r3
 800ee5a:	441a      	add	r2, r3
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	68da      	ldr	r2, [r3, #12]
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d207      	bcs.n	800ee7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	689a      	ldr	r2, [r3, #8]
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee74:	425b      	negs	r3, r3
 800ee76:	441a      	add	r2, r3
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2b02      	cmp	r3, #2
 800ee80:	d105      	bne.n	800ee8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ee82:	693b      	ldr	r3, [r7, #16]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d002      	beq.n	800ee8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ee88:	693b      	ldr	r3, [r7, #16]
 800ee8a:	3b01      	subs	r3, #1
 800ee8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	1c5a      	adds	r2, r3, #1
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ee96:	697b      	ldr	r3, [r7, #20]
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	3718      	adds	r7, #24
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}

0800eea0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d018      	beq.n	800eee4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	68da      	ldr	r2, [r3, #12]
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eeba:	441a      	add	r2, r3
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	68da      	ldr	r2, [r3, #12]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	689b      	ldr	r3, [r3, #8]
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d303      	bcc.n	800eed4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681a      	ldr	r2, [r3, #0]
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	68d9      	ldr	r1, [r3, #12]
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eedc:	461a      	mov	r2, r3
 800eede:	6838      	ldr	r0, [r7, #0]
 800eee0:	f003 fa58 	bl	8012394 <memcpy>
	}
}
 800eee4:	bf00      	nop
 800eee6:	3708      	adds	r7, #8
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}

0800eeec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b084      	sub	sp, #16
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800eef4:	f001 f9e0 	bl	80102b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eefe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ef00:	e011      	b.n	800ef26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d012      	beq.n	800ef30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	3324      	adds	r3, #36	@ 0x24
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f000 fcbe 	bl	800f890 <xTaskRemoveFromEventList>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d001      	beq.n	800ef1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ef1a:	f000 fd97 	bl	800fa4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ef1e:	7bfb      	ldrb	r3, [r7, #15]
 800ef20:	3b01      	subs	r3, #1
 800ef22:	b2db      	uxtb	r3, r3
 800ef24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ef26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	dce9      	bgt.n	800ef02 <prvUnlockQueue+0x16>
 800ef2e:	e000      	b.n	800ef32 <prvUnlockQueue+0x46>
					break;
 800ef30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	22ff      	movs	r2, #255	@ 0xff
 800ef36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ef3a:	f001 f9ef 	bl	801031c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ef3e:	f001 f9bb 	bl	80102b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ef48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ef4a:	e011      	b.n	800ef70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	691b      	ldr	r3, [r3, #16]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d012      	beq.n	800ef7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	3310      	adds	r3, #16
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f000 fc99 	bl	800f890 <xTaskRemoveFromEventList>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d001      	beq.n	800ef68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ef64:	f000 fd72 	bl	800fa4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ef68:	7bbb      	ldrb	r3, [r7, #14]
 800ef6a:	3b01      	subs	r3, #1
 800ef6c:	b2db      	uxtb	r3, r3
 800ef6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ef70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	dce9      	bgt.n	800ef4c <prvUnlockQueue+0x60>
 800ef78:	e000      	b.n	800ef7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ef7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	22ff      	movs	r2, #255	@ 0xff
 800ef80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ef84:	f001 f9ca 	bl	801031c <vPortExitCritical>
}
 800ef88:	bf00      	nop
 800ef8a:	3710      	adds	r7, #16
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}

0800ef90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b084      	sub	sp, #16
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ef98:	f001 f98e 	bl	80102b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d102      	bne.n	800efaa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800efa4:	2301      	movs	r3, #1
 800efa6:	60fb      	str	r3, [r7, #12]
 800efa8:	e001      	b.n	800efae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800efaa:	2300      	movs	r3, #0
 800efac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800efae:	f001 f9b5 	bl	801031c <vPortExitCritical>

	return xReturn;
 800efb2:	68fb      	ldr	r3, [r7, #12]
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	3710      	adds	r7, #16
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}

0800efbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800efc4:	f001 f978 	bl	80102b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d102      	bne.n	800efda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800efd4:	2301      	movs	r3, #1
 800efd6:	60fb      	str	r3, [r7, #12]
 800efd8:	e001      	b.n	800efde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800efda:	2300      	movs	r3, #0
 800efdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800efde:	f001 f99d 	bl	801031c <vPortExitCritical>

	return xReturn;
 800efe2:	68fb      	ldr	r3, [r7, #12]
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	3710      	adds	r7, #16
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd80      	pop	{r7, pc}

0800efec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800efec:	b480      	push	{r7}
 800efee:	b085      	sub	sp, #20
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eff4:	2300      	movs	r3, #0
 800eff6:	60fb      	str	r3, [r7, #12]
 800eff8:	e016      	b.n	800f028 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800effa:	4a10      	ldr	r2, [pc, #64]	@ (800f03c <vQueueUnregisterQueue+0x50>)
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	00db      	lsls	r3, r3, #3
 800f000:	4413      	add	r3, r2
 800f002:	685b      	ldr	r3, [r3, #4]
 800f004:	687a      	ldr	r2, [r7, #4]
 800f006:	429a      	cmp	r2, r3
 800f008:	d10b      	bne.n	800f022 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f00a:	4a0c      	ldr	r2, [pc, #48]	@ (800f03c <vQueueUnregisterQueue+0x50>)
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	2100      	movs	r1, #0
 800f010:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f014:	4a09      	ldr	r2, [pc, #36]	@ (800f03c <vQueueUnregisterQueue+0x50>)
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	00db      	lsls	r3, r3, #3
 800f01a:	4413      	add	r3, r2
 800f01c:	2200      	movs	r2, #0
 800f01e:	605a      	str	r2, [r3, #4]
				break;
 800f020:	e006      	b.n	800f030 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	3301      	adds	r3, #1
 800f026:	60fb      	str	r3, [r7, #12]
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	2b07      	cmp	r3, #7
 800f02c:	d9e5      	bls.n	800effa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f02e:	bf00      	nop
 800f030:	bf00      	nop
 800f032:	3714      	adds	r7, #20
 800f034:	46bd      	mov	sp, r7
 800f036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03a:	4770      	bx	lr
 800f03c:	20002aa4 	.word	0x20002aa4

0800f040 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f040:	b580      	push	{r7, lr}
 800f042:	b08e      	sub	sp, #56	@ 0x38
 800f044:	af04      	add	r7, sp, #16
 800f046:	60f8      	str	r0, [r7, #12]
 800f048:	60b9      	str	r1, [r7, #8]
 800f04a:	607a      	str	r2, [r7, #4]
 800f04c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f04e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f050:	2b00      	cmp	r3, #0
 800f052:	d10b      	bne.n	800f06c <xTaskCreateStatic+0x2c>
	__asm volatile
 800f054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f058:	f383 8811 	msr	BASEPRI, r3
 800f05c:	f3bf 8f6f 	isb	sy
 800f060:	f3bf 8f4f 	dsb	sy
 800f064:	623b      	str	r3, [r7, #32]
}
 800f066:	bf00      	nop
 800f068:	bf00      	nop
 800f06a:	e7fd      	b.n	800f068 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d10b      	bne.n	800f08a <xTaskCreateStatic+0x4a>
	__asm volatile
 800f072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f076:	f383 8811 	msr	BASEPRI, r3
 800f07a:	f3bf 8f6f 	isb	sy
 800f07e:	f3bf 8f4f 	dsb	sy
 800f082:	61fb      	str	r3, [r7, #28]
}
 800f084:	bf00      	nop
 800f086:	bf00      	nop
 800f088:	e7fd      	b.n	800f086 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f08a:	2354      	movs	r3, #84	@ 0x54
 800f08c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	2b54      	cmp	r3, #84	@ 0x54
 800f092:	d00b      	beq.n	800f0ac <xTaskCreateStatic+0x6c>
	__asm volatile
 800f094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f098:	f383 8811 	msr	BASEPRI, r3
 800f09c:	f3bf 8f6f 	isb	sy
 800f0a0:	f3bf 8f4f 	dsb	sy
 800f0a4:	61bb      	str	r3, [r7, #24]
}
 800f0a6:	bf00      	nop
 800f0a8:	bf00      	nop
 800f0aa:	e7fd      	b.n	800f0a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f0ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d01e      	beq.n	800f0f2 <xTaskCreateStatic+0xb2>
 800f0b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d01b      	beq.n	800f0f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f0c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0c6:	2202      	movs	r2, #2
 800f0c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	9303      	str	r3, [sp, #12]
 800f0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0d2:	9302      	str	r3, [sp, #8]
 800f0d4:	f107 0314 	add.w	r3, r7, #20
 800f0d8:	9301      	str	r3, [sp, #4]
 800f0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0dc:	9300      	str	r3, [sp, #0]
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	687a      	ldr	r2, [r7, #4]
 800f0e2:	68b9      	ldr	r1, [r7, #8]
 800f0e4:	68f8      	ldr	r0, [r7, #12]
 800f0e6:	f000 f850 	bl	800f18a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f0ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f0ec:	f000 f8d6 	bl	800f29c <prvAddNewTaskToReadyList>
 800f0f0:	e001      	b.n	800f0f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f0f6:	697b      	ldr	r3, [r7, #20]
	}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	3728      	adds	r7, #40	@ 0x28
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}

0800f100 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f100:	b580      	push	{r7, lr}
 800f102:	b08c      	sub	sp, #48	@ 0x30
 800f104:	af04      	add	r7, sp, #16
 800f106:	60f8      	str	r0, [r7, #12]
 800f108:	60b9      	str	r1, [r7, #8]
 800f10a:	603b      	str	r3, [r7, #0]
 800f10c:	4613      	mov	r3, r2
 800f10e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f110:	88fb      	ldrh	r3, [r7, #6]
 800f112:	009b      	lsls	r3, r3, #2
 800f114:	4618      	mov	r0, r3
 800f116:	f001 f9f1 	bl	80104fc <pvPortMalloc>
 800f11a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f11c:	697b      	ldr	r3, [r7, #20]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d00e      	beq.n	800f140 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f122:	2054      	movs	r0, #84	@ 0x54
 800f124:	f001 f9ea 	bl	80104fc <pvPortMalloc>
 800f128:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f12a:	69fb      	ldr	r3, [r7, #28]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d003      	beq.n	800f138 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f130:	69fb      	ldr	r3, [r7, #28]
 800f132:	697a      	ldr	r2, [r7, #20]
 800f134:	631a      	str	r2, [r3, #48]	@ 0x30
 800f136:	e005      	b.n	800f144 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f138:	6978      	ldr	r0, [r7, #20]
 800f13a:	f001 faad 	bl	8010698 <vPortFree>
 800f13e:	e001      	b.n	800f144 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f140:	2300      	movs	r3, #0
 800f142:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f144:	69fb      	ldr	r3, [r7, #28]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d017      	beq.n	800f17a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f14a:	69fb      	ldr	r3, [r7, #28]
 800f14c:	2200      	movs	r2, #0
 800f14e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f152:	88fa      	ldrh	r2, [r7, #6]
 800f154:	2300      	movs	r3, #0
 800f156:	9303      	str	r3, [sp, #12]
 800f158:	69fb      	ldr	r3, [r7, #28]
 800f15a:	9302      	str	r3, [sp, #8]
 800f15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f15e:	9301      	str	r3, [sp, #4]
 800f160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f162:	9300      	str	r3, [sp, #0]
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	68b9      	ldr	r1, [r7, #8]
 800f168:	68f8      	ldr	r0, [r7, #12]
 800f16a:	f000 f80e 	bl	800f18a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f16e:	69f8      	ldr	r0, [r7, #28]
 800f170:	f000 f894 	bl	800f29c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f174:	2301      	movs	r3, #1
 800f176:	61bb      	str	r3, [r7, #24]
 800f178:	e002      	b.n	800f180 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f17a:	f04f 33ff 	mov.w	r3, #4294967295
 800f17e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f180:	69bb      	ldr	r3, [r7, #24]
	}
 800f182:	4618      	mov	r0, r3
 800f184:	3720      	adds	r7, #32
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}

0800f18a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f18a:	b580      	push	{r7, lr}
 800f18c:	b088      	sub	sp, #32
 800f18e:	af00      	add	r7, sp, #0
 800f190:	60f8      	str	r0, [r7, #12]
 800f192:	60b9      	str	r1, [r7, #8]
 800f194:	607a      	str	r2, [r7, #4]
 800f196:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f19a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f1a2:	3b01      	subs	r3, #1
 800f1a4:	009b      	lsls	r3, r3, #2
 800f1a6:	4413      	add	r3, r2
 800f1a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f1aa:	69bb      	ldr	r3, [r7, #24]
 800f1ac:	f023 0307 	bic.w	r3, r3, #7
 800f1b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f1b2:	69bb      	ldr	r3, [r7, #24]
 800f1b4:	f003 0307 	and.w	r3, r3, #7
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d00b      	beq.n	800f1d4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800f1bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1c0:	f383 8811 	msr	BASEPRI, r3
 800f1c4:	f3bf 8f6f 	isb	sy
 800f1c8:	f3bf 8f4f 	dsb	sy
 800f1cc:	617b      	str	r3, [r7, #20]
}
 800f1ce:	bf00      	nop
 800f1d0:	bf00      	nop
 800f1d2:	e7fd      	b.n	800f1d0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d01f      	beq.n	800f21a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f1da:	2300      	movs	r3, #0
 800f1dc:	61fb      	str	r3, [r7, #28]
 800f1de:	e012      	b.n	800f206 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f1e0:	68ba      	ldr	r2, [r7, #8]
 800f1e2:	69fb      	ldr	r3, [r7, #28]
 800f1e4:	4413      	add	r3, r2
 800f1e6:	7819      	ldrb	r1, [r3, #0]
 800f1e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1ea:	69fb      	ldr	r3, [r7, #28]
 800f1ec:	4413      	add	r3, r2
 800f1ee:	3334      	adds	r3, #52	@ 0x34
 800f1f0:	460a      	mov	r2, r1
 800f1f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f1f4:	68ba      	ldr	r2, [r7, #8]
 800f1f6:	69fb      	ldr	r3, [r7, #28]
 800f1f8:	4413      	add	r3, r2
 800f1fa:	781b      	ldrb	r3, [r3, #0]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d006      	beq.n	800f20e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f200:	69fb      	ldr	r3, [r7, #28]
 800f202:	3301      	adds	r3, #1
 800f204:	61fb      	str	r3, [r7, #28]
 800f206:	69fb      	ldr	r3, [r7, #28]
 800f208:	2b0f      	cmp	r3, #15
 800f20a:	d9e9      	bls.n	800f1e0 <prvInitialiseNewTask+0x56>
 800f20c:	e000      	b.n	800f210 <prvInitialiseNewTask+0x86>
			{
				break;
 800f20e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f212:	2200      	movs	r2, #0
 800f214:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f218:	e003      	b.n	800f222 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f21c:	2200      	movs	r2, #0
 800f21e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f224:	2b06      	cmp	r3, #6
 800f226:	d901      	bls.n	800f22c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f228:	2306      	movs	r3, #6
 800f22a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f22c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f22e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f230:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f234:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f236:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f23a:	2200      	movs	r2, #0
 800f23c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f240:	3304      	adds	r3, #4
 800f242:	4618      	mov	r0, r3
 800f244:	f7fe ffa9 	bl	800e19a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f24a:	3318      	adds	r3, #24
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7fe ffa4 	bl	800e19a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f254:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f256:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f25a:	f1c3 0207 	rsb	r2, r3, #7
 800f25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f260:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f266:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f26a:	2200      	movs	r2, #0
 800f26c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f270:	2200      	movs	r2, #0
 800f272:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f276:	683a      	ldr	r2, [r7, #0]
 800f278:	68f9      	ldr	r1, [r7, #12]
 800f27a:	69b8      	ldr	r0, [r7, #24]
 800f27c:	f000 feee 	bl	801005c <pxPortInitialiseStack>
 800f280:	4602      	mov	r2, r0
 800f282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f284:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d002      	beq.n	800f292 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f28e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f290:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f292:	bf00      	nop
 800f294:	3720      	adds	r7, #32
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}
	...

0800f29c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b082      	sub	sp, #8
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f2a4:	f001 f808 	bl	80102b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f2a8:	4b2a      	ldr	r3, [pc, #168]	@ (800f354 <prvAddNewTaskToReadyList+0xb8>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	3301      	adds	r3, #1
 800f2ae:	4a29      	ldr	r2, [pc, #164]	@ (800f354 <prvAddNewTaskToReadyList+0xb8>)
 800f2b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f2b2:	4b29      	ldr	r3, [pc, #164]	@ (800f358 <prvAddNewTaskToReadyList+0xbc>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d109      	bne.n	800f2ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f2ba:	4a27      	ldr	r2, [pc, #156]	@ (800f358 <prvAddNewTaskToReadyList+0xbc>)
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f2c0:	4b24      	ldr	r3, [pc, #144]	@ (800f354 <prvAddNewTaskToReadyList+0xb8>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	2b01      	cmp	r3, #1
 800f2c6:	d110      	bne.n	800f2ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f2c8:	f000 fbe4 	bl	800fa94 <prvInitialiseTaskLists>
 800f2cc:	e00d      	b.n	800f2ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f2ce:	4b23      	ldr	r3, [pc, #140]	@ (800f35c <prvAddNewTaskToReadyList+0xc0>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d109      	bne.n	800f2ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f2d6:	4b20      	ldr	r3, [pc, #128]	@ (800f358 <prvAddNewTaskToReadyList+0xbc>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2e0:	429a      	cmp	r2, r3
 800f2e2:	d802      	bhi.n	800f2ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f2e4:	4a1c      	ldr	r2, [pc, #112]	@ (800f358 <prvAddNewTaskToReadyList+0xbc>)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f2ea:	4b1d      	ldr	r3, [pc, #116]	@ (800f360 <prvAddNewTaskToReadyList+0xc4>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	4a1b      	ldr	r2, [pc, #108]	@ (800f360 <prvAddNewTaskToReadyList+0xc4>)
 800f2f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2f8:	2201      	movs	r2, #1
 800f2fa:	409a      	lsls	r2, r3
 800f2fc:	4b19      	ldr	r3, [pc, #100]	@ (800f364 <prvAddNewTaskToReadyList+0xc8>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	4313      	orrs	r3, r2
 800f302:	4a18      	ldr	r2, [pc, #96]	@ (800f364 <prvAddNewTaskToReadyList+0xc8>)
 800f304:	6013      	str	r3, [r2, #0]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f30a:	4613      	mov	r3, r2
 800f30c:	009b      	lsls	r3, r3, #2
 800f30e:	4413      	add	r3, r2
 800f310:	009b      	lsls	r3, r3, #2
 800f312:	4a15      	ldr	r2, [pc, #84]	@ (800f368 <prvAddNewTaskToReadyList+0xcc>)
 800f314:	441a      	add	r2, r3
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	3304      	adds	r3, #4
 800f31a:	4619      	mov	r1, r3
 800f31c:	4610      	mov	r0, r2
 800f31e:	f7fe ff49 	bl	800e1b4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f322:	f000 fffb 	bl	801031c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f326:	4b0d      	ldr	r3, [pc, #52]	@ (800f35c <prvAddNewTaskToReadyList+0xc0>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d00e      	beq.n	800f34c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f32e:	4b0a      	ldr	r3, [pc, #40]	@ (800f358 <prvAddNewTaskToReadyList+0xbc>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f338:	429a      	cmp	r2, r3
 800f33a:	d207      	bcs.n	800f34c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f33c:	4b0b      	ldr	r3, [pc, #44]	@ (800f36c <prvAddNewTaskToReadyList+0xd0>)
 800f33e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f342:	601a      	str	r2, [r3, #0]
 800f344:	f3bf 8f4f 	dsb	sy
 800f348:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f34c:	bf00      	nop
 800f34e:	3708      	adds	r7, #8
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}
 800f354:	20002be4 	.word	0x20002be4
 800f358:	20002ae4 	.word	0x20002ae4
 800f35c:	20002bf0 	.word	0x20002bf0
 800f360:	20002c00 	.word	0x20002c00
 800f364:	20002bec 	.word	0x20002bec
 800f368:	20002ae8 	.word	0x20002ae8
 800f36c:	e000ed04 	.word	0xe000ed04

0800f370 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f370:	b580      	push	{r7, lr}
 800f372:	b084      	sub	sp, #16
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f378:	2300      	movs	r3, #0
 800f37a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d018      	beq.n	800f3b4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f382:	4b14      	ldr	r3, [pc, #80]	@ (800f3d4 <vTaskDelay+0x64>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d00b      	beq.n	800f3a2 <vTaskDelay+0x32>
	__asm volatile
 800f38a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f38e:	f383 8811 	msr	BASEPRI, r3
 800f392:	f3bf 8f6f 	isb	sy
 800f396:	f3bf 8f4f 	dsb	sy
 800f39a:	60bb      	str	r3, [r7, #8]
}
 800f39c:	bf00      	nop
 800f39e:	bf00      	nop
 800f3a0:	e7fd      	b.n	800f39e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f3a2:	f000 f87d 	bl	800f4a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f3a6:	2100      	movs	r1, #0
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f000 fdf1 	bl	800ff90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f3ae:	f000 f885 	bl	800f4bc <xTaskResumeAll>
 800f3b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d107      	bne.n	800f3ca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f3ba:	4b07      	ldr	r3, [pc, #28]	@ (800f3d8 <vTaskDelay+0x68>)
 800f3bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f3c0:	601a      	str	r2, [r3, #0]
 800f3c2:	f3bf 8f4f 	dsb	sy
 800f3c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f3ca:	bf00      	nop
 800f3cc:	3710      	adds	r7, #16
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}
 800f3d2:	bf00      	nop
 800f3d4:	20002c0c 	.word	0x20002c0c
 800f3d8:	e000ed04 	.word	0xe000ed04

0800f3dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b08a      	sub	sp, #40	@ 0x28
 800f3e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f3ea:	463a      	mov	r2, r7
 800f3ec:	1d39      	adds	r1, r7, #4
 800f3ee:	f107 0308 	add.w	r3, r7, #8
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f7f2 fa1a 	bl	800182c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f3f8:	6839      	ldr	r1, [r7, #0]
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	68ba      	ldr	r2, [r7, #8]
 800f3fe:	9202      	str	r2, [sp, #8]
 800f400:	9301      	str	r3, [sp, #4]
 800f402:	2300      	movs	r3, #0
 800f404:	9300      	str	r3, [sp, #0]
 800f406:	2300      	movs	r3, #0
 800f408:	460a      	mov	r2, r1
 800f40a:	491f      	ldr	r1, [pc, #124]	@ (800f488 <vTaskStartScheduler+0xac>)
 800f40c:	481f      	ldr	r0, [pc, #124]	@ (800f48c <vTaskStartScheduler+0xb0>)
 800f40e:	f7ff fe17 	bl	800f040 <xTaskCreateStatic>
 800f412:	4603      	mov	r3, r0
 800f414:	4a1e      	ldr	r2, [pc, #120]	@ (800f490 <vTaskStartScheduler+0xb4>)
 800f416:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f418:	4b1d      	ldr	r3, [pc, #116]	@ (800f490 <vTaskStartScheduler+0xb4>)
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d002      	beq.n	800f426 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f420:	2301      	movs	r3, #1
 800f422:	617b      	str	r3, [r7, #20]
 800f424:	e001      	b.n	800f42a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f426:	2300      	movs	r3, #0
 800f428:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	2b01      	cmp	r3, #1
 800f42e:	d116      	bne.n	800f45e <vTaskStartScheduler+0x82>
	__asm volatile
 800f430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f434:	f383 8811 	msr	BASEPRI, r3
 800f438:	f3bf 8f6f 	isb	sy
 800f43c:	f3bf 8f4f 	dsb	sy
 800f440:	613b      	str	r3, [r7, #16]
}
 800f442:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f444:	4b13      	ldr	r3, [pc, #76]	@ (800f494 <vTaskStartScheduler+0xb8>)
 800f446:	f04f 32ff 	mov.w	r2, #4294967295
 800f44a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f44c:	4b12      	ldr	r3, [pc, #72]	@ (800f498 <vTaskStartScheduler+0xbc>)
 800f44e:	2201      	movs	r2, #1
 800f450:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f452:	4b12      	ldr	r3, [pc, #72]	@ (800f49c <vTaskStartScheduler+0xc0>)
 800f454:	2200      	movs	r2, #0
 800f456:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f458:	f000 fe8a 	bl	8010170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f45c:	e00f      	b.n	800f47e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f464:	d10b      	bne.n	800f47e <vTaskStartScheduler+0xa2>
	__asm volatile
 800f466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f46a:	f383 8811 	msr	BASEPRI, r3
 800f46e:	f3bf 8f6f 	isb	sy
 800f472:	f3bf 8f4f 	dsb	sy
 800f476:	60fb      	str	r3, [r7, #12]
}
 800f478:	bf00      	nop
 800f47a:	bf00      	nop
 800f47c:	e7fd      	b.n	800f47a <vTaskStartScheduler+0x9e>
}
 800f47e:	bf00      	nop
 800f480:	3718      	adds	r7, #24
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}
 800f486:	bf00      	nop
 800f488:	08012f38 	.word	0x08012f38
 800f48c:	0800fa65 	.word	0x0800fa65
 800f490:	20002c08 	.word	0x20002c08
 800f494:	20002c04 	.word	0x20002c04
 800f498:	20002bf0 	.word	0x20002bf0
 800f49c:	20002be8 	.word	0x20002be8

0800f4a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f4a0:	b480      	push	{r7}
 800f4a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f4a4:	4b04      	ldr	r3, [pc, #16]	@ (800f4b8 <vTaskSuspendAll+0x18>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	3301      	adds	r3, #1
 800f4aa:	4a03      	ldr	r2, [pc, #12]	@ (800f4b8 <vTaskSuspendAll+0x18>)
 800f4ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f4ae:	bf00      	nop
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b6:	4770      	bx	lr
 800f4b8:	20002c0c 	.word	0x20002c0c

0800f4bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b084      	sub	sp, #16
 800f4c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f4ca:	4b42      	ldr	r3, [pc, #264]	@ (800f5d4 <xTaskResumeAll+0x118>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d10b      	bne.n	800f4ea <xTaskResumeAll+0x2e>
	__asm volatile
 800f4d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4d6:	f383 8811 	msr	BASEPRI, r3
 800f4da:	f3bf 8f6f 	isb	sy
 800f4de:	f3bf 8f4f 	dsb	sy
 800f4e2:	603b      	str	r3, [r7, #0]
}
 800f4e4:	bf00      	nop
 800f4e6:	bf00      	nop
 800f4e8:	e7fd      	b.n	800f4e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f4ea:	f000 fee5 	bl	80102b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f4ee:	4b39      	ldr	r3, [pc, #228]	@ (800f5d4 <xTaskResumeAll+0x118>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	3b01      	subs	r3, #1
 800f4f4:	4a37      	ldr	r2, [pc, #220]	@ (800f5d4 <xTaskResumeAll+0x118>)
 800f4f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f4f8:	4b36      	ldr	r3, [pc, #216]	@ (800f5d4 <xTaskResumeAll+0x118>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d161      	bne.n	800f5c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f500:	4b35      	ldr	r3, [pc, #212]	@ (800f5d8 <xTaskResumeAll+0x11c>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d05d      	beq.n	800f5c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f508:	e02e      	b.n	800f568 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f50a:	4b34      	ldr	r3, [pc, #208]	@ (800f5dc <xTaskResumeAll+0x120>)
 800f50c:	68db      	ldr	r3, [r3, #12]
 800f50e:	68db      	ldr	r3, [r3, #12]
 800f510:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	3318      	adds	r3, #24
 800f516:	4618      	mov	r0, r3
 800f518:	f7fe fea9 	bl	800e26e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	3304      	adds	r3, #4
 800f520:	4618      	mov	r0, r3
 800f522:	f7fe fea4 	bl	800e26e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f52a:	2201      	movs	r2, #1
 800f52c:	409a      	lsls	r2, r3
 800f52e:	4b2c      	ldr	r3, [pc, #176]	@ (800f5e0 <xTaskResumeAll+0x124>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	4313      	orrs	r3, r2
 800f534:	4a2a      	ldr	r2, [pc, #168]	@ (800f5e0 <xTaskResumeAll+0x124>)
 800f536:	6013      	str	r3, [r2, #0]
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f53c:	4613      	mov	r3, r2
 800f53e:	009b      	lsls	r3, r3, #2
 800f540:	4413      	add	r3, r2
 800f542:	009b      	lsls	r3, r3, #2
 800f544:	4a27      	ldr	r2, [pc, #156]	@ (800f5e4 <xTaskResumeAll+0x128>)
 800f546:	441a      	add	r2, r3
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	3304      	adds	r3, #4
 800f54c:	4619      	mov	r1, r3
 800f54e:	4610      	mov	r0, r2
 800f550:	f7fe fe30 	bl	800e1b4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f558:	4b23      	ldr	r3, [pc, #140]	@ (800f5e8 <xTaskResumeAll+0x12c>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f55e:	429a      	cmp	r2, r3
 800f560:	d302      	bcc.n	800f568 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f562:	4b22      	ldr	r3, [pc, #136]	@ (800f5ec <xTaskResumeAll+0x130>)
 800f564:	2201      	movs	r2, #1
 800f566:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f568:	4b1c      	ldr	r3, [pc, #112]	@ (800f5dc <xTaskResumeAll+0x120>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d1cc      	bne.n	800f50a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d001      	beq.n	800f57a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f576:	f000 fb2b 	bl	800fbd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f57a:	4b1d      	ldr	r3, [pc, #116]	@ (800f5f0 <xTaskResumeAll+0x134>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d010      	beq.n	800f5a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f586:	f000 f847 	bl	800f618 <xTaskIncrementTick>
 800f58a:	4603      	mov	r3, r0
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d002      	beq.n	800f596 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f590:	4b16      	ldr	r3, [pc, #88]	@ (800f5ec <xTaskResumeAll+0x130>)
 800f592:	2201      	movs	r2, #1
 800f594:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	3b01      	subs	r3, #1
 800f59a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d1f1      	bne.n	800f586 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f5a2:	4b13      	ldr	r3, [pc, #76]	@ (800f5f0 <xTaskResumeAll+0x134>)
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f5a8:	4b10      	ldr	r3, [pc, #64]	@ (800f5ec <xTaskResumeAll+0x130>)
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d009      	beq.n	800f5c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f5b4:	4b0f      	ldr	r3, [pc, #60]	@ (800f5f4 <xTaskResumeAll+0x138>)
 800f5b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f5ba:	601a      	str	r2, [r3, #0]
 800f5bc:	f3bf 8f4f 	dsb	sy
 800f5c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f5c4:	f000 feaa 	bl	801031c <vPortExitCritical>

	return xAlreadyYielded;
 800f5c8:	68bb      	ldr	r3, [r7, #8]
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3710      	adds	r7, #16
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}
 800f5d2:	bf00      	nop
 800f5d4:	20002c0c 	.word	0x20002c0c
 800f5d8:	20002be4 	.word	0x20002be4
 800f5dc:	20002ba4 	.word	0x20002ba4
 800f5e0:	20002bec 	.word	0x20002bec
 800f5e4:	20002ae8 	.word	0x20002ae8
 800f5e8:	20002ae4 	.word	0x20002ae4
 800f5ec:	20002bf8 	.word	0x20002bf8
 800f5f0:	20002bf4 	.word	0x20002bf4
 800f5f4:	e000ed04 	.word	0xe000ed04

0800f5f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b083      	sub	sp, #12
 800f5fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f5fe:	4b05      	ldr	r3, [pc, #20]	@ (800f614 <xTaskGetTickCount+0x1c>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f604:	687b      	ldr	r3, [r7, #4]
}
 800f606:	4618      	mov	r0, r3
 800f608:	370c      	adds	r7, #12
 800f60a:	46bd      	mov	sp, r7
 800f60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f610:	4770      	bx	lr
 800f612:	bf00      	nop
 800f614:	20002be8 	.word	0x20002be8

0800f618 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b086      	sub	sp, #24
 800f61c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f61e:	2300      	movs	r3, #0
 800f620:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f622:	4b4f      	ldr	r3, [pc, #316]	@ (800f760 <xTaskIncrementTick+0x148>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	2b00      	cmp	r3, #0
 800f628:	f040 808f 	bne.w	800f74a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f62c:	4b4d      	ldr	r3, [pc, #308]	@ (800f764 <xTaskIncrementTick+0x14c>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	3301      	adds	r3, #1
 800f632:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f634:	4a4b      	ldr	r2, [pc, #300]	@ (800f764 <xTaskIncrementTick+0x14c>)
 800f636:	693b      	ldr	r3, [r7, #16]
 800f638:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f63a:	693b      	ldr	r3, [r7, #16]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d121      	bne.n	800f684 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f640:	4b49      	ldr	r3, [pc, #292]	@ (800f768 <xTaskIncrementTick+0x150>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d00b      	beq.n	800f662 <xTaskIncrementTick+0x4a>
	__asm volatile
 800f64a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f64e:	f383 8811 	msr	BASEPRI, r3
 800f652:	f3bf 8f6f 	isb	sy
 800f656:	f3bf 8f4f 	dsb	sy
 800f65a:	603b      	str	r3, [r7, #0]
}
 800f65c:	bf00      	nop
 800f65e:	bf00      	nop
 800f660:	e7fd      	b.n	800f65e <xTaskIncrementTick+0x46>
 800f662:	4b41      	ldr	r3, [pc, #260]	@ (800f768 <xTaskIncrementTick+0x150>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	60fb      	str	r3, [r7, #12]
 800f668:	4b40      	ldr	r3, [pc, #256]	@ (800f76c <xTaskIncrementTick+0x154>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	4a3e      	ldr	r2, [pc, #248]	@ (800f768 <xTaskIncrementTick+0x150>)
 800f66e:	6013      	str	r3, [r2, #0]
 800f670:	4a3e      	ldr	r2, [pc, #248]	@ (800f76c <xTaskIncrementTick+0x154>)
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	6013      	str	r3, [r2, #0]
 800f676:	4b3e      	ldr	r3, [pc, #248]	@ (800f770 <xTaskIncrementTick+0x158>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	3301      	adds	r3, #1
 800f67c:	4a3c      	ldr	r2, [pc, #240]	@ (800f770 <xTaskIncrementTick+0x158>)
 800f67e:	6013      	str	r3, [r2, #0]
 800f680:	f000 faa6 	bl	800fbd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f684:	4b3b      	ldr	r3, [pc, #236]	@ (800f774 <xTaskIncrementTick+0x15c>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	693a      	ldr	r2, [r7, #16]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d348      	bcc.n	800f720 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f68e:	4b36      	ldr	r3, [pc, #216]	@ (800f768 <xTaskIncrementTick+0x150>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d104      	bne.n	800f6a2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f698:	4b36      	ldr	r3, [pc, #216]	@ (800f774 <xTaskIncrementTick+0x15c>)
 800f69a:	f04f 32ff 	mov.w	r2, #4294967295
 800f69e:	601a      	str	r2, [r3, #0]
					break;
 800f6a0:	e03e      	b.n	800f720 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6a2:	4b31      	ldr	r3, [pc, #196]	@ (800f768 <xTaskIncrementTick+0x150>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	68db      	ldr	r3, [r3, #12]
 800f6a8:	68db      	ldr	r3, [r3, #12]
 800f6aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	685b      	ldr	r3, [r3, #4]
 800f6b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f6b2:	693a      	ldr	r2, [r7, #16]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	429a      	cmp	r2, r3
 800f6b8:	d203      	bcs.n	800f6c2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f6ba:	4a2e      	ldr	r2, [pc, #184]	@ (800f774 <xTaskIncrementTick+0x15c>)
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f6c0:	e02e      	b.n	800f720 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	3304      	adds	r3, #4
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f7fe fdd1 	bl	800e26e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d004      	beq.n	800f6de <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	3318      	adds	r3, #24
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f7fe fdc8 	bl	800e26e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6e2:	2201      	movs	r2, #1
 800f6e4:	409a      	lsls	r2, r3
 800f6e6:	4b24      	ldr	r3, [pc, #144]	@ (800f778 <xTaskIncrementTick+0x160>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	4313      	orrs	r3, r2
 800f6ec:	4a22      	ldr	r2, [pc, #136]	@ (800f778 <xTaskIncrementTick+0x160>)
 800f6ee:	6013      	str	r3, [r2, #0]
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6f4:	4613      	mov	r3, r2
 800f6f6:	009b      	lsls	r3, r3, #2
 800f6f8:	4413      	add	r3, r2
 800f6fa:	009b      	lsls	r3, r3, #2
 800f6fc:	4a1f      	ldr	r2, [pc, #124]	@ (800f77c <xTaskIncrementTick+0x164>)
 800f6fe:	441a      	add	r2, r3
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	3304      	adds	r3, #4
 800f704:	4619      	mov	r1, r3
 800f706:	4610      	mov	r0, r2
 800f708:	f7fe fd54 	bl	800e1b4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f710:	4b1b      	ldr	r3, [pc, #108]	@ (800f780 <xTaskIncrementTick+0x168>)
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f716:	429a      	cmp	r2, r3
 800f718:	d3b9      	bcc.n	800f68e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f71a:	2301      	movs	r3, #1
 800f71c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f71e:	e7b6      	b.n	800f68e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f720:	4b17      	ldr	r3, [pc, #92]	@ (800f780 <xTaskIncrementTick+0x168>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f726:	4915      	ldr	r1, [pc, #84]	@ (800f77c <xTaskIncrementTick+0x164>)
 800f728:	4613      	mov	r3, r2
 800f72a:	009b      	lsls	r3, r3, #2
 800f72c:	4413      	add	r3, r2
 800f72e:	009b      	lsls	r3, r3, #2
 800f730:	440b      	add	r3, r1
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	2b01      	cmp	r3, #1
 800f736:	d901      	bls.n	800f73c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f738:	2301      	movs	r3, #1
 800f73a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f73c:	4b11      	ldr	r3, [pc, #68]	@ (800f784 <xTaskIncrementTick+0x16c>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d007      	beq.n	800f754 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f744:	2301      	movs	r3, #1
 800f746:	617b      	str	r3, [r7, #20]
 800f748:	e004      	b.n	800f754 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f74a:	4b0f      	ldr	r3, [pc, #60]	@ (800f788 <xTaskIncrementTick+0x170>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	3301      	adds	r3, #1
 800f750:	4a0d      	ldr	r2, [pc, #52]	@ (800f788 <xTaskIncrementTick+0x170>)
 800f752:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f754:	697b      	ldr	r3, [r7, #20]
}
 800f756:	4618      	mov	r0, r3
 800f758:	3718      	adds	r7, #24
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}
 800f75e:	bf00      	nop
 800f760:	20002c0c 	.word	0x20002c0c
 800f764:	20002be8 	.word	0x20002be8
 800f768:	20002b9c 	.word	0x20002b9c
 800f76c:	20002ba0 	.word	0x20002ba0
 800f770:	20002bfc 	.word	0x20002bfc
 800f774:	20002c04 	.word	0x20002c04
 800f778:	20002bec 	.word	0x20002bec
 800f77c:	20002ae8 	.word	0x20002ae8
 800f780:	20002ae4 	.word	0x20002ae4
 800f784:	20002bf8 	.word	0x20002bf8
 800f788:	20002bf4 	.word	0x20002bf4

0800f78c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f78c:	b480      	push	{r7}
 800f78e:	b087      	sub	sp, #28
 800f790:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f792:	4b27      	ldr	r3, [pc, #156]	@ (800f830 <vTaskSwitchContext+0xa4>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d003      	beq.n	800f7a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f79a:	4b26      	ldr	r3, [pc, #152]	@ (800f834 <vTaskSwitchContext+0xa8>)
 800f79c:	2201      	movs	r2, #1
 800f79e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f7a0:	e040      	b.n	800f824 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800f7a2:	4b24      	ldr	r3, [pc, #144]	@ (800f834 <vTaskSwitchContext+0xa8>)
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7a8:	4b23      	ldr	r3, [pc, #140]	@ (800f838 <vTaskSwitchContext+0xac>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	fab3 f383 	clz	r3, r3
 800f7b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f7b6:	7afb      	ldrb	r3, [r7, #11]
 800f7b8:	f1c3 031f 	rsb	r3, r3, #31
 800f7bc:	617b      	str	r3, [r7, #20]
 800f7be:	491f      	ldr	r1, [pc, #124]	@ (800f83c <vTaskSwitchContext+0xb0>)
 800f7c0:	697a      	ldr	r2, [r7, #20]
 800f7c2:	4613      	mov	r3, r2
 800f7c4:	009b      	lsls	r3, r3, #2
 800f7c6:	4413      	add	r3, r2
 800f7c8:	009b      	lsls	r3, r3, #2
 800f7ca:	440b      	add	r3, r1
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d10b      	bne.n	800f7ea <vTaskSwitchContext+0x5e>
	__asm volatile
 800f7d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7d6:	f383 8811 	msr	BASEPRI, r3
 800f7da:	f3bf 8f6f 	isb	sy
 800f7de:	f3bf 8f4f 	dsb	sy
 800f7e2:	607b      	str	r3, [r7, #4]
}
 800f7e4:	bf00      	nop
 800f7e6:	bf00      	nop
 800f7e8:	e7fd      	b.n	800f7e6 <vTaskSwitchContext+0x5a>
 800f7ea:	697a      	ldr	r2, [r7, #20]
 800f7ec:	4613      	mov	r3, r2
 800f7ee:	009b      	lsls	r3, r3, #2
 800f7f0:	4413      	add	r3, r2
 800f7f2:	009b      	lsls	r3, r3, #2
 800f7f4:	4a11      	ldr	r2, [pc, #68]	@ (800f83c <vTaskSwitchContext+0xb0>)
 800f7f6:	4413      	add	r3, r2
 800f7f8:	613b      	str	r3, [r7, #16]
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	685b      	ldr	r3, [r3, #4]
 800f7fe:	685a      	ldr	r2, [r3, #4]
 800f800:	693b      	ldr	r3, [r7, #16]
 800f802:	605a      	str	r2, [r3, #4]
 800f804:	693b      	ldr	r3, [r7, #16]
 800f806:	685a      	ldr	r2, [r3, #4]
 800f808:	693b      	ldr	r3, [r7, #16]
 800f80a:	3308      	adds	r3, #8
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d104      	bne.n	800f81a <vTaskSwitchContext+0x8e>
 800f810:	693b      	ldr	r3, [r7, #16]
 800f812:	685b      	ldr	r3, [r3, #4]
 800f814:	685a      	ldr	r2, [r3, #4]
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	605a      	str	r2, [r3, #4]
 800f81a:	693b      	ldr	r3, [r7, #16]
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	68db      	ldr	r3, [r3, #12]
 800f820:	4a07      	ldr	r2, [pc, #28]	@ (800f840 <vTaskSwitchContext+0xb4>)
 800f822:	6013      	str	r3, [r2, #0]
}
 800f824:	bf00      	nop
 800f826:	371c      	adds	r7, #28
 800f828:	46bd      	mov	sp, r7
 800f82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82e:	4770      	bx	lr
 800f830:	20002c0c 	.word	0x20002c0c
 800f834:	20002bf8 	.word	0x20002bf8
 800f838:	20002bec 	.word	0x20002bec
 800f83c:	20002ae8 	.word	0x20002ae8
 800f840:	20002ae4 	.word	0x20002ae4

0800f844 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b084      	sub	sp, #16
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d10b      	bne.n	800f86c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f858:	f383 8811 	msr	BASEPRI, r3
 800f85c:	f3bf 8f6f 	isb	sy
 800f860:	f3bf 8f4f 	dsb	sy
 800f864:	60fb      	str	r3, [r7, #12]
}
 800f866:	bf00      	nop
 800f868:	bf00      	nop
 800f86a:	e7fd      	b.n	800f868 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f86c:	4b07      	ldr	r3, [pc, #28]	@ (800f88c <vTaskPlaceOnEventList+0x48>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	3318      	adds	r3, #24
 800f872:	4619      	mov	r1, r3
 800f874:	6878      	ldr	r0, [r7, #4]
 800f876:	f7fe fcc1 	bl	800e1fc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f87a:	2101      	movs	r1, #1
 800f87c:	6838      	ldr	r0, [r7, #0]
 800f87e:	f000 fb87 	bl	800ff90 <prvAddCurrentTaskToDelayedList>
}
 800f882:	bf00      	nop
 800f884:	3710      	adds	r7, #16
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}
 800f88a:	bf00      	nop
 800f88c:	20002ae4 	.word	0x20002ae4

0800f890 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b086      	sub	sp, #24
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	68db      	ldr	r3, [r3, #12]
 800f89c:	68db      	ldr	r3, [r3, #12]
 800f89e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f8a0:	693b      	ldr	r3, [r7, #16]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d10b      	bne.n	800f8be <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8aa:	f383 8811 	msr	BASEPRI, r3
 800f8ae:	f3bf 8f6f 	isb	sy
 800f8b2:	f3bf 8f4f 	dsb	sy
 800f8b6:	60fb      	str	r3, [r7, #12]
}
 800f8b8:	bf00      	nop
 800f8ba:	bf00      	nop
 800f8bc:	e7fd      	b.n	800f8ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	3318      	adds	r3, #24
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	f7fe fcd3 	bl	800e26e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f8c8:	4b1d      	ldr	r3, [pc, #116]	@ (800f940 <xTaskRemoveFromEventList+0xb0>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d11c      	bne.n	800f90a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	3304      	adds	r3, #4
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f7fe fcca 	bl	800e26e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8de:	2201      	movs	r2, #1
 800f8e0:	409a      	lsls	r2, r3
 800f8e2:	4b18      	ldr	r3, [pc, #96]	@ (800f944 <xTaskRemoveFromEventList+0xb4>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	4313      	orrs	r3, r2
 800f8e8:	4a16      	ldr	r2, [pc, #88]	@ (800f944 <xTaskRemoveFromEventList+0xb4>)
 800f8ea:	6013      	str	r3, [r2, #0]
 800f8ec:	693b      	ldr	r3, [r7, #16]
 800f8ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8f0:	4613      	mov	r3, r2
 800f8f2:	009b      	lsls	r3, r3, #2
 800f8f4:	4413      	add	r3, r2
 800f8f6:	009b      	lsls	r3, r3, #2
 800f8f8:	4a13      	ldr	r2, [pc, #76]	@ (800f948 <xTaskRemoveFromEventList+0xb8>)
 800f8fa:	441a      	add	r2, r3
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	3304      	adds	r3, #4
 800f900:	4619      	mov	r1, r3
 800f902:	4610      	mov	r0, r2
 800f904:	f7fe fc56 	bl	800e1b4 <vListInsertEnd>
 800f908:	e005      	b.n	800f916 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f90a:	693b      	ldr	r3, [r7, #16]
 800f90c:	3318      	adds	r3, #24
 800f90e:	4619      	mov	r1, r3
 800f910:	480e      	ldr	r0, [pc, #56]	@ (800f94c <xTaskRemoveFromEventList+0xbc>)
 800f912:	f7fe fc4f 	bl	800e1b4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f91a:	4b0d      	ldr	r3, [pc, #52]	@ (800f950 <xTaskRemoveFromEventList+0xc0>)
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f920:	429a      	cmp	r2, r3
 800f922:	d905      	bls.n	800f930 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f924:	2301      	movs	r3, #1
 800f926:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f928:	4b0a      	ldr	r3, [pc, #40]	@ (800f954 <xTaskRemoveFromEventList+0xc4>)
 800f92a:	2201      	movs	r2, #1
 800f92c:	601a      	str	r2, [r3, #0]
 800f92e:	e001      	b.n	800f934 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f930:	2300      	movs	r3, #0
 800f932:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f934:	697b      	ldr	r3, [r7, #20]
}
 800f936:	4618      	mov	r0, r3
 800f938:	3718      	adds	r7, #24
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}
 800f93e:	bf00      	nop
 800f940:	20002c0c 	.word	0x20002c0c
 800f944:	20002bec 	.word	0x20002bec
 800f948:	20002ae8 	.word	0x20002ae8
 800f94c:	20002ba4 	.word	0x20002ba4
 800f950:	20002ae4 	.word	0x20002ae4
 800f954:	20002bf8 	.word	0x20002bf8

0800f958 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f958:	b480      	push	{r7}
 800f95a:	b083      	sub	sp, #12
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f960:	4b06      	ldr	r3, [pc, #24]	@ (800f97c <vTaskInternalSetTimeOutState+0x24>)
 800f962:	681a      	ldr	r2, [r3, #0]
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f968:	4b05      	ldr	r3, [pc, #20]	@ (800f980 <vTaskInternalSetTimeOutState+0x28>)
 800f96a:	681a      	ldr	r2, [r3, #0]
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	605a      	str	r2, [r3, #4]
}
 800f970:	bf00      	nop
 800f972:	370c      	adds	r7, #12
 800f974:	46bd      	mov	sp, r7
 800f976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97a:	4770      	bx	lr
 800f97c:	20002bfc 	.word	0x20002bfc
 800f980:	20002be8 	.word	0x20002be8

0800f984 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b088      	sub	sp, #32
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d10b      	bne.n	800f9ac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f998:	f383 8811 	msr	BASEPRI, r3
 800f99c:	f3bf 8f6f 	isb	sy
 800f9a0:	f3bf 8f4f 	dsb	sy
 800f9a4:	613b      	str	r3, [r7, #16]
}
 800f9a6:	bf00      	nop
 800f9a8:	bf00      	nop
 800f9aa:	e7fd      	b.n	800f9a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d10b      	bne.n	800f9ca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9b6:	f383 8811 	msr	BASEPRI, r3
 800f9ba:	f3bf 8f6f 	isb	sy
 800f9be:	f3bf 8f4f 	dsb	sy
 800f9c2:	60fb      	str	r3, [r7, #12]
}
 800f9c4:	bf00      	nop
 800f9c6:	bf00      	nop
 800f9c8:	e7fd      	b.n	800f9c6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f9ca:	f000 fc75 	bl	80102b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f9ce:	4b1d      	ldr	r3, [pc, #116]	@ (800fa44 <xTaskCheckForTimeOut+0xc0>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	685b      	ldr	r3, [r3, #4]
 800f9d8:	69ba      	ldr	r2, [r7, #24]
 800f9da:	1ad3      	subs	r3, r2, r3
 800f9dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9e6:	d102      	bne.n	800f9ee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	61fb      	str	r3, [r7, #28]
 800f9ec:	e023      	b.n	800fa36 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681a      	ldr	r2, [r3, #0]
 800f9f2:	4b15      	ldr	r3, [pc, #84]	@ (800fa48 <xTaskCheckForTimeOut+0xc4>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	d007      	beq.n	800fa0a <xTaskCheckForTimeOut+0x86>
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	685b      	ldr	r3, [r3, #4]
 800f9fe:	69ba      	ldr	r2, [r7, #24]
 800fa00:	429a      	cmp	r2, r3
 800fa02:	d302      	bcc.n	800fa0a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fa04:	2301      	movs	r3, #1
 800fa06:	61fb      	str	r3, [r7, #28]
 800fa08:	e015      	b.n	800fa36 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	697a      	ldr	r2, [r7, #20]
 800fa10:	429a      	cmp	r2, r3
 800fa12:	d20b      	bcs.n	800fa2c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	1ad2      	subs	r2, r2, r3
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f7ff ff99 	bl	800f958 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fa26:	2300      	movs	r3, #0
 800fa28:	61fb      	str	r3, [r7, #28]
 800fa2a:	e004      	b.n	800fa36 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	2200      	movs	r2, #0
 800fa30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fa32:	2301      	movs	r3, #1
 800fa34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fa36:	f000 fc71 	bl	801031c <vPortExitCritical>

	return xReturn;
 800fa3a:	69fb      	ldr	r3, [r7, #28]
}
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	3720      	adds	r7, #32
 800fa40:	46bd      	mov	sp, r7
 800fa42:	bd80      	pop	{r7, pc}
 800fa44:	20002be8 	.word	0x20002be8
 800fa48:	20002bfc 	.word	0x20002bfc

0800fa4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fa4c:	b480      	push	{r7}
 800fa4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fa50:	4b03      	ldr	r3, [pc, #12]	@ (800fa60 <vTaskMissedYield+0x14>)
 800fa52:	2201      	movs	r2, #1
 800fa54:	601a      	str	r2, [r3, #0]
}
 800fa56:	bf00      	nop
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5e:	4770      	bx	lr
 800fa60:	20002bf8 	.word	0x20002bf8

0800fa64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b082      	sub	sp, #8
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fa6c:	f000 f852 	bl	800fb14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fa70:	4b06      	ldr	r3, [pc, #24]	@ (800fa8c <prvIdleTask+0x28>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	2b01      	cmp	r3, #1
 800fa76:	d9f9      	bls.n	800fa6c <prvIdleTask+0x8>
			{
				taskYIELD();
 800fa78:	4b05      	ldr	r3, [pc, #20]	@ (800fa90 <prvIdleTask+0x2c>)
 800fa7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa7e:	601a      	str	r2, [r3, #0]
 800fa80:	f3bf 8f4f 	dsb	sy
 800fa84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fa88:	e7f0      	b.n	800fa6c <prvIdleTask+0x8>
 800fa8a:	bf00      	nop
 800fa8c:	20002ae8 	.word	0x20002ae8
 800fa90:	e000ed04 	.word	0xe000ed04

0800fa94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b082      	sub	sp, #8
 800fa98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	607b      	str	r3, [r7, #4]
 800fa9e:	e00c      	b.n	800faba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800faa0:	687a      	ldr	r2, [r7, #4]
 800faa2:	4613      	mov	r3, r2
 800faa4:	009b      	lsls	r3, r3, #2
 800faa6:	4413      	add	r3, r2
 800faa8:	009b      	lsls	r3, r3, #2
 800faaa:	4a12      	ldr	r2, [pc, #72]	@ (800faf4 <prvInitialiseTaskLists+0x60>)
 800faac:	4413      	add	r3, r2
 800faae:	4618      	mov	r0, r3
 800fab0:	f7fe fb53 	bl	800e15a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	3301      	adds	r3, #1
 800fab8:	607b      	str	r3, [r7, #4]
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	2b06      	cmp	r3, #6
 800fabe:	d9ef      	bls.n	800faa0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fac0:	480d      	ldr	r0, [pc, #52]	@ (800faf8 <prvInitialiseTaskLists+0x64>)
 800fac2:	f7fe fb4a 	bl	800e15a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fac6:	480d      	ldr	r0, [pc, #52]	@ (800fafc <prvInitialiseTaskLists+0x68>)
 800fac8:	f7fe fb47 	bl	800e15a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800facc:	480c      	ldr	r0, [pc, #48]	@ (800fb00 <prvInitialiseTaskLists+0x6c>)
 800face:	f7fe fb44 	bl	800e15a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fad2:	480c      	ldr	r0, [pc, #48]	@ (800fb04 <prvInitialiseTaskLists+0x70>)
 800fad4:	f7fe fb41 	bl	800e15a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fad8:	480b      	ldr	r0, [pc, #44]	@ (800fb08 <prvInitialiseTaskLists+0x74>)
 800fada:	f7fe fb3e 	bl	800e15a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fade:	4b0b      	ldr	r3, [pc, #44]	@ (800fb0c <prvInitialiseTaskLists+0x78>)
 800fae0:	4a05      	ldr	r2, [pc, #20]	@ (800faf8 <prvInitialiseTaskLists+0x64>)
 800fae2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fae4:	4b0a      	ldr	r3, [pc, #40]	@ (800fb10 <prvInitialiseTaskLists+0x7c>)
 800fae6:	4a05      	ldr	r2, [pc, #20]	@ (800fafc <prvInitialiseTaskLists+0x68>)
 800fae8:	601a      	str	r2, [r3, #0]
}
 800faea:	bf00      	nop
 800faec:	3708      	adds	r7, #8
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}
 800faf2:	bf00      	nop
 800faf4:	20002ae8 	.word	0x20002ae8
 800faf8:	20002b74 	.word	0x20002b74
 800fafc:	20002b88 	.word	0x20002b88
 800fb00:	20002ba4 	.word	0x20002ba4
 800fb04:	20002bb8 	.word	0x20002bb8
 800fb08:	20002bd0 	.word	0x20002bd0
 800fb0c:	20002b9c 	.word	0x20002b9c
 800fb10:	20002ba0 	.word	0x20002ba0

0800fb14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb1a:	e019      	b.n	800fb50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fb1c:	f000 fbcc 	bl	80102b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb20:	4b10      	ldr	r3, [pc, #64]	@ (800fb64 <prvCheckTasksWaitingTermination+0x50>)
 800fb22:	68db      	ldr	r3, [r3, #12]
 800fb24:	68db      	ldr	r3, [r3, #12]
 800fb26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	3304      	adds	r3, #4
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	f7fe fb9e 	bl	800e26e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fb32:	4b0d      	ldr	r3, [pc, #52]	@ (800fb68 <prvCheckTasksWaitingTermination+0x54>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	3b01      	subs	r3, #1
 800fb38:	4a0b      	ldr	r2, [pc, #44]	@ (800fb68 <prvCheckTasksWaitingTermination+0x54>)
 800fb3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fb3c:	4b0b      	ldr	r3, [pc, #44]	@ (800fb6c <prvCheckTasksWaitingTermination+0x58>)
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	3b01      	subs	r3, #1
 800fb42:	4a0a      	ldr	r2, [pc, #40]	@ (800fb6c <prvCheckTasksWaitingTermination+0x58>)
 800fb44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fb46:	f000 fbe9 	bl	801031c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f000 f810 	bl	800fb70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb50:	4b06      	ldr	r3, [pc, #24]	@ (800fb6c <prvCheckTasksWaitingTermination+0x58>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d1e1      	bne.n	800fb1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fb58:	bf00      	nop
 800fb5a:	bf00      	nop
 800fb5c:	3708      	adds	r7, #8
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}
 800fb62:	bf00      	nop
 800fb64:	20002bb8 	.word	0x20002bb8
 800fb68:	20002be4 	.word	0x20002be4
 800fb6c:	20002bcc 	.word	0x20002bcc

0800fb70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b084      	sub	sp, #16
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d108      	bne.n	800fb94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb86:	4618      	mov	r0, r3
 800fb88:	f000 fd86 	bl	8010698 <vPortFree>
				vPortFree( pxTCB );
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	f000 fd83 	bl	8010698 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fb92:	e019      	b.n	800fbc8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fb9a:	2b01      	cmp	r3, #1
 800fb9c:	d103      	bne.n	800fba6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f000 fd7a 	bl	8010698 <vPortFree>
	}
 800fba4:	e010      	b.n	800fbc8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fbac:	2b02      	cmp	r3, #2
 800fbae:	d00b      	beq.n	800fbc8 <prvDeleteTCB+0x58>
	__asm volatile
 800fbb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbb4:	f383 8811 	msr	BASEPRI, r3
 800fbb8:	f3bf 8f6f 	isb	sy
 800fbbc:	f3bf 8f4f 	dsb	sy
 800fbc0:	60fb      	str	r3, [r7, #12]
}
 800fbc2:	bf00      	nop
 800fbc4:	bf00      	nop
 800fbc6:	e7fd      	b.n	800fbc4 <prvDeleteTCB+0x54>
	}
 800fbc8:	bf00      	nop
 800fbca:	3710      	adds	r7, #16
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}

0800fbd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fbd0:	b480      	push	{r7}
 800fbd2:	b083      	sub	sp, #12
 800fbd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fbd6:	4b0c      	ldr	r3, [pc, #48]	@ (800fc08 <prvResetNextTaskUnblockTime+0x38>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d104      	bne.n	800fbea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fbe0:	4b0a      	ldr	r3, [pc, #40]	@ (800fc0c <prvResetNextTaskUnblockTime+0x3c>)
 800fbe2:	f04f 32ff 	mov.w	r2, #4294967295
 800fbe6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fbe8:	e008      	b.n	800fbfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbea:	4b07      	ldr	r3, [pc, #28]	@ (800fc08 <prvResetNextTaskUnblockTime+0x38>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	68db      	ldr	r3, [r3, #12]
 800fbf0:	68db      	ldr	r3, [r3, #12]
 800fbf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	685b      	ldr	r3, [r3, #4]
 800fbf8:	4a04      	ldr	r2, [pc, #16]	@ (800fc0c <prvResetNextTaskUnblockTime+0x3c>)
 800fbfa:	6013      	str	r3, [r2, #0]
}
 800fbfc:	bf00      	nop
 800fbfe:	370c      	adds	r7, #12
 800fc00:	46bd      	mov	sp, r7
 800fc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc06:	4770      	bx	lr
 800fc08:	20002b9c 	.word	0x20002b9c
 800fc0c:	20002c04 	.word	0x20002c04

0800fc10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fc10:	b480      	push	{r7}
 800fc12:	b083      	sub	sp, #12
 800fc14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fc16:	4b0b      	ldr	r3, [pc, #44]	@ (800fc44 <xTaskGetSchedulerState+0x34>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d102      	bne.n	800fc24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fc1e:	2301      	movs	r3, #1
 800fc20:	607b      	str	r3, [r7, #4]
 800fc22:	e008      	b.n	800fc36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc24:	4b08      	ldr	r3, [pc, #32]	@ (800fc48 <xTaskGetSchedulerState+0x38>)
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d102      	bne.n	800fc32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fc2c:	2302      	movs	r3, #2
 800fc2e:	607b      	str	r3, [r7, #4]
 800fc30:	e001      	b.n	800fc36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fc32:	2300      	movs	r3, #0
 800fc34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fc36:	687b      	ldr	r3, [r7, #4]
	}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	370c      	adds	r7, #12
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc42:	4770      	bx	lr
 800fc44:	20002bf0 	.word	0x20002bf0
 800fc48:	20002c0c 	.word	0x20002c0c

0800fc4c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b084      	sub	sp, #16
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fc58:	2300      	movs	r3, #0
 800fc5a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d05e      	beq.n	800fd20 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc66:	4b31      	ldr	r3, [pc, #196]	@ (800fd2c <xTaskPriorityInherit+0xe0>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	d24e      	bcs.n	800fd0e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	699b      	ldr	r3, [r3, #24]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	db06      	blt.n	800fc86 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc78:	4b2c      	ldr	r3, [pc, #176]	@ (800fd2c <xTaskPriorityInherit+0xe0>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc7e:	f1c3 0207 	rsb	r2, r3, #7
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fc86:	68bb      	ldr	r3, [r7, #8]
 800fc88:	6959      	ldr	r1, [r3, #20]
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc8e:	4613      	mov	r3, r2
 800fc90:	009b      	lsls	r3, r3, #2
 800fc92:	4413      	add	r3, r2
 800fc94:	009b      	lsls	r3, r3, #2
 800fc96:	4a26      	ldr	r2, [pc, #152]	@ (800fd30 <xTaskPriorityInherit+0xe4>)
 800fc98:	4413      	add	r3, r2
 800fc9a:	4299      	cmp	r1, r3
 800fc9c:	d12f      	bne.n	800fcfe <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	3304      	adds	r3, #4
 800fca2:	4618      	mov	r0, r3
 800fca4:	f7fe fae3 	bl	800e26e <uxListRemove>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d10a      	bne.n	800fcc4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800fcae:	68bb      	ldr	r3, [r7, #8]
 800fcb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcb2:	2201      	movs	r2, #1
 800fcb4:	fa02 f303 	lsl.w	r3, r2, r3
 800fcb8:	43da      	mvns	r2, r3
 800fcba:	4b1e      	ldr	r3, [pc, #120]	@ (800fd34 <xTaskPriorityInherit+0xe8>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	4013      	ands	r3, r2
 800fcc0:	4a1c      	ldr	r2, [pc, #112]	@ (800fd34 <xTaskPriorityInherit+0xe8>)
 800fcc2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fcc4:	4b19      	ldr	r3, [pc, #100]	@ (800fd2c <xTaskPriorityInherit+0xe0>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fcce:	68bb      	ldr	r3, [r7, #8]
 800fcd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcd2:	2201      	movs	r2, #1
 800fcd4:	409a      	lsls	r2, r3
 800fcd6:	4b17      	ldr	r3, [pc, #92]	@ (800fd34 <xTaskPriorityInherit+0xe8>)
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	4313      	orrs	r3, r2
 800fcdc:	4a15      	ldr	r2, [pc, #84]	@ (800fd34 <xTaskPriorityInherit+0xe8>)
 800fcde:	6013      	str	r3, [r2, #0]
 800fce0:	68bb      	ldr	r3, [r7, #8]
 800fce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fce4:	4613      	mov	r3, r2
 800fce6:	009b      	lsls	r3, r3, #2
 800fce8:	4413      	add	r3, r2
 800fcea:	009b      	lsls	r3, r3, #2
 800fcec:	4a10      	ldr	r2, [pc, #64]	@ (800fd30 <xTaskPriorityInherit+0xe4>)
 800fcee:	441a      	add	r2, r3
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	3304      	adds	r3, #4
 800fcf4:	4619      	mov	r1, r3
 800fcf6:	4610      	mov	r0, r2
 800fcf8:	f7fe fa5c 	bl	800e1b4 <vListInsertEnd>
 800fcfc:	e004      	b.n	800fd08 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fcfe:	4b0b      	ldr	r3, [pc, #44]	@ (800fd2c <xTaskPriorityInherit+0xe0>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fd08:	2301      	movs	r3, #1
 800fd0a:	60fb      	str	r3, [r7, #12]
 800fd0c:	e008      	b.n	800fd20 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fd12:	4b06      	ldr	r3, [pc, #24]	@ (800fd2c <xTaskPriorityInherit+0xe0>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd18:	429a      	cmp	r2, r3
 800fd1a:	d201      	bcs.n	800fd20 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fd1c:	2301      	movs	r3, #1
 800fd1e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fd20:	68fb      	ldr	r3, [r7, #12]
	}
 800fd22:	4618      	mov	r0, r3
 800fd24:	3710      	adds	r7, #16
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}
 800fd2a:	bf00      	nop
 800fd2c:	20002ae4 	.word	0x20002ae4
 800fd30:	20002ae8 	.word	0x20002ae8
 800fd34:	20002bec 	.word	0x20002bec

0800fd38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b086      	sub	sp, #24
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fd44:	2300      	movs	r3, #0
 800fd46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d070      	beq.n	800fe30 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fd4e:	4b3b      	ldr	r3, [pc, #236]	@ (800fe3c <xTaskPriorityDisinherit+0x104>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	693a      	ldr	r2, [r7, #16]
 800fd54:	429a      	cmp	r2, r3
 800fd56:	d00b      	beq.n	800fd70 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800fd58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd5c:	f383 8811 	msr	BASEPRI, r3
 800fd60:	f3bf 8f6f 	isb	sy
 800fd64:	f3bf 8f4f 	dsb	sy
 800fd68:	60fb      	str	r3, [r7, #12]
}
 800fd6a:	bf00      	nop
 800fd6c:	bf00      	nop
 800fd6e:	e7fd      	b.n	800fd6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fd70:	693b      	ldr	r3, [r7, #16]
 800fd72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d10b      	bne.n	800fd90 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800fd78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd7c:	f383 8811 	msr	BASEPRI, r3
 800fd80:	f3bf 8f6f 	isb	sy
 800fd84:	f3bf 8f4f 	dsb	sy
 800fd88:	60bb      	str	r3, [r7, #8]
}
 800fd8a:	bf00      	nop
 800fd8c:	bf00      	nop
 800fd8e:	e7fd      	b.n	800fd8c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800fd90:	693b      	ldr	r3, [r7, #16]
 800fd92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fd94:	1e5a      	subs	r2, r3, #1
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fd9a:	693b      	ldr	r3, [r7, #16]
 800fd9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd9e:	693b      	ldr	r3, [r7, #16]
 800fda0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fda2:	429a      	cmp	r2, r3
 800fda4:	d044      	beq.n	800fe30 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fda6:	693b      	ldr	r3, [r7, #16]
 800fda8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d140      	bne.n	800fe30 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fdae:	693b      	ldr	r3, [r7, #16]
 800fdb0:	3304      	adds	r3, #4
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f7fe fa5b 	bl	800e26e <uxListRemove>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d115      	bne.n	800fdea <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800fdbe:	693b      	ldr	r3, [r7, #16]
 800fdc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fdc2:	491f      	ldr	r1, [pc, #124]	@ (800fe40 <xTaskPriorityDisinherit+0x108>)
 800fdc4:	4613      	mov	r3, r2
 800fdc6:	009b      	lsls	r3, r3, #2
 800fdc8:	4413      	add	r3, r2
 800fdca:	009b      	lsls	r3, r3, #2
 800fdcc:	440b      	add	r3, r1
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d10a      	bne.n	800fdea <xTaskPriorityDisinherit+0xb2>
 800fdd4:	693b      	ldr	r3, [r7, #16]
 800fdd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdd8:	2201      	movs	r2, #1
 800fdda:	fa02 f303 	lsl.w	r3, r2, r3
 800fdde:	43da      	mvns	r2, r3
 800fde0:	4b18      	ldr	r3, [pc, #96]	@ (800fe44 <xTaskPriorityDisinherit+0x10c>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	4013      	ands	r3, r2
 800fde6:	4a17      	ldr	r2, [pc, #92]	@ (800fe44 <xTaskPriorityDisinherit+0x10c>)
 800fde8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fdea:	693b      	ldr	r3, [r7, #16]
 800fdec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fdee:	693b      	ldr	r3, [r7, #16]
 800fdf0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fdf2:	693b      	ldr	r3, [r7, #16]
 800fdf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdf6:	f1c3 0207 	rsb	r2, r3, #7
 800fdfa:	693b      	ldr	r3, [r7, #16]
 800fdfc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fdfe:	693b      	ldr	r3, [r7, #16]
 800fe00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe02:	2201      	movs	r2, #1
 800fe04:	409a      	lsls	r2, r3
 800fe06:	4b0f      	ldr	r3, [pc, #60]	@ (800fe44 <xTaskPriorityDisinherit+0x10c>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	4313      	orrs	r3, r2
 800fe0c:	4a0d      	ldr	r2, [pc, #52]	@ (800fe44 <xTaskPriorityDisinherit+0x10c>)
 800fe0e:	6013      	str	r3, [r2, #0]
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe14:	4613      	mov	r3, r2
 800fe16:	009b      	lsls	r3, r3, #2
 800fe18:	4413      	add	r3, r2
 800fe1a:	009b      	lsls	r3, r3, #2
 800fe1c:	4a08      	ldr	r2, [pc, #32]	@ (800fe40 <xTaskPriorityDisinherit+0x108>)
 800fe1e:	441a      	add	r2, r3
 800fe20:	693b      	ldr	r3, [r7, #16]
 800fe22:	3304      	adds	r3, #4
 800fe24:	4619      	mov	r1, r3
 800fe26:	4610      	mov	r0, r2
 800fe28:	f7fe f9c4 	bl	800e1b4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fe30:	697b      	ldr	r3, [r7, #20]
	}
 800fe32:	4618      	mov	r0, r3
 800fe34:	3718      	adds	r7, #24
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}
 800fe3a:	bf00      	nop
 800fe3c:	20002ae4 	.word	0x20002ae4
 800fe40:	20002ae8 	.word	0x20002ae8
 800fe44:	20002bec 	.word	0x20002bec

0800fe48 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b088      	sub	sp, #32
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fe56:	2301      	movs	r3, #1
 800fe58:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d079      	beq.n	800ff54 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fe60:	69bb      	ldr	r3, [r7, #24]
 800fe62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d10b      	bne.n	800fe80 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800fe68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe6c:	f383 8811 	msr	BASEPRI, r3
 800fe70:	f3bf 8f6f 	isb	sy
 800fe74:	f3bf 8f4f 	dsb	sy
 800fe78:	60fb      	str	r3, [r7, #12]
}
 800fe7a:	bf00      	nop
 800fe7c:	bf00      	nop
 800fe7e:	e7fd      	b.n	800fe7c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fe80:	69bb      	ldr	r3, [r7, #24]
 800fe82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe84:	683a      	ldr	r2, [r7, #0]
 800fe86:	429a      	cmp	r2, r3
 800fe88:	d902      	bls.n	800fe90 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	61fb      	str	r3, [r7, #28]
 800fe8e:	e002      	b.n	800fe96 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fe90:	69bb      	ldr	r3, [r7, #24]
 800fe92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe94:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fe96:	69bb      	ldr	r3, [r7, #24]
 800fe98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe9a:	69fa      	ldr	r2, [r7, #28]
 800fe9c:	429a      	cmp	r2, r3
 800fe9e:	d059      	beq.n	800ff54 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fea0:	69bb      	ldr	r3, [r7, #24]
 800fea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fea4:	697a      	ldr	r2, [r7, #20]
 800fea6:	429a      	cmp	r2, r3
 800fea8:	d154      	bne.n	800ff54 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800feaa:	4b2c      	ldr	r3, [pc, #176]	@ (800ff5c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	69ba      	ldr	r2, [r7, #24]
 800feb0:	429a      	cmp	r2, r3
 800feb2:	d10b      	bne.n	800fecc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800feb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feb8:	f383 8811 	msr	BASEPRI, r3
 800febc:	f3bf 8f6f 	isb	sy
 800fec0:	f3bf 8f4f 	dsb	sy
 800fec4:	60bb      	str	r3, [r7, #8]
}
 800fec6:	bf00      	nop
 800fec8:	bf00      	nop
 800feca:	e7fd      	b.n	800fec8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fecc:	69bb      	ldr	r3, [r7, #24]
 800fece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fed0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fed2:	69bb      	ldr	r3, [r7, #24]
 800fed4:	69fa      	ldr	r2, [r7, #28]
 800fed6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fed8:	69bb      	ldr	r3, [r7, #24]
 800feda:	699b      	ldr	r3, [r3, #24]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	db04      	blt.n	800feea <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fee0:	69fb      	ldr	r3, [r7, #28]
 800fee2:	f1c3 0207 	rsb	r2, r3, #7
 800fee6:	69bb      	ldr	r3, [r7, #24]
 800fee8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800feea:	69bb      	ldr	r3, [r7, #24]
 800feec:	6959      	ldr	r1, [r3, #20]
 800feee:	693a      	ldr	r2, [r7, #16]
 800fef0:	4613      	mov	r3, r2
 800fef2:	009b      	lsls	r3, r3, #2
 800fef4:	4413      	add	r3, r2
 800fef6:	009b      	lsls	r3, r3, #2
 800fef8:	4a19      	ldr	r2, [pc, #100]	@ (800ff60 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800fefa:	4413      	add	r3, r2
 800fefc:	4299      	cmp	r1, r3
 800fefe:	d129      	bne.n	800ff54 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff00:	69bb      	ldr	r3, [r7, #24]
 800ff02:	3304      	adds	r3, #4
 800ff04:	4618      	mov	r0, r3
 800ff06:	f7fe f9b2 	bl	800e26e <uxListRemove>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d10a      	bne.n	800ff26 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ff10:	69bb      	ldr	r3, [r7, #24]
 800ff12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff14:	2201      	movs	r2, #1
 800ff16:	fa02 f303 	lsl.w	r3, r2, r3
 800ff1a:	43da      	mvns	r2, r3
 800ff1c:	4b11      	ldr	r3, [pc, #68]	@ (800ff64 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	4013      	ands	r3, r2
 800ff22:	4a10      	ldr	r2, [pc, #64]	@ (800ff64 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ff24:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ff26:	69bb      	ldr	r3, [r7, #24]
 800ff28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff2a:	2201      	movs	r2, #1
 800ff2c:	409a      	lsls	r2, r3
 800ff2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ff64 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	4313      	orrs	r3, r2
 800ff34:	4a0b      	ldr	r2, [pc, #44]	@ (800ff64 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ff36:	6013      	str	r3, [r2, #0]
 800ff38:	69bb      	ldr	r3, [r7, #24]
 800ff3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff3c:	4613      	mov	r3, r2
 800ff3e:	009b      	lsls	r3, r3, #2
 800ff40:	4413      	add	r3, r2
 800ff42:	009b      	lsls	r3, r3, #2
 800ff44:	4a06      	ldr	r2, [pc, #24]	@ (800ff60 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ff46:	441a      	add	r2, r3
 800ff48:	69bb      	ldr	r3, [r7, #24]
 800ff4a:	3304      	adds	r3, #4
 800ff4c:	4619      	mov	r1, r3
 800ff4e:	4610      	mov	r0, r2
 800ff50:	f7fe f930 	bl	800e1b4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ff54:	bf00      	nop
 800ff56:	3720      	adds	r7, #32
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	bd80      	pop	{r7, pc}
 800ff5c:	20002ae4 	.word	0x20002ae4
 800ff60:	20002ae8 	.word	0x20002ae8
 800ff64:	20002bec 	.word	0x20002bec

0800ff68 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ff68:	b480      	push	{r7}
 800ff6a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ff6c:	4b07      	ldr	r3, [pc, #28]	@ (800ff8c <pvTaskIncrementMutexHeldCount+0x24>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d004      	beq.n	800ff7e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ff74:	4b05      	ldr	r3, [pc, #20]	@ (800ff8c <pvTaskIncrementMutexHeldCount+0x24>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ff7a:	3201      	adds	r2, #1
 800ff7c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800ff7e:	4b03      	ldr	r3, [pc, #12]	@ (800ff8c <pvTaskIncrementMutexHeldCount+0x24>)
 800ff80:	681b      	ldr	r3, [r3, #0]
	}
 800ff82:	4618      	mov	r0, r3
 800ff84:	46bd      	mov	sp, r7
 800ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8a:	4770      	bx	lr
 800ff8c:	20002ae4 	.word	0x20002ae4

0800ff90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b084      	sub	sp, #16
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
 800ff98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ff9a:	4b29      	ldr	r3, [pc, #164]	@ (8010040 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ffa0:	4b28      	ldr	r3, [pc, #160]	@ (8010044 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	3304      	adds	r3, #4
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	f7fe f961 	bl	800e26e <uxListRemove>
 800ffac:	4603      	mov	r3, r0
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d10b      	bne.n	800ffca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ffb2:	4b24      	ldr	r3, [pc, #144]	@ (8010044 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffb8:	2201      	movs	r2, #1
 800ffba:	fa02 f303 	lsl.w	r3, r2, r3
 800ffbe:	43da      	mvns	r2, r3
 800ffc0:	4b21      	ldr	r3, [pc, #132]	@ (8010048 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	4013      	ands	r3, r2
 800ffc6:	4a20      	ldr	r2, [pc, #128]	@ (8010048 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ffc8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffd0:	d10a      	bne.n	800ffe8 <prvAddCurrentTaskToDelayedList+0x58>
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d007      	beq.n	800ffe8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ffd8:	4b1a      	ldr	r3, [pc, #104]	@ (8010044 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	3304      	adds	r3, #4
 800ffde:	4619      	mov	r1, r3
 800ffe0:	481a      	ldr	r0, [pc, #104]	@ (801004c <prvAddCurrentTaskToDelayedList+0xbc>)
 800ffe2:	f7fe f8e7 	bl	800e1b4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ffe6:	e026      	b.n	8010036 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ffe8:	68fa      	ldr	r2, [r7, #12]
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	4413      	add	r3, r2
 800ffee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fff0:	4b14      	ldr	r3, [pc, #80]	@ (8010044 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	68ba      	ldr	r2, [r7, #8]
 800fff6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fff8:	68ba      	ldr	r2, [r7, #8]
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	429a      	cmp	r2, r3
 800fffe:	d209      	bcs.n	8010014 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010000:	4b13      	ldr	r3, [pc, #76]	@ (8010050 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010002:	681a      	ldr	r2, [r3, #0]
 8010004:	4b0f      	ldr	r3, [pc, #60]	@ (8010044 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	3304      	adds	r3, #4
 801000a:	4619      	mov	r1, r3
 801000c:	4610      	mov	r0, r2
 801000e:	f7fe f8f5 	bl	800e1fc <vListInsert>
}
 8010012:	e010      	b.n	8010036 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010014:	4b0f      	ldr	r3, [pc, #60]	@ (8010054 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010016:	681a      	ldr	r2, [r3, #0]
 8010018:	4b0a      	ldr	r3, [pc, #40]	@ (8010044 <prvAddCurrentTaskToDelayedList+0xb4>)
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	3304      	adds	r3, #4
 801001e:	4619      	mov	r1, r3
 8010020:	4610      	mov	r0, r2
 8010022:	f7fe f8eb 	bl	800e1fc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010026:	4b0c      	ldr	r3, [pc, #48]	@ (8010058 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	68ba      	ldr	r2, [r7, #8]
 801002c:	429a      	cmp	r2, r3
 801002e:	d202      	bcs.n	8010036 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010030:	4a09      	ldr	r2, [pc, #36]	@ (8010058 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	6013      	str	r3, [r2, #0]
}
 8010036:	bf00      	nop
 8010038:	3710      	adds	r7, #16
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}
 801003e:	bf00      	nop
 8010040:	20002be8 	.word	0x20002be8
 8010044:	20002ae4 	.word	0x20002ae4
 8010048:	20002bec 	.word	0x20002bec
 801004c:	20002bd0 	.word	0x20002bd0
 8010050:	20002ba0 	.word	0x20002ba0
 8010054:	20002b9c 	.word	0x20002b9c
 8010058:	20002c04 	.word	0x20002c04

0801005c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801005c:	b480      	push	{r7}
 801005e:	b085      	sub	sp, #20
 8010060:	af00      	add	r7, sp, #0
 8010062:	60f8      	str	r0, [r7, #12]
 8010064:	60b9      	str	r1, [r7, #8]
 8010066:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	3b04      	subs	r3, #4
 801006c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010074:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	3b04      	subs	r3, #4
 801007a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	f023 0201 	bic.w	r2, r3, #1
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	3b04      	subs	r3, #4
 801008a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801008c:	4a0c      	ldr	r2, [pc, #48]	@ (80100c0 <pxPortInitialiseStack+0x64>)
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	3b14      	subs	r3, #20
 8010096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010098:	687a      	ldr	r2, [r7, #4]
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	3b04      	subs	r3, #4
 80100a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	f06f 0202 	mvn.w	r2, #2
 80100aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	3b20      	subs	r3, #32
 80100b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80100b2:	68fb      	ldr	r3, [r7, #12]
}
 80100b4:	4618      	mov	r0, r3
 80100b6:	3714      	adds	r7, #20
 80100b8:	46bd      	mov	sp, r7
 80100ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100be:	4770      	bx	lr
 80100c0:	080100c5 	.word	0x080100c5

080100c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80100c4:	b480      	push	{r7}
 80100c6:	b085      	sub	sp, #20
 80100c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80100ca:	2300      	movs	r3, #0
 80100cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80100ce:	4b13      	ldr	r3, [pc, #76]	@ (801011c <prvTaskExitError+0x58>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100d6:	d00b      	beq.n	80100f0 <prvTaskExitError+0x2c>
	__asm volatile
 80100d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100dc:	f383 8811 	msr	BASEPRI, r3
 80100e0:	f3bf 8f6f 	isb	sy
 80100e4:	f3bf 8f4f 	dsb	sy
 80100e8:	60fb      	str	r3, [r7, #12]
}
 80100ea:	bf00      	nop
 80100ec:	bf00      	nop
 80100ee:	e7fd      	b.n	80100ec <prvTaskExitError+0x28>
	__asm volatile
 80100f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100f4:	f383 8811 	msr	BASEPRI, r3
 80100f8:	f3bf 8f6f 	isb	sy
 80100fc:	f3bf 8f4f 	dsb	sy
 8010100:	60bb      	str	r3, [r7, #8]
}
 8010102:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010104:	bf00      	nop
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d0fc      	beq.n	8010106 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801010c:	bf00      	nop
 801010e:	bf00      	nop
 8010110:	3714      	adds	r7, #20
 8010112:	46bd      	mov	sp, r7
 8010114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010118:	4770      	bx	lr
 801011a:	bf00      	nop
 801011c:	20000040 	.word	0x20000040

08010120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010120:	4b07      	ldr	r3, [pc, #28]	@ (8010140 <pxCurrentTCBConst2>)
 8010122:	6819      	ldr	r1, [r3, #0]
 8010124:	6808      	ldr	r0, [r1, #0]
 8010126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801012a:	f380 8809 	msr	PSP, r0
 801012e:	f3bf 8f6f 	isb	sy
 8010132:	f04f 0000 	mov.w	r0, #0
 8010136:	f380 8811 	msr	BASEPRI, r0
 801013a:	4770      	bx	lr
 801013c:	f3af 8000 	nop.w

08010140 <pxCurrentTCBConst2>:
 8010140:	20002ae4 	.word	0x20002ae4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010144:	bf00      	nop
 8010146:	bf00      	nop

08010148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010148:	4808      	ldr	r0, [pc, #32]	@ (801016c <prvPortStartFirstTask+0x24>)
 801014a:	6800      	ldr	r0, [r0, #0]
 801014c:	6800      	ldr	r0, [r0, #0]
 801014e:	f380 8808 	msr	MSP, r0
 8010152:	f04f 0000 	mov.w	r0, #0
 8010156:	f380 8814 	msr	CONTROL, r0
 801015a:	b662      	cpsie	i
 801015c:	b661      	cpsie	f
 801015e:	f3bf 8f4f 	dsb	sy
 8010162:	f3bf 8f6f 	isb	sy
 8010166:	df00      	svc	0
 8010168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801016a:	bf00      	nop
 801016c:	e000ed08 	.word	0xe000ed08

08010170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b086      	sub	sp, #24
 8010174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010176:	4b47      	ldr	r3, [pc, #284]	@ (8010294 <xPortStartScheduler+0x124>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	4a47      	ldr	r2, [pc, #284]	@ (8010298 <xPortStartScheduler+0x128>)
 801017c:	4293      	cmp	r3, r2
 801017e:	d10b      	bne.n	8010198 <xPortStartScheduler+0x28>
	__asm volatile
 8010180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010184:	f383 8811 	msr	BASEPRI, r3
 8010188:	f3bf 8f6f 	isb	sy
 801018c:	f3bf 8f4f 	dsb	sy
 8010190:	613b      	str	r3, [r7, #16]
}
 8010192:	bf00      	nop
 8010194:	bf00      	nop
 8010196:	e7fd      	b.n	8010194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010198:	4b3e      	ldr	r3, [pc, #248]	@ (8010294 <xPortStartScheduler+0x124>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	4a3f      	ldr	r2, [pc, #252]	@ (801029c <xPortStartScheduler+0x12c>)
 801019e:	4293      	cmp	r3, r2
 80101a0:	d10b      	bne.n	80101ba <xPortStartScheduler+0x4a>
	__asm volatile
 80101a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101a6:	f383 8811 	msr	BASEPRI, r3
 80101aa:	f3bf 8f6f 	isb	sy
 80101ae:	f3bf 8f4f 	dsb	sy
 80101b2:	60fb      	str	r3, [r7, #12]
}
 80101b4:	bf00      	nop
 80101b6:	bf00      	nop
 80101b8:	e7fd      	b.n	80101b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80101ba:	4b39      	ldr	r3, [pc, #228]	@ (80102a0 <xPortStartScheduler+0x130>)
 80101bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	781b      	ldrb	r3, [r3, #0]
 80101c2:	b2db      	uxtb	r3, r3
 80101c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80101c6:	697b      	ldr	r3, [r7, #20]
 80101c8:	22ff      	movs	r2, #255	@ 0xff
 80101ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	781b      	ldrb	r3, [r3, #0]
 80101d0:	b2db      	uxtb	r3, r3
 80101d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80101d4:	78fb      	ldrb	r3, [r7, #3]
 80101d6:	b2db      	uxtb	r3, r3
 80101d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80101dc:	b2da      	uxtb	r2, r3
 80101de:	4b31      	ldr	r3, [pc, #196]	@ (80102a4 <xPortStartScheduler+0x134>)
 80101e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80101e2:	4b31      	ldr	r3, [pc, #196]	@ (80102a8 <xPortStartScheduler+0x138>)
 80101e4:	2207      	movs	r2, #7
 80101e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80101e8:	e009      	b.n	80101fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80101ea:	4b2f      	ldr	r3, [pc, #188]	@ (80102a8 <xPortStartScheduler+0x138>)
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	3b01      	subs	r3, #1
 80101f0:	4a2d      	ldr	r2, [pc, #180]	@ (80102a8 <xPortStartScheduler+0x138>)
 80101f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80101f4:	78fb      	ldrb	r3, [r7, #3]
 80101f6:	b2db      	uxtb	r3, r3
 80101f8:	005b      	lsls	r3, r3, #1
 80101fa:	b2db      	uxtb	r3, r3
 80101fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80101fe:	78fb      	ldrb	r3, [r7, #3]
 8010200:	b2db      	uxtb	r3, r3
 8010202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010206:	2b80      	cmp	r3, #128	@ 0x80
 8010208:	d0ef      	beq.n	80101ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801020a:	4b27      	ldr	r3, [pc, #156]	@ (80102a8 <xPortStartScheduler+0x138>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	f1c3 0307 	rsb	r3, r3, #7
 8010212:	2b04      	cmp	r3, #4
 8010214:	d00b      	beq.n	801022e <xPortStartScheduler+0xbe>
	__asm volatile
 8010216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801021a:	f383 8811 	msr	BASEPRI, r3
 801021e:	f3bf 8f6f 	isb	sy
 8010222:	f3bf 8f4f 	dsb	sy
 8010226:	60bb      	str	r3, [r7, #8]
}
 8010228:	bf00      	nop
 801022a:	bf00      	nop
 801022c:	e7fd      	b.n	801022a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801022e:	4b1e      	ldr	r3, [pc, #120]	@ (80102a8 <xPortStartScheduler+0x138>)
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	021b      	lsls	r3, r3, #8
 8010234:	4a1c      	ldr	r2, [pc, #112]	@ (80102a8 <xPortStartScheduler+0x138>)
 8010236:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010238:	4b1b      	ldr	r3, [pc, #108]	@ (80102a8 <xPortStartScheduler+0x138>)
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010240:	4a19      	ldr	r2, [pc, #100]	@ (80102a8 <xPortStartScheduler+0x138>)
 8010242:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	b2da      	uxtb	r2, r3
 8010248:	697b      	ldr	r3, [r7, #20]
 801024a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801024c:	4b17      	ldr	r3, [pc, #92]	@ (80102ac <xPortStartScheduler+0x13c>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	4a16      	ldr	r2, [pc, #88]	@ (80102ac <xPortStartScheduler+0x13c>)
 8010252:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010256:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010258:	4b14      	ldr	r3, [pc, #80]	@ (80102ac <xPortStartScheduler+0x13c>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	4a13      	ldr	r2, [pc, #76]	@ (80102ac <xPortStartScheduler+0x13c>)
 801025e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010262:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010264:	f000 f8da 	bl	801041c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010268:	4b11      	ldr	r3, [pc, #68]	@ (80102b0 <xPortStartScheduler+0x140>)
 801026a:	2200      	movs	r2, #0
 801026c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801026e:	f000 f8f9 	bl	8010464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010272:	4b10      	ldr	r3, [pc, #64]	@ (80102b4 <xPortStartScheduler+0x144>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	4a0f      	ldr	r2, [pc, #60]	@ (80102b4 <xPortStartScheduler+0x144>)
 8010278:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801027c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801027e:	f7ff ff63 	bl	8010148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010282:	f7ff fa83 	bl	800f78c <vTaskSwitchContext>
	prvTaskExitError();
 8010286:	f7ff ff1d 	bl	80100c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801028a:	2300      	movs	r3, #0
}
 801028c:	4618      	mov	r0, r3
 801028e:	3718      	adds	r7, #24
 8010290:	46bd      	mov	sp, r7
 8010292:	bd80      	pop	{r7, pc}
 8010294:	e000ed00 	.word	0xe000ed00
 8010298:	410fc271 	.word	0x410fc271
 801029c:	410fc270 	.word	0x410fc270
 80102a0:	e000e400 	.word	0xe000e400
 80102a4:	20002c10 	.word	0x20002c10
 80102a8:	20002c14 	.word	0x20002c14
 80102ac:	e000ed20 	.word	0xe000ed20
 80102b0:	20000040 	.word	0x20000040
 80102b4:	e000ef34 	.word	0xe000ef34

080102b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80102b8:	b480      	push	{r7}
 80102ba:	b083      	sub	sp, #12
 80102bc:	af00      	add	r7, sp, #0
	__asm volatile
 80102be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102c2:	f383 8811 	msr	BASEPRI, r3
 80102c6:	f3bf 8f6f 	isb	sy
 80102ca:	f3bf 8f4f 	dsb	sy
 80102ce:	607b      	str	r3, [r7, #4]
}
 80102d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80102d2:	4b10      	ldr	r3, [pc, #64]	@ (8010314 <vPortEnterCritical+0x5c>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	3301      	adds	r3, #1
 80102d8:	4a0e      	ldr	r2, [pc, #56]	@ (8010314 <vPortEnterCritical+0x5c>)
 80102da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80102dc:	4b0d      	ldr	r3, [pc, #52]	@ (8010314 <vPortEnterCritical+0x5c>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	2b01      	cmp	r3, #1
 80102e2:	d110      	bne.n	8010306 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80102e4:	4b0c      	ldr	r3, [pc, #48]	@ (8010318 <vPortEnterCritical+0x60>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	b2db      	uxtb	r3, r3
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d00b      	beq.n	8010306 <vPortEnterCritical+0x4e>
	__asm volatile
 80102ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102f2:	f383 8811 	msr	BASEPRI, r3
 80102f6:	f3bf 8f6f 	isb	sy
 80102fa:	f3bf 8f4f 	dsb	sy
 80102fe:	603b      	str	r3, [r7, #0]
}
 8010300:	bf00      	nop
 8010302:	bf00      	nop
 8010304:	e7fd      	b.n	8010302 <vPortEnterCritical+0x4a>
	}
}
 8010306:	bf00      	nop
 8010308:	370c      	adds	r7, #12
 801030a:	46bd      	mov	sp, r7
 801030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010310:	4770      	bx	lr
 8010312:	bf00      	nop
 8010314:	20000040 	.word	0x20000040
 8010318:	e000ed04 	.word	0xe000ed04

0801031c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801031c:	b480      	push	{r7}
 801031e:	b083      	sub	sp, #12
 8010320:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010322:	4b12      	ldr	r3, [pc, #72]	@ (801036c <vPortExitCritical+0x50>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d10b      	bne.n	8010342 <vPortExitCritical+0x26>
	__asm volatile
 801032a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801032e:	f383 8811 	msr	BASEPRI, r3
 8010332:	f3bf 8f6f 	isb	sy
 8010336:	f3bf 8f4f 	dsb	sy
 801033a:	607b      	str	r3, [r7, #4]
}
 801033c:	bf00      	nop
 801033e:	bf00      	nop
 8010340:	e7fd      	b.n	801033e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010342:	4b0a      	ldr	r3, [pc, #40]	@ (801036c <vPortExitCritical+0x50>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	3b01      	subs	r3, #1
 8010348:	4a08      	ldr	r2, [pc, #32]	@ (801036c <vPortExitCritical+0x50>)
 801034a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801034c:	4b07      	ldr	r3, [pc, #28]	@ (801036c <vPortExitCritical+0x50>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d105      	bne.n	8010360 <vPortExitCritical+0x44>
 8010354:	2300      	movs	r3, #0
 8010356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	f383 8811 	msr	BASEPRI, r3
}
 801035e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010360:	bf00      	nop
 8010362:	370c      	adds	r7, #12
 8010364:	46bd      	mov	sp, r7
 8010366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036a:	4770      	bx	lr
 801036c:	20000040 	.word	0x20000040

08010370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010370:	f3ef 8009 	mrs	r0, PSP
 8010374:	f3bf 8f6f 	isb	sy
 8010378:	4b15      	ldr	r3, [pc, #84]	@ (80103d0 <pxCurrentTCBConst>)
 801037a:	681a      	ldr	r2, [r3, #0]
 801037c:	f01e 0f10 	tst.w	lr, #16
 8010380:	bf08      	it	eq
 8010382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801038a:	6010      	str	r0, [r2, #0]
 801038c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010390:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010394:	f380 8811 	msr	BASEPRI, r0
 8010398:	f3bf 8f4f 	dsb	sy
 801039c:	f3bf 8f6f 	isb	sy
 80103a0:	f7ff f9f4 	bl	800f78c <vTaskSwitchContext>
 80103a4:	f04f 0000 	mov.w	r0, #0
 80103a8:	f380 8811 	msr	BASEPRI, r0
 80103ac:	bc09      	pop	{r0, r3}
 80103ae:	6819      	ldr	r1, [r3, #0]
 80103b0:	6808      	ldr	r0, [r1, #0]
 80103b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103b6:	f01e 0f10 	tst.w	lr, #16
 80103ba:	bf08      	it	eq
 80103bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80103c0:	f380 8809 	msr	PSP, r0
 80103c4:	f3bf 8f6f 	isb	sy
 80103c8:	4770      	bx	lr
 80103ca:	bf00      	nop
 80103cc:	f3af 8000 	nop.w

080103d0 <pxCurrentTCBConst>:
 80103d0:	20002ae4 	.word	0x20002ae4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80103d4:	bf00      	nop
 80103d6:	bf00      	nop

080103d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b082      	sub	sp, #8
 80103dc:	af00      	add	r7, sp, #0
	__asm volatile
 80103de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103e2:	f383 8811 	msr	BASEPRI, r3
 80103e6:	f3bf 8f6f 	isb	sy
 80103ea:	f3bf 8f4f 	dsb	sy
 80103ee:	607b      	str	r3, [r7, #4]
}
 80103f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80103f2:	f7ff f911 	bl	800f618 <xTaskIncrementTick>
 80103f6:	4603      	mov	r3, r0
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d003      	beq.n	8010404 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80103fc:	4b06      	ldr	r3, [pc, #24]	@ (8010418 <SysTick_Handler+0x40>)
 80103fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010402:	601a      	str	r2, [r3, #0]
 8010404:	2300      	movs	r3, #0
 8010406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	f383 8811 	msr	BASEPRI, r3
}
 801040e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010410:	bf00      	nop
 8010412:	3708      	adds	r7, #8
 8010414:	46bd      	mov	sp, r7
 8010416:	bd80      	pop	{r7, pc}
 8010418:	e000ed04 	.word	0xe000ed04

0801041c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801041c:	b480      	push	{r7}
 801041e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010420:	4b0b      	ldr	r3, [pc, #44]	@ (8010450 <vPortSetupTimerInterrupt+0x34>)
 8010422:	2200      	movs	r2, #0
 8010424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010426:	4b0b      	ldr	r3, [pc, #44]	@ (8010454 <vPortSetupTimerInterrupt+0x38>)
 8010428:	2200      	movs	r2, #0
 801042a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801042c:	4b0a      	ldr	r3, [pc, #40]	@ (8010458 <vPortSetupTimerInterrupt+0x3c>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	4a0a      	ldr	r2, [pc, #40]	@ (801045c <vPortSetupTimerInterrupt+0x40>)
 8010432:	fba2 2303 	umull	r2, r3, r2, r3
 8010436:	099b      	lsrs	r3, r3, #6
 8010438:	4a09      	ldr	r2, [pc, #36]	@ (8010460 <vPortSetupTimerInterrupt+0x44>)
 801043a:	3b01      	subs	r3, #1
 801043c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801043e:	4b04      	ldr	r3, [pc, #16]	@ (8010450 <vPortSetupTimerInterrupt+0x34>)
 8010440:	2207      	movs	r2, #7
 8010442:	601a      	str	r2, [r3, #0]
}
 8010444:	bf00      	nop
 8010446:	46bd      	mov	sp, r7
 8010448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044c:	4770      	bx	lr
 801044e:	bf00      	nop
 8010450:	e000e010 	.word	0xe000e010
 8010454:	e000e018 	.word	0xe000e018
 8010458:	20000004 	.word	0x20000004
 801045c:	10624dd3 	.word	0x10624dd3
 8010460:	e000e014 	.word	0xe000e014

08010464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010464:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010474 <vPortEnableVFP+0x10>
 8010468:	6801      	ldr	r1, [r0, #0]
 801046a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801046e:	6001      	str	r1, [r0, #0]
 8010470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010472:	bf00      	nop
 8010474:	e000ed88 	.word	0xe000ed88

08010478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010478:	b480      	push	{r7}
 801047a:	b085      	sub	sp, #20
 801047c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801047e:	f3ef 8305 	mrs	r3, IPSR
 8010482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	2b0f      	cmp	r3, #15
 8010488:	d915      	bls.n	80104b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801048a:	4a18      	ldr	r2, [pc, #96]	@ (80104ec <vPortValidateInterruptPriority+0x74>)
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	4413      	add	r3, r2
 8010490:	781b      	ldrb	r3, [r3, #0]
 8010492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010494:	4b16      	ldr	r3, [pc, #88]	@ (80104f0 <vPortValidateInterruptPriority+0x78>)
 8010496:	781b      	ldrb	r3, [r3, #0]
 8010498:	7afa      	ldrb	r2, [r7, #11]
 801049a:	429a      	cmp	r2, r3
 801049c:	d20b      	bcs.n	80104b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801049e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104a2:	f383 8811 	msr	BASEPRI, r3
 80104a6:	f3bf 8f6f 	isb	sy
 80104aa:	f3bf 8f4f 	dsb	sy
 80104ae:	607b      	str	r3, [r7, #4]
}
 80104b0:	bf00      	nop
 80104b2:	bf00      	nop
 80104b4:	e7fd      	b.n	80104b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80104b6:	4b0f      	ldr	r3, [pc, #60]	@ (80104f4 <vPortValidateInterruptPriority+0x7c>)
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80104be:	4b0e      	ldr	r3, [pc, #56]	@ (80104f8 <vPortValidateInterruptPriority+0x80>)
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	429a      	cmp	r2, r3
 80104c4:	d90b      	bls.n	80104de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80104c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104ca:	f383 8811 	msr	BASEPRI, r3
 80104ce:	f3bf 8f6f 	isb	sy
 80104d2:	f3bf 8f4f 	dsb	sy
 80104d6:	603b      	str	r3, [r7, #0]
}
 80104d8:	bf00      	nop
 80104da:	bf00      	nop
 80104dc:	e7fd      	b.n	80104da <vPortValidateInterruptPriority+0x62>
	}
 80104de:	bf00      	nop
 80104e0:	3714      	adds	r7, #20
 80104e2:	46bd      	mov	sp, r7
 80104e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e8:	4770      	bx	lr
 80104ea:	bf00      	nop
 80104ec:	e000e3f0 	.word	0xe000e3f0
 80104f0:	20002c10 	.word	0x20002c10
 80104f4:	e000ed0c 	.word	0xe000ed0c
 80104f8:	20002c14 	.word	0x20002c14

080104fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b08a      	sub	sp, #40	@ 0x28
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010504:	2300      	movs	r3, #0
 8010506:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010508:	f7fe ffca 	bl	800f4a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801050c:	4b5c      	ldr	r3, [pc, #368]	@ (8010680 <pvPortMalloc+0x184>)
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d101      	bne.n	8010518 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010514:	f000 f924 	bl	8010760 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010518:	4b5a      	ldr	r3, [pc, #360]	@ (8010684 <pvPortMalloc+0x188>)
 801051a:	681a      	ldr	r2, [r3, #0]
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	4013      	ands	r3, r2
 8010520:	2b00      	cmp	r3, #0
 8010522:	f040 8095 	bne.w	8010650 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d01e      	beq.n	801056a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801052c:	2208      	movs	r2, #8
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	4413      	add	r3, r2
 8010532:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f003 0307 	and.w	r3, r3, #7
 801053a:	2b00      	cmp	r3, #0
 801053c:	d015      	beq.n	801056a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f023 0307 	bic.w	r3, r3, #7
 8010544:	3308      	adds	r3, #8
 8010546:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f003 0307 	and.w	r3, r3, #7
 801054e:	2b00      	cmp	r3, #0
 8010550:	d00b      	beq.n	801056a <pvPortMalloc+0x6e>
	__asm volatile
 8010552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010556:	f383 8811 	msr	BASEPRI, r3
 801055a:	f3bf 8f6f 	isb	sy
 801055e:	f3bf 8f4f 	dsb	sy
 8010562:	617b      	str	r3, [r7, #20]
}
 8010564:	bf00      	nop
 8010566:	bf00      	nop
 8010568:	e7fd      	b.n	8010566 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d06f      	beq.n	8010650 <pvPortMalloc+0x154>
 8010570:	4b45      	ldr	r3, [pc, #276]	@ (8010688 <pvPortMalloc+0x18c>)
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	687a      	ldr	r2, [r7, #4]
 8010576:	429a      	cmp	r2, r3
 8010578:	d86a      	bhi.n	8010650 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801057a:	4b44      	ldr	r3, [pc, #272]	@ (801068c <pvPortMalloc+0x190>)
 801057c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801057e:	4b43      	ldr	r3, [pc, #268]	@ (801068c <pvPortMalloc+0x190>)
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010584:	e004      	b.n	8010590 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010588:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801058a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010592:	685b      	ldr	r3, [r3, #4]
 8010594:	687a      	ldr	r2, [r7, #4]
 8010596:	429a      	cmp	r2, r3
 8010598:	d903      	bls.n	80105a2 <pvPortMalloc+0xa6>
 801059a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d1f1      	bne.n	8010586 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80105a2:	4b37      	ldr	r3, [pc, #220]	@ (8010680 <pvPortMalloc+0x184>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80105a8:	429a      	cmp	r2, r3
 80105aa:	d051      	beq.n	8010650 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80105ac:	6a3b      	ldr	r3, [r7, #32]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	2208      	movs	r2, #8
 80105b2:	4413      	add	r3, r2
 80105b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80105b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105b8:	681a      	ldr	r2, [r3, #0]
 80105ba:	6a3b      	ldr	r3, [r7, #32]
 80105bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80105be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105c0:	685a      	ldr	r2, [r3, #4]
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	1ad2      	subs	r2, r2, r3
 80105c6:	2308      	movs	r3, #8
 80105c8:	005b      	lsls	r3, r3, #1
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d920      	bls.n	8010610 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80105ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	4413      	add	r3, r2
 80105d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80105d6:	69bb      	ldr	r3, [r7, #24]
 80105d8:	f003 0307 	and.w	r3, r3, #7
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d00b      	beq.n	80105f8 <pvPortMalloc+0xfc>
	__asm volatile
 80105e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105e4:	f383 8811 	msr	BASEPRI, r3
 80105e8:	f3bf 8f6f 	isb	sy
 80105ec:	f3bf 8f4f 	dsb	sy
 80105f0:	613b      	str	r3, [r7, #16]
}
 80105f2:	bf00      	nop
 80105f4:	bf00      	nop
 80105f6:	e7fd      	b.n	80105f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80105f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105fa:	685a      	ldr	r2, [r3, #4]
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	1ad2      	subs	r2, r2, r3
 8010600:	69bb      	ldr	r3, [r7, #24]
 8010602:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010606:	687a      	ldr	r2, [r7, #4]
 8010608:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801060a:	69b8      	ldr	r0, [r7, #24]
 801060c:	f000 f90a 	bl	8010824 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010610:	4b1d      	ldr	r3, [pc, #116]	@ (8010688 <pvPortMalloc+0x18c>)
 8010612:	681a      	ldr	r2, [r3, #0]
 8010614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010616:	685b      	ldr	r3, [r3, #4]
 8010618:	1ad3      	subs	r3, r2, r3
 801061a:	4a1b      	ldr	r2, [pc, #108]	@ (8010688 <pvPortMalloc+0x18c>)
 801061c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801061e:	4b1a      	ldr	r3, [pc, #104]	@ (8010688 <pvPortMalloc+0x18c>)
 8010620:	681a      	ldr	r2, [r3, #0]
 8010622:	4b1b      	ldr	r3, [pc, #108]	@ (8010690 <pvPortMalloc+0x194>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	429a      	cmp	r2, r3
 8010628:	d203      	bcs.n	8010632 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801062a:	4b17      	ldr	r3, [pc, #92]	@ (8010688 <pvPortMalloc+0x18c>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	4a18      	ldr	r2, [pc, #96]	@ (8010690 <pvPortMalloc+0x194>)
 8010630:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010634:	685a      	ldr	r2, [r3, #4]
 8010636:	4b13      	ldr	r3, [pc, #76]	@ (8010684 <pvPortMalloc+0x188>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	431a      	orrs	r2, r3
 801063c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801063e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010642:	2200      	movs	r2, #0
 8010644:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010646:	4b13      	ldr	r3, [pc, #76]	@ (8010694 <pvPortMalloc+0x198>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	3301      	adds	r3, #1
 801064c:	4a11      	ldr	r2, [pc, #68]	@ (8010694 <pvPortMalloc+0x198>)
 801064e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010650:	f7fe ff34 	bl	800f4bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010654:	69fb      	ldr	r3, [r7, #28]
 8010656:	f003 0307 	and.w	r3, r3, #7
 801065a:	2b00      	cmp	r3, #0
 801065c:	d00b      	beq.n	8010676 <pvPortMalloc+0x17a>
	__asm volatile
 801065e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010662:	f383 8811 	msr	BASEPRI, r3
 8010666:	f3bf 8f6f 	isb	sy
 801066a:	f3bf 8f4f 	dsb	sy
 801066e:	60fb      	str	r3, [r7, #12]
}
 8010670:	bf00      	nop
 8010672:	bf00      	nop
 8010674:	e7fd      	b.n	8010672 <pvPortMalloc+0x176>
	return pvReturn;
 8010676:	69fb      	ldr	r3, [r7, #28]
}
 8010678:	4618      	mov	r0, r3
 801067a:	3728      	adds	r7, #40	@ 0x28
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}
 8010680:	200102f8 	.word	0x200102f8
 8010684:	2001030c 	.word	0x2001030c
 8010688:	200102fc 	.word	0x200102fc
 801068c:	200102f0 	.word	0x200102f0
 8010690:	20010300 	.word	0x20010300
 8010694:	20010304 	.word	0x20010304

08010698 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b086      	sub	sp, #24
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d04f      	beq.n	801074a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80106aa:	2308      	movs	r3, #8
 80106ac:	425b      	negs	r3, r3
 80106ae:	697a      	ldr	r2, [r7, #20]
 80106b0:	4413      	add	r3, r2
 80106b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80106b4:	697b      	ldr	r3, [r7, #20]
 80106b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80106b8:	693b      	ldr	r3, [r7, #16]
 80106ba:	685a      	ldr	r2, [r3, #4]
 80106bc:	4b25      	ldr	r3, [pc, #148]	@ (8010754 <vPortFree+0xbc>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	4013      	ands	r3, r2
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d10b      	bne.n	80106de <vPortFree+0x46>
	__asm volatile
 80106c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106ca:	f383 8811 	msr	BASEPRI, r3
 80106ce:	f3bf 8f6f 	isb	sy
 80106d2:	f3bf 8f4f 	dsb	sy
 80106d6:	60fb      	str	r3, [r7, #12]
}
 80106d8:	bf00      	nop
 80106da:	bf00      	nop
 80106dc:	e7fd      	b.n	80106da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80106de:	693b      	ldr	r3, [r7, #16]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d00b      	beq.n	80106fe <vPortFree+0x66>
	__asm volatile
 80106e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106ea:	f383 8811 	msr	BASEPRI, r3
 80106ee:	f3bf 8f6f 	isb	sy
 80106f2:	f3bf 8f4f 	dsb	sy
 80106f6:	60bb      	str	r3, [r7, #8]
}
 80106f8:	bf00      	nop
 80106fa:	bf00      	nop
 80106fc:	e7fd      	b.n	80106fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80106fe:	693b      	ldr	r3, [r7, #16]
 8010700:	685a      	ldr	r2, [r3, #4]
 8010702:	4b14      	ldr	r3, [pc, #80]	@ (8010754 <vPortFree+0xbc>)
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	4013      	ands	r3, r2
 8010708:	2b00      	cmp	r3, #0
 801070a:	d01e      	beq.n	801074a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801070c:	693b      	ldr	r3, [r7, #16]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d11a      	bne.n	801074a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010714:	693b      	ldr	r3, [r7, #16]
 8010716:	685a      	ldr	r2, [r3, #4]
 8010718:	4b0e      	ldr	r3, [pc, #56]	@ (8010754 <vPortFree+0xbc>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	43db      	mvns	r3, r3
 801071e:	401a      	ands	r2, r3
 8010720:	693b      	ldr	r3, [r7, #16]
 8010722:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010724:	f7fe febc 	bl	800f4a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010728:	693b      	ldr	r3, [r7, #16]
 801072a:	685a      	ldr	r2, [r3, #4]
 801072c:	4b0a      	ldr	r3, [pc, #40]	@ (8010758 <vPortFree+0xc0>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	4413      	add	r3, r2
 8010732:	4a09      	ldr	r2, [pc, #36]	@ (8010758 <vPortFree+0xc0>)
 8010734:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010736:	6938      	ldr	r0, [r7, #16]
 8010738:	f000 f874 	bl	8010824 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801073c:	4b07      	ldr	r3, [pc, #28]	@ (801075c <vPortFree+0xc4>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	3301      	adds	r3, #1
 8010742:	4a06      	ldr	r2, [pc, #24]	@ (801075c <vPortFree+0xc4>)
 8010744:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010746:	f7fe feb9 	bl	800f4bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801074a:	bf00      	nop
 801074c:	3718      	adds	r7, #24
 801074e:	46bd      	mov	sp, r7
 8010750:	bd80      	pop	{r7, pc}
 8010752:	bf00      	nop
 8010754:	2001030c 	.word	0x2001030c
 8010758:	200102fc 	.word	0x200102fc
 801075c:	20010308 	.word	0x20010308

08010760 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010760:	b480      	push	{r7}
 8010762:	b085      	sub	sp, #20
 8010764:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010766:	f24d 63d8 	movw	r3, #55000	@ 0xd6d8
 801076a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801076c:	4b27      	ldr	r3, [pc, #156]	@ (801080c <prvHeapInit+0xac>)
 801076e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	f003 0307 	and.w	r3, r3, #7
 8010776:	2b00      	cmp	r3, #0
 8010778:	d00c      	beq.n	8010794 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	3307      	adds	r3, #7
 801077e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	f023 0307 	bic.w	r3, r3, #7
 8010786:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010788:	68ba      	ldr	r2, [r7, #8]
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	1ad3      	subs	r3, r2, r3
 801078e:	4a1f      	ldr	r2, [pc, #124]	@ (801080c <prvHeapInit+0xac>)
 8010790:	4413      	add	r3, r2
 8010792:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010798:	4a1d      	ldr	r2, [pc, #116]	@ (8010810 <prvHeapInit+0xb0>)
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801079e:	4b1c      	ldr	r3, [pc, #112]	@ (8010810 <prvHeapInit+0xb0>)
 80107a0:	2200      	movs	r2, #0
 80107a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	68ba      	ldr	r2, [r7, #8]
 80107a8:	4413      	add	r3, r2
 80107aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80107ac:	2208      	movs	r2, #8
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	1a9b      	subs	r3, r3, r2
 80107b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	f023 0307 	bic.w	r3, r3, #7
 80107ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	4a15      	ldr	r2, [pc, #84]	@ (8010814 <prvHeapInit+0xb4>)
 80107c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80107c2:	4b14      	ldr	r3, [pc, #80]	@ (8010814 <prvHeapInit+0xb4>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	2200      	movs	r2, #0
 80107c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80107ca:	4b12      	ldr	r3, [pc, #72]	@ (8010814 <prvHeapInit+0xb4>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	2200      	movs	r2, #0
 80107d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	68fa      	ldr	r2, [r7, #12]
 80107da:	1ad2      	subs	r2, r2, r3
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80107e0:	4b0c      	ldr	r3, [pc, #48]	@ (8010814 <prvHeapInit+0xb4>)
 80107e2:	681a      	ldr	r2, [r3, #0]
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	685b      	ldr	r3, [r3, #4]
 80107ec:	4a0a      	ldr	r2, [pc, #40]	@ (8010818 <prvHeapInit+0xb8>)
 80107ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	685b      	ldr	r3, [r3, #4]
 80107f4:	4a09      	ldr	r2, [pc, #36]	@ (801081c <prvHeapInit+0xbc>)
 80107f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80107f8:	4b09      	ldr	r3, [pc, #36]	@ (8010820 <prvHeapInit+0xc0>)
 80107fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80107fe:	601a      	str	r2, [r3, #0]
}
 8010800:	bf00      	nop
 8010802:	3714      	adds	r7, #20
 8010804:	46bd      	mov	sp, r7
 8010806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080a:	4770      	bx	lr
 801080c:	20002c18 	.word	0x20002c18
 8010810:	200102f0 	.word	0x200102f0
 8010814:	200102f8 	.word	0x200102f8
 8010818:	20010300 	.word	0x20010300
 801081c:	200102fc 	.word	0x200102fc
 8010820:	2001030c 	.word	0x2001030c

08010824 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010824:	b480      	push	{r7}
 8010826:	b085      	sub	sp, #20
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801082c:	4b28      	ldr	r3, [pc, #160]	@ (80108d0 <prvInsertBlockIntoFreeList+0xac>)
 801082e:	60fb      	str	r3, [r7, #12]
 8010830:	e002      	b.n	8010838 <prvInsertBlockIntoFreeList+0x14>
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	60fb      	str	r3, [r7, #12]
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	687a      	ldr	r2, [r7, #4]
 801083e:	429a      	cmp	r2, r3
 8010840:	d8f7      	bhi.n	8010832 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	685b      	ldr	r3, [r3, #4]
 801084a:	68ba      	ldr	r2, [r7, #8]
 801084c:	4413      	add	r3, r2
 801084e:	687a      	ldr	r2, [r7, #4]
 8010850:	429a      	cmp	r2, r3
 8010852:	d108      	bne.n	8010866 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	685a      	ldr	r2, [r3, #4]
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	685b      	ldr	r3, [r3, #4]
 801085c:	441a      	add	r2, r3
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	685b      	ldr	r3, [r3, #4]
 801086e:	68ba      	ldr	r2, [r7, #8]
 8010870:	441a      	add	r2, r3
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	429a      	cmp	r2, r3
 8010878:	d118      	bne.n	80108ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	681a      	ldr	r2, [r3, #0]
 801087e:	4b15      	ldr	r3, [pc, #84]	@ (80108d4 <prvInsertBlockIntoFreeList+0xb0>)
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	429a      	cmp	r2, r3
 8010884:	d00d      	beq.n	80108a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	685a      	ldr	r2, [r3, #4]
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	685b      	ldr	r3, [r3, #4]
 8010890:	441a      	add	r2, r3
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	681a      	ldr	r2, [r3, #0]
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	601a      	str	r2, [r3, #0]
 80108a0:	e008      	b.n	80108b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80108a2:	4b0c      	ldr	r3, [pc, #48]	@ (80108d4 <prvInsertBlockIntoFreeList+0xb0>)
 80108a4:	681a      	ldr	r2, [r3, #0]
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	601a      	str	r2, [r3, #0]
 80108aa:	e003      	b.n	80108b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	681a      	ldr	r2, [r3, #0]
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80108b4:	68fa      	ldr	r2, [r7, #12]
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	429a      	cmp	r2, r3
 80108ba:	d002      	beq.n	80108c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	687a      	ldr	r2, [r7, #4]
 80108c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80108c2:	bf00      	nop
 80108c4:	3714      	adds	r7, #20
 80108c6:	46bd      	mov	sp, r7
 80108c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108cc:	4770      	bx	lr
 80108ce:	bf00      	nop
 80108d0:	200102f0 	.word	0x200102f0
 80108d4:	200102f8 	.word	0x200102f8

080108d8 <arm_fill_f32>:
 80108d8:	b410      	push	{r4}
 80108da:	088c      	lsrs	r4, r1, #2
 80108dc:	d010      	beq.n	8010900 <arm_fill_f32+0x28>
 80108de:	f100 0310 	add.w	r3, r0, #16
 80108e2:	4622      	mov	r2, r4
 80108e4:	3a01      	subs	r2, #1
 80108e6:	ed03 0a04 	vstr	s0, [r3, #-16]
 80108ea:	ed03 0a03 	vstr	s0, [r3, #-12]
 80108ee:	ed03 0a02 	vstr	s0, [r3, #-8]
 80108f2:	ed03 0a01 	vstr	s0, [r3, #-4]
 80108f6:	f103 0310 	add.w	r3, r3, #16
 80108fa:	d1f3      	bne.n	80108e4 <arm_fill_f32+0xc>
 80108fc:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8010900:	f011 0103 	ands.w	r1, r1, #3
 8010904:	d003      	beq.n	801090e <arm_fill_f32+0x36>
 8010906:	3901      	subs	r1, #1
 8010908:	eca0 0a01 	vstmia	r0!, {s0}
 801090c:	d1fb      	bne.n	8010906 <arm_fill_f32+0x2e>
 801090e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010912:	4770      	bx	lr

08010914 <arm_min_f32>:
 8010914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010918:	1e4f      	subs	r7, r1, #1
 801091a:	ea5f 0897 	movs.w	r8, r7, lsr #2
 801091e:	f100 0e04 	add.w	lr, r0, #4
 8010922:	edd0 7a00 	vldr	s15, [r0]
 8010926:	d058      	beq.n	80109da <arm_min_f32+0xc6>
 8010928:	3014      	adds	r0, #20
 801092a:	46c4      	mov	ip, r8
 801092c:	2604      	movs	r6, #4
 801092e:	2400      	movs	r4, #0
 8010930:	ed10 6a04 	vldr	s12, [r0, #-16]
 8010934:	ed50 6a03 	vldr	s13, [r0, #-12]
 8010938:	ed10 7a02 	vldr	s14, [r0, #-8]
 801093c:	ed50 5a01 	vldr	s11, [r0, #-4]
 8010940:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8010944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010948:	bf48      	it	mi
 801094a:	eef0 7a46 	vmovmi.f32	s15, s12
 801094e:	f1a6 0503 	sub.w	r5, r6, #3
 8010952:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010956:	bf48      	it	mi
 8010958:	462c      	movmi	r4, r5
 801095a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801095e:	bfc8      	it	gt
 8010960:	eef0 7a66 	vmovgt.f32	s15, s13
 8010964:	f1a6 0502 	sub.w	r5, r6, #2
 8010968:	eef4 7ac7 	vcmpe.f32	s15, s14
 801096c:	bfc8      	it	gt
 801096e:	462c      	movgt	r4, r5
 8010970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010974:	bfc8      	it	gt
 8010976:	eef0 7a47 	vmovgt.f32	s15, s14
 801097a:	f106 35ff 	add.w	r5, r6, #4294967295
 801097e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8010982:	bfc8      	it	gt
 8010984:	462c      	movgt	r4, r5
 8010986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801098a:	bfc8      	it	gt
 801098c:	4634      	movgt	r4, r6
 801098e:	bfc8      	it	gt
 8010990:	eef0 7a65 	vmovgt.f32	s15, s11
 8010994:	f1bc 0c01 	subs.w	ip, ip, #1
 8010998:	f106 0604 	add.w	r6, r6, #4
 801099c:	f100 0010 	add.w	r0, r0, #16
 80109a0:	d1c6      	bne.n	8010930 <arm_min_f32+0x1c>
 80109a2:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 80109a6:	f017 0003 	ands.w	r0, r7, #3
 80109aa:	d018      	beq.n	80109de <arm_min_f32+0xca>
 80109ac:	1a08      	subs	r0, r1, r0
 80109ae:	ecbe 7a01 	vldmia	lr!, {s14}
 80109b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80109b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109ba:	bf48      	it	mi
 80109bc:	4604      	movmi	r4, r0
 80109be:	f100 0001 	add.w	r0, r0, #1
 80109c2:	bf58      	it	pl
 80109c4:	eeb0 7a67 	vmovpl.f32	s14, s15
 80109c8:	4288      	cmp	r0, r1
 80109ca:	eef0 7a47 	vmov.f32	s15, s14
 80109ce:	d1ee      	bne.n	80109ae <arm_min_f32+0x9a>
 80109d0:	ed82 7a00 	vstr	s14, [r2]
 80109d4:	601c      	str	r4, [r3, #0]
 80109d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109da:	4644      	mov	r4, r8
 80109dc:	e7e3      	b.n	80109a6 <arm_min_f32+0x92>
 80109de:	eeb0 7a67 	vmov.f32	s14, s15
 80109e2:	e7f5      	b.n	80109d0 <arm_min_f32+0xbc>

080109e4 <arm_max_f32>:
 80109e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109e8:	1e4f      	subs	r7, r1, #1
 80109ea:	ea5f 0897 	movs.w	r8, r7, lsr #2
 80109ee:	f100 0e04 	add.w	lr, r0, #4
 80109f2:	edd0 7a00 	vldr	s15, [r0]
 80109f6:	d058      	beq.n	8010aaa <arm_max_f32+0xc6>
 80109f8:	3014      	adds	r0, #20
 80109fa:	46c4      	mov	ip, r8
 80109fc:	2604      	movs	r6, #4
 80109fe:	2400      	movs	r4, #0
 8010a00:	ed10 6a04 	vldr	s12, [r0, #-16]
 8010a04:	ed50 6a03 	vldr	s13, [r0, #-12]
 8010a08:	ed10 7a02 	vldr	s14, [r0, #-8]
 8010a0c:	ed50 5a01 	vldr	s11, [r0, #-4]
 8010a10:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8010a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a18:	bfc8      	it	gt
 8010a1a:	eef0 7a46 	vmovgt.f32	s15, s12
 8010a1e:	f1a6 0503 	sub.w	r5, r6, #3
 8010a22:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010a26:	bfc8      	it	gt
 8010a28:	462c      	movgt	r4, r5
 8010a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a2e:	bf48      	it	mi
 8010a30:	eef0 7a66 	vmovmi.f32	s15, s13
 8010a34:	f1a6 0502 	sub.w	r5, r6, #2
 8010a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010a3c:	bf48      	it	mi
 8010a3e:	462c      	movmi	r4, r5
 8010a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a44:	bf48      	it	mi
 8010a46:	eef0 7a47 	vmovmi.f32	s15, s14
 8010a4a:	f106 35ff 	add.w	r5, r6, #4294967295
 8010a4e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8010a52:	bf48      	it	mi
 8010a54:	462c      	movmi	r4, r5
 8010a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a5a:	bf48      	it	mi
 8010a5c:	4634      	movmi	r4, r6
 8010a5e:	bf48      	it	mi
 8010a60:	eef0 7a65 	vmovmi.f32	s15, s11
 8010a64:	f1bc 0c01 	subs.w	ip, ip, #1
 8010a68:	f106 0604 	add.w	r6, r6, #4
 8010a6c:	f100 0010 	add.w	r0, r0, #16
 8010a70:	d1c6      	bne.n	8010a00 <arm_max_f32+0x1c>
 8010a72:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8010a76:	f017 0003 	ands.w	r0, r7, #3
 8010a7a:	d018      	beq.n	8010aae <arm_max_f32+0xca>
 8010a7c:	1a08      	subs	r0, r1, r0
 8010a7e:	ecbe 7a01 	vldmia	lr!, {s14}
 8010a82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a8a:	bfc8      	it	gt
 8010a8c:	4604      	movgt	r4, r0
 8010a8e:	f100 0001 	add.w	r0, r0, #1
 8010a92:	bfd8      	it	le
 8010a94:	eeb0 7a67 	vmovle.f32	s14, s15
 8010a98:	4288      	cmp	r0, r1
 8010a9a:	eef0 7a47 	vmov.f32	s15, s14
 8010a9e:	d1ee      	bne.n	8010a7e <arm_max_f32+0x9a>
 8010aa0:	ed82 7a00 	vstr	s14, [r2]
 8010aa4:	601c      	str	r4, [r3, #0]
 8010aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010aaa:	4644      	mov	r4, r8
 8010aac:	e7e3      	b.n	8010a76 <arm_max_f32+0x92>
 8010aae:	eeb0 7a67 	vmov.f32	s14, s15
 8010ab2:	e7f5      	b.n	8010aa0 <arm_max_f32+0xbc>

08010ab4 <arm_rfft_fast_init_f32>:
 8010ab4:	084b      	lsrs	r3, r1, #1
 8010ab6:	2b80      	cmp	r3, #128	@ 0x80
 8010ab8:	b410      	push	{r4}
 8010aba:	8201      	strh	r1, [r0, #16]
 8010abc:	8003      	strh	r3, [r0, #0]
 8010abe:	d047      	beq.n	8010b50 <arm_rfft_fast_init_f32+0x9c>
 8010ac0:	d917      	bls.n	8010af2 <arm_rfft_fast_init_f32+0x3e>
 8010ac2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010ac6:	d03d      	beq.n	8010b44 <arm_rfft_fast_init_f32+0x90>
 8010ac8:	d929      	bls.n	8010b1e <arm_rfft_fast_init_f32+0x6a>
 8010aca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010ace:	d020      	beq.n	8010b12 <arm_rfft_fast_init_f32+0x5e>
 8010ad0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010ad4:	d113      	bne.n	8010afe <arm_rfft_fast_init_f32+0x4a>
 8010ad6:	4921      	ldr	r1, [pc, #132]	@ (8010b5c <arm_rfft_fast_init_f32+0xa8>)
 8010ad8:	4a21      	ldr	r2, [pc, #132]	@ (8010b60 <arm_rfft_fast_init_f32+0xac>)
 8010ada:	4b22      	ldr	r3, [pc, #136]	@ (8010b64 <arm_rfft_fast_init_f32+0xb0>)
 8010adc:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 8010ae0:	8184      	strh	r4, [r0, #12]
 8010ae2:	6081      	str	r1, [r0, #8]
 8010ae4:	6042      	str	r2, [r0, #4]
 8010ae6:	6143      	str	r3, [r0, #20]
 8010ae8:	2000      	movs	r0, #0
 8010aea:	b240      	sxtb	r0, r0
 8010aec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010af0:	4770      	bx	lr
 8010af2:	2b20      	cmp	r3, #32
 8010af4:	d01c      	beq.n	8010b30 <arm_rfft_fast_init_f32+0x7c>
 8010af6:	2b40      	cmp	r3, #64	@ 0x40
 8010af8:	d006      	beq.n	8010b08 <arm_rfft_fast_init_f32+0x54>
 8010afa:	2b10      	cmp	r3, #16
 8010afc:	d01d      	beq.n	8010b3a <arm_rfft_fast_init_f32+0x86>
 8010afe:	20ff      	movs	r0, #255	@ 0xff
 8010b00:	b240      	sxtb	r0, r0
 8010b02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b06:	4770      	bx	lr
 8010b08:	2438      	movs	r4, #56	@ 0x38
 8010b0a:	4917      	ldr	r1, [pc, #92]	@ (8010b68 <arm_rfft_fast_init_f32+0xb4>)
 8010b0c:	4a17      	ldr	r2, [pc, #92]	@ (8010b6c <arm_rfft_fast_init_f32+0xb8>)
 8010b0e:	4b18      	ldr	r3, [pc, #96]	@ (8010b70 <arm_rfft_fast_init_f32+0xbc>)
 8010b10:	e7e6      	b.n	8010ae0 <arm_rfft_fast_init_f32+0x2c>
 8010b12:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 8010b16:	4917      	ldr	r1, [pc, #92]	@ (8010b74 <arm_rfft_fast_init_f32+0xc0>)
 8010b18:	4a17      	ldr	r2, [pc, #92]	@ (8010b78 <arm_rfft_fast_init_f32+0xc4>)
 8010b1a:	4b18      	ldr	r3, [pc, #96]	@ (8010b7c <arm_rfft_fast_init_f32+0xc8>)
 8010b1c:	e7e0      	b.n	8010ae0 <arm_rfft_fast_init_f32+0x2c>
 8010b1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010b22:	d1ec      	bne.n	8010afe <arm_rfft_fast_init_f32+0x4a>
 8010b24:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 8010b28:	4915      	ldr	r1, [pc, #84]	@ (8010b80 <arm_rfft_fast_init_f32+0xcc>)
 8010b2a:	4a16      	ldr	r2, [pc, #88]	@ (8010b84 <arm_rfft_fast_init_f32+0xd0>)
 8010b2c:	4b16      	ldr	r3, [pc, #88]	@ (8010b88 <arm_rfft_fast_init_f32+0xd4>)
 8010b2e:	e7d7      	b.n	8010ae0 <arm_rfft_fast_init_f32+0x2c>
 8010b30:	2430      	movs	r4, #48	@ 0x30
 8010b32:	4916      	ldr	r1, [pc, #88]	@ (8010b8c <arm_rfft_fast_init_f32+0xd8>)
 8010b34:	4a16      	ldr	r2, [pc, #88]	@ (8010b90 <arm_rfft_fast_init_f32+0xdc>)
 8010b36:	4b17      	ldr	r3, [pc, #92]	@ (8010b94 <arm_rfft_fast_init_f32+0xe0>)
 8010b38:	e7d2      	b.n	8010ae0 <arm_rfft_fast_init_f32+0x2c>
 8010b3a:	2414      	movs	r4, #20
 8010b3c:	4916      	ldr	r1, [pc, #88]	@ (8010b98 <arm_rfft_fast_init_f32+0xe4>)
 8010b3e:	4a17      	ldr	r2, [pc, #92]	@ (8010b9c <arm_rfft_fast_init_f32+0xe8>)
 8010b40:	4b17      	ldr	r3, [pc, #92]	@ (8010ba0 <arm_rfft_fast_init_f32+0xec>)
 8010b42:	e7cd      	b.n	8010ae0 <arm_rfft_fast_init_f32+0x2c>
 8010b44:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 8010b48:	4916      	ldr	r1, [pc, #88]	@ (8010ba4 <arm_rfft_fast_init_f32+0xf0>)
 8010b4a:	4a17      	ldr	r2, [pc, #92]	@ (8010ba8 <arm_rfft_fast_init_f32+0xf4>)
 8010b4c:	4b17      	ldr	r3, [pc, #92]	@ (8010bac <arm_rfft_fast_init_f32+0xf8>)
 8010b4e:	e7c7      	b.n	8010ae0 <arm_rfft_fast_init_f32+0x2c>
 8010b50:	24d0      	movs	r4, #208	@ 0xd0
 8010b52:	4917      	ldr	r1, [pc, #92]	@ (8010bb0 <arm_rfft_fast_init_f32+0xfc>)
 8010b54:	4a17      	ldr	r2, [pc, #92]	@ (8010bb4 <arm_rfft_fast_init_f32+0x100>)
 8010b56:	4b18      	ldr	r3, [pc, #96]	@ (8010bb8 <arm_rfft_fast_init_f32+0x104>)
 8010b58:	e7c2      	b.n	8010ae0 <arm_rfft_fast_init_f32+0x2c>
 8010b5a:	bf00      	nop
 8010b5c:	08026488 	.word	0x08026488
 8010b60:	08016e7c 	.word	0x08016e7c
 8010b64:	0801cfec 	.word	0x0801cfec
 8010b68:	0801af7c 	.word	0x0801af7c
 8010b6c:	08028248 	.word	0x08028248
 8010b70:	0802a738 	.word	0x0802a738
 8010b74:	0802396c 	.word	0x0802396c
 8010b78:	0802186c 	.word	0x0802186c
 8010b7c:	0801afec 	.word	0x0801afec
 8010b80:	0802a3c8 	.word	0x0802a3c8
 8010b84:	08020fec 	.word	0x08020fec
 8010b88:	08028448 	.word	0x08028448
 8010b8c:	08024824 	.word	0x08024824
 8010b90:	0802386c 	.word	0x0802386c
 8010b94:	0801ae7c 	.word	0x0801ae7c
 8010b98:	0802477c 	.word	0x0802477c
 8010b9c:	080217ec 	.word	0x080217ec
 8010ba0:	080247a4 	.word	0x080247a4
 8010ba4:	08028c48 	.word	0x08028c48
 8010ba8:	08025488 	.word	0x08025488
 8010bac:	08028fc8 	.word	0x08028fc8
 8010bb0:	0802a938 	.word	0x0802a938
 8010bb4:	08025088 	.word	0x08025088
 8010bb8:	08029fc8 	.word	0x08029fc8

08010bbc <arm_rfft_fast_f32>:
 8010bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bc0:	8a06      	ldrh	r6, [r0, #16]
 8010bc2:	0876      	lsrs	r6, r6, #1
 8010bc4:	4607      	mov	r7, r0
 8010bc6:	4615      	mov	r5, r2
 8010bc8:	8006      	strh	r6, [r0, #0]
 8010bca:	460c      	mov	r4, r1
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d15c      	bne.n	8010c8a <arm_rfft_fast_f32+0xce>
 8010bd0:	461a      	mov	r2, r3
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	f000 fbe6 	bl	80113a4 <arm_cfft_f32>
 8010bd8:	edd4 7a00 	vldr	s15, [r4]
 8010bdc:	ed94 7a01 	vldr	s14, [r4, #4]
 8010be0:	883e      	ldrh	r6, [r7, #0]
 8010be2:	6978      	ldr	r0, [r7, #20]
 8010be4:	ee37 7a07 	vadd.f32	s14, s14, s14
 8010be8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010bec:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8010bf0:	ee77 6a87 	vadd.f32	s13, s15, s14
 8010bf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010bf8:	3e01      	subs	r6, #1
 8010bfa:	ee26 7aa3 	vmul.f32	s14, s13, s7
 8010bfe:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8010c02:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8010c06:	ed85 7a00 	vstr	s14, [r5]
 8010c0a:	edc5 7a01 	vstr	s15, [r5, #4]
 8010c0e:	3010      	adds	r0, #16
 8010c10:	f105 0210 	add.w	r2, r5, #16
 8010c14:	3b08      	subs	r3, #8
 8010c16:	f104 0110 	add.w	r1, r4, #16
 8010c1a:	ed51 4a02 	vldr	s9, [r1, #-8]
 8010c1e:	ed93 5a02 	vldr	s10, [r3, #8]
 8010c22:	ed11 7a01 	vldr	s14, [r1, #-4]
 8010c26:	ed10 6a02 	vldr	s12, [r0, #-8]
 8010c2a:	edd3 5a03 	vldr	s11, [r3, #12]
 8010c2e:	ed50 6a01 	vldr	s13, [r0, #-4]
 8010c32:	ee75 7a64 	vsub.f32	s15, s10, s9
 8010c36:	ee35 4a87 	vadd.f32	s8, s11, s14
 8010c3a:	ee35 5a24 	vadd.f32	s10, s10, s9
 8010c3e:	ee77 5a65 	vsub.f32	s11, s14, s11
 8010c42:	ee66 4a27 	vmul.f32	s9, s12, s15
 8010c46:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8010c4a:	ee34 5a85 	vadd.f32	s10, s9, s10
 8010c4e:	ee26 6a04 	vmul.f32	s12, s12, s8
 8010c52:	ee66 6a84 	vmul.f32	s13, s13, s8
 8010c56:	ee77 7a25 	vadd.f32	s15, s14, s11
 8010c5a:	ee76 6a85 	vadd.f32	s13, s13, s10
 8010c5e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010c62:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8010c66:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8010c6a:	3e01      	subs	r6, #1
 8010c6c:	ed42 6a02 	vstr	s13, [r2, #-8]
 8010c70:	ed42 7a01 	vstr	s15, [r2, #-4]
 8010c74:	f1a3 0308 	sub.w	r3, r3, #8
 8010c78:	f101 0108 	add.w	r1, r1, #8
 8010c7c:	f100 0008 	add.w	r0, r0, #8
 8010c80:	f102 0208 	add.w	r2, r2, #8
 8010c84:	d1c9      	bne.n	8010c1a <arm_rfft_fast_f32+0x5e>
 8010c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c8a:	edd1 7a00 	vldr	s15, [r1]
 8010c8e:	edd1 6a01 	vldr	s13, [r1, #4]
 8010c92:	6941      	ldr	r1, [r0, #20]
 8010c94:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010c98:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010c9c:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8010ca0:	ee27 7a23 	vmul.f32	s14, s14, s7
 8010ca4:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8010ca8:	3e01      	subs	r6, #1
 8010caa:	ed82 7a00 	vstr	s14, [r2]
 8010cae:	edc2 7a01 	vstr	s15, [r2, #4]
 8010cb2:	00f0      	lsls	r0, r6, #3
 8010cb4:	b3ee      	cbz	r6, 8010d32 <arm_rfft_fast_f32+0x176>
 8010cb6:	3808      	subs	r0, #8
 8010cb8:	f101 0e10 	add.w	lr, r1, #16
 8010cbc:	4420      	add	r0, r4
 8010cbe:	f104 0110 	add.w	r1, r4, #16
 8010cc2:	f102 0c10 	add.w	ip, r2, #16
 8010cc6:	ed90 7a02 	vldr	s14, [r0, #8]
 8010cca:	ed51 6a02 	vldr	s13, [r1, #-8]
 8010cce:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8010cd2:	ed90 4a03 	vldr	s8, [r0, #12]
 8010cd6:	ed11 5a01 	vldr	s10, [r1, #-4]
 8010cda:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8010cde:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8010ce2:	ee74 4a05 	vadd.f32	s9, s8, s10
 8010ce6:	ee26 3a27 	vmul.f32	s6, s12, s15
 8010cea:	ee77 6a26 	vadd.f32	s13, s14, s13
 8010cee:	ee35 5a44 	vsub.f32	s10, s10, s8
 8010cf2:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8010cf6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8010cfa:	ee77 7a05 	vadd.f32	s15, s14, s10
 8010cfe:	ee26 6a24 	vmul.f32	s12, s12, s9
 8010d02:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8010d06:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010d0a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8010d0e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8010d12:	ee27 7a23 	vmul.f32	s14, s14, s7
 8010d16:	3e01      	subs	r6, #1
 8010d18:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8010d1c:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8010d20:	f1a0 0008 	sub.w	r0, r0, #8
 8010d24:	f101 0108 	add.w	r1, r1, #8
 8010d28:	f10e 0e08 	add.w	lr, lr, #8
 8010d2c:	f10c 0c08 	add.w	ip, ip, #8
 8010d30:	d1c9      	bne.n	8010cc6 <arm_rfft_fast_f32+0x10a>
 8010d32:	4638      	mov	r0, r7
 8010d34:	4629      	mov	r1, r5
 8010d36:	461a      	mov	r2, r3
 8010d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d3c:	2301      	movs	r3, #1
 8010d3e:	f000 bb31 	b.w	80113a4 <arm_cfft_f32>
 8010d42:	bf00      	nop

08010d44 <arm_cfft_radix8by2_f32>:
 8010d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d48:	ed2d 8b08 	vpush	{d8-d11}
 8010d4c:	f8b0 e000 	ldrh.w	lr, [r0]
 8010d50:	6842      	ldr	r2, [r0, #4]
 8010d52:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8010d56:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8010d5a:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8010d5e:	4607      	mov	r7, r0
 8010d60:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8010d64:	f000 80af 	beq.w	8010ec6 <arm_cfft_radix8by2_f32+0x182>
 8010d68:	3310      	adds	r3, #16
 8010d6a:	18ce      	adds	r6, r1, r3
 8010d6c:	3210      	adds	r2, #16
 8010d6e:	4443      	add	r3, r8
 8010d70:	f101 0510 	add.w	r5, r1, #16
 8010d74:	f108 0410 	add.w	r4, r8, #16
 8010d78:	ed54 1a04 	vldr	s3, [r4, #-16]
 8010d7c:	ed13 4a04 	vldr	s8, [r3, #-16]
 8010d80:	ed53 3a03 	vldr	s7, [r3, #-12]
 8010d84:	ed53 5a02 	vldr	s11, [r3, #-8]
 8010d88:	ed13 5a01 	vldr	s10, [r3, #-4]
 8010d8c:	ed54 6a03 	vldr	s13, [r4, #-12]
 8010d90:	ed14 0a02 	vldr	s0, [r4, #-8]
 8010d94:	ed16 2a04 	vldr	s4, [r6, #-16]
 8010d98:	ed56 2a03 	vldr	s5, [r6, #-12]
 8010d9c:	ed15 6a03 	vldr	s12, [r5, #-12]
 8010da0:	ed15 7a01 	vldr	s14, [r5, #-4]
 8010da4:	ed15 3a04 	vldr	s6, [r5, #-16]
 8010da8:	ed54 7a01 	vldr	s15, [r4, #-4]
 8010dac:	ed56 0a02 	vldr	s1, [r6, #-8]
 8010db0:	ed16 1a01 	vldr	s2, [r6, #-4]
 8010db4:	ed55 4a02 	vldr	s9, [r5, #-8]
 8010db8:	ee73 ba21 	vadd.f32	s23, s6, s3
 8010dbc:	ee36 ba26 	vadd.f32	s22, s12, s13
 8010dc0:	ee37 aa27 	vadd.f32	s20, s14, s15
 8010dc4:	ee72 9a04 	vadd.f32	s19, s4, s8
 8010dc8:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8010dcc:	ee31 8a05 	vadd.f32	s16, s2, s10
 8010dd0:	ee74 aa80 	vadd.f32	s21, s9, s0
 8010dd4:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8010dd8:	ed45 ba04 	vstr	s23, [r5, #-16]
 8010ddc:	ed05 ba03 	vstr	s22, [r5, #-12]
 8010de0:	ed45 aa02 	vstr	s21, [r5, #-8]
 8010de4:	ed05 aa01 	vstr	s20, [r5, #-4]
 8010de8:	ed06 8a01 	vstr	s16, [r6, #-4]
 8010dec:	ed46 9a04 	vstr	s19, [r6, #-16]
 8010df0:	ed06 9a03 	vstr	s18, [r6, #-12]
 8010df4:	ed46 8a02 	vstr	s17, [r6, #-8]
 8010df8:	ee76 6a66 	vsub.f32	s13, s12, s13
 8010dfc:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8010e00:	ed12 6a03 	vldr	s12, [r2, #-12]
 8010e04:	ed52 2a04 	vldr	s5, [r2, #-16]
 8010e08:	ee33 3a61 	vsub.f32	s6, s6, s3
 8010e0c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8010e10:	ee26 8a86 	vmul.f32	s16, s13, s12
 8010e14:	ee24 2a06 	vmul.f32	s4, s8, s12
 8010e18:	ee63 1a22 	vmul.f32	s3, s6, s5
 8010e1c:	ee24 4a22 	vmul.f32	s8, s8, s5
 8010e20:	ee23 3a06 	vmul.f32	s6, s6, s12
 8010e24:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8010e28:	ee23 6a86 	vmul.f32	s12, s7, s12
 8010e2c:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8010e30:	ee36 6a04 	vadd.f32	s12, s12, s8
 8010e34:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8010e38:	ee72 3a63 	vsub.f32	s7, s4, s7
 8010e3c:	ee71 2a88 	vadd.f32	s5, s3, s16
 8010e40:	ed44 6a03 	vstr	s13, [r4, #-12]
 8010e44:	ed44 2a04 	vstr	s5, [r4, #-16]
 8010e48:	ed43 3a04 	vstr	s7, [r3, #-16]
 8010e4c:	ed03 6a03 	vstr	s12, [r3, #-12]
 8010e50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e54:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8010e58:	ed12 7a01 	vldr	s14, [r2, #-4]
 8010e5c:	ed52 5a02 	vldr	s11, [r2, #-8]
 8010e60:	ee35 6a41 	vsub.f32	s12, s10, s2
 8010e64:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8010e68:	ee67 3a87 	vmul.f32	s7, s15, s14
 8010e6c:	ee26 5a87 	vmul.f32	s10, s13, s14
 8010e70:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8010e74:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010e78:	ee64 4a87 	vmul.f32	s9, s9, s14
 8010e7c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8010e80:	ee26 7a07 	vmul.f32	s14, s12, s14
 8010e84:	ee26 6a25 	vmul.f32	s12, s12, s11
 8010e88:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8010e8c:	ee74 5a23 	vadd.f32	s11, s8, s7
 8010e90:	ee35 6a46 	vsub.f32	s12, s10, s12
 8010e94:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010e98:	f1be 0e01 	subs.w	lr, lr, #1
 8010e9c:	ed44 5a02 	vstr	s11, [r4, #-8]
 8010ea0:	f105 0510 	add.w	r5, r5, #16
 8010ea4:	ed44 7a01 	vstr	s15, [r4, #-4]
 8010ea8:	f106 0610 	add.w	r6, r6, #16
 8010eac:	ed03 6a02 	vstr	s12, [r3, #-8]
 8010eb0:	ed03 7a01 	vstr	s14, [r3, #-4]
 8010eb4:	f102 0210 	add.w	r2, r2, #16
 8010eb8:	f104 0410 	add.w	r4, r4, #16
 8010ebc:	f103 0310 	add.w	r3, r3, #16
 8010ec0:	f47f af5a 	bne.w	8010d78 <arm_cfft_radix8by2_f32+0x34>
 8010ec4:	687a      	ldr	r2, [r7, #4]
 8010ec6:	fa1f f48c 	uxth.w	r4, ip
 8010eca:	4608      	mov	r0, r1
 8010ecc:	2302      	movs	r3, #2
 8010ece:	4621      	mov	r1, r4
 8010ed0:	f000 fefc 	bl	8011ccc <arm_radix8_butterfly_f32>
 8010ed4:	ecbd 8b08 	vpop	{d8-d11}
 8010ed8:	4640      	mov	r0, r8
 8010eda:	4621      	mov	r1, r4
 8010edc:	687a      	ldr	r2, [r7, #4]
 8010ede:	2302      	movs	r3, #2
 8010ee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ee4:	f000 bef2 	b.w	8011ccc <arm_radix8_butterfly_f32>

08010ee8 <arm_cfft_radix8by4_f32>:
 8010ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eec:	ed2d 8b0a 	vpush	{d8-d12}
 8010ef0:	8802      	ldrh	r2, [r0, #0]
 8010ef2:	ed91 6a00 	vldr	s12, [r1]
 8010ef6:	b08f      	sub	sp, #60	@ 0x3c
 8010ef8:	460f      	mov	r7, r1
 8010efa:	0852      	lsrs	r2, r2, #1
 8010efc:	0093      	lsls	r3, r2, #2
 8010efe:	900c      	str	r0, [sp, #48]	@ 0x30
 8010f00:	9103      	str	r1, [sp, #12]
 8010f02:	6841      	ldr	r1, [r0, #4]
 8010f04:	ed97 7a01 	vldr	s14, [r7, #4]
 8010f08:	4638      	mov	r0, r7
 8010f0a:	4418      	add	r0, r3
 8010f0c:	4606      	mov	r6, r0
 8010f0e:	9009      	str	r0, [sp, #36]	@ 0x24
 8010f10:	4418      	add	r0, r3
 8010f12:	edd0 6a00 	vldr	s13, [r0]
 8010f16:	edd6 3a00 	vldr	s7, [r6]
 8010f1a:	edd6 2a01 	vldr	s5, [r6, #4]
 8010f1e:	edd0 7a01 	vldr	s15, [r0, #4]
 8010f22:	900a      	str	r0, [sp, #40]	@ 0x28
 8010f24:	ee76 5a26 	vadd.f32	s11, s12, s13
 8010f28:	4604      	mov	r4, r0
 8010f2a:	4625      	mov	r5, r4
 8010f2c:	441c      	add	r4, r3
 8010f2e:	ed94 4a00 	vldr	s8, [r4]
 8010f32:	ed94 5a01 	vldr	s10, [r4, #4]
 8010f36:	9401      	str	r4, [sp, #4]
 8010f38:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8010f3c:	4630      	mov	r0, r6
 8010f3e:	ee74 4a24 	vadd.f32	s9, s8, s9
 8010f42:	463e      	mov	r6, r7
 8010f44:	ee14 ea90 	vmov	lr, s9
 8010f48:	ee76 6a66 	vsub.f32	s13, s12, s13
 8010f4c:	f846 eb08 	str.w	lr, [r6], #8
 8010f50:	ee37 6a27 	vadd.f32	s12, s14, s15
 8010f54:	edd0 4a01 	vldr	s9, [r0, #4]
 8010f58:	9604      	str	r6, [sp, #16]
 8010f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f5e:	9e01      	ldr	r6, [sp, #4]
 8010f60:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8010f64:	ed96 2a01 	vldr	s4, [r6, #4]
 8010f68:	ee36 7a24 	vadd.f32	s14, s12, s9
 8010f6c:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8010f70:	ee77 4ae3 	vsub.f32	s9, s15, s7
 8010f74:	ee36 6a62 	vsub.f32	s12, s12, s5
 8010f78:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8010f7c:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8010f80:	ee73 3a45 	vsub.f32	s7, s6, s10
 8010f84:	4604      	mov	r4, r0
 8010f86:	ee36 6a45 	vsub.f32	s12, s12, s10
 8010f8a:	ee75 6a26 	vadd.f32	s13, s10, s13
 8010f8e:	46a3      	mov	fp, r4
 8010f90:	ee37 7a02 	vadd.f32	s14, s14, s4
 8010f94:	ee34 5a84 	vadd.f32	s10, s9, s8
 8010f98:	ee13 8a90 	vmov	r8, s7
 8010f9c:	46a4      	mov	ip, r4
 8010f9e:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8010fa2:	ed87 7a01 	vstr	s14, [r7, #4]
 8010fa6:	f84b 8b08 	str.w	r8, [fp], #8
 8010faa:	f1ac 0704 	sub.w	r7, ip, #4
 8010fae:	ed8c 5a01 	vstr	s10, [ip, #4]
 8010fb2:	f101 0c08 	add.w	ip, r1, #8
 8010fb6:	462c      	mov	r4, r5
 8010fb8:	f8cd c014 	str.w	ip, [sp, #20]
 8010fbc:	ee15 ca90 	vmov	ip, s11
 8010fc0:	f844 cb08 	str.w	ip, [r4], #8
 8010fc4:	9407      	str	r4, [sp, #28]
 8010fc6:	f101 0410 	add.w	r4, r1, #16
 8010fca:	ed85 6a01 	vstr	s12, [r5, #4]
 8010fce:	0852      	lsrs	r2, r2, #1
 8010fd0:	9402      	str	r4, [sp, #8]
 8010fd2:	462c      	mov	r4, r5
 8010fd4:	f101 0518 	add.w	r5, r1, #24
 8010fd8:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010fda:	46b2      	mov	sl, r6
 8010fdc:	9506      	str	r5, [sp, #24]
 8010fde:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8010fe2:	3a02      	subs	r2, #2
 8010fe4:	ee16 5a90 	vmov	r5, s13
 8010fe8:	46b6      	mov	lr, r6
 8010fea:	4630      	mov	r0, r6
 8010fec:	0852      	lsrs	r2, r2, #1
 8010fee:	f84a 5b08 	str.w	r5, [sl], #8
 8010ff2:	f1a0 0604 	sub.w	r6, r0, #4
 8010ff6:	edce 7a01 	vstr	s15, [lr, #4]
 8010ffa:	9208      	str	r2, [sp, #32]
 8010ffc:	f000 8130 	beq.w	8011260 <arm_cfft_radix8by4_f32+0x378>
 8011000:	4691      	mov	r9, r2
 8011002:	9a03      	ldr	r2, [sp, #12]
 8011004:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011008:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 801100c:	3b08      	subs	r3, #8
 801100e:	f102 0510 	add.w	r5, r2, #16
 8011012:	f101 0c20 	add.w	ip, r1, #32
 8011016:	f1a4 020c 	sub.w	r2, r4, #12
 801101a:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 801101e:	4433      	add	r3, r6
 8011020:	3410      	adds	r4, #16
 8011022:	4650      	mov	r0, sl
 8011024:	4659      	mov	r1, fp
 8011026:	ed55 3a02 	vldr	s7, [r5, #-8]
 801102a:	ed14 5a02 	vldr	s10, [r4, #-8]
 801102e:	ed91 7a00 	vldr	s14, [r1]
 8011032:	edd0 7a00 	vldr	s15, [r0]
 8011036:	ed15 4a01 	vldr	s8, [r5, #-4]
 801103a:	ed54 5a01 	vldr	s11, [r4, #-4]
 801103e:	edd0 6a01 	vldr	s13, [r0, #4]
 8011042:	ed91 6a01 	vldr	s12, [r1, #4]
 8011046:	ee33 8a85 	vadd.f32	s16, s7, s10
 801104a:	ee34 0a25 	vadd.f32	s0, s8, s11
 801104e:	ee78 4a07 	vadd.f32	s9, s16, s14
 8011052:	ee74 5a65 	vsub.f32	s11, s8, s11
 8011056:	ee77 4aa4 	vadd.f32	s9, s15, s9
 801105a:	ee33 5ac5 	vsub.f32	s10, s7, s10
 801105e:	ed45 4a02 	vstr	s9, [r5, #-8]
 8011062:	edd1 4a01 	vldr	s9, [r1, #4]
 8011066:	ed90 4a01 	vldr	s8, [r0, #4]
 801106a:	ee70 4a24 	vadd.f32	s9, s0, s9
 801106e:	ee76 aa05 	vadd.f32	s21, s12, s10
 8011072:	ee74 4a84 	vadd.f32	s9, s9, s8
 8011076:	ee35 aac7 	vsub.f32	s20, s11, s14
 801107a:	ed45 4a01 	vstr	s9, [r5, #-4]
 801107e:	edd6 1a00 	vldr	s3, [r6]
 8011082:	edd7 0a00 	vldr	s1, [r7]
 8011086:	ed92 4a02 	vldr	s8, [r2, #8]
 801108a:	edd3 3a02 	vldr	s7, [r3, #8]
 801108e:	ed93 2a01 	vldr	s4, [r3, #4]
 8011092:	ed16 1a01 	vldr	s2, [r6, #-4]
 8011096:	edd2 2a01 	vldr	s5, [r2, #4]
 801109a:	ed57 9a01 	vldr	s19, [r7, #-4]
 801109e:	ee70 4aa1 	vadd.f32	s9, s1, s3
 80110a2:	ee39 3a81 	vadd.f32	s6, s19, s2
 80110a6:	ee74 8a84 	vadd.f32	s17, s9, s8
 80110aa:	ee70 1ae1 	vsub.f32	s3, s1, s3
 80110ae:	ee73 8aa8 	vadd.f32	s17, s7, s17
 80110b2:	ee7a aae6 	vsub.f32	s21, s21, s13
 80110b6:	ee18 aa90 	vmov	sl, s17
 80110ba:	f847 a908 	str.w	sl, [r7], #-8
 80110be:	edd2 8a01 	vldr	s17, [r2, #4]
 80110c2:	ed93 9a01 	vldr	s18, [r3, #4]
 80110c6:	ee73 8a28 	vadd.f32	s17, s6, s17
 80110ca:	ee3a aa27 	vadd.f32	s20, s20, s15
 80110ce:	ee78 8a89 	vadd.f32	s17, s17, s18
 80110d2:	ee74 0a63 	vsub.f32	s1, s8, s7
 80110d6:	edc7 8a01 	vstr	s17, [r7, #4]
 80110da:	ed18 ba02 	vldr	s22, [r8, #-8]
 80110de:	ed58 8a01 	vldr	s17, [r8, #-4]
 80110e2:	ee39 1ac1 	vsub.f32	s2, s19, s2
 80110e6:	ee6a ba28 	vmul.f32	s23, s20, s17
 80110ea:	ee2a ca8b 	vmul.f32	s24, s21, s22
 80110ee:	ee71 9ae2 	vsub.f32	s19, s3, s5
 80110f2:	ee30 9a81 	vadd.f32	s18, s1, s2
 80110f6:	ee79 9a82 	vadd.f32	s19, s19, s4
 80110fa:	ee3c ca2b 	vadd.f32	s24, s24, s23
 80110fe:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8011102:	ee69 baa8 	vmul.f32	s23, s19, s17
 8011106:	ee2a aa0b 	vmul.f32	s20, s20, s22
 801110a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 801110e:	ee69 8a28 	vmul.f32	s17, s18, s17
 8011112:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8011116:	ee1c aa10 	vmov	sl, s24
 801111a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 801111e:	f841 ab08 	str.w	sl, [r1], #8
 8011122:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8011126:	ee3b bacb 	vsub.f32	s22, s23, s22
 801112a:	ee34 4ac4 	vsub.f32	s8, s9, s8
 801112e:	ee33 3a62 	vsub.f32	s6, s6, s5
 8011132:	ed01 aa01 	vstr	s20, [r1, #-4]
 8011136:	edc2 8a01 	vstr	s17, [r2, #4]
 801113a:	ed82 ba02 	vstr	s22, [r2, #8]
 801113e:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8011142:	ee74 3a63 	vsub.f32	s7, s8, s7
 8011146:	ee38 8a47 	vsub.f32	s16, s16, s14
 801114a:	ed1c 4a03 	vldr	s8, [ip, #-12]
 801114e:	ee30 0a46 	vsub.f32	s0, s0, s12
 8011152:	ee33 3a42 	vsub.f32	s6, s6, s4
 8011156:	ee38 8a67 	vsub.f32	s16, s16, s15
 801115a:	ee30 0a66 	vsub.f32	s0, s0, s13
 801115e:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8011162:	ee63 8a04 	vmul.f32	s17, s6, s8
 8011166:	ee28 aa24 	vmul.f32	s20, s16, s9
 801116a:	ee60 9a04 	vmul.f32	s19, s0, s8
 801116e:	ee28 8a04 	vmul.f32	s16, s16, s8
 8011172:	ee20 0a24 	vmul.f32	s0, s0, s9
 8011176:	ee63 3a84 	vmul.f32	s7, s7, s8
 801117a:	ee39 4a68 	vsub.f32	s8, s18, s17
 801117e:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8011182:	ee14 aa10 	vmov	sl, s8
 8011186:	ee30 0a48 	vsub.f32	s0, s0, s16
 801118a:	ee63 4a24 	vmul.f32	s9, s6, s9
 801118e:	ed44 9a02 	vstr	s19, [r4, #-8]
 8011192:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8011196:	ed04 0a01 	vstr	s0, [r4, #-4]
 801119a:	f846 a908 	str.w	sl, [r6], #-8
 801119e:	ee35 6a46 	vsub.f32	s12, s10, s12
 80111a2:	ee35 7a87 	vadd.f32	s14, s11, s14
 80111a6:	edc6 3a01 	vstr	s7, [r6, #4]
 80111aa:	ee76 6a86 	vadd.f32	s13, s13, s12
 80111ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80111b2:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 80111b6:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 80111ba:	ee67 5a86 	vmul.f32	s11, s15, s12
 80111be:	ee26 5a87 	vmul.f32	s10, s13, s14
 80111c2:	ee72 2a62 	vsub.f32	s5, s4, s5
 80111c6:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80111ca:	ee72 2ae1 	vsub.f32	s5, s5, s3
 80111ce:	ee75 5a25 	vadd.f32	s11, s10, s11
 80111d2:	ee62 0a86 	vmul.f32	s1, s5, s12
 80111d6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80111da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80111de:	ee21 6a06 	vmul.f32	s12, s2, s12
 80111e2:	ee62 2a87 	vmul.f32	s5, s5, s14
 80111e6:	ee21 1a07 	vmul.f32	s2, s2, s14
 80111ea:	ee15 aa90 	vmov	sl, s11
 80111ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80111f2:	f840 ab08 	str.w	sl, [r0], #8
 80111f6:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80111fa:	ee76 2a22 	vadd.f32	s5, s12, s5
 80111fe:	f1b9 0901 	subs.w	r9, r9, #1
 8011202:	ed40 7a01 	vstr	s15, [r0, #-4]
 8011206:	f105 0508 	add.w	r5, r5, #8
 801120a:	ed83 1a02 	vstr	s2, [r3, #8]
 801120e:	edc3 2a01 	vstr	s5, [r3, #4]
 8011212:	f108 0808 	add.w	r8, r8, #8
 8011216:	f1a2 0208 	sub.w	r2, r2, #8
 801121a:	f10c 0c10 	add.w	ip, ip, #16
 801121e:	f104 0408 	add.w	r4, r4, #8
 8011222:	f10e 0e18 	add.w	lr, lr, #24
 8011226:	f1a3 0308 	sub.w	r3, r3, #8
 801122a:	f47f aefc 	bne.w	8011026 <arm_cfft_radix8by4_f32+0x13e>
 801122e:	9908      	ldr	r1, [sp, #32]
 8011230:	9802      	ldr	r0, [sp, #8]
 8011232:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8011236:	00cb      	lsls	r3, r1, #3
 8011238:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 801123c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8011240:	9102      	str	r1, [sp, #8]
 8011242:	9904      	ldr	r1, [sp, #16]
 8011244:	4419      	add	r1, r3
 8011246:	9104      	str	r1, [sp, #16]
 8011248:	9905      	ldr	r1, [sp, #20]
 801124a:	4419      	add	r1, r3
 801124c:	9105      	str	r1, [sp, #20]
 801124e:	9907      	ldr	r1, [sp, #28]
 8011250:	449b      	add	fp, r3
 8011252:	4419      	add	r1, r3
 8011254:	449a      	add	sl, r3
 8011256:	9b06      	ldr	r3, [sp, #24]
 8011258:	9107      	str	r1, [sp, #28]
 801125a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801125e:	9306      	str	r3, [sp, #24]
 8011260:	9a04      	ldr	r2, [sp, #16]
 8011262:	9807      	ldr	r0, [sp, #28]
 8011264:	edd2 3a00 	vldr	s7, [r2]
 8011268:	ed90 4a00 	vldr	s8, [r0]
 801126c:	eddb 7a00 	vldr	s15, [fp]
 8011270:	ed9a 3a00 	vldr	s6, [sl]
 8011274:	edd2 4a01 	vldr	s9, [r2, #4]
 8011278:	ed90 7a01 	vldr	s14, [r0, #4]
 801127c:	ed9b 2a01 	vldr	s4, [fp, #4]
 8011280:	edda 5a01 	vldr	s11, [sl, #4]
 8011284:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8011288:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801128a:	ee73 6a84 	vadd.f32	s13, s7, s8
 801128e:	ee34 6a87 	vadd.f32	s12, s9, s14
 8011292:	ee36 5aa7 	vadd.f32	s10, s13, s15
 8011296:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801129a:	ee33 5a05 	vadd.f32	s10, s6, s10
 801129e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80112a2:	ed82 5a00 	vstr	s10, [r2]
 80112a6:	ed9b 5a01 	vldr	s10, [fp, #4]
 80112aa:	edda 4a01 	vldr	s9, [sl, #4]
 80112ae:	ee36 5a05 	vadd.f32	s10, s12, s10
 80112b2:	ee72 3a04 	vadd.f32	s7, s4, s8
 80112b6:	ee35 5a24 	vadd.f32	s10, s10, s9
 80112ba:	ee77 4a67 	vsub.f32	s9, s14, s15
 80112be:	ed82 5a01 	vstr	s10, [r2, #4]
 80112c2:	9a05      	ldr	r2, [sp, #20]
 80112c4:	ee34 5a83 	vadd.f32	s10, s9, s6
 80112c8:	edd2 1a00 	vldr	s3, [r2]
 80112cc:	edd2 2a01 	vldr	s5, [r2, #4]
 80112d0:	9a02      	ldr	r2, [sp, #8]
 80112d2:	ee73 3ae5 	vsub.f32	s7, s7, s11
 80112d6:	ee36 6a42 	vsub.f32	s12, s12, s4
 80112da:	ee63 4aa1 	vmul.f32	s9, s7, s3
 80112de:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80112e2:	ee65 2a22 	vmul.f32	s5, s10, s5
 80112e6:	ee25 5a21 	vmul.f32	s10, s10, s3
 80112ea:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80112ee:	ee35 5a63 	vsub.f32	s10, s10, s7
 80112f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80112f6:	edcb 2a00 	vstr	s5, [fp]
 80112fa:	ed8b 5a01 	vstr	s10, [fp, #4]
 80112fe:	edd2 3a01 	vldr	s7, [r2, #4]
 8011302:	ed92 5a00 	vldr	s10, [r2]
 8011306:	9a06      	ldr	r2, [sp, #24]
 8011308:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801130c:	ee36 6a65 	vsub.f32	s12, s12, s11
 8011310:	ee66 4a85 	vmul.f32	s9, s13, s10
 8011314:	ee26 5a05 	vmul.f32	s10, s12, s10
 8011318:	ee66 6aa3 	vmul.f32	s13, s13, s7
 801131c:	ee26 6a23 	vmul.f32	s12, s12, s7
 8011320:	ee75 6a66 	vsub.f32	s13, s10, s13
 8011324:	ee34 6a86 	vadd.f32	s12, s9, s12
 8011328:	ee34 4a42 	vsub.f32	s8, s8, s4
 801132c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011330:	edc0 6a01 	vstr	s13, [r0, #4]
 8011334:	ed80 6a00 	vstr	s12, [r0]
 8011338:	ed92 6a01 	vldr	s12, [r2, #4]
 801133c:	9803      	ldr	r0, [sp, #12]
 801133e:	ee77 7a43 	vsub.f32	s15, s14, s6
 8011342:	ee75 5a84 	vadd.f32	s11, s11, s8
 8011346:	ed92 7a00 	vldr	s14, [r2]
 801134a:	ee65 6a87 	vmul.f32	s13, s11, s14
 801134e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011352:	ee65 5a86 	vmul.f32	s11, s11, s12
 8011356:	ee67 7a86 	vmul.f32	s15, s15, s12
 801135a:	ee77 5a65 	vsub.f32	s11, s14, s11
 801135e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011362:	edca 5a01 	vstr	s11, [sl, #4]
 8011366:	edca 7a00 	vstr	s15, [sl]
 801136a:	6872      	ldr	r2, [r6, #4]
 801136c:	4621      	mov	r1, r4
 801136e:	2304      	movs	r3, #4
 8011370:	f000 fcac 	bl	8011ccc <arm_radix8_butterfly_f32>
 8011374:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011376:	6872      	ldr	r2, [r6, #4]
 8011378:	4621      	mov	r1, r4
 801137a:	2304      	movs	r3, #4
 801137c:	f000 fca6 	bl	8011ccc <arm_radix8_butterfly_f32>
 8011380:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011382:	6872      	ldr	r2, [r6, #4]
 8011384:	4621      	mov	r1, r4
 8011386:	2304      	movs	r3, #4
 8011388:	f000 fca0 	bl	8011ccc <arm_radix8_butterfly_f32>
 801138c:	9801      	ldr	r0, [sp, #4]
 801138e:	6872      	ldr	r2, [r6, #4]
 8011390:	4621      	mov	r1, r4
 8011392:	2304      	movs	r3, #4
 8011394:	b00f      	add	sp, #60	@ 0x3c
 8011396:	ecbd 8b0a 	vpop	{d8-d12}
 801139a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801139e:	f000 bc95 	b.w	8011ccc <arm_radix8_butterfly_f32>
 80113a2:	bf00      	nop

080113a4 <arm_cfft_f32>:
 80113a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113a8:	2a01      	cmp	r2, #1
 80113aa:	4606      	mov	r6, r0
 80113ac:	4617      	mov	r7, r2
 80113ae:	460c      	mov	r4, r1
 80113b0:	4698      	mov	r8, r3
 80113b2:	8805      	ldrh	r5, [r0, #0]
 80113b4:	d054      	beq.n	8011460 <arm_cfft_f32+0xbc>
 80113b6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80113ba:	d04c      	beq.n	8011456 <arm_cfft_f32+0xb2>
 80113bc:	d916      	bls.n	80113ec <arm_cfft_f32+0x48>
 80113be:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 80113c2:	d01a      	beq.n	80113fa <arm_cfft_f32+0x56>
 80113c4:	d95c      	bls.n	8011480 <arm_cfft_f32+0xdc>
 80113c6:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 80113ca:	d044      	beq.n	8011456 <arm_cfft_f32+0xb2>
 80113cc:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80113d0:	d105      	bne.n	80113de <arm_cfft_f32+0x3a>
 80113d2:	4620      	mov	r0, r4
 80113d4:	4629      	mov	r1, r5
 80113d6:	6872      	ldr	r2, [r6, #4]
 80113d8:	2301      	movs	r3, #1
 80113da:	f000 fc77 	bl	8011ccc <arm_radix8_butterfly_f32>
 80113de:	f1b8 0f00 	cmp.w	r8, #0
 80113e2:	d111      	bne.n	8011408 <arm_cfft_f32+0x64>
 80113e4:	2f01      	cmp	r7, #1
 80113e6:	d016      	beq.n	8011416 <arm_cfft_f32+0x72>
 80113e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113ec:	2d20      	cmp	r5, #32
 80113ee:	d032      	beq.n	8011456 <arm_cfft_f32+0xb2>
 80113f0:	d94a      	bls.n	8011488 <arm_cfft_f32+0xe4>
 80113f2:	2d40      	cmp	r5, #64	@ 0x40
 80113f4:	d0ed      	beq.n	80113d2 <arm_cfft_f32+0x2e>
 80113f6:	2d80      	cmp	r5, #128	@ 0x80
 80113f8:	d1f1      	bne.n	80113de <arm_cfft_f32+0x3a>
 80113fa:	4630      	mov	r0, r6
 80113fc:	4621      	mov	r1, r4
 80113fe:	f7ff fca1 	bl	8010d44 <arm_cfft_radix8by2_f32>
 8011402:	f1b8 0f00 	cmp.w	r8, #0
 8011406:	d0ed      	beq.n	80113e4 <arm_cfft_f32+0x40>
 8011408:	4620      	mov	r0, r4
 801140a:	89b1      	ldrh	r1, [r6, #12]
 801140c:	68b2      	ldr	r2, [r6, #8]
 801140e:	f7ee fee7 	bl	80001e0 <arm_bitreversal_32>
 8011412:	2f01      	cmp	r7, #1
 8011414:	d1e8      	bne.n	80113e8 <arm_cfft_f32+0x44>
 8011416:	ee07 5a90 	vmov	s15, r5
 801141a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801141e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011422:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8011426:	2d00      	cmp	r5, #0
 8011428:	d0de      	beq.n	80113e8 <arm_cfft_f32+0x44>
 801142a:	f104 0108 	add.w	r1, r4, #8
 801142e:	2300      	movs	r3, #0
 8011430:	3301      	adds	r3, #1
 8011432:	429d      	cmp	r5, r3
 8011434:	f101 0108 	add.w	r1, r1, #8
 8011438:	ed11 7a04 	vldr	s14, [r1, #-16]
 801143c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8011440:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011444:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8011448:	ed01 7a04 	vstr	s14, [r1, #-16]
 801144c:	ed41 7a03 	vstr	s15, [r1, #-12]
 8011450:	d1ee      	bne.n	8011430 <arm_cfft_f32+0x8c>
 8011452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011456:	4630      	mov	r0, r6
 8011458:	4621      	mov	r1, r4
 801145a:	f7ff fd45 	bl	8010ee8 <arm_cfft_radix8by4_f32>
 801145e:	e7be      	b.n	80113de <arm_cfft_f32+0x3a>
 8011460:	b1ad      	cbz	r5, 801148e <arm_cfft_f32+0xea>
 8011462:	f101 030c 	add.w	r3, r1, #12
 8011466:	2200      	movs	r2, #0
 8011468:	ed53 7a02 	vldr	s15, [r3, #-8]
 801146c:	3201      	adds	r2, #1
 801146e:	eef1 7a67 	vneg.f32	s15, s15
 8011472:	4295      	cmp	r5, r2
 8011474:	ed43 7a02 	vstr	s15, [r3, #-8]
 8011478:	f103 0308 	add.w	r3, r3, #8
 801147c:	d1f4      	bne.n	8011468 <arm_cfft_f32+0xc4>
 801147e:	e79a      	b.n	80113b6 <arm_cfft_f32+0x12>
 8011480:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8011484:	d0a5      	beq.n	80113d2 <arm_cfft_f32+0x2e>
 8011486:	e7aa      	b.n	80113de <arm_cfft_f32+0x3a>
 8011488:	2d10      	cmp	r5, #16
 801148a:	d0b6      	beq.n	80113fa <arm_cfft_f32+0x56>
 801148c:	e7a7      	b.n	80113de <arm_cfft_f32+0x3a>
 801148e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8011492:	d894      	bhi.n	80113be <arm_cfft_f32+0x1a>
 8011494:	e7aa      	b.n	80113ec <arm_cfft_f32+0x48>
 8011496:	bf00      	nop

08011498 <arm_fir_init_f32>:
 8011498:	b570      	push	{r4, r5, r6, lr}
 801149a:	9c04      	ldr	r4, [sp, #16]
 801149c:	6082      	str	r2, [r0, #8]
 801149e:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 80114a2:	3c01      	subs	r4, #1
 80114a4:	4605      	mov	r5, r0
 80114a6:	440c      	add	r4, r1
 80114a8:	8001      	strh	r1, [r0, #0]
 80114aa:	461e      	mov	r6, r3
 80114ac:	00a2      	lsls	r2, r4, #2
 80114ae:	4618      	mov	r0, r3
 80114b0:	2100      	movs	r1, #0
 80114b2:	f000 ff3b 	bl	801232c <memset>
 80114b6:	606e      	str	r6, [r5, #4]
 80114b8:	bd70      	pop	{r4, r5, r6, pc}
 80114ba:	bf00      	nop

080114bc <arm_fir_f32>:
 80114bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114c0:	ed2d 8b10 	vpush	{d8-d15}
 80114c4:	b089      	sub	sp, #36	@ 0x24
 80114c6:	4605      	mov	r5, r0
 80114c8:	9003      	str	r0, [sp, #12]
 80114ca:	8800      	ldrh	r0, [r0, #0]
 80114cc:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80114d0:	9304      	str	r3, [sp, #16]
 80114d2:	461e      	mov	r6, r3
 80114d4:	f100 4380 	add.w	r3, r0, #1073741824	@ 0x40000000
 80114d8:	3b01      	subs	r3, #1
 80114da:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 80114de:	08f3      	lsrs	r3, r6, #3
 80114e0:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80114e4:	9001      	str	r0, [sp, #4]
 80114e6:	4625      	mov	r5, r4
 80114e8:	9400      	str	r4, [sp, #0]
 80114ea:	9302      	str	r3, [sp, #8]
 80114ec:	f000 81ee 	beq.w	80118cc <arm_fir_f32+0x410>
 80114f0:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 80114f4:	469e      	mov	lr, r3
 80114f6:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80114fa:	1f1e      	subs	r6, r3, #4
 80114fc:	4604      	mov	r4, r0
 80114fe:	9605      	str	r6, [sp, #20]
 8011500:	eb08 0003 	add.w	r0, r8, r3
 8011504:	f004 0a07 	and.w	sl, r4, #7
 8011508:	4613      	mov	r3, r2
 801150a:	f10c 0420 	add.w	r4, ip, #32
 801150e:	f8cd c018 	str.w	ip, [sp, #24]
 8011512:	4684      	mov	ip, r0
 8011514:	4648      	mov	r0, r9
 8011516:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801151a:	9107      	str	r1, [sp, #28]
 801151c:	f105 0720 	add.w	r7, r5, #32
 8011520:	f101 0620 	add.w	r6, r1, #32
 8011524:	f102 0520 	add.w	r5, r2, #32
 8011528:	4652      	mov	r2, sl
 801152a:	469a      	mov	sl, r3
 801152c:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8011530:	f847 3c20 	str.w	r3, [r7, #-32]
 8011534:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8011538:	f847 3c1c 	str.w	r3, [r7, #-28]
 801153c:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8011540:	f847 3c18 	str.w	r3, [r7, #-24]
 8011544:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8011548:	f847 3c14 	str.w	r3, [r7, #-20]
 801154c:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8011550:	f847 3c10 	str.w	r3, [r7, #-16]
 8011554:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8011558:	f847 3c0c 	str.w	r3, [r7, #-12]
 801155c:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8011560:	f847 3c08 	str.w	r3, [r7, #-8]
 8011564:	eddf 3af1 	vldr	s7, [pc, #964]	@ 801192c <arm_fir_f32+0x470>
 8011568:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801156c:	f847 3c04 	str.w	r3, [r7, #-4]
 8011570:	ed14 3a08 	vldr	s6, [r4, #-32]	@ 0xffffffe0
 8011574:	ed54 2a07 	vldr	s5, [r4, #-28]	@ 0xffffffe4
 8011578:	ed14 2a06 	vldr	s4, [r4, #-24]	@ 0xffffffe8
 801157c:	ed54 1a05 	vldr	s3, [r4, #-20]	@ 0xffffffec
 8011580:	ed14 1a04 	vldr	s2, [r4, #-16]
 8011584:	ed54 0a03 	vldr	s1, [r4, #-12]
 8011588:	ed14 0a02 	vldr	s0, [r4, #-8]
 801158c:	1f21      	subs	r1, r4, #4
 801158e:	eef0 8a63 	vmov.f32	s17, s7
 8011592:	eef0 9a63 	vmov.f32	s19, s7
 8011596:	eef0 aa63 	vmov.f32	s21, s7
 801159a:	eef0 ba63 	vmov.f32	s23, s7
 801159e:	eeb0 ca63 	vmov.f32	s24, s7
 80115a2:	eef0 ca63 	vmov.f32	s25, s7
 80115a6:	eeb0 da63 	vmov.f32	s26, s7
 80115aa:	2800      	cmp	r0, #0
 80115ac:	f000 81e8 	beq.w	8011980 <arm_fir_f32+0x4c4>
 80115b0:	f108 0120 	add.w	r1, r8, #32
 80115b4:	f104 031c 	add.w	r3, r4, #28
 80115b8:	4683      	mov	fp, r0
 80115ba:	ed13 8a08 	vldr	s16, [r3, #-32]	@ 0xffffffe0
 80115be:	ed11 4a08 	vldr	s8, [r1, #-32]	@ 0xffffffe0
 80115c2:	ed51 4a07 	vldr	s9, [r1, #-28]	@ 0xffffffe4
 80115c6:	ed11 5a06 	vldr	s10, [r1, #-24]	@ 0xffffffe8
 80115ca:	ed51 5a05 	vldr	s11, [r1, #-20]	@ 0xffffffec
 80115ce:	ed11 6a04 	vldr	s12, [r1, #-16]
 80115d2:	ed51 6a03 	vldr	s13, [r1, #-12]
 80115d6:	ed11 7a02 	vldr	s14, [r1, #-8]
 80115da:	ed51 7a01 	vldr	s15, [r1, #-4]
 80115de:	ee23 fa04 	vmul.f32	s30, s6, s8
 80115e2:	ee62 ea84 	vmul.f32	s29, s5, s8
 80115e6:	ed13 3a07 	vldr	s6, [r3, #-28]	@ 0xffffffe4
 80115ea:	ee22 ea04 	vmul.f32	s28, s4, s8
 80115ee:	ee61 da84 	vmul.f32	s27, s3, s8
 80115f2:	ee21 ba04 	vmul.f32	s22, s2, s8
 80115f6:	ee20 aa84 	vmul.f32	s20, s1, s8
 80115fa:	ee20 9a04 	vmul.f32	s18, s0, s8
 80115fe:	ee28 4a04 	vmul.f32	s8, s16, s8
 8011602:	ee62 fa24 	vmul.f32	s31, s4, s9
 8011606:	ee3c ca0e 	vadd.f32	s24, s24, s28
 801160a:	ee7b baad 	vadd.f32	s23, s23, s27
 801160e:	ee21 eaa4 	vmul.f32	s28, s3, s9
 8011612:	ee61 da24 	vmul.f32	s27, s2, s9
 8011616:	ee7a aa8b 	vadd.f32	s21, s21, s22
 801161a:	ee79 9a8a 	vadd.f32	s19, s19, s20
 801161e:	ee20 baa4 	vmul.f32	s22, s1, s9
 8011622:	ee20 aa24 	vmul.f32	s20, s0, s9
 8011626:	ee3d da0f 	vadd.f32	s26, s26, s30
 801162a:	ee7c caae 	vadd.f32	s25, s25, s29
 801162e:	ee22 faa4 	vmul.f32	s30, s5, s9
 8011632:	ee78 8a89 	vadd.f32	s17, s17, s18
 8011636:	ed53 2a06 	vldr	s5, [r3, #-24]	@ 0xffffffe8
 801163a:	ee28 9a24 	vmul.f32	s18, s16, s9
 801163e:	ee73 3a84 	vadd.f32	s7, s7, s8
 8011642:	ee63 4a24 	vmul.f32	s9, s6, s9
 8011646:	ee22 4a05 	vmul.f32	s8, s4, s10
 801164a:	ee61 ea05 	vmul.f32	s29, s2, s10
 801164e:	ed13 2a05 	vldr	s4, [r3, #-20]	@ 0xffffffec
 8011652:	ee3d da0f 	vadd.f32	s26, s26, s30
 8011656:	ee7c caaf 	vadd.f32	s25, s25, s31
 801165a:	ee20 fa85 	vmul.f32	s30, s1, s10
 801165e:	ee61 fa85 	vmul.f32	s31, s3, s10
 8011662:	ee3c ea0e 	vadd.f32	s28, s24, s28
 8011666:	ee7b daad 	vadd.f32	s27, s23, s27
 801166a:	ee3a ba8b 	vadd.f32	s22, s21, s22
 801166e:	ee60 ba05 	vmul.f32	s23, s0, s10
 8011672:	ee68 aa05 	vmul.f32	s21, s16, s10
 8011676:	ee39 aa8a 	vadd.f32	s20, s19, s20
 801167a:	ee78 8a89 	vadd.f32	s17, s17, s18
 801167e:	ee73 3aa4 	vadd.f32	s7, s7, s9
 8011682:	ee63 4a05 	vmul.f32	s9, s6, s10
 8011686:	ee22 5a85 	vmul.f32	s10, s5, s10
 801168a:	ee21 9a25 	vmul.f32	s18, s2, s11
 801168e:	ee20 ca25 	vmul.f32	s24, s0, s11
 8011692:	ee3d da04 	vadd.f32	s26, s26, s8
 8011696:	ee7c caaf 	vadd.f32	s25, s25, s31
 801169a:	ee21 4aa5 	vmul.f32	s8, s3, s11
 801169e:	ee3e ea2e 	vadd.f32	s28, s28, s29
 80116a2:	ed53 1a04 	vldr	s3, [r3, #-16]
 80116a6:	ee60 eaa5 	vmul.f32	s29, s1, s11
 80116aa:	ee7d da8f 	vadd.f32	s27, s27, s30
 80116ae:	ee3b ba2b 	vadd.f32	s22, s22, s23
 80116b2:	ee3a aa2a 	vadd.f32	s20, s20, s21
 80116b6:	ee68 ba25 	vmul.f32	s23, s16, s11
 80116ba:	ee63 aa25 	vmul.f32	s21, s6, s11
 80116be:	ee78 8aa4 	vadd.f32	s17, s17, s9
 80116c2:	ee73 3a85 	vadd.f32	s7, s7, s10
 80116c6:	ee22 5aa5 	vmul.f32	s10, s5, s11
 80116ca:	ee62 5a25 	vmul.f32	s11, s4, s11
 80116ce:	ee61 4a06 	vmul.f32	s9, s2, s12
 80116d2:	ee60 9a86 	vmul.f32	s19, s1, s12
 80116d6:	ee60 fa06 	vmul.f32	s31, s0, s12
 80116da:	ed13 1a03 	vldr	s2, [r3, #-12]
 80116de:	ee23 fa06 	vmul.f32	s30, s6, s12
 80116e2:	ee3d da04 	vadd.f32	s26, s26, s8
 80116e6:	ee7c ca89 	vadd.f32	s25, s25, s18
 80116ea:	ee3e ea2e 	vadd.f32	s28, s28, s29
 80116ee:	ee28 9a06 	vmul.f32	s18, s16, s12
 80116f2:	ee7d da8c 	vadd.f32	s27, s27, s24
 80116f6:	ee3b ba2b 	vadd.f32	s22, s22, s23
 80116fa:	ee22 ca86 	vmul.f32	s24, s5, s12
 80116fe:	ee3a aa2a 	vadd.f32	s20, s20, s21
 8011702:	ee78 8a85 	vadd.f32	s17, s17, s10
 8011706:	ee73 3aa5 	vadd.f32	s7, s7, s11
 801170a:	ee62 5a06 	vmul.f32	s11, s4, s12
 801170e:	ee21 6a86 	vmul.f32	s12, s3, s12
 8011712:	ee20 4a26 	vmul.f32	s8, s0, s13
 8011716:	ee63 ea26 	vmul.f32	s29, s6, s13
 801171a:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801171e:	ee22 5a26 	vmul.f32	s10, s4, s13
 8011722:	ee3d da24 	vadd.f32	s26, s26, s9
 8011726:	ee7c caa9 	vadd.f32	s25, s25, s19
 801172a:	ee60 4aa6 	vmul.f32	s9, s1, s13
 801172e:	ee3e ea2f 	vadd.f32	s28, s28, s31
 8011732:	ed53 0a02 	vldr	s1, [r3, #-8]
 8011736:	ee68 fa26 	vmul.f32	s31, s16, s13
 801173a:	ee7d da89 	vadd.f32	s27, s27, s18
 801173e:	ee3b ba0f 	vadd.f32	s22, s22, s30
 8011742:	ee78 8aa5 	vadd.f32	s17, s17, s11
 8011746:	ee22 faa6 	vmul.f32	s30, s5, s13
 801174a:	ee73 3a86 	vadd.f32	s7, s7, s12
 801174e:	ee21 6aa6 	vmul.f32	s12, s3, s13
 8011752:	ee61 6a26 	vmul.f32	s13, s2, s13
 8011756:	ee60 aa07 	vmul.f32	s21, s0, s14
 801175a:	ee28 ca07 	vmul.f32	s24, s16, s14
 801175e:	ee63 ba07 	vmul.f32	s23, s6, s14
 8011762:	ee7a 9a05 	vadd.f32	s19, s20, s10
 8011766:	ee78 8a86 	vadd.f32	s17, s17, s12
 801176a:	ee3d da24 	vadd.f32	s26, s26, s9
 801176e:	ee7c ca84 	vadd.f32	s25, s25, s8
 8011772:	ee7d daae 	vadd.f32	s27, s27, s29
 8011776:	ee22 9a07 	vmul.f32	s18, s4, s14
 801177a:	ee62 ea87 	vmul.f32	s29, s5, s14
 801177e:	ee61 5a87 	vmul.f32	s11, s3, s14
 8011782:	ee73 3aa6 	vadd.f32	s7, s7, s13
 8011786:	ed13 0a01 	vldr	s0, [r3, #-4]
 801178a:	ee61 6a07 	vmul.f32	s13, s2, s14
 801178e:	ee3e ea2f 	vadd.f32	s28, s28, s31
 8011792:	ee3b ba0f 	vadd.f32	s22, s22, s30
 8011796:	ee20 7a87 	vmul.f32	s14, s1, s14
 801179a:	ee68 4a27 	vmul.f32	s9, s16, s15
 801179e:	ee3d da2a 	vadd.f32	s26, s26, s21
 80117a2:	ee7c ca8c 	vadd.f32	s25, s25, s24
 80117a6:	ee23 8a27 	vmul.f32	s16, s6, s15
 80117aa:	ee3e ea2b 	vadd.f32	s28, s28, s23
 80117ae:	ee22 4aa7 	vmul.f32	s8, s5, s15
 80117b2:	ee22 aa27 	vmul.f32	s20, s4, s15
 80117b6:	ee21 5aa7 	vmul.f32	s10, s3, s15
 80117ba:	ee21 6a27 	vmul.f32	s12, s2, s15
 80117be:	ee78 6aa6 	vadd.f32	s13, s17, s13
 80117c2:	ee7d daae 	vadd.f32	s27, s27, s29
 80117c6:	ee60 8aa7 	vmul.f32	s17, s1, s15
 80117ca:	ee3b ba09 	vadd.f32	s22, s22, s18
 80117ce:	ee79 9aa5 	vadd.f32	s19, s19, s11
 80117d2:	ee73 3a87 	vadd.f32	s7, s7, s14
 80117d6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80117da:	f1bb 0b01 	subs.w	fp, fp, #1
 80117de:	f101 0120 	add.w	r1, r1, #32
 80117e2:	ee3d da24 	vadd.f32	s26, s26, s9
 80117e6:	ee7c ca88 	vadd.f32	s25, s25, s16
 80117ea:	ee3e ca04 	vadd.f32	s24, s28, s8
 80117ee:	ee7d ba8a 	vadd.f32	s23, s27, s20
 80117f2:	ee7b aa05 	vadd.f32	s21, s22, s10
 80117f6:	ee79 9a86 	vadd.f32	s19, s19, s12
 80117fa:	ee76 8aa8 	vadd.f32	s17, s13, s17
 80117fe:	ee73 3aa7 	vadd.f32	s7, s7, s15
 8011802:	f103 0320 	add.w	r3, r3, #32
 8011806:	f47f aed8 	bne.w	80115ba <arm_fir_f32+0xfe>
 801180a:	eb09 0104 	add.w	r1, r9, r4
 801180e:	46e3      	mov	fp, ip
 8011810:	b3a2      	cbz	r2, 801187c <arm_fir_f32+0x3c0>
 8011812:	4613      	mov	r3, r2
 8011814:	ecbb 6a01 	vldmia	fp!, {s12}
 8011818:	ecf1 7a01 	vldmia	r1!, {s15}
 801181c:	ee23 3a06 	vmul.f32	s6, s6, s12
 8011820:	ee22 4a86 	vmul.f32	s8, s5, s12
 8011824:	ee62 4a06 	vmul.f32	s9, s4, s12
 8011828:	ee21 5a86 	vmul.f32	s10, s3, s12
 801182c:	ee61 5a06 	vmul.f32	s11, s2, s12
 8011830:	ee60 6a86 	vmul.f32	s13, s1, s12
 8011834:	ee20 7a06 	vmul.f32	s14, s0, s12
 8011838:	ee27 6a86 	vmul.f32	s12, s15, s12
 801183c:	3b01      	subs	r3, #1
 801183e:	ee3d da03 	vadd.f32	s26, s26, s6
 8011842:	ee7c ca84 	vadd.f32	s25, s25, s8
 8011846:	eeb0 3a62 	vmov.f32	s6, s5
 801184a:	ee3c ca24 	vadd.f32	s24, s24, s9
 801184e:	eef0 2a42 	vmov.f32	s5, s4
 8011852:	ee7b ba85 	vadd.f32	s23, s23, s10
 8011856:	eeb0 2a61 	vmov.f32	s4, s3
 801185a:	ee7a aaa5 	vadd.f32	s21, s21, s11
 801185e:	eef0 1a41 	vmov.f32	s3, s2
 8011862:	ee79 9aa6 	vadd.f32	s19, s19, s13
 8011866:	eeb0 1a60 	vmov.f32	s2, s1
 801186a:	ee78 8a87 	vadd.f32	s17, s17, s14
 801186e:	eef0 0a40 	vmov.f32	s1, s0
 8011872:	ee73 3a86 	vadd.f32	s7, s7, s12
 8011876:	eeb0 0a67 	vmov.f32	s0, s15
 801187a:	d1cb      	bne.n	8011814 <arm_fir_f32+0x358>
 801187c:	f1be 0e01 	subs.w	lr, lr, #1
 8011880:	ed05 da08 	vstr	s26, [r5, #-32]	@ 0xffffffe0
 8011884:	ed45 ca07 	vstr	s25, [r5, #-28]	@ 0xffffffe4
 8011888:	ed05 ca06 	vstr	s24, [r5, #-24]	@ 0xffffffe8
 801188c:	ed45 ba05 	vstr	s23, [r5, #-20]	@ 0xffffffec
 8011890:	ed45 aa04 	vstr	s21, [r5, #-16]
 8011894:	ed45 9a03 	vstr	s19, [r5, #-12]
 8011898:	ed45 8a02 	vstr	s17, [r5, #-8]
 801189c:	ed45 3a01 	vstr	s7, [r5, #-4]
 80118a0:	f107 0720 	add.w	r7, r7, #32
 80118a4:	f106 0620 	add.w	r6, r6, #32
 80118a8:	f104 0420 	add.w	r4, r4, #32
 80118ac:	f105 0520 	add.w	r5, r5, #32
 80118b0:	f47f ae3c 	bne.w	801152c <arm_fir_f32+0x70>
 80118b4:	9b02      	ldr	r3, [sp, #8]
 80118b6:	9800      	ldr	r0, [sp, #0]
 80118b8:	f8dd c018 	ldr.w	ip, [sp, #24]
 80118bc:	9907      	ldr	r1, [sp, #28]
 80118be:	015b      	lsls	r3, r3, #5
 80118c0:	4652      	mov	r2, sl
 80118c2:	4418      	add	r0, r3
 80118c4:	9000      	str	r0, [sp, #0]
 80118c6:	4419      	add	r1, r3
 80118c8:	449c      	add	ip, r3
 80118ca:	441a      	add	r2, r3
 80118cc:	9b04      	ldr	r3, [sp, #16]
 80118ce:	f013 0e07 	ands.w	lr, r3, #7
 80118d2:	d01f      	beq.n	8011914 <arm_fir_f32+0x458>
 80118d4:	9f00      	ldr	r7, [sp, #0]
 80118d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80118da:	4676      	mov	r6, lr
 80118dc:	4665      	mov	r5, ip
 80118de:	f851 3b04 	ldr.w	r3, [r1], #4
 80118e2:	eddf 6a12 	vldr	s13, [pc, #72]	@ 801192c <arm_fir_f32+0x470>
 80118e6:	f847 3b04 	str.w	r3, [r7], #4
 80118ea:	4644      	mov	r4, r8
 80118ec:	464b      	mov	r3, r9
 80118ee:	4628      	mov	r0, r5
 80118f0:	ecb0 7a01 	vldmia	r0!, {s14}
 80118f4:	ecf4 7a01 	vldmia	r4!, {s15}
 80118f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80118fc:	3b01      	subs	r3, #1
 80118fe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011902:	d1f5      	bne.n	80118f0 <arm_fir_f32+0x434>
 8011904:	3e01      	subs	r6, #1
 8011906:	ece2 6a01 	vstmia	r2!, {s13}
 801190a:	f105 0504 	add.w	r5, r5, #4
 801190e:	d1e6      	bne.n	80118de <arm_fir_f32+0x422>
 8011910:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 8011914:	9b01      	ldr	r3, [sp, #4]
 8011916:	1e59      	subs	r1, r3, #1
 8011918:	9b03      	ldr	r3, [sp, #12]
 801191a:	088e      	lsrs	r6, r1, #2
 801191c:	685c      	ldr	r4, [r3, #4]
 801191e:	d020      	beq.n	8011962 <arm_fir_f32+0x4a6>
 8011920:	f104 0210 	add.w	r2, r4, #16
 8011924:	f10c 0310 	add.w	r3, ip, #16
 8011928:	4630      	mov	r0, r6
 801192a:	e001      	b.n	8011930 <arm_fir_f32+0x474>
 801192c:	00000000 	.word	0x00000000
 8011930:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8011934:	f842 5c10 	str.w	r5, [r2, #-16]
 8011938:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 801193c:	f842 5c0c 	str.w	r5, [r2, #-12]
 8011940:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8011944:	f842 5c08 	str.w	r5, [r2, #-8]
 8011948:	f853 5c04 	ldr.w	r5, [r3, #-4]
 801194c:	f842 5c04 	str.w	r5, [r2, #-4]
 8011950:	3801      	subs	r0, #1
 8011952:	f103 0310 	add.w	r3, r3, #16
 8011956:	f102 0210 	add.w	r2, r2, #16
 801195a:	d1e9      	bne.n	8011930 <arm_fir_f32+0x474>
 801195c:	0133      	lsls	r3, r6, #4
 801195e:	441c      	add	r4, r3
 8011960:	449c      	add	ip, r3
 8011962:	f011 0303 	ands.w	r3, r1, #3
 8011966:	d006      	beq.n	8011976 <arm_fir_f32+0x4ba>
 8011968:	4622      	mov	r2, r4
 801196a:	f85c 1b04 	ldr.w	r1, [ip], #4
 801196e:	f842 1b04 	str.w	r1, [r2], #4
 8011972:	3b01      	subs	r3, #1
 8011974:	d1f9      	bne.n	801196a <arm_fir_f32+0x4ae>
 8011976:	b009      	add	sp, #36	@ 0x24
 8011978:	ecbd 8b10 	vpop	{d8-d15}
 801197c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011980:	46c3      	mov	fp, r8
 8011982:	e745      	b.n	8011810 <arm_fir_f32+0x354>

08011984 <arm_cmplx_mag_f32>:
 8011984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011988:	ea5f 0892 	movs.w	r8, r2, lsr #2
 801198c:	b084      	sub	sp, #16
 801198e:	d07f      	beq.n	8011a90 <arm_cmplx_mag_f32+0x10c>
 8011990:	2700      	movs	r7, #0
 8011992:	f100 0420 	add.w	r4, r0, #32
 8011996:	f101 0510 	add.w	r5, r1, #16
 801199a:	4646      	mov	r6, r8
 801199c:	e05a      	b.n	8011a54 <arm_cmplx_mag_f32+0xd0>
 801199e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80119a2:	eeb4 0a40 	vcmp.f32	s0, s0
 80119a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119aa:	f040 80a4 	bne.w	8011af6 <arm_cmplx_mag_f32+0x172>
 80119ae:	ed05 0a04 	vstr	s0, [r5, #-16]
 80119b2:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 80119b6:	ed14 0a05 	vldr	s0, [r4, #-20]	@ 0xffffffec
 80119ba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80119be:	ee20 0a00 	vmul.f32	s0, s0, s0
 80119c2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80119c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80119ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119ce:	f2c0 808f 	blt.w	8011af0 <arm_cmplx_mag_f32+0x16c>
 80119d2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80119d6:	eeb4 0a40 	vcmp.f32	s0, s0
 80119da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119de:	f040 80af 	bne.w	8011b40 <arm_cmplx_mag_f32+0x1bc>
 80119e2:	ed05 0a03 	vstr	s0, [r5, #-12]
 80119e6:	ed54 7a04 	vldr	s15, [r4, #-16]
 80119ea:	ed14 0a03 	vldr	s0, [r4, #-12]
 80119ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80119f2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80119f6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80119fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80119fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a02:	db72      	blt.n	8011aea <arm_cmplx_mag_f32+0x166>
 8011a04:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8011a08:	eeb4 0a40 	vcmp.f32	s0, s0
 8011a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a10:	f040 808c 	bne.w	8011b2c <arm_cmplx_mag_f32+0x1a8>
 8011a14:	ed05 0a02 	vstr	s0, [r5, #-8]
 8011a18:	ed54 7a02 	vldr	s15, [r4, #-8]
 8011a1c:	ed14 0a01 	vldr	s0, [r4, #-4]
 8011a20:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011a24:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011a28:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011a2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a34:	db20      	blt.n	8011a78 <arm_cmplx_mag_f32+0xf4>
 8011a36:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8011a3a:	eeb4 0a40 	vcmp.f32	s0, s0
 8011a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a42:	d169      	bne.n	8011b18 <arm_cmplx_mag_f32+0x194>
 8011a44:	3e01      	subs	r6, #1
 8011a46:	ed05 0a01 	vstr	s0, [r5, #-4]
 8011a4a:	f104 0420 	add.w	r4, r4, #32
 8011a4e:	f105 0510 	add.w	r5, r5, #16
 8011a52:	d019      	beq.n	8011a88 <arm_cmplx_mag_f32+0x104>
 8011a54:	ed54 7a08 	vldr	s15, [r4, #-32]	@ 0xffffffe0
 8011a58:	ed14 0a07 	vldr	s0, [r4, #-28]	@ 0xffffffe4
 8011a5c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011a60:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011a64:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011a68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a70:	da95      	bge.n	801199e <arm_cmplx_mag_f32+0x1a>
 8011a72:	f845 7c10 	str.w	r7, [r5, #-16]
 8011a76:	e79c      	b.n	80119b2 <arm_cmplx_mag_f32+0x2e>
 8011a78:	3e01      	subs	r6, #1
 8011a7a:	f845 7c04 	str.w	r7, [r5, #-4]
 8011a7e:	f104 0420 	add.w	r4, r4, #32
 8011a82:	f105 0510 	add.w	r5, r5, #16
 8011a86:	d1e5      	bne.n	8011a54 <arm_cmplx_mag_f32+0xd0>
 8011a88:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8011a8c:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8011a90:	f012 0503 	ands.w	r5, r2, #3
 8011a94:	d026      	beq.n	8011ae4 <arm_cmplx_mag_f32+0x160>
 8011a96:	2600      	movs	r6, #0
 8011a98:	f100 0408 	add.w	r4, r0, #8
 8011a9c:	e00c      	b.n	8011ab8 <arm_cmplx_mag_f32+0x134>
 8011a9e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8011aa2:	eeb4 0a40 	vcmp.f32	s0, s0
 8011aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aaa:	d12e      	bne.n	8011b0a <arm_cmplx_mag_f32+0x186>
 8011aac:	3d01      	subs	r5, #1
 8011aae:	ed01 0a01 	vstr	s0, [r1, #-4]
 8011ab2:	f104 0408 	add.w	r4, r4, #8
 8011ab6:	d015      	beq.n	8011ae4 <arm_cmplx_mag_f32+0x160>
 8011ab8:	ed54 7a02 	vldr	s15, [r4, #-8]
 8011abc:	ed14 0a01 	vldr	s0, [r4, #-4]
 8011ac0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011ac4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011ac8:	3104      	adds	r1, #4
 8011aca:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011ace:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ad6:	dae2      	bge.n	8011a9e <arm_cmplx_mag_f32+0x11a>
 8011ad8:	3d01      	subs	r5, #1
 8011ada:	f841 6c04 	str.w	r6, [r1, #-4]
 8011ade:	f104 0408 	add.w	r4, r4, #8
 8011ae2:	d1e9      	bne.n	8011ab8 <arm_cmplx_mag_f32+0x134>
 8011ae4:	b004      	add	sp, #16
 8011ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011aea:	f845 7c08 	str.w	r7, [r5, #-8]
 8011aee:	e793      	b.n	8011a18 <arm_cmplx_mag_f32+0x94>
 8011af0:	f845 7c0c 	str.w	r7, [r5, #-12]
 8011af4:	e777      	b.n	80119e6 <arm_cmplx_mag_f32+0x62>
 8011af6:	eeb0 0a67 	vmov.f32	s0, s15
 8011afa:	9203      	str	r2, [sp, #12]
 8011afc:	9102      	str	r1, [sp, #8]
 8011afe:	9001      	str	r0, [sp, #4]
 8011b00:	f001 f87a 	bl	8012bf8 <sqrtf>
 8011b04:	a801      	add	r0, sp, #4
 8011b06:	c807      	ldmia	r0, {r0, r1, r2}
 8011b08:	e751      	b.n	80119ae <arm_cmplx_mag_f32+0x2a>
 8011b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8011b0e:	9101      	str	r1, [sp, #4]
 8011b10:	f001 f872 	bl	8012bf8 <sqrtf>
 8011b14:	9901      	ldr	r1, [sp, #4]
 8011b16:	e7c9      	b.n	8011aac <arm_cmplx_mag_f32+0x128>
 8011b18:	eeb0 0a67 	vmov.f32	s0, s15
 8011b1c:	9203      	str	r2, [sp, #12]
 8011b1e:	9102      	str	r1, [sp, #8]
 8011b20:	9001      	str	r0, [sp, #4]
 8011b22:	f001 f869 	bl	8012bf8 <sqrtf>
 8011b26:	a801      	add	r0, sp, #4
 8011b28:	c807      	ldmia	r0, {r0, r1, r2}
 8011b2a:	e78b      	b.n	8011a44 <arm_cmplx_mag_f32+0xc0>
 8011b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8011b30:	9203      	str	r2, [sp, #12]
 8011b32:	9102      	str	r1, [sp, #8]
 8011b34:	9001      	str	r0, [sp, #4]
 8011b36:	f001 f85f 	bl	8012bf8 <sqrtf>
 8011b3a:	a801      	add	r0, sp, #4
 8011b3c:	c807      	ldmia	r0, {r0, r1, r2}
 8011b3e:	e769      	b.n	8011a14 <arm_cmplx_mag_f32+0x90>
 8011b40:	eeb0 0a67 	vmov.f32	s0, s15
 8011b44:	9203      	str	r2, [sp, #12]
 8011b46:	9102      	str	r1, [sp, #8]
 8011b48:	9001      	str	r0, [sp, #4]
 8011b4a:	f001 f855 	bl	8012bf8 <sqrtf>
 8011b4e:	a801      	add	r0, sp, #4
 8011b50:	c807      	ldmia	r0, {r0, r1, r2}
 8011b52:	e746      	b.n	80119e2 <arm_cmplx_mag_f32+0x5e>

08011b54 <arm_cos_f32>:
 8011b54:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8011bc8 <arm_cos_f32+0x74>
 8011b58:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011b5c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8011b60:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011b64:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b6c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011b70:	d504      	bpl.n	8011b7c <arm_cos_f32+0x28>
 8011b72:	ee17 3a90 	vmov	r3, s15
 8011b76:	3b01      	subs	r3, #1
 8011b78:	ee07 3a90 	vmov	s15, r3
 8011b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011b80:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8011bcc <arm_cos_f32+0x78>
 8011b84:	4a12      	ldr	r2, [pc, #72]	@ (8011bd0 <arm_cos_f32+0x7c>)
 8011b86:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011b8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011b8e:	ee20 0a26 	vmul.f32	s0, s0, s13
 8011b92:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8011b96:	ee17 3a90 	vmov	r3, s15
 8011b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b9e:	ee07 3a90 	vmov	s15, r3
 8011ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ba6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8011baa:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011bae:	edd1 6a01 	vldr	s13, [r1, #4]
 8011bb2:	ed91 0a00 	vldr	s0, [r1]
 8011bb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011bba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011bbe:	ee27 0a00 	vmul.f32	s0, s14, s0
 8011bc2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011bc6:	4770      	bx	lr
 8011bc8:	3e22f983 	.word	0x3e22f983
 8011bcc:	44000000 	.word	0x44000000
 8011bd0:	08024884 	.word	0x08024884

08011bd4 <arm_scale_f32>:
 8011bd4:	b470      	push	{r4, r5, r6}
 8011bd6:	0896      	lsrs	r6, r2, #2
 8011bd8:	d025      	beq.n	8011c26 <arm_scale_f32+0x52>
 8011bda:	f100 0410 	add.w	r4, r0, #16
 8011bde:	f101 0310 	add.w	r3, r1, #16
 8011be2:	4635      	mov	r5, r6
 8011be4:	ed14 6a04 	vldr	s12, [r4, #-16]
 8011be8:	ed54 6a03 	vldr	s13, [r4, #-12]
 8011bec:	ed14 7a02 	vldr	s14, [r4, #-8]
 8011bf0:	ed54 7a01 	vldr	s15, [r4, #-4]
 8011bf4:	ee26 6a00 	vmul.f32	s12, s12, s0
 8011bf8:	ee66 6a80 	vmul.f32	s13, s13, s0
 8011bfc:	ee27 7a00 	vmul.f32	s14, s14, s0
 8011c00:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011c04:	3d01      	subs	r5, #1
 8011c06:	ed03 6a04 	vstr	s12, [r3, #-16]
 8011c0a:	ed43 6a03 	vstr	s13, [r3, #-12]
 8011c0e:	ed03 7a02 	vstr	s14, [r3, #-8]
 8011c12:	ed43 7a01 	vstr	s15, [r3, #-4]
 8011c16:	f104 0410 	add.w	r4, r4, #16
 8011c1a:	f103 0310 	add.w	r3, r3, #16
 8011c1e:	d1e1      	bne.n	8011be4 <arm_scale_f32+0x10>
 8011c20:	0136      	lsls	r6, r6, #4
 8011c22:	4430      	add	r0, r6
 8011c24:	4431      	add	r1, r6
 8011c26:	f012 0203 	ands.w	r2, r2, #3
 8011c2a:	d007      	beq.n	8011c3c <arm_scale_f32+0x68>
 8011c2c:	ecf0 7a01 	vldmia	r0!, {s15}
 8011c30:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011c34:	3a01      	subs	r2, #1
 8011c36:	ece1 7a01 	vstmia	r1!, {s15}
 8011c3a:	d1f7      	bne.n	8011c2c <arm_scale_f32+0x58>
 8011c3c:	bc70      	pop	{r4, r5, r6}
 8011c3e:	4770      	bx	lr

08011c40 <arm_add_f32>:
 8011c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c42:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8011c46:	d033      	beq.n	8011cb0 <arm_add_f32+0x70>
 8011c48:	f100 0610 	add.w	r6, r0, #16
 8011c4c:	f101 0510 	add.w	r5, r1, #16
 8011c50:	f102 0410 	add.w	r4, r2, #16
 8011c54:	4677      	mov	r7, lr
 8011c56:	ed16 6a03 	vldr	s12, [r6, #-12]
 8011c5a:	ed15 4a03 	vldr	s8, [r5, #-12]
 8011c5e:	ed56 6a02 	vldr	s13, [r6, #-8]
 8011c62:	ed55 4a02 	vldr	s9, [r5, #-8]
 8011c66:	ed16 7a01 	vldr	s14, [r6, #-4]
 8011c6a:	ed15 5a01 	vldr	s10, [r5, #-4]
 8011c6e:	ed56 7a04 	vldr	s15, [r6, #-16]
 8011c72:	ed55 5a04 	vldr	s11, [r5, #-16]
 8011c76:	ee36 6a04 	vadd.f32	s12, s12, s8
 8011c7a:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8011c7e:	ee37 7a05 	vadd.f32	s14, s14, s10
 8011c82:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8011c86:	3f01      	subs	r7, #1
 8011c88:	ed04 6a03 	vstr	s12, [r4, #-12]
 8011c8c:	ed44 6a02 	vstr	s13, [r4, #-8]
 8011c90:	ed04 7a01 	vstr	s14, [r4, #-4]
 8011c94:	ed44 7a04 	vstr	s15, [r4, #-16]
 8011c98:	f106 0610 	add.w	r6, r6, #16
 8011c9c:	f105 0510 	add.w	r5, r5, #16
 8011ca0:	f104 0410 	add.w	r4, r4, #16
 8011ca4:	d1d7      	bne.n	8011c56 <arm_add_f32+0x16>
 8011ca6:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8011caa:	4420      	add	r0, r4
 8011cac:	4421      	add	r1, r4
 8011cae:	4422      	add	r2, r4
 8011cb0:	f013 0303 	ands.w	r3, r3, #3
 8011cb4:	d009      	beq.n	8011cca <arm_add_f32+0x8a>
 8011cb6:	ecf0 7a01 	vldmia	r0!, {s15}
 8011cba:	ecb1 7a01 	vldmia	r1!, {s14}
 8011cbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011cc2:	3b01      	subs	r3, #1
 8011cc4:	ece2 7a01 	vstmia	r2!, {s15}
 8011cc8:	d1f5      	bne.n	8011cb6 <arm_add_f32+0x76>
 8011cca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011ccc <arm_radix8_butterfly_f32>:
 8011ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cd0:	ed2d 8b10 	vpush	{d8-d15}
 8011cd4:	b09d      	sub	sp, #116	@ 0x74
 8011cd6:	461c      	mov	r4, r3
 8011cd8:	ed9f bac8 	vldr	s22, [pc, #800]	@ 8011ffc <arm_radix8_butterfly_f32+0x330>
 8011cdc:	921a      	str	r2, [sp, #104]	@ 0x68
 8011cde:	1d03      	adds	r3, r0, #4
 8011ce0:	4682      	mov	sl, r0
 8011ce2:	4689      	mov	r9, r1
 8011ce4:	468b      	mov	fp, r1
 8011ce6:	931b      	str	r3, [sp, #108]	@ 0x6c
 8011ce8:	9400      	str	r4, [sp, #0]
 8011cea:	469e      	mov	lr, r3
 8011cec:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8011cf0:	005a      	lsls	r2, r3, #1
 8011cf2:	18d6      	adds	r6, r2, r3
 8011cf4:	18f5      	adds	r5, r6, r3
 8011cf6:	9203      	str	r2, [sp, #12]
 8011cf8:	195a      	adds	r2, r3, r5
 8011cfa:	18d0      	adds	r0, r2, r3
 8011cfc:	00df      	lsls	r7, r3, #3
 8011cfe:	1819      	adds	r1, r3, r0
 8011d00:	463c      	mov	r4, r7
 8011d02:	9701      	str	r7, [sp, #4]
 8011d04:	4457      	add	r7, sl
 8011d06:	930c      	str	r3, [sp, #48]	@ 0x30
 8011d08:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8011d0c:	011b      	lsls	r3, r3, #4
 8011d0e:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8011d12:	eb07 0c04 	add.w	ip, r7, r4
 8011d16:	9c00      	ldr	r4, [sp, #0]
 8011d18:	9302      	str	r3, [sp, #8]
 8011d1a:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8011d1e:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8011d22:	3204      	adds	r2, #4
 8011d24:	3104      	adds	r1, #4
 8011d26:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8011d2a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011d2e:	f04f 0800 	mov.w	r8, #0
 8011d32:	eddc 7a00 	vldr	s15, [ip]
 8011d36:	edd7 6a00 	vldr	s13, [r7]
 8011d3a:	edd6 3a00 	vldr	s7, [r6]
 8011d3e:	ed5e aa01 	vldr	s21, [lr, #-4]
 8011d42:	edd5 4a00 	vldr	s9, [r5]
 8011d46:	ed90 2a00 	vldr	s4, [r0]
 8011d4a:	ed12 7a01 	vldr	s14, [r2, #-4]
 8011d4e:	ed51 0a01 	vldr	s1, [r1, #-4]
 8011d52:	ee77 8a82 	vadd.f32	s17, s15, s4
 8011d56:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8011d5a:	ee76 1a87 	vadd.f32	s3, s13, s14
 8011d5e:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8011d62:	ee31 6a84 	vadd.f32	s12, s3, s8
 8011d66:	ee33 5a28 	vadd.f32	s10, s6, s17
 8011d6a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8011d6e:	ee75 6a06 	vadd.f32	s13, s10, s12
 8011d72:	ee35 5a46 	vsub.f32	s10, s10, s12
 8011d76:	ed4e 6a01 	vstr	s13, [lr, #-4]
 8011d7a:	ed85 5a00 	vstr	s10, [r5]
 8011d7e:	ed96 1a01 	vldr	s2, [r6, #4]
 8011d82:	edd7 5a01 	vldr	s11, [r7, #4]
 8011d86:	ed92 aa00 	vldr	s20, [r2]
 8011d8a:	ed91 6a00 	vldr	s12, [r1]
 8011d8e:	ed9e 9a00 	vldr	s18, [lr]
 8011d92:	ed95 5a01 	vldr	s10, [r5, #4]
 8011d96:	eddc 6a01 	vldr	s13, [ip, #4]
 8011d9a:	edd0 9a01 	vldr	s19, [r0, #4]
 8011d9e:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8011da2:	ee71 2a46 	vsub.f32	s5, s2, s12
 8011da6:	ee75 3aca 	vsub.f32	s7, s11, s20
 8011daa:	ee37 0a60 	vsub.f32	s0, s14, s1
 8011dae:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8011db2:	ee37 7a20 	vadd.f32	s14, s14, s1
 8011db6:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8011dba:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8011dbe:	ee79 3a05 	vadd.f32	s7, s18, s10
 8011dc2:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8011dc6:	ee39 5a45 	vsub.f32	s10, s18, s10
 8011dca:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8011dce:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8011dd2:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8011dd6:	ee31 6a06 	vadd.f32	s12, s2, s12
 8011dda:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8011dde:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8011de2:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8011de6:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8011dea:	ee33 3a68 	vsub.f32	s6, s6, s17
 8011dee:	ee36 0a88 	vadd.f32	s0, s13, s16
 8011df2:	ee75 8a86 	vadd.f32	s17, s11, s12
 8011df6:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8011dfa:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8011dfe:	ee75 6a62 	vsub.f32	s13, s10, s5
 8011e02:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8011e06:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8011e0a:	ee33 1a89 	vadd.f32	s2, s7, s18
 8011e0e:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8011e12:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8011e16:	ee75 4a22 	vadd.f32	s9, s10, s5
 8011e1a:	ee32 5a27 	vadd.f32	s10, s4, s15
 8011e1e:	ee72 7a67 	vsub.f32	s15, s4, s15
 8011e22:	ee33 8a06 	vadd.f32	s16, s6, s12
 8011e26:	ee75 2a87 	vadd.f32	s5, s11, s14
 8011e2a:	ee31 9a28 	vadd.f32	s18, s2, s17
 8011e2e:	ee33 6a46 	vsub.f32	s12, s6, s12
 8011e32:	ee74 0a61 	vsub.f32	s1, s8, s3
 8011e36:	ee33 2a80 	vadd.f32	s4, s7, s0
 8011e3a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8011e3e:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8011e42:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8011e46:	ee31 1a68 	vsub.f32	s2, s2, s17
 8011e4a:	ee34 4a21 	vadd.f32	s8, s8, s3
 8011e4e:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8011e52:	ee74 4a85 	vadd.f32	s9, s9, s10
 8011e56:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011e5a:	44d8      	add	r8, fp
 8011e5c:	45c1      	cmp	r9, r8
 8011e5e:	ed8e 9a00 	vstr	s18, [lr]
 8011e62:	ed85 1a01 	vstr	s2, [r5, #4]
 8011e66:	449e      	add	lr, r3
 8011e68:	ed8c 8a00 	vstr	s16, [ip]
 8011e6c:	441d      	add	r5, r3
 8011e6e:	ed80 6a00 	vstr	s12, [r0]
 8011e72:	edcc 0a01 	vstr	s1, [ip, #4]
 8011e76:	ed80 4a01 	vstr	s8, [r0, #4]
 8011e7a:	449c      	add	ip, r3
 8011e7c:	ed87 2a00 	vstr	s4, [r7]
 8011e80:	4418      	add	r0, r3
 8011e82:	ed41 3a01 	vstr	s7, [r1, #-4]
 8011e86:	ed42 2a01 	vstr	s5, [r2, #-4]
 8011e8a:	ed86 7a00 	vstr	s14, [r6]
 8011e8e:	ed87 3a01 	vstr	s6, [r7, #4]
 8011e92:	edc1 4a00 	vstr	s9, [r1]
 8011e96:	441f      	add	r7, r3
 8011e98:	edc2 5a00 	vstr	s11, [r2]
 8011e9c:	4419      	add	r1, r3
 8011e9e:	edc6 6a01 	vstr	s13, [r6, #4]
 8011ea2:	441a      	add	r2, r3
 8011ea4:	441e      	add	r6, r3
 8011ea6:	f63f af44 	bhi.w	8011d32 <arm_radix8_butterfly_f32+0x66>
 8011eaa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011eac:	2907      	cmp	r1, #7
 8011eae:	4620      	mov	r0, r4
 8011eb0:	f240 81e9 	bls.w	8012286 <arm_radix8_butterfly_f32+0x5ba>
 8011eb4:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8011eb8:	193e      	adds	r6, r7, r4
 8011eba:	1935      	adds	r5, r6, r4
 8011ebc:	9c03      	ldr	r4, [sp, #12]
 8011ebe:	9000      	str	r0, [sp, #0]
 8011ec0:	4622      	mov	r2, r4
 8011ec2:	3201      	adds	r2, #1
 8011ec4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8011ec8:	9900      	ldr	r1, [sp, #0]
 8011eca:	1828      	adds	r0, r5, r0
 8011ecc:	eb00 0e01 	add.w	lr, r0, r1
 8011ed0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011ed2:	440a      	add	r2, r1
 8011ed4:	eb04 0c01 	add.w	ip, r4, r1
 8011ed8:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8011edc:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8011ee0:	9a00      	ldr	r2, [sp, #0]
 8011ee2:	940f      	str	r4, [sp, #60]	@ 0x3c
 8011ee4:	00ed      	lsls	r5, r5, #3
 8011ee6:	9511      	str	r5, [sp, #68]	@ 0x44
 8011ee8:	00d5      	lsls	r5, r2, #3
 8011eea:	950d      	str	r5, [sp, #52]	@ 0x34
 8011eec:	9d01      	ldr	r5, [sp, #4]
 8011eee:	3508      	adds	r5, #8
 8011ef0:	9516      	str	r5, [sp, #88]	@ 0x58
 8011ef2:	9d02      	ldr	r5, [sp, #8]
 8011ef4:	3508      	adds	r5, #8
 8011ef6:	0114      	lsls	r4, r2, #4
 8011ef8:	9517      	str	r5, [sp, #92]	@ 0x5c
 8011efa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011efc:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8011efe:	940e      	str	r4, [sp, #56]	@ 0x38
 8011f00:	00c0      	lsls	r0, r0, #3
 8011f02:	9010      	str	r0, [sp, #64]	@ 0x40
 8011f04:	18aa      	adds	r2, r5, r2
 8011f06:	9207      	str	r2, [sp, #28]
 8011f08:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8011f0a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8011f0c:	18aa      	adds	r2, r5, r2
 8011f0e:	9208      	str	r2, [sp, #32]
 8011f10:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011f12:	18aa      	adds	r2, r5, r2
 8011f14:	9209      	str	r2, [sp, #36]	@ 0x24
 8011f16:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8011f1a:	f10e 0204 	add.w	r2, lr, #4
 8011f1e:	920a      	str	r2, [sp, #40]	@ 0x28
 8011f20:	00c9      	lsls	r1, r1, #3
 8011f22:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011f24:	310c      	adds	r1, #12
 8011f26:	00f6      	lsls	r6, r6, #3
 8011f28:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8011f2c:	9114      	str	r1, [sp, #80]	@ 0x50
 8011f2e:	18a9      	adds	r1, r5, r2
 8011f30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011f32:	9612      	str	r6, [sp, #72]	@ 0x48
 8011f34:	00ff      	lsls	r7, r7, #3
 8011f36:	19ae      	adds	r6, r5, r6
 8011f38:	3008      	adds	r0, #8
 8011f3a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8011f3e:	9606      	str	r6, [sp, #24]
 8011f40:	9019      	str	r0, [sp, #100]	@ 0x64
 8011f42:	18aa      	adds	r2, r5, r2
 8011f44:	0164      	lsls	r4, r4, #5
 8011f46:	19ee      	adds	r6, r5, r7
 8011f48:	f10c 000c 	add.w	r0, ip, #12
 8011f4c:	9713      	str	r7, [sp, #76]	@ 0x4c
 8011f4e:	9604      	str	r6, [sp, #16]
 8011f50:	9015      	str	r0, [sp, #84]	@ 0x54
 8011f52:	9103      	str	r1, [sp, #12]
 8011f54:	9205      	str	r2, [sp, #20]
 8011f56:	f104 0208 	add.w	r2, r4, #8
 8011f5a:	9218      	str	r2, [sp, #96]	@ 0x60
 8011f5c:	f04f 0801 	mov.w	r8, #1
 8011f60:	2200      	movs	r2, #0
 8011f62:	f102 0108 	add.w	r1, r2, #8
 8011f66:	460f      	mov	r7, r1
 8011f68:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011f6a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011f6c:	188e      	adds	r6, r1, r2
 8011f6e:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8011f70:	188d      	adds	r5, r1, r2
 8011f72:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8011f74:	188c      	adds	r4, r1, r2
 8011f76:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8011f78:	1888      	adds	r0, r1, r2
 8011f7a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8011f7c:	eb01 0c02 	add.w	ip, r1, r2
 8011f80:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8011f82:	440a      	add	r2, r1
 8011f84:	9903      	ldr	r1, [sp, #12]
 8011f86:	edd1 fa00 	vldr	s31, [r1]
 8011f8a:	9905      	ldr	r1, [sp, #20]
 8011f8c:	ed91 fa00 	vldr	s30, [r1]
 8011f90:	9904      	ldr	r1, [sp, #16]
 8011f92:	edd1 ea00 	vldr	s29, [r1]
 8011f96:	9906      	ldr	r1, [sp, #24]
 8011f98:	ed91 ea00 	vldr	s28, [r1]
 8011f9c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011f9e:	edd1 da00 	vldr	s27, [r1]
 8011fa2:	9908      	ldr	r1, [sp, #32]
 8011fa4:	ed91 da00 	vldr	s26, [r1]
 8011fa8:	9907      	ldr	r1, [sp, #28]
 8011faa:	edd1 ca00 	vldr	s25, [r1]
 8011fae:	9903      	ldr	r1, [sp, #12]
 8011fb0:	ed91 ca01 	vldr	s24, [r1, #4]
 8011fb4:	9905      	ldr	r1, [sp, #20]
 8011fb6:	edd1 ba01 	vldr	s23, [r1, #4]
 8011fba:	9904      	ldr	r1, [sp, #16]
 8011fbc:	edd1 aa01 	vldr	s21, [r1, #4]
 8011fc0:	9906      	ldr	r1, [sp, #24]
 8011fc2:	ed91 aa01 	vldr	s20, [r1, #4]
 8011fc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011fc8:	edd1 7a01 	vldr	s15, [r1, #4]
 8011fcc:	9908      	ldr	r1, [sp, #32]
 8011fce:	edcd 7a00 	vstr	s15, [sp]
 8011fd2:	edd1 7a01 	vldr	s15, [r1, #4]
 8011fd6:	9907      	ldr	r1, [sp, #28]
 8011fd8:	edcd 7a01 	vstr	s15, [sp, #4]
 8011fdc:	edd1 7a01 	vldr	s15, [r1, #4]
 8011fe0:	eb0a 0e07 	add.w	lr, sl, r7
 8011fe4:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8011fe6:	edcd 7a02 	vstr	s15, [sp, #8]
 8011fea:	eb0c 010a 	add.w	r1, ip, sl
 8011fee:	4456      	add	r6, sl
 8011ff0:	4455      	add	r5, sl
 8011ff2:	4454      	add	r4, sl
 8011ff4:	4450      	add	r0, sl
 8011ff6:	4452      	add	r2, sl
 8011ff8:	46c4      	mov	ip, r8
 8011ffa:	e001      	b.n	8012000 <arm_radix8_butterfly_f32+0x334>
 8011ffc:	3f3504f3 	.word	0x3f3504f3
 8012000:	ed96 5a00 	vldr	s10, [r6]
 8012004:	ed52 9a01 	vldr	s19, [r2, #-4]
 8012008:	ed11 6a01 	vldr	s12, [r1, #-4]
 801200c:	edd0 7a00 	vldr	s15, [r0]
 8012010:	ed17 7a01 	vldr	s14, [r7, #-4]
 8012014:	edde 3a00 	vldr	s7, [lr]
 8012018:	ed94 3a00 	vldr	s6, [r4]
 801201c:	ed95 2a00 	vldr	s4, [r5]
 8012020:	ed9e 0a01 	vldr	s0, [lr, #4]
 8012024:	ee33 8a85 	vadd.f32	s16, s7, s10
 8012028:	ee32 1a06 	vadd.f32	s2, s4, s12
 801202c:	ee33 4a29 	vadd.f32	s8, s6, s19
 8012030:	ee77 4a87 	vadd.f32	s9, s15, s14
 8012034:	ee78 1a04 	vadd.f32	s3, s16, s8
 8012038:	ee71 6a24 	vadd.f32	s13, s2, s9
 801203c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8012040:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8012044:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012048:	ed8e 6a00 	vstr	s12, [lr]
 801204c:	edd0 8a01 	vldr	s17, [r0, #4]
 8012050:	ed95 9a01 	vldr	s18, [r5, #4]
 8012054:	edd1 2a00 	vldr	s5, [r1]
 8012058:	ed97 7a00 	vldr	s14, [r7]
 801205c:	edd4 0a01 	vldr	s1, [r4, #4]
 8012060:	ed96 6a01 	vldr	s12, [r6, #4]
 8012064:	edd2 5a00 	vldr	s11, [r2]
 8012068:	ee73 3ac5 	vsub.f32	s7, s7, s10
 801206c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8012070:	ee39 5a62 	vsub.f32	s10, s18, s5
 8012074:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8012078:	ee38 4a44 	vsub.f32	s8, s16, s8
 801207c:	ee38 7a87 	vadd.f32	s14, s17, s14
 8012080:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8012084:	ee79 2a22 	vadd.f32	s5, s18, s5
 8012088:	ee75 8a69 	vsub.f32	s17, s10, s19
 801208c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8012090:	ee35 5a29 	vadd.f32	s10, s10, s19
 8012094:	ee72 7a67 	vsub.f32	s15, s4, s15
 8012098:	ee30 2a06 	vadd.f32	s4, s0, s12
 801209c:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80120a0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80120a4:	ee32 9a08 	vadd.f32	s18, s4, s16
 80120a8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80120ac:	ee32 2a48 	vsub.f32	s4, s4, s16
 80120b0:	ee71 4a64 	vsub.f32	s9, s2, s9
 80120b4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80120b8:	ee32 1a87 	vadd.f32	s2, s5, s14
 80120bc:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80120c0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80120c4:	ee30 6a46 	vsub.f32	s12, s0, s12
 80120c8:	ee73 0a29 	vadd.f32	s1, s6, s19
 80120cc:	ee36 0a28 	vadd.f32	s0, s12, s17
 80120d0:	ee33 3a69 	vsub.f32	s6, s6, s19
 80120d4:	ee32 7a64 	vsub.f32	s14, s4, s9
 80120d8:	ee73 9aa7 	vadd.f32	s19, s7, s15
 80120dc:	ee36 6a68 	vsub.f32	s12, s12, s17
 80120e0:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80120e4:	ee75 8a85 	vadd.f32	s17, s11, s10
 80120e8:	ee74 3a22 	vadd.f32	s7, s8, s5
 80120ec:	ee35 5ac5 	vsub.f32	s10, s11, s10
 80120f0:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80120f4:	ee79 1a41 	vsub.f32	s3, s18, s2
 80120f8:	ee39 8aa8 	vadd.f32	s16, s19, s17
 80120fc:	ee76 5a43 	vsub.f32	s11, s12, s6
 8012100:	ee74 2a62 	vsub.f32	s5, s8, s5
 8012104:	ee72 4a24 	vadd.f32	s9, s4, s9
 8012108:	ee30 4a60 	vsub.f32	s8, s0, s1
 801210c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8012110:	ee30 0a20 	vadd.f32	s0, s0, s1
 8012114:	ee77 9a85 	vadd.f32	s19, s15, s10
 8012118:	ee36 6a03 	vadd.f32	s12, s12, s6
 801211c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8012120:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8012124:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8012128:	ee6f 0a23 	vmul.f32	s1, s30, s7
 801212c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8012130:	ee39 1a01 	vadd.f32	s2, s18, s2
 8012134:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8012138:	ee2b 9a87 	vmul.f32	s18, s23, s14
 801213c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8012140:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8012144:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8012148:	ee35 3a03 	vadd.f32	s6, s10, s6
 801214c:	ee72 6a66 	vsub.f32	s13, s4, s13
 8012150:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8012154:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8012158:	ed9d 4a02 	vldr	s8, [sp, #8]
 801215c:	ed8e 1a01 	vstr	s2, [lr, #4]
 8012160:	ee77 3a63 	vsub.f32	s7, s14, s7
 8012164:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8012168:	ed9d 7a01 	vldr	s14, [sp, #4]
 801216c:	ed86 3a00 	vstr	s6, [r6]
 8012170:	ee30 9a89 	vadd.f32	s18, s1, s18
 8012174:	ee32 2a05 	vadd.f32	s4, s4, s10
 8012178:	ee6d 0a22 	vmul.f32	s1, s26, s5
 801217c:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8012180:	ee67 2a22 	vmul.f32	s5, s14, s5
 8012184:	ee64 1a00 	vmul.f32	s3, s8, s0
 8012188:	ee27 7a24 	vmul.f32	s14, s14, s9
 801218c:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8012190:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8012194:	ee64 8a28 	vmul.f32	s17, s8, s17
 8012198:	ed9d 4a00 	vldr	s8, [sp]
 801219c:	edc6 6a01 	vstr	s13, [r6, #4]
 80121a0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80121a4:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 80121a8:	ee64 9a29 	vmul.f32	s19, s8, s19
 80121ac:	ee24 4a25 	vmul.f32	s8, s8, s11
 80121b0:	ee30 7a87 	vadd.f32	s14, s1, s14
 80121b4:	ee74 4a84 	vadd.f32	s9, s9, s8
 80121b8:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 80121bc:	ee2a 4a86 	vmul.f32	s8, s21, s12
 80121c0:	ee2c 0a80 	vmul.f32	s0, s25, s0
 80121c4:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 80121c8:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80121cc:	ee2e 6a86 	vmul.f32	s12, s29, s12
 80121d0:	ee75 1a21 	vadd.f32	s3, s10, s3
 80121d4:	ee30 0a68 	vsub.f32	s0, s0, s17
 80121d8:	ee75 9ae9 	vsub.f32	s19, s11, s19
 80121dc:	ee70 0a84 	vadd.f32	s1, s1, s8
 80121e0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80121e4:	44dc      	add	ip, fp
 80121e6:	45e1      	cmp	r9, ip
 80121e8:	ed84 9a00 	vstr	s18, [r4]
 80121ec:	edc4 3a01 	vstr	s7, [r4, #4]
 80121f0:	449e      	add	lr, r3
 80121f2:	ed02 7a01 	vstr	s14, [r2, #-4]
 80121f6:	edc2 2a00 	vstr	s5, [r2]
 80121fa:	441e      	add	r6, r3
 80121fc:	ed85 2a00 	vstr	s4, [r5]
 8012200:	ed85 8a01 	vstr	s16, [r5, #4]
 8012204:	441c      	add	r4, r3
 8012206:	ed47 1a01 	vstr	s3, [r7, #-4]
 801220a:	ed87 0a00 	vstr	s0, [r7]
 801220e:	441a      	add	r2, r3
 8012210:	ed41 4a01 	vstr	s9, [r1, #-4]
 8012214:	edc1 9a00 	vstr	s19, [r1]
 8012218:	441d      	add	r5, r3
 801221a:	edc0 0a00 	vstr	s1, [r0]
 801221e:	441f      	add	r7, r3
 8012220:	ed80 6a01 	vstr	s12, [r0, #4]
 8012224:	4419      	add	r1, r3
 8012226:	4418      	add	r0, r3
 8012228:	f63f aeea 	bhi.w	8012000 <arm_radix8_butterfly_f32+0x334>
 801222c:	9a03      	ldr	r2, [sp, #12]
 801222e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8012230:	440a      	add	r2, r1
 8012232:	9203      	str	r2, [sp, #12]
 8012234:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012236:	9a05      	ldr	r2, [sp, #20]
 8012238:	440a      	add	r2, r1
 801223a:	9205      	str	r2, [sp, #20]
 801223c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801223e:	9a04      	ldr	r2, [sp, #16]
 8012240:	440a      	add	r2, r1
 8012242:	9204      	str	r2, [sp, #16]
 8012244:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012246:	9a06      	ldr	r2, [sp, #24]
 8012248:	440a      	add	r2, r1
 801224a:	9206      	str	r2, [sp, #24]
 801224c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801224e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012250:	440a      	add	r2, r1
 8012252:	9209      	str	r2, [sp, #36]	@ 0x24
 8012254:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8012256:	9a08      	ldr	r2, [sp, #32]
 8012258:	440a      	add	r2, r1
 801225a:	9208      	str	r2, [sp, #32]
 801225c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801225e:	9a07      	ldr	r2, [sp, #28]
 8012260:	440a      	add	r2, r1
 8012262:	9207      	str	r2, [sp, #28]
 8012264:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012266:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012268:	f108 0801 	add.w	r8, r8, #1
 801226c:	3208      	adds	r2, #8
 801226e:	4588      	cmp	r8, r1
 8012270:	920a      	str	r2, [sp, #40]	@ 0x28
 8012272:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012274:	f47f ae75 	bne.w	8011f62 <arm_radix8_butterfly_f32+0x296>
 8012278:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 801227c:	9300      	str	r3, [sp, #0]
 801227e:	46c3      	mov	fp, r8
 8012280:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 8012284:	e532      	b.n	8011cec <arm_radix8_butterfly_f32+0x20>
 8012286:	b01d      	add	sp, #116	@ 0x74
 8012288:	ecbd 8b10 	vpop	{d8-d15}
 801228c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012290 <sniprintf>:
 8012290:	b40c      	push	{r2, r3}
 8012292:	b530      	push	{r4, r5, lr}
 8012294:	4b17      	ldr	r3, [pc, #92]	@ (80122f4 <sniprintf+0x64>)
 8012296:	1e0c      	subs	r4, r1, #0
 8012298:	681d      	ldr	r5, [r3, #0]
 801229a:	b09d      	sub	sp, #116	@ 0x74
 801229c:	da08      	bge.n	80122b0 <sniprintf+0x20>
 801229e:	238b      	movs	r3, #139	@ 0x8b
 80122a0:	602b      	str	r3, [r5, #0]
 80122a2:	f04f 30ff 	mov.w	r0, #4294967295
 80122a6:	b01d      	add	sp, #116	@ 0x74
 80122a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80122ac:	b002      	add	sp, #8
 80122ae:	4770      	bx	lr
 80122b0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80122b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80122b8:	bf14      	ite	ne
 80122ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 80122be:	4623      	moveq	r3, r4
 80122c0:	9304      	str	r3, [sp, #16]
 80122c2:	9307      	str	r3, [sp, #28]
 80122c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80122c8:	9002      	str	r0, [sp, #8]
 80122ca:	9006      	str	r0, [sp, #24]
 80122cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80122d0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80122d2:	ab21      	add	r3, sp, #132	@ 0x84
 80122d4:	a902      	add	r1, sp, #8
 80122d6:	4628      	mov	r0, r5
 80122d8:	9301      	str	r3, [sp, #4]
 80122da:	f000 f9bd 	bl	8012658 <_svfiprintf_r>
 80122de:	1c43      	adds	r3, r0, #1
 80122e0:	bfbc      	itt	lt
 80122e2:	238b      	movlt	r3, #139	@ 0x8b
 80122e4:	602b      	strlt	r3, [r5, #0]
 80122e6:	2c00      	cmp	r4, #0
 80122e8:	d0dd      	beq.n	80122a6 <sniprintf+0x16>
 80122ea:	9b02      	ldr	r3, [sp, #8]
 80122ec:	2200      	movs	r2, #0
 80122ee:	701a      	strb	r2, [r3, #0]
 80122f0:	e7d9      	b.n	80122a6 <sniprintf+0x16>
 80122f2:	bf00      	nop
 80122f4:	20000044 	.word	0x20000044

080122f8 <memmove>:
 80122f8:	4288      	cmp	r0, r1
 80122fa:	b510      	push	{r4, lr}
 80122fc:	eb01 0402 	add.w	r4, r1, r2
 8012300:	d902      	bls.n	8012308 <memmove+0x10>
 8012302:	4284      	cmp	r4, r0
 8012304:	4623      	mov	r3, r4
 8012306:	d807      	bhi.n	8012318 <memmove+0x20>
 8012308:	1e43      	subs	r3, r0, #1
 801230a:	42a1      	cmp	r1, r4
 801230c:	d008      	beq.n	8012320 <memmove+0x28>
 801230e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012312:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012316:	e7f8      	b.n	801230a <memmove+0x12>
 8012318:	4402      	add	r2, r0
 801231a:	4601      	mov	r1, r0
 801231c:	428a      	cmp	r2, r1
 801231e:	d100      	bne.n	8012322 <memmove+0x2a>
 8012320:	bd10      	pop	{r4, pc}
 8012322:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012326:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801232a:	e7f7      	b.n	801231c <memmove+0x24>

0801232c <memset>:
 801232c:	4402      	add	r2, r0
 801232e:	4603      	mov	r3, r0
 8012330:	4293      	cmp	r3, r2
 8012332:	d100      	bne.n	8012336 <memset+0xa>
 8012334:	4770      	bx	lr
 8012336:	f803 1b01 	strb.w	r1, [r3], #1
 801233a:	e7f9      	b.n	8012330 <memset+0x4>

0801233c <__errno>:
 801233c:	4b01      	ldr	r3, [pc, #4]	@ (8012344 <__errno+0x8>)
 801233e:	6818      	ldr	r0, [r3, #0]
 8012340:	4770      	bx	lr
 8012342:	bf00      	nop
 8012344:	20000044 	.word	0x20000044

08012348 <__libc_init_array>:
 8012348:	b570      	push	{r4, r5, r6, lr}
 801234a:	4d0d      	ldr	r5, [pc, #52]	@ (8012380 <__libc_init_array+0x38>)
 801234c:	4c0d      	ldr	r4, [pc, #52]	@ (8012384 <__libc_init_array+0x3c>)
 801234e:	1b64      	subs	r4, r4, r5
 8012350:	10a4      	asrs	r4, r4, #2
 8012352:	2600      	movs	r6, #0
 8012354:	42a6      	cmp	r6, r4
 8012356:	d109      	bne.n	801236c <__libc_init_array+0x24>
 8012358:	4d0b      	ldr	r5, [pc, #44]	@ (8012388 <__libc_init_array+0x40>)
 801235a:	4c0c      	ldr	r4, [pc, #48]	@ (801238c <__libc_init_array+0x44>)
 801235c:	f000 fc6e 	bl	8012c3c <_init>
 8012360:	1b64      	subs	r4, r4, r5
 8012362:	10a4      	asrs	r4, r4, #2
 8012364:	2600      	movs	r6, #0
 8012366:	42a6      	cmp	r6, r4
 8012368:	d105      	bne.n	8012376 <__libc_init_array+0x2e>
 801236a:	bd70      	pop	{r4, r5, r6, pc}
 801236c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012370:	4798      	blx	r3
 8012372:	3601      	adds	r6, #1
 8012374:	e7ee      	b.n	8012354 <__libc_init_array+0xc>
 8012376:	f855 3b04 	ldr.w	r3, [r5], #4
 801237a:	4798      	blx	r3
 801237c:	3601      	adds	r6, #1
 801237e:	e7f2      	b.n	8012366 <__libc_init_array+0x1e>
 8012380:	0802ab14 	.word	0x0802ab14
 8012384:	0802ab14 	.word	0x0802ab14
 8012388:	0802ab14 	.word	0x0802ab14
 801238c:	0802ab18 	.word	0x0802ab18

08012390 <__retarget_lock_acquire_recursive>:
 8012390:	4770      	bx	lr

08012392 <__retarget_lock_release_recursive>:
 8012392:	4770      	bx	lr

08012394 <memcpy>:
 8012394:	440a      	add	r2, r1
 8012396:	4291      	cmp	r1, r2
 8012398:	f100 33ff 	add.w	r3, r0, #4294967295
 801239c:	d100      	bne.n	80123a0 <memcpy+0xc>
 801239e:	4770      	bx	lr
 80123a0:	b510      	push	{r4, lr}
 80123a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80123a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80123aa:	4291      	cmp	r1, r2
 80123ac:	d1f9      	bne.n	80123a2 <memcpy+0xe>
 80123ae:	bd10      	pop	{r4, pc}

080123b0 <_free_r>:
 80123b0:	b538      	push	{r3, r4, r5, lr}
 80123b2:	4605      	mov	r5, r0
 80123b4:	2900      	cmp	r1, #0
 80123b6:	d041      	beq.n	801243c <_free_r+0x8c>
 80123b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80123bc:	1f0c      	subs	r4, r1, #4
 80123be:	2b00      	cmp	r3, #0
 80123c0:	bfb8      	it	lt
 80123c2:	18e4      	addlt	r4, r4, r3
 80123c4:	f000 f8e0 	bl	8012588 <__malloc_lock>
 80123c8:	4a1d      	ldr	r2, [pc, #116]	@ (8012440 <_free_r+0x90>)
 80123ca:	6813      	ldr	r3, [r2, #0]
 80123cc:	b933      	cbnz	r3, 80123dc <_free_r+0x2c>
 80123ce:	6063      	str	r3, [r4, #4]
 80123d0:	6014      	str	r4, [r2, #0]
 80123d2:	4628      	mov	r0, r5
 80123d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80123d8:	f000 b8dc 	b.w	8012594 <__malloc_unlock>
 80123dc:	42a3      	cmp	r3, r4
 80123de:	d908      	bls.n	80123f2 <_free_r+0x42>
 80123e0:	6820      	ldr	r0, [r4, #0]
 80123e2:	1821      	adds	r1, r4, r0
 80123e4:	428b      	cmp	r3, r1
 80123e6:	bf01      	itttt	eq
 80123e8:	6819      	ldreq	r1, [r3, #0]
 80123ea:	685b      	ldreq	r3, [r3, #4]
 80123ec:	1809      	addeq	r1, r1, r0
 80123ee:	6021      	streq	r1, [r4, #0]
 80123f0:	e7ed      	b.n	80123ce <_free_r+0x1e>
 80123f2:	461a      	mov	r2, r3
 80123f4:	685b      	ldr	r3, [r3, #4]
 80123f6:	b10b      	cbz	r3, 80123fc <_free_r+0x4c>
 80123f8:	42a3      	cmp	r3, r4
 80123fa:	d9fa      	bls.n	80123f2 <_free_r+0x42>
 80123fc:	6811      	ldr	r1, [r2, #0]
 80123fe:	1850      	adds	r0, r2, r1
 8012400:	42a0      	cmp	r0, r4
 8012402:	d10b      	bne.n	801241c <_free_r+0x6c>
 8012404:	6820      	ldr	r0, [r4, #0]
 8012406:	4401      	add	r1, r0
 8012408:	1850      	adds	r0, r2, r1
 801240a:	4283      	cmp	r3, r0
 801240c:	6011      	str	r1, [r2, #0]
 801240e:	d1e0      	bne.n	80123d2 <_free_r+0x22>
 8012410:	6818      	ldr	r0, [r3, #0]
 8012412:	685b      	ldr	r3, [r3, #4]
 8012414:	6053      	str	r3, [r2, #4]
 8012416:	4408      	add	r0, r1
 8012418:	6010      	str	r0, [r2, #0]
 801241a:	e7da      	b.n	80123d2 <_free_r+0x22>
 801241c:	d902      	bls.n	8012424 <_free_r+0x74>
 801241e:	230c      	movs	r3, #12
 8012420:	602b      	str	r3, [r5, #0]
 8012422:	e7d6      	b.n	80123d2 <_free_r+0x22>
 8012424:	6820      	ldr	r0, [r4, #0]
 8012426:	1821      	adds	r1, r4, r0
 8012428:	428b      	cmp	r3, r1
 801242a:	bf04      	itt	eq
 801242c:	6819      	ldreq	r1, [r3, #0]
 801242e:	685b      	ldreq	r3, [r3, #4]
 8012430:	6063      	str	r3, [r4, #4]
 8012432:	bf04      	itt	eq
 8012434:	1809      	addeq	r1, r1, r0
 8012436:	6021      	streq	r1, [r4, #0]
 8012438:	6054      	str	r4, [r2, #4]
 801243a:	e7ca      	b.n	80123d2 <_free_r+0x22>
 801243c:	bd38      	pop	{r3, r4, r5, pc}
 801243e:	bf00      	nop
 8012440:	20010454 	.word	0x20010454

08012444 <sbrk_aligned>:
 8012444:	b570      	push	{r4, r5, r6, lr}
 8012446:	4e0f      	ldr	r6, [pc, #60]	@ (8012484 <sbrk_aligned+0x40>)
 8012448:	460c      	mov	r4, r1
 801244a:	6831      	ldr	r1, [r6, #0]
 801244c:	4605      	mov	r5, r0
 801244e:	b911      	cbnz	r1, 8012456 <sbrk_aligned+0x12>
 8012450:	f000 fb8c 	bl	8012b6c <_sbrk_r>
 8012454:	6030      	str	r0, [r6, #0]
 8012456:	4621      	mov	r1, r4
 8012458:	4628      	mov	r0, r5
 801245a:	f000 fb87 	bl	8012b6c <_sbrk_r>
 801245e:	1c43      	adds	r3, r0, #1
 8012460:	d103      	bne.n	801246a <sbrk_aligned+0x26>
 8012462:	f04f 34ff 	mov.w	r4, #4294967295
 8012466:	4620      	mov	r0, r4
 8012468:	bd70      	pop	{r4, r5, r6, pc}
 801246a:	1cc4      	adds	r4, r0, #3
 801246c:	f024 0403 	bic.w	r4, r4, #3
 8012470:	42a0      	cmp	r0, r4
 8012472:	d0f8      	beq.n	8012466 <sbrk_aligned+0x22>
 8012474:	1a21      	subs	r1, r4, r0
 8012476:	4628      	mov	r0, r5
 8012478:	f000 fb78 	bl	8012b6c <_sbrk_r>
 801247c:	3001      	adds	r0, #1
 801247e:	d1f2      	bne.n	8012466 <sbrk_aligned+0x22>
 8012480:	e7ef      	b.n	8012462 <sbrk_aligned+0x1e>
 8012482:	bf00      	nop
 8012484:	20010450 	.word	0x20010450

08012488 <_malloc_r>:
 8012488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801248c:	1ccd      	adds	r5, r1, #3
 801248e:	f025 0503 	bic.w	r5, r5, #3
 8012492:	3508      	adds	r5, #8
 8012494:	2d0c      	cmp	r5, #12
 8012496:	bf38      	it	cc
 8012498:	250c      	movcc	r5, #12
 801249a:	2d00      	cmp	r5, #0
 801249c:	4606      	mov	r6, r0
 801249e:	db01      	blt.n	80124a4 <_malloc_r+0x1c>
 80124a0:	42a9      	cmp	r1, r5
 80124a2:	d904      	bls.n	80124ae <_malloc_r+0x26>
 80124a4:	230c      	movs	r3, #12
 80124a6:	6033      	str	r3, [r6, #0]
 80124a8:	2000      	movs	r0, #0
 80124aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012584 <_malloc_r+0xfc>
 80124b2:	f000 f869 	bl	8012588 <__malloc_lock>
 80124b6:	f8d8 3000 	ldr.w	r3, [r8]
 80124ba:	461c      	mov	r4, r3
 80124bc:	bb44      	cbnz	r4, 8012510 <_malloc_r+0x88>
 80124be:	4629      	mov	r1, r5
 80124c0:	4630      	mov	r0, r6
 80124c2:	f7ff ffbf 	bl	8012444 <sbrk_aligned>
 80124c6:	1c43      	adds	r3, r0, #1
 80124c8:	4604      	mov	r4, r0
 80124ca:	d158      	bne.n	801257e <_malloc_r+0xf6>
 80124cc:	f8d8 4000 	ldr.w	r4, [r8]
 80124d0:	4627      	mov	r7, r4
 80124d2:	2f00      	cmp	r7, #0
 80124d4:	d143      	bne.n	801255e <_malloc_r+0xd6>
 80124d6:	2c00      	cmp	r4, #0
 80124d8:	d04b      	beq.n	8012572 <_malloc_r+0xea>
 80124da:	6823      	ldr	r3, [r4, #0]
 80124dc:	4639      	mov	r1, r7
 80124de:	4630      	mov	r0, r6
 80124e0:	eb04 0903 	add.w	r9, r4, r3
 80124e4:	f000 fb42 	bl	8012b6c <_sbrk_r>
 80124e8:	4581      	cmp	r9, r0
 80124ea:	d142      	bne.n	8012572 <_malloc_r+0xea>
 80124ec:	6821      	ldr	r1, [r4, #0]
 80124ee:	1a6d      	subs	r5, r5, r1
 80124f0:	4629      	mov	r1, r5
 80124f2:	4630      	mov	r0, r6
 80124f4:	f7ff ffa6 	bl	8012444 <sbrk_aligned>
 80124f8:	3001      	adds	r0, #1
 80124fa:	d03a      	beq.n	8012572 <_malloc_r+0xea>
 80124fc:	6823      	ldr	r3, [r4, #0]
 80124fe:	442b      	add	r3, r5
 8012500:	6023      	str	r3, [r4, #0]
 8012502:	f8d8 3000 	ldr.w	r3, [r8]
 8012506:	685a      	ldr	r2, [r3, #4]
 8012508:	bb62      	cbnz	r2, 8012564 <_malloc_r+0xdc>
 801250a:	f8c8 7000 	str.w	r7, [r8]
 801250e:	e00f      	b.n	8012530 <_malloc_r+0xa8>
 8012510:	6822      	ldr	r2, [r4, #0]
 8012512:	1b52      	subs	r2, r2, r5
 8012514:	d420      	bmi.n	8012558 <_malloc_r+0xd0>
 8012516:	2a0b      	cmp	r2, #11
 8012518:	d917      	bls.n	801254a <_malloc_r+0xc2>
 801251a:	1961      	adds	r1, r4, r5
 801251c:	42a3      	cmp	r3, r4
 801251e:	6025      	str	r5, [r4, #0]
 8012520:	bf18      	it	ne
 8012522:	6059      	strne	r1, [r3, #4]
 8012524:	6863      	ldr	r3, [r4, #4]
 8012526:	bf08      	it	eq
 8012528:	f8c8 1000 	streq.w	r1, [r8]
 801252c:	5162      	str	r2, [r4, r5]
 801252e:	604b      	str	r3, [r1, #4]
 8012530:	4630      	mov	r0, r6
 8012532:	f000 f82f 	bl	8012594 <__malloc_unlock>
 8012536:	f104 000b 	add.w	r0, r4, #11
 801253a:	1d23      	adds	r3, r4, #4
 801253c:	f020 0007 	bic.w	r0, r0, #7
 8012540:	1ac2      	subs	r2, r0, r3
 8012542:	bf1c      	itt	ne
 8012544:	1a1b      	subne	r3, r3, r0
 8012546:	50a3      	strne	r3, [r4, r2]
 8012548:	e7af      	b.n	80124aa <_malloc_r+0x22>
 801254a:	6862      	ldr	r2, [r4, #4]
 801254c:	42a3      	cmp	r3, r4
 801254e:	bf0c      	ite	eq
 8012550:	f8c8 2000 	streq.w	r2, [r8]
 8012554:	605a      	strne	r2, [r3, #4]
 8012556:	e7eb      	b.n	8012530 <_malloc_r+0xa8>
 8012558:	4623      	mov	r3, r4
 801255a:	6864      	ldr	r4, [r4, #4]
 801255c:	e7ae      	b.n	80124bc <_malloc_r+0x34>
 801255e:	463c      	mov	r4, r7
 8012560:	687f      	ldr	r7, [r7, #4]
 8012562:	e7b6      	b.n	80124d2 <_malloc_r+0x4a>
 8012564:	461a      	mov	r2, r3
 8012566:	685b      	ldr	r3, [r3, #4]
 8012568:	42a3      	cmp	r3, r4
 801256a:	d1fb      	bne.n	8012564 <_malloc_r+0xdc>
 801256c:	2300      	movs	r3, #0
 801256e:	6053      	str	r3, [r2, #4]
 8012570:	e7de      	b.n	8012530 <_malloc_r+0xa8>
 8012572:	230c      	movs	r3, #12
 8012574:	6033      	str	r3, [r6, #0]
 8012576:	4630      	mov	r0, r6
 8012578:	f000 f80c 	bl	8012594 <__malloc_unlock>
 801257c:	e794      	b.n	80124a8 <_malloc_r+0x20>
 801257e:	6005      	str	r5, [r0, #0]
 8012580:	e7d6      	b.n	8012530 <_malloc_r+0xa8>
 8012582:	bf00      	nop
 8012584:	20010454 	.word	0x20010454

08012588 <__malloc_lock>:
 8012588:	4801      	ldr	r0, [pc, #4]	@ (8012590 <__malloc_lock+0x8>)
 801258a:	f7ff bf01 	b.w	8012390 <__retarget_lock_acquire_recursive>
 801258e:	bf00      	nop
 8012590:	2001044c 	.word	0x2001044c

08012594 <__malloc_unlock>:
 8012594:	4801      	ldr	r0, [pc, #4]	@ (801259c <__malloc_unlock+0x8>)
 8012596:	f7ff befc 	b.w	8012392 <__retarget_lock_release_recursive>
 801259a:	bf00      	nop
 801259c:	2001044c 	.word	0x2001044c

080125a0 <__ssputs_r>:
 80125a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125a4:	688e      	ldr	r6, [r1, #8]
 80125a6:	461f      	mov	r7, r3
 80125a8:	42be      	cmp	r6, r7
 80125aa:	680b      	ldr	r3, [r1, #0]
 80125ac:	4682      	mov	sl, r0
 80125ae:	460c      	mov	r4, r1
 80125b0:	4690      	mov	r8, r2
 80125b2:	d82d      	bhi.n	8012610 <__ssputs_r+0x70>
 80125b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80125b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80125bc:	d026      	beq.n	801260c <__ssputs_r+0x6c>
 80125be:	6965      	ldr	r5, [r4, #20]
 80125c0:	6909      	ldr	r1, [r1, #16]
 80125c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80125c6:	eba3 0901 	sub.w	r9, r3, r1
 80125ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80125ce:	1c7b      	adds	r3, r7, #1
 80125d0:	444b      	add	r3, r9
 80125d2:	106d      	asrs	r5, r5, #1
 80125d4:	429d      	cmp	r5, r3
 80125d6:	bf38      	it	cc
 80125d8:	461d      	movcc	r5, r3
 80125da:	0553      	lsls	r3, r2, #21
 80125dc:	d527      	bpl.n	801262e <__ssputs_r+0x8e>
 80125de:	4629      	mov	r1, r5
 80125e0:	f7ff ff52 	bl	8012488 <_malloc_r>
 80125e4:	4606      	mov	r6, r0
 80125e6:	b360      	cbz	r0, 8012642 <__ssputs_r+0xa2>
 80125e8:	6921      	ldr	r1, [r4, #16]
 80125ea:	464a      	mov	r2, r9
 80125ec:	f7ff fed2 	bl	8012394 <memcpy>
 80125f0:	89a3      	ldrh	r3, [r4, #12]
 80125f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80125f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80125fa:	81a3      	strh	r3, [r4, #12]
 80125fc:	6126      	str	r6, [r4, #16]
 80125fe:	6165      	str	r5, [r4, #20]
 8012600:	444e      	add	r6, r9
 8012602:	eba5 0509 	sub.w	r5, r5, r9
 8012606:	6026      	str	r6, [r4, #0]
 8012608:	60a5      	str	r5, [r4, #8]
 801260a:	463e      	mov	r6, r7
 801260c:	42be      	cmp	r6, r7
 801260e:	d900      	bls.n	8012612 <__ssputs_r+0x72>
 8012610:	463e      	mov	r6, r7
 8012612:	6820      	ldr	r0, [r4, #0]
 8012614:	4632      	mov	r2, r6
 8012616:	4641      	mov	r1, r8
 8012618:	f7ff fe6e 	bl	80122f8 <memmove>
 801261c:	68a3      	ldr	r3, [r4, #8]
 801261e:	1b9b      	subs	r3, r3, r6
 8012620:	60a3      	str	r3, [r4, #8]
 8012622:	6823      	ldr	r3, [r4, #0]
 8012624:	4433      	add	r3, r6
 8012626:	6023      	str	r3, [r4, #0]
 8012628:	2000      	movs	r0, #0
 801262a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801262e:	462a      	mov	r2, r5
 8012630:	f000 faac 	bl	8012b8c <_realloc_r>
 8012634:	4606      	mov	r6, r0
 8012636:	2800      	cmp	r0, #0
 8012638:	d1e0      	bne.n	80125fc <__ssputs_r+0x5c>
 801263a:	6921      	ldr	r1, [r4, #16]
 801263c:	4650      	mov	r0, sl
 801263e:	f7ff feb7 	bl	80123b0 <_free_r>
 8012642:	230c      	movs	r3, #12
 8012644:	f8ca 3000 	str.w	r3, [sl]
 8012648:	89a3      	ldrh	r3, [r4, #12]
 801264a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801264e:	81a3      	strh	r3, [r4, #12]
 8012650:	f04f 30ff 	mov.w	r0, #4294967295
 8012654:	e7e9      	b.n	801262a <__ssputs_r+0x8a>
	...

08012658 <_svfiprintf_r>:
 8012658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801265c:	4698      	mov	r8, r3
 801265e:	898b      	ldrh	r3, [r1, #12]
 8012660:	061b      	lsls	r3, r3, #24
 8012662:	b09d      	sub	sp, #116	@ 0x74
 8012664:	4607      	mov	r7, r0
 8012666:	460d      	mov	r5, r1
 8012668:	4614      	mov	r4, r2
 801266a:	d510      	bpl.n	801268e <_svfiprintf_r+0x36>
 801266c:	690b      	ldr	r3, [r1, #16]
 801266e:	b973      	cbnz	r3, 801268e <_svfiprintf_r+0x36>
 8012670:	2140      	movs	r1, #64	@ 0x40
 8012672:	f7ff ff09 	bl	8012488 <_malloc_r>
 8012676:	6028      	str	r0, [r5, #0]
 8012678:	6128      	str	r0, [r5, #16]
 801267a:	b930      	cbnz	r0, 801268a <_svfiprintf_r+0x32>
 801267c:	230c      	movs	r3, #12
 801267e:	603b      	str	r3, [r7, #0]
 8012680:	f04f 30ff 	mov.w	r0, #4294967295
 8012684:	b01d      	add	sp, #116	@ 0x74
 8012686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801268a:	2340      	movs	r3, #64	@ 0x40
 801268c:	616b      	str	r3, [r5, #20]
 801268e:	2300      	movs	r3, #0
 8012690:	9309      	str	r3, [sp, #36]	@ 0x24
 8012692:	2320      	movs	r3, #32
 8012694:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012698:	f8cd 800c 	str.w	r8, [sp, #12]
 801269c:	2330      	movs	r3, #48	@ 0x30
 801269e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801283c <_svfiprintf_r+0x1e4>
 80126a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80126a6:	f04f 0901 	mov.w	r9, #1
 80126aa:	4623      	mov	r3, r4
 80126ac:	469a      	mov	sl, r3
 80126ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126b2:	b10a      	cbz	r2, 80126b8 <_svfiprintf_r+0x60>
 80126b4:	2a25      	cmp	r2, #37	@ 0x25
 80126b6:	d1f9      	bne.n	80126ac <_svfiprintf_r+0x54>
 80126b8:	ebba 0b04 	subs.w	fp, sl, r4
 80126bc:	d00b      	beq.n	80126d6 <_svfiprintf_r+0x7e>
 80126be:	465b      	mov	r3, fp
 80126c0:	4622      	mov	r2, r4
 80126c2:	4629      	mov	r1, r5
 80126c4:	4638      	mov	r0, r7
 80126c6:	f7ff ff6b 	bl	80125a0 <__ssputs_r>
 80126ca:	3001      	adds	r0, #1
 80126cc:	f000 80a7 	beq.w	801281e <_svfiprintf_r+0x1c6>
 80126d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80126d2:	445a      	add	r2, fp
 80126d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80126d6:	f89a 3000 	ldrb.w	r3, [sl]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	f000 809f 	beq.w	801281e <_svfiprintf_r+0x1c6>
 80126e0:	2300      	movs	r3, #0
 80126e2:	f04f 32ff 	mov.w	r2, #4294967295
 80126e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80126ea:	f10a 0a01 	add.w	sl, sl, #1
 80126ee:	9304      	str	r3, [sp, #16]
 80126f0:	9307      	str	r3, [sp, #28]
 80126f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80126f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80126f8:	4654      	mov	r4, sl
 80126fa:	2205      	movs	r2, #5
 80126fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012700:	484e      	ldr	r0, [pc, #312]	@ (801283c <_svfiprintf_r+0x1e4>)
 8012702:	f7ed fdd5 	bl	80002b0 <memchr>
 8012706:	9a04      	ldr	r2, [sp, #16]
 8012708:	b9d8      	cbnz	r0, 8012742 <_svfiprintf_r+0xea>
 801270a:	06d0      	lsls	r0, r2, #27
 801270c:	bf44      	itt	mi
 801270e:	2320      	movmi	r3, #32
 8012710:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012714:	0711      	lsls	r1, r2, #28
 8012716:	bf44      	itt	mi
 8012718:	232b      	movmi	r3, #43	@ 0x2b
 801271a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801271e:	f89a 3000 	ldrb.w	r3, [sl]
 8012722:	2b2a      	cmp	r3, #42	@ 0x2a
 8012724:	d015      	beq.n	8012752 <_svfiprintf_r+0xfa>
 8012726:	9a07      	ldr	r2, [sp, #28]
 8012728:	4654      	mov	r4, sl
 801272a:	2000      	movs	r0, #0
 801272c:	f04f 0c0a 	mov.w	ip, #10
 8012730:	4621      	mov	r1, r4
 8012732:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012736:	3b30      	subs	r3, #48	@ 0x30
 8012738:	2b09      	cmp	r3, #9
 801273a:	d94b      	bls.n	80127d4 <_svfiprintf_r+0x17c>
 801273c:	b1b0      	cbz	r0, 801276c <_svfiprintf_r+0x114>
 801273e:	9207      	str	r2, [sp, #28]
 8012740:	e014      	b.n	801276c <_svfiprintf_r+0x114>
 8012742:	eba0 0308 	sub.w	r3, r0, r8
 8012746:	fa09 f303 	lsl.w	r3, r9, r3
 801274a:	4313      	orrs	r3, r2
 801274c:	9304      	str	r3, [sp, #16]
 801274e:	46a2      	mov	sl, r4
 8012750:	e7d2      	b.n	80126f8 <_svfiprintf_r+0xa0>
 8012752:	9b03      	ldr	r3, [sp, #12]
 8012754:	1d19      	adds	r1, r3, #4
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	9103      	str	r1, [sp, #12]
 801275a:	2b00      	cmp	r3, #0
 801275c:	bfbb      	ittet	lt
 801275e:	425b      	neglt	r3, r3
 8012760:	f042 0202 	orrlt.w	r2, r2, #2
 8012764:	9307      	strge	r3, [sp, #28]
 8012766:	9307      	strlt	r3, [sp, #28]
 8012768:	bfb8      	it	lt
 801276a:	9204      	strlt	r2, [sp, #16]
 801276c:	7823      	ldrb	r3, [r4, #0]
 801276e:	2b2e      	cmp	r3, #46	@ 0x2e
 8012770:	d10a      	bne.n	8012788 <_svfiprintf_r+0x130>
 8012772:	7863      	ldrb	r3, [r4, #1]
 8012774:	2b2a      	cmp	r3, #42	@ 0x2a
 8012776:	d132      	bne.n	80127de <_svfiprintf_r+0x186>
 8012778:	9b03      	ldr	r3, [sp, #12]
 801277a:	1d1a      	adds	r2, r3, #4
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	9203      	str	r2, [sp, #12]
 8012780:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012784:	3402      	adds	r4, #2
 8012786:	9305      	str	r3, [sp, #20]
 8012788:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801284c <_svfiprintf_r+0x1f4>
 801278c:	7821      	ldrb	r1, [r4, #0]
 801278e:	2203      	movs	r2, #3
 8012790:	4650      	mov	r0, sl
 8012792:	f7ed fd8d 	bl	80002b0 <memchr>
 8012796:	b138      	cbz	r0, 80127a8 <_svfiprintf_r+0x150>
 8012798:	9b04      	ldr	r3, [sp, #16]
 801279a:	eba0 000a 	sub.w	r0, r0, sl
 801279e:	2240      	movs	r2, #64	@ 0x40
 80127a0:	4082      	lsls	r2, r0
 80127a2:	4313      	orrs	r3, r2
 80127a4:	3401      	adds	r4, #1
 80127a6:	9304      	str	r3, [sp, #16]
 80127a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127ac:	4824      	ldr	r0, [pc, #144]	@ (8012840 <_svfiprintf_r+0x1e8>)
 80127ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80127b2:	2206      	movs	r2, #6
 80127b4:	f7ed fd7c 	bl	80002b0 <memchr>
 80127b8:	2800      	cmp	r0, #0
 80127ba:	d036      	beq.n	801282a <_svfiprintf_r+0x1d2>
 80127bc:	4b21      	ldr	r3, [pc, #132]	@ (8012844 <_svfiprintf_r+0x1ec>)
 80127be:	bb1b      	cbnz	r3, 8012808 <_svfiprintf_r+0x1b0>
 80127c0:	9b03      	ldr	r3, [sp, #12]
 80127c2:	3307      	adds	r3, #7
 80127c4:	f023 0307 	bic.w	r3, r3, #7
 80127c8:	3308      	adds	r3, #8
 80127ca:	9303      	str	r3, [sp, #12]
 80127cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127ce:	4433      	add	r3, r6
 80127d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80127d2:	e76a      	b.n	80126aa <_svfiprintf_r+0x52>
 80127d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80127d8:	460c      	mov	r4, r1
 80127da:	2001      	movs	r0, #1
 80127dc:	e7a8      	b.n	8012730 <_svfiprintf_r+0xd8>
 80127de:	2300      	movs	r3, #0
 80127e0:	3401      	adds	r4, #1
 80127e2:	9305      	str	r3, [sp, #20]
 80127e4:	4619      	mov	r1, r3
 80127e6:	f04f 0c0a 	mov.w	ip, #10
 80127ea:	4620      	mov	r0, r4
 80127ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80127f0:	3a30      	subs	r2, #48	@ 0x30
 80127f2:	2a09      	cmp	r2, #9
 80127f4:	d903      	bls.n	80127fe <_svfiprintf_r+0x1a6>
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d0c6      	beq.n	8012788 <_svfiprintf_r+0x130>
 80127fa:	9105      	str	r1, [sp, #20]
 80127fc:	e7c4      	b.n	8012788 <_svfiprintf_r+0x130>
 80127fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8012802:	4604      	mov	r4, r0
 8012804:	2301      	movs	r3, #1
 8012806:	e7f0      	b.n	80127ea <_svfiprintf_r+0x192>
 8012808:	ab03      	add	r3, sp, #12
 801280a:	9300      	str	r3, [sp, #0]
 801280c:	462a      	mov	r2, r5
 801280e:	4b0e      	ldr	r3, [pc, #56]	@ (8012848 <_svfiprintf_r+0x1f0>)
 8012810:	a904      	add	r1, sp, #16
 8012812:	4638      	mov	r0, r7
 8012814:	f3af 8000 	nop.w
 8012818:	1c42      	adds	r2, r0, #1
 801281a:	4606      	mov	r6, r0
 801281c:	d1d6      	bne.n	80127cc <_svfiprintf_r+0x174>
 801281e:	89ab      	ldrh	r3, [r5, #12]
 8012820:	065b      	lsls	r3, r3, #25
 8012822:	f53f af2d 	bmi.w	8012680 <_svfiprintf_r+0x28>
 8012826:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012828:	e72c      	b.n	8012684 <_svfiprintf_r+0x2c>
 801282a:	ab03      	add	r3, sp, #12
 801282c:	9300      	str	r3, [sp, #0]
 801282e:	462a      	mov	r2, r5
 8012830:	4b05      	ldr	r3, [pc, #20]	@ (8012848 <_svfiprintf_r+0x1f0>)
 8012832:	a904      	add	r1, sp, #16
 8012834:	4638      	mov	r0, r7
 8012836:	f000 f879 	bl	801292c <_printf_i>
 801283a:	e7ed      	b.n	8012818 <_svfiprintf_r+0x1c0>
 801283c:	0802aad8 	.word	0x0802aad8
 8012840:	0802aae2 	.word	0x0802aae2
 8012844:	00000000 	.word	0x00000000
 8012848:	080125a1 	.word	0x080125a1
 801284c:	0802aade 	.word	0x0802aade

08012850 <_printf_common>:
 8012850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012854:	4616      	mov	r6, r2
 8012856:	4698      	mov	r8, r3
 8012858:	688a      	ldr	r2, [r1, #8]
 801285a:	690b      	ldr	r3, [r1, #16]
 801285c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012860:	4293      	cmp	r3, r2
 8012862:	bfb8      	it	lt
 8012864:	4613      	movlt	r3, r2
 8012866:	6033      	str	r3, [r6, #0]
 8012868:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801286c:	4607      	mov	r7, r0
 801286e:	460c      	mov	r4, r1
 8012870:	b10a      	cbz	r2, 8012876 <_printf_common+0x26>
 8012872:	3301      	adds	r3, #1
 8012874:	6033      	str	r3, [r6, #0]
 8012876:	6823      	ldr	r3, [r4, #0]
 8012878:	0699      	lsls	r1, r3, #26
 801287a:	bf42      	ittt	mi
 801287c:	6833      	ldrmi	r3, [r6, #0]
 801287e:	3302      	addmi	r3, #2
 8012880:	6033      	strmi	r3, [r6, #0]
 8012882:	6825      	ldr	r5, [r4, #0]
 8012884:	f015 0506 	ands.w	r5, r5, #6
 8012888:	d106      	bne.n	8012898 <_printf_common+0x48>
 801288a:	f104 0a19 	add.w	sl, r4, #25
 801288e:	68e3      	ldr	r3, [r4, #12]
 8012890:	6832      	ldr	r2, [r6, #0]
 8012892:	1a9b      	subs	r3, r3, r2
 8012894:	42ab      	cmp	r3, r5
 8012896:	dc26      	bgt.n	80128e6 <_printf_common+0x96>
 8012898:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801289c:	6822      	ldr	r2, [r4, #0]
 801289e:	3b00      	subs	r3, #0
 80128a0:	bf18      	it	ne
 80128a2:	2301      	movne	r3, #1
 80128a4:	0692      	lsls	r2, r2, #26
 80128a6:	d42b      	bmi.n	8012900 <_printf_common+0xb0>
 80128a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80128ac:	4641      	mov	r1, r8
 80128ae:	4638      	mov	r0, r7
 80128b0:	47c8      	blx	r9
 80128b2:	3001      	adds	r0, #1
 80128b4:	d01e      	beq.n	80128f4 <_printf_common+0xa4>
 80128b6:	6823      	ldr	r3, [r4, #0]
 80128b8:	6922      	ldr	r2, [r4, #16]
 80128ba:	f003 0306 	and.w	r3, r3, #6
 80128be:	2b04      	cmp	r3, #4
 80128c0:	bf02      	ittt	eq
 80128c2:	68e5      	ldreq	r5, [r4, #12]
 80128c4:	6833      	ldreq	r3, [r6, #0]
 80128c6:	1aed      	subeq	r5, r5, r3
 80128c8:	68a3      	ldr	r3, [r4, #8]
 80128ca:	bf0c      	ite	eq
 80128cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80128d0:	2500      	movne	r5, #0
 80128d2:	4293      	cmp	r3, r2
 80128d4:	bfc4      	itt	gt
 80128d6:	1a9b      	subgt	r3, r3, r2
 80128d8:	18ed      	addgt	r5, r5, r3
 80128da:	2600      	movs	r6, #0
 80128dc:	341a      	adds	r4, #26
 80128de:	42b5      	cmp	r5, r6
 80128e0:	d11a      	bne.n	8012918 <_printf_common+0xc8>
 80128e2:	2000      	movs	r0, #0
 80128e4:	e008      	b.n	80128f8 <_printf_common+0xa8>
 80128e6:	2301      	movs	r3, #1
 80128e8:	4652      	mov	r2, sl
 80128ea:	4641      	mov	r1, r8
 80128ec:	4638      	mov	r0, r7
 80128ee:	47c8      	blx	r9
 80128f0:	3001      	adds	r0, #1
 80128f2:	d103      	bne.n	80128fc <_printf_common+0xac>
 80128f4:	f04f 30ff 	mov.w	r0, #4294967295
 80128f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128fc:	3501      	adds	r5, #1
 80128fe:	e7c6      	b.n	801288e <_printf_common+0x3e>
 8012900:	18e1      	adds	r1, r4, r3
 8012902:	1c5a      	adds	r2, r3, #1
 8012904:	2030      	movs	r0, #48	@ 0x30
 8012906:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801290a:	4422      	add	r2, r4
 801290c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012910:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012914:	3302      	adds	r3, #2
 8012916:	e7c7      	b.n	80128a8 <_printf_common+0x58>
 8012918:	2301      	movs	r3, #1
 801291a:	4622      	mov	r2, r4
 801291c:	4641      	mov	r1, r8
 801291e:	4638      	mov	r0, r7
 8012920:	47c8      	blx	r9
 8012922:	3001      	adds	r0, #1
 8012924:	d0e6      	beq.n	80128f4 <_printf_common+0xa4>
 8012926:	3601      	adds	r6, #1
 8012928:	e7d9      	b.n	80128de <_printf_common+0x8e>
	...

0801292c <_printf_i>:
 801292c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012930:	7e0f      	ldrb	r7, [r1, #24]
 8012932:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012934:	2f78      	cmp	r7, #120	@ 0x78
 8012936:	4691      	mov	r9, r2
 8012938:	4680      	mov	r8, r0
 801293a:	460c      	mov	r4, r1
 801293c:	469a      	mov	sl, r3
 801293e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012942:	d807      	bhi.n	8012954 <_printf_i+0x28>
 8012944:	2f62      	cmp	r7, #98	@ 0x62
 8012946:	d80a      	bhi.n	801295e <_printf_i+0x32>
 8012948:	2f00      	cmp	r7, #0
 801294a:	f000 80d2 	beq.w	8012af2 <_printf_i+0x1c6>
 801294e:	2f58      	cmp	r7, #88	@ 0x58
 8012950:	f000 80b9 	beq.w	8012ac6 <_printf_i+0x19a>
 8012954:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012958:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801295c:	e03a      	b.n	80129d4 <_printf_i+0xa8>
 801295e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012962:	2b15      	cmp	r3, #21
 8012964:	d8f6      	bhi.n	8012954 <_printf_i+0x28>
 8012966:	a101      	add	r1, pc, #4	@ (adr r1, 801296c <_printf_i+0x40>)
 8012968:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801296c:	080129c5 	.word	0x080129c5
 8012970:	080129d9 	.word	0x080129d9
 8012974:	08012955 	.word	0x08012955
 8012978:	08012955 	.word	0x08012955
 801297c:	08012955 	.word	0x08012955
 8012980:	08012955 	.word	0x08012955
 8012984:	080129d9 	.word	0x080129d9
 8012988:	08012955 	.word	0x08012955
 801298c:	08012955 	.word	0x08012955
 8012990:	08012955 	.word	0x08012955
 8012994:	08012955 	.word	0x08012955
 8012998:	08012ad9 	.word	0x08012ad9
 801299c:	08012a03 	.word	0x08012a03
 80129a0:	08012a93 	.word	0x08012a93
 80129a4:	08012955 	.word	0x08012955
 80129a8:	08012955 	.word	0x08012955
 80129ac:	08012afb 	.word	0x08012afb
 80129b0:	08012955 	.word	0x08012955
 80129b4:	08012a03 	.word	0x08012a03
 80129b8:	08012955 	.word	0x08012955
 80129bc:	08012955 	.word	0x08012955
 80129c0:	08012a9b 	.word	0x08012a9b
 80129c4:	6833      	ldr	r3, [r6, #0]
 80129c6:	1d1a      	adds	r2, r3, #4
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	6032      	str	r2, [r6, #0]
 80129cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80129d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80129d4:	2301      	movs	r3, #1
 80129d6:	e09d      	b.n	8012b14 <_printf_i+0x1e8>
 80129d8:	6833      	ldr	r3, [r6, #0]
 80129da:	6820      	ldr	r0, [r4, #0]
 80129dc:	1d19      	adds	r1, r3, #4
 80129de:	6031      	str	r1, [r6, #0]
 80129e0:	0606      	lsls	r6, r0, #24
 80129e2:	d501      	bpl.n	80129e8 <_printf_i+0xbc>
 80129e4:	681d      	ldr	r5, [r3, #0]
 80129e6:	e003      	b.n	80129f0 <_printf_i+0xc4>
 80129e8:	0645      	lsls	r5, r0, #25
 80129ea:	d5fb      	bpl.n	80129e4 <_printf_i+0xb8>
 80129ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80129f0:	2d00      	cmp	r5, #0
 80129f2:	da03      	bge.n	80129fc <_printf_i+0xd0>
 80129f4:	232d      	movs	r3, #45	@ 0x2d
 80129f6:	426d      	negs	r5, r5
 80129f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80129fc:	4859      	ldr	r0, [pc, #356]	@ (8012b64 <_printf_i+0x238>)
 80129fe:	230a      	movs	r3, #10
 8012a00:	e011      	b.n	8012a26 <_printf_i+0xfa>
 8012a02:	6821      	ldr	r1, [r4, #0]
 8012a04:	6833      	ldr	r3, [r6, #0]
 8012a06:	0608      	lsls	r0, r1, #24
 8012a08:	f853 5b04 	ldr.w	r5, [r3], #4
 8012a0c:	d402      	bmi.n	8012a14 <_printf_i+0xe8>
 8012a0e:	0649      	lsls	r1, r1, #25
 8012a10:	bf48      	it	mi
 8012a12:	b2ad      	uxthmi	r5, r5
 8012a14:	2f6f      	cmp	r7, #111	@ 0x6f
 8012a16:	4853      	ldr	r0, [pc, #332]	@ (8012b64 <_printf_i+0x238>)
 8012a18:	6033      	str	r3, [r6, #0]
 8012a1a:	bf14      	ite	ne
 8012a1c:	230a      	movne	r3, #10
 8012a1e:	2308      	moveq	r3, #8
 8012a20:	2100      	movs	r1, #0
 8012a22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012a26:	6866      	ldr	r6, [r4, #4]
 8012a28:	60a6      	str	r6, [r4, #8]
 8012a2a:	2e00      	cmp	r6, #0
 8012a2c:	bfa2      	ittt	ge
 8012a2e:	6821      	ldrge	r1, [r4, #0]
 8012a30:	f021 0104 	bicge.w	r1, r1, #4
 8012a34:	6021      	strge	r1, [r4, #0]
 8012a36:	b90d      	cbnz	r5, 8012a3c <_printf_i+0x110>
 8012a38:	2e00      	cmp	r6, #0
 8012a3a:	d04b      	beq.n	8012ad4 <_printf_i+0x1a8>
 8012a3c:	4616      	mov	r6, r2
 8012a3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8012a42:	fb03 5711 	mls	r7, r3, r1, r5
 8012a46:	5dc7      	ldrb	r7, [r0, r7]
 8012a48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012a4c:	462f      	mov	r7, r5
 8012a4e:	42bb      	cmp	r3, r7
 8012a50:	460d      	mov	r5, r1
 8012a52:	d9f4      	bls.n	8012a3e <_printf_i+0x112>
 8012a54:	2b08      	cmp	r3, #8
 8012a56:	d10b      	bne.n	8012a70 <_printf_i+0x144>
 8012a58:	6823      	ldr	r3, [r4, #0]
 8012a5a:	07df      	lsls	r7, r3, #31
 8012a5c:	d508      	bpl.n	8012a70 <_printf_i+0x144>
 8012a5e:	6923      	ldr	r3, [r4, #16]
 8012a60:	6861      	ldr	r1, [r4, #4]
 8012a62:	4299      	cmp	r1, r3
 8012a64:	bfde      	ittt	le
 8012a66:	2330      	movle	r3, #48	@ 0x30
 8012a68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012a6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012a70:	1b92      	subs	r2, r2, r6
 8012a72:	6122      	str	r2, [r4, #16]
 8012a74:	f8cd a000 	str.w	sl, [sp]
 8012a78:	464b      	mov	r3, r9
 8012a7a:	aa03      	add	r2, sp, #12
 8012a7c:	4621      	mov	r1, r4
 8012a7e:	4640      	mov	r0, r8
 8012a80:	f7ff fee6 	bl	8012850 <_printf_common>
 8012a84:	3001      	adds	r0, #1
 8012a86:	d14a      	bne.n	8012b1e <_printf_i+0x1f2>
 8012a88:	f04f 30ff 	mov.w	r0, #4294967295
 8012a8c:	b004      	add	sp, #16
 8012a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a92:	6823      	ldr	r3, [r4, #0]
 8012a94:	f043 0320 	orr.w	r3, r3, #32
 8012a98:	6023      	str	r3, [r4, #0]
 8012a9a:	4833      	ldr	r0, [pc, #204]	@ (8012b68 <_printf_i+0x23c>)
 8012a9c:	2778      	movs	r7, #120	@ 0x78
 8012a9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012aa2:	6823      	ldr	r3, [r4, #0]
 8012aa4:	6831      	ldr	r1, [r6, #0]
 8012aa6:	061f      	lsls	r7, r3, #24
 8012aa8:	f851 5b04 	ldr.w	r5, [r1], #4
 8012aac:	d402      	bmi.n	8012ab4 <_printf_i+0x188>
 8012aae:	065f      	lsls	r7, r3, #25
 8012ab0:	bf48      	it	mi
 8012ab2:	b2ad      	uxthmi	r5, r5
 8012ab4:	6031      	str	r1, [r6, #0]
 8012ab6:	07d9      	lsls	r1, r3, #31
 8012ab8:	bf44      	itt	mi
 8012aba:	f043 0320 	orrmi.w	r3, r3, #32
 8012abe:	6023      	strmi	r3, [r4, #0]
 8012ac0:	b11d      	cbz	r5, 8012aca <_printf_i+0x19e>
 8012ac2:	2310      	movs	r3, #16
 8012ac4:	e7ac      	b.n	8012a20 <_printf_i+0xf4>
 8012ac6:	4827      	ldr	r0, [pc, #156]	@ (8012b64 <_printf_i+0x238>)
 8012ac8:	e7e9      	b.n	8012a9e <_printf_i+0x172>
 8012aca:	6823      	ldr	r3, [r4, #0]
 8012acc:	f023 0320 	bic.w	r3, r3, #32
 8012ad0:	6023      	str	r3, [r4, #0]
 8012ad2:	e7f6      	b.n	8012ac2 <_printf_i+0x196>
 8012ad4:	4616      	mov	r6, r2
 8012ad6:	e7bd      	b.n	8012a54 <_printf_i+0x128>
 8012ad8:	6833      	ldr	r3, [r6, #0]
 8012ada:	6825      	ldr	r5, [r4, #0]
 8012adc:	6961      	ldr	r1, [r4, #20]
 8012ade:	1d18      	adds	r0, r3, #4
 8012ae0:	6030      	str	r0, [r6, #0]
 8012ae2:	062e      	lsls	r6, r5, #24
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	d501      	bpl.n	8012aec <_printf_i+0x1c0>
 8012ae8:	6019      	str	r1, [r3, #0]
 8012aea:	e002      	b.n	8012af2 <_printf_i+0x1c6>
 8012aec:	0668      	lsls	r0, r5, #25
 8012aee:	d5fb      	bpl.n	8012ae8 <_printf_i+0x1bc>
 8012af0:	8019      	strh	r1, [r3, #0]
 8012af2:	2300      	movs	r3, #0
 8012af4:	6123      	str	r3, [r4, #16]
 8012af6:	4616      	mov	r6, r2
 8012af8:	e7bc      	b.n	8012a74 <_printf_i+0x148>
 8012afa:	6833      	ldr	r3, [r6, #0]
 8012afc:	1d1a      	adds	r2, r3, #4
 8012afe:	6032      	str	r2, [r6, #0]
 8012b00:	681e      	ldr	r6, [r3, #0]
 8012b02:	6862      	ldr	r2, [r4, #4]
 8012b04:	2100      	movs	r1, #0
 8012b06:	4630      	mov	r0, r6
 8012b08:	f7ed fbd2 	bl	80002b0 <memchr>
 8012b0c:	b108      	cbz	r0, 8012b12 <_printf_i+0x1e6>
 8012b0e:	1b80      	subs	r0, r0, r6
 8012b10:	6060      	str	r0, [r4, #4]
 8012b12:	6863      	ldr	r3, [r4, #4]
 8012b14:	6123      	str	r3, [r4, #16]
 8012b16:	2300      	movs	r3, #0
 8012b18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012b1c:	e7aa      	b.n	8012a74 <_printf_i+0x148>
 8012b1e:	6923      	ldr	r3, [r4, #16]
 8012b20:	4632      	mov	r2, r6
 8012b22:	4649      	mov	r1, r9
 8012b24:	4640      	mov	r0, r8
 8012b26:	47d0      	blx	sl
 8012b28:	3001      	adds	r0, #1
 8012b2a:	d0ad      	beq.n	8012a88 <_printf_i+0x15c>
 8012b2c:	6823      	ldr	r3, [r4, #0]
 8012b2e:	079b      	lsls	r3, r3, #30
 8012b30:	d413      	bmi.n	8012b5a <_printf_i+0x22e>
 8012b32:	68e0      	ldr	r0, [r4, #12]
 8012b34:	9b03      	ldr	r3, [sp, #12]
 8012b36:	4298      	cmp	r0, r3
 8012b38:	bfb8      	it	lt
 8012b3a:	4618      	movlt	r0, r3
 8012b3c:	e7a6      	b.n	8012a8c <_printf_i+0x160>
 8012b3e:	2301      	movs	r3, #1
 8012b40:	4632      	mov	r2, r6
 8012b42:	4649      	mov	r1, r9
 8012b44:	4640      	mov	r0, r8
 8012b46:	47d0      	blx	sl
 8012b48:	3001      	adds	r0, #1
 8012b4a:	d09d      	beq.n	8012a88 <_printf_i+0x15c>
 8012b4c:	3501      	adds	r5, #1
 8012b4e:	68e3      	ldr	r3, [r4, #12]
 8012b50:	9903      	ldr	r1, [sp, #12]
 8012b52:	1a5b      	subs	r3, r3, r1
 8012b54:	42ab      	cmp	r3, r5
 8012b56:	dcf2      	bgt.n	8012b3e <_printf_i+0x212>
 8012b58:	e7eb      	b.n	8012b32 <_printf_i+0x206>
 8012b5a:	2500      	movs	r5, #0
 8012b5c:	f104 0619 	add.w	r6, r4, #25
 8012b60:	e7f5      	b.n	8012b4e <_printf_i+0x222>
 8012b62:	bf00      	nop
 8012b64:	0802aae9 	.word	0x0802aae9
 8012b68:	0802aafa 	.word	0x0802aafa

08012b6c <_sbrk_r>:
 8012b6c:	b538      	push	{r3, r4, r5, lr}
 8012b6e:	4d06      	ldr	r5, [pc, #24]	@ (8012b88 <_sbrk_r+0x1c>)
 8012b70:	2300      	movs	r3, #0
 8012b72:	4604      	mov	r4, r0
 8012b74:	4608      	mov	r0, r1
 8012b76:	602b      	str	r3, [r5, #0]
 8012b78:	f7ef fcbc 	bl	80024f4 <_sbrk>
 8012b7c:	1c43      	adds	r3, r0, #1
 8012b7e:	d102      	bne.n	8012b86 <_sbrk_r+0x1a>
 8012b80:	682b      	ldr	r3, [r5, #0]
 8012b82:	b103      	cbz	r3, 8012b86 <_sbrk_r+0x1a>
 8012b84:	6023      	str	r3, [r4, #0]
 8012b86:	bd38      	pop	{r3, r4, r5, pc}
 8012b88:	20010448 	.word	0x20010448

08012b8c <_realloc_r>:
 8012b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b90:	4680      	mov	r8, r0
 8012b92:	4615      	mov	r5, r2
 8012b94:	460c      	mov	r4, r1
 8012b96:	b921      	cbnz	r1, 8012ba2 <_realloc_r+0x16>
 8012b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b9c:	4611      	mov	r1, r2
 8012b9e:	f7ff bc73 	b.w	8012488 <_malloc_r>
 8012ba2:	b92a      	cbnz	r2, 8012bb0 <_realloc_r+0x24>
 8012ba4:	f7ff fc04 	bl	80123b0 <_free_r>
 8012ba8:	2400      	movs	r4, #0
 8012baa:	4620      	mov	r0, r4
 8012bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bb0:	f000 f81a 	bl	8012be8 <_malloc_usable_size_r>
 8012bb4:	4285      	cmp	r5, r0
 8012bb6:	4606      	mov	r6, r0
 8012bb8:	d802      	bhi.n	8012bc0 <_realloc_r+0x34>
 8012bba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012bbe:	d8f4      	bhi.n	8012baa <_realloc_r+0x1e>
 8012bc0:	4629      	mov	r1, r5
 8012bc2:	4640      	mov	r0, r8
 8012bc4:	f7ff fc60 	bl	8012488 <_malloc_r>
 8012bc8:	4607      	mov	r7, r0
 8012bca:	2800      	cmp	r0, #0
 8012bcc:	d0ec      	beq.n	8012ba8 <_realloc_r+0x1c>
 8012bce:	42b5      	cmp	r5, r6
 8012bd0:	462a      	mov	r2, r5
 8012bd2:	4621      	mov	r1, r4
 8012bd4:	bf28      	it	cs
 8012bd6:	4632      	movcs	r2, r6
 8012bd8:	f7ff fbdc 	bl	8012394 <memcpy>
 8012bdc:	4621      	mov	r1, r4
 8012bde:	4640      	mov	r0, r8
 8012be0:	f7ff fbe6 	bl	80123b0 <_free_r>
 8012be4:	463c      	mov	r4, r7
 8012be6:	e7e0      	b.n	8012baa <_realloc_r+0x1e>

08012be8 <_malloc_usable_size_r>:
 8012be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012bec:	1f18      	subs	r0, r3, #4
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	bfbc      	itt	lt
 8012bf2:	580b      	ldrlt	r3, [r1, r0]
 8012bf4:	18c0      	addlt	r0, r0, r3
 8012bf6:	4770      	bx	lr

08012bf8 <sqrtf>:
 8012bf8:	b508      	push	{r3, lr}
 8012bfa:	ed2d 8b02 	vpush	{d8}
 8012bfe:	eeb0 8a40 	vmov.f32	s16, s0
 8012c02:	f000 f817 	bl	8012c34 <__ieee754_sqrtf>
 8012c06:	eeb4 8a48 	vcmp.f32	s16, s16
 8012c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c0e:	d60c      	bvs.n	8012c2a <sqrtf+0x32>
 8012c10:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8012c30 <sqrtf+0x38>
 8012c14:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c1c:	d505      	bpl.n	8012c2a <sqrtf+0x32>
 8012c1e:	f7ff fb8d 	bl	801233c <__errno>
 8012c22:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012c26:	2321      	movs	r3, #33	@ 0x21
 8012c28:	6003      	str	r3, [r0, #0]
 8012c2a:	ecbd 8b02 	vpop	{d8}
 8012c2e:	bd08      	pop	{r3, pc}
 8012c30:	00000000 	.word	0x00000000

08012c34 <__ieee754_sqrtf>:
 8012c34:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012c38:	4770      	bx	lr
	...

08012c3c <_init>:
 8012c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c3e:	bf00      	nop
 8012c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c42:	bc08      	pop	{r3}
 8012c44:	469e      	mov	lr, r3
 8012c46:	4770      	bx	lr

08012c48 <_fini>:
 8012c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c4a:	bf00      	nop
 8012c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c4e:	bc08      	pop	{r3}
 8012c50:	469e      	mov	lr, r3
 8012c52:	4770      	bx	lr
